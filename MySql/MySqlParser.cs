//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;


[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
//[System.CLSCompliant(false)]
public partial class MySqlParser : Parser
{
    protected static DFA[] decisionToDFA;
    protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
    public const int
        SPACE = 1, SPEC_MYSQL_COMMENT = 2, COMMENT_INPUT = 3, LINE_COMMENT = 4, ADD = 5,
        ALL = 6, ALTER = 7, ALWAYS = 8, ANALYZE = 9, AND = 10, AS = 11, ASC = 12, BEFORE = 13,
        BETWEEN = 14, BOTH = 15, BY = 16, CALL = 17, CASCADE = 18, CASE = 19, CAST = 20, CHANGE = 21,
        CHARACTER = 22, CHECK = 23, COLLATE = 24, COLUMN = 25, CONDITION = 26, CONSTRAINT = 27,
        CONTINUE = 28, CONVERT = 29, CREATE = 30, CROSS = 31, CURRENT = 32, CURRENT_USER = 33,
        CURSOR = 34, DATABASE = 35, DATABASES = 36, DECLARE = 37, DEFAULT = 38, DELAYED = 39,
        DELETE = 40, DESC = 41, DESCRIBE = 42, DETERMINISTIC = 43, DIAGNOSTICS = 44, DISTINCT = 45,
        DISTINCTROW = 46, DROP = 47, EACH = 48, ELSE = 49, ELSEIF = 50, ENCLOSED = 51, ESCAPED = 52,
        EXISTS = 53, EXIT = 54, EXPLAIN = 55, FALSE = 56, FETCH = 57, FOR = 58, FORCE = 59,
        FOREIGN = 60, FROM = 61, FULLTEXT = 62, GENERATED = 63, GET = 64, GRANT = 65, GROUP = 66,
        HAVING = 67, HIGH_PRIORITY = 68, IF = 69, IGNORE = 70, IN = 71, INDEX = 72, INFILE = 73,
        INNER = 74, INOUT = 75, INSERT = 76, INTERVAL = 77, INTO = 78, IS = 79, ITERATE = 80,
        JOIN = 81, KEY = 82, KEYS = 83, KILL = 84, LEADING = 85, LEAVE = 86, LEFT = 87, LIKE = 88,
        LIMIT = 89, LINEAR = 90, LINES = 91, LOAD = 92, LOCK = 93, LOOP = 94, LOW_PRIORITY = 95,
        MASTER_BIND = 96, MASTER_SSL_VERIFY_SERVER_CERT = 97, MATCH = 98, MAXVALUE = 99,
        MODIFIES = 100, NATURAL = 101, NOT = 102, NO_WRITE_TO_BINLOG = 103, NULL_LITERAL = 104,
        NUMBER = 105, ON = 106, OPTIMIZE = 107, OPTION = 108, OPTIONALLY = 109, OR = 110,
        ORDER = 111, OUT = 112, OUTER = 113, OUTFILE = 114, PARTITION = 115, PRIMARY = 116,
        PROCEDURE = 117, PURGE = 118, RANGE = 119, READ = 120, READS = 121, REFERENCES = 122,
        REGEXP = 123, RELEASE = 124, RENAME = 125, REPEAT = 126, REPLACE = 127, REQUIRE = 128,
        RESIGNAL = 129, RESTRICT = 130, RETURN = 131, REVOKE = 132, RIGHT = 133, RLIKE = 134,
        SCHEMA = 135, SCHEMAS = 136, SELECT = 137, SET = 138, SEPARATOR = 139, SHOW = 140,
        SIGNAL = 141, SPATIAL = 142, SQL = 143, SQLEXCEPTION = 144, SQLSTATE = 145, SQLWARNING = 146,
        SQL_BIG_RESULT = 147, SQL_CALC_FOUND_ROWS = 148, SQL_SMALL_RESULT = 149, SSL = 150,
        STACKED = 151, STARTING = 152, STRAIGHT_JOIN = 153, TABLE = 154, TERMINATED = 155,
        THEN = 156, TO = 157, TRAILING = 158, TRIGGER = 159, TRUE = 160, UNDO = 161, UNION = 162,
        UNIQUE = 163, UNLOCK = 164, UNSIGNED = 165, UPDATE = 166, USAGE = 167, USE = 168,
        USING = 169, VALUES = 170, WHEN = 171, WHERE = 172, WHILE = 173, WITH = 174, WRITE = 175,
        XOR = 176, ZEROFILL = 177, TINYINT = 178, SMALLINT = 179, MEDIUMINT = 180, INT = 181,
        INTEGER = 182, BIGINT = 183, REAL = 184, DOUBLE = 185, PRECISION = 186, FLOAT = 187,
        DECIMAL = 188, DEC = 189, NUMERIC = 190, DATE = 191, TIME = 192, TIMESTAMP = 193,
        DATETIME = 194, YEAR = 195, CHAR = 196, VARCHAR = 197, NVARCHAR = 198, NATIONAL = 199,
        BINARY = 200, VARBINARY = 201, TINYBLOB = 202, BLOB = 203, MEDIUMBLOB = 204, LONGBLOB = 205,
        TINYTEXT = 206, TEXT = 207, MEDIUMTEXT = 208, LONGTEXT = 209, ENUM = 210, VARYING = 211,
        SERIAL = 212, YEAR_MONTH = 213, DAY_HOUR = 214, DAY_MINUTE = 215, DAY_SECOND = 216,
        HOUR_MINUTE = 217, HOUR_SECOND = 218, MINUTE_SECOND = 219, SECOND_MICROSECOND = 220,
        MINUTE_MICROSECOND = 221, HOUR_MICROSECOND = 222, DAY_MICROSECOND = 223, AVG = 224,
        BIT_AND = 225, BIT_OR = 226, BIT_XOR = 227, COUNT = 228, GROUP_CONCAT = 229, MAX = 230,
        MIN = 231, STD = 232, STDDEV = 233, STDDEV_POP = 234, STDDEV_SAMP = 235, SUM = 236,
        VAR_POP = 237, VAR_SAMP = 238, VARIANCE = 239, CURRENT_DATE = 240, CURRENT_TIME = 241,
        CURRENT_TIMESTAMP = 242, LOCALTIME = 243, CURDATE = 244, CURTIME = 245, DATE_ADD = 246,
        DATE_SUB = 247, EXTRACT = 248, LOCALTIMESTAMP = 249, NOW = 250, POSITION = 251,
        SUBSTR = 252, SUBSTRING = 253, SYSDATE = 254, TRIM = 255, UTC_DATE = 256, UTC_TIME = 257,
        UTC_TIMESTAMP = 258, ACCOUNT = 259, ACTION = 260, AFTER = 261, AGGREGATE = 262,
        ALGORITHM = 263, ANY = 264, AT = 265, AUTHORS = 266, AUTOCOMMIT = 267, AUTOEXTEND_SIZE = 268,
        AUTO_INCREMENT = 269, AVG_ROW_LENGTH = 270, BEGIN = 271, BINLOG = 272, BIT = 273,
        BLOCK = 274, BOOL = 275, BOOLEAN = 276, BTREE = 277, CACHE = 278, CASCADED = 279,
        CHAIN = 280, CHANGED = 281, CHANNEL = 282, CHECKSUM = 283, PAGE_CHECKSUM = 284,
        CIPHER = 285, CLASS_ORIGIN = 286, CLIENT = 287, CLOSE = 288, COALESCE = 289, CODE = 290,
        COLUMNS = 291, COLUMN_FORMAT = 292, COLUMN_NAME = 293, COMMENT = 294, COMMIT = 295,
        COMPACT = 296, COMPLETION = 297, COMPRESSED = 298, COMPRESSION = 299, CONCURRENT = 300,
        CONNECTION = 301, CONSISTENT = 302, CONSTRAINT_CATALOG = 303, CONSTRAINT_SCHEMA = 304,
        CONSTRAINT_NAME = 305, CONTAINS = 306, CONTEXT = 307, CONTRIBUTORS = 308, COPY = 309,
        CPU = 310, CURSOR_NAME = 311, DATA = 312, DATAFILE = 313, DEALLOCATE = 314, DEFAULT_AUTH = 315,
        DEFINER = 316, DELAY_KEY_WRITE = 317, DES_KEY_FILE = 318, DIRECTORY = 319, DISABLE = 320,
        DISCARD = 321, DISK = 322, DO = 323, DUMPFILE = 324, DUPLICATE = 325, DYNAMIC = 326,
        ENABLE = 327, ENCRYPTION = 328, END = 329, ENDS = 330, ENGINE = 331, ENGINES = 332,
        ERROR = 333, ERRORS = 334, ESCAPE = 335, EVEN = 336, EVENT = 337, EVENTS = 338, EVERY = 339,
        EXCHANGE = 340, EXCLUSIVE = 341, EXPIRE = 342, EXPORT = 343, EXTENDED = 344, EXTENT_SIZE = 345,
        FAST = 346, FAULTS = 347, FIELDS = 348, FILE_BLOCK_SIZE = 349, FILTER = 350, FIRST = 351,
        FIXED = 352, FLUSH = 353, FOLLOWS = 354, FOUND = 355, FULL = 356, FUNCTION = 357,
        GENERAL = 358, GLOBAL = 359, GRANTS = 360, GROUP_REPLICATION = 361, HANDLER = 362,
        HASH = 363, HELP = 364, HOST = 365, HOSTS = 366, IDENTIFIED = 367, IGNORE_SERVER_IDS = 368,
        IMPORT = 369, INDEXES = 370, INITIAL_SIZE = 371, INPLACE = 372, INSERT_METHOD = 373,
        INSTALL = 374, INSTANCE = 375, INVISIBLE = 376, INVOKER = 377, IO = 378, IO_THREAD = 379,
        IPC = 380, ISOLATION = 381, ISSUER = 382, JSON = 383, KEY_BLOCK_SIZE = 384, LANGUAGE = 385,
        LAST = 386, LEAVES = 387, LESS = 388, LEVEL = 389, LIST = 390, LOCAL = 391, LOGFILE = 392,
        LOGS = 393, MASTER = 394, MASTER_AUTO_POSITION = 395, MASTER_CONNECT_RETRY = 396,
        MASTER_DELAY = 397, MASTER_HEARTBEAT_PERIOD = 398, MASTER_HOST = 399, MASTER_LOG_FILE = 400,
        MASTER_LOG_POS = 401, MASTER_PASSWORD = 402, MASTER_PORT = 403, MASTER_RETRY_COUNT = 404,
        MASTER_SSL = 405, MASTER_SSL_CA = 406, MASTER_SSL_CAPATH = 407, MASTER_SSL_CERT = 408,
        MASTER_SSL_CIPHER = 409, MASTER_SSL_CRL = 410, MASTER_SSL_CRLPATH = 411, MASTER_SSL_KEY = 412,
        MASTER_TLS_VERSION = 413, MASTER_USER = 414, MAX_CONNECTIONS_PER_HOUR = 415,
        MAX_QUERIES_PER_HOUR = 416, MAX_ROWS = 417, MAX_SIZE = 418, MAX_UPDATES_PER_HOUR = 419,
        MAX_USER_CONNECTIONS = 420, MEDIUM = 421, MERGE = 422, MESSAGE_TEXT = 423, MID = 424,
        MIGRATE = 425, MIN_ROWS = 426, MODE = 427, MODIFY = 428, MUTEX = 429, MYSQL = 430,
        MYSQL_ERRNO = 431, NAME = 432, NAMES = 433, NCHAR = 434, NEVER = 435, NEXT = 436,
        NO = 437, NODEGROUP = 438, NONE = 439, OFFLINE = 440, OFFSET = 441, OJ = 442, OLD_PASSWORD = 443,
        ONE = 444, ONLINE = 445, ONLY = 446, OPEN = 447, OPTIMIZER_COSTS = 448, OPTIONS = 449,
        OWNER = 450, PACK_KEYS = 451, PAGE = 452, PARSER = 453, PARTIAL = 454, PARTITIONING = 455,
        PARTITIONS = 456, PASSWORD = 457, PHASE = 458, PLUGIN = 459, PLUGIN_DIR = 460, PLUGINS = 461,
        PORT = 462, PRECEDES = 463, PREPARE = 464, PRESERVE = 465, PREV = 466, PROCESSLIST = 467,
        PROFILE = 468, PROFILES = 469, PROXY = 470, QUERY = 471, QUICK = 472, REBUILD = 473,
        RECOVER = 474, REDO_BUFFER_SIZE = 475, REDUNDANT = 476, RELAY = 477, RELAY_LOG_FILE = 478,
        RELAY_LOG_POS = 479, RELAYLOG = 480, REMOVE = 481, REORGANIZE = 482, REPAIR = 483,
        REPLICATE_DO_DB = 484, REPLICATE_DO_TABLE = 485, REPLICATE_IGNORE_DB = 486,
        REPLICATE_IGNORE_TABLE = 487, REPLICATE_REWRITE_DB = 488, REPLICATE_WILD_DO_TABLE = 489,
        REPLICATE_WILD_IGNORE_TABLE = 490, REPLICATION = 491, RESET = 492, RESUME = 493,
        RETURNED_SQLSTATE = 494, RETURNS = 495, ROLLBACK = 496, ROLLUP = 497, ROTATE = 498,
        ROW = 499, ROWS = 500, ROW_FORMAT = 501, SAVEPOINT = 502, SCHEDULE = 503, SECURITY = 504,
        SERVER = 505, SESSION = 506, SHARE = 507, SHARED = 508, SIGNED = 509, SIMPLE = 510,
        SLAVE = 511, SLOW = 512, SNAPSHOT = 513, SOCKET = 514, SOME = 515, SONAME = 516, SOUNDS = 517,
        SOURCE = 518, SQL_AFTER_GTIDS = 519, SQL_AFTER_MTS_GAPS = 520, SQL_BEFORE_GTIDS = 521,
        SQL_BUFFER_RESULT = 522, SQL_CACHE = 523, SQL_NO_CACHE = 524, SQL_THREAD = 525,
        START = 526, STARTS = 527, STATS_AUTO_RECALC = 528, STATS_PERSISTENT = 529, STATS_SAMPLE_PAGES = 530,
        STATUS = 531, STOP = 532, STORAGE = 533, STORED = 534, STRING = 535, SUBCLASS_ORIGIN = 536,
        SUBJECT = 537, SUBPARTITION = 538, SUBPARTITIONS = 539, SUSPEND = 540, SWAPS = 541,
        SWITCHES = 542, TABLE_NAME = 543, TABLESPACE = 544, TEMPORARY = 545, TEMPTABLE = 546,
        THAN = 547, TRADITIONAL = 548, TRANSACTION = 549, TRIGGERS = 550, TRUNCATE = 551,
        UNDEFINED = 552, UNDOFILE = 553, UNDO_BUFFER_SIZE = 554, UNINSTALL = 555, UNKNOWN = 556,
        UNTIL = 557, UPGRADE = 558, USER = 559, USE_FRM = 560, USER_RESOURCES = 561, VALIDATION = 562,
        VALUE = 563, VARIABLES = 564, VIEW = 565, VIRTUAL = 566, VISIBLE = 567, WAIT = 568,
        WARNINGS = 569, WITHOUT = 570, WORK = 571, WRAPPER = 572, X509 = 573, XA = 574, XML = 575,
        EUR = 576, USA = 577, JIS = 578, ISO = 579, INTERNAL = 580, QUARTER = 581, MONTH = 582,
        DAY = 583, HOUR = 584, MINUTE = 585, WEEK = 586, SECOND = 587, MICROSECOND = 588,
        TABLES = 589, ROUTINE = 590, EXECUTE = 591, FILE = 592, PROCESS = 593, RELOAD = 594,
        SHUTDOWN = 595, SUPER = 596, PRIVILEGES = 597, SESSION_VARIABLES_ADMIN = 598,
        ARMSCII8 = 599, ASCII = 600, BIG5 = 601, CP1250 = 602, CP1251 = 603, CP1256 = 604,
        CP1257 = 605, CP850 = 606, CP852 = 607, CP866 = 608, CP932 = 609, DEC8 = 610, EUCJPMS = 611,
        EUCKR = 612, GB2312 = 613, GBK = 614, GEOSTD8 = 615, GREEK = 616, HEBREW = 617, HP8 = 618,
        KEYBCS2 = 619, KOI8R = 620, KOI8U = 621, LATIN1 = 622, LATIN2 = 623, LATIN5 = 624,
        LATIN7 = 625, MACCE = 626, MACROMAN = 627, SJIS = 628, SWE7 = 629, TIS620 = 630, UCS2 = 631,
        UJIS = 632, UTF16 = 633, UTF16LE = 634, UTF32 = 635, UTF8 = 636, UTF8MB3 = 637, UTF8MB4 = 638,
        ARCHIVE = 639, BLACKHOLE = 640, CSV = 641, FEDERATED = 642, INNODB = 643, MEMORY = 644,
        MRG_MYISAM = 645, MYISAM = 646, NDB = 647, NDBCLUSTER = 648, PERFORMANCE_SCHEMA = 649,
        TOKUDB = 650, REPEATABLE = 651, COMMITTED = 652, UNCOMMITTED = 653, SERIALIZABLE = 654,
        GEOMETRYCOLLECTION = 655, GEOMCOLLECTION = 656, GEOMETRY = 657, LINESTRING = 658,
        MULTILINESTRING = 659, MULTIPOINT = 660, MULTIPOLYGON = 661, POINT = 662, POLYGON = 663,
        ABS = 664, ACOS = 665, ADDDATE = 666, ADDTIME = 667, AES_DECRYPT = 668, AES_ENCRYPT = 669,
        AREA = 670, ASBINARY = 671, ASIN = 672, ASTEXT = 673, ASWKB = 674, ASWKT = 675, ASYMMETRIC_DECRYPT = 676,
        ASYMMETRIC_DERIVE = 677, ASYMMETRIC_ENCRYPT = 678, ASYMMETRIC_SIGN = 679, ASYMMETRIC_VERIFY = 680,
        ATAN = 681, ATAN2 = 682, BENCHMARK = 683, BIN = 684, BIT_COUNT = 685, BIT_LENGTH = 686,
        BUFFER = 687, CATALOG_NAME = 688, CEIL = 689, CEILING = 690, CENTROID = 691, CHARACTER_LENGTH = 692,
        CHARSET = 693, CHAR_LENGTH = 694, COERCIBILITY = 695, COLLATION = 696, COMPRESS = 697,
        CONCAT = 698, CONCAT_WS = 699, CONNECTION_ID = 700, CONV = 701, CONVERT_TZ = 702,
        COS = 703, COT = 704, CRC32 = 705, CREATE_ASYMMETRIC_PRIV_KEY = 706, CREATE_ASYMMETRIC_PUB_KEY = 707,
        CREATE_DH_PARAMETERS = 708, CREATE_DIGEST = 709, CROSSES = 710, DATEDIFF = 711,
        DATE_FORMAT = 712, DAYNAME = 713, DAYOFMONTH = 714, DAYOFWEEK = 715, DAYOFYEAR = 716,
        DECODE = 717, DEGREES = 718, DES_DECRYPT = 719, DES_ENCRYPT = 720, DIMENSION = 721,
        DISJOINT = 722, ELT = 723, ENCODE = 724, ENCRYPT = 725, ENDPOINT = 726, ENVELOPE = 727,
        EQUALS = 728, EXP = 729, EXPORT_SET = 730, EXTERIORRING = 731, EXTRACTVALUE = 732,
        FIELD = 733, FIND_IN_SET = 734, FLOOR = 735, FORMAT = 736, FOUND_ROWS = 737, FROM_BASE64 = 738,
        FROM_DAYS = 739, FROM_UNIXTIME = 740, GEOMCOLLFROMTEXT = 741, GEOMCOLLFROMWKB = 742,
        GEOMETRYCOLLECTIONFROMTEXT = 743, GEOMETRYCOLLECTIONFROMWKB = 744, GEOMETRYFROMTEXT = 745,
        GEOMETRYFROMWKB = 746, GEOMETRYN = 747, GEOMETRYTYPE = 748, GEOMFROMTEXT = 749,
        GEOMFROMWKB = 750, GET_FORMAT = 751, GET_LOCK = 752, GLENGTH = 753, GREATEST = 754,
        GTID_SUBSET = 755, GTID_SUBTRACT = 756, HEX = 757, IFNULL = 758, INET6_ATON = 759,
        INET6_NTOA = 760, INET_ATON = 761, INET_NTOA = 762, INSTR = 763, INTERIORRINGN = 764,
        INTERSECTS = 765, ISCLOSED = 766, ISEMPTY = 767, ISNULL = 768, ISSIMPLE = 769, IS_FREE_LOCK = 770,
        IS_IPV4 = 771, IS_IPV4_COMPAT = 772, IS_IPV4_MAPPED = 773, IS_IPV6 = 774, IS_USED_LOCK = 775,
        LAST_INSERT_ID = 776, LCASE = 777, LEAST = 778, LENGTH = 779, LINEFROMTEXT = 780,
        LINEFROMWKB = 781, LINESTRINGFROMTEXT = 782, LINESTRINGFROMWKB = 783, LN = 784,
        LOAD_FILE = 785, LOCATE = 786, LOG = 787, LOG10 = 788, LOG2 = 789, LOWER = 790, LPAD = 791,
        LTRIM = 792, MAKEDATE = 793, MAKETIME = 794, MAKE_SET = 795, MASTER_POS_WAIT = 796,
        MBRCONTAINS = 797, MBRDISJOINT = 798, MBREQUAL = 799, MBRINTERSECTS = 800, MBROVERLAPS = 801,
        MBRTOUCHES = 802, MBRWITHIN = 803, MD5 = 804, MLINEFROMTEXT = 805, MLINEFROMWKB = 806,
        MONTHNAME = 807, MPOINTFROMTEXT = 808, MPOINTFROMWKB = 809, MPOLYFROMTEXT = 810,
        MPOLYFROMWKB = 811, MULTILINESTRINGFROMTEXT = 812, MULTILINESTRINGFROMWKB = 813,
        MULTIPOINTFROMTEXT = 814, MULTIPOINTFROMWKB = 815, MULTIPOLYGONFROMTEXT = 816,
        MULTIPOLYGONFROMWKB = 817, NAME_CONST = 818, NULLIF = 819, NUMGEOMETRIES = 820,
        NUMINTERIORRINGS = 821, NUMPOINTS = 822, OCT = 823, OCTET_LENGTH = 824, ORD = 825,
        OVERLAPS = 826, PERIOD_ADD = 827, PERIOD_DIFF = 828, PI = 829, POINTFROMTEXT = 830,
        POINTFROMWKB = 831, POINTN = 832, POLYFROMTEXT = 833, POLYFROMWKB = 834, POLYGONFROMTEXT = 835,
        POLYGONFROMWKB = 836, POW = 837, POWER = 838, QUOTE = 839, RADIANS = 840, RAND = 841,
        RANDOM_BYTES = 842, RELEASE_LOCK = 843, REVERSE = 844, ROUND = 845, ROW_COUNT = 846,
        RPAD = 847, RTRIM = 848, SEC_TO_TIME = 849, SESSION_USER = 850, SHA = 851, SHA1 = 852,
        SHA2 = 853, SCHEMA_NAME = 854, SIGN = 855, SIN = 856, SLEEP = 857, SOUNDEX = 858,
        SQL_THREAD_WAIT_AFTER_GTIDS = 859, SQRT = 860, SRID = 861, STARTPOINT = 862, STRCMP = 863,
        STR_TO_DATE = 864, ST_AREA = 865, ST_ASBINARY = 866, ST_ASTEXT = 867, ST_ASWKB = 868,
        ST_ASWKT = 869, ST_BUFFER = 870, ST_CENTROID = 871, ST_CONTAINS = 872, ST_CROSSES = 873,
        ST_DIFFERENCE = 874, ST_DIMENSION = 875, ST_DISJOINT = 876, ST_DISTANCE = 877,
        ST_ENDPOINT = 878, ST_ENVELOPE = 879, ST_EQUALS = 880, ST_EXTERIORRING = 881,
        ST_GEOMCOLLFROMTEXT = 882, ST_GEOMCOLLFROMTXT = 883, ST_GEOMCOLLFROMWKB = 884,
        ST_GEOMETRYCOLLECTIONFROMTEXT = 885, ST_GEOMETRYCOLLECTIONFROMWKB = 886, ST_GEOMETRYFROMTEXT = 887,
        ST_GEOMETRYFROMWKB = 888, ST_GEOMETRYN = 889, ST_GEOMETRYTYPE = 890, ST_GEOMFROMTEXT = 891,
        ST_GEOMFROMWKB = 892, ST_INTERIORRINGN = 893, ST_INTERSECTION = 894, ST_INTERSECTS = 895,
        ST_ISCLOSED = 896, ST_ISEMPTY = 897, ST_ISSIMPLE = 898, ST_LINEFROMTEXT = 899,
        ST_LINEFROMWKB = 900, ST_LINESTRINGFROMTEXT = 901, ST_LINESTRINGFROMWKB = 902,
        ST_NUMGEOMETRIES = 903, ST_NUMINTERIORRING = 904, ST_NUMINTERIORRINGS = 905,
        ST_NUMPOINTS = 906, ST_OVERLAPS = 907, ST_POINTFROMTEXT = 908, ST_POINTFROMWKB = 909,
        ST_POINTN = 910, ST_POLYFROMTEXT = 911, ST_POLYFROMWKB = 912, ST_POLYGONFROMTEXT = 913,
        ST_POLYGONFROMWKB = 914, ST_SRID = 915, ST_STARTPOINT = 916, ST_SYMDIFFERENCE = 917,
        ST_TOUCHES = 918, ST_UNION = 919, ST_WITHIN = 920, ST_X = 921, ST_Y = 922, SUBDATE = 923,
        SUBSTRING_INDEX = 924, SUBTIME = 925, SYSTEM_USER = 926, TAN = 927, TIMEDIFF = 928,
        TIMESTAMPADD = 929, TIMESTAMPDIFF = 930, TIME_FORMAT = 931, TIME_TO_SEC = 932,
        TOUCHES = 933, TO_BASE64 = 934, TO_DAYS = 935, TO_SECONDS = 936, UCASE = 937, UNCOMPRESS = 938,
        UNCOMPRESSED_LENGTH = 939, UNHEX = 940, UNIX_TIMESTAMP = 941, UPDATEXML = 942,
        UPPER = 943, UUID = 944, UUID_SHORT = 945, VALIDATE_PASSWORD_STRENGTH = 946, VERSION = 947,
        WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS = 948, WEEKDAY = 949, WEEKOFYEAR = 950, WEIGHT_STRING = 951,
        WITHIN = 952, YEARWEEK = 953, Y_FUNCTION = 954, X_FUNCTION = 955, VAR_ASSIGN = 956,
        PLUS_ASSIGN = 957, MINUS_ASSIGN = 958, MULT_ASSIGN = 959, DIV_ASSIGN = 960, MOD_ASSIGN = 961,
        AND_ASSIGN = 962, XOR_ASSIGN = 963, OR_ASSIGN = 964, STAR = 965, DIVIDE = 966, MODULE = 967,
        PLUS = 968, MINUSMINUS = 969, MINUS = 970, DIV = 971, MOD = 972, EQUAL_SYMBOL = 973,
        GREATER_SYMBOL = 974, LESS_SYMBOL = 975, EXCLAMATION_SYMBOL = 976, BIT_NOT_OP = 977,
        BIT_OR_OP = 978, BIT_AND_OP = 979, BIT_XOR_OP = 980, DOT = 981, LR_BRACKET = 982,
        RR_BRACKET = 983, COMMA = 984, SEMI = 985, AT_SIGN = 986, ZERO_DECIMAL = 987, ONE_DECIMAL = 988,
        TWO_DECIMAL = 989, SINGLE_QUOTE_SYMB = 990, DOUBLE_QUOTE_SYMB = 991, REVERSE_QUOTE_SYMB = 992,
        COLON_SYMB = 993, CHARSET_REVERSE_QOUTE_STRING = 994, FILESIZE_LITERAL = 995,
        START_NATIONAL_STRING_LITERAL = 996, STRING_LITERAL = 997, DECIMAL_LITERAL = 998,
        HEXADECIMAL_LITERAL = 999, REAL_LITERAL = 1000, NULL_SPEC_LITERAL = 1001, BIT_STRING = 1002,
        STRING_CHARSET_NAME = 1003, DOT_ID = 1004, ID = 1005, REVERSE_QUOTE_ID = 1006,
        STRING_USER_NAME = 1007, LOCAL_ID = 1008, GLOBAL_ID = 1009, ERROR_RECONGNIGION = 1010;
    public const int
        RULE_root = 0, RULE_sqlStatements = 1, RULE_sqlStatement = 2, RULE_emptyStatement = 3,
        RULE_ddlStatement = 4, RULE_dmlStatement = 5, RULE_transactionStatement = 6,
        RULE_replicationStatement = 7, RULE_preparedStatement = 8, RULE_compoundStatement = 9,
        RULE_administrationStatement = 10, RULE_utilityStatement = 11, RULE_createDatabase = 12,
        RULE_createEvent = 13, RULE_createIndex = 14, RULE_createLogfileGroup = 15,
        RULE_createProcedure = 16, RULE_createFunction = 17, RULE_createServer = 18,
        RULE_createTable = 19, RULE_createTablespaceInnodb = 20, RULE_createTablespaceNdb = 21,
        RULE_createTrigger = 22, RULE_createView = 23, RULE_createDatabaseOption = 24,
        RULE_ownerStatement = 25, RULE_scheduleExpression = 26, RULE_timestampValue = 27,
        RULE_intervalExpr = 28, RULE_intervalType = 29, RULE_enableType = 30,
        RULE_indexType = 31, RULE_indexOption = 32, RULE_procedureParameter = 33,
        RULE_functionParameter = 34, RULE_routineOption = 35, RULE_serverOption = 36,
        RULE_createDefinitions = 37, RULE_createDefinition = 38, RULE_columnDefinition = 39,
        RULE_columnConstraint = 40, RULE_tableConstraint = 41, RULE_referenceDefinition = 42,
        RULE_referenceAction = 43, RULE_referenceControlType = 44, RULE_indexColumnDefinition = 45,
        RULE_tableOption = 46, RULE_tablespaceStorage = 47, RULE_partitionDefinitions = 48,
        RULE_partitionFunctionDefinition = 49, RULE_subpartitionFunctionDefinition = 50,
        RULE_partitionDefinition = 51, RULE_partitionDefinerAtom = 52, RULE_partitionDefinerVector = 53,
        RULE_subpartitionDefinition = 54, RULE_partitionOption = 55, RULE_alterDatabase = 56,
        RULE_alterEvent = 57, RULE_alterFunction = 58, RULE_alterInstance = 59,
        RULE_alterLogfileGroup = 60, RULE_alterProcedure = 61, RULE_alterServer = 62,
        RULE_alterTable = 63, RULE_alterTablespace = 64, RULE_alterView = 65,
        RULE_alterSpecification = 66, RULE_dropDatabase = 67, RULE_dropEvent = 68,
        RULE_dropIndex = 69, RULE_dropLogfileGroup = 70, RULE_dropProcedure = 71,
        RULE_dropFunction = 72, RULE_dropServer = 73, RULE_dropTable = 74, RULE_dropTablespace = 75,
        RULE_dropTrigger = 76, RULE_dropView = 77, RULE_renameTable = 78, RULE_renameTableClause = 79,
        RULE_truncateTable = 80, RULE_callStatement = 81, RULE_deleteStatement = 82,
        RULE_doStatement = 83, RULE_handlerStatement = 84, RULE_insertStatement = 85,
        RULE_loadDataStatement = 86, RULE_loadXmlStatement = 87, RULE_replaceStatement = 88,
        RULE_selectStatement = 89, RULE_updateStatement = 90, RULE_insertStatementValue = 91,
        RULE_updatedElement = 92, RULE_assignmentField = 93, RULE_lockClause = 94,
        RULE_singleDeleteStatement = 95, RULE_multipleDeleteStatement = 96, RULE_handlerOpenStatement = 97,
        RULE_handlerReadIndexStatement = 98, RULE_handlerReadStatement = 99, RULE_handlerCloseStatement = 100,
        RULE_singleUpdateStatement = 101, RULE_multipleUpdateStatement = 102,
        RULE_orderByClause = 103, RULE_orderByExpression = 104, RULE_tableSources = 105,
        RULE_tableSource = 106, RULE_tableSourceItem = 107, RULE_indexHint = 108,
        RULE_indexHintType = 109, RULE_joinPart = 110, RULE_queryExpression = 111,
        RULE_queryExpressionNointo = 112, RULE_querySpecification = 113, RULE_querySpecificationNointo = 114,
        RULE_unionParenthesis = 115, RULE_unionStatement = 116, RULE_selectSpec = 117,
        RULE_selectElements = 118, RULE_selectElement = 119, RULE_selectIntoExpression = 120,
        RULE_selectFieldsInto = 121, RULE_selectLinesInto = 122, RULE_fromClause = 123,
        RULE_groupByItem = 124, RULE_limitClause = 125, RULE_limitClauseAtom = 126,
        RULE_startTransaction = 127, RULE_beginWork = 128, RULE_commitWork = 129,
        RULE_rollbackWork = 130, RULE_savepointStatement = 131, RULE_rollbackStatement = 132,
        RULE_releaseStatement = 133, RULE_lockTables = 134, RULE_unlockTables = 135,
        RULE_setAutocommitStatement = 136, RULE_setTransactionStatement = 137,
        RULE_transactionMode = 138, RULE_lockTableElement = 139, RULE_lockAction = 140,
        RULE_transactionOption = 141, RULE_transactionLevel = 142, RULE_changeMaster = 143,
        RULE_changeReplicationFilter = 144, RULE_purgeBinaryLogs = 145, RULE_resetMaster = 146,
        RULE_resetSlave = 147, RULE_startSlave = 148, RULE_stopSlave = 149, RULE_startGroupReplication = 150,
        RULE_stopGroupReplication = 151, RULE_masterOption = 152, RULE_stringMasterOption = 153,
        RULE_decimalMasterOption = 154, RULE_boolMasterOption = 155, RULE_channelOption = 156,
        RULE_replicationFilter = 157, RULE_tablePair = 158, RULE_threadType = 159,
        RULE_untilOption = 160, RULE_connectionOption = 161, RULE_gtuidSet = 162,
        RULE_xaStartTransaction = 163, RULE_xaEndTransaction = 164, RULE_xaPrepareStatement = 165,
        RULE_xaCommitWork = 166, RULE_xaRollbackWork = 167, RULE_xaRecoverWork = 168,
        RULE_prepareStatement = 169, RULE_executeStatement = 170, RULE_deallocatePrepare = 171,
        RULE_routineBody = 172, RULE_blockStatement = 173, RULE_caseStatement = 174,
        RULE_ifStatement = 175, RULE_iterateStatement = 176, RULE_leaveStatement = 177,
        RULE_loopStatement = 178, RULE_repeatStatement = 179, RULE_returnStatement = 180,
        RULE_whileStatement = 181, RULE_cursorStatement = 182, RULE_declareVariable = 183,
        RULE_declareCondition = 184, RULE_declareCursor = 185, RULE_declareHandler = 186,
        RULE_handlerConditionValue = 187, RULE_procedureSqlStatement = 188, RULE_caseAlternative = 189,
        RULE_elifAlternative = 190, RULE_alterUser = 191, RULE_createUser = 192,
        RULE_dropUser = 193, RULE_grantStatement = 194, RULE_grantProxy = 195,
        RULE_renameUser = 196, RULE_revokeStatement = 197, RULE_revokeProxy = 198,
        RULE_setPasswordStatement = 199, RULE_userSpecification = 200, RULE_userAuthOption = 201,
        RULE_tlsOption = 202, RULE_userResourceOption = 203, RULE_userPasswordOption = 204,
        RULE_userLockOption = 205, RULE_privelegeClause = 206, RULE_privilege = 207,
        RULE_privilegeLevel = 208, RULE_renameUserClause = 209, RULE_analyzeTable = 210,
        RULE_checkTable = 211, RULE_checksumTable = 212, RULE_optimizeTable = 213,
        RULE_repairTable = 214, RULE_checkTableOption = 215, RULE_createUdfunction = 216,
        RULE_installPlugin = 217, RULE_uninstallPlugin = 218, RULE_setStatement = 219,
        RULE_showStatement = 220, RULE_variableClause = 221, RULE_showCommonEntity = 222,
        RULE_showFilter = 223, RULE_showGlobalInfoClause = 224, RULE_showSchemaEntity = 225,
        RULE_showProfileType = 226, RULE_binlogStatement = 227, RULE_cacheIndexStatement = 228,
        RULE_flushStatement = 229, RULE_killStatement = 230, RULE_loadIndexIntoCache = 231,
        RULE_resetStatement = 232, RULE_shutdownStatement = 233, RULE_tableIndexes = 234,
        RULE_flushOption = 235, RULE_flushTableOption = 236, RULE_loadedTableIndexes = 237,
        RULE_simpleDescribeStatement = 238, RULE_fullDescribeStatement = 239,
        RULE_helpStatement = 240, RULE_useStatement = 241, RULE_signalStatement = 242,
        RULE_resignalStatement = 243, RULE_signalConditionInformation = 244, RULE_diagnosticsStatement = 245,
        RULE_diagnosticsConditionInformationName = 246, RULE_describeObjectClause = 247,
        RULE_fullId = 248, RULE_tableName = 249, RULE_fullColumnName = 250, RULE_indexColumnName = 251,
        RULE_userName = 252, RULE_mysqlVariable = 253, RULE_charsetName = 254,
        RULE_collationName = 255, RULE_engineName = 256, RULE_uuidSet = 257, RULE_xid = 258,
        RULE_xuidStringId = 259, RULE_authPlugin = 260, RULE_uid = 261, RULE_simpleId = 262,
        RULE_dottedId = 263, RULE_decimalLiteral = 264, RULE_fileSizeLiteral = 265,
        RULE_stringLiteral = 266, RULE_booleanLiteral = 267, RULE_hexadecimalLiteral = 268,
        RULE_nullNotnull = 269, RULE_constant = 270, RULE_dataType = 271, RULE_collectionOptions = 272,
        RULE_convertedDataType = 273, RULE_lengthOneDimension = 274, RULE_lengthTwoDimension = 275,
        RULE_lengthTwoOptionalDimension = 276, RULE_uidList = 277, RULE_tables = 278,
        RULE_indexColumnNames = 279, RULE_expressions = 280, RULE_expressionsWithDefaults = 281,
        RULE_constants = 282, RULE_simpleStrings = 283, RULE_userVariables = 284,
        RULE_defaultValue = 285, RULE_currentTimestamp = 286, RULE_expressionOrDefault = 287,
        RULE_ifExists = 288, RULE_ifNotExists = 289, RULE_functionCall = 290,
        RULE_specificFunction = 291, RULE_caseFuncAlternative = 292, RULE_levelsInWeightString = 293,
        RULE_levelInWeightListElement = 294, RULE_aggregateWindowedFunction = 295,
        RULE_scalarFunctionName = 296, RULE_passwordFunctionClause = 297, RULE_functionArgs = 298,
        RULE_functionArg = 299, RULE_expression = 300, RULE_predicate = 301, RULE_expressionAtom = 302,
        RULE_unaryOperator = 303, RULE_comparisonOperator = 304, RULE_logicalOperator = 305,
        RULE_bitOperator = 306, RULE_mathOperator = 307, RULE_charsetNameBase = 308,
        RULE_transactionLevelBase = 309, RULE_privilegesBase = 310, RULE_intervalTypeBase = 311,
        RULE_dataTypeBase = 312, RULE_keywordsCanBeId = 313, RULE_functionNameBase = 314;
    public static readonly string[] ruleNames = {
    "root", "sqlStatements", "sqlStatement", "emptyStatement", "ddlStatement",
    "dmlStatement", "transactionStatement", "replicationStatement", "preparedStatement",
    "compoundStatement", "administrationStatement", "utilityStatement", "createDatabase",
    "createEvent", "createIndex", "createLogfileGroup", "createProcedure",
    "createFunction", "createServer", "createTable", "createTablespaceInnodb",
    "createTablespaceNdb", "createTrigger", "createView", "createDatabaseOption",
    "ownerStatement", "scheduleExpression", "timestampValue", "intervalExpr",
    "intervalType", "enableType", "indexType", "indexOption", "procedureParameter",
    "functionParameter", "routineOption", "serverOption", "createDefinitions",
    "createDefinition", "columnDefinition", "columnConstraint", "tableConstraint",
    "referenceDefinition", "referenceAction", "referenceControlType", "indexColumnDefinition",
    "tableOption", "tablespaceStorage", "partitionDefinitions", "partitionFunctionDefinition",
    "subpartitionFunctionDefinition", "partitionDefinition", "partitionDefinerAtom",
    "partitionDefinerVector", "subpartitionDefinition", "partitionOption",
    "alterDatabase", "alterEvent", "alterFunction", "alterInstance", "alterLogfileGroup",
    "alterProcedure", "alterServer", "alterTable", "alterTablespace", "alterView",
    "alterSpecification", "dropDatabase", "dropEvent", "dropIndex", "dropLogfileGroup",
    "dropProcedure", "dropFunction", "dropServer", "dropTable", "dropTablespace",
    "dropTrigger", "dropView", "renameTable", "renameTableClause", "truncateTable",
    "callStatement", "deleteStatement", "doStatement", "handlerStatement",
    "insertStatement", "loadDataStatement", "loadXmlStatement", "replaceStatement",
    "selectStatement", "updateStatement", "insertStatementValue", "updatedElement",
    "assignmentField", "lockClause", "singleDeleteStatement", "multipleDeleteStatement",
    "handlerOpenStatement", "handlerReadIndexStatement", "handlerReadStatement",
    "handlerCloseStatement", "singleUpdateStatement", "multipleUpdateStatement",
    "orderByClause", "orderByExpression", "tableSources", "tableSource", "tableSourceItem",
    "indexHint", "indexHintType", "joinPart", "queryExpression", "queryExpressionNointo",
    "querySpecification", "querySpecificationNointo", "unionParenthesis",
    "unionStatement", "selectSpec", "selectElements", "selectElement", "selectIntoExpression",
    "selectFieldsInto", "selectLinesInto", "fromClause", "groupByItem", "limitClause",
    "limitClauseAtom", "startTransaction", "beginWork", "commitWork", "rollbackWork",
    "savepointStatement", "rollbackStatement", "releaseStatement", "lockTables",
    "unlockTables", "setAutocommitStatement", "setTransactionStatement", "transactionMode",
    "lockTableElement", "lockAction", "transactionOption", "transactionLevel",
    "changeMaster", "changeReplicationFilter", "purgeBinaryLogs", "resetMaster",
    "resetSlave", "startSlave", "stopSlave", "startGroupReplication", "stopGroupReplication",
    "masterOption", "stringMasterOption", "decimalMasterOption", "boolMasterOption",
    "channelOption", "replicationFilter", "tablePair", "threadType", "untilOption",
    "connectionOption", "gtuidSet", "xaStartTransaction", "xaEndTransaction",
    "xaPrepareStatement", "xaCommitWork", "xaRollbackWork", "xaRecoverWork",
    "prepareStatement", "executeStatement", "deallocatePrepare", "routineBody",
    "blockStatement", "caseStatement", "ifStatement", "iterateStatement",
    "leaveStatement", "loopStatement", "repeatStatement", "returnStatement",
    "whileStatement", "cursorStatement", "declareVariable", "declareCondition",
    "declareCursor", "declareHandler", "handlerConditionValue", "procedureSqlStatement",
    "caseAlternative", "elifAlternative", "alterUser", "createUser", "dropUser",
    "grantStatement", "grantProxy", "renameUser", "revokeStatement", "revokeProxy",
    "setPasswordStatement", "userSpecification", "userAuthOption", "tlsOption",
    "userResourceOption", "userPasswordOption", "userLockOption", "privelegeClause",
    "privilege", "privilegeLevel", "renameUserClause", "analyzeTable", "checkTable",
    "checksumTable", "optimizeTable", "repairTable", "checkTableOption", "createUdfunction",
    "installPlugin", "uninstallPlugin", "setStatement", "showStatement", "variableClause",
    "showCommonEntity", "showFilter", "showGlobalInfoClause", "showSchemaEntity",
    "showProfileType", "binlogStatement", "cacheIndexStatement", "flushStatement",
    "killStatement", "loadIndexIntoCache", "resetStatement", "shutdownStatement",
    "tableIndexes", "flushOption", "flushTableOption", "loadedTableIndexes",
    "simpleDescribeStatement", "fullDescribeStatement", "helpStatement", "useStatement",
    "signalStatement", "resignalStatement", "signalConditionInformation",
    "diagnosticsStatement", "diagnosticsConditionInformationName", "describeObjectClause",
    "fullId", "tableName", "fullColumnName", "indexColumnName", "userName",
    "mysqlVariable", "charsetName", "collationName", "engineName", "uuidSet",
    "xid", "xuidStringId", "authPlugin", "uid", "simpleId", "dottedId", "decimalLiteral",
    "fileSizeLiteral", "stringLiteral", "booleanLiteral", "hexadecimalLiteral",
    "nullNotnull", "constant", "dataType", "collectionOptions", "convertedDataType",
    "lengthOneDimension", "lengthTwoDimension", "lengthTwoOptionalDimension",
    "uidList", "tables", "indexColumnNames", "expressions", "expressionsWithDefaults",
    "constants", "simpleStrings", "userVariables", "defaultValue", "currentTimestamp",
    "expressionOrDefault", "ifExists", "ifNotExists", "functionCall", "specificFunction",
    "caseFuncAlternative", "levelsInWeightString", "levelInWeightListElement",
    "aggregateWindowedFunction", "scalarFunctionName", "passwordFunctionClause",
    "functionArgs", "functionArg", "expression", "predicate", "expressionAtom",
    "unaryOperator", "comparisonOperator", "logicalOperator", "bitOperator",
    "mathOperator", "charsetNameBase", "transactionLevelBase", "privilegesBase",
    "intervalTypeBase", "dataTypeBase", "keywordsCanBeId", "functionNameBase"
};

    private static readonly string[] _LiteralNames = {
    null, null, null, null, null, "'ADD'", "'ALL'", "'ALTER'", "'ALWAYS'",
    "'ANALYZE'", "'AND'", "'AS'", "'ASC'", "'BEFORE'", "'BETWEEN'", "'BOTH'",
    "'BY'", "'CALL'", "'CASCADE'", "'CASE'", "'CAST'", "'CHANGE'", "'CHARACTER'",
    "'CHECK'", "'COLLATE'", "'COLUMN'", "'CONDITION'", "'CONSTRAINT'", "'CONTINUE'",
    "'CONVERT'", "'CREATE'", "'CROSS'", "'CURRENT'", "'CURRENT_USER'", "'CURSOR'",
    "'DATABASE'", "'DATABASES'", "'DECLARE'", "'DEFAULT'", "'DELAYED'", "'DELETE'",
    "'DESC'", "'DESCRIBE'", "'DETERMINISTIC'", "'DIAGNOSTICS'", "'DISTINCT'",
    "'DISTINCTROW'", "'DROP'", "'EACH'", "'ELSE'", "'ELSEIF'", "'ENCLOSED'",
    "'ESCAPED'", "'EXISTS'", "'EXIT'", "'EXPLAIN'", "'FALSE'", "'FETCH'",
    "'FOR'", "'FORCE'", "'FOREIGN'", "'FROM'", "'FULLTEXT'", "'GENERATED'",
    "'GET'", "'GRANT'", "'GROUP'", "'HAVING'", "'HIGH_PRIORITY'", "'IF'",
    "'IGNORE'", "'IN'", "'INDEX'", "'INFILE'", "'INNER'", "'INOUT'", "'INSERT'",
    "'INTERVAL'", "'INTO'", "'IS'", "'ITERATE'", "'JOIN'", "'KEY'", "'KEYS'",
    "'KILL'", "'LEADING'", "'LEAVE'", "'LEFT'", "'LIKE'", "'LIMIT'", "'LINEAR'",
    "'LINES'", "'LOAD'", "'LOCK'", "'LOOP'", "'LOW_PRIORITY'", "'MASTER_BIND'",
    "'MASTER_SSL_VERIFY_SERVER_CERT'", "'MATCH'", "'MAXVALUE'", "'MODIFIES'",
    "'NATURAL'", "'NOT'", "'NO_WRITE_TO_BINLOG'", "'NULL'", "'NUMBER'", "'ON'",
    "'OPTIMIZE'", "'OPTION'", "'OPTIONALLY'", "'OR'", "'ORDER'", "'OUT'",
    "'OUTER'", "'OUTFILE'", "'PARTITION'", "'PRIMARY'", "'PROCEDURE'", "'PURGE'",
    "'RANGE'", "'READ'", "'READS'", "'REFERENCES'", "'REGEXP'", "'RELEASE'",
    "'RENAME'", "'REPEAT'", "'REPLACE'", "'REQUIRE'", "'RESIGNAL'", "'RESTRICT'",
    "'RETURN'", "'REVOKE'", "'RIGHT'", "'RLIKE'", "'SCHEMA'", "'SCHEMAS'",
    "'SELECT'", "'SET'", "'SEPARATOR'", "'SHOW'", "'SIGNAL'", "'SPATIAL'",
    "'SQL'", "'SQLEXCEPTION'", "'SQLSTATE'", "'SQLWARNING'", "'SQL_BIG_RESULT'",
    "'SQL_CALC_FOUND_ROWS'", "'SQL_SMALL_RESULT'", "'SSL'", "'STACKED'", "'STARTING'",
    "'STRAIGHT_JOIN'", "'TABLE'", "'TERMINATED'", "'THEN'", "'TO'", "'TRAILING'",
    "'TRIGGER'", "'TRUE'", "'UNDO'", "'UNION'", "'UNIQUE'", "'UNLOCK'", "'UNSIGNED'",
    "'UPDATE'", "'USAGE'", "'USE'", "'USING'", "'VALUES'", "'WHEN'", "'WHERE'",
    "'WHILE'", "'WITH'", "'WRITE'", "'XOR'", "'ZEROFILL'", "'TINYINT'", "'SMALLINT'",
    "'MEDIUMINT'", "'INT'", "'INTEGER'", "'BIGINT'", "'REAL'", "'DOUBLE'",
    "'PRECISION'", "'FLOAT'", "'DECIMAL'", "'DEC'", "'NUMERIC'", "'DATE'",
    "'TIME'", "'TIMESTAMP'", "'DATETIME'", "'YEAR'", "'CHAR'", "'VARCHAR'",
    "'NVARCHAR'", "'NATIONAL'", "'BINARY'", "'VARBINARY'", "'TINYBLOB'", "'BLOB'",
    "'MEDIUMBLOB'", "'LONGBLOB'", "'TINYTEXT'", "'TEXT'", "'MEDIUMTEXT'",
    "'LONGTEXT'", "'ENUM'", "'VARYING'", "'SERIAL'", "'YEAR_MONTH'", "'DAY_HOUR'",
    "'DAY_MINUTE'", "'DAY_SECOND'", "'HOUR_MINUTE'", "'HOUR_SECOND'", "'MINUTE_SECOND'",
    "'SECOND_MICROSECOND'", "'MINUTE_MICROSECOND'", "'HOUR_MICROSECOND'",
    "'DAY_MICROSECOND'", "'AVG'", "'BIT_AND'", "'BIT_OR'", "'BIT_XOR'", "'COUNT'",
    "'GROUP_CONCAT'", "'MAX'", "'MIN'", "'STD'", "'STDDEV'", "'STDDEV_POP'",
    "'STDDEV_SAMP'", "'SUM'", "'VAR_POP'", "'VAR_SAMP'", "'VARIANCE'", "'CURRENT_DATE'",
    "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'LOCALTIME'", "'CURDATE'", "'CURTIME'",
    "'DATE_ADD'", "'DATE_SUB'", "'EXTRACT'", "'LOCALTIMESTAMP'", "'NOW'",
    "'POSITION'", "'SUBSTR'", "'SUBSTRING'", "'SYSDATE'", "'TRIM'", "'UTC_DATE'",
    "'UTC_TIME'", "'UTC_TIMESTAMP'", "'ACCOUNT'", "'ACTION'", "'AFTER'", "'AGGREGATE'",
    "'ALGORITHM'", "'ANY'", "'AT'", "'AUTHORS'", "'AUTOCOMMIT'", "'AUTOEXTEND_SIZE'",
    "'AUTO_INCREMENT'", "'AVG_ROW_LENGTH'", "'BEGIN'", "'BINLOG'", "'BIT'",
    "'BLOCK'", "'BOOL'", "'BOOLEAN'", "'BTREE'", "'CACHE'", "'CASCADED'",
    "'CHAIN'", "'CHANGED'", "'CHANNEL'", "'CHECKSUM'", "'PAGE_CHECKSUM'",
    "'CIPHER'", "'CLASS_ORIGIN'", "'CLIENT'", "'CLOSE'", "'COALESCE'", "'CODE'",
    "'COLUMNS'", "'COLUMN_FORMAT'", "'COLUMN_NAME'", "'COMMENT'", "'COMMIT'",
    "'COMPACT'", "'COMPLETION'", "'COMPRESSED'", "'COMPRESSION'", "'CONCURRENT'",
    "'CONNECTION'", "'CONSISTENT'", "'CONSTRAINT_CATALOG'", "'CONSTRAINT_SCHEMA'",
    "'CONSTRAINT_NAME'", "'CONTAINS'", "'CONTEXT'", "'CONTRIBUTORS'", "'COPY'",
    "'CPU'", "'CURSOR_NAME'", "'DATA'", "'DATAFILE'", "'DEALLOCATE'", "'DEFAULT_AUTH'",
    "'DEFINER'", "'DELAY_KEY_WRITE'", "'DES_KEY_FILE'", "'DIRECTORY'", "'DISABLE'",
    "'DISCARD'", "'DISK'", "'DO'", "'DUMPFILE'", "'DUPLICATE'", "'DYNAMIC'",
    "'ENABLE'", "'ENCRYPTION'", "'END'", "'ENDS'", "'ENGINE'", "'ENGINES'",
    "'ERROR'", "'ERRORS'", "'ESCAPE'", "'EVEN'", "'EVENT'", "'EVENTS'", "'EVERY'",
    "'EXCHANGE'", "'EXCLUSIVE'", "'EXPIRE'", "'EXPORT'", "'EXTENDED'", "'EXTENT_SIZE'",
    "'FAST'", "'FAULTS'", "'FIELDS'", "'FILE_BLOCK_SIZE'", "'FILTER'", "'FIRST'",
    "'FIXED'", "'FLUSH'", "'FOLLOWS'", "'FOUND'", "'FULL'", "'FUNCTION'",
    "'GENERAL'", "'GLOBAL'", "'GRANTS'", "'GROUP_REPLICATION'", "'HANDLER'",
    "'HASH'", "'HELP'", "'HOST'", "'HOSTS'", "'IDENTIFIED'", "'IGNORE_SERVER_IDS'",
    "'IMPORT'", "'INDEXES'", "'INITIAL_SIZE'", "'INPLACE'", "'INSERT_METHOD'",
    "'INSTALL'", "'INSTANCE'", "'INVISIBLE'", "'INVOKER'", "'IO'", "'IO_THREAD'",
    "'IPC'", "'ISOLATION'", "'ISSUER'", "'JSON'", "'KEY_BLOCK_SIZE'", "'LANGUAGE'",
    "'LAST'", "'LEAVES'", "'LESS'", "'LEVEL'", "'LIST'", "'LOCAL'", "'LOGFILE'",
    "'LOGS'", "'MASTER'", "'MASTER_AUTO_POSITION'", "'MASTER_CONNECT_RETRY'",
    "'MASTER_DELAY'", "'MASTER_HEARTBEAT_PERIOD'", "'MASTER_HOST'", "'MASTER_LOG_FILE'",
    "'MASTER_LOG_POS'", "'MASTER_PASSWORD'", "'MASTER_PORT'", "'MASTER_RETRY_COUNT'",
    "'MASTER_SSL'", "'MASTER_SSL_CA'", "'MASTER_SSL_CAPATH'", "'MASTER_SSL_CERT'",
    "'MASTER_SSL_CIPHER'", "'MASTER_SSL_CRL'", "'MASTER_SSL_CRLPATH'", "'MASTER_SSL_KEY'",
    "'MASTER_TLS_VERSION'", "'MASTER_USER'", "'MAX_CONNECTIONS_PER_HOUR'",
    "'MAX_QUERIES_PER_HOUR'", "'MAX_ROWS'", "'MAX_SIZE'", "'MAX_UPDATES_PER_HOUR'",
    "'MAX_USER_CONNECTIONS'", "'MEDIUM'", "'MERGE'", "'MESSAGE_TEXT'", "'MID'",
    "'MIGRATE'", "'MIN_ROWS'", "'MODE'", "'MODIFY'", "'MUTEX'", "'MYSQL'",
    "'MYSQL_ERRNO'", "'NAME'", "'NAMES'", "'NCHAR'", "'NEVER'", "'NEXT'",
    "'NO'", "'NODEGROUP'", "'NONE'", "'OFFLINE'", "'OFFSET'", "'OJ'", "'OLD_PASSWORD'",
    "'ONE'", "'ONLINE'", "'ONLY'", "'OPEN'", "'OPTIMIZER_COSTS'", "'OPTIONS'",
    "'OWNER'", "'PACK_KEYS'", "'PAGE'", "'PARSER'", "'PARTIAL'", "'PARTITIONING'",
    "'PARTITIONS'", "'PASSWORD'", "'PHASE'", "'PLUGIN'", "'PLUGIN_DIR'", "'PLUGINS'",
    "'PORT'", "'PRECEDES'", "'PREPARE'", "'PRESERVE'", "'PREV'", "'PROCESSLIST'",
    "'PROFILE'", "'PROFILES'", "'PROXY'", "'QUERY'", "'QUICK'", "'REBUILD'",
    "'RECOVER'", "'REDO_BUFFER_SIZE'", "'REDUNDANT'", "'RELAY'", "'RELAY_LOG_FILE'",
    "'RELAY_LOG_POS'", "'RELAYLOG'", "'REMOVE'", "'REORGANIZE'", "'REPAIR'",
    "'REPLICATE_DO_DB'", "'REPLICATE_DO_TABLE'", "'REPLICATE_IGNORE_DB'",
    "'REPLICATE_IGNORE_TABLE'", "'REPLICATE_REWRITE_DB'", "'REPLICATE_WILD_DO_TABLE'",
    "'REPLICATE_WILD_IGNORE_TABLE'", "'REPLICATION'", "'RESET'", "'RESUME'",
    "'RETURNED_SQLSTATE'", "'RETURNS'", "'ROLLBACK'", "'ROLLUP'", "'ROTATE'",
    "'ROW'", "'ROWS'", "'ROW_FORMAT'", "'SAVEPOINT'", "'SCHEDULE'", "'SECURITY'",
    "'SERVER'", "'SESSION'", "'SHARE'", "'SHARED'", "'SIGNED'", "'SIMPLE'",
    "'SLAVE'", "'SLOW'", "'SNAPSHOT'", "'SOCKET'", "'SOME'", "'SONAME'", "'SOUNDS'",
    "'SOURCE'", "'SQL_AFTER_GTIDS'", "'SQL_AFTER_MTS_GAPS'", "'SQL_BEFORE_GTIDS'",
    "'SQL_BUFFER_RESULT'", "'SQL_CACHE'", "'SQL_NO_CACHE'", "'SQL_THREAD'",
    "'START'", "'STARTS'", "'STATS_AUTO_RECALC'", "'STATS_PERSISTENT'", "'STATS_SAMPLE_PAGES'",
    "'STATUS'", "'STOP'", "'STORAGE'", "'STORED'", "'STRING'", "'SUBCLASS_ORIGIN'",
    "'SUBJECT'", "'SUBPARTITION'", "'SUBPARTITIONS'", "'SUSPEND'", "'SWAPS'",
    "'SWITCHES'", "'TABLE_NAME'", "'TABLESPACE'", "'TEMPORARY'", "'TEMPTABLE'",
    "'THAN'", "'TRADITIONAL'", "'TRANSACTION'", "'TRIGGERS'", "'TRUNCATE'",
    "'UNDEFINED'", "'UNDOFILE'", "'UNDO_BUFFER_SIZE'", "'UNINSTALL'", "'UNKNOWN'",
    "'UNTIL'", "'UPGRADE'", "'USER'", "'USE_FRM'", "'USER_RESOURCES'", "'VALIDATION'",
    "'VALUE'", "'VARIABLES'", "'VIEW'", "'VIRTUAL'", "'VISIBLE'", "'WAIT'",
    "'WARNINGS'", "'WITHOUT'", "'WORK'", "'WRAPPER'", "'X509'", "'XA'", "'XML'",
    "'EUR'", "'USA'", "'JIS'", "'ISO'", "'INTERNAL'", "'QUARTER'", "'MONTH'",
    "'DAY'", "'HOUR'", "'MINUTE'", "'WEEK'", "'SECOND'", "'MICROSECOND'",
    "'TABLES'", "'ROUTINE'", "'EXECUTE'", "'FILE'", "'PROCESS'", "'RELOAD'",
    "'SHUTDOWN'", "'SUPER'", "'PRIVILEGES'", null, "'ARMSCII8'", "'ASCII'",
    "'BIG5'", "'CP1250'", "'CP1251'", "'CP1256'", "'CP1257'", "'CP850'", "'CP852'",
    "'CP866'", "'CP932'", "'DEC8'", "'EUCJPMS'", "'EUCKR'", "'GB2312'", "'GBK'",
    "'GEOSTD8'", "'GREEK'", "'HEBREW'", "'HP8'", "'KEYBCS2'", "'KOI8R'", "'KOI8U'",
    "'LATIN1'", "'LATIN2'", "'LATIN5'", "'LATIN7'", "'MACCE'", "'MACROMAN'",
    "'SJIS'", "'SWE7'", "'TIS620'", "'UCS2'", "'UJIS'", "'UTF16'", "'UTF16LE'",
    "'UTF32'", "'UTF8'", "'UTF8MB3'", "'UTF8MB4'", "'ARCHIVE'", "'BLACKHOLE'",
    "'CSV'", "'FEDERATED'", "'INNODB'", "'MEMORY'", "'MRG_MYISAM'", "'MYISAM'",
    "'NDB'", "'NDBCLUSTER'", "'PERFORMANCE_SCHEMA'", "'TOKUDB'", "'REPEATABLE'",
    "'COMMITTED'", "'UNCOMMITTED'", "'SERIALIZABLE'", "'GEOMETRYCOLLECTION'",
    "'GEOMCOLLECTION'", "'GEOMETRY'", "'LINESTRING'", "'MULTILINESTRING'",
    "'MULTIPOINT'", "'MULTIPOLYGON'", "'POINT'", "'POLYGON'", "'ABS'", "'ACOS'",
    "'ADDDATE'", "'ADDTIME'", "'AES_DECRYPT'", "'AES_ENCRYPT'", "'AREA'",
    "'ASBINARY'", "'ASIN'", "'ASTEXT'", "'ASWKB'", "'ASWKT'", "'ASYMMETRIC_DECRYPT'",
    "'ASYMMETRIC_DERIVE'", "'ASYMMETRIC_ENCRYPT'", "'ASYMMETRIC_SIGN'", "'ASYMMETRIC_VERIFY'",
    "'ATAN'", "'ATAN2'", "'BENCHMARK'", "'BIN'", "'BIT_COUNT'", "'BIT_LENGTH'",
    "'BUFFER'", "'CATALOG_NAME'", "'CEIL'", "'CEILING'", "'CENTROID'", "'CHARACTER_LENGTH'",
    "'CHARSET'", "'CHAR_LENGTH'", "'COERCIBILITY'", "'COLLATION'", "'COMPRESS'",
    "'CONCAT'", "'CONCAT_WS'", "'CONNECTION_ID'", "'CONV'", "'CONVERT_TZ'",
    "'COS'", "'COT'", "'CRC32'", "'CREATE_ASYMMETRIC_PRIV_KEY'", "'CREATE_ASYMMETRIC_PUB_KEY'",
    "'CREATE_DH_PARAMETERS'", "'CREATE_DIGEST'", "'CROSSES'", "'DATEDIFF'",
    "'DATE_FORMAT'", "'DAYNAME'", "'DAYOFMONTH'", "'DAYOFWEEK'", "'DAYOFYEAR'",
    "'DECODE'", "'DEGREES'", "'DES_DECRYPT'", "'DES_ENCRYPT'", "'DIMENSION'",
    "'DISJOINT'", "'ELT'", "'ENCODE'", "'ENCRYPT'", "'ENDPOINT'", "'ENVELOPE'",
    "'EQUALS'", "'EXP'", "'EXPORT_SET'", "'EXTERIORRING'", "'EXTRACTVALUE'",
    "'FIELD'", "'FIND_IN_SET'", "'FLOOR'", "'FORMAT'", "'FOUND_ROWS'", "'FROM_BASE64'",
    "'FROM_DAYS'", "'FROM_UNIXTIME'", "'GEOMCOLLFROMTEXT'", "'GEOMCOLLFROMWKB'",
    "'GEOMETRYCOLLECTIONFROMTEXT'", "'GEOMETRYCOLLECTIONFROMWKB'", "'GEOMETRYFROMTEXT'",
    "'GEOMETRYFROMWKB'", "'GEOMETRYN'", "'GEOMETRYTYPE'", "'GEOMFROMTEXT'",
    "'GEOMFROMWKB'", "'GET_FORMAT'", "'GET_LOCK'", "'GLENGTH'", "'GREATEST'",
    "'GTID_SUBSET'", "'GTID_SUBTRACT'", "'HEX'", "'IFNULL'", "'INET6_ATON'",
    "'INET6_NTOA'", "'INET_ATON'", "'INET_NTOA'", "'INSTR'", "'INTERIORRINGN'",
    "'INTERSECTS'", "'ISCLOSED'", "'ISEMPTY'", "'ISNULL'", "'ISSIMPLE'", "'IS_FREE_LOCK'",
    "'IS_IPV4'", "'IS_IPV4_COMPAT'", "'IS_IPV4_MAPPED'", "'IS_IPV6'", "'IS_USED_LOCK'",
    "'LAST_INSERT_ID'", "'LCASE'", "'LEAST'", "'LENGTH'", "'LINEFROMTEXT'",
    "'LINEFROMWKB'", "'LINESTRINGFROMTEXT'", "'LINESTRINGFROMWKB'", "'LN'",
    "'LOAD_FILE'", "'LOCATE'", "'LOG'", "'LOG10'", "'LOG2'", "'LOWER'", "'LPAD'",
    "'LTRIM'", "'MAKEDATE'", "'MAKETIME'", "'MAKE_SET'", "'MASTER_POS_WAIT'",
    "'MBRCONTAINS'", "'MBRDISJOINT'", "'MBREQUAL'", "'MBRINTERSECTS'", "'MBROVERLAPS'",
    "'MBRTOUCHES'", "'MBRWITHIN'", "'MD5'", "'MLINEFROMTEXT'", "'MLINEFROMWKB'",
    "'MONTHNAME'", "'MPOINTFROMTEXT'", "'MPOINTFROMWKB'", "'MPOLYFROMTEXT'",
    "'MPOLYFROMWKB'", "'MULTILINESTRINGFROMTEXT'", "'MULTILINESTRINGFROMWKB'",
    "'MULTIPOINTFROMTEXT'", "'MULTIPOINTFROMWKB'", "'MULTIPOLYGONFROMTEXT'",
    "'MULTIPOLYGONFROMWKB'", "'NAME_CONST'", "'NULLIF'", "'NUMGEOMETRIES'",
    "'NUMINTERIORRINGS'", "'NUMPOINTS'", "'OCT'", "'OCTET_LENGTH'", "'ORD'",
    "'OVERLAPS'", "'PERIOD_ADD'", "'PERIOD_DIFF'", "'PI'", "'POINTFROMTEXT'",
    "'POINTFROMWKB'", "'POINTN'", "'POLYFROMTEXT'", "'POLYFROMWKB'", "'POLYGONFROMTEXT'",
    "'POLYGONFROMWKB'", "'POW'", "'POWER'", "'QUOTE'", "'RADIANS'", "'RAND'",
    "'RANDOM_BYTES'", "'RELEASE_LOCK'", "'REVERSE'", "'ROUND'", "'ROW_COUNT'",
    "'RPAD'", "'RTRIM'", "'SEC_TO_TIME'", "'SESSION_USER'", "'SHA'", "'SHA1'",
    "'SHA2'", "'SCHEMA_NAME'", "'SIGN'", "'SIN'", "'SLEEP'", "'SOUNDEX'",
    "'SQL_THREAD_WAIT_AFTER_GTIDS'", "'SQRT'", "'SRID'", "'STARTPOINT'", "'STRCMP'",
    "'STR_TO_DATE'", "'ST_AREA'", "'ST_ASBINARY'", "'ST_ASTEXT'", "'ST_ASWKB'",
    "'ST_ASWKT'", "'ST_BUFFER'", "'ST_CENTROID'", "'ST_CONTAINS'", "'ST_CROSSES'",
    "'ST_DIFFERENCE'", "'ST_DIMENSION'", "'ST_DISJOINT'", "'ST_DISTANCE'",
    "'ST_ENDPOINT'", "'ST_ENVELOPE'", "'ST_EQUALS'", "'ST_EXTERIORRING'",
    "'ST_GEOMCOLLFROMTEXT'", "'ST_GEOMCOLLFROMTXT'", "'ST_GEOMCOLLFROMWKB'",
    "'ST_GEOMETRYCOLLECTIONFROMTEXT'", "'ST_GEOMETRYCOLLECTIONFROMWKB'", "'ST_GEOMETRYFROMTEXT'",
    "'ST_GEOMETRYFROMWKB'", "'ST_GEOMETRYN'", "'ST_GEOMETRYTYPE'", "'ST_GEOMFROMTEXT'",
    "'ST_GEOMFROMWKB'", "'ST_INTERIORRINGN'", "'ST_INTERSECTION'", "'ST_INTERSECTS'",
    "'ST_ISCLOSED'", "'ST_ISEMPTY'", "'ST_ISSIMPLE'", "'ST_LINEFROMTEXT'",
    "'ST_LINEFROMWKB'", "'ST_LINESTRINGFROMTEXT'", "'ST_LINESTRINGFROMWKB'",
    "'ST_NUMGEOMETRIES'", "'ST_NUMINTERIORRING'", "'ST_NUMINTERIORRINGS'",
    "'ST_NUMPOINTS'", "'ST_OVERLAPS'", "'ST_POINTFROMTEXT'", "'ST_POINTFROMWKB'",
    "'ST_POINTN'", "'ST_POLYFROMTEXT'", "'ST_POLYFROMWKB'", "'ST_POLYGONFROMTEXT'",
    "'ST_POLYGONFROMWKB'", "'ST_SRID'", "'ST_STARTPOINT'", "'ST_SYMDIFFERENCE'",
    "'ST_TOUCHES'", "'ST_UNION'", "'ST_WITHIN'", "'ST_X'", "'ST_Y'", "'SUBDATE'",
    "'SUBSTRING_INDEX'", "'SUBTIME'", "'SYSTEM_USER'", "'TAN'", "'TIMEDIFF'",
    "'TIMESTAMPADD'", "'TIMESTAMPDIFF'", "'TIME_FORMAT'", "'TIME_TO_SEC'",
    "'TOUCHES'", "'TO_BASE64'", "'TO_DAYS'", "'TO_SECONDS'", "'UCASE'", "'UNCOMPRESS'",
    "'UNCOMPRESSED_LENGTH'", "'UNHEX'", "'UNIX_TIMESTAMP'", "'UPDATEXML'",
    "'UPPER'", "'UUID'", "'UUID_SHORT'", "'VALIDATE_PASSWORD_STRENGTH'", "'VERSION'",
    "'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS'", "'WEEKDAY'", "'WEEKOFYEAR'", "'WEIGHT_STRING'",
    "'WITHIN'", "'YEARWEEK'", "'Y'", "'X'", "':='", "'+='", "'-='", "'*='",
    "'/='", "'%='", "'&='", "'^='", "'|='", "'*'", "'/'", "'%'", "'+'", "'--'",
    "'-'", "'DIV'", "'MOD'", "'='", "'>'", "'<'", "'!'", "'~'", "'|'", "'&'",
    "'^'", "'.'", "'('", "')'", "','", "';'", "'@'", "'0'", "'1'", "'2'",
    "'''", "'\"'", "'`'", "':'"
};
    private static readonly string[] _SymbolicNames = {
    null, "SPACE", "SPEC_MYSQL_COMMENT", "COMMENT_INPUT", "LINE_COMMENT",
    "ADD", "ALL", "ALTER", "ALWAYS", "ANALYZE", "AND", "AS", "ASC", "BEFORE",
    "BETWEEN", "BOTH", "BY", "CALL", "CASCADE", "CASE", "CAST", "CHANGE",
    "CHARACTER", "CHECK", "COLLATE", "COLUMN", "CONDITION", "CONSTRAINT",
    "CONTINUE", "CONVERT", "CREATE", "CROSS", "CURRENT", "CURRENT_USER", "CURSOR",
    "DATABASE", "DATABASES", "DECLARE", "DEFAULT", "DELAYED", "DELETE", "DESC",
    "DESCRIBE", "DETERMINISTIC", "DIAGNOSTICS", "DISTINCT", "DISTINCTROW",
    "DROP", "EACH", "ELSE", "ELSEIF", "ENCLOSED", "ESCAPED", "EXISTS", "EXIT",
    "EXPLAIN", "FALSE", "FETCH", "FOR", "FORCE", "FOREIGN", "FROM", "FULLTEXT",
    "GENERATED", "GET", "GRANT", "GROUP", "HAVING", "HIGH_PRIORITY", "IF",
    "IGNORE", "IN", "INDEX", "INFILE", "INNER", "INOUT", "INSERT", "INTERVAL",
    "INTO", "IS", "ITERATE", "JOIN", "KEY", "KEYS", "KILL", "LEADING", "LEAVE",
    "LEFT", "LIKE", "LIMIT", "LINEAR", "LINES", "LOAD", "LOCK", "LOOP", "LOW_PRIORITY",
    "MASTER_BIND", "MASTER_SSL_VERIFY_SERVER_CERT", "MATCH", "MAXVALUE", "MODIFIES",
    "NATURAL", "NOT", "NO_WRITE_TO_BINLOG", "NULL_LITERAL", "NUMBER", "ON",
    "OPTIMIZE", "OPTION", "OPTIONALLY", "OR", "ORDER", "OUT", "OUTER", "OUTFILE",
    "PARTITION", "PRIMARY", "PROCEDURE", "PURGE", "RANGE", "READ", "READS",
    "REFERENCES", "REGEXP", "RELEASE", "RENAME", "REPEAT", "REPLACE", "REQUIRE",
    "RESIGNAL", "RESTRICT", "RETURN", "REVOKE", "RIGHT", "RLIKE", "SCHEMA",
    "SCHEMAS", "SELECT", "SET", "SEPARATOR", "SHOW", "SIGNAL", "SPATIAL",
    "SQL", "SQLEXCEPTION", "SQLSTATE", "SQLWARNING", "SQL_BIG_RESULT", "SQL_CALC_FOUND_ROWS",
    "SQL_SMALL_RESULT", "SSL", "STACKED", "STARTING", "STRAIGHT_JOIN", "TABLE",
    "TERMINATED", "THEN", "TO", "TRAILING", "TRIGGER", "TRUE", "UNDO", "UNION",
    "UNIQUE", "UNLOCK", "UNSIGNED", "UPDATE", "USAGE", "USE", "USING", "VALUES",
    "WHEN", "WHERE", "WHILE", "WITH", "WRITE", "XOR", "ZEROFILL", "TINYINT",
    "SMALLINT", "MEDIUMINT", "INT", "INTEGER", "BIGINT", "REAL", "DOUBLE",
    "PRECISION", "FLOAT", "DECIMAL", "DEC", "NUMERIC", "DATE", "TIME", "TIMESTAMP",
    "DATETIME", "YEAR", "CHAR", "VARCHAR", "NVARCHAR", "NATIONAL", "BINARY",
    "VARBINARY", "TINYBLOB", "BLOB", "MEDIUMBLOB", "LONGBLOB", "TINYTEXT",
    "TEXT", "MEDIUMTEXT", "LONGTEXT", "ENUM", "VARYING", "SERIAL", "YEAR_MONTH",
    "DAY_HOUR", "DAY_MINUTE", "DAY_SECOND", "HOUR_MINUTE", "HOUR_SECOND",
    "MINUTE_SECOND", "SECOND_MICROSECOND", "MINUTE_MICROSECOND", "HOUR_MICROSECOND",
    "DAY_MICROSECOND", "AVG", "BIT_AND", "BIT_OR", "BIT_XOR", "COUNT", "GROUP_CONCAT",
    "MAX", "MIN", "STD", "STDDEV", "STDDEV_POP", "STDDEV_SAMP", "SUM", "VAR_POP",
    "VAR_SAMP", "VARIANCE", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP",
    "LOCALTIME", "CURDATE", "CURTIME", "DATE_ADD", "DATE_SUB", "EXTRACT",
    "LOCALTIMESTAMP", "NOW", "POSITION", "SUBSTR", "SUBSTRING", "SYSDATE",
    "TRIM", "UTC_DATE", "UTC_TIME", "UTC_TIMESTAMP", "ACCOUNT", "ACTION",
    "AFTER", "AGGREGATE", "ALGORITHM", "ANY", "AT", "AUTHORS", "AUTOCOMMIT",
    "AUTOEXTEND_SIZE", "AUTO_INCREMENT", "AVG_ROW_LENGTH", "BEGIN", "BINLOG",
    "BIT", "BLOCK", "BOOL", "BOOLEAN", "BTREE", "CACHE", "CASCADED", "CHAIN",
    "CHANGED", "CHANNEL", "CHECKSUM", "PAGE_CHECKSUM", "CIPHER", "CLASS_ORIGIN",
    "CLIENT", "CLOSE", "COALESCE", "CODE", "COLUMNS", "COLUMN_FORMAT", "COLUMN_NAME",
    "COMMENT", "COMMIT", "COMPACT", "COMPLETION", "COMPRESSED", "COMPRESSION",
    "CONCURRENT", "CONNECTION", "CONSISTENT", "CONSTRAINT_CATALOG", "CONSTRAINT_SCHEMA",
    "CONSTRAINT_NAME", "CONTAINS", "CONTEXT", "CONTRIBUTORS", "COPY", "CPU",
    "CURSOR_NAME", "DATA", "DATAFILE", "DEALLOCATE", "DEFAULT_AUTH", "DEFINER",
    "DELAY_KEY_WRITE", "DES_KEY_FILE", "DIRECTORY", "DISABLE", "DISCARD",
    "DISK", "DO", "DUMPFILE", "DUPLICATE", "DYNAMIC", "ENABLE", "ENCRYPTION",
    "END", "ENDS", "ENGINE", "ENGINES", "ERROR", "ERRORS", "ESCAPE", "EVEN",
    "EVENT", "EVENTS", "EVERY", "EXCHANGE", "EXCLUSIVE", "EXPIRE", "EXPORT",
    "EXTENDED", "EXTENT_SIZE", "FAST", "FAULTS", "FIELDS", "FILE_BLOCK_SIZE",
    "FILTER", "FIRST", "FIXED", "FLUSH", "FOLLOWS", "FOUND", "FULL", "FUNCTION",
    "GENERAL", "GLOBAL", "GRANTS", "GROUP_REPLICATION", "HANDLER", "HASH",
    "HELP", "HOST", "HOSTS", "IDENTIFIED", "IGNORE_SERVER_IDS", "IMPORT",
    "INDEXES", "INITIAL_SIZE", "INPLACE", "INSERT_METHOD", "INSTALL", "INSTANCE",
    "INVISIBLE", "INVOKER", "IO", "IO_THREAD", "IPC", "ISOLATION", "ISSUER",
    "JSON", "KEY_BLOCK_SIZE", "LANGUAGE", "LAST", "LEAVES", "LESS", "LEVEL",
    "LIST", "LOCAL", "LOGFILE", "LOGS", "MASTER", "MASTER_AUTO_POSITION",
    "MASTER_CONNECT_RETRY", "MASTER_DELAY", "MASTER_HEARTBEAT_PERIOD", "MASTER_HOST",
    "MASTER_LOG_FILE", "MASTER_LOG_POS", "MASTER_PASSWORD", "MASTER_PORT",
    "MASTER_RETRY_COUNT", "MASTER_SSL", "MASTER_SSL_CA", "MASTER_SSL_CAPATH",
    "MASTER_SSL_CERT", "MASTER_SSL_CIPHER", "MASTER_SSL_CRL", "MASTER_SSL_CRLPATH",
    "MASTER_SSL_KEY", "MASTER_TLS_VERSION", "MASTER_USER", "MAX_CONNECTIONS_PER_HOUR",
    "MAX_QUERIES_PER_HOUR", "MAX_ROWS", "MAX_SIZE", "MAX_UPDATES_PER_HOUR",
    "MAX_USER_CONNECTIONS", "MEDIUM", "MERGE", "MESSAGE_TEXT", "MID", "MIGRATE",
    "MIN_ROWS", "MODE", "MODIFY", "MUTEX", "MYSQL", "MYSQL_ERRNO", "NAME",
    "NAMES", "NCHAR", "NEVER", "NEXT", "NO", "NODEGROUP", "NONE", "OFFLINE",
    "OFFSET", "OJ", "OLD_PASSWORD", "ONE", "ONLINE", "ONLY", "OPEN", "OPTIMIZER_COSTS",
    "OPTIONS", "OWNER", "PACK_KEYS", "PAGE", "PARSER", "PARTIAL", "PARTITIONING",
    "PARTITIONS", "PASSWORD", "PHASE", "PLUGIN", "PLUGIN_DIR", "PLUGINS",
    "PORT", "PRECEDES", "PREPARE", "PRESERVE", "PREV", "PROCESSLIST", "PROFILE",
    "PROFILES", "PROXY", "QUERY", "QUICK", "REBUILD", "RECOVER", "REDO_BUFFER_SIZE",
    "REDUNDANT", "RELAY", "RELAY_LOG_FILE", "RELAY_LOG_POS", "RELAYLOG", "REMOVE",
    "REORGANIZE", "REPAIR", "REPLICATE_DO_DB", "REPLICATE_DO_TABLE", "REPLICATE_IGNORE_DB",
    "REPLICATE_IGNORE_TABLE", "REPLICATE_REWRITE_DB", "REPLICATE_WILD_DO_TABLE",
    "REPLICATE_WILD_IGNORE_TABLE", "REPLICATION", "RESET", "RESUME", "RETURNED_SQLSTATE",
    "RETURNS", "ROLLBACK", "ROLLUP", "ROTATE", "ROW", "ROWS", "ROW_FORMAT",
    "SAVEPOINT", "SCHEDULE", "SECURITY", "SERVER", "SESSION", "SHARE", "SHARED",
    "SIGNED", "SIMPLE", "SLAVE", "SLOW", "SNAPSHOT", "SOCKET", "SOME", "SONAME",
    "SOUNDS", "SOURCE", "SQL_AFTER_GTIDS", "SQL_AFTER_MTS_GAPS", "SQL_BEFORE_GTIDS",
    "SQL_BUFFER_RESULT", "SQL_CACHE", "SQL_NO_CACHE", "SQL_THREAD", "START",
    "STARTS", "STATS_AUTO_RECALC", "STATS_PERSISTENT", "STATS_SAMPLE_PAGES",
    "STATUS", "STOP", "STORAGE", "STORED", "STRING", "SUBCLASS_ORIGIN", "SUBJECT",
    "SUBPARTITION", "SUBPARTITIONS", "SUSPEND", "SWAPS", "SWITCHES", "TABLE_NAME",
    "TABLESPACE", "TEMPORARY", "TEMPTABLE", "THAN", "TRADITIONAL", "TRANSACTION",
    "TRIGGERS", "TRUNCATE", "UNDEFINED", "UNDOFILE", "UNDO_BUFFER_SIZE", "UNINSTALL",
    "UNKNOWN", "UNTIL", "UPGRADE", "USER", "USE_FRM", "USER_RESOURCES", "VALIDATION",
    "VALUE", "VARIABLES", "VIEW", "VIRTUAL", "VISIBLE", "WAIT", "WARNINGS",
    "WITHOUT", "WORK", "WRAPPER", "X509", "XA", "XML", "EUR", "USA", "JIS",
    "ISO", "INTERNAL", "QUARTER", "MONTH", "DAY", "HOUR", "MINUTE", "WEEK",
    "SECOND", "MICROSECOND", "TABLES", "ROUTINE", "EXECUTE", "FILE", "PROCESS",
    "RELOAD", "SHUTDOWN", "SUPER", "PRIVILEGES", "SESSION_VARIABLES_ADMIN",
    "ARMSCII8", "ASCII", "BIG5", "CP1250", "CP1251", "CP1256", "CP1257", "CP850",
    "CP852", "CP866", "CP932", "DEC8", "EUCJPMS", "EUCKR", "GB2312", "GBK",
    "GEOSTD8", "GREEK", "HEBREW", "HP8", "KEYBCS2", "KOI8R", "KOI8U", "LATIN1",
    "LATIN2", "LATIN5", "LATIN7", "MACCE", "MACROMAN", "SJIS", "SWE7", "TIS620",
    "UCS2", "UJIS", "UTF16", "UTF16LE", "UTF32", "UTF8", "UTF8MB3", "UTF8MB4",
    "ARCHIVE", "BLACKHOLE", "CSV", "FEDERATED", "INNODB", "MEMORY", "MRG_MYISAM",
    "MYISAM", "NDB", "NDBCLUSTER", "PERFORMANCE_SCHEMA", "TOKUDB", "REPEATABLE",
    "COMMITTED", "UNCOMMITTED", "SERIALIZABLE", "GEOMETRYCOLLECTION", "GEOMCOLLECTION",
    "GEOMETRY", "LINESTRING", "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON",
    "POINT", "POLYGON", "ABS", "ACOS", "ADDDATE", "ADDTIME", "AES_DECRYPT",
    "AES_ENCRYPT", "AREA", "ASBINARY", "ASIN", "ASTEXT", "ASWKB", "ASWKT",
    "ASYMMETRIC_DECRYPT", "ASYMMETRIC_DERIVE", "ASYMMETRIC_ENCRYPT", "ASYMMETRIC_SIGN",
    "ASYMMETRIC_VERIFY", "ATAN", "ATAN2", "BENCHMARK", "BIN", "BIT_COUNT",
    "BIT_LENGTH", "BUFFER", "CATALOG_NAME", "CEIL", "CEILING", "CENTROID",
    "CHARACTER_LENGTH", "CHARSET", "CHAR_LENGTH", "COERCIBILITY", "COLLATION",
    "COMPRESS", "CONCAT", "CONCAT_WS", "CONNECTION_ID", "CONV", "CONVERT_TZ",
    "COS", "COT", "CRC32", "CREATE_ASYMMETRIC_PRIV_KEY", "CREATE_ASYMMETRIC_PUB_KEY",
    "CREATE_DH_PARAMETERS", "CREATE_DIGEST", "CROSSES", "DATEDIFF", "DATE_FORMAT",
    "DAYNAME", "DAYOFMONTH", "DAYOFWEEK", "DAYOFYEAR", "DECODE", "DEGREES",
    "DES_DECRYPT", "DES_ENCRYPT", "DIMENSION", "DISJOINT", "ELT", "ENCODE",
    "ENCRYPT", "ENDPOINT", "ENVELOPE", "EQUALS", "EXP", "EXPORT_SET", "EXTERIORRING",
    "EXTRACTVALUE", "FIELD", "FIND_IN_SET", "FLOOR", "FORMAT", "FOUND_ROWS",
    "FROM_BASE64", "FROM_DAYS", "FROM_UNIXTIME", "GEOMCOLLFROMTEXT", "GEOMCOLLFROMWKB",
    "GEOMETRYCOLLECTIONFROMTEXT", "GEOMETRYCOLLECTIONFROMWKB", "GEOMETRYFROMTEXT",
    "GEOMETRYFROMWKB", "GEOMETRYN", "GEOMETRYTYPE", "GEOMFROMTEXT", "GEOMFROMWKB",
    "GET_FORMAT", "GET_LOCK", "GLENGTH", "GREATEST", "GTID_SUBSET", "GTID_SUBTRACT",
    "HEX", "IFNULL", "INET6_ATON", "INET6_NTOA", "INET_ATON", "INET_NTOA",
    "INSTR", "INTERIORRINGN", "INTERSECTS", "ISCLOSED", "ISEMPTY", "ISNULL",
    "ISSIMPLE", "IS_FREE_LOCK", "IS_IPV4", "IS_IPV4_COMPAT", "IS_IPV4_MAPPED",
    "IS_IPV6", "IS_USED_LOCK", "LAST_INSERT_ID", "LCASE", "LEAST", "LENGTH",
    "LINEFROMTEXT", "LINEFROMWKB", "LINESTRINGFROMTEXT", "LINESTRINGFROMWKB",
    "LN", "LOAD_FILE", "LOCATE", "LOG", "LOG10", "LOG2", "LOWER", "LPAD",
    "LTRIM", "MAKEDATE", "MAKETIME", "MAKE_SET", "MASTER_POS_WAIT", "MBRCONTAINS",
    "MBRDISJOINT", "MBREQUAL", "MBRINTERSECTS", "MBROVERLAPS", "MBRTOUCHES",
    "MBRWITHIN", "MD5", "MLINEFROMTEXT", "MLINEFROMWKB", "MONTHNAME", "MPOINTFROMTEXT",
    "MPOINTFROMWKB", "MPOLYFROMTEXT", "MPOLYFROMWKB", "MULTILINESTRINGFROMTEXT",
    "MULTILINESTRINGFROMWKB", "MULTIPOINTFROMTEXT", "MULTIPOINTFROMWKB", "MULTIPOLYGONFROMTEXT",
    "MULTIPOLYGONFROMWKB", "NAME_CONST", "NULLIF", "NUMGEOMETRIES", "NUMINTERIORRINGS",
    "NUMPOINTS", "OCT", "OCTET_LENGTH", "ORD", "OVERLAPS", "PERIOD_ADD", "PERIOD_DIFF",
    "PI", "POINTFROMTEXT", "POINTFROMWKB", "POINTN", "POLYFROMTEXT", "POLYFROMWKB",
    "POLYGONFROMTEXT", "POLYGONFROMWKB", "POW", "POWER", "QUOTE", "RADIANS",
    "RAND", "RANDOM_BYTES", "RELEASE_LOCK", "REVERSE", "ROUND", "ROW_COUNT",
    "RPAD", "RTRIM", "SEC_TO_TIME", "SESSION_USER", "SHA", "SHA1", "SHA2",
    "SCHEMA_NAME", "SIGN", "SIN", "SLEEP", "SOUNDEX", "SQL_THREAD_WAIT_AFTER_GTIDS",
    "SQRT", "SRID", "STARTPOINT", "STRCMP", "STR_TO_DATE", "ST_AREA", "ST_ASBINARY",
    "ST_ASTEXT", "ST_ASWKB", "ST_ASWKT", "ST_BUFFER", "ST_CENTROID", "ST_CONTAINS",
    "ST_CROSSES", "ST_DIFFERENCE", "ST_DIMENSION", "ST_DISJOINT", "ST_DISTANCE",
    "ST_ENDPOINT", "ST_ENVELOPE", "ST_EQUALS", "ST_EXTERIORRING", "ST_GEOMCOLLFROMTEXT",
    "ST_GEOMCOLLFROMTXT", "ST_GEOMCOLLFROMWKB", "ST_GEOMETRYCOLLECTIONFROMTEXT",
    "ST_GEOMETRYCOLLECTIONFROMWKB", "ST_GEOMETRYFROMTEXT", "ST_GEOMETRYFROMWKB",
    "ST_GEOMETRYN", "ST_GEOMETRYTYPE", "ST_GEOMFROMTEXT", "ST_GEOMFROMWKB",
    "ST_INTERIORRINGN", "ST_INTERSECTION", "ST_INTERSECTS", "ST_ISCLOSED",
    "ST_ISEMPTY", "ST_ISSIMPLE", "ST_LINEFROMTEXT", "ST_LINEFROMWKB", "ST_LINESTRINGFROMTEXT",
    "ST_LINESTRINGFROMWKB", "ST_NUMGEOMETRIES", "ST_NUMINTERIORRING", "ST_NUMINTERIORRINGS",
    "ST_NUMPOINTS", "ST_OVERLAPS", "ST_POINTFROMTEXT", "ST_POINTFROMWKB",
    "ST_POINTN", "ST_POLYFROMTEXT", "ST_POLYFROMWKB", "ST_POLYGONFROMTEXT",
    "ST_POLYGONFROMWKB", "ST_SRID", "ST_STARTPOINT", "ST_SYMDIFFERENCE", "ST_TOUCHES",
    "ST_UNION", "ST_WITHIN", "ST_X", "ST_Y", "SUBDATE", "SUBSTRING_INDEX",
    "SUBTIME", "SYSTEM_USER", "TAN", "TIMEDIFF", "TIMESTAMPADD", "TIMESTAMPDIFF",
    "TIME_FORMAT", "TIME_TO_SEC", "TOUCHES", "TO_BASE64", "TO_DAYS", "TO_SECONDS",
    "UCASE", "UNCOMPRESS", "UNCOMPRESSED_LENGTH", "UNHEX", "UNIX_TIMESTAMP",
    "UPDATEXML", "UPPER", "UUID", "UUID_SHORT", "VALIDATE_PASSWORD_STRENGTH",
    "VERSION", "WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS", "WEEKDAY", "WEEKOFYEAR",
    "WEIGHT_STRING", "WITHIN", "YEARWEEK", "Y_FUNCTION", "X_FUNCTION", "VAR_ASSIGN",
    "PLUS_ASSIGN", "MINUS_ASSIGN", "MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN",
    "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", "STAR", "DIVIDE", "MODULE", "PLUS",
    "MINUSMINUS", "MINUS", "DIV", "MOD", "EQUAL_SYMBOL", "GREATER_SYMBOL",
    "LESS_SYMBOL", "EXCLAMATION_SYMBOL", "BIT_NOT_OP", "BIT_OR_OP", "BIT_AND_OP",
    "BIT_XOR_OP", "DOT", "LR_BRACKET", "RR_BRACKET", "COMMA", "SEMI", "AT_SIGN",
    "ZERO_DECIMAL", "ONE_DECIMAL", "TWO_DECIMAL", "SINGLE_QUOTE_SYMB", "DOUBLE_QUOTE_SYMB",
    "REVERSE_QUOTE_SYMB", "COLON_SYMB", "CHARSET_REVERSE_QOUTE_STRING", "FILESIZE_LITERAL",
    "START_NATIONAL_STRING_LITERAL", "STRING_LITERAL", "DECIMAL_LITERAL",
    "HEXADECIMAL_LITERAL", "REAL_LITERAL", "NULL_SPEC_LITERAL", "BIT_STRING",
    "STRING_CHARSET_NAME", "DOT_ID", "ID", "REVERSE_QUOTE_ID", "STRING_USER_NAME",
    "LOCAL_ID", "GLOBAL_ID", "ERROR_RECONGNIGION"
};
    public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

    [NotNull]
    public override IVocabulary Vocabulary
    {
        get
        {
            return DefaultVocabulary;
        }
    }

    public override string GrammarFileName { get { return "MySqlParser.g4"; } }

    public override string[] RuleNames { get { return ruleNames; } }

    public override string SerializedAtn { get { return new string(_serializedATN); } }

    static MySqlParser()
    {
        decisionToDFA = new DFA[_ATN.NumberOfDecisions];
        for (int i = 0; i < _ATN.NumberOfDecisions; i++)
        {
            decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
        }
    }

    public MySqlParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

    public MySqlParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
    : base(input, output, errorOutput)
    {
        Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
    }

    public partial class RootContext : ParserRuleContext
    {
        public ITerminalNode Eof() { return GetToken(MySqlParser.Eof, 0); }
        public SqlStatementsContext sqlStatements()
        {
            return GetRuleContext<SqlStatementsContext>(0);
        }
        public ITerminalNode MINUSMINUS() { return GetToken(MySqlParser.MINUSMINUS, 0); }
        public RootContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_root; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterRoot(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitRoot(this);
        }
    }

    [RuleVersion(0)]
    public RootContext root()
    {
        RootContext _localctx = new RootContext(Context, State);
        EnterRule(_localctx, 0, RULE_root);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 631;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALTER) | (1L << ANALYZE) | (1L << CALL) | (1L << CHANGE) | (1L << CHECK) | (1L << CREATE) | (1L << DELETE) | (1L << DESC) | (1L << DESCRIBE) | (1L << DROP) | (1L << EXPLAIN))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (GET - 64)) | (1L << (GRANT - 64)) | (1L << (INSERT - 64)) | (1L << (KILL - 64)) | (1L << (LOAD - 64)) | (1L << (LOCK - 64)) | (1L << (OPTIMIZE - 64)) | (1L << (PURGE - 64)) | (1L << (RELEASE - 64)) | (1L << (RENAME - 64)) | (1L << (REPLACE - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (RESIGNAL - 129)) | (1L << (REVOKE - 129)) | (1L << (SELECT - 129)) | (1L << (SET - 129)) | (1L << (SHOW - 129)) | (1L << (SIGNAL - 129)) | (1L << (UNLOCK - 129)) | (1L << (UPDATE - 129)) | (1L << (USE - 129)))) != 0) || ((((_la - 271)) & ~0x3f) == 0 && ((1L << (_la - 271)) & ((1L << (BEGIN - 271)) | (1L << (BINLOG - 271)) | (1L << (CACHE - 271)) | (1L << (CHECKSUM - 271)) | (1L << (COMMIT - 271)) | (1L << (DEALLOCATE - 271)) | (1L << (DO - 271)))) != 0) || ((((_la - 353)) & ~0x3f) == 0 && ((1L << (_la - 353)) & ((1L << (FLUSH - 353)) | (1L << (HANDLER - 353)) | (1L << (HELP - 353)) | (1L << (INSTALL - 353)))) != 0) || ((((_la - 464)) & ~0x3f) == 0 && ((1L << (_la - 464)) & ((1L << (PREPARE - 464)) | (1L << (REPAIR - 464)) | (1L << (RESET - 464)) | (1L << (ROLLBACK - 464)) | (1L << (SAVEPOINT - 464)) | (1L << (START - 464)))) != 0) || ((((_la - 532)) & ~0x3f) == 0 && ((1L << (_la - 532)) & ((1L << (STOP - 532)) | (1L << (TRUNCATE - 532)) | (1L << (UNINSTALL - 532)) | (1L << (XA - 532)) | (1L << (EXECUTE - 532)) | (1L << (SHUTDOWN - 532)))) != 0) || _la == LR_BRACKET || _la == SEMI)
                {
                    {
                        State = 630; sqlStatements();
                    }
                }

                State = 634;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == MINUSMINUS)
                {
                    {
                        State = 633; Match(MINUSMINUS);
                    }
                }

                State = 636; Match(Eof);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class SqlStatementsContext : ParserRuleContext
    {
        public SqlStatementContext[] sqlStatement()
        {
            return GetRuleContexts<SqlStatementContext>();
        }
        public SqlStatementContext sqlStatement(int i)
        {
            return GetRuleContext<SqlStatementContext>(i);
        }
        public EmptyStatementContext[] emptyStatement()
        {
            return GetRuleContexts<EmptyStatementContext>();
        }
        public EmptyStatementContext emptyStatement(int i)
        {
            return GetRuleContext<EmptyStatementContext>(i);
        }
        public ITerminalNode[] SEMI() { return GetTokens(MySqlParser.SEMI); }
        public ITerminalNode SEMI(int i)
        {
            return GetToken(MySqlParser.SEMI, i);
        }
        public ITerminalNode[] MINUSMINUS() { return GetTokens(MySqlParser.MINUSMINUS); }
        public ITerminalNode MINUSMINUS(int i)
        {
            return GetToken(MySqlParser.MINUSMINUS, i);
        }
        public SqlStatementsContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_sqlStatements; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterSqlStatements(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitSqlStatements(this);
        }
    }

    [RuleVersion(0)]
    public SqlStatementsContext sqlStatements()
    {
        SqlStatementsContext _localctx = new SqlStatementsContext(Context, State);
        EnterRule(_localctx, 2, RULE_sqlStatements);
        int _la;
        try
        {
            int _alt;
            EnterOuterAlt(_localctx, 1);
            {
                State = 648;
                ErrorHandler.Sync(this);
                _alt = Interpreter.AdaptivePredict(TokenStream, 5, Context);
                while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                {
                    if (_alt == 1)
                    {
                        {
                            State = 646;
                            ErrorHandler.Sync(this);
                            switch (TokenStream.LA(1))
                            {
                                case ALTER:
                                case ANALYZE:
                                case CALL:
                                case CHANGE:
                                case CHECK:
                                case CREATE:
                                case DELETE:
                                case DESC:
                                case DESCRIBE:
                                case DROP:
                                case EXPLAIN:
                                case GET:
                                case GRANT:
                                case INSERT:
                                case KILL:
                                case LOAD:
                                case LOCK:
                                case OPTIMIZE:
                                case PURGE:
                                case RELEASE:
                                case RENAME:
                                case REPLACE:
                                case RESIGNAL:
                                case REVOKE:
                                case SELECT:
                                case SET:
                                case SHOW:
                                case SIGNAL:
                                case UNLOCK:
                                case UPDATE:
                                case USE:
                                case BEGIN:
                                case BINLOG:
                                case CACHE:
                                case CHECKSUM:
                                case COMMIT:
                                case DEALLOCATE:
                                case DO:
                                case FLUSH:
                                case HANDLER:
                                case HELP:
                                case INSTALL:
                                case PREPARE:
                                case REPAIR:
                                case RESET:
                                case ROLLBACK:
                                case SAVEPOINT:
                                case START:
                                case STOP:
                                case TRUNCATE:
                                case UNINSTALL:
                                case XA:
                                case EXECUTE:
                                case SHUTDOWN:
                                case LR_BRACKET:
                                    {
                                        State = 638; sqlStatement();
                                        State = 640;
                                        ErrorHandler.Sync(this);
                                        _la = TokenStream.LA(1);
                                        if (_la == MINUSMINUS)
                                        {
                                            {
                                                State = 639; Match(MINUSMINUS);
                                            }
                                        }

                                        State = 643;
                                        ErrorHandler.Sync(this);
                                        switch (Interpreter.AdaptivePredict(TokenStream, 3, Context))
                                        {
                                            case 1:
                                                {
                                                    State = 642; Match(SEMI);
                                                }
                                                break;
                                        }
                                    }
                                    break;
                                case SEMI:
                                    {
                                        State = 645; emptyStatement();
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException(this);
                            }
                        }
                    }
                    State = 650;
                    ErrorHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(TokenStream, 5, Context);
                }
                State = 659;
                ErrorHandler.Sync(this);
                switch (TokenStream.LA(1))
                {
                    case ALTER:
                    case ANALYZE:
                    case CALL:
                    case CHANGE:
                    case CHECK:
                    case CREATE:
                    case DELETE:
                    case DESC:
                    case DESCRIBE:
                    case DROP:
                    case EXPLAIN:
                    case GET:
                    case GRANT:
                    case INSERT:
                    case KILL:
                    case LOAD:
                    case LOCK:
                    case OPTIMIZE:
                    case PURGE:
                    case RELEASE:
                    case RENAME:
                    case REPLACE:
                    case RESIGNAL:
                    case REVOKE:
                    case SELECT:
                    case SET:
                    case SHOW:
                    case SIGNAL:
                    case UNLOCK:
                    case UPDATE:
                    case USE:
                    case BEGIN:
                    case BINLOG:
                    case CACHE:
                    case CHECKSUM:
                    case COMMIT:
                    case DEALLOCATE:
                    case DO:
                    case FLUSH:
                    case HANDLER:
                    case HELP:
                    case INSTALL:
                    case PREPARE:
                    case REPAIR:
                    case RESET:
                    case ROLLBACK:
                    case SAVEPOINT:
                    case START:
                    case STOP:
                    case TRUNCATE:
                    case UNINSTALL:
                    case XA:
                    case EXECUTE:
                    case SHUTDOWN:
                    case LR_BRACKET:
                        {
                            State = 651; sqlStatement();
                            State = 656;
                            ErrorHandler.Sync(this);
                            switch (Interpreter.AdaptivePredict(TokenStream, 7, Context))
                            {
                                case 1:
                                    {
                                        State = 653;
                                        ErrorHandler.Sync(this);
                                        _la = TokenStream.LA(1);
                                        if (_la == MINUSMINUS)
                                        {
                                            {
                                                State = 652; Match(MINUSMINUS);
                                            }
                                        }

                                        State = 655; Match(SEMI);
                                    }
                                    break;
                            }
                        }
                        break;
                    case SEMI:
                        {
                            State = 658; emptyStatement();
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class SqlStatementContext : ParserRuleContext
    {
        public DdlStatementContext ddlStatement()
        {
            return GetRuleContext<DdlStatementContext>(0);
        }
        public DmlStatementContext dmlStatement()
        {
            return GetRuleContext<DmlStatementContext>(0);
        }
        public TransactionStatementContext transactionStatement()
        {
            return GetRuleContext<TransactionStatementContext>(0);
        }
        public ReplicationStatementContext replicationStatement()
        {
            return GetRuleContext<ReplicationStatementContext>(0);
        }
        public PreparedStatementContext preparedStatement()
        {
            return GetRuleContext<PreparedStatementContext>(0);
        }
        public AdministrationStatementContext administrationStatement()
        {
            return GetRuleContext<AdministrationStatementContext>(0);
        }
        public UtilityStatementContext utilityStatement()
        {
            return GetRuleContext<UtilityStatementContext>(0);
        }
        public SqlStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_sqlStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterSqlStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitSqlStatement(this);
        }
    }

    [RuleVersion(0)]
    public SqlStatementContext sqlStatement()
    {
        SqlStatementContext _localctx = new SqlStatementContext(Context, State);
        EnterRule(_localctx, 4, RULE_sqlStatement);
        try
        {
            State = 668;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 9, Context))
            {
                case 1:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 661; ddlStatement();
                    }
                    break;
                case 2:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 662; dmlStatement();
                    }
                    break;
                case 3:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 663; transactionStatement();
                    }
                    break;
                case 4:
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 664; replicationStatement();
                    }
                    break;
                case 5:
                    EnterOuterAlt(_localctx, 5);
                    {
                        State = 665; preparedStatement();
                    }
                    break;
                case 6:
                    EnterOuterAlt(_localctx, 6);
                    {
                        State = 666; administrationStatement();
                    }
                    break;
                case 7:
                    EnterOuterAlt(_localctx, 7);
                    {
                        State = 667; utilityStatement();
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class EmptyStatementContext : ParserRuleContext
    {
        public ITerminalNode SEMI() { return GetToken(MySqlParser.SEMI, 0); }
        public EmptyStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_emptyStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterEmptyStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitEmptyStatement(this);
        }
    }

    [RuleVersion(0)]
    public EmptyStatementContext emptyStatement()
    {
        EmptyStatementContext _localctx = new EmptyStatementContext(Context, State);
        EnterRule(_localctx, 6, RULE_emptyStatement);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 670; Match(SEMI);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class DdlStatementContext : ParserRuleContext
    {
        public CreateDatabaseContext createDatabase()
        {
            return GetRuleContext<CreateDatabaseContext>(0);
        }
        public CreateEventContext createEvent()
        {
            return GetRuleContext<CreateEventContext>(0);
        }
        public CreateIndexContext createIndex()
        {
            return GetRuleContext<CreateIndexContext>(0);
        }
        public CreateLogfileGroupContext createLogfileGroup()
        {
            return GetRuleContext<CreateLogfileGroupContext>(0);
        }
        public CreateProcedureContext createProcedure()
        {
            return GetRuleContext<CreateProcedureContext>(0);
        }
        public CreateFunctionContext createFunction()
        {
            return GetRuleContext<CreateFunctionContext>(0);
        }
        public CreateServerContext createServer()
        {
            return GetRuleContext<CreateServerContext>(0);
        }
        public CreateTableContext createTable()
        {
            return GetRuleContext<CreateTableContext>(0);
        }
        public CreateTablespaceInnodbContext createTablespaceInnodb()
        {
            return GetRuleContext<CreateTablespaceInnodbContext>(0);
        }
        public CreateTablespaceNdbContext createTablespaceNdb()
        {
            return GetRuleContext<CreateTablespaceNdbContext>(0);
        }
        public CreateTriggerContext createTrigger()
        {
            return GetRuleContext<CreateTriggerContext>(0);
        }
        public CreateViewContext createView()
        {
            return GetRuleContext<CreateViewContext>(0);
        }
        public AlterDatabaseContext alterDatabase()
        {
            return GetRuleContext<AlterDatabaseContext>(0);
        }
        public AlterEventContext alterEvent()
        {
            return GetRuleContext<AlterEventContext>(0);
        }
        public AlterFunctionContext alterFunction()
        {
            return GetRuleContext<AlterFunctionContext>(0);
        }
        public AlterInstanceContext alterInstance()
        {
            return GetRuleContext<AlterInstanceContext>(0);
        }
        public AlterLogfileGroupContext alterLogfileGroup()
        {
            return GetRuleContext<AlterLogfileGroupContext>(0);
        }
        public AlterProcedureContext alterProcedure()
        {
            return GetRuleContext<AlterProcedureContext>(0);
        }
        public AlterServerContext alterServer()
        {
            return GetRuleContext<AlterServerContext>(0);
        }
        public AlterTableContext alterTable()
        {
            return GetRuleContext<AlterTableContext>(0);
        }
        public AlterTablespaceContext alterTablespace()
        {
            return GetRuleContext<AlterTablespaceContext>(0);
        }
        public AlterViewContext alterView()
        {
            return GetRuleContext<AlterViewContext>(0);
        }
        public DropDatabaseContext dropDatabase()
        {
            return GetRuleContext<DropDatabaseContext>(0);
        }
        public DropEventContext dropEvent()
        {
            return GetRuleContext<DropEventContext>(0);
        }
        public DropIndexContext dropIndex()
        {
            return GetRuleContext<DropIndexContext>(0);
        }
        public DropLogfileGroupContext dropLogfileGroup()
        {
            return GetRuleContext<DropLogfileGroupContext>(0);
        }
        public DropProcedureContext dropProcedure()
        {
            return GetRuleContext<DropProcedureContext>(0);
        }
        public DropFunctionContext dropFunction()
        {
            return GetRuleContext<DropFunctionContext>(0);
        }
        public DropServerContext dropServer()
        {
            return GetRuleContext<DropServerContext>(0);
        }
        public DropTableContext dropTable()
        {
            return GetRuleContext<DropTableContext>(0);
        }
        public DropTablespaceContext dropTablespace()
        {
            return GetRuleContext<DropTablespaceContext>(0);
        }
        public DropTriggerContext dropTrigger()
        {
            return GetRuleContext<DropTriggerContext>(0);
        }
        public DropViewContext dropView()
        {
            return GetRuleContext<DropViewContext>(0);
        }
        public RenameTableContext renameTable()
        {
            return GetRuleContext<RenameTableContext>(0);
        }
        public TruncateTableContext truncateTable()
        {
            return GetRuleContext<TruncateTableContext>(0);
        }
        public DdlStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_ddlStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterDdlStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitDdlStatement(this);
        }
    }

    [RuleVersion(0)]
    public DdlStatementContext ddlStatement()
    {
        DdlStatementContext _localctx = new DdlStatementContext(Context, State);
        EnterRule(_localctx, 8, RULE_ddlStatement);
        try
        {
            State = 707;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 10, Context))
            {
                case 1:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 672; createDatabase();
                    }
                    break;
                case 2:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 673; createEvent();
                    }
                    break;
                case 3:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 674; createIndex();
                    }
                    break;
                case 4:
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 675; createLogfileGroup();
                    }
                    break;
                case 5:
                    EnterOuterAlt(_localctx, 5);
                    {
                        State = 676; createProcedure();
                    }
                    break;
                case 6:
                    EnterOuterAlt(_localctx, 6);
                    {
                        State = 677; createFunction();
                    }
                    break;
                case 7:
                    EnterOuterAlt(_localctx, 7);
                    {
                        State = 678; createServer();
                    }
                    break;
                case 8:
                    EnterOuterAlt(_localctx, 8);
                    {
                        State = 679; createTable();
                    }
                    break;
                case 9:
                    EnterOuterAlt(_localctx, 9);
                    {
                        State = 680; createTablespaceInnodb();
                    }
                    break;
                case 10:
                    EnterOuterAlt(_localctx, 10);
                    {
                        State = 681; createTablespaceNdb();
                    }
                    break;
                case 11:
                    EnterOuterAlt(_localctx, 11);
                    {
                        State = 682; createTrigger();
                    }
                    break;
                case 12:
                    EnterOuterAlt(_localctx, 12);
                    {
                        State = 683; createView();
                    }
                    break;
                case 13:
                    EnterOuterAlt(_localctx, 13);
                    {
                        State = 684; alterDatabase();
                    }
                    break;
                case 14:
                    EnterOuterAlt(_localctx, 14);
                    {
                        State = 685; alterEvent();
                    }
                    break;
                case 15:
                    EnterOuterAlt(_localctx, 15);
                    {
                        State = 686; alterFunction();
                    }
                    break;
                case 16:
                    EnterOuterAlt(_localctx, 16);
                    {
                        State = 687; alterInstance();
                    }
                    break;
                case 17:
                    EnterOuterAlt(_localctx, 17);
                    {
                        State = 688; alterLogfileGroup();
                    }
                    break;
                case 18:
                    EnterOuterAlt(_localctx, 18);
                    {
                        State = 689; alterProcedure();
                    }
                    break;
                case 19:
                    EnterOuterAlt(_localctx, 19);
                    {
                        State = 690; alterServer();
                    }
                    break;
                case 20:
                    EnterOuterAlt(_localctx, 20);
                    {
                        State = 691; alterTable();
                    }
                    break;
                case 21:
                    EnterOuterAlt(_localctx, 21);
                    {
                        State = 692; alterTablespace();
                    }
                    break;
                case 22:
                    EnterOuterAlt(_localctx, 22);
                    {
                        State = 693; alterView();
                    }
                    break;
                case 23:
                    EnterOuterAlt(_localctx, 23);
                    {
                        State = 694; dropDatabase();
                    }
                    break;
                case 24:
                    EnterOuterAlt(_localctx, 24);
                    {
                        State = 695; dropEvent();
                    }
                    break;
                case 25:
                    EnterOuterAlt(_localctx, 25);
                    {
                        State = 696; dropIndex();
                    }
                    break;
                case 26:
                    EnterOuterAlt(_localctx, 26);
                    {
                        State = 697; dropLogfileGroup();
                    }
                    break;
                case 27:
                    EnterOuterAlt(_localctx, 27);
                    {
                        State = 698; dropProcedure();
                    }
                    break;
                case 28:
                    EnterOuterAlt(_localctx, 28);
                    {
                        State = 699; dropFunction();
                    }
                    break;
                case 29:
                    EnterOuterAlt(_localctx, 29);
                    {
                        State = 700; dropServer();
                    }
                    break;
                case 30:
                    EnterOuterAlt(_localctx, 30);
                    {
                        State = 701; dropTable();
                    }
                    break;
                case 31:
                    EnterOuterAlt(_localctx, 31);
                    {
                        State = 702; dropTablespace();
                    }
                    break;
                case 32:
                    EnterOuterAlt(_localctx, 32);
                    {
                        State = 703; dropTrigger();
                    }
                    break;
                case 33:
                    EnterOuterAlt(_localctx, 33);
                    {
                        State = 704; dropView();
                    }
                    break;
                case 34:
                    EnterOuterAlt(_localctx, 34);
                    {
                        State = 705; renameTable();
                    }
                    break;
                case 35:
                    EnterOuterAlt(_localctx, 35);
                    {
                        State = 706; truncateTable();
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class DmlStatementContext : ParserRuleContext
    {
        public SelectStatementContext selectStatement()
        {
            return GetRuleContext<SelectStatementContext>(0);
        }
        public InsertStatementContext insertStatement()
        {
            return GetRuleContext<InsertStatementContext>(0);
        }
        public UpdateStatementContext updateStatement()
        {
            return GetRuleContext<UpdateStatementContext>(0);
        }
        public DeleteStatementContext deleteStatement()
        {
            return GetRuleContext<DeleteStatementContext>(0);
        }
        public ReplaceStatementContext replaceStatement()
        {
            return GetRuleContext<ReplaceStatementContext>(0);
        }
        public CallStatementContext callStatement()
        {
            return GetRuleContext<CallStatementContext>(0);
        }
        public LoadDataStatementContext loadDataStatement()
        {
            return GetRuleContext<LoadDataStatementContext>(0);
        }
        public LoadXmlStatementContext loadXmlStatement()
        {
            return GetRuleContext<LoadXmlStatementContext>(0);
        }
        public DoStatementContext doStatement()
        {
            return GetRuleContext<DoStatementContext>(0);
        }
        public HandlerStatementContext handlerStatement()
        {
            return GetRuleContext<HandlerStatementContext>(0);
        }
        public DmlStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_dmlStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterDmlStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitDmlStatement(this);
        }
    }

    [RuleVersion(0)]
    public DmlStatementContext dmlStatement()
    {
        DmlStatementContext _localctx = new DmlStatementContext(Context, State);
        EnterRule(_localctx, 10, RULE_dmlStatement);
        try
        {
            State = 719;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 11, Context))
            {
                case 1:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 709; selectStatement();
                    }
                    break;
                case 2:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 710; insertStatement();
                    }
                    break;
                case 3:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 711; updateStatement();
                    }
                    break;
                case 4:
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 712; deleteStatement();
                    }
                    break;
                case 5:
                    EnterOuterAlt(_localctx, 5);
                    {
                        State = 713; replaceStatement();
                    }
                    break;
                case 6:
                    EnterOuterAlt(_localctx, 6);
                    {
                        State = 714; callStatement();
                    }
                    break;
                case 7:
                    EnterOuterAlt(_localctx, 7);
                    {
                        State = 715; loadDataStatement();
                    }
                    break;
                case 8:
                    EnterOuterAlt(_localctx, 8);
                    {
                        State = 716; loadXmlStatement();
                    }
                    break;
                case 9:
                    EnterOuterAlt(_localctx, 9);
                    {
                        State = 717; doStatement();
                    }
                    break;
                case 10:
                    EnterOuterAlt(_localctx, 10);
                    {
                        State = 718; handlerStatement();
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class TransactionStatementContext : ParserRuleContext
    {
        public StartTransactionContext startTransaction()
        {
            return GetRuleContext<StartTransactionContext>(0);
        }
        public BeginWorkContext beginWork()
        {
            return GetRuleContext<BeginWorkContext>(0);
        }
        public CommitWorkContext commitWork()
        {
            return GetRuleContext<CommitWorkContext>(0);
        }
        public RollbackWorkContext rollbackWork()
        {
            return GetRuleContext<RollbackWorkContext>(0);
        }
        public SavepointStatementContext savepointStatement()
        {
            return GetRuleContext<SavepointStatementContext>(0);
        }
        public RollbackStatementContext rollbackStatement()
        {
            return GetRuleContext<RollbackStatementContext>(0);
        }
        public ReleaseStatementContext releaseStatement()
        {
            return GetRuleContext<ReleaseStatementContext>(0);
        }
        public LockTablesContext lockTables()
        {
            return GetRuleContext<LockTablesContext>(0);
        }
        public UnlockTablesContext unlockTables()
        {
            return GetRuleContext<UnlockTablesContext>(0);
        }
        public TransactionStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_transactionStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterTransactionStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitTransactionStatement(this);
        }
    }

    [RuleVersion(0)]
    public TransactionStatementContext transactionStatement()
    {
        TransactionStatementContext _localctx = new TransactionStatementContext(Context, State);
        EnterRule(_localctx, 12, RULE_transactionStatement);
        try
        {
            State = 730;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 12, Context))
            {
                case 1:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 721; startTransaction();
                    }
                    break;
                case 2:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 722; beginWork();
                    }
                    break;
                case 3:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 723; commitWork();
                    }
                    break;
                case 4:
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 724; rollbackWork();
                    }
                    break;
                case 5:
                    EnterOuterAlt(_localctx, 5);
                    {
                        State = 725; savepointStatement();
                    }
                    break;
                case 6:
                    EnterOuterAlt(_localctx, 6);
                    {
                        State = 726; rollbackStatement();
                    }
                    break;
                case 7:
                    EnterOuterAlt(_localctx, 7);
                    {
                        State = 727; releaseStatement();
                    }
                    break;
                case 8:
                    EnterOuterAlt(_localctx, 8);
                    {
                        State = 728; lockTables();
                    }
                    break;
                case 9:
                    EnterOuterAlt(_localctx, 9);
                    {
                        State = 729; unlockTables();
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ReplicationStatementContext : ParserRuleContext
    {
        public ChangeMasterContext changeMaster()
        {
            return GetRuleContext<ChangeMasterContext>(0);
        }
        public ChangeReplicationFilterContext changeReplicationFilter()
        {
            return GetRuleContext<ChangeReplicationFilterContext>(0);
        }
        public PurgeBinaryLogsContext purgeBinaryLogs()
        {
            return GetRuleContext<PurgeBinaryLogsContext>(0);
        }
        public ResetMasterContext resetMaster()
        {
            return GetRuleContext<ResetMasterContext>(0);
        }
        public ResetSlaveContext resetSlave()
        {
            return GetRuleContext<ResetSlaveContext>(0);
        }
        public StartSlaveContext startSlave()
        {
            return GetRuleContext<StartSlaveContext>(0);
        }
        public StopSlaveContext stopSlave()
        {
            return GetRuleContext<StopSlaveContext>(0);
        }
        public StartGroupReplicationContext startGroupReplication()
        {
            return GetRuleContext<StartGroupReplicationContext>(0);
        }
        public StopGroupReplicationContext stopGroupReplication()
        {
            return GetRuleContext<StopGroupReplicationContext>(0);
        }
        public XaStartTransactionContext xaStartTransaction()
        {
            return GetRuleContext<XaStartTransactionContext>(0);
        }
        public XaEndTransactionContext xaEndTransaction()
        {
            return GetRuleContext<XaEndTransactionContext>(0);
        }
        public XaPrepareStatementContext xaPrepareStatement()
        {
            return GetRuleContext<XaPrepareStatementContext>(0);
        }
        public XaCommitWorkContext xaCommitWork()
        {
            return GetRuleContext<XaCommitWorkContext>(0);
        }
        public XaRollbackWorkContext xaRollbackWork()
        {
            return GetRuleContext<XaRollbackWorkContext>(0);
        }
        public XaRecoverWorkContext xaRecoverWork()
        {
            return GetRuleContext<XaRecoverWorkContext>(0);
        }
        public ReplicationStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_replicationStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterReplicationStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitReplicationStatement(this);
        }
    }

    [RuleVersion(0)]
    public ReplicationStatementContext replicationStatement()
    {
        ReplicationStatementContext _localctx = new ReplicationStatementContext(Context, State);
        EnterRule(_localctx, 14, RULE_replicationStatement);
        try
        {
            State = 747;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 13, Context))
            {
                case 1:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 732; changeMaster();
                    }
                    break;
                case 2:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 733; changeReplicationFilter();
                    }
                    break;
                case 3:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 734; purgeBinaryLogs();
                    }
                    break;
                case 4:
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 735; resetMaster();
                    }
                    break;
                case 5:
                    EnterOuterAlt(_localctx, 5);
                    {
                        State = 736; resetSlave();
                    }
                    break;
                case 6:
                    EnterOuterAlt(_localctx, 6);
                    {
                        State = 737; startSlave();
                    }
                    break;
                case 7:
                    EnterOuterAlt(_localctx, 7);
                    {
                        State = 738; stopSlave();
                    }
                    break;
                case 8:
                    EnterOuterAlt(_localctx, 8);
                    {
                        State = 739; startGroupReplication();
                    }
                    break;
                case 9:
                    EnterOuterAlt(_localctx, 9);
                    {
                        State = 740; stopGroupReplication();
                    }
                    break;
                case 10:
                    EnterOuterAlt(_localctx, 10);
                    {
                        State = 741; xaStartTransaction();
                    }
                    break;
                case 11:
                    EnterOuterAlt(_localctx, 11);
                    {
                        State = 742; xaEndTransaction();
                    }
                    break;
                case 12:
                    EnterOuterAlt(_localctx, 12);
                    {
                        State = 743; xaPrepareStatement();
                    }
                    break;
                case 13:
                    EnterOuterAlt(_localctx, 13);
                    {
                        State = 744; xaCommitWork();
                    }
                    break;
                case 14:
                    EnterOuterAlt(_localctx, 14);
                    {
                        State = 745; xaRollbackWork();
                    }
                    break;
                case 15:
                    EnterOuterAlt(_localctx, 15);
                    {
                        State = 746; xaRecoverWork();
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class PreparedStatementContext : ParserRuleContext
    {
        public PrepareStatementContext prepareStatement()
        {
            return GetRuleContext<PrepareStatementContext>(0);
        }
        public ExecuteStatementContext executeStatement()
        {
            return GetRuleContext<ExecuteStatementContext>(0);
        }
        public DeallocatePrepareContext deallocatePrepare()
        {
            return GetRuleContext<DeallocatePrepareContext>(0);
        }
        public PreparedStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_preparedStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterPreparedStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitPreparedStatement(this);
        }
    }

    [RuleVersion(0)]
    public PreparedStatementContext preparedStatement()
    {
        PreparedStatementContext _localctx = new PreparedStatementContext(Context, State);
        EnterRule(_localctx, 16, RULE_preparedStatement);
        try
        {
            State = 752;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case PREPARE:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 749; prepareStatement();
                    }
                    break;
                case EXECUTE:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 750; executeStatement();
                    }
                    break;
                case DROP:
                case DEALLOCATE:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 751; deallocatePrepare();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class CompoundStatementContext : ParserRuleContext
    {
        public BlockStatementContext blockStatement()
        {
            return GetRuleContext<BlockStatementContext>(0);
        }
        public CaseStatementContext caseStatement()
        {
            return GetRuleContext<CaseStatementContext>(0);
        }
        public IfStatementContext ifStatement()
        {
            return GetRuleContext<IfStatementContext>(0);
        }
        public LeaveStatementContext leaveStatement()
        {
            return GetRuleContext<LeaveStatementContext>(0);
        }
        public LoopStatementContext loopStatement()
        {
            return GetRuleContext<LoopStatementContext>(0);
        }
        public RepeatStatementContext repeatStatement()
        {
            return GetRuleContext<RepeatStatementContext>(0);
        }
        public WhileStatementContext whileStatement()
        {
            return GetRuleContext<WhileStatementContext>(0);
        }
        public IterateStatementContext iterateStatement()
        {
            return GetRuleContext<IterateStatementContext>(0);
        }
        public ReturnStatementContext returnStatement()
        {
            return GetRuleContext<ReturnStatementContext>(0);
        }
        public CursorStatementContext cursorStatement()
        {
            return GetRuleContext<CursorStatementContext>(0);
        }
        public CompoundStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_compoundStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterCompoundStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitCompoundStatement(this);
        }
    }

    [RuleVersion(0)]
    public CompoundStatementContext compoundStatement()
    {
        CompoundStatementContext _localctx = new CompoundStatementContext(Context, State);
        EnterRule(_localctx, 18, RULE_compoundStatement);
        try
        {
            State = 764;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 15, Context))
            {
                case 1:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 754; blockStatement();
                    }
                    break;
                case 2:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 755; caseStatement();
                    }
                    break;
                case 3:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 756; ifStatement();
                    }
                    break;
                case 4:
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 757; leaveStatement();
                    }
                    break;
                case 5:
                    EnterOuterAlt(_localctx, 5);
                    {
                        State = 758; loopStatement();
                    }
                    break;
                case 6:
                    EnterOuterAlt(_localctx, 6);
                    {
                        State = 759; repeatStatement();
                    }
                    break;
                case 7:
                    EnterOuterAlt(_localctx, 7);
                    {
                        State = 760; whileStatement();
                    }
                    break;
                case 8:
                    EnterOuterAlt(_localctx, 8);
                    {
                        State = 761; iterateStatement();
                    }
                    break;
                case 9:
                    EnterOuterAlt(_localctx, 9);
                    {
                        State = 762; returnStatement();
                    }
                    break;
                case 10:
                    EnterOuterAlt(_localctx, 10);
                    {
                        State = 763; cursorStatement();
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class AdministrationStatementContext : ParserRuleContext
    {
        public AlterUserContext alterUser()
        {
            return GetRuleContext<AlterUserContext>(0);
        }
        public CreateUserContext createUser()
        {
            return GetRuleContext<CreateUserContext>(0);
        }
        public DropUserContext dropUser()
        {
            return GetRuleContext<DropUserContext>(0);
        }
        public GrantStatementContext grantStatement()
        {
            return GetRuleContext<GrantStatementContext>(0);
        }
        public GrantProxyContext grantProxy()
        {
            return GetRuleContext<GrantProxyContext>(0);
        }
        public RenameUserContext renameUser()
        {
            return GetRuleContext<RenameUserContext>(0);
        }
        public RevokeStatementContext revokeStatement()
        {
            return GetRuleContext<RevokeStatementContext>(0);
        }
        public RevokeProxyContext revokeProxy()
        {
            return GetRuleContext<RevokeProxyContext>(0);
        }
        public AnalyzeTableContext analyzeTable()
        {
            return GetRuleContext<AnalyzeTableContext>(0);
        }
        public CheckTableContext checkTable()
        {
            return GetRuleContext<CheckTableContext>(0);
        }
        public ChecksumTableContext checksumTable()
        {
            return GetRuleContext<ChecksumTableContext>(0);
        }
        public OptimizeTableContext optimizeTable()
        {
            return GetRuleContext<OptimizeTableContext>(0);
        }
        public RepairTableContext repairTable()
        {
            return GetRuleContext<RepairTableContext>(0);
        }
        public CreateUdfunctionContext createUdfunction()
        {
            return GetRuleContext<CreateUdfunctionContext>(0);
        }
        public InstallPluginContext installPlugin()
        {
            return GetRuleContext<InstallPluginContext>(0);
        }
        public UninstallPluginContext uninstallPlugin()
        {
            return GetRuleContext<UninstallPluginContext>(0);
        }
        public SetStatementContext setStatement()
        {
            return GetRuleContext<SetStatementContext>(0);
        }
        public ShowStatementContext showStatement()
        {
            return GetRuleContext<ShowStatementContext>(0);
        }
        public BinlogStatementContext binlogStatement()
        {
            return GetRuleContext<BinlogStatementContext>(0);
        }
        public CacheIndexStatementContext cacheIndexStatement()
        {
            return GetRuleContext<CacheIndexStatementContext>(0);
        }
        public FlushStatementContext flushStatement()
        {
            return GetRuleContext<FlushStatementContext>(0);
        }
        public KillStatementContext killStatement()
        {
            return GetRuleContext<KillStatementContext>(0);
        }
        public LoadIndexIntoCacheContext loadIndexIntoCache()
        {
            return GetRuleContext<LoadIndexIntoCacheContext>(0);
        }
        public ResetStatementContext resetStatement()
        {
            return GetRuleContext<ResetStatementContext>(0);
        }
        public ShutdownStatementContext shutdownStatement()
        {
            return GetRuleContext<ShutdownStatementContext>(0);
        }
        public AdministrationStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_administrationStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAdministrationStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAdministrationStatement(this);
        }
    }

    [RuleVersion(0)]
    public AdministrationStatementContext administrationStatement()
    {
        AdministrationStatementContext _localctx = new AdministrationStatementContext(Context, State);
        EnterRule(_localctx, 20, RULE_administrationStatement);
        try
        {
            State = 791;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 16, Context))
            {
                case 1:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 766; alterUser();
                    }
                    break;
                case 2:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 767; createUser();
                    }
                    break;
                case 3:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 768; dropUser();
                    }
                    break;
                case 4:
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 769; grantStatement();
                    }
                    break;
                case 5:
                    EnterOuterAlt(_localctx, 5);
                    {
                        State = 770; grantProxy();
                    }
                    break;
                case 6:
                    EnterOuterAlt(_localctx, 6);
                    {
                        State = 771; renameUser();
                    }
                    break;
                case 7:
                    EnterOuterAlt(_localctx, 7);
                    {
                        State = 772; revokeStatement();
                    }
                    break;
                case 8:
                    EnterOuterAlt(_localctx, 8);
                    {
                        State = 773; revokeProxy();
                    }
                    break;
                case 9:
                    EnterOuterAlt(_localctx, 9);
                    {
                        State = 774; analyzeTable();
                    }
                    break;
                case 10:
                    EnterOuterAlt(_localctx, 10);
                    {
                        State = 775; checkTable();
                    }
                    break;
                case 11:
                    EnterOuterAlt(_localctx, 11);
                    {
                        State = 776; checksumTable();
                    }
                    break;
                case 12:
                    EnterOuterAlt(_localctx, 12);
                    {
                        State = 777; optimizeTable();
                    }
                    break;
                case 13:
                    EnterOuterAlt(_localctx, 13);
                    {
                        State = 778; repairTable();
                    }
                    break;
                case 14:
                    EnterOuterAlt(_localctx, 14);
                    {
                        State = 779; createUdfunction();
                    }
                    break;
                case 15:
                    EnterOuterAlt(_localctx, 15);
                    {
                        State = 780; installPlugin();
                    }
                    break;
                case 16:
                    EnterOuterAlt(_localctx, 16);
                    {
                        State = 781; uninstallPlugin();
                    }
                    break;
                case 17:
                    EnterOuterAlt(_localctx, 17);
                    {
                        State = 782; setStatement();
                    }
                    break;
                case 18:
                    EnterOuterAlt(_localctx, 18);
                    {
                        State = 783; showStatement();
                    }
                    break;
                case 19:
                    EnterOuterAlt(_localctx, 19);
                    {
                        State = 784; binlogStatement();
                    }
                    break;
                case 20:
                    EnterOuterAlt(_localctx, 20);
                    {
                        State = 785; cacheIndexStatement();
                    }
                    break;
                case 21:
                    EnterOuterAlt(_localctx, 21);
                    {
                        State = 786; flushStatement();
                    }
                    break;
                case 22:
                    EnterOuterAlt(_localctx, 22);
                    {
                        State = 787; killStatement();
                    }
                    break;
                case 23:
                    EnterOuterAlt(_localctx, 23);
                    {
                        State = 788; loadIndexIntoCache();
                    }
                    break;
                case 24:
                    EnterOuterAlt(_localctx, 24);
                    {
                        State = 789; resetStatement();
                    }
                    break;
                case 25:
                    EnterOuterAlt(_localctx, 25);
                    {
                        State = 790; shutdownStatement();
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class UtilityStatementContext : ParserRuleContext
    {
        public SimpleDescribeStatementContext simpleDescribeStatement()
        {
            return GetRuleContext<SimpleDescribeStatementContext>(0);
        }
        public FullDescribeStatementContext fullDescribeStatement()
        {
            return GetRuleContext<FullDescribeStatementContext>(0);
        }
        public HelpStatementContext helpStatement()
        {
            return GetRuleContext<HelpStatementContext>(0);
        }
        public UseStatementContext useStatement()
        {
            return GetRuleContext<UseStatementContext>(0);
        }
        public SignalStatementContext signalStatement()
        {
            return GetRuleContext<SignalStatementContext>(0);
        }
        public ResignalStatementContext resignalStatement()
        {
            return GetRuleContext<ResignalStatementContext>(0);
        }
        public DiagnosticsStatementContext diagnosticsStatement()
        {
            return GetRuleContext<DiagnosticsStatementContext>(0);
        }
        public UtilityStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_utilityStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterUtilityStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitUtilityStatement(this);
        }
    }

    [RuleVersion(0)]
    public UtilityStatementContext utilityStatement()
    {
        UtilityStatementContext _localctx = new UtilityStatementContext(Context, State);
        EnterRule(_localctx, 22, RULE_utilityStatement);
        try
        {
            State = 800;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 17, Context))
            {
                case 1:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 793; simpleDescribeStatement();
                    }
                    break;
                case 2:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 794; fullDescribeStatement();
                    }
                    break;
                case 3:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 795; helpStatement();
                    }
                    break;
                case 4:
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 796; useStatement();
                    }
                    break;
                case 5:
                    EnterOuterAlt(_localctx, 5);
                    {
                        State = 797; signalStatement();
                    }
                    break;
                case 6:
                    EnterOuterAlt(_localctx, 6);
                    {
                        State = 798; resignalStatement();
                    }
                    break;
                case 7:
                    EnterOuterAlt(_localctx, 7);
                    {
                        State = 799; diagnosticsStatement();
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class CreateDatabaseContext : ParserRuleContext
    {
        public IToken dbFormat;
        public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public ITerminalNode DATABASE() { return GetToken(MySqlParser.DATABASE, 0); }
        public ITerminalNode SCHEMA() { return GetToken(MySqlParser.SCHEMA, 0); }
        public IfNotExistsContext ifNotExists()
        {
            return GetRuleContext<IfNotExistsContext>(0);
        }
        public CreateDatabaseOptionContext[] createDatabaseOption()
        {
            return GetRuleContexts<CreateDatabaseOptionContext>();
        }
        public CreateDatabaseOptionContext createDatabaseOption(int i)
        {
            return GetRuleContext<CreateDatabaseOptionContext>(i);
        }
        public CreateDatabaseContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_createDatabase; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterCreateDatabase(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitCreateDatabase(this);
        }
    }

    [RuleVersion(0)]
    public CreateDatabaseContext createDatabase()
    {
        CreateDatabaseContext _localctx = new CreateDatabaseContext(Context, State);
        EnterRule(_localctx, 24, RULE_createDatabase);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 802; Match(CREATE);
                State = 803;
                _localctx.dbFormat = TokenStream.LT(1);
                _la = TokenStream.LA(1);
                if (!(_la == DATABASE || _la == SCHEMA))
                {
                    _localctx.dbFormat = ErrorHandler.RecoverInline(this);
                }
                else
                {
                    ErrorHandler.ReportMatch(this);
                    Consume();
                }
                State = 805;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == IF)
                {
                    {
                        State = 804; ifNotExists();
                    }
                }

                State = 807; uid();
                State = 811;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CHARACTER) | (1L << COLLATE) | (1L << DEFAULT))) != 0) || _la == CHARSET)
                {
                    {
                        {
                            State = 808; createDatabaseOption();
                        }
                    }
                    State = 813;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class CreateEventContext : ParserRuleContext
    {
        public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
        public ITerminalNode EVENT() { return GetToken(MySqlParser.EVENT, 0); }
        public FullIdContext fullId()
        {
            return GetRuleContext<FullIdContext>(0);
        }
        public ITerminalNode[] ON() { return GetTokens(MySqlParser.ON); }
        public ITerminalNode ON(int i)
        {
            return GetToken(MySqlParser.ON, i);
        }
        public ITerminalNode SCHEDULE() { return GetToken(MySqlParser.SCHEDULE, 0); }
        public ScheduleExpressionContext scheduleExpression()
        {
            return GetRuleContext<ScheduleExpressionContext>(0);
        }
        public ITerminalNode DO() { return GetToken(MySqlParser.DO, 0); }
        public RoutineBodyContext routineBody()
        {
            return GetRuleContext<RoutineBodyContext>(0);
        }
        public OwnerStatementContext ownerStatement()
        {
            return GetRuleContext<OwnerStatementContext>(0);
        }
        public IfNotExistsContext ifNotExists()
        {
            return GetRuleContext<IfNotExistsContext>(0);
        }
        public ITerminalNode COMPLETION() { return GetToken(MySqlParser.COMPLETION, 0); }
        public ITerminalNode PRESERVE() { return GetToken(MySqlParser.PRESERVE, 0); }
        public EnableTypeContext enableType()
        {
            return GetRuleContext<EnableTypeContext>(0);
        }
        public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
        public CreateEventContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_createEvent; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterCreateEvent(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitCreateEvent(this);
        }
    }

    [RuleVersion(0)]
    public CreateEventContext createEvent()
    {
        CreateEventContext _localctx = new CreateEventContext(Context, State);
        EnterRule(_localctx, 26, RULE_createEvent);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 814; Match(CREATE);
                State = 816;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == DEFINER)
                {
                    {
                        State = 815; ownerStatement();
                    }
                }

                State = 818; Match(EVENT);
                State = 820;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == IF)
                {
                    {
                        State = 819; ifNotExists();
                    }
                }

                State = 822; fullId();
                State = 823; Match(ON);
                State = 824; Match(SCHEDULE);
                State = 825; scheduleExpression();
                State = 832;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == ON)
                {
                    {
                        State = 826; Match(ON);
                        State = 827; Match(COMPLETION);
                        State = 829;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == NOT)
                        {
                            {
                                State = 828; Match(NOT);
                            }
                        }

                        State = 831; Match(PRESERVE);
                    }
                }

                State = 835;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == DISABLE || _la == ENABLE)
                {
                    {
                        State = 834; enableType();
                    }
                }

                State = 839;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == COMMENT)
                {
                    {
                        State = 837; Match(COMMENT);
                        State = 838; Match(STRING_LITERAL);
                    }
                }

                State = 841; Match(DO);
                State = 842; routineBody();
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class CreateIndexContext : ParserRuleContext
    {
        public IToken intimeAction;
        public IToken indexCategory;
        public IToken algType;
        public IToken lockType;
        public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
        public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
        public TableNameContext tableName()
        {
            return GetRuleContext<TableNameContext>(0);
        }
        public IndexColumnNamesContext indexColumnNames()
        {
            return GetRuleContext<IndexColumnNamesContext>(0);
        }
        public IndexTypeContext indexType()
        {
            return GetRuleContext<IndexTypeContext>(0);
        }
        public IndexOptionContext[] indexOption()
        {
            return GetRuleContexts<IndexOptionContext>();
        }
        public IndexOptionContext indexOption(int i)
        {
            return GetRuleContext<IndexOptionContext>(i);
        }
        public ITerminalNode[] ALGORITHM() { return GetTokens(MySqlParser.ALGORITHM); }
        public ITerminalNode ALGORITHM(int i)
        {
            return GetToken(MySqlParser.ALGORITHM, i);
        }
        public ITerminalNode[] LOCK() { return GetTokens(MySqlParser.LOCK); }
        public ITerminalNode LOCK(int i)
        {
            return GetToken(MySqlParser.LOCK, i);
        }
        public ITerminalNode ONLINE() { return GetToken(MySqlParser.ONLINE, 0); }
        public ITerminalNode OFFLINE() { return GetToken(MySqlParser.OFFLINE, 0); }
        public ITerminalNode UNIQUE() { return GetToken(MySqlParser.UNIQUE, 0); }
        public ITerminalNode FULLTEXT() { return GetToken(MySqlParser.FULLTEXT, 0); }
        public ITerminalNode SPATIAL() { return GetToken(MySqlParser.SPATIAL, 0); }
        public ITerminalNode[] DEFAULT() { return GetTokens(MySqlParser.DEFAULT); }
        public ITerminalNode DEFAULT(int i)
        {
            return GetToken(MySqlParser.DEFAULT, i);
        }
        public ITerminalNode[] INPLACE() { return GetTokens(MySqlParser.INPLACE); }
        public ITerminalNode INPLACE(int i)
        {
            return GetToken(MySqlParser.INPLACE, i);
        }
        public ITerminalNode[] COPY() { return GetTokens(MySqlParser.COPY); }
        public ITerminalNode COPY(int i)
        {
            return GetToken(MySqlParser.COPY, i);
        }
        public ITerminalNode[] NONE() { return GetTokens(MySqlParser.NONE); }
        public ITerminalNode NONE(int i)
        {
            return GetToken(MySqlParser.NONE, i);
        }
        public ITerminalNode[] SHARED() { return GetTokens(MySqlParser.SHARED); }
        public ITerminalNode SHARED(int i)
        {
            return GetToken(MySqlParser.SHARED, i);
        }
        public ITerminalNode[] EXCLUSIVE() { return GetTokens(MySqlParser.EXCLUSIVE); }
        public ITerminalNode EXCLUSIVE(int i)
        {
            return GetToken(MySqlParser.EXCLUSIVE, i);
        }
        public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
        public ITerminalNode EQUAL_SYMBOL(int i)
        {
            return GetToken(MySqlParser.EQUAL_SYMBOL, i);
        }
        public CreateIndexContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_createIndex; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterCreateIndex(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitCreateIndex(this);
        }
    }

    [RuleVersion(0)]
    public CreateIndexContext createIndex()
    {
        CreateIndexContext _localctx = new CreateIndexContext(Context, State);
        EnterRule(_localctx, 28, RULE_createIndex);
        int _la;
        try
        {
            int _alt;
            EnterOuterAlt(_localctx, 1);
            {
                State = 844; Match(CREATE);
                State = 846;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == OFFLINE || _la == ONLINE)
                {
                    {
                        State = 845;
                        _localctx.intimeAction = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == OFFLINE || _la == ONLINE))
                        {
                            _localctx.intimeAction = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                }

                State = 849;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == FULLTEXT || _la == SPATIAL || _la == UNIQUE)
                {
                    {
                        State = 848;
                        _localctx.indexCategory = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == FULLTEXT || _la == SPATIAL || _la == UNIQUE))
                        {
                            _localctx.indexCategory = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                }

                State = 851; Match(INDEX);
                State = 852; uid();
                State = 854;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == USING)
                {
                    {
                        State = 853; indexType();
                    }
                }

                State = 856; Match(ON);
                State = 857; tableName();
                State = 858; indexColumnNames();
                State = 862;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while (_la == USING || _la == WITH || _la == COMMENT || _la == INVISIBLE || _la == KEY_BLOCK_SIZE || _la == VISIBLE)
                {
                    {
                        {
                            State = 859; indexOption();
                        }
                    }
                    State = 864;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
                State = 877;
                ErrorHandler.Sync(this);
                _alt = Interpreter.AdaptivePredict(TokenStream, 33, Context);
                while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                {
                    if (_alt == 1)
                    {
                        {
                            State = 875;
                            ErrorHandler.Sync(this);
                            switch (TokenStream.LA(1))
                            {
                                case ALGORITHM:
                                    {
                                        State = 865; Match(ALGORITHM);
                                        State = 867;
                                        ErrorHandler.Sync(this);
                                        _la = TokenStream.LA(1);
                                        if (_la == EQUAL_SYMBOL)
                                        {
                                            {
                                                State = 866; Match(EQUAL_SYMBOL);
                                            }
                                        }

                                        State = 869;
                                        _localctx.algType = TokenStream.LT(1);
                                        _la = TokenStream.LA(1);
                                        if (!(_la == DEFAULT || _la == COPY || _la == INPLACE))
                                        {
                                            _localctx.algType = ErrorHandler.RecoverInline(this);
                                        }
                                        else
                                        {
                                            ErrorHandler.ReportMatch(this);
                                            Consume();
                                        }
                                    }
                                    break;
                                case LOCK:
                                    {
                                        State = 870; Match(LOCK);
                                        State = 872;
                                        ErrorHandler.Sync(this);
                                        _la = TokenStream.LA(1);
                                        if (_la == EQUAL_SYMBOL)
                                        {
                                            {
                                                State = 871; Match(EQUAL_SYMBOL);
                                            }
                                        }

                                        State = 874;
                                        _localctx.lockType = TokenStream.LT(1);
                                        _la = TokenStream.LA(1);
                                        if (!(_la == DEFAULT || _la == EXCLUSIVE || _la == NONE || _la == SHARED))
                                        {
                                            _localctx.lockType = ErrorHandler.RecoverInline(this);
                                        }
                                        else
                                        {
                                            ErrorHandler.ReportMatch(this);
                                            Consume();
                                        }
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException(this);
                            }
                        }
                    }
                    State = 879;
                    ErrorHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(TokenStream, 33, Context);
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class CreateLogfileGroupContext : ParserRuleContext
    {
        public IToken undoFile;
        public FileSizeLiteralContext initSize;
        public FileSizeLiteralContext undoSize;
        public FileSizeLiteralContext redoSize;
        public IToken comment;
        public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
        public ITerminalNode LOGFILE() { return GetToken(MySqlParser.LOGFILE, 0); }
        public ITerminalNode GROUP() { return GetToken(MySqlParser.GROUP, 0); }
        public UidContext[] uid()
        {
            return GetRuleContexts<UidContext>();
        }
        public UidContext uid(int i)
        {
            return GetRuleContext<UidContext>(i);
        }
        public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
        public ITerminalNode UNDOFILE() { return GetToken(MySqlParser.UNDOFILE, 0); }
        public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
        public EngineNameContext engineName()
        {
            return GetRuleContext<EngineNameContext>(0);
        }
        public ITerminalNode[] STRING_LITERAL() { return GetTokens(MySqlParser.STRING_LITERAL); }
        public ITerminalNode STRING_LITERAL(int i)
        {
            return GetToken(MySqlParser.STRING_LITERAL, i);
        }
        public ITerminalNode INITIAL_SIZE() { return GetToken(MySqlParser.INITIAL_SIZE, 0); }
        public ITerminalNode UNDO_BUFFER_SIZE() { return GetToken(MySqlParser.UNDO_BUFFER_SIZE, 0); }
        public ITerminalNode REDO_BUFFER_SIZE() { return GetToken(MySqlParser.REDO_BUFFER_SIZE, 0); }
        public ITerminalNode NODEGROUP() { return GetToken(MySqlParser.NODEGROUP, 0); }
        public ITerminalNode WAIT() { return GetToken(MySqlParser.WAIT, 0); }
        public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
        public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
        public ITerminalNode EQUAL_SYMBOL(int i)
        {
            return GetToken(MySqlParser.EQUAL_SYMBOL, i);
        }
        public FileSizeLiteralContext[] fileSizeLiteral()
        {
            return GetRuleContexts<FileSizeLiteralContext>();
        }
        public FileSizeLiteralContext fileSizeLiteral(int i)
        {
            return GetRuleContext<FileSizeLiteralContext>(i);
        }
        public CreateLogfileGroupContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_createLogfileGroup; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterCreateLogfileGroup(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitCreateLogfileGroup(this);
        }
    }

    [RuleVersion(0)]
    public CreateLogfileGroupContext createLogfileGroup()
    {
        CreateLogfileGroupContext _localctx = new CreateLogfileGroupContext(Context, State);
        EnterRule(_localctx, 30, RULE_createLogfileGroup);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 880; Match(CREATE);
                State = 881; Match(LOGFILE);
                State = 882; Match(GROUP);
                State = 883; uid();
                State = 884; Match(ADD);
                State = 885; Match(UNDOFILE);
                State = 886; _localctx.undoFile = Match(STRING_LITERAL);
                State = 892;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == INITIAL_SIZE)
                {
                    {
                        State = 887; Match(INITIAL_SIZE);
                        State = 889;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == EQUAL_SYMBOL)
                        {
                            {
                                State = 888; Match(EQUAL_SYMBOL);
                            }
                        }

                        State = 891; _localctx.initSize = fileSizeLiteral();
                    }
                }

                State = 899;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == UNDO_BUFFER_SIZE)
                {
                    {
                        State = 894; Match(UNDO_BUFFER_SIZE);
                        State = 896;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == EQUAL_SYMBOL)
                        {
                            {
                                State = 895; Match(EQUAL_SYMBOL);
                            }
                        }

                        State = 898; _localctx.undoSize = fileSizeLiteral();
                    }
                }

                State = 906;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == REDO_BUFFER_SIZE)
                {
                    {
                        State = 901; Match(REDO_BUFFER_SIZE);
                        State = 903;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == EQUAL_SYMBOL)
                        {
                            {
                                State = 902; Match(EQUAL_SYMBOL);
                            }
                        }

                        State = 905; _localctx.redoSize = fileSizeLiteral();
                    }
                }

                State = 913;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == NODEGROUP)
                {
                    {
                        State = 908; Match(NODEGROUP);
                        State = 910;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == EQUAL_SYMBOL)
                        {
                            {
                                State = 909; Match(EQUAL_SYMBOL);
                            }
                        }

                        State = 912; uid();
                    }
                }

                State = 916;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == WAIT)
                {
                    {
                        State = 915; Match(WAIT);
                    }
                }

                State = 923;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == COMMENT)
                {
                    {
                        State = 918; Match(COMMENT);
                        State = 920;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == EQUAL_SYMBOL)
                        {
                            {
                                State = 919; Match(EQUAL_SYMBOL);
                            }
                        }

                        State = 922; _localctx.comment = Match(STRING_LITERAL);
                    }
                }

                State = 925; Match(ENGINE);
                State = 927;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == EQUAL_SYMBOL)
                {
                    {
                        State = 926; Match(EQUAL_SYMBOL);
                    }
                }

                State = 929; engineName();
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class CreateProcedureContext : ParserRuleContext
    {
        public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
        public ITerminalNode PROCEDURE() { return GetToken(MySqlParser.PROCEDURE, 0); }
        public FullIdContext fullId()
        {
            return GetRuleContext<FullIdContext>(0);
        }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public RoutineBodyContext routineBody()
        {
            return GetRuleContext<RoutineBodyContext>(0);
        }
        public OwnerStatementContext ownerStatement()
        {
            return GetRuleContext<OwnerStatementContext>(0);
        }
        public ProcedureParameterContext[] procedureParameter()
        {
            return GetRuleContexts<ProcedureParameterContext>();
        }
        public ProcedureParameterContext procedureParameter(int i)
        {
            return GetRuleContext<ProcedureParameterContext>(i);
        }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public RoutineOptionContext[] routineOption()
        {
            return GetRuleContexts<RoutineOptionContext>();
        }
        public RoutineOptionContext routineOption(int i)
        {
            return GetRuleContext<RoutineOptionContext>(i);
        }
        public CreateProcedureContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_createProcedure; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterCreateProcedure(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitCreateProcedure(this);
        }
    }

    [RuleVersion(0)]
    public CreateProcedureContext createProcedure()
    {
        CreateProcedureContext _localctx = new CreateProcedureContext(Context, State);
        EnterRule(_localctx, 32, RULE_createProcedure);
        int _la;
        try
        {
            int _alt;
            EnterOuterAlt(_localctx, 1);
            {
                State = 931; Match(CREATE);
                State = 933;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == DEFINER)
                {
                    {
                        State = 932; ownerStatement();
                    }
                }

                State = 935; Match(PROCEDURE);
                State = 936; fullId();
                State = 937; Match(LR_BRACKET);
                State = 939;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (IN - 32)) | (1L << (INOUT - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (OUT - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)) | (1L << (POSITION - 191)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ACCOUNT - 259)) | (1L << (ACTION - 259)) | (1L << (AFTER - 259)) | (1L << (AGGREGATE - 259)) | (1L << (ALGORITHM - 259)) | (1L << (ANY - 259)) | (1L << (AT - 259)) | (1L << (AUTHORS - 259)) | (1L << (AUTOCOMMIT - 259)) | (1L << (AUTOEXTEND_SIZE - 259)) | (1L << (AUTO_INCREMENT - 259)) | (1L << (AVG_ROW_LENGTH - 259)) | (1L << (BEGIN - 259)) | (1L << (BINLOG - 259)) | (1L << (BIT - 259)) | (1L << (BLOCK - 259)) | (1L << (BOOL - 259)) | (1L << (BOOLEAN - 259)) | (1L << (BTREE - 259)) | (1L << (CACHE - 259)) | (1L << (CASCADED - 259)) | (1L << (CHAIN - 259)) | (1L << (CHANGED - 259)) | (1L << (CHANNEL - 259)) | (1L << (CHECKSUM - 259)) | (1L << (PAGE_CHECKSUM - 259)) | (1L << (CIPHER - 259)) | (1L << (CLASS_ORIGIN - 259)) | (1L << (CLIENT - 259)) | (1L << (CLOSE - 259)) | (1L << (COALESCE - 259)) | (1L << (CODE - 259)) | (1L << (COLUMNS - 259)) | (1L << (COLUMN_FORMAT - 259)) | (1L << (COLUMN_NAME - 259)) | (1L << (COMMENT - 259)) | (1L << (COMMIT - 259)) | (1L << (COMPACT - 259)) | (1L << (COMPLETION - 259)) | (1L << (COMPRESSED - 259)) | (1L << (COMPRESSION - 259)) | (1L << (CONCURRENT - 259)) | (1L << (CONNECTION - 259)) | (1L << (CONSISTENT - 259)) | (1L << (CONSTRAINT_CATALOG - 259)) | (1L << (CONSTRAINT_SCHEMA - 259)) | (1L << (CONSTRAINT_NAME - 259)) | (1L << (CONTAINS - 259)) | (1L << (CONTEXT - 259)) | (1L << (CONTRIBUTORS - 259)) | (1L << (COPY - 259)) | (1L << (CPU - 259)) | (1L << (CURSOR_NAME - 259)) | (1L << (DATA - 259)) | (1L << (DATAFILE - 259)) | (1L << (DEALLOCATE - 259)) | (1L << (DEFAULT_AUTH - 259)) | (1L << (DEFINER - 259)) | (1L << (DELAY_KEY_WRITE - 259)) | (1L << (DES_KEY_FILE - 259)) | (1L << (DIRECTORY - 259)) | (1L << (DISABLE - 259)) | (1L << (DISCARD - 259)) | (1L << (DISK - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (DO - 323)) | (1L << (DUMPFILE - 323)) | (1L << (DUPLICATE - 323)) | (1L << (DYNAMIC - 323)) | (1L << (ENABLE - 323)) | (1L << (ENCRYPTION - 323)) | (1L << (END - 323)) | (1L << (ENDS - 323)) | (1L << (ENGINE - 323)) | (1L << (ENGINES - 323)) | (1L << (ERROR - 323)) | (1L << (ERRORS - 323)) | (1L << (ESCAPE - 323)) | (1L << (EVEN - 323)) | (1L << (EVENT - 323)) | (1L << (EVENTS - 323)) | (1L << (EVERY - 323)) | (1L << (EXCHANGE - 323)) | (1L << (EXCLUSIVE - 323)) | (1L << (EXPIRE - 323)) | (1L << (EXPORT - 323)) | (1L << (EXTENDED - 323)) | (1L << (EXTENT_SIZE - 323)) | (1L << (FAST - 323)) | (1L << (FAULTS - 323)) | (1L << (FIELDS - 323)) | (1L << (FILE_BLOCK_SIZE - 323)) | (1L << (FILTER - 323)) | (1L << (FIRST - 323)) | (1L << (FIXED - 323)) | (1L << (FLUSH - 323)) | (1L << (FOLLOWS - 323)) | (1L << (FOUND - 323)) | (1L << (FULL - 323)) | (1L << (FUNCTION - 323)) | (1L << (GENERAL - 323)) | (1L << (GLOBAL - 323)) | (1L << (GRANTS - 323)) | (1L << (GROUP_REPLICATION - 323)) | (1L << (HANDLER - 323)) | (1L << (HASH - 323)) | (1L << (HELP - 323)) | (1L << (HOST - 323)) | (1L << (HOSTS - 323)) | (1L << (IDENTIFIED - 323)) | (1L << (IGNORE_SERVER_IDS - 323)) | (1L << (IMPORT - 323)) | (1L << (INDEXES - 323)) | (1L << (INITIAL_SIZE - 323)) | (1L << (INPLACE - 323)) | (1L << (INSERT_METHOD - 323)) | (1L << (INSTALL - 323)) | (1L << (INSTANCE - 323)) | (1L << (INVISIBLE - 323)) | (1L << (INVOKER - 323)) | (1L << (IO - 323)) | (1L << (IO_THREAD - 323)) | (1L << (IPC - 323)) | (1L << (ISOLATION - 323)) | (1L << (ISSUER - 323)) | (1L << (JSON - 323)) | (1L << (KEY_BLOCK_SIZE - 323)) | (1L << (LANGUAGE - 323)) | (1L << (LAST - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (LEAVES - 387)) | (1L << (LESS - 387)) | (1L << (LEVEL - 387)) | (1L << (LIST - 387)) | (1L << (LOCAL - 387)) | (1L << (LOGFILE - 387)) | (1L << (LOGS - 387)) | (1L << (MASTER - 387)) | (1L << (MASTER_AUTO_POSITION - 387)) | (1L << (MASTER_CONNECT_RETRY - 387)) | (1L << (MASTER_DELAY - 387)) | (1L << (MASTER_HEARTBEAT_PERIOD - 387)) | (1L << (MASTER_HOST - 387)) | (1L << (MASTER_LOG_FILE - 387)) | (1L << (MASTER_LOG_POS - 387)) | (1L << (MASTER_PASSWORD - 387)) | (1L << (MASTER_PORT - 387)) | (1L << (MASTER_RETRY_COUNT - 387)) | (1L << (MASTER_SSL - 387)) | (1L << (MASTER_SSL_CA - 387)) | (1L << (MASTER_SSL_CAPATH - 387)) | (1L << (MASTER_SSL_CERT - 387)) | (1L << (MASTER_SSL_CIPHER - 387)) | (1L << (MASTER_SSL_CRL - 387)) | (1L << (MASTER_SSL_CRLPATH - 387)) | (1L << (MASTER_SSL_KEY - 387)) | (1L << (MASTER_TLS_VERSION - 387)) | (1L << (MASTER_USER - 387)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 387)) | (1L << (MAX_QUERIES_PER_HOUR - 387)) | (1L << (MAX_ROWS - 387)) | (1L << (MAX_SIZE - 387)) | (1L << (MAX_UPDATES_PER_HOUR - 387)) | (1L << (MAX_USER_CONNECTIONS - 387)) | (1L << (MEDIUM - 387)) | (1L << (MERGE - 387)) | (1L << (MESSAGE_TEXT - 387)) | (1L << (MID - 387)) | (1L << (MIGRATE - 387)) | (1L << (MIN_ROWS - 387)) | (1L << (MODE - 387)) | (1L << (MODIFY - 387)) | (1L << (MUTEX - 387)) | (1L << (MYSQL - 387)) | (1L << (MYSQL_ERRNO - 387)) | (1L << (NAME - 387)) | (1L << (NAMES - 387)) | (1L << (NCHAR - 387)) | (1L << (NEVER - 387)) | (1L << (NEXT - 387)) | (1L << (NO - 387)) | (1L << (NODEGROUP - 387)) | (1L << (NONE - 387)) | (1L << (OFFLINE - 387)) | (1L << (OFFSET - 387)) | (1L << (OJ - 387)) | (1L << (OLD_PASSWORD - 387)) | (1L << (ONE - 387)) | (1L << (ONLINE - 387)) | (1L << (ONLY - 387)) | (1L << (OPEN - 387)) | (1L << (OPTIMIZER_COSTS - 387)) | (1L << (OPTIONS - 387)) | (1L << (OWNER - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PAGE - 451)) | (1L << (PARSER - 451)) | (1L << (PARTIAL - 451)) | (1L << (PARTITIONING - 451)) | (1L << (PARTITIONS - 451)) | (1L << (PASSWORD - 451)) | (1L << (PHASE - 451)) | (1L << (PLUGIN - 451)) | (1L << (PLUGIN_DIR - 451)) | (1L << (PLUGINS - 451)) | (1L << (PORT - 451)) | (1L << (PRECEDES - 451)) | (1L << (PREPARE - 451)) | (1L << (PRESERVE - 451)) | (1L << (PREV - 451)) | (1L << (PROCESSLIST - 451)) | (1L << (PROFILE - 451)) | (1L << (PROFILES - 451)) | (1L << (PROXY - 451)) | (1L << (QUERY - 451)) | (1L << (QUICK - 451)) | (1L << (REBUILD - 451)) | (1L << (RECOVER - 451)) | (1L << (REDO_BUFFER_SIZE - 451)) | (1L << (REDUNDANT - 451)) | (1L << (RELAY - 451)) | (1L << (RELAY_LOG_FILE - 451)) | (1L << (RELAY_LOG_POS - 451)) | (1L << (RELAYLOG - 451)) | (1L << (REMOVE - 451)) | (1L << (REORGANIZE - 451)) | (1L << (REPAIR - 451)) | (1L << (REPLICATE_DO_DB - 451)) | (1L << (REPLICATE_DO_TABLE - 451)) | (1L << (REPLICATE_IGNORE_DB - 451)) | (1L << (REPLICATE_IGNORE_TABLE - 451)) | (1L << (REPLICATE_REWRITE_DB - 451)) | (1L << (REPLICATE_WILD_DO_TABLE - 451)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 451)) | (1L << (REPLICATION - 451)) | (1L << (RESET - 451)) | (1L << (RESUME - 451)) | (1L << (RETURNED_SQLSTATE - 451)) | (1L << (RETURNS - 451)) | (1L << (ROLLBACK - 451)) | (1L << (ROLLUP - 451)) | (1L << (ROTATE - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (ROW_FORMAT - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SCHEDULE - 451)) | (1L << (SECURITY - 451)) | (1L << (SERVER - 451)) | (1L << (SESSION - 451)) | (1L << (SHARE - 451)) | (1L << (SHARED - 451)) | (1L << (SIGNED - 451)) | (1L << (SIMPLE - 451)) | (1L << (SLAVE - 451)) | (1L << (SLOW - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOCKET - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SOME - 515)) | (1L << (SONAME - 515)) | (1L << (SOUNDS - 515)) | (1L << (SOURCE - 515)) | (1L << (SQL_AFTER_GTIDS - 515)) | (1L << (SQL_AFTER_MTS_GAPS - 515)) | (1L << (SQL_BEFORE_GTIDS - 515)) | (1L << (SQL_BUFFER_RESULT - 515)) | (1L << (SQL_CACHE - 515)) | (1L << (SQL_NO_CACHE - 515)) | (1L << (SQL_THREAD - 515)) | (1L << (START - 515)) | (1L << (STARTS - 515)) | (1L << (STATS_AUTO_RECALC - 515)) | (1L << (STATS_PERSISTENT - 515)) | (1L << (STATS_SAMPLE_PAGES - 515)) | (1L << (STATUS - 515)) | (1L << (STOP - 515)) | (1L << (STORAGE - 515)) | (1L << (STRING - 515)) | (1L << (SUBCLASS_ORIGIN - 515)) | (1L << (SUBJECT - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBPARTITIONS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SWAPS - 515)) | (1L << (SWITCHES - 515)) | (1L << (TABLE_NAME - 515)) | (1L << (TABLESPACE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TEMPTABLE - 515)) | (1L << (THAN - 515)) | (1L << (TRADITIONAL - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRIGGERS - 515)) | (1L << (TRUNCATE - 515)) | (1L << (UNDEFINED - 515)) | (1L << (UNDOFILE - 515)) | (1L << (UNDO_BUFFER_SIZE - 515)) | (1L << (UNINSTALL - 515)) | (1L << (UNKNOWN - 515)) | (1L << (UNTIL - 515)) | (1L << (UPGRADE - 515)) | (1L << (USER - 515)) | (1L << (USE_FRM - 515)) | (1L << (USER_RESOURCES - 515)) | (1L << (VALIDATION - 515)) | (1L << (VALUE - 515)) | (1L << (VARIABLES - 515)) | (1L << (VIEW - 515)) | (1L << (VISIBLE - 515)) | (1L << (WAIT - 515)) | (1L << (WARNINGS - 515)) | (1L << (WITHOUT - 515)) | (1L << (WORK - 515)) | (1L << (WRAPPER - 515)) | (1L << (X509 - 515)) | (1L << (XA - 515)) | (1L << (XML - 515)))) != 0) || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (INTERNAL - 580)) | (1L << (QUARTER - 580)) | (1L << (MONTH - 580)) | (1L << (DAY - 580)) | (1L << (HOUR - 580)) | (1L << (MINUTE - 580)) | (1L << (WEEK - 580)) | (1L << (SECOND - 580)) | (1L << (MICROSECOND - 580)) | (1L << (TABLES - 580)) | (1L << (ROUTINE - 580)) | (1L << (EXECUTE - 580)) | (1L << (FILE - 580)) | (1L << (PROCESS - 580)) | (1L << (RELOAD - 580)) | (1L << (SHUTDOWN - 580)) | (1L << (SUPER - 580)) | (1L << (PRIVILEGES - 580)) | (1L << (SESSION_VARIABLES_ADMIN - 580)) | (1L << (ARMSCII8 - 580)) | (1L << (ASCII - 580)) | (1L << (BIG5 - 580)) | (1L << (CP1250 - 580)) | (1L << (CP1251 - 580)) | (1L << (CP1256 - 580)) | (1L << (CP1257 - 580)) | (1L << (CP850 - 580)) | (1L << (CP852 - 580)) | (1L << (CP866 - 580)) | (1L << (CP932 - 580)) | (1L << (DEC8 - 580)) | (1L << (EUCJPMS - 580)) | (1L << (EUCKR - 580)) | (1L << (GB2312 - 580)) | (1L << (GBK - 580)) | (1L << (GEOSTD8 - 580)) | (1L << (GREEK - 580)) | (1L << (HEBREW - 580)) | (1L << (HP8 - 580)) | (1L << (KEYBCS2 - 580)) | (1L << (KOI8R - 580)) | (1L << (KOI8U - 580)) | (1L << (LATIN1 - 580)) | (1L << (LATIN2 - 580)) | (1L << (LATIN5 - 580)) | (1L << (LATIN7 - 580)) | (1L << (MACCE - 580)) | (1L << (MACROMAN - 580)) | (1L << (SJIS - 580)) | (1L << (SWE7 - 580)) | (1L << (TIS620 - 580)) | (1L << (UCS2 - 580)) | (1L << (UJIS - 580)) | (1L << (UTF16 - 580)) | (1L << (UTF16LE - 580)) | (1L << (UTF32 - 580)) | (1L << (UTF8 - 580)) | (1L << (UTF8MB3 - 580)) | (1L << (UTF8MB4 - 580)) | (1L << (ARCHIVE - 580)) | (1L << (BLACKHOLE - 580)) | (1L << (CSV - 580)) | (1L << (FEDERATED - 580)) | (1L << (INNODB - 580)))) != 0) || ((((_la - 644)) & ~0x3f) == 0 && ((1L << (_la - 644)) & ((1L << (MEMORY - 644)) | (1L << (MRG_MYISAM - 644)) | (1L << (MYISAM - 644)) | (1L << (NDB - 644)) | (1L << (NDBCLUSTER - 644)) | (1L << (PERFORMANCE_SCHEMA - 644)) | (1L << (TOKUDB - 644)) | (1L << (REPEATABLE - 644)) | (1L << (COMMITTED - 644)) | (1L << (UNCOMMITTED - 644)) | (1L << (SERIALIZABLE - 644)) | (1L << (GEOMETRYCOLLECTION - 644)) | (1L << (LINESTRING - 644)) | (1L << (MULTILINESTRING - 644)) | (1L << (MULTIPOINT - 644)) | (1L << (MULTIPOLYGON - 644)) | (1L << (POINT - 644)) | (1L << (POLYGON - 644)) | (1L << (ABS - 644)) | (1L << (ACOS - 644)) | (1L << (ADDDATE - 644)) | (1L << (ADDTIME - 644)) | (1L << (AES_DECRYPT - 644)) | (1L << (AES_ENCRYPT - 644)) | (1L << (AREA - 644)) | (1L << (ASBINARY - 644)) | (1L << (ASIN - 644)) | (1L << (ASTEXT - 644)) | (1L << (ASWKB - 644)) | (1L << (ASWKT - 644)) | (1L << (ASYMMETRIC_DECRYPT - 644)) | (1L << (ASYMMETRIC_DERIVE - 644)) | (1L << (ASYMMETRIC_ENCRYPT - 644)) | (1L << (ASYMMETRIC_SIGN - 644)) | (1L << (ASYMMETRIC_VERIFY - 644)) | (1L << (ATAN - 644)) | (1L << (ATAN2 - 644)) | (1L << (BENCHMARK - 644)) | (1L << (BIN - 644)) | (1L << (BIT_COUNT - 644)) | (1L << (BIT_LENGTH - 644)) | (1L << (BUFFER - 644)) | (1L << (CATALOG_NAME - 644)) | (1L << (CEIL - 644)) | (1L << (CEILING - 644)) | (1L << (CENTROID - 644)) | (1L << (CHARACTER_LENGTH - 644)) | (1L << (CHARSET - 644)) | (1L << (CHAR_LENGTH - 644)) | (1L << (COERCIBILITY - 644)) | (1L << (COLLATION - 644)) | (1L << (COMPRESS - 644)) | (1L << (CONCAT - 644)) | (1L << (CONCAT_WS - 644)) | (1L << (CONNECTION_ID - 644)) | (1L << (CONV - 644)) | (1L << (CONVERT_TZ - 644)) | (1L << (COS - 644)) | (1L << (COT - 644)) | (1L << (CRC32 - 644)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 644)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 644)))) != 0) || ((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (CREATE_DH_PARAMETERS - 708)) | (1L << (CREATE_DIGEST - 708)) | (1L << (CROSSES - 708)) | (1L << (DATEDIFF - 708)) | (1L << (DATE_FORMAT - 708)) | (1L << (DAYNAME - 708)) | (1L << (DAYOFMONTH - 708)) | (1L << (DAYOFWEEK - 708)) | (1L << (DAYOFYEAR - 708)) | (1L << (DECODE - 708)) | (1L << (DEGREES - 708)) | (1L << (DES_DECRYPT - 708)) | (1L << (DES_ENCRYPT - 708)) | (1L << (DIMENSION - 708)) | (1L << (DISJOINT - 708)) | (1L << (ELT - 708)) | (1L << (ENCODE - 708)) | (1L << (ENCRYPT - 708)) | (1L << (ENDPOINT - 708)) | (1L << (ENVELOPE - 708)) | (1L << (EQUALS - 708)) | (1L << (EXP - 708)) | (1L << (EXPORT_SET - 708)) | (1L << (EXTERIORRING - 708)) | (1L << (EXTRACTVALUE - 708)) | (1L << (FIELD - 708)) | (1L << (FIND_IN_SET - 708)) | (1L << (FLOOR - 708)) | (1L << (FORMAT - 708)) | (1L << (FOUND_ROWS - 708)) | (1L << (FROM_BASE64 - 708)) | (1L << (FROM_DAYS - 708)) | (1L << (FROM_UNIXTIME - 708)) | (1L << (GEOMCOLLFROMTEXT - 708)) | (1L << (GEOMCOLLFROMWKB - 708)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 708)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 708)) | (1L << (GEOMETRYFROMTEXT - 708)) | (1L << (GEOMETRYFROMWKB - 708)) | (1L << (GEOMETRYN - 708)) | (1L << (GEOMETRYTYPE - 708)) | (1L << (GEOMFROMTEXT - 708)) | (1L << (GEOMFROMWKB - 708)) | (1L << (GET_FORMAT - 708)) | (1L << (GET_LOCK - 708)) | (1L << (GLENGTH - 708)) | (1L << (GREATEST - 708)) | (1L << (GTID_SUBSET - 708)) | (1L << (GTID_SUBTRACT - 708)) | (1L << (HEX - 708)) | (1L << (IFNULL - 708)) | (1L << (INET6_ATON - 708)) | (1L << (INET6_NTOA - 708)) | (1L << (INET_ATON - 708)) | (1L << (INET_NTOA - 708)) | (1L << (INSTR - 708)) | (1L << (INTERIORRINGN - 708)) | (1L << (INTERSECTS - 708)) | (1L << (ISCLOSED - 708)) | (1L << (ISEMPTY - 708)) | (1L << (ISNULL - 708)) | (1L << (ISSIMPLE - 708)) | (1L << (IS_FREE_LOCK - 708)) | (1L << (IS_IPV4 - 708)))) != 0) || ((((_la - 772)) & ~0x3f) == 0 && ((1L << (_la - 772)) & ((1L << (IS_IPV4_COMPAT - 772)) | (1L << (IS_IPV4_MAPPED - 772)) | (1L << (IS_IPV6 - 772)) | (1L << (IS_USED_LOCK - 772)) | (1L << (LAST_INSERT_ID - 772)) | (1L << (LCASE - 772)) | (1L << (LEAST - 772)) | (1L << (LENGTH - 772)) | (1L << (LINEFROMTEXT - 772)) | (1L << (LINEFROMWKB - 772)) | (1L << (LINESTRINGFROMTEXT - 772)) | (1L << (LINESTRINGFROMWKB - 772)) | (1L << (LN - 772)) | (1L << (LOAD_FILE - 772)) | (1L << (LOCATE - 772)) | (1L << (LOG - 772)) | (1L << (LOG10 - 772)) | (1L << (LOG2 - 772)) | (1L << (LOWER - 772)) | (1L << (LPAD - 772)) | (1L << (LTRIM - 772)) | (1L << (MAKEDATE - 772)) | (1L << (MAKETIME - 772)) | (1L << (MAKE_SET - 772)) | (1L << (MASTER_POS_WAIT - 772)) | (1L << (MBRCONTAINS - 772)) | (1L << (MBRDISJOINT - 772)) | (1L << (MBREQUAL - 772)) | (1L << (MBRINTERSECTS - 772)) | (1L << (MBROVERLAPS - 772)) | (1L << (MBRTOUCHES - 772)) | (1L << (MBRWITHIN - 772)) | (1L << (MD5 - 772)) | (1L << (MLINEFROMTEXT - 772)) | (1L << (MLINEFROMWKB - 772)) | (1L << (MONTHNAME - 772)) | (1L << (MPOINTFROMTEXT - 772)) | (1L << (MPOINTFROMWKB - 772)) | (1L << (MPOLYFROMTEXT - 772)) | (1L << (MPOLYFROMWKB - 772)) | (1L << (MULTILINESTRINGFROMTEXT - 772)) | (1L << (MULTILINESTRINGFROMWKB - 772)) | (1L << (MULTIPOINTFROMTEXT - 772)) | (1L << (MULTIPOINTFROMWKB - 772)) | (1L << (MULTIPOLYGONFROMTEXT - 772)) | (1L << (MULTIPOLYGONFROMWKB - 772)) | (1L << (NAME_CONST - 772)) | (1L << (NULLIF - 772)) | (1L << (NUMGEOMETRIES - 772)) | (1L << (NUMINTERIORRINGS - 772)) | (1L << (NUMPOINTS - 772)) | (1L << (OCT - 772)) | (1L << (OCTET_LENGTH - 772)) | (1L << (ORD - 772)) | (1L << (OVERLAPS - 772)) | (1L << (PERIOD_ADD - 772)) | (1L << (PERIOD_DIFF - 772)) | (1L << (PI - 772)) | (1L << (POINTFROMTEXT - 772)) | (1L << (POINTFROMWKB - 772)) | (1L << (POINTN - 772)) | (1L << (POLYFROMTEXT - 772)) | (1L << (POLYFROMWKB - 772)) | (1L << (POLYGONFROMTEXT - 772)))) != 0) || ((((_la - 836)) & ~0x3f) == 0 && ((1L << (_la - 836)) & ((1L << (POLYGONFROMWKB - 836)) | (1L << (POW - 836)) | (1L << (POWER - 836)) | (1L << (QUOTE - 836)) | (1L << (RADIANS - 836)) | (1L << (RAND - 836)) | (1L << (RANDOM_BYTES - 836)) | (1L << (RELEASE_LOCK - 836)) | (1L << (REVERSE - 836)) | (1L << (ROUND - 836)) | (1L << (ROW_COUNT - 836)) | (1L << (RPAD - 836)) | (1L << (RTRIM - 836)) | (1L << (SEC_TO_TIME - 836)) | (1L << (SESSION_USER - 836)) | (1L << (SHA - 836)) | (1L << (SHA1 - 836)) | (1L << (SHA2 - 836)) | (1L << (SCHEMA_NAME - 836)) | (1L << (SIGN - 836)) | (1L << (SIN - 836)) | (1L << (SLEEP - 836)) | (1L << (SOUNDEX - 836)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 836)) | (1L << (SQRT - 836)) | (1L << (SRID - 836)) | (1L << (STARTPOINT - 836)) | (1L << (STRCMP - 836)) | (1L << (STR_TO_DATE - 836)) | (1L << (ST_AREA - 836)) | (1L << (ST_ASBINARY - 836)) | (1L << (ST_ASTEXT - 836)) | (1L << (ST_ASWKB - 836)) | (1L << (ST_ASWKT - 836)) | (1L << (ST_BUFFER - 836)) | (1L << (ST_CENTROID - 836)) | (1L << (ST_CONTAINS - 836)) | (1L << (ST_CROSSES - 836)) | (1L << (ST_DIFFERENCE - 836)) | (1L << (ST_DIMENSION - 836)) | (1L << (ST_DISJOINT - 836)) | (1L << (ST_DISTANCE - 836)) | (1L << (ST_ENDPOINT - 836)) | (1L << (ST_ENVELOPE - 836)) | (1L << (ST_EQUALS - 836)) | (1L << (ST_EXTERIORRING - 836)) | (1L << (ST_GEOMCOLLFROMTEXT - 836)) | (1L << (ST_GEOMCOLLFROMTXT - 836)) | (1L << (ST_GEOMCOLLFROMWKB - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 836)) | (1L << (ST_GEOMETRYFROMTEXT - 836)) | (1L << (ST_GEOMETRYFROMWKB - 836)) | (1L << (ST_GEOMETRYN - 836)) | (1L << (ST_GEOMETRYTYPE - 836)) | (1L << (ST_GEOMFROMTEXT - 836)) | (1L << (ST_GEOMFROMWKB - 836)) | (1L << (ST_INTERIORRINGN - 836)) | (1L << (ST_INTERSECTION - 836)) | (1L << (ST_INTERSECTS - 836)) | (1L << (ST_ISCLOSED - 836)) | (1L << (ST_ISEMPTY - 836)) | (1L << (ST_ISSIMPLE - 836)) | (1L << (ST_LINEFROMTEXT - 836)))) != 0) || ((((_la - 900)) & ~0x3f) == 0 && ((1L << (_la - 900)) & ((1L << (ST_LINEFROMWKB - 900)) | (1L << (ST_LINESTRINGFROMTEXT - 900)) | (1L << (ST_LINESTRINGFROMWKB - 900)) | (1L << (ST_NUMGEOMETRIES - 900)) | (1L << (ST_NUMINTERIORRING - 900)) | (1L << (ST_NUMINTERIORRINGS - 900)) | (1L << (ST_NUMPOINTS - 900)) | (1L << (ST_OVERLAPS - 900)) | (1L << (ST_POINTFROMTEXT - 900)) | (1L << (ST_POINTFROMWKB - 900)) | (1L << (ST_POINTN - 900)) | (1L << (ST_POLYFROMTEXT - 900)) | (1L << (ST_POLYFROMWKB - 900)) | (1L << (ST_POLYGONFROMTEXT - 900)) | (1L << (ST_POLYGONFROMWKB - 900)) | (1L << (ST_SRID - 900)) | (1L << (ST_STARTPOINT - 900)) | (1L << (ST_SYMDIFFERENCE - 900)) | (1L << (ST_TOUCHES - 900)) | (1L << (ST_UNION - 900)) | (1L << (ST_WITHIN - 900)) | (1L << (ST_X - 900)) | (1L << (ST_Y - 900)) | (1L << (SUBDATE - 900)) | (1L << (SUBSTRING_INDEX - 900)) | (1L << (SUBTIME - 900)) | (1L << (SYSTEM_USER - 900)) | (1L << (TAN - 900)) | (1L << (TIMEDIFF - 900)) | (1L << (TIMESTAMPADD - 900)) | (1L << (TIMESTAMPDIFF - 900)) | (1L << (TIME_FORMAT - 900)) | (1L << (TIME_TO_SEC - 900)) | (1L << (TOUCHES - 900)) | (1L << (TO_BASE64 - 900)) | (1L << (TO_DAYS - 900)) | (1L << (TO_SECONDS - 900)) | (1L << (UCASE - 900)) | (1L << (UNCOMPRESS - 900)) | (1L << (UNCOMPRESSED_LENGTH - 900)) | (1L << (UNHEX - 900)) | (1L << (UNIX_TIMESTAMP - 900)) | (1L << (UPDATEXML - 900)) | (1L << (UPPER - 900)) | (1L << (UUID - 900)) | (1L << (UUID_SHORT - 900)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 900)) | (1L << (VERSION - 900)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 900)) | (1L << (WEEKDAY - 900)) | (1L << (WEEKOFYEAR - 900)) | (1L << (WEIGHT_STRING - 900)) | (1L << (WITHIN - 900)) | (1L << (YEARWEEK - 900)) | (1L << (Y_FUNCTION - 900)) | (1L << (X_FUNCTION - 900)))) != 0) || ((((_la - 994)) & ~0x3f) == 0 && ((1L << (_la - 994)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 994)) | (1L << (STRING_LITERAL - 994)) | (1L << (ID - 994)) | (1L << (REVERSE_QUOTE_ID - 994)))) != 0))
                {
                    {
                        State = 938; procedureParameter();
                    }
                }

                State = 945;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while (_la == COMMA)
                {
                    {
                        {
                            State = 941; Match(COMMA);
                            State = 942; procedureParameter();
                        }
                    }
                    State = 947;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
                State = 948; Match(RR_BRACKET);
                State = 952;
                ErrorHandler.Sync(this);
                _alt = Interpreter.AdaptivePredict(TokenStream, 49, Context);
                while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                {
                    if (_alt == 1)
                    {
                        {
                            {
                                State = 949; routineOption();
                            }
                        }
                    }
                    State = 954;
                    ErrorHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(TokenStream, 49, Context);
                }
                State = 955; routineBody();
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class CreateFunctionContext : ParserRuleContext
    {
        public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
        public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
        public FullIdContext fullId()
        {
            return GetRuleContext<FullIdContext>(0);
        }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public ITerminalNode RETURNS() { return GetToken(MySqlParser.RETURNS, 0); }
        public DataTypeContext dataType()
        {
            return GetRuleContext<DataTypeContext>(0);
        }
        public RoutineBodyContext routineBody()
        {
            return GetRuleContext<RoutineBodyContext>(0);
        }
        public ReturnStatementContext returnStatement()
        {
            return GetRuleContext<ReturnStatementContext>(0);
        }
        public OwnerStatementContext ownerStatement()
        {
            return GetRuleContext<OwnerStatementContext>(0);
        }
        public FunctionParameterContext[] functionParameter()
        {
            return GetRuleContexts<FunctionParameterContext>();
        }
        public FunctionParameterContext functionParameter(int i)
        {
            return GetRuleContext<FunctionParameterContext>(i);
        }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public RoutineOptionContext[] routineOption()
        {
            return GetRuleContexts<RoutineOptionContext>();
        }
        public RoutineOptionContext routineOption(int i)
        {
            return GetRuleContext<RoutineOptionContext>(i);
        }
        public CreateFunctionContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_createFunction; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterCreateFunction(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitCreateFunction(this);
        }
    }

    [RuleVersion(0)]
    public CreateFunctionContext createFunction()
    {
        CreateFunctionContext _localctx = new CreateFunctionContext(Context, State);
        EnterRule(_localctx, 34, RULE_createFunction);
        int _la;
        try
        {
            int _alt;
            EnterOuterAlt(_localctx, 1);
            {
                State = 957; Match(CREATE);
                State = 959;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == DEFINER)
                {
                    {
                        State = 958; ownerStatement();
                    }
                }

                State = 961; Match(FUNCTION);
                State = 962; fullId();
                State = 963; Match(LR_BRACKET);
                State = 965;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)) | (1L << (POSITION - 191)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ACCOUNT - 259)) | (1L << (ACTION - 259)) | (1L << (AFTER - 259)) | (1L << (AGGREGATE - 259)) | (1L << (ALGORITHM - 259)) | (1L << (ANY - 259)) | (1L << (AT - 259)) | (1L << (AUTHORS - 259)) | (1L << (AUTOCOMMIT - 259)) | (1L << (AUTOEXTEND_SIZE - 259)) | (1L << (AUTO_INCREMENT - 259)) | (1L << (AVG_ROW_LENGTH - 259)) | (1L << (BEGIN - 259)) | (1L << (BINLOG - 259)) | (1L << (BIT - 259)) | (1L << (BLOCK - 259)) | (1L << (BOOL - 259)) | (1L << (BOOLEAN - 259)) | (1L << (BTREE - 259)) | (1L << (CACHE - 259)) | (1L << (CASCADED - 259)) | (1L << (CHAIN - 259)) | (1L << (CHANGED - 259)) | (1L << (CHANNEL - 259)) | (1L << (CHECKSUM - 259)) | (1L << (PAGE_CHECKSUM - 259)) | (1L << (CIPHER - 259)) | (1L << (CLASS_ORIGIN - 259)) | (1L << (CLIENT - 259)) | (1L << (CLOSE - 259)) | (1L << (COALESCE - 259)) | (1L << (CODE - 259)) | (1L << (COLUMNS - 259)) | (1L << (COLUMN_FORMAT - 259)) | (1L << (COLUMN_NAME - 259)) | (1L << (COMMENT - 259)) | (1L << (COMMIT - 259)) | (1L << (COMPACT - 259)) | (1L << (COMPLETION - 259)) | (1L << (COMPRESSED - 259)) | (1L << (COMPRESSION - 259)) | (1L << (CONCURRENT - 259)) | (1L << (CONNECTION - 259)) | (1L << (CONSISTENT - 259)) | (1L << (CONSTRAINT_CATALOG - 259)) | (1L << (CONSTRAINT_SCHEMA - 259)) | (1L << (CONSTRAINT_NAME - 259)) | (1L << (CONTAINS - 259)) | (1L << (CONTEXT - 259)) | (1L << (CONTRIBUTORS - 259)) | (1L << (COPY - 259)) | (1L << (CPU - 259)) | (1L << (CURSOR_NAME - 259)) | (1L << (DATA - 259)) | (1L << (DATAFILE - 259)) | (1L << (DEALLOCATE - 259)) | (1L << (DEFAULT_AUTH - 259)) | (1L << (DEFINER - 259)) | (1L << (DELAY_KEY_WRITE - 259)) | (1L << (DES_KEY_FILE - 259)) | (1L << (DIRECTORY - 259)) | (1L << (DISABLE - 259)) | (1L << (DISCARD - 259)) | (1L << (DISK - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (DO - 323)) | (1L << (DUMPFILE - 323)) | (1L << (DUPLICATE - 323)) | (1L << (DYNAMIC - 323)) | (1L << (ENABLE - 323)) | (1L << (ENCRYPTION - 323)) | (1L << (END - 323)) | (1L << (ENDS - 323)) | (1L << (ENGINE - 323)) | (1L << (ENGINES - 323)) | (1L << (ERROR - 323)) | (1L << (ERRORS - 323)) | (1L << (ESCAPE - 323)) | (1L << (EVEN - 323)) | (1L << (EVENT - 323)) | (1L << (EVENTS - 323)) | (1L << (EVERY - 323)) | (1L << (EXCHANGE - 323)) | (1L << (EXCLUSIVE - 323)) | (1L << (EXPIRE - 323)) | (1L << (EXPORT - 323)) | (1L << (EXTENDED - 323)) | (1L << (EXTENT_SIZE - 323)) | (1L << (FAST - 323)) | (1L << (FAULTS - 323)) | (1L << (FIELDS - 323)) | (1L << (FILE_BLOCK_SIZE - 323)) | (1L << (FILTER - 323)) | (1L << (FIRST - 323)) | (1L << (FIXED - 323)) | (1L << (FLUSH - 323)) | (1L << (FOLLOWS - 323)) | (1L << (FOUND - 323)) | (1L << (FULL - 323)) | (1L << (FUNCTION - 323)) | (1L << (GENERAL - 323)) | (1L << (GLOBAL - 323)) | (1L << (GRANTS - 323)) | (1L << (GROUP_REPLICATION - 323)) | (1L << (HANDLER - 323)) | (1L << (HASH - 323)) | (1L << (HELP - 323)) | (1L << (HOST - 323)) | (1L << (HOSTS - 323)) | (1L << (IDENTIFIED - 323)) | (1L << (IGNORE_SERVER_IDS - 323)) | (1L << (IMPORT - 323)) | (1L << (INDEXES - 323)) | (1L << (INITIAL_SIZE - 323)) | (1L << (INPLACE - 323)) | (1L << (INSERT_METHOD - 323)) | (1L << (INSTALL - 323)) | (1L << (INSTANCE - 323)) | (1L << (INVISIBLE - 323)) | (1L << (INVOKER - 323)) | (1L << (IO - 323)) | (1L << (IO_THREAD - 323)) | (1L << (IPC - 323)) | (1L << (ISOLATION - 323)) | (1L << (ISSUER - 323)) | (1L << (JSON - 323)) | (1L << (KEY_BLOCK_SIZE - 323)) | (1L << (LANGUAGE - 323)) | (1L << (LAST - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (LEAVES - 387)) | (1L << (LESS - 387)) | (1L << (LEVEL - 387)) | (1L << (LIST - 387)) | (1L << (LOCAL - 387)) | (1L << (LOGFILE - 387)) | (1L << (LOGS - 387)) | (1L << (MASTER - 387)) | (1L << (MASTER_AUTO_POSITION - 387)) | (1L << (MASTER_CONNECT_RETRY - 387)) | (1L << (MASTER_DELAY - 387)) | (1L << (MASTER_HEARTBEAT_PERIOD - 387)) | (1L << (MASTER_HOST - 387)) | (1L << (MASTER_LOG_FILE - 387)) | (1L << (MASTER_LOG_POS - 387)) | (1L << (MASTER_PASSWORD - 387)) | (1L << (MASTER_PORT - 387)) | (1L << (MASTER_RETRY_COUNT - 387)) | (1L << (MASTER_SSL - 387)) | (1L << (MASTER_SSL_CA - 387)) | (1L << (MASTER_SSL_CAPATH - 387)) | (1L << (MASTER_SSL_CERT - 387)) | (1L << (MASTER_SSL_CIPHER - 387)) | (1L << (MASTER_SSL_CRL - 387)) | (1L << (MASTER_SSL_CRLPATH - 387)) | (1L << (MASTER_SSL_KEY - 387)) | (1L << (MASTER_TLS_VERSION - 387)) | (1L << (MASTER_USER - 387)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 387)) | (1L << (MAX_QUERIES_PER_HOUR - 387)) | (1L << (MAX_ROWS - 387)) | (1L << (MAX_SIZE - 387)) | (1L << (MAX_UPDATES_PER_HOUR - 387)) | (1L << (MAX_USER_CONNECTIONS - 387)) | (1L << (MEDIUM - 387)) | (1L << (MERGE - 387)) | (1L << (MESSAGE_TEXT - 387)) | (1L << (MID - 387)) | (1L << (MIGRATE - 387)) | (1L << (MIN_ROWS - 387)) | (1L << (MODE - 387)) | (1L << (MODIFY - 387)) | (1L << (MUTEX - 387)) | (1L << (MYSQL - 387)) | (1L << (MYSQL_ERRNO - 387)) | (1L << (NAME - 387)) | (1L << (NAMES - 387)) | (1L << (NCHAR - 387)) | (1L << (NEVER - 387)) | (1L << (NEXT - 387)) | (1L << (NO - 387)) | (1L << (NODEGROUP - 387)) | (1L << (NONE - 387)) | (1L << (OFFLINE - 387)) | (1L << (OFFSET - 387)) | (1L << (OJ - 387)) | (1L << (OLD_PASSWORD - 387)) | (1L << (ONE - 387)) | (1L << (ONLINE - 387)) | (1L << (ONLY - 387)) | (1L << (OPEN - 387)) | (1L << (OPTIMIZER_COSTS - 387)) | (1L << (OPTIONS - 387)) | (1L << (OWNER - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PAGE - 451)) | (1L << (PARSER - 451)) | (1L << (PARTIAL - 451)) | (1L << (PARTITIONING - 451)) | (1L << (PARTITIONS - 451)) | (1L << (PASSWORD - 451)) | (1L << (PHASE - 451)) | (1L << (PLUGIN - 451)) | (1L << (PLUGIN_DIR - 451)) | (1L << (PLUGINS - 451)) | (1L << (PORT - 451)) | (1L << (PRECEDES - 451)) | (1L << (PREPARE - 451)) | (1L << (PRESERVE - 451)) | (1L << (PREV - 451)) | (1L << (PROCESSLIST - 451)) | (1L << (PROFILE - 451)) | (1L << (PROFILES - 451)) | (1L << (PROXY - 451)) | (1L << (QUERY - 451)) | (1L << (QUICK - 451)) | (1L << (REBUILD - 451)) | (1L << (RECOVER - 451)) | (1L << (REDO_BUFFER_SIZE - 451)) | (1L << (REDUNDANT - 451)) | (1L << (RELAY - 451)) | (1L << (RELAY_LOG_FILE - 451)) | (1L << (RELAY_LOG_POS - 451)) | (1L << (RELAYLOG - 451)) | (1L << (REMOVE - 451)) | (1L << (REORGANIZE - 451)) | (1L << (REPAIR - 451)) | (1L << (REPLICATE_DO_DB - 451)) | (1L << (REPLICATE_DO_TABLE - 451)) | (1L << (REPLICATE_IGNORE_DB - 451)) | (1L << (REPLICATE_IGNORE_TABLE - 451)) | (1L << (REPLICATE_REWRITE_DB - 451)) | (1L << (REPLICATE_WILD_DO_TABLE - 451)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 451)) | (1L << (REPLICATION - 451)) | (1L << (RESET - 451)) | (1L << (RESUME - 451)) | (1L << (RETURNED_SQLSTATE - 451)) | (1L << (RETURNS - 451)) | (1L << (ROLLBACK - 451)) | (1L << (ROLLUP - 451)) | (1L << (ROTATE - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (ROW_FORMAT - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SCHEDULE - 451)) | (1L << (SECURITY - 451)) | (1L << (SERVER - 451)) | (1L << (SESSION - 451)) | (1L << (SHARE - 451)) | (1L << (SHARED - 451)) | (1L << (SIGNED - 451)) | (1L << (SIMPLE - 451)) | (1L << (SLAVE - 451)) | (1L << (SLOW - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOCKET - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SOME - 515)) | (1L << (SONAME - 515)) | (1L << (SOUNDS - 515)) | (1L << (SOURCE - 515)) | (1L << (SQL_AFTER_GTIDS - 515)) | (1L << (SQL_AFTER_MTS_GAPS - 515)) | (1L << (SQL_BEFORE_GTIDS - 515)) | (1L << (SQL_BUFFER_RESULT - 515)) | (1L << (SQL_CACHE - 515)) | (1L << (SQL_NO_CACHE - 515)) | (1L << (SQL_THREAD - 515)) | (1L << (START - 515)) | (1L << (STARTS - 515)) | (1L << (STATS_AUTO_RECALC - 515)) | (1L << (STATS_PERSISTENT - 515)) | (1L << (STATS_SAMPLE_PAGES - 515)) | (1L << (STATUS - 515)) | (1L << (STOP - 515)) | (1L << (STORAGE - 515)) | (1L << (STRING - 515)) | (1L << (SUBCLASS_ORIGIN - 515)) | (1L << (SUBJECT - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBPARTITIONS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SWAPS - 515)) | (1L << (SWITCHES - 515)) | (1L << (TABLE_NAME - 515)) | (1L << (TABLESPACE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TEMPTABLE - 515)) | (1L << (THAN - 515)) | (1L << (TRADITIONAL - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRIGGERS - 515)) | (1L << (TRUNCATE - 515)) | (1L << (UNDEFINED - 515)) | (1L << (UNDOFILE - 515)) | (1L << (UNDO_BUFFER_SIZE - 515)) | (1L << (UNINSTALL - 515)) | (1L << (UNKNOWN - 515)) | (1L << (UNTIL - 515)) | (1L << (UPGRADE - 515)) | (1L << (USER - 515)) | (1L << (USE_FRM - 515)) | (1L << (USER_RESOURCES - 515)) | (1L << (VALIDATION - 515)) | (1L << (VALUE - 515)) | (1L << (VARIABLES - 515)) | (1L << (VIEW - 515)) | (1L << (VISIBLE - 515)) | (1L << (WAIT - 515)) | (1L << (WARNINGS - 515)) | (1L << (WITHOUT - 515)) | (1L << (WORK - 515)) | (1L << (WRAPPER - 515)) | (1L << (X509 - 515)) | (1L << (XA - 515)) | (1L << (XML - 515)))) != 0) || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (INTERNAL - 580)) | (1L << (QUARTER - 580)) | (1L << (MONTH - 580)) | (1L << (DAY - 580)) | (1L << (HOUR - 580)) | (1L << (MINUTE - 580)) | (1L << (WEEK - 580)) | (1L << (SECOND - 580)) | (1L << (MICROSECOND - 580)) | (1L << (TABLES - 580)) | (1L << (ROUTINE - 580)) | (1L << (EXECUTE - 580)) | (1L << (FILE - 580)) | (1L << (PROCESS - 580)) | (1L << (RELOAD - 580)) | (1L << (SHUTDOWN - 580)) | (1L << (SUPER - 580)) | (1L << (PRIVILEGES - 580)) | (1L << (SESSION_VARIABLES_ADMIN - 580)) | (1L << (ARMSCII8 - 580)) | (1L << (ASCII - 580)) | (1L << (BIG5 - 580)) | (1L << (CP1250 - 580)) | (1L << (CP1251 - 580)) | (1L << (CP1256 - 580)) | (1L << (CP1257 - 580)) | (1L << (CP850 - 580)) | (1L << (CP852 - 580)) | (1L << (CP866 - 580)) | (1L << (CP932 - 580)) | (1L << (DEC8 - 580)) | (1L << (EUCJPMS - 580)) | (1L << (EUCKR - 580)) | (1L << (GB2312 - 580)) | (1L << (GBK - 580)) | (1L << (GEOSTD8 - 580)) | (1L << (GREEK - 580)) | (1L << (HEBREW - 580)) | (1L << (HP8 - 580)) | (1L << (KEYBCS2 - 580)) | (1L << (KOI8R - 580)) | (1L << (KOI8U - 580)) | (1L << (LATIN1 - 580)) | (1L << (LATIN2 - 580)) | (1L << (LATIN5 - 580)) | (1L << (LATIN7 - 580)) | (1L << (MACCE - 580)) | (1L << (MACROMAN - 580)) | (1L << (SJIS - 580)) | (1L << (SWE7 - 580)) | (1L << (TIS620 - 580)) | (1L << (UCS2 - 580)) | (1L << (UJIS - 580)) | (1L << (UTF16 - 580)) | (1L << (UTF16LE - 580)) | (1L << (UTF32 - 580)) | (1L << (UTF8 - 580)) | (1L << (UTF8MB3 - 580)) | (1L << (UTF8MB4 - 580)) | (1L << (ARCHIVE - 580)) | (1L << (BLACKHOLE - 580)) | (1L << (CSV - 580)) | (1L << (FEDERATED - 580)) | (1L << (INNODB - 580)))) != 0) || ((((_la - 644)) & ~0x3f) == 0 && ((1L << (_la - 644)) & ((1L << (MEMORY - 644)) | (1L << (MRG_MYISAM - 644)) | (1L << (MYISAM - 644)) | (1L << (NDB - 644)) | (1L << (NDBCLUSTER - 644)) | (1L << (PERFORMANCE_SCHEMA - 644)) | (1L << (TOKUDB - 644)) | (1L << (REPEATABLE - 644)) | (1L << (COMMITTED - 644)) | (1L << (UNCOMMITTED - 644)) | (1L << (SERIALIZABLE - 644)) | (1L << (GEOMETRYCOLLECTION - 644)) | (1L << (LINESTRING - 644)) | (1L << (MULTILINESTRING - 644)) | (1L << (MULTIPOINT - 644)) | (1L << (MULTIPOLYGON - 644)) | (1L << (POINT - 644)) | (1L << (POLYGON - 644)) | (1L << (ABS - 644)) | (1L << (ACOS - 644)) | (1L << (ADDDATE - 644)) | (1L << (ADDTIME - 644)) | (1L << (AES_DECRYPT - 644)) | (1L << (AES_ENCRYPT - 644)) | (1L << (AREA - 644)) | (1L << (ASBINARY - 644)) | (1L << (ASIN - 644)) | (1L << (ASTEXT - 644)) | (1L << (ASWKB - 644)) | (1L << (ASWKT - 644)) | (1L << (ASYMMETRIC_DECRYPT - 644)) | (1L << (ASYMMETRIC_DERIVE - 644)) | (1L << (ASYMMETRIC_ENCRYPT - 644)) | (1L << (ASYMMETRIC_SIGN - 644)) | (1L << (ASYMMETRIC_VERIFY - 644)) | (1L << (ATAN - 644)) | (1L << (ATAN2 - 644)) | (1L << (BENCHMARK - 644)) | (1L << (BIN - 644)) | (1L << (BIT_COUNT - 644)) | (1L << (BIT_LENGTH - 644)) | (1L << (BUFFER - 644)) | (1L << (CATALOG_NAME - 644)) | (1L << (CEIL - 644)) | (1L << (CEILING - 644)) | (1L << (CENTROID - 644)) | (1L << (CHARACTER_LENGTH - 644)) | (1L << (CHARSET - 644)) | (1L << (CHAR_LENGTH - 644)) | (1L << (COERCIBILITY - 644)) | (1L << (COLLATION - 644)) | (1L << (COMPRESS - 644)) | (1L << (CONCAT - 644)) | (1L << (CONCAT_WS - 644)) | (1L << (CONNECTION_ID - 644)) | (1L << (CONV - 644)) | (1L << (CONVERT_TZ - 644)) | (1L << (COS - 644)) | (1L << (COT - 644)) | (1L << (CRC32 - 644)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 644)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 644)))) != 0) || ((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (CREATE_DH_PARAMETERS - 708)) | (1L << (CREATE_DIGEST - 708)) | (1L << (CROSSES - 708)) | (1L << (DATEDIFF - 708)) | (1L << (DATE_FORMAT - 708)) | (1L << (DAYNAME - 708)) | (1L << (DAYOFMONTH - 708)) | (1L << (DAYOFWEEK - 708)) | (1L << (DAYOFYEAR - 708)) | (1L << (DECODE - 708)) | (1L << (DEGREES - 708)) | (1L << (DES_DECRYPT - 708)) | (1L << (DES_ENCRYPT - 708)) | (1L << (DIMENSION - 708)) | (1L << (DISJOINT - 708)) | (1L << (ELT - 708)) | (1L << (ENCODE - 708)) | (1L << (ENCRYPT - 708)) | (1L << (ENDPOINT - 708)) | (1L << (ENVELOPE - 708)) | (1L << (EQUALS - 708)) | (1L << (EXP - 708)) | (1L << (EXPORT_SET - 708)) | (1L << (EXTERIORRING - 708)) | (1L << (EXTRACTVALUE - 708)) | (1L << (FIELD - 708)) | (1L << (FIND_IN_SET - 708)) | (1L << (FLOOR - 708)) | (1L << (FORMAT - 708)) | (1L << (FOUND_ROWS - 708)) | (1L << (FROM_BASE64 - 708)) | (1L << (FROM_DAYS - 708)) | (1L << (FROM_UNIXTIME - 708)) | (1L << (GEOMCOLLFROMTEXT - 708)) | (1L << (GEOMCOLLFROMWKB - 708)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 708)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 708)) | (1L << (GEOMETRYFROMTEXT - 708)) | (1L << (GEOMETRYFROMWKB - 708)) | (1L << (GEOMETRYN - 708)) | (1L << (GEOMETRYTYPE - 708)) | (1L << (GEOMFROMTEXT - 708)) | (1L << (GEOMFROMWKB - 708)) | (1L << (GET_FORMAT - 708)) | (1L << (GET_LOCK - 708)) | (1L << (GLENGTH - 708)) | (1L << (GREATEST - 708)) | (1L << (GTID_SUBSET - 708)) | (1L << (GTID_SUBTRACT - 708)) | (1L << (HEX - 708)) | (1L << (IFNULL - 708)) | (1L << (INET6_ATON - 708)) | (1L << (INET6_NTOA - 708)) | (1L << (INET_ATON - 708)) | (1L << (INET_NTOA - 708)) | (1L << (INSTR - 708)) | (1L << (INTERIORRINGN - 708)) | (1L << (INTERSECTS - 708)) | (1L << (ISCLOSED - 708)) | (1L << (ISEMPTY - 708)) | (1L << (ISNULL - 708)) | (1L << (ISSIMPLE - 708)) | (1L << (IS_FREE_LOCK - 708)) | (1L << (IS_IPV4 - 708)))) != 0) || ((((_la - 772)) & ~0x3f) == 0 && ((1L << (_la - 772)) & ((1L << (IS_IPV4_COMPAT - 772)) | (1L << (IS_IPV4_MAPPED - 772)) | (1L << (IS_IPV6 - 772)) | (1L << (IS_USED_LOCK - 772)) | (1L << (LAST_INSERT_ID - 772)) | (1L << (LCASE - 772)) | (1L << (LEAST - 772)) | (1L << (LENGTH - 772)) | (1L << (LINEFROMTEXT - 772)) | (1L << (LINEFROMWKB - 772)) | (1L << (LINESTRINGFROMTEXT - 772)) | (1L << (LINESTRINGFROMWKB - 772)) | (1L << (LN - 772)) | (1L << (LOAD_FILE - 772)) | (1L << (LOCATE - 772)) | (1L << (LOG - 772)) | (1L << (LOG10 - 772)) | (1L << (LOG2 - 772)) | (1L << (LOWER - 772)) | (1L << (LPAD - 772)) | (1L << (LTRIM - 772)) | (1L << (MAKEDATE - 772)) | (1L << (MAKETIME - 772)) | (1L << (MAKE_SET - 772)) | (1L << (MASTER_POS_WAIT - 772)) | (1L << (MBRCONTAINS - 772)) | (1L << (MBRDISJOINT - 772)) | (1L << (MBREQUAL - 772)) | (1L << (MBRINTERSECTS - 772)) | (1L << (MBROVERLAPS - 772)) | (1L << (MBRTOUCHES - 772)) | (1L << (MBRWITHIN - 772)) | (1L << (MD5 - 772)) | (1L << (MLINEFROMTEXT - 772)) | (1L << (MLINEFROMWKB - 772)) | (1L << (MONTHNAME - 772)) | (1L << (MPOINTFROMTEXT - 772)) | (1L << (MPOINTFROMWKB - 772)) | (1L << (MPOLYFROMTEXT - 772)) | (1L << (MPOLYFROMWKB - 772)) | (1L << (MULTILINESTRINGFROMTEXT - 772)) | (1L << (MULTILINESTRINGFROMWKB - 772)) | (1L << (MULTIPOINTFROMTEXT - 772)) | (1L << (MULTIPOINTFROMWKB - 772)) | (1L << (MULTIPOLYGONFROMTEXT - 772)) | (1L << (MULTIPOLYGONFROMWKB - 772)) | (1L << (NAME_CONST - 772)) | (1L << (NULLIF - 772)) | (1L << (NUMGEOMETRIES - 772)) | (1L << (NUMINTERIORRINGS - 772)) | (1L << (NUMPOINTS - 772)) | (1L << (OCT - 772)) | (1L << (OCTET_LENGTH - 772)) | (1L << (ORD - 772)) | (1L << (OVERLAPS - 772)) | (1L << (PERIOD_ADD - 772)) | (1L << (PERIOD_DIFF - 772)) | (1L << (PI - 772)) | (1L << (POINTFROMTEXT - 772)) | (1L << (POINTFROMWKB - 772)) | (1L << (POINTN - 772)) | (1L << (POLYFROMTEXT - 772)) | (1L << (POLYFROMWKB - 772)) | (1L << (POLYGONFROMTEXT - 772)))) != 0) || ((((_la - 836)) & ~0x3f) == 0 && ((1L << (_la - 836)) & ((1L << (POLYGONFROMWKB - 836)) | (1L << (POW - 836)) | (1L << (POWER - 836)) | (1L << (QUOTE - 836)) | (1L << (RADIANS - 836)) | (1L << (RAND - 836)) | (1L << (RANDOM_BYTES - 836)) | (1L << (RELEASE_LOCK - 836)) | (1L << (REVERSE - 836)) | (1L << (ROUND - 836)) | (1L << (ROW_COUNT - 836)) | (1L << (RPAD - 836)) | (1L << (RTRIM - 836)) | (1L << (SEC_TO_TIME - 836)) | (1L << (SESSION_USER - 836)) | (1L << (SHA - 836)) | (1L << (SHA1 - 836)) | (1L << (SHA2 - 836)) | (1L << (SCHEMA_NAME - 836)) | (1L << (SIGN - 836)) | (1L << (SIN - 836)) | (1L << (SLEEP - 836)) | (1L << (SOUNDEX - 836)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 836)) | (1L << (SQRT - 836)) | (1L << (SRID - 836)) | (1L << (STARTPOINT - 836)) | (1L << (STRCMP - 836)) | (1L << (STR_TO_DATE - 836)) | (1L << (ST_AREA - 836)) | (1L << (ST_ASBINARY - 836)) | (1L << (ST_ASTEXT - 836)) | (1L << (ST_ASWKB - 836)) | (1L << (ST_ASWKT - 836)) | (1L << (ST_BUFFER - 836)) | (1L << (ST_CENTROID - 836)) | (1L << (ST_CONTAINS - 836)) | (1L << (ST_CROSSES - 836)) | (1L << (ST_DIFFERENCE - 836)) | (1L << (ST_DIMENSION - 836)) | (1L << (ST_DISJOINT - 836)) | (1L << (ST_DISTANCE - 836)) | (1L << (ST_ENDPOINT - 836)) | (1L << (ST_ENVELOPE - 836)) | (1L << (ST_EQUALS - 836)) | (1L << (ST_EXTERIORRING - 836)) | (1L << (ST_GEOMCOLLFROMTEXT - 836)) | (1L << (ST_GEOMCOLLFROMTXT - 836)) | (1L << (ST_GEOMCOLLFROMWKB - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 836)) | (1L << (ST_GEOMETRYFROMTEXT - 836)) | (1L << (ST_GEOMETRYFROMWKB - 836)) | (1L << (ST_GEOMETRYN - 836)) | (1L << (ST_GEOMETRYTYPE - 836)) | (1L << (ST_GEOMFROMTEXT - 836)) | (1L << (ST_GEOMFROMWKB - 836)) | (1L << (ST_INTERIORRINGN - 836)) | (1L << (ST_INTERSECTION - 836)) | (1L << (ST_INTERSECTS - 836)) | (1L << (ST_ISCLOSED - 836)) | (1L << (ST_ISEMPTY - 836)) | (1L << (ST_ISSIMPLE - 836)) | (1L << (ST_LINEFROMTEXT - 836)))) != 0) || ((((_la - 900)) & ~0x3f) == 0 && ((1L << (_la - 900)) & ((1L << (ST_LINEFROMWKB - 900)) | (1L << (ST_LINESTRINGFROMTEXT - 900)) | (1L << (ST_LINESTRINGFROMWKB - 900)) | (1L << (ST_NUMGEOMETRIES - 900)) | (1L << (ST_NUMINTERIORRING - 900)) | (1L << (ST_NUMINTERIORRINGS - 900)) | (1L << (ST_NUMPOINTS - 900)) | (1L << (ST_OVERLAPS - 900)) | (1L << (ST_POINTFROMTEXT - 900)) | (1L << (ST_POINTFROMWKB - 900)) | (1L << (ST_POINTN - 900)) | (1L << (ST_POLYFROMTEXT - 900)) | (1L << (ST_POLYFROMWKB - 900)) | (1L << (ST_POLYGONFROMTEXT - 900)) | (1L << (ST_POLYGONFROMWKB - 900)) | (1L << (ST_SRID - 900)) | (1L << (ST_STARTPOINT - 900)) | (1L << (ST_SYMDIFFERENCE - 900)) | (1L << (ST_TOUCHES - 900)) | (1L << (ST_UNION - 900)) | (1L << (ST_WITHIN - 900)) | (1L << (ST_X - 900)) | (1L << (ST_Y - 900)) | (1L << (SUBDATE - 900)) | (1L << (SUBSTRING_INDEX - 900)) | (1L << (SUBTIME - 900)) | (1L << (SYSTEM_USER - 900)) | (1L << (TAN - 900)) | (1L << (TIMEDIFF - 900)) | (1L << (TIMESTAMPADD - 900)) | (1L << (TIMESTAMPDIFF - 900)) | (1L << (TIME_FORMAT - 900)) | (1L << (TIME_TO_SEC - 900)) | (1L << (TOUCHES - 900)) | (1L << (TO_BASE64 - 900)) | (1L << (TO_DAYS - 900)) | (1L << (TO_SECONDS - 900)) | (1L << (UCASE - 900)) | (1L << (UNCOMPRESS - 900)) | (1L << (UNCOMPRESSED_LENGTH - 900)) | (1L << (UNHEX - 900)) | (1L << (UNIX_TIMESTAMP - 900)) | (1L << (UPDATEXML - 900)) | (1L << (UPPER - 900)) | (1L << (UUID - 900)) | (1L << (UUID_SHORT - 900)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 900)) | (1L << (VERSION - 900)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 900)) | (1L << (WEEKDAY - 900)) | (1L << (WEEKOFYEAR - 900)) | (1L << (WEIGHT_STRING - 900)) | (1L << (WITHIN - 900)) | (1L << (YEARWEEK - 900)) | (1L << (Y_FUNCTION - 900)) | (1L << (X_FUNCTION - 900)))) != 0) || ((((_la - 994)) & ~0x3f) == 0 && ((1L << (_la - 994)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 994)) | (1L << (STRING_LITERAL - 994)) | (1L << (ID - 994)) | (1L << (REVERSE_QUOTE_ID - 994)))) != 0))
                {
                    {
                        State = 964; functionParameter();
                    }
                }

                State = 971;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while (_la == COMMA)
                {
                    {
                        {
                            State = 967; Match(COMMA);
                            State = 968; functionParameter();
                        }
                    }
                    State = 973;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
                State = 974; Match(RR_BRACKET);
                State = 975; Match(RETURNS);
                State = 976; dataType();
                State = 980;
                ErrorHandler.Sync(this);
                _alt = Interpreter.AdaptivePredict(TokenStream, 53, Context);
                while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                {
                    if (_alt == 1)
                    {
                        {
                            {
                                State = 977; routineOption();
                            }
                        }
                    }
                    State = 982;
                    ErrorHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(TokenStream, 53, Context);
                }
                State = 985;
                ErrorHandler.Sync(this);
                switch (TokenStream.LA(1))
                {
                    case ALTER:
                    case ANALYZE:
                    case CALL:
                    case CHANGE:
                    case CHECK:
                    case CREATE:
                    case CURRENT:
                    case DATABASE:
                    case DELETE:
                    case DESC:
                    case DESCRIBE:
                    case DIAGNOSTICS:
                    case DROP:
                    case EXPLAIN:
                    case GET:
                    case GRANT:
                    case INSERT:
                    case KILL:
                    case LEFT:
                    case LOAD:
                    case LOCK:
                    case NUMBER:
                    case OPTIMIZE:
                    case PURGE:
                    case RELEASE:
                    case RENAME:
                    case REPLACE:
                    case RESIGNAL:
                    case REVOKE:
                    case RIGHT:
                    case SELECT:
                    case SET:
                    case SHOW:
                    case SIGNAL:
                    case STACKED:
                    case UNLOCK:
                    case UPDATE:
                    case USE:
                    case DATE:
                    case TIME:
                    case TIMESTAMP:
                    case DATETIME:
                    case YEAR:
                    case TEXT:
                    case ENUM:
                    case SERIAL:
                    case COUNT:
                    case POSITION:
                    case ACCOUNT:
                    case ACTION:
                    case AFTER:
                    case AGGREGATE:
                    case ALGORITHM:
                    case ANY:
                    case AT:
                    case AUTHORS:
                    case AUTOCOMMIT:
                    case AUTOEXTEND_SIZE:
                    case AUTO_INCREMENT:
                    case AVG_ROW_LENGTH:
                    case BEGIN:
                    case BINLOG:
                    case BIT:
                    case BLOCK:
                    case BOOL:
                    case BOOLEAN:
                    case BTREE:
                    case CACHE:
                    case CASCADED:
                    case CHAIN:
                    case CHANGED:
                    case CHANNEL:
                    case CHECKSUM:
                    case PAGE_CHECKSUM:
                    case CIPHER:
                    case CLASS_ORIGIN:
                    case CLIENT:
                    case CLOSE:
                    case COALESCE:
                    case CODE:
                    case COLUMNS:
                    case COLUMN_FORMAT:
                    case COLUMN_NAME:
                    case COMMENT:
                    case COMMIT:
                    case COMPACT:
                    case COMPLETION:
                    case COMPRESSED:
                    case COMPRESSION:
                    case CONCURRENT:
                    case CONNECTION:
                    case CONSISTENT:
                    case CONSTRAINT_CATALOG:
                    case CONSTRAINT_SCHEMA:
                    case CONSTRAINT_NAME:
                    case CONTAINS:
                    case CONTEXT:
                    case CONTRIBUTORS:
                    case COPY:
                    case CPU:
                    case CURSOR_NAME:
                    case DATA:
                    case DATAFILE:
                    case DEALLOCATE:
                    case DEFAULT_AUTH:
                    case DEFINER:
                    case DELAY_KEY_WRITE:
                    case DES_KEY_FILE:
                    case DIRECTORY:
                    case DISABLE:
                    case DISCARD:
                    case DISK:
                    case DO:
                    case DUMPFILE:
                    case DUPLICATE:
                    case DYNAMIC:
                    case ENABLE:
                    case ENCRYPTION:
                    case END:
                    case ENDS:
                    case ENGINE:
                    case ENGINES:
                    case ERROR:
                    case ERRORS:
                    case ESCAPE:
                    case EVEN:
                    case EVENT:
                    case EVENTS:
                    case EVERY:
                    case EXCHANGE:
                    case EXCLUSIVE:
                    case EXPIRE:
                    case EXPORT:
                    case EXTENDED:
                    case EXTENT_SIZE:
                    case FAST:
                    case FAULTS:
                    case FIELDS:
                    case FILE_BLOCK_SIZE:
                    case FILTER:
                    case FIRST:
                    case FIXED:
                    case FLUSH:
                    case FOLLOWS:
                    case FOUND:
                    case FULL:
                    case FUNCTION:
                    case GENERAL:
                    case GLOBAL:
                    case GRANTS:
                    case GROUP_REPLICATION:
                    case HANDLER:
                    case HASH:
                    case HELP:
                    case HOST:
                    case HOSTS:
                    case IDENTIFIED:
                    case IGNORE_SERVER_IDS:
                    case IMPORT:
                    case INDEXES:
                    case INITIAL_SIZE:
                    case INPLACE:
                    case INSERT_METHOD:
                    case INSTALL:
                    case INSTANCE:
                    case INVISIBLE:
                    case INVOKER:
                    case IO:
                    case IO_THREAD:
                    case IPC:
                    case ISOLATION:
                    case ISSUER:
                    case JSON:
                    case KEY_BLOCK_SIZE:
                    case LANGUAGE:
                    case LAST:
                    case LEAVES:
                    case LESS:
                    case LEVEL:
                    case LIST:
                    case LOCAL:
                    case LOGFILE:
                    case LOGS:
                    case MASTER:
                    case MASTER_AUTO_POSITION:
                    case MASTER_CONNECT_RETRY:
                    case MASTER_DELAY:
                    case MASTER_HEARTBEAT_PERIOD:
                    case MASTER_HOST:
                    case MASTER_LOG_FILE:
                    case MASTER_LOG_POS:
                    case MASTER_PASSWORD:
                    case MASTER_PORT:
                    case MASTER_RETRY_COUNT:
                    case MASTER_SSL:
                    case MASTER_SSL_CA:
                    case MASTER_SSL_CAPATH:
                    case MASTER_SSL_CERT:
                    case MASTER_SSL_CIPHER:
                    case MASTER_SSL_CRL:
                    case MASTER_SSL_CRLPATH:
                    case MASTER_SSL_KEY:
                    case MASTER_TLS_VERSION:
                    case MASTER_USER:
                    case MAX_CONNECTIONS_PER_HOUR:
                    case MAX_QUERIES_PER_HOUR:
                    case MAX_ROWS:
                    case MAX_SIZE:
                    case MAX_UPDATES_PER_HOUR:
                    case MAX_USER_CONNECTIONS:
                    case MEDIUM:
                    case MERGE:
                    case MESSAGE_TEXT:
                    case MID:
                    case MIGRATE:
                    case MIN_ROWS:
                    case MODE:
                    case MODIFY:
                    case MUTEX:
                    case MYSQL:
                    case MYSQL_ERRNO:
                    case NAME:
                    case NAMES:
                    case NCHAR:
                    case NEVER:
                    case NEXT:
                    case NO:
                    case NODEGROUP:
                    case NONE:
                    case OFFLINE:
                    case OFFSET:
                    case OJ:
                    case OLD_PASSWORD:
                    case ONE:
                    case ONLINE:
                    case ONLY:
                    case OPEN:
                    case OPTIMIZER_COSTS:
                    case OPTIONS:
                    case OWNER:
                    case PACK_KEYS:
                    case PAGE:
                    case PARSER:
                    case PARTIAL:
                    case PARTITIONING:
                    case PARTITIONS:
                    case PASSWORD:
                    case PHASE:
                    case PLUGIN:
                    case PLUGIN_DIR:
                    case PLUGINS:
                    case PORT:
                    case PRECEDES:
                    case PREPARE:
                    case PRESERVE:
                    case PREV:
                    case PROCESSLIST:
                    case PROFILE:
                    case PROFILES:
                    case PROXY:
                    case QUERY:
                    case QUICK:
                    case REBUILD:
                    case RECOVER:
                    case REDO_BUFFER_SIZE:
                    case REDUNDANT:
                    case RELAY:
                    case RELAY_LOG_FILE:
                    case RELAY_LOG_POS:
                    case RELAYLOG:
                    case REMOVE:
                    case REORGANIZE:
                    case REPAIR:
                    case REPLICATE_DO_DB:
                    case REPLICATE_DO_TABLE:
                    case REPLICATE_IGNORE_DB:
                    case REPLICATE_IGNORE_TABLE:
                    case REPLICATE_REWRITE_DB:
                    case REPLICATE_WILD_DO_TABLE:
                    case REPLICATE_WILD_IGNORE_TABLE:
                    case REPLICATION:
                    case RESET:
                    case RESUME:
                    case RETURNED_SQLSTATE:
                    case RETURNS:
                    case ROLLBACK:
                    case ROLLUP:
                    case ROTATE:
                    case ROW:
                    case ROWS:
                    case ROW_FORMAT:
                    case SAVEPOINT:
                    case SCHEDULE:
                    case SECURITY:
                    case SERVER:
                    case SESSION:
                    case SHARE:
                    case SHARED:
                    case SIGNED:
                    case SIMPLE:
                    case SLAVE:
                    case SLOW:
                    case SNAPSHOT:
                    case SOCKET:
                    case SOME:
                    case SONAME:
                    case SOUNDS:
                    case SOURCE:
                    case SQL_AFTER_GTIDS:
                    case SQL_AFTER_MTS_GAPS:
                    case SQL_BEFORE_GTIDS:
                    case SQL_BUFFER_RESULT:
                    case SQL_CACHE:
                    case SQL_NO_CACHE:
                    case SQL_THREAD:
                    case START:
                    case STARTS:
                    case STATS_AUTO_RECALC:
                    case STATS_PERSISTENT:
                    case STATS_SAMPLE_PAGES:
                    case STATUS:
                    case STOP:
                    case STORAGE:
                    case STRING:
                    case SUBCLASS_ORIGIN:
                    case SUBJECT:
                    case SUBPARTITION:
                    case SUBPARTITIONS:
                    case SUSPEND:
                    case SWAPS:
                    case SWITCHES:
                    case TABLE_NAME:
                    case TABLESPACE:
                    case TEMPORARY:
                    case TEMPTABLE:
                    case THAN:
                    case TRADITIONAL:
                    case TRANSACTION:
                    case TRIGGERS:
                    case TRUNCATE:
                    case UNDEFINED:
                    case UNDOFILE:
                    case UNDO_BUFFER_SIZE:
                    case UNINSTALL:
                    case UNKNOWN:
                    case UNTIL:
                    case UPGRADE:
                    case USER:
                    case USE_FRM:
                    case USER_RESOURCES:
                    case VALIDATION:
                    case VALUE:
                    case VARIABLES:
                    case VIEW:
                    case VISIBLE:
                    case WAIT:
                    case WARNINGS:
                    case WITHOUT:
                    case WORK:
                    case WRAPPER:
                    case X509:
                    case XA:
                    case XML:
                    case INTERNAL:
                    case QUARTER:
                    case MONTH:
                    case DAY:
                    case HOUR:
                    case MINUTE:
                    case WEEK:
                    case SECOND:
                    case MICROSECOND:
                    case TABLES:
                    case ROUTINE:
                    case EXECUTE:
                    case FILE:
                    case PROCESS:
                    case RELOAD:
                    case SHUTDOWN:
                    case SUPER:
                    case PRIVILEGES:
                    case SESSION_VARIABLES_ADMIN:
                    case ARMSCII8:
                    case ASCII:
                    case BIG5:
                    case CP1250:
                    case CP1251:
                    case CP1256:
                    case CP1257:
                    case CP850:
                    case CP852:
                    case CP866:
                    case CP932:
                    case DEC8:
                    case EUCJPMS:
                    case EUCKR:
                    case GB2312:
                    case GBK:
                    case GEOSTD8:
                    case GREEK:
                    case HEBREW:
                    case HP8:
                    case KEYBCS2:
                    case KOI8R:
                    case KOI8U:
                    case LATIN1:
                    case LATIN2:
                    case LATIN5:
                    case LATIN7:
                    case MACCE:
                    case MACROMAN:
                    case SJIS:
                    case SWE7:
                    case TIS620:
                    case UCS2:
                    case UJIS:
                    case UTF16:
                    case UTF16LE:
                    case UTF32:
                    case UTF8:
                    case UTF8MB3:
                    case UTF8MB4:
                    case ARCHIVE:
                    case BLACKHOLE:
                    case CSV:
                    case FEDERATED:
                    case INNODB:
                    case MEMORY:
                    case MRG_MYISAM:
                    case MYISAM:
                    case NDB:
                    case NDBCLUSTER:
                    case PERFORMANCE_SCHEMA:
                    case TOKUDB:
                    case REPEATABLE:
                    case COMMITTED:
                    case UNCOMMITTED:
                    case SERIALIZABLE:
                    case GEOMETRYCOLLECTION:
                    case LINESTRING:
                    case MULTILINESTRING:
                    case MULTIPOINT:
                    case MULTIPOLYGON:
                    case POINT:
                    case POLYGON:
                    case ABS:
                    case ACOS:
                    case ADDDATE:
                    case ADDTIME:
                    case AES_DECRYPT:
                    case AES_ENCRYPT:
                    case AREA:
                    case ASBINARY:
                    case ASIN:
                    case ASTEXT:
                    case ASWKB:
                    case ASWKT:
                    case ASYMMETRIC_DECRYPT:
                    case ASYMMETRIC_DERIVE:
                    case ASYMMETRIC_ENCRYPT:
                    case ASYMMETRIC_SIGN:
                    case ASYMMETRIC_VERIFY:
                    case ATAN:
                    case ATAN2:
                    case BENCHMARK:
                    case BIN:
                    case BIT_COUNT:
                    case BIT_LENGTH:
                    case BUFFER:
                    case CATALOG_NAME:
                    case CEIL:
                    case CEILING:
                    case CENTROID:
                    case CHARACTER_LENGTH:
                    case CHARSET:
                    case CHAR_LENGTH:
                    case COERCIBILITY:
                    case COLLATION:
                    case COMPRESS:
                    case CONCAT:
                    case CONCAT_WS:
                    case CONNECTION_ID:
                    case CONV:
                    case CONVERT_TZ:
                    case COS:
                    case COT:
                    case CRC32:
                    case CREATE_ASYMMETRIC_PRIV_KEY:
                    case CREATE_ASYMMETRIC_PUB_KEY:
                    case CREATE_DH_PARAMETERS:
                    case CREATE_DIGEST:
                    case CROSSES:
                    case DATEDIFF:
                    case DATE_FORMAT:
                    case DAYNAME:
                    case DAYOFMONTH:
                    case DAYOFWEEK:
                    case DAYOFYEAR:
                    case DECODE:
                    case DEGREES:
                    case DES_DECRYPT:
                    case DES_ENCRYPT:
                    case DIMENSION:
                    case DISJOINT:
                    case ELT:
                    case ENCODE:
                    case ENCRYPT:
                    case ENDPOINT:
                    case ENVELOPE:
                    case EQUALS:
                    case EXP:
                    case EXPORT_SET:
                    case EXTERIORRING:
                    case EXTRACTVALUE:
                    case FIELD:
                    case FIND_IN_SET:
                    case FLOOR:
                    case FORMAT:
                    case FOUND_ROWS:
                    case FROM_BASE64:
                    case FROM_DAYS:
                    case FROM_UNIXTIME:
                    case GEOMCOLLFROMTEXT:
                    case GEOMCOLLFROMWKB:
                    case GEOMETRYCOLLECTIONFROMTEXT:
                    case GEOMETRYCOLLECTIONFROMWKB:
                    case GEOMETRYFROMTEXT:
                    case GEOMETRYFROMWKB:
                    case GEOMETRYN:
                    case GEOMETRYTYPE:
                    case GEOMFROMTEXT:
                    case GEOMFROMWKB:
                    case GET_FORMAT:
                    case GET_LOCK:
                    case GLENGTH:
                    case GREATEST:
                    case GTID_SUBSET:
                    case GTID_SUBTRACT:
                    case HEX:
                    case IFNULL:
                    case INET6_ATON:
                    case INET6_NTOA:
                    case INET_ATON:
                    case INET_NTOA:
                    case INSTR:
                    case INTERIORRINGN:
                    case INTERSECTS:
                    case ISCLOSED:
                    case ISEMPTY:
                    case ISNULL:
                    case ISSIMPLE:
                    case IS_FREE_LOCK:
                    case IS_IPV4:
                    case IS_IPV4_COMPAT:
                    case IS_IPV4_MAPPED:
                    case IS_IPV6:
                    case IS_USED_LOCK:
                    case LAST_INSERT_ID:
                    case LCASE:
                    case LEAST:
                    case LENGTH:
                    case LINEFROMTEXT:
                    case LINEFROMWKB:
                    case LINESTRINGFROMTEXT:
                    case LINESTRINGFROMWKB:
                    case LN:
                    case LOAD_FILE:
                    case LOCATE:
                    case LOG:
                    case LOG10:
                    case LOG2:
                    case LOWER:
                    case LPAD:
                    case LTRIM:
                    case MAKEDATE:
                    case MAKETIME:
                    case MAKE_SET:
                    case MASTER_POS_WAIT:
                    case MBRCONTAINS:
                    case MBRDISJOINT:
                    case MBREQUAL:
                    case MBRINTERSECTS:
                    case MBROVERLAPS:
                    case MBRTOUCHES:
                    case MBRWITHIN:
                    case MD5:
                    case MLINEFROMTEXT:
                    case MLINEFROMWKB:
                    case MONTHNAME:
                    case MPOINTFROMTEXT:
                    case MPOINTFROMWKB:
                    case MPOLYFROMTEXT:
                    case MPOLYFROMWKB:
                    case MULTILINESTRINGFROMTEXT:
                    case MULTILINESTRINGFROMWKB:
                    case MULTIPOINTFROMTEXT:
                    case MULTIPOINTFROMWKB:
                    case MULTIPOLYGONFROMTEXT:
                    case MULTIPOLYGONFROMWKB:
                    case NAME_CONST:
                    case NULLIF:
                    case NUMGEOMETRIES:
                    case NUMINTERIORRINGS:
                    case NUMPOINTS:
                    case OCT:
                    case OCTET_LENGTH:
                    case ORD:
                    case OVERLAPS:
                    case PERIOD_ADD:
                    case PERIOD_DIFF:
                    case PI:
                    case POINTFROMTEXT:
                    case POINTFROMWKB:
                    case POINTN:
                    case POLYFROMTEXT:
                    case POLYFROMWKB:
                    case POLYGONFROMTEXT:
                    case POLYGONFROMWKB:
                    case POW:
                    case POWER:
                    case QUOTE:
                    case RADIANS:
                    case RAND:
                    case RANDOM_BYTES:
                    case RELEASE_LOCK:
                    case REVERSE:
                    case ROUND:
                    case ROW_COUNT:
                    case RPAD:
                    case RTRIM:
                    case SEC_TO_TIME:
                    case SESSION_USER:
                    case SHA:
                    case SHA1:
                    case SHA2:
                    case SCHEMA_NAME:
                    case SIGN:
                    case SIN:
                    case SLEEP:
                    case SOUNDEX:
                    case SQL_THREAD_WAIT_AFTER_GTIDS:
                    case SQRT:
                    case SRID:
                    case STARTPOINT:
                    case STRCMP:
                    case STR_TO_DATE:
                    case ST_AREA:
                    case ST_ASBINARY:
                    case ST_ASTEXT:
                    case ST_ASWKB:
                    case ST_ASWKT:
                    case ST_BUFFER:
                    case ST_CENTROID:
                    case ST_CONTAINS:
                    case ST_CROSSES:
                    case ST_DIFFERENCE:
                    case ST_DIMENSION:
                    case ST_DISJOINT:
                    case ST_DISTANCE:
                    case ST_ENDPOINT:
                    case ST_ENVELOPE:
                    case ST_EQUALS:
                    case ST_EXTERIORRING:
                    case ST_GEOMCOLLFROMTEXT:
                    case ST_GEOMCOLLFROMTXT:
                    case ST_GEOMCOLLFROMWKB:
                    case ST_GEOMETRYCOLLECTIONFROMTEXT:
                    case ST_GEOMETRYCOLLECTIONFROMWKB:
                    case ST_GEOMETRYFROMTEXT:
                    case ST_GEOMETRYFROMWKB:
                    case ST_GEOMETRYN:
                    case ST_GEOMETRYTYPE:
                    case ST_GEOMFROMTEXT:
                    case ST_GEOMFROMWKB:
                    case ST_INTERIORRINGN:
                    case ST_INTERSECTION:
                    case ST_INTERSECTS:
                    case ST_ISCLOSED:
                    case ST_ISEMPTY:
                    case ST_ISSIMPLE:
                    case ST_LINEFROMTEXT:
                    case ST_LINEFROMWKB:
                    case ST_LINESTRINGFROMTEXT:
                    case ST_LINESTRINGFROMWKB:
                    case ST_NUMGEOMETRIES:
                    case ST_NUMINTERIORRING:
                    case ST_NUMINTERIORRINGS:
                    case ST_NUMPOINTS:
                    case ST_OVERLAPS:
                    case ST_POINTFROMTEXT:
                    case ST_POINTFROMWKB:
                    case ST_POINTN:
                    case ST_POLYFROMTEXT:
                    case ST_POLYFROMWKB:
                    case ST_POLYGONFROMTEXT:
                    case ST_POLYGONFROMWKB:
                    case ST_SRID:
                    case ST_STARTPOINT:
                    case ST_SYMDIFFERENCE:
                    case ST_TOUCHES:
                    case ST_UNION:
                    case ST_WITHIN:
                    case ST_X:
                    case ST_Y:
                    case SUBDATE:
                    case SUBSTRING_INDEX:
                    case SUBTIME:
                    case SYSTEM_USER:
                    case TAN:
                    case TIMEDIFF:
                    case TIMESTAMPADD:
                    case TIMESTAMPDIFF:
                    case TIME_FORMAT:
                    case TIME_TO_SEC:
                    case TOUCHES:
                    case TO_BASE64:
                    case TO_DAYS:
                    case TO_SECONDS:
                    case UCASE:
                    case UNCOMPRESS:
                    case UNCOMPRESSED_LENGTH:
                    case UNHEX:
                    case UNIX_TIMESTAMP:
                    case UPDATEXML:
                    case UPPER:
                    case UUID:
                    case UUID_SHORT:
                    case VALIDATE_PASSWORD_STRENGTH:
                    case VERSION:
                    case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
                    case WEEKDAY:
                    case WEEKOFYEAR:
                    case WEIGHT_STRING:
                    case WITHIN:
                    case YEARWEEK:
                    case Y_FUNCTION:
                    case X_FUNCTION:
                    case LR_BRACKET:
                    case CHARSET_REVERSE_QOUTE_STRING:
                    case STRING_LITERAL:
                    case ID:
                    case REVERSE_QUOTE_ID:
                        {
                            State = 983; routineBody();
                        }
                        break;
                    case RETURN:
                        {
                            State = 984; returnStatement();
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class CreateServerContext : ParserRuleContext
    {
        public IToken wrapperName;
        public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
        public ITerminalNode SERVER() { return GetToken(MySqlParser.SERVER, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public ITerminalNode FOREIGN() { return GetToken(MySqlParser.FOREIGN, 0); }
        public ITerminalNode DATA() { return GetToken(MySqlParser.DATA, 0); }
        public ITerminalNode WRAPPER() { return GetToken(MySqlParser.WRAPPER, 0); }
        public ITerminalNode OPTIONS() { return GetToken(MySqlParser.OPTIONS, 0); }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public ServerOptionContext[] serverOption()
        {
            return GetRuleContexts<ServerOptionContext>();
        }
        public ServerOptionContext serverOption(int i)
        {
            return GetRuleContext<ServerOptionContext>(i);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public ITerminalNode MYSQL() { return GetToken(MySqlParser.MYSQL, 0); }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public CreateServerContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_createServer; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterCreateServer(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitCreateServer(this);
        }
    }

    [RuleVersion(0)]
    public CreateServerContext createServer()
    {
        CreateServerContext _localctx = new CreateServerContext(Context, State);
        EnterRule(_localctx, 36, RULE_createServer);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 987; Match(CREATE);
                State = 988; Match(SERVER);
                State = 989; uid();
                State = 990; Match(FOREIGN);
                State = 991; Match(DATA);
                State = 992; Match(WRAPPER);
                State = 993;
                _localctx.wrapperName = TokenStream.LT(1);
                _la = TokenStream.LA(1);
                if (!(_la == MYSQL || _la == STRING_LITERAL))
                {
                    _localctx.wrapperName = ErrorHandler.RecoverInline(this);
                }
                else
                {
                    ErrorHandler.ReportMatch(this);
                    Consume();
                }
                State = 994; Match(OPTIONS);
                State = 995; Match(LR_BRACKET);
                State = 996; serverOption();
                State = 1001;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while (_la == COMMA)
                {
                    {
                        {
                            State = 997; Match(COMMA);
                            State = 998; serverOption();
                        }
                    }
                    State = 1003;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
                State = 1004; Match(RR_BRACKET);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class CreateTableContext : ParserRuleContext
    {
        public CreateTableContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_createTable; } }

        public CreateTableContext() { }
        public virtual void CopyFrom(CreateTableContext context)
        {
            base.CopyFrom(context);
        }
    }
    public partial class CopyCreateTableContext : CreateTableContext
    {
        public TableNameContext parenthesisTable;
        public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
        public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
        public TableNameContext[] tableName()
        {
            return GetRuleContexts<TableNameContext>();
        }
        public TableNameContext tableName(int i)
        {
            return GetRuleContext<TableNameContext>(i);
        }
        public ITerminalNode LIKE() { return GetToken(MySqlParser.LIKE, 0); }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public ITerminalNode TEMPORARY() { return GetToken(MySqlParser.TEMPORARY, 0); }
        public IfNotExistsContext ifNotExists()
        {
            return GetRuleContext<IfNotExistsContext>(0);
        }
        public CopyCreateTableContext(CreateTableContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterCopyCreateTable(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitCopyCreateTable(this);
        }
    }
    public partial class ColumnCreateTableContext : CreateTableContext
    {
        public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
        public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
        public TableNameContext tableName()
        {
            return GetRuleContext<TableNameContext>(0);
        }
        public CreateDefinitionsContext createDefinitions()
        {
            return GetRuleContext<CreateDefinitionsContext>(0);
        }
        public ITerminalNode TEMPORARY() { return GetToken(MySqlParser.TEMPORARY, 0); }
        public IfNotExistsContext ifNotExists()
        {
            return GetRuleContext<IfNotExistsContext>(0);
        }
        public TableOptionContext[] tableOption()
        {
            return GetRuleContexts<TableOptionContext>();
        }
        public TableOptionContext tableOption(int i)
        {
            return GetRuleContext<TableOptionContext>(i);
        }
        public PartitionDefinitionsContext partitionDefinitions()
        {
            return GetRuleContext<PartitionDefinitionsContext>(0);
        }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public ColumnCreateTableContext(CreateTableContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterColumnCreateTable(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitColumnCreateTable(this);
        }
    }
    public partial class QueryCreateTableContext : CreateTableContext
    {
        public IToken keyViolate;
        public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
        public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
        public TableNameContext tableName()
        {
            return GetRuleContext<TableNameContext>(0);
        }
        public SelectStatementContext selectStatement()
        {
            return GetRuleContext<SelectStatementContext>(0);
        }
        public ITerminalNode TEMPORARY() { return GetToken(MySqlParser.TEMPORARY, 0); }
        public IfNotExistsContext ifNotExists()
        {
            return GetRuleContext<IfNotExistsContext>(0);
        }
        public CreateDefinitionsContext createDefinitions()
        {
            return GetRuleContext<CreateDefinitionsContext>(0);
        }
        public TableOptionContext[] tableOption()
        {
            return GetRuleContexts<TableOptionContext>();
        }
        public TableOptionContext tableOption(int i)
        {
            return GetRuleContext<TableOptionContext>(i);
        }
        public PartitionDefinitionsContext partitionDefinitions()
        {
            return GetRuleContext<PartitionDefinitionsContext>(0);
        }
        public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
        public ITerminalNode IGNORE() { return GetToken(MySqlParser.IGNORE, 0); }
        public ITerminalNode REPLACE() { return GetToken(MySqlParser.REPLACE, 0); }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public QueryCreateTableContext(CreateTableContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterQueryCreateTable(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitQueryCreateTable(this);
        }
    }

    [RuleVersion(0)]
    public CreateTableContext createTable()
    {
        CreateTableContext _localctx = new CreateTableContext(Context, State);
        EnterRule(_localctx, 38, RULE_createTable);
        int _la;
        try
        {
            int _alt;
            State = 1084;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 74, Context))
            {
                case 1:
                    _localctx = new CopyCreateTableContext(_localctx);
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 1006; Match(CREATE);
                        State = 1008;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == TEMPORARY)
                        {
                            {
                                State = 1007; Match(TEMPORARY);
                            }
                        }

                        State = 1010; Match(TABLE);
                        State = 1012;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == IF)
                        {
                            {
                                State = 1011; ifNotExists();
                            }
                        }

                        State = 1014; tableName();
                        State = 1022;
                        ErrorHandler.Sync(this);
                        switch (TokenStream.LA(1))
                        {
                            case LIKE:
                                {
                                    State = 1015; Match(LIKE);
                                    State = 1016; tableName();
                                }
                                break;
                            case LR_BRACKET:
                                {
                                    State = 1017; Match(LR_BRACKET);
                                    State = 1018; Match(LIKE);
                                    State = 1019; ((CopyCreateTableContext)_localctx).parenthesisTable = tableName();
                                    State = 1020; Match(RR_BRACKET);
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }
                    break;
                case 2:
                    _localctx = new QueryCreateTableContext(_localctx);
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 1024; Match(CREATE);
                        State = 1026;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == TEMPORARY)
                        {
                            {
                                State = 1025; Match(TEMPORARY);
                            }
                        }

                        State = 1028; Match(TABLE);
                        State = 1030;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == IF)
                        {
                            {
                                State = 1029; ifNotExists();
                            }
                        }

                        State = 1032; tableName();
                        State = 1034;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 61, Context))
                        {
                            case 1:
                                {
                                    State = 1033; createDefinitions();
                                }
                                break;
                        }
                        State = 1046;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (((((_la - 22)) & ~0x3f) == 0 && ((1L << (_la - 22)) & ((1L << (CHARACTER - 22)) | (1L << (COLLATE - 22)) | (1L << (DEFAULT - 22)) | (1L << (INDEX - 22)))) != 0) || _la == UNION || ((((_la - 269)) & ~0x3f) == 0 && ((1L << (_la - 269)) & ((1L << (AUTO_INCREMENT - 269)) | (1L << (AVG_ROW_LENGTH - 269)) | (1L << (CHECKSUM - 269)) | (1L << (PAGE_CHECKSUM - 269)) | (1L << (COMMENT - 269)) | (1L << (COMPRESSION - 269)) | (1L << (CONNECTION - 269)) | (1L << (DATA - 269)) | (1L << (DELAY_KEY_WRITE - 269)) | (1L << (ENCRYPTION - 269)) | (1L << (ENGINE - 269)))) != 0) || ((((_la - 373)) & ~0x3f) == 0 && ((1L << (_la - 373)) & ((1L << (INSERT_METHOD - 373)) | (1L << (KEY_BLOCK_SIZE - 373)) | (1L << (MAX_ROWS - 373)) | (1L << (MIN_ROWS - 373)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PASSWORD - 451)) | (1L << (ROW_FORMAT - 451)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (STATS_AUTO_RECALC - 528)) | (1L << (STATS_PERSISTENT - 528)) | (1L << (STATS_SAMPLE_PAGES - 528)) | (1L << (STORAGE - 528)) | (1L << (TABLESPACE - 528)))) != 0) || _la == CHARSET)
                        {
                            {
                                State = 1036; tableOption();
                                State = 1043;
                                ErrorHandler.Sync(this);
                                _la = TokenStream.LA(1);
                                while (((((_la - 22)) & ~0x3f) == 0 && ((1L << (_la - 22)) & ((1L << (CHARACTER - 22)) | (1L << (COLLATE - 22)) | (1L << (DEFAULT - 22)) | (1L << (INDEX - 22)))) != 0) || _la == UNION || ((((_la - 269)) & ~0x3f) == 0 && ((1L << (_la - 269)) & ((1L << (AUTO_INCREMENT - 269)) | (1L << (AVG_ROW_LENGTH - 269)) | (1L << (CHECKSUM - 269)) | (1L << (PAGE_CHECKSUM - 269)) | (1L << (COMMENT - 269)) | (1L << (COMPRESSION - 269)) | (1L << (CONNECTION - 269)) | (1L << (DATA - 269)) | (1L << (DELAY_KEY_WRITE - 269)) | (1L << (ENCRYPTION - 269)) | (1L << (ENGINE - 269)))) != 0) || ((((_la - 373)) & ~0x3f) == 0 && ((1L << (_la - 373)) & ((1L << (INSERT_METHOD - 373)) | (1L << (KEY_BLOCK_SIZE - 373)) | (1L << (MAX_ROWS - 373)) | (1L << (MIN_ROWS - 373)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PASSWORD - 451)) | (1L << (ROW_FORMAT - 451)))) != 0) || ((((_la - 528)) & ~0x3f) == 0 && ((1L << (_la - 528)) & ((1L << (STATS_AUTO_RECALC - 528)) | (1L << (STATS_PERSISTENT - 528)) | (1L << (STATS_SAMPLE_PAGES - 528)) | (1L << (STORAGE - 528)) | (1L << (TABLESPACE - 528)))) != 0) || _la == CHARSET || _la == COMMA)
                                {
                                    {
                                        {
                                            State = 1038;
                                            ErrorHandler.Sync(this);
                                            _la = TokenStream.LA(1);
                                            if (_la == COMMA)
                                            {
                                                {
                                                    State = 1037; Match(COMMA);
                                                }
                                            }

                                            State = 1040; tableOption();
                                        }
                                    }
                                    State = 1045;
                                    ErrorHandler.Sync(this);
                                    _la = TokenStream.LA(1);
                                }
                            }
                        }

                        State = 1049;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == PARTITION)
                        {
                            {
                                State = 1048; partitionDefinitions();
                            }
                        }

                        State = 1052;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == IGNORE || _la == REPLACE)
                        {
                            {
                                State = 1051;
                                ((QueryCreateTableContext)_localctx).keyViolate = TokenStream.LT(1);
                                _la = TokenStream.LA(1);
                                if (!(_la == IGNORE || _la == REPLACE))
                                {
                                    ((QueryCreateTableContext)_localctx).keyViolate = ErrorHandler.RecoverInline(this);
                                }
                                else
                                {
                                    ErrorHandler.ReportMatch(this);
                                    Consume();
                                }
                            }
                        }

                        State = 1055;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == AS)
                        {
                            {
                                State = 1054; Match(AS);
                            }
                        }

                        State = 1057; selectStatement();
                    }
                    break;
                case 3:
                    _localctx = new ColumnCreateTableContext(_localctx);
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 1059; Match(CREATE);
                        State = 1061;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == TEMPORARY)
                        {
                            {
                                State = 1060; Match(TEMPORARY);
                            }
                        }

                        State = 1063; Match(TABLE);
                        State = 1065;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == IF)
                        {
                            {
                                State = 1064; ifNotExists();
                            }
                        }

                        State = 1067; tableName();
                        State = 1068; createDefinitions();
                        State = 1079;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 72, Context))
                        {
                            case 1:
                                {
                                    State = 1069; tableOption();
                                    State = 1076;
                                    ErrorHandler.Sync(this);
                                    _alt = Interpreter.AdaptivePredict(TokenStream, 71, Context);
                                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                                    {
                                        if (_alt == 1)
                                        {
                                            {
                                                {
                                                    State = 1071;
                                                    ErrorHandler.Sync(this);
                                                    _la = TokenStream.LA(1);
                                                    if (_la == COMMA)
                                                    {
                                                        {
                                                            State = 1070; Match(COMMA);
                                                        }
                                                    }

                                                    State = 1073; tableOption();
                                                }
                                            }
                                        }
                                        State = 1078;
                                        ErrorHandler.Sync(this);
                                        _alt = Interpreter.AdaptivePredict(TokenStream, 71, Context);
                                    }
                                }
                                break;
                        }
                        State = 1082;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == PARTITION)
                        {
                            {
                                State = 1081; partitionDefinitions();
                            }
                        }

                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class CreateTablespaceInnodbContext : ParserRuleContext
    {
        public IToken datafile;
        public FileSizeLiteralContext fileBlockSize;
        public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
        public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
        public ITerminalNode DATAFILE() { return GetToken(MySqlParser.DATAFILE, 0); }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public ITerminalNode FILE_BLOCK_SIZE() { return GetToken(MySqlParser.FILE_BLOCK_SIZE, 0); }
        public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
        public ITerminalNode EQUAL_SYMBOL(int i)
        {
            return GetToken(MySqlParser.EQUAL_SYMBOL, i);
        }
        public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
        public EngineNameContext engineName()
        {
            return GetRuleContext<EngineNameContext>(0);
        }
        public FileSizeLiteralContext fileSizeLiteral()
        {
            return GetRuleContext<FileSizeLiteralContext>(0);
        }
        public CreateTablespaceInnodbContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_createTablespaceInnodb; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterCreateTablespaceInnodb(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitCreateTablespaceInnodb(this);
        }
    }

    [RuleVersion(0)]
    public CreateTablespaceInnodbContext createTablespaceInnodb()
    {
        CreateTablespaceInnodbContext _localctx = new CreateTablespaceInnodbContext(Context, State);
        EnterRule(_localctx, 40, RULE_createTablespaceInnodb);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 1086; Match(CREATE);
                State = 1087; Match(TABLESPACE);
                State = 1088; uid();
                State = 1089; Match(ADD);
                State = 1090; Match(DATAFILE);
                State = 1091; _localctx.datafile = Match(STRING_LITERAL);
                State = 1095;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == FILE_BLOCK_SIZE)
                {
                    {
                        State = 1092; Match(FILE_BLOCK_SIZE);
                        State = 1093; Match(EQUAL_SYMBOL);
                        State = 1094; _localctx.fileBlockSize = fileSizeLiteral();
                    }
                }

                State = 1102;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == ENGINE)
                {
                    {
                        State = 1097; Match(ENGINE);
                        State = 1099;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == EQUAL_SYMBOL)
                        {
                            {
                                State = 1098; Match(EQUAL_SYMBOL);
                            }
                        }

                        State = 1101; engineName();
                    }
                }

            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class CreateTablespaceNdbContext : ParserRuleContext
    {
        public IToken datafile;
        public FileSizeLiteralContext extentSize;
        public FileSizeLiteralContext initialSize;
        public FileSizeLiteralContext autoextendSize;
        public FileSizeLiteralContext maxSize;
        public IToken comment;
        public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
        public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
        public UidContext[] uid()
        {
            return GetRuleContexts<UidContext>();
        }
        public UidContext uid(int i)
        {
            return GetRuleContext<UidContext>(i);
        }
        public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
        public ITerminalNode DATAFILE() { return GetToken(MySqlParser.DATAFILE, 0); }
        public ITerminalNode USE() { return GetToken(MySqlParser.USE, 0); }
        public ITerminalNode LOGFILE() { return GetToken(MySqlParser.LOGFILE, 0); }
        public ITerminalNode GROUP() { return GetToken(MySqlParser.GROUP, 0); }
        public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
        public EngineNameContext engineName()
        {
            return GetRuleContext<EngineNameContext>(0);
        }
        public ITerminalNode[] STRING_LITERAL() { return GetTokens(MySqlParser.STRING_LITERAL); }
        public ITerminalNode STRING_LITERAL(int i)
        {
            return GetToken(MySqlParser.STRING_LITERAL, i);
        }
        public ITerminalNode EXTENT_SIZE() { return GetToken(MySqlParser.EXTENT_SIZE, 0); }
        public ITerminalNode INITIAL_SIZE() { return GetToken(MySqlParser.INITIAL_SIZE, 0); }
        public ITerminalNode AUTOEXTEND_SIZE() { return GetToken(MySqlParser.AUTOEXTEND_SIZE, 0); }
        public ITerminalNode MAX_SIZE() { return GetToken(MySqlParser.MAX_SIZE, 0); }
        public ITerminalNode NODEGROUP() { return GetToken(MySqlParser.NODEGROUP, 0); }
        public ITerminalNode WAIT() { return GetToken(MySqlParser.WAIT, 0); }
        public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
        public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
        public ITerminalNode EQUAL_SYMBOL(int i)
        {
            return GetToken(MySqlParser.EQUAL_SYMBOL, i);
        }
        public FileSizeLiteralContext[] fileSizeLiteral()
        {
            return GetRuleContexts<FileSizeLiteralContext>();
        }
        public FileSizeLiteralContext fileSizeLiteral(int i)
        {
            return GetRuleContext<FileSizeLiteralContext>(i);
        }
        public CreateTablespaceNdbContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_createTablespaceNdb; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterCreateTablespaceNdb(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitCreateTablespaceNdb(this);
        }
    }

    [RuleVersion(0)]
    public CreateTablespaceNdbContext createTablespaceNdb()
    {
        CreateTablespaceNdbContext _localctx = new CreateTablespaceNdbContext(Context, State);
        EnterRule(_localctx, 42, RULE_createTablespaceNdb);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 1104; Match(CREATE);
                State = 1105; Match(TABLESPACE);
                State = 1106; uid();
                State = 1107; Match(ADD);
                State = 1108; Match(DATAFILE);
                State = 1109; _localctx.datafile = Match(STRING_LITERAL);
                State = 1110; Match(USE);
                State = 1111; Match(LOGFILE);
                State = 1112; Match(GROUP);
                State = 1113; uid();
                State = 1119;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == EXTENT_SIZE)
                {
                    {
                        State = 1114; Match(EXTENT_SIZE);
                        State = 1116;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == EQUAL_SYMBOL)
                        {
                            {
                                State = 1115; Match(EQUAL_SYMBOL);
                            }
                        }

                        State = 1118; _localctx.extentSize = fileSizeLiteral();
                    }
                }

                State = 1126;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == INITIAL_SIZE)
                {
                    {
                        State = 1121; Match(INITIAL_SIZE);
                        State = 1123;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == EQUAL_SYMBOL)
                        {
                            {
                                State = 1122; Match(EQUAL_SYMBOL);
                            }
                        }

                        State = 1125; _localctx.initialSize = fileSizeLiteral();
                    }
                }

                State = 1133;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == AUTOEXTEND_SIZE)
                {
                    {
                        State = 1128; Match(AUTOEXTEND_SIZE);
                        State = 1130;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == EQUAL_SYMBOL)
                        {
                            {
                                State = 1129; Match(EQUAL_SYMBOL);
                            }
                        }

                        State = 1132; _localctx.autoextendSize = fileSizeLiteral();
                    }
                }

                State = 1140;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == MAX_SIZE)
                {
                    {
                        State = 1135; Match(MAX_SIZE);
                        State = 1137;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == EQUAL_SYMBOL)
                        {
                            {
                                State = 1136; Match(EQUAL_SYMBOL);
                            }
                        }

                        State = 1139; _localctx.maxSize = fileSizeLiteral();
                    }
                }

                State = 1147;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == NODEGROUP)
                {
                    {
                        State = 1142; Match(NODEGROUP);
                        State = 1144;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == EQUAL_SYMBOL)
                        {
                            {
                                State = 1143; Match(EQUAL_SYMBOL);
                            }
                        }

                        State = 1146; uid();
                    }
                }

                State = 1150;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == WAIT)
                {
                    {
                        State = 1149; Match(WAIT);
                    }
                }

                State = 1157;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == COMMENT)
                {
                    {
                        State = 1152; Match(COMMENT);
                        State = 1154;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == EQUAL_SYMBOL)
                        {
                            {
                                State = 1153; Match(EQUAL_SYMBOL);
                            }
                        }

                        State = 1156; _localctx.comment = Match(STRING_LITERAL);
                    }
                }

                State = 1159; Match(ENGINE);
                State = 1161;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == EQUAL_SYMBOL)
                {
                    {
                        State = 1160; Match(EQUAL_SYMBOL);
                    }
                }

                State = 1163; engineName();
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class CreateTriggerContext : ParserRuleContext
    {
        public FullIdContext thisTrigger;
        public IToken triggerTime;
        public IToken triggerEvent;
        public IToken triggerPlace;
        public FullIdContext otherTrigger;
        public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
        public ITerminalNode TRIGGER() { return GetToken(MySqlParser.TRIGGER, 0); }
        public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
        public TableNameContext tableName()
        {
            return GetRuleContext<TableNameContext>(0);
        }
        public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
        public ITerminalNode EACH() { return GetToken(MySqlParser.EACH, 0); }
        public ITerminalNode ROW() { return GetToken(MySqlParser.ROW, 0); }
        public RoutineBodyContext routineBody()
        {
            return GetRuleContext<RoutineBodyContext>(0);
        }
        public FullIdContext[] fullId()
        {
            return GetRuleContexts<FullIdContext>();
        }
        public FullIdContext fullId(int i)
        {
            return GetRuleContext<FullIdContext>(i);
        }
        public ITerminalNode BEFORE() { return GetToken(MySqlParser.BEFORE, 0); }
        public ITerminalNode AFTER() { return GetToken(MySqlParser.AFTER, 0); }
        public ITerminalNode INSERT() { return GetToken(MySqlParser.INSERT, 0); }
        public ITerminalNode UPDATE() { return GetToken(MySqlParser.UPDATE, 0); }
        public ITerminalNode DELETE() { return GetToken(MySqlParser.DELETE, 0); }
        public OwnerStatementContext ownerStatement()
        {
            return GetRuleContext<OwnerStatementContext>(0);
        }
        public ITerminalNode FOLLOWS() { return GetToken(MySqlParser.FOLLOWS, 0); }
        public ITerminalNode PRECEDES() { return GetToken(MySqlParser.PRECEDES, 0); }
        public CreateTriggerContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_createTrigger; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterCreateTrigger(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitCreateTrigger(this);
        }
    }

    [RuleVersion(0)]
    public CreateTriggerContext createTrigger()
    {
        CreateTriggerContext _localctx = new CreateTriggerContext(Context, State);
        EnterRule(_localctx, 44, RULE_createTrigger);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 1165; Match(CREATE);
                State = 1167;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == DEFINER)
                {
                    {
                        State = 1166; ownerStatement();
                    }
                }

                State = 1169; Match(TRIGGER);
                State = 1170; _localctx.thisTrigger = fullId();
                State = 1171;
                _localctx.triggerTime = TokenStream.LT(1);
                _la = TokenStream.LA(1);
                if (!(_la == BEFORE || _la == AFTER))
                {
                    _localctx.triggerTime = ErrorHandler.RecoverInline(this);
                }
                else
                {
                    ErrorHandler.ReportMatch(this);
                    Consume();
                }
                State = 1172;
                _localctx.triggerEvent = TokenStream.LT(1);
                _la = TokenStream.LA(1);
                if (!(_la == DELETE || _la == INSERT || _la == UPDATE))
                {
                    _localctx.triggerEvent = ErrorHandler.RecoverInline(this);
                }
                else
                {
                    ErrorHandler.ReportMatch(this);
                    Consume();
                }
                State = 1173; Match(ON);
                State = 1174; tableName();
                State = 1175; Match(FOR);
                State = 1176; Match(EACH);
                State = 1177; Match(ROW);
                State = 1180;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 93, Context))
                {
                    case 1:
                        {
                            State = 1178;
                            _localctx.triggerPlace = TokenStream.LT(1);
                            _la = TokenStream.LA(1);
                            if (!(_la == FOLLOWS || _la == PRECEDES))
                            {
                                _localctx.triggerPlace = ErrorHandler.RecoverInline(this);
                            }
                            else
                            {
                                ErrorHandler.ReportMatch(this);
                                Consume();
                            }
                            State = 1179; _localctx.otherTrigger = fullId();
                        }
                        break;
                }
                State = 1182; routineBody();
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class CreateViewContext : ParserRuleContext
    {
        public IToken algType;
        public IToken secContext;
        public IToken checkOption;
        public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
        public ITerminalNode VIEW() { return GetToken(MySqlParser.VIEW, 0); }
        public FullIdContext fullId()
        {
            return GetRuleContext<FullIdContext>(0);
        }
        public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
        public SelectStatementContext selectStatement()
        {
            return GetRuleContext<SelectStatementContext>(0);
        }
        public ITerminalNode OR() { return GetToken(MySqlParser.OR, 0); }
        public ITerminalNode REPLACE() { return GetToken(MySqlParser.REPLACE, 0); }
        public ITerminalNode ALGORITHM() { return GetToken(MySqlParser.ALGORITHM, 0); }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public OwnerStatementContext ownerStatement()
        {
            return GetRuleContext<OwnerStatementContext>(0);
        }
        public ITerminalNode SQL() { return GetToken(MySqlParser.SQL, 0); }
        public ITerminalNode SECURITY() { return GetToken(MySqlParser.SECURITY, 0); }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public UidListContext uidList()
        {
            return GetRuleContext<UidListContext>(0);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
        public ITerminalNode CHECK() { return GetToken(MySqlParser.CHECK, 0); }
        public ITerminalNode OPTION() { return GetToken(MySqlParser.OPTION, 0); }
        public ITerminalNode UNDEFINED() { return GetToken(MySqlParser.UNDEFINED, 0); }
        public ITerminalNode MERGE() { return GetToken(MySqlParser.MERGE, 0); }
        public ITerminalNode TEMPTABLE() { return GetToken(MySqlParser.TEMPTABLE, 0); }
        public ITerminalNode DEFINER() { return GetToken(MySqlParser.DEFINER, 0); }
        public ITerminalNode INVOKER() { return GetToken(MySqlParser.INVOKER, 0); }
        public ITerminalNode CASCADED() { return GetToken(MySqlParser.CASCADED, 0); }
        public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
        public CreateViewContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_createView; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterCreateView(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitCreateView(this);
        }
    }

    [RuleVersion(0)]
    public CreateViewContext createView()
    {
        CreateViewContext _localctx = new CreateViewContext(Context, State);
        EnterRule(_localctx, 46, RULE_createView);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 1184; Match(CREATE);
                State = 1187;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == OR)
                {
                    {
                        State = 1185; Match(OR);
                        State = 1186; Match(REPLACE);
                    }
                }

                State = 1192;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == ALGORITHM)
                {
                    {
                        State = 1189; Match(ALGORITHM);
                        State = 1190; Match(EQUAL_SYMBOL);
                        State = 1191;
                        _localctx.algType = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == MERGE || _la == TEMPTABLE || _la == UNDEFINED))
                        {
                            _localctx.algType = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                }

                State = 1195;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == DEFINER)
                {
                    {
                        State = 1194; ownerStatement();
                    }
                }

                State = 1200;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == SQL)
                {
                    {
                        State = 1197; Match(SQL);
                        State = 1198; Match(SECURITY);
                        State = 1199;
                        _localctx.secContext = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == DEFINER || _la == INVOKER))
                        {
                            _localctx.secContext = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                }

                State = 1202; Match(VIEW);
                State = 1203; fullId();
                State = 1208;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == LR_BRACKET)
                {
                    {
                        State = 1204; Match(LR_BRACKET);
                        State = 1205; uidList();
                        State = 1206; Match(RR_BRACKET);
                    }
                }

                State = 1210; Match(AS);
                State = 1211; selectStatement();
                State = 1218;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == WITH)
                {
                    {
                        State = 1212; Match(WITH);
                        State = 1214;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == CASCADED || _la == LOCAL)
                        {
                            {
                                State = 1213;
                                _localctx.checkOption = TokenStream.LT(1);
                                _la = TokenStream.LA(1);
                                if (!(_la == CASCADED || _la == LOCAL))
                                {
                                    _localctx.checkOption = ErrorHandler.RecoverInline(this);
                                }
                                else
                                {
                                    ErrorHandler.ReportMatch(this);
                                    Consume();
                                }
                            }
                        }

                        State = 1216; Match(CHECK);
                        State = 1217; Match(OPTION);
                    }
                }

            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class CreateDatabaseOptionContext : ParserRuleContext
    {
        public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
        public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
        public ITerminalNode CHARSET() { return GetToken(MySqlParser.CHARSET, 0); }
        public CharsetNameContext charsetName()
        {
            return GetRuleContext<CharsetNameContext>(0);
        }
        public ITerminalNode[] DEFAULT() { return GetTokens(MySqlParser.DEFAULT); }
        public ITerminalNode DEFAULT(int i)
        {
            return GetToken(MySqlParser.DEFAULT, i);
        }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
        public CollationNameContext collationName()
        {
            return GetRuleContext<CollationNameContext>(0);
        }
        public CreateDatabaseOptionContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_createDatabaseOption; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterCreateDatabaseOption(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitCreateDatabaseOption(this);
        }
    }

    [RuleVersion(0)]
    public CreateDatabaseOptionContext createDatabaseOption()
    {
        CreateDatabaseOptionContext _localctx = new CreateDatabaseOptionContext(Context, State);
        EnterRule(_localctx, 48, RULE_createDatabaseOption);
        int _la;
        try
        {
            State = 1243;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 107, Context))
            {
                case 1:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 1221;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == DEFAULT)
                        {
                            {
                                State = 1220; Match(DEFAULT);
                            }
                        }

                        State = 1226;
                        ErrorHandler.Sync(this);
                        switch (TokenStream.LA(1))
                        {
                            case CHARACTER:
                                {
                                    State = 1223; Match(CHARACTER);
                                    State = 1224; Match(SET);
                                }
                                break;
                            case CHARSET:
                                {
                                    State = 1225; Match(CHARSET);
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        State = 1229;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == EQUAL_SYMBOL)
                        {
                            {
                                State = 1228; Match(EQUAL_SYMBOL);
                            }
                        }

                        State = 1233;
                        ErrorHandler.Sync(this);
                        switch (TokenStream.LA(1))
                        {
                            case BINARY:
                            case ARMSCII8:
                            case ASCII:
                            case BIG5:
                            case CP1250:
                            case CP1251:
                            case CP1256:
                            case CP1257:
                            case CP850:
                            case CP852:
                            case CP866:
                            case CP932:
                            case DEC8:
                            case EUCJPMS:
                            case EUCKR:
                            case GB2312:
                            case GBK:
                            case GEOSTD8:
                            case GREEK:
                            case HEBREW:
                            case HP8:
                            case KEYBCS2:
                            case KOI8R:
                            case KOI8U:
                            case LATIN1:
                            case LATIN2:
                            case LATIN5:
                            case LATIN7:
                            case MACCE:
                            case MACROMAN:
                            case SJIS:
                            case SWE7:
                            case TIS620:
                            case UCS2:
                            case UJIS:
                            case UTF16:
                            case UTF16LE:
                            case UTF32:
                            case UTF8:
                            case UTF8MB3:
                            case UTF8MB4:
                            case CHARSET_REVERSE_QOUTE_STRING:
                            case STRING_LITERAL:
                                {
                                    State = 1231; charsetName();
                                }
                                break;
                            case DEFAULT:
                                {
                                    State = 1232; Match(DEFAULT);
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }
                    break;
                case 2:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 1236;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == DEFAULT)
                        {
                            {
                                State = 1235; Match(DEFAULT);
                            }
                        }

                        State = 1238; Match(COLLATE);
                        State = 1240;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == EQUAL_SYMBOL)
                        {
                            {
                                State = 1239; Match(EQUAL_SYMBOL);
                            }
                        }

                        State = 1242; collationName();
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class OwnerStatementContext : ParserRuleContext
    {
        public ITerminalNode DEFINER() { return GetToken(MySqlParser.DEFINER, 0); }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public UserNameContext userName()
        {
            return GetRuleContext<UserNameContext>(0);
        }
        public ITerminalNode CURRENT_USER() { return GetToken(MySqlParser.CURRENT_USER, 0); }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public OwnerStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_ownerStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterOwnerStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitOwnerStatement(this);
        }
    }

    [RuleVersion(0)]
    public OwnerStatementContext ownerStatement()
    {
        OwnerStatementContext _localctx = new OwnerStatementContext(Context, State);
        EnterRule(_localctx, 50, RULE_ownerStatement);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 1245; Match(DEFINER);
                State = 1246; Match(EQUAL_SYMBOL);
                State = 1253;
                ErrorHandler.Sync(this);
                switch (TokenStream.LA(1))
                {
                    case STRING_LITERAL:
                    case ID:
                    case STRING_USER_NAME:
                        {
                            State = 1247; userName();
                        }
                        break;
                    case CURRENT_USER:
                        {
                            State = 1248; Match(CURRENT_USER);
                            State = 1251;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            if (_la == LR_BRACKET)
                            {
                                {
                                    State = 1249; Match(LR_BRACKET);
                                    State = 1250; Match(RR_BRACKET);
                                }
                            }

                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ScheduleExpressionContext : ParserRuleContext
    {
        public ScheduleExpressionContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_scheduleExpression; } }

        public ScheduleExpressionContext() { }
        public virtual void CopyFrom(ScheduleExpressionContext context)
        {
            base.CopyFrom(context);
        }
    }
    public partial class PreciseScheduleContext : ScheduleExpressionContext
    {
        public ITerminalNode AT() { return GetToken(MySqlParser.AT, 0); }
        public TimestampValueContext timestampValue()
        {
            return GetRuleContext<TimestampValueContext>(0);
        }
        public IntervalExprContext[] intervalExpr()
        {
            return GetRuleContexts<IntervalExprContext>();
        }
        public IntervalExprContext intervalExpr(int i)
        {
            return GetRuleContext<IntervalExprContext>(i);
        }
        public PreciseScheduleContext(ScheduleExpressionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterPreciseSchedule(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitPreciseSchedule(this);
        }
    }
    public partial class IntervalScheduleContext : ScheduleExpressionContext
    {
        public TimestampValueContext startTimestamp;
        public IntervalExprContext _intervalExpr;
        public IList<IntervalExprContext> _startIntervals = new List<IntervalExprContext>();
        public TimestampValueContext endTimestamp;
        public IList<IntervalExprContext> _endIntervals = new List<IntervalExprContext>();
        public ITerminalNode EVERY() { return GetToken(MySqlParser.EVERY, 0); }
        public IntervalTypeContext intervalType()
        {
            return GetRuleContext<IntervalTypeContext>(0);
        }
        public DecimalLiteralContext decimalLiteral()
        {
            return GetRuleContext<DecimalLiteralContext>(0);
        }
        public ExpressionContext expression()
        {
            return GetRuleContext<ExpressionContext>(0);
        }
        public ITerminalNode STARTS() { return GetToken(MySqlParser.STARTS, 0); }
        public ITerminalNode ENDS() { return GetToken(MySqlParser.ENDS, 0); }
        public TimestampValueContext[] timestampValue()
        {
            return GetRuleContexts<TimestampValueContext>();
        }
        public TimestampValueContext timestampValue(int i)
        {
            return GetRuleContext<TimestampValueContext>(i);
        }
        public IntervalExprContext[] intervalExpr()
        {
            return GetRuleContexts<IntervalExprContext>();
        }
        public IntervalExprContext intervalExpr(int i)
        {
            return GetRuleContext<IntervalExprContext>(i);
        }
        public IntervalScheduleContext(ScheduleExpressionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterIntervalSchedule(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitIntervalSchedule(this);
        }
    }

    [RuleVersion(0)]
    public ScheduleExpressionContext scheduleExpression()
    {
        ScheduleExpressionContext _localctx = new ScheduleExpressionContext(Context, State);
        EnterRule(_localctx, 52, RULE_scheduleExpression);
        int _la;
        try
        {
            State = 1289;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case AT:
                    _localctx = new PreciseScheduleContext(_localctx);
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 1255; Match(AT);
                        State = 1256; timestampValue();
                        State = 1260;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        while (_la == PLUS)
                        {
                            {
                                {
                                    State = 1257; intervalExpr();
                                }
                            }
                            State = 1262;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                        }
                    }
                    break;
                case EVERY:
                    _localctx = new IntervalScheduleContext(_localctx);
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 1263; Match(EVERY);
                        State = 1266;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 111, Context))
                        {
                            case 1:
                                {
                                    State = 1264; decimalLiteral();
                                }
                                break;
                            case 2:
                                {
                                    State = 1265; expression(0);
                                }
                                break;
                        }
                        State = 1268; intervalType();
                        State = 1277;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == STARTS)
                        {
                            {
                                State = 1269; Match(STARTS);
                                State = 1270; ((IntervalScheduleContext)_localctx).startTimestamp = timestampValue();
                                State = 1274;
                                ErrorHandler.Sync(this);
                                _la = TokenStream.LA(1);
                                while (_la == PLUS)
                                {
                                    {
                                        {
                                            State = 1271; ((IntervalScheduleContext)_localctx)._intervalExpr = intervalExpr();
                                            ((IntervalScheduleContext)_localctx)._startIntervals.Add(((IntervalScheduleContext)_localctx)._intervalExpr);
                                        }
                                    }
                                    State = 1276;
                                    ErrorHandler.Sync(this);
                                    _la = TokenStream.LA(1);
                                }
                            }
                        }

                        State = 1287;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == ENDS)
                        {
                            {
                                State = 1279; Match(ENDS);
                                State = 1280; ((IntervalScheduleContext)_localctx).endTimestamp = timestampValue();
                                State = 1284;
                                ErrorHandler.Sync(this);
                                _la = TokenStream.LA(1);
                                while (_la == PLUS)
                                {
                                    {
                                        {
                                            State = 1281; ((IntervalScheduleContext)_localctx)._intervalExpr = intervalExpr();
                                            ((IntervalScheduleContext)_localctx)._endIntervals.Add(((IntervalScheduleContext)_localctx)._intervalExpr);
                                        }
                                    }
                                    State = 1286;
                                    ErrorHandler.Sync(this);
                                    _la = TokenStream.LA(1);
                                }
                            }
                        }

                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class TimestampValueContext : ParserRuleContext
    {
        public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
        public StringLiteralContext stringLiteral()
        {
            return GetRuleContext<StringLiteralContext>(0);
        }
        public DecimalLiteralContext decimalLiteral()
        {
            return GetRuleContext<DecimalLiteralContext>(0);
        }
        public ExpressionContext expression()
        {
            return GetRuleContext<ExpressionContext>(0);
        }
        public TimestampValueContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_timestampValue; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterTimestampValue(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitTimestampValue(this);
        }
    }

    [RuleVersion(0)]
    public TimestampValueContext timestampValue()
    {
        TimestampValueContext _localctx = new TimestampValueContext(Context, State);
        EnterRule(_localctx, 54, RULE_timestampValue);
        try
        {
            State = 1295;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 117, Context))
            {
                case 1:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 1291; Match(CURRENT_TIMESTAMP);
                    }
                    break;
                case 2:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 1292; stringLiteral();
                    }
                    break;
                case 3:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 1293; decimalLiteral();
                    }
                    break;
                case 4:
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 1294; expression(0);
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class IntervalExprContext : ParserRuleContext
    {
        public ITerminalNode PLUS() { return GetToken(MySqlParser.PLUS, 0); }
        public ITerminalNode INTERVAL() { return GetToken(MySqlParser.INTERVAL, 0); }
        public IntervalTypeContext intervalType()
        {
            return GetRuleContext<IntervalTypeContext>(0);
        }
        public DecimalLiteralContext decimalLiteral()
        {
            return GetRuleContext<DecimalLiteralContext>(0);
        }
        public ExpressionContext expression()
        {
            return GetRuleContext<ExpressionContext>(0);
        }
        public IntervalExprContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_intervalExpr; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterIntervalExpr(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitIntervalExpr(this);
        }
    }

    [RuleVersion(0)]
    public IntervalExprContext intervalExpr()
    {
        IntervalExprContext _localctx = new IntervalExprContext(Context, State);
        EnterRule(_localctx, 56, RULE_intervalExpr);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 1297; Match(PLUS);
                State = 1298; Match(INTERVAL);
                State = 1301;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 118, Context))
                {
                    case 1:
                        {
                            State = 1299; decimalLiteral();
                        }
                        break;
                    case 2:
                        {
                            State = 1300; expression(0);
                        }
                        break;
                }
                State = 1303; intervalType();
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class IntervalTypeContext : ParserRuleContext
    {
        public IntervalTypeBaseContext intervalTypeBase()
        {
            return GetRuleContext<IntervalTypeBaseContext>(0);
        }
        public ITerminalNode YEAR() { return GetToken(MySqlParser.YEAR, 0); }
        public ITerminalNode YEAR_MONTH() { return GetToken(MySqlParser.YEAR_MONTH, 0); }
        public ITerminalNode DAY_HOUR() { return GetToken(MySqlParser.DAY_HOUR, 0); }
        public ITerminalNode DAY_MINUTE() { return GetToken(MySqlParser.DAY_MINUTE, 0); }
        public ITerminalNode DAY_SECOND() { return GetToken(MySqlParser.DAY_SECOND, 0); }
        public ITerminalNode HOUR_MINUTE() { return GetToken(MySqlParser.HOUR_MINUTE, 0); }
        public ITerminalNode HOUR_SECOND() { return GetToken(MySqlParser.HOUR_SECOND, 0); }
        public ITerminalNode MINUTE_SECOND() { return GetToken(MySqlParser.MINUTE_SECOND, 0); }
        public ITerminalNode SECOND_MICROSECOND() { return GetToken(MySqlParser.SECOND_MICROSECOND, 0); }
        public ITerminalNode MINUTE_MICROSECOND() { return GetToken(MySqlParser.MINUTE_MICROSECOND, 0); }
        public ITerminalNode HOUR_MICROSECOND() { return GetToken(MySqlParser.HOUR_MICROSECOND, 0); }
        public ITerminalNode DAY_MICROSECOND() { return GetToken(MySqlParser.DAY_MICROSECOND, 0); }
        public IntervalTypeContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_intervalType; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterIntervalType(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitIntervalType(this);
        }
    }

    [RuleVersion(0)]
    public IntervalTypeContext intervalType()
    {
        IntervalTypeContext _localctx = new IntervalTypeContext(Context, State);
        EnterRule(_localctx, 58, RULE_intervalType);
        try
        {
            State = 1318;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case QUARTER:
                case MONTH:
                case DAY:
                case HOUR:
                case MINUTE:
                case WEEK:
                case SECOND:
                case MICROSECOND:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 1305; intervalTypeBase();
                    }
                    break;
                case YEAR:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 1306; Match(YEAR);
                    }
                    break;
                case YEAR_MONTH:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 1307; Match(YEAR_MONTH);
                    }
                    break;
                case DAY_HOUR:
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 1308; Match(DAY_HOUR);
                    }
                    break;
                case DAY_MINUTE:
                    EnterOuterAlt(_localctx, 5);
                    {
                        State = 1309; Match(DAY_MINUTE);
                    }
                    break;
                case DAY_SECOND:
                    EnterOuterAlt(_localctx, 6);
                    {
                        State = 1310; Match(DAY_SECOND);
                    }
                    break;
                case HOUR_MINUTE:
                    EnterOuterAlt(_localctx, 7);
                    {
                        State = 1311; Match(HOUR_MINUTE);
                    }
                    break;
                case HOUR_SECOND:
                    EnterOuterAlt(_localctx, 8);
                    {
                        State = 1312; Match(HOUR_SECOND);
                    }
                    break;
                case MINUTE_SECOND:
                    EnterOuterAlt(_localctx, 9);
                    {
                        State = 1313; Match(MINUTE_SECOND);
                    }
                    break;
                case SECOND_MICROSECOND:
                    EnterOuterAlt(_localctx, 10);
                    {
                        State = 1314; Match(SECOND_MICROSECOND);
                    }
                    break;
                case MINUTE_MICROSECOND:
                    EnterOuterAlt(_localctx, 11);
                    {
                        State = 1315; Match(MINUTE_MICROSECOND);
                    }
                    break;
                case HOUR_MICROSECOND:
                    EnterOuterAlt(_localctx, 12);
                    {
                        State = 1316; Match(HOUR_MICROSECOND);
                    }
                    break;
                case DAY_MICROSECOND:
                    EnterOuterAlt(_localctx, 13);
                    {
                        State = 1317; Match(DAY_MICROSECOND);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class EnableTypeContext : ParserRuleContext
    {
        public ITerminalNode ENABLE() { return GetToken(MySqlParser.ENABLE, 0); }
        public ITerminalNode DISABLE() { return GetToken(MySqlParser.DISABLE, 0); }
        public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
        public ITerminalNode SLAVE() { return GetToken(MySqlParser.SLAVE, 0); }
        public EnableTypeContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_enableType; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterEnableType(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitEnableType(this);
        }
    }

    [RuleVersion(0)]
    public EnableTypeContext enableType()
    {
        EnableTypeContext _localctx = new EnableTypeContext(Context, State);
        EnterRule(_localctx, 60, RULE_enableType);
        try
        {
            State = 1325;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 120, Context))
            {
                case 1:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 1320; Match(ENABLE);
                    }
                    break;
                case 2:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 1321; Match(DISABLE);
                    }
                    break;
                case 3:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 1322; Match(DISABLE);
                        State = 1323; Match(ON);
                        State = 1324; Match(SLAVE);
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class IndexTypeContext : ParserRuleContext
    {
        public ITerminalNode USING() { return GetToken(MySqlParser.USING, 0); }
        public ITerminalNode BTREE() { return GetToken(MySqlParser.BTREE, 0); }
        public ITerminalNode HASH() { return GetToken(MySqlParser.HASH, 0); }
        public IndexTypeContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_indexType; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterIndexType(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitIndexType(this);
        }
    }

    [RuleVersion(0)]
    public IndexTypeContext indexType()
    {
        IndexTypeContext _localctx = new IndexTypeContext(Context, State);
        EnterRule(_localctx, 62, RULE_indexType);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 1327; Match(USING);
                State = 1328;
                _la = TokenStream.LA(1);
                if (!(_la == BTREE || _la == HASH))
                {
                    ErrorHandler.RecoverInline(this);
                }
                else
                {
                    ErrorHandler.ReportMatch(this);
                    Consume();
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class IndexOptionContext : ParserRuleContext
    {
        public ITerminalNode KEY_BLOCK_SIZE() { return GetToken(MySqlParser.KEY_BLOCK_SIZE, 0); }
        public FileSizeLiteralContext fileSizeLiteral()
        {
            return GetRuleContext<FileSizeLiteralContext>(0);
        }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public IndexTypeContext indexType()
        {
            return GetRuleContext<IndexTypeContext>(0);
        }
        public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
        public ITerminalNode PARSER() { return GetToken(MySqlParser.PARSER, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public ITerminalNode INVISIBLE() { return GetToken(MySqlParser.INVISIBLE, 0); }
        public ITerminalNode VISIBLE() { return GetToken(MySqlParser.VISIBLE, 0); }
        public IndexOptionContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_indexOption; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterIndexOption(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitIndexOption(this);
        }
    }

    [RuleVersion(0)]
    public IndexOptionContext indexOption()
    {
        IndexOptionContext _localctx = new IndexOptionContext(Context, State);
        EnterRule(_localctx, 64, RULE_indexOption);
        int _la;
        try
        {
            State = 1343;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case KEY_BLOCK_SIZE:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 1330; Match(KEY_BLOCK_SIZE);
                        State = 1332;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == EQUAL_SYMBOL)
                        {
                            {
                                State = 1331; Match(EQUAL_SYMBOL);
                            }
                        }

                        State = 1334; fileSizeLiteral();
                    }
                    break;
                case USING:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 1335; indexType();
                    }
                    break;
                case WITH:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 1336; Match(WITH);
                        State = 1337; Match(PARSER);
                        State = 1338; uid();
                    }
                    break;
                case COMMENT:
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 1339; Match(COMMENT);
                        State = 1340; Match(STRING_LITERAL);
                    }
                    break;
                case INVISIBLE:
                    EnterOuterAlt(_localctx, 5);
                    {
                        State = 1341; Match(INVISIBLE);
                    }
                    break;
                case VISIBLE:
                    EnterOuterAlt(_localctx, 6);
                    {
                        State = 1342; Match(VISIBLE);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ProcedureParameterContext : ParserRuleContext
    {
        public IToken direction;
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public DataTypeContext dataType()
        {
            return GetRuleContext<DataTypeContext>(0);
        }
        public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
        public ITerminalNode OUT() { return GetToken(MySqlParser.OUT, 0); }
        public ITerminalNode INOUT() { return GetToken(MySqlParser.INOUT, 0); }
        public ProcedureParameterContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_procedureParameter; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterProcedureParameter(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitProcedureParameter(this);
        }
    }

    [RuleVersion(0)]
    public ProcedureParameterContext procedureParameter()
    {
        ProcedureParameterContext _localctx = new ProcedureParameterContext(Context, State);
        EnterRule(_localctx, 66, RULE_procedureParameter);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 1346;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (IN - 71)) | (1L << (INOUT - 71)) | (1L << (OUT - 71)))) != 0))
                {
                    {
                        State = 1345;
                        _localctx.direction = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (IN - 71)) | (1L << (INOUT - 71)) | (1L << (OUT - 71)))) != 0)))
                        {
                            _localctx.direction = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                }

                State = 1348; uid();
                State = 1349; dataType();
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class FunctionParameterContext : ParserRuleContext
    {
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public DataTypeContext dataType()
        {
            return GetRuleContext<DataTypeContext>(0);
        }
        public FunctionParameterContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_functionParameter; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterFunctionParameter(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitFunctionParameter(this);
        }
    }

    [RuleVersion(0)]
    public FunctionParameterContext functionParameter()
    {
        FunctionParameterContext _localctx = new FunctionParameterContext(Context, State);
        EnterRule(_localctx, 68, RULE_functionParameter);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 1351; uid();
                State = 1352; dataType();
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class RoutineOptionContext : ParserRuleContext
    {
        public RoutineOptionContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_routineOption; } }

        public RoutineOptionContext() { }
        public virtual void CopyFrom(RoutineOptionContext context)
        {
            base.CopyFrom(context);
        }
    }
    public partial class RoutineBehaviorContext : RoutineOptionContext
    {
        public ITerminalNode DETERMINISTIC() { return GetToken(MySqlParser.DETERMINISTIC, 0); }
        public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
        public RoutineBehaviorContext(RoutineOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterRoutineBehavior(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitRoutineBehavior(this);
        }
    }
    public partial class RoutineLanguageContext : RoutineOptionContext
    {
        public ITerminalNode LANGUAGE() { return GetToken(MySqlParser.LANGUAGE, 0); }
        public ITerminalNode SQL() { return GetToken(MySqlParser.SQL, 0); }
        public RoutineLanguageContext(RoutineOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterRoutineLanguage(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitRoutineLanguage(this);
        }
    }
    public partial class RoutineCommentContext : RoutineOptionContext
    {
        public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public RoutineCommentContext(RoutineOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterRoutineComment(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitRoutineComment(this);
        }
    }
    public partial class RoutineSecurityContext : RoutineOptionContext
    {
        public IToken context;
        public ITerminalNode SQL() { return GetToken(MySqlParser.SQL, 0); }
        public ITerminalNode SECURITY() { return GetToken(MySqlParser.SECURITY, 0); }
        public ITerminalNode DEFINER() { return GetToken(MySqlParser.DEFINER, 0); }
        public ITerminalNode INVOKER() { return GetToken(MySqlParser.INVOKER, 0); }
        public RoutineSecurityContext(RoutineOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterRoutineSecurity(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitRoutineSecurity(this);
        }
    }
    public partial class RoutineDataContext : RoutineOptionContext
    {
        public ITerminalNode CONTAINS() { return GetToken(MySqlParser.CONTAINS, 0); }
        public ITerminalNode SQL() { return GetToken(MySqlParser.SQL, 0); }
        public ITerminalNode NO() { return GetToken(MySqlParser.NO, 0); }
        public ITerminalNode READS() { return GetToken(MySqlParser.READS, 0); }
        public ITerminalNode DATA() { return GetToken(MySqlParser.DATA, 0); }
        public ITerminalNode MODIFIES() { return GetToken(MySqlParser.MODIFIES, 0); }
        public RoutineDataContext(RoutineOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterRoutineData(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitRoutineData(this);
        }
    }

    [RuleVersion(0)]
    public RoutineOptionContext routineOption()
    {
        RoutineOptionContext _localctx = new RoutineOptionContext(Context, State);
        EnterRule(_localctx, 70, RULE_routineOption);
        int _la;
        try
        {
            State = 1377;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case COMMENT:
                    _localctx = new RoutineCommentContext(_localctx);
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 1354; Match(COMMENT);
                        State = 1355; Match(STRING_LITERAL);
                    }
                    break;
                case LANGUAGE:
                    _localctx = new RoutineLanguageContext(_localctx);
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 1356; Match(LANGUAGE);
                        State = 1357; Match(SQL);
                    }
                    break;
                case DETERMINISTIC:
                case NOT:
                    _localctx = new RoutineBehaviorContext(_localctx);
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 1359;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == NOT)
                        {
                            {
                                State = 1358; Match(NOT);
                            }
                        }

                        State = 1361; Match(DETERMINISTIC);
                    }
                    break;
                case MODIFIES:
                case READS:
                case CONTAINS:
                case NO:
                    _localctx = new RoutineDataContext(_localctx);
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 1372;
                        ErrorHandler.Sync(this);
                        switch (TokenStream.LA(1))
                        {
                            case CONTAINS:
                                {
                                    State = 1362; Match(CONTAINS);
                                    State = 1363; Match(SQL);
                                }
                                break;
                            case NO:
                                {
                                    State = 1364; Match(NO);
                                    State = 1365; Match(SQL);
                                }
                                break;
                            case READS:
                                {
                                    State = 1366; Match(READS);
                                    State = 1367; Match(SQL);
                                    State = 1368; Match(DATA);
                                }
                                break;
                            case MODIFIES:
                                {
                                    State = 1369; Match(MODIFIES);
                                    State = 1370; Match(SQL);
                                    State = 1371; Match(DATA);
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }
                    break;
                case SQL:
                    _localctx = new RoutineSecurityContext(_localctx);
                    EnterOuterAlt(_localctx, 5);
                    {
                        State = 1374; Match(SQL);
                        State = 1375; Match(SECURITY);
                        State = 1376;
                        ((RoutineSecurityContext)_localctx).context = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == DEFINER || _la == INVOKER))
                        {
                            ((RoutineSecurityContext)_localctx).context = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ServerOptionContext : ParserRuleContext
    {
        public ITerminalNode HOST() { return GetToken(MySqlParser.HOST, 0); }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public ITerminalNode DATABASE() { return GetToken(MySqlParser.DATABASE, 0); }
        public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
        public ITerminalNode PASSWORD() { return GetToken(MySqlParser.PASSWORD, 0); }
        public ITerminalNode SOCKET() { return GetToken(MySqlParser.SOCKET, 0); }
        public ITerminalNode OWNER() { return GetToken(MySqlParser.OWNER, 0); }
        public ITerminalNode PORT() { return GetToken(MySqlParser.PORT, 0); }
        public DecimalLiteralContext decimalLiteral()
        {
            return GetRuleContext<DecimalLiteralContext>(0);
        }
        public ServerOptionContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_serverOption; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterServerOption(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitServerOption(this);
        }
    }

    [RuleVersion(0)]
    public ServerOptionContext serverOption()
    {
        ServerOptionContext _localctx = new ServerOptionContext(Context, State);
        EnterRule(_localctx, 72, RULE_serverOption);
        try
        {
            State = 1393;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case HOST:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 1379; Match(HOST);
                        State = 1380; Match(STRING_LITERAL);
                    }
                    break;
                case DATABASE:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 1381; Match(DATABASE);
                        State = 1382; Match(STRING_LITERAL);
                    }
                    break;
                case USER:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 1383; Match(USER);
                        State = 1384; Match(STRING_LITERAL);
                    }
                    break;
                case PASSWORD:
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 1385; Match(PASSWORD);
                        State = 1386; Match(STRING_LITERAL);
                    }
                    break;
                case SOCKET:
                    EnterOuterAlt(_localctx, 5);
                    {
                        State = 1387; Match(SOCKET);
                        State = 1388; Match(STRING_LITERAL);
                    }
                    break;
                case OWNER:
                    EnterOuterAlt(_localctx, 6);
                    {
                        State = 1389; Match(OWNER);
                        State = 1390; Match(STRING_LITERAL);
                    }
                    break;
                case PORT:
                    EnterOuterAlt(_localctx, 7);
                    {
                        State = 1391; Match(PORT);
                        State = 1392; decimalLiteral();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class CreateDefinitionsContext : ParserRuleContext
    {
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public CreateDefinitionContext[] createDefinition()
        {
            return GetRuleContexts<CreateDefinitionContext>();
        }
        public CreateDefinitionContext createDefinition(int i)
        {
            return GetRuleContext<CreateDefinitionContext>(i);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public CreateDefinitionsContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_createDefinitions; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterCreateDefinitions(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitCreateDefinitions(this);
        }
    }

    [RuleVersion(0)]
    public CreateDefinitionsContext createDefinitions()
    {
        CreateDefinitionsContext _localctx = new CreateDefinitionsContext(Context, State);
        EnterRule(_localctx, 74, RULE_createDefinitions);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 1395; Match(LR_BRACKET);
                State = 1396; createDefinition();
                State = 1401;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while (_la == COMMA)
                {
                    {
                        {
                            State = 1397; Match(COMMA);
                            State = 1398; createDefinition();
                        }
                    }
                    State = 1403;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
                State = 1404; Match(RR_BRACKET);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class CreateDefinitionContext : ParserRuleContext
    {
        public CreateDefinitionContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_createDefinition; } }

        public CreateDefinitionContext() { }
        public virtual void CopyFrom(CreateDefinitionContext context)
        {
            base.CopyFrom(context);
        }
    }
    public partial class ColumnDeclarationContext : CreateDefinitionContext
    {
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public ColumnDefinitionContext columnDefinition()
        {
            return GetRuleContext<ColumnDefinitionContext>(0);
        }
        public ColumnDeclarationContext(CreateDefinitionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterColumnDeclaration(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitColumnDeclaration(this);
        }
    }
    public partial class ConstraintDeclarationContext : CreateDefinitionContext
    {
        public TableConstraintContext tableConstraint()
        {
            return GetRuleContext<TableConstraintContext>(0);
        }
        public ConstraintDeclarationContext(CreateDefinitionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterConstraintDeclaration(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitConstraintDeclaration(this);
        }
    }
    public partial class IndexDeclarationContext : CreateDefinitionContext
    {
        public IndexColumnDefinitionContext indexColumnDefinition()
        {
            return GetRuleContext<IndexColumnDefinitionContext>(0);
        }
        public IndexDeclarationContext(CreateDefinitionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterIndexDeclaration(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitIndexDeclaration(this);
        }
    }

    [RuleVersion(0)]
    public CreateDefinitionContext createDefinition()
    {
        CreateDefinitionContext _localctx = new CreateDefinitionContext(Context, State);
        EnterRule(_localctx, 76, RULE_createDefinition);
        try
        {
            State = 1411;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case CURRENT:
                case DATABASE:
                case DIAGNOSTICS:
                case LEFT:
                case NUMBER:
                case RIGHT:
                case STACKED:
                case DATE:
                case TIME:
                case TIMESTAMP:
                case DATETIME:
                case YEAR:
                case TEXT:
                case ENUM:
                case SERIAL:
                case COUNT:
                case POSITION:
                case ACCOUNT:
                case ACTION:
                case AFTER:
                case AGGREGATE:
                case ALGORITHM:
                case ANY:
                case AT:
                case AUTHORS:
                case AUTOCOMMIT:
                case AUTOEXTEND_SIZE:
                case AUTO_INCREMENT:
                case AVG_ROW_LENGTH:
                case BEGIN:
                case BINLOG:
                case BIT:
                case BLOCK:
                case BOOL:
                case BOOLEAN:
                case BTREE:
                case CACHE:
                case CASCADED:
                case CHAIN:
                case CHANGED:
                case CHANNEL:
                case CHECKSUM:
                case PAGE_CHECKSUM:
                case CIPHER:
                case CLASS_ORIGIN:
                case CLIENT:
                case CLOSE:
                case COALESCE:
                case CODE:
                case COLUMNS:
                case COLUMN_FORMAT:
                case COLUMN_NAME:
                case COMMENT:
                case COMMIT:
                case COMPACT:
                case COMPLETION:
                case COMPRESSED:
                case COMPRESSION:
                case CONCURRENT:
                case CONNECTION:
                case CONSISTENT:
                case CONSTRAINT_CATALOG:
                case CONSTRAINT_SCHEMA:
                case CONSTRAINT_NAME:
                case CONTAINS:
                case CONTEXT:
                case CONTRIBUTORS:
                case COPY:
                case CPU:
                case CURSOR_NAME:
                case DATA:
                case DATAFILE:
                case DEALLOCATE:
                case DEFAULT_AUTH:
                case DEFINER:
                case DELAY_KEY_WRITE:
                case DES_KEY_FILE:
                case DIRECTORY:
                case DISABLE:
                case DISCARD:
                case DISK:
                case DO:
                case DUMPFILE:
                case DUPLICATE:
                case DYNAMIC:
                case ENABLE:
                case ENCRYPTION:
                case END:
                case ENDS:
                case ENGINE:
                case ENGINES:
                case ERROR:
                case ERRORS:
                case ESCAPE:
                case EVEN:
                case EVENT:
                case EVENTS:
                case EVERY:
                case EXCHANGE:
                case EXCLUSIVE:
                case EXPIRE:
                case EXPORT:
                case EXTENDED:
                case EXTENT_SIZE:
                case FAST:
                case FAULTS:
                case FIELDS:
                case FILE_BLOCK_SIZE:
                case FILTER:
                case FIRST:
                case FIXED:
                case FLUSH:
                case FOLLOWS:
                case FOUND:
                case FULL:
                case FUNCTION:
                case GENERAL:
                case GLOBAL:
                case GRANTS:
                case GROUP_REPLICATION:
                case HANDLER:
                case HASH:
                case HELP:
                case HOST:
                case HOSTS:
                case IDENTIFIED:
                case IGNORE_SERVER_IDS:
                case IMPORT:
                case INDEXES:
                case INITIAL_SIZE:
                case INPLACE:
                case INSERT_METHOD:
                case INSTALL:
                case INSTANCE:
                case INVISIBLE:
                case INVOKER:
                case IO:
                case IO_THREAD:
                case IPC:
                case ISOLATION:
                case ISSUER:
                case JSON:
                case KEY_BLOCK_SIZE:
                case LANGUAGE:
                case LAST:
                case LEAVES:
                case LESS:
                case LEVEL:
                case LIST:
                case LOCAL:
                case LOGFILE:
                case LOGS:
                case MASTER:
                case MASTER_AUTO_POSITION:
                case MASTER_CONNECT_RETRY:
                case MASTER_DELAY:
                case MASTER_HEARTBEAT_PERIOD:
                case MASTER_HOST:
                case MASTER_LOG_FILE:
                case MASTER_LOG_POS:
                case MASTER_PASSWORD:
                case MASTER_PORT:
                case MASTER_RETRY_COUNT:
                case MASTER_SSL:
                case MASTER_SSL_CA:
                case MASTER_SSL_CAPATH:
                case MASTER_SSL_CERT:
                case MASTER_SSL_CIPHER:
                case MASTER_SSL_CRL:
                case MASTER_SSL_CRLPATH:
                case MASTER_SSL_KEY:
                case MASTER_TLS_VERSION:
                case MASTER_USER:
                case MAX_CONNECTIONS_PER_HOUR:
                case MAX_QUERIES_PER_HOUR:
                case MAX_ROWS:
                case MAX_SIZE:
                case MAX_UPDATES_PER_HOUR:
                case MAX_USER_CONNECTIONS:
                case MEDIUM:
                case MERGE:
                case MESSAGE_TEXT:
                case MID:
                case MIGRATE:
                case MIN_ROWS:
                case MODE:
                case MODIFY:
                case MUTEX:
                case MYSQL:
                case MYSQL_ERRNO:
                case NAME:
                case NAMES:
                case NCHAR:
                case NEVER:
                case NEXT:
                case NO:
                case NODEGROUP:
                case NONE:
                case OFFLINE:
                case OFFSET:
                case OJ:
                case OLD_PASSWORD:
                case ONE:
                case ONLINE:
                case ONLY:
                case OPEN:
                case OPTIMIZER_COSTS:
                case OPTIONS:
                case OWNER:
                case PACK_KEYS:
                case PAGE:
                case PARSER:
                case PARTIAL:
                case PARTITIONING:
                case PARTITIONS:
                case PASSWORD:
                case PHASE:
                case PLUGIN:
                case PLUGIN_DIR:
                case PLUGINS:
                case PORT:
                case PRECEDES:
                case PREPARE:
                case PRESERVE:
                case PREV:
                case PROCESSLIST:
                case PROFILE:
                case PROFILES:
                case PROXY:
                case QUERY:
                case QUICK:
                case REBUILD:
                case RECOVER:
                case REDO_BUFFER_SIZE:
                case REDUNDANT:
                case RELAY:
                case RELAY_LOG_FILE:
                case RELAY_LOG_POS:
                case RELAYLOG:
                case REMOVE:
                case REORGANIZE:
                case REPAIR:
                case REPLICATE_DO_DB:
                case REPLICATE_DO_TABLE:
                case REPLICATE_IGNORE_DB:
                case REPLICATE_IGNORE_TABLE:
                case REPLICATE_REWRITE_DB:
                case REPLICATE_WILD_DO_TABLE:
                case REPLICATE_WILD_IGNORE_TABLE:
                case REPLICATION:
                case RESET:
                case RESUME:
                case RETURNED_SQLSTATE:
                case RETURNS:
                case ROLLBACK:
                case ROLLUP:
                case ROTATE:
                case ROW:
                case ROWS:
                case ROW_FORMAT:
                case SAVEPOINT:
                case SCHEDULE:
                case SECURITY:
                case SERVER:
                case SESSION:
                case SHARE:
                case SHARED:
                case SIGNED:
                case SIMPLE:
                case SLAVE:
                case SLOW:
                case SNAPSHOT:
                case SOCKET:
                case SOME:
                case SONAME:
                case SOUNDS:
                case SOURCE:
                case SQL_AFTER_GTIDS:
                case SQL_AFTER_MTS_GAPS:
                case SQL_BEFORE_GTIDS:
                case SQL_BUFFER_RESULT:
                case SQL_CACHE:
                case SQL_NO_CACHE:
                case SQL_THREAD:
                case START:
                case STARTS:
                case STATS_AUTO_RECALC:
                case STATS_PERSISTENT:
                case STATS_SAMPLE_PAGES:
                case STATUS:
                case STOP:
                case STORAGE:
                case STRING:
                case SUBCLASS_ORIGIN:
                case SUBJECT:
                case SUBPARTITION:
                case SUBPARTITIONS:
                case SUSPEND:
                case SWAPS:
                case SWITCHES:
                case TABLE_NAME:
                case TABLESPACE:
                case TEMPORARY:
                case TEMPTABLE:
                case THAN:
                case TRADITIONAL:
                case TRANSACTION:
                case TRIGGERS:
                case TRUNCATE:
                case UNDEFINED:
                case UNDOFILE:
                case UNDO_BUFFER_SIZE:
                case UNINSTALL:
                case UNKNOWN:
                case UNTIL:
                case UPGRADE:
                case USER:
                case USE_FRM:
                case USER_RESOURCES:
                case VALIDATION:
                case VALUE:
                case VARIABLES:
                case VIEW:
                case VISIBLE:
                case WAIT:
                case WARNINGS:
                case WITHOUT:
                case WORK:
                case WRAPPER:
                case X509:
                case XA:
                case XML:
                case INTERNAL:
                case QUARTER:
                case MONTH:
                case DAY:
                case HOUR:
                case MINUTE:
                case WEEK:
                case SECOND:
                case MICROSECOND:
                case TABLES:
                case ROUTINE:
                case EXECUTE:
                case FILE:
                case PROCESS:
                case RELOAD:
                case SHUTDOWN:
                case SUPER:
                case PRIVILEGES:
                case SESSION_VARIABLES_ADMIN:
                case ARMSCII8:
                case ASCII:
                case BIG5:
                case CP1250:
                case CP1251:
                case CP1256:
                case CP1257:
                case CP850:
                case CP852:
                case CP866:
                case CP932:
                case DEC8:
                case EUCJPMS:
                case EUCKR:
                case GB2312:
                case GBK:
                case GEOSTD8:
                case GREEK:
                case HEBREW:
                case HP8:
                case KEYBCS2:
                case KOI8R:
                case KOI8U:
                case LATIN1:
                case LATIN2:
                case LATIN5:
                case LATIN7:
                case MACCE:
                case MACROMAN:
                case SJIS:
                case SWE7:
                case TIS620:
                case UCS2:
                case UJIS:
                case UTF16:
                case UTF16LE:
                case UTF32:
                case UTF8:
                case UTF8MB3:
                case UTF8MB4:
                case ARCHIVE:
                case BLACKHOLE:
                case CSV:
                case FEDERATED:
                case INNODB:
                case MEMORY:
                case MRG_MYISAM:
                case MYISAM:
                case NDB:
                case NDBCLUSTER:
                case PERFORMANCE_SCHEMA:
                case TOKUDB:
                case REPEATABLE:
                case COMMITTED:
                case UNCOMMITTED:
                case SERIALIZABLE:
                case GEOMETRYCOLLECTION:
                case LINESTRING:
                case MULTILINESTRING:
                case MULTIPOINT:
                case MULTIPOLYGON:
                case POINT:
                case POLYGON:
                case ABS:
                case ACOS:
                case ADDDATE:
                case ADDTIME:
                case AES_DECRYPT:
                case AES_ENCRYPT:
                case AREA:
                case ASBINARY:
                case ASIN:
                case ASTEXT:
                case ASWKB:
                case ASWKT:
                case ASYMMETRIC_DECRYPT:
                case ASYMMETRIC_DERIVE:
                case ASYMMETRIC_ENCRYPT:
                case ASYMMETRIC_SIGN:
                case ASYMMETRIC_VERIFY:
                case ATAN:
                case ATAN2:
                case BENCHMARK:
                case BIN:
                case BIT_COUNT:
                case BIT_LENGTH:
                case BUFFER:
                case CATALOG_NAME:
                case CEIL:
                case CEILING:
                case CENTROID:
                case CHARACTER_LENGTH:
                case CHARSET:
                case CHAR_LENGTH:
                case COERCIBILITY:
                case COLLATION:
                case COMPRESS:
                case CONCAT:
                case CONCAT_WS:
                case CONNECTION_ID:
                case CONV:
                case CONVERT_TZ:
                case COS:
                case COT:
                case CRC32:
                case CREATE_ASYMMETRIC_PRIV_KEY:
                case CREATE_ASYMMETRIC_PUB_KEY:
                case CREATE_DH_PARAMETERS:
                case CREATE_DIGEST:
                case CROSSES:
                case DATEDIFF:
                case DATE_FORMAT:
                case DAYNAME:
                case DAYOFMONTH:
                case DAYOFWEEK:
                case DAYOFYEAR:
                case DECODE:
                case DEGREES:
                case DES_DECRYPT:
                case DES_ENCRYPT:
                case DIMENSION:
                case DISJOINT:
                case ELT:
                case ENCODE:
                case ENCRYPT:
                case ENDPOINT:
                case ENVELOPE:
                case EQUALS:
                case EXP:
                case EXPORT_SET:
                case EXTERIORRING:
                case EXTRACTVALUE:
                case FIELD:
                case FIND_IN_SET:
                case FLOOR:
                case FORMAT:
                case FOUND_ROWS:
                case FROM_BASE64:
                case FROM_DAYS:
                case FROM_UNIXTIME:
                case GEOMCOLLFROMTEXT:
                case GEOMCOLLFROMWKB:
                case GEOMETRYCOLLECTIONFROMTEXT:
                case GEOMETRYCOLLECTIONFROMWKB:
                case GEOMETRYFROMTEXT:
                case GEOMETRYFROMWKB:
                case GEOMETRYN:
                case GEOMETRYTYPE:
                case GEOMFROMTEXT:
                case GEOMFROMWKB:
                case GET_FORMAT:
                case GET_LOCK:
                case GLENGTH:
                case GREATEST:
                case GTID_SUBSET:
                case GTID_SUBTRACT:
                case HEX:
                case IFNULL:
                case INET6_ATON:
                case INET6_NTOA:
                case INET_ATON:
                case INET_NTOA:
                case INSTR:
                case INTERIORRINGN:
                case INTERSECTS:
                case ISCLOSED:
                case ISEMPTY:
                case ISNULL:
                case ISSIMPLE:
                case IS_FREE_LOCK:
                case IS_IPV4:
                case IS_IPV4_COMPAT:
                case IS_IPV4_MAPPED:
                case IS_IPV6:
                case IS_USED_LOCK:
                case LAST_INSERT_ID:
                case LCASE:
                case LEAST:
                case LENGTH:
                case LINEFROMTEXT:
                case LINEFROMWKB:
                case LINESTRINGFROMTEXT:
                case LINESTRINGFROMWKB:
                case LN:
                case LOAD_FILE:
                case LOCATE:
                case LOG:
                case LOG10:
                case LOG2:
                case LOWER:
                case LPAD:
                case LTRIM:
                case MAKEDATE:
                case MAKETIME:
                case MAKE_SET:
                case MASTER_POS_WAIT:
                case MBRCONTAINS:
                case MBRDISJOINT:
                case MBREQUAL:
                case MBRINTERSECTS:
                case MBROVERLAPS:
                case MBRTOUCHES:
                case MBRWITHIN:
                case MD5:
                case MLINEFROMTEXT:
                case MLINEFROMWKB:
                case MONTHNAME:
                case MPOINTFROMTEXT:
                case MPOINTFROMWKB:
                case MPOLYFROMTEXT:
                case MPOLYFROMWKB:
                case MULTILINESTRINGFROMTEXT:
                case MULTILINESTRINGFROMWKB:
                case MULTIPOINTFROMTEXT:
                case MULTIPOINTFROMWKB:
                case MULTIPOLYGONFROMTEXT:
                case MULTIPOLYGONFROMWKB:
                case NAME_CONST:
                case NULLIF:
                case NUMGEOMETRIES:
                case NUMINTERIORRINGS:
                case NUMPOINTS:
                case OCT:
                case OCTET_LENGTH:
                case ORD:
                case OVERLAPS:
                case PERIOD_ADD:
                case PERIOD_DIFF:
                case PI:
                case POINTFROMTEXT:
                case POINTFROMWKB:
                case POINTN:
                case POLYFROMTEXT:
                case POLYFROMWKB:
                case POLYGONFROMTEXT:
                case POLYGONFROMWKB:
                case POW:
                case POWER:
                case QUOTE:
                case RADIANS:
                case RAND:
                case RANDOM_BYTES:
                case RELEASE_LOCK:
                case REVERSE:
                case ROUND:
                case ROW_COUNT:
                case RPAD:
                case RTRIM:
                case SEC_TO_TIME:
                case SESSION_USER:
                case SHA:
                case SHA1:
                case SHA2:
                case SCHEMA_NAME:
                case SIGN:
                case SIN:
                case SLEEP:
                case SOUNDEX:
                case SQL_THREAD_WAIT_AFTER_GTIDS:
                case SQRT:
                case SRID:
                case STARTPOINT:
                case STRCMP:
                case STR_TO_DATE:
                case ST_AREA:
                case ST_ASBINARY:
                case ST_ASTEXT:
                case ST_ASWKB:
                case ST_ASWKT:
                case ST_BUFFER:
                case ST_CENTROID:
                case ST_CONTAINS:
                case ST_CROSSES:
                case ST_DIFFERENCE:
                case ST_DIMENSION:
                case ST_DISJOINT:
                case ST_DISTANCE:
                case ST_ENDPOINT:
                case ST_ENVELOPE:
                case ST_EQUALS:
                case ST_EXTERIORRING:
                case ST_GEOMCOLLFROMTEXT:
                case ST_GEOMCOLLFROMTXT:
                case ST_GEOMCOLLFROMWKB:
                case ST_GEOMETRYCOLLECTIONFROMTEXT:
                case ST_GEOMETRYCOLLECTIONFROMWKB:
                case ST_GEOMETRYFROMTEXT:
                case ST_GEOMETRYFROMWKB:
                case ST_GEOMETRYN:
                case ST_GEOMETRYTYPE:
                case ST_GEOMFROMTEXT:
                case ST_GEOMFROMWKB:
                case ST_INTERIORRINGN:
                case ST_INTERSECTION:
                case ST_INTERSECTS:
                case ST_ISCLOSED:
                case ST_ISEMPTY:
                case ST_ISSIMPLE:
                case ST_LINEFROMTEXT:
                case ST_LINEFROMWKB:
                case ST_LINESTRINGFROMTEXT:
                case ST_LINESTRINGFROMWKB:
                case ST_NUMGEOMETRIES:
                case ST_NUMINTERIORRING:
                case ST_NUMINTERIORRINGS:
                case ST_NUMPOINTS:
                case ST_OVERLAPS:
                case ST_POINTFROMTEXT:
                case ST_POINTFROMWKB:
                case ST_POINTN:
                case ST_POLYFROMTEXT:
                case ST_POLYFROMWKB:
                case ST_POLYGONFROMTEXT:
                case ST_POLYGONFROMWKB:
                case ST_SRID:
                case ST_STARTPOINT:
                case ST_SYMDIFFERENCE:
                case ST_TOUCHES:
                case ST_UNION:
                case ST_WITHIN:
                case ST_X:
                case ST_Y:
                case SUBDATE:
                case SUBSTRING_INDEX:
                case SUBTIME:
                case SYSTEM_USER:
                case TAN:
                case TIMEDIFF:
                case TIMESTAMPADD:
                case TIMESTAMPDIFF:
                case TIME_FORMAT:
                case TIME_TO_SEC:
                case TOUCHES:
                case TO_BASE64:
                case TO_DAYS:
                case TO_SECONDS:
                case UCASE:
                case UNCOMPRESS:
                case UNCOMPRESSED_LENGTH:
                case UNHEX:
                case UNIX_TIMESTAMP:
                case UPDATEXML:
                case UPPER:
                case UUID:
                case UUID_SHORT:
                case VALIDATE_PASSWORD_STRENGTH:
                case VERSION:
                case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
                case WEEKDAY:
                case WEEKOFYEAR:
                case WEIGHT_STRING:
                case WITHIN:
                case YEARWEEK:
                case Y_FUNCTION:
                case X_FUNCTION:
                case CHARSET_REVERSE_QOUTE_STRING:
                case STRING_LITERAL:
                case ID:
                case REVERSE_QUOTE_ID:
                    _localctx = new ColumnDeclarationContext(_localctx);
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 1406; uid();
                        State = 1407; columnDefinition();
                    }
                    break;
                case CHECK:
                case CONSTRAINT:
                case FOREIGN:
                case PRIMARY:
                case UNIQUE:
                    _localctx = new ConstraintDeclarationContext(_localctx);
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 1409; tableConstraint();
                    }
                    break;
                case FULLTEXT:
                case INDEX:
                case KEY:
                case SPATIAL:
                    _localctx = new IndexDeclarationContext(_localctx);
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 1410; indexColumnDefinition();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ColumnDefinitionContext : ParserRuleContext
    {
        public DataTypeContext dataType()
        {
            return GetRuleContext<DataTypeContext>(0);
        }
        public ColumnConstraintContext[] columnConstraint()
        {
            return GetRuleContexts<ColumnConstraintContext>();
        }
        public ColumnConstraintContext columnConstraint(int i)
        {
            return GetRuleContext<ColumnConstraintContext>(i);
        }
        public ColumnDefinitionContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_columnDefinition; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterColumnDefinition(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitColumnDefinition(this);
        }
    }

    [RuleVersion(0)]
    public ColumnDefinitionContext columnDefinition()
    {
        ColumnDefinitionContext _localctx = new ColumnDefinitionContext(Context, State);
        EnterRule(_localctx, 78, RULE_columnDefinition);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 1413; dataType();
                State = 1417;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AS) | (1L << COLLATE) | (1L << DEFAULT) | (1L << GENERATED))) != 0) || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (KEY - 82)) | (1L << (NOT - 82)) | (1L << (NULL_LITERAL - 82)) | (1L << (ON - 82)) | (1L << (PRIMARY - 82)) | (1L << (REFERENCES - 82)))) != 0) || _la == UNIQUE || _la == SERIAL || ((((_la - 269)) & ~0x3f) == 0 && ((1L << (_la - 269)) & ((1L << (AUTO_INCREMENT - 269)) | (1L << (COLUMN_FORMAT - 269)) | (1L << (COMMENT - 269)))) != 0) || _la == STORAGE || _la == NULL_SPEC_LITERAL)
                {
                    {
                        {
                            State = 1414; columnConstraint();
                        }
                    }
                    State = 1419;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ColumnConstraintContext : ParserRuleContext
    {
        public ColumnConstraintContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_columnConstraint; } }

        public ColumnConstraintContext() { }
        public virtual void CopyFrom(ColumnConstraintContext context)
        {
            base.CopyFrom(context);
        }
    }
    public partial class StorageColumnConstraintContext : ColumnConstraintContext
    {
        public IToken storageval;
        public ITerminalNode STORAGE() { return GetToken(MySqlParser.STORAGE, 0); }
        public ITerminalNode DISK() { return GetToken(MySqlParser.DISK, 0); }
        public ITerminalNode MEMORY() { return GetToken(MySqlParser.MEMORY, 0); }
        public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
        public StorageColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterStorageColumnConstraint(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitStorageColumnConstraint(this);
        }
    }
    public partial class FormatColumnConstraintContext : ColumnConstraintContext
    {
        public IToken colformat;
        public ITerminalNode COLUMN_FORMAT() { return GetToken(MySqlParser.COLUMN_FORMAT, 0); }
        public ITerminalNode FIXED() { return GetToken(MySqlParser.FIXED, 0); }
        public ITerminalNode DYNAMIC() { return GetToken(MySqlParser.DYNAMIC, 0); }
        public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
        public FormatColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterFormatColumnConstraint(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitFormatColumnConstraint(this);
        }
    }
    public partial class CollateColumnConstraintContext : ColumnConstraintContext
    {
        public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
        public CollationNameContext collationName()
        {
            return GetRuleContext<CollationNameContext>(0);
        }
        public CollateColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterCollateColumnConstraint(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitCollateColumnConstraint(this);
        }
    }
    public partial class AutoIncrementColumnConstraintContext : ColumnConstraintContext
    {
        public ITerminalNode AUTO_INCREMENT() { return GetToken(MySqlParser.AUTO_INCREMENT, 0); }
        public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
        public ITerminalNode UPDATE() { return GetToken(MySqlParser.UPDATE, 0); }
        public CurrentTimestampContext currentTimestamp()
        {
            return GetRuleContext<CurrentTimestampContext>(0);
        }
        public AutoIncrementColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAutoIncrementColumnConstraint(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAutoIncrementColumnConstraint(this);
        }
    }
    public partial class CommentColumnConstraintContext : ColumnConstraintContext
    {
        public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public CommentColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterCommentColumnConstraint(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitCommentColumnConstraint(this);
        }
    }
    public partial class PrimaryKeyColumnConstraintContext : ColumnConstraintContext
    {
        public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
        public ITerminalNode PRIMARY() { return GetToken(MySqlParser.PRIMARY, 0); }
        public PrimaryKeyColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterPrimaryKeyColumnConstraint(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitPrimaryKeyColumnConstraint(this);
        }
    }
    public partial class UniqueKeyColumnConstraintContext : ColumnConstraintContext
    {
        public ITerminalNode UNIQUE() { return GetToken(MySqlParser.UNIQUE, 0); }
        public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
        public UniqueKeyColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterUniqueKeyColumnConstraint(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitUniqueKeyColumnConstraint(this);
        }
    }
    public partial class SerialDefaultColumnConstraintContext : ColumnConstraintContext
    {
        public ITerminalNode SERIAL() { return GetToken(MySqlParser.SERIAL, 0); }
        public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
        public ITerminalNode VALUE() { return GetToken(MySqlParser.VALUE, 0); }
        public SerialDefaultColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterSerialDefaultColumnConstraint(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitSerialDefaultColumnConstraint(this);
        }
    }
    public partial class NullColumnConstraintContext : ColumnConstraintContext
    {
        public NullNotnullContext nullNotnull()
        {
            return GetRuleContext<NullNotnullContext>(0);
        }
        public NullColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterNullColumnConstraint(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitNullColumnConstraint(this);
        }
    }
    public partial class DefaultColumnConstraintContext : ColumnConstraintContext
    {
        public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
        public DefaultValueContext defaultValue()
        {
            return GetRuleContext<DefaultValueContext>(0);
        }
        public DefaultColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterDefaultColumnConstraint(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitDefaultColumnConstraint(this);
        }
    }
    public partial class ReferenceColumnConstraintContext : ColumnConstraintContext
    {
        public ReferenceDefinitionContext referenceDefinition()
        {
            return GetRuleContext<ReferenceDefinitionContext>(0);
        }
        public ReferenceColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterReferenceColumnConstraint(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitReferenceColumnConstraint(this);
        }
    }
    public partial class GeneratedColumnConstraintContext : ColumnConstraintContext
    {
        public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public ExpressionContext expression()
        {
            return GetRuleContext<ExpressionContext>(0);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public ITerminalNode GENERATED() { return GetToken(MySqlParser.GENERATED, 0); }
        public ITerminalNode ALWAYS() { return GetToken(MySqlParser.ALWAYS, 0); }
        public ITerminalNode VIRTUAL() { return GetToken(MySqlParser.VIRTUAL, 0); }
        public ITerminalNode STORED() { return GetToken(MySqlParser.STORED, 0); }
        public GeneratedColumnConstraintContext(ColumnConstraintContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterGeneratedColumnConstraint(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitGeneratedColumnConstraint(this);
        }
    }

    [RuleVersion(0)]
    public ColumnConstraintContext columnConstraint()
    {
        ColumnConstraintContext _localctx = new ColumnConstraintContext(Context, State);
        EnterRule(_localctx, 80, RULE_columnConstraint);
        int _la;
        try
        {
            State = 1460;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case NOT:
                case NULL_LITERAL:
                case NULL_SPEC_LITERAL:
                    _localctx = new NullColumnConstraintContext(_localctx);
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 1420; nullNotnull();
                    }
                    break;
                case DEFAULT:
                    _localctx = new DefaultColumnConstraintContext(_localctx);
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 1421; Match(DEFAULT);
                        State = 1422; defaultValue();
                    }
                    break;
                case ON:
                case AUTO_INCREMENT:
                    _localctx = new AutoIncrementColumnConstraintContext(_localctx);
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 1427;
                        ErrorHandler.Sync(this);
                        switch (TokenStream.LA(1))
                        {
                            case AUTO_INCREMENT:
                                {
                                    State = 1423; Match(AUTO_INCREMENT);
                                }
                                break;
                            case ON:
                                {
                                    State = 1424; Match(ON);
                                    State = 1425; Match(UPDATE);
                                    State = 1426; currentTimestamp();
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }
                    break;
                case KEY:
                case PRIMARY:
                    _localctx = new PrimaryKeyColumnConstraintContext(_localctx);
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 1430;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == PRIMARY)
                        {
                            {
                                State = 1429; Match(PRIMARY);
                            }
                        }

                        State = 1432; Match(KEY);
                    }
                    break;
                case UNIQUE:
                    _localctx = new UniqueKeyColumnConstraintContext(_localctx);
                    EnterOuterAlt(_localctx, 5);
                    {
                        State = 1433; Match(UNIQUE);
                        State = 1435;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 133, Context))
                        {
                            case 1:
                                {
                                    State = 1434; Match(KEY);
                                }
                                break;
                        }
                    }
                    break;
                case COMMENT:
                    _localctx = new CommentColumnConstraintContext(_localctx);
                    EnterOuterAlt(_localctx, 6);
                    {
                        State = 1437; Match(COMMENT);
                        State = 1438; Match(STRING_LITERAL);
                    }
                    break;
                case COLUMN_FORMAT:
                    _localctx = new FormatColumnConstraintContext(_localctx);
                    EnterOuterAlt(_localctx, 7);
                    {
                        State = 1439; Match(COLUMN_FORMAT);
                        State = 1440;
                        ((FormatColumnConstraintContext)_localctx).colformat = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == DEFAULT || _la == DYNAMIC || _la == FIXED))
                        {
                            ((FormatColumnConstraintContext)_localctx).colformat = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                    break;
                case STORAGE:
                    _localctx = new StorageColumnConstraintContext(_localctx);
                    EnterOuterAlt(_localctx, 8);
                    {
                        State = 1441; Match(STORAGE);
                        State = 1442;
                        ((StorageColumnConstraintContext)_localctx).storageval = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == DEFAULT || _la == DISK || _la == MEMORY))
                        {
                            ((StorageColumnConstraintContext)_localctx).storageval = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                    break;
                case REFERENCES:
                    _localctx = new ReferenceColumnConstraintContext(_localctx);
                    EnterOuterAlt(_localctx, 9);
                    {
                        State = 1443; referenceDefinition();
                    }
                    break;
                case COLLATE:
                    _localctx = new CollateColumnConstraintContext(_localctx);
                    EnterOuterAlt(_localctx, 10);
                    {
                        State = 1444; Match(COLLATE);
                        State = 1445; collationName();
                    }
                    break;
                case AS:
                case GENERATED:
                    _localctx = new GeneratedColumnConstraintContext(_localctx);
                    EnterOuterAlt(_localctx, 11);
                    {
                        State = 1448;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == GENERATED)
                        {
                            {
                                State = 1446; Match(GENERATED);
                                State = 1447; Match(ALWAYS);
                            }
                        }

                        State = 1450; Match(AS);
                        State = 1451; Match(LR_BRACKET);
                        State = 1452; expression(0);
                        State = 1453; Match(RR_BRACKET);
                        State = 1455;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == STORED || _la == VIRTUAL)
                        {
                            {
                                State = 1454;
                                _la = TokenStream.LA(1);
                                if (!(_la == STORED || _la == VIRTUAL))
                                {
                                    ErrorHandler.RecoverInline(this);
                                }
                                else
                                {
                                    ErrorHandler.ReportMatch(this);
                                    Consume();
                                }
                            }
                        }

                    }
                    break;
                case SERIAL:
                    _localctx = new SerialDefaultColumnConstraintContext(_localctx);
                    EnterOuterAlt(_localctx, 12);
                    {
                        State = 1457; Match(SERIAL);
                        State = 1458; Match(DEFAULT);
                        State = 1459; Match(VALUE);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class TableConstraintContext : ParserRuleContext
    {
        public TableConstraintContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_tableConstraint; } }

        public TableConstraintContext() { }
        public virtual void CopyFrom(TableConstraintContext context)
        {
            base.CopyFrom(context);
        }
    }
    public partial class UniqueKeyTableConstraintContext : TableConstraintContext
    {
        public UidContext name;
        public IToken indexFormat;
        public UidContext index;
        public ITerminalNode UNIQUE() { return GetToken(MySqlParser.UNIQUE, 0); }
        public IndexColumnNamesContext indexColumnNames()
        {
            return GetRuleContext<IndexColumnNamesContext>(0);
        }
        public ITerminalNode CONSTRAINT() { return GetToken(MySqlParser.CONSTRAINT, 0); }
        public IndexTypeContext indexType()
        {
            return GetRuleContext<IndexTypeContext>(0);
        }
        public IndexOptionContext[] indexOption()
        {
            return GetRuleContexts<IndexOptionContext>();
        }
        public IndexOptionContext indexOption(int i)
        {
            return GetRuleContext<IndexOptionContext>(i);
        }
        public UidContext[] uid()
        {
            return GetRuleContexts<UidContext>();
        }
        public UidContext uid(int i)
        {
            return GetRuleContext<UidContext>(i);
        }
        public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
        public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
        public UniqueKeyTableConstraintContext(TableConstraintContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterUniqueKeyTableConstraint(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitUniqueKeyTableConstraint(this);
        }
    }
    public partial class CheckTableConstraintContext : TableConstraintContext
    {
        public UidContext name;
        public ITerminalNode CHECK() { return GetToken(MySqlParser.CHECK, 0); }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public ExpressionContext expression()
        {
            return GetRuleContext<ExpressionContext>(0);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public ITerminalNode CONSTRAINT() { return GetToken(MySqlParser.CONSTRAINT, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public CheckTableConstraintContext(TableConstraintContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterCheckTableConstraint(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitCheckTableConstraint(this);
        }
    }
    public partial class PrimaryKeyTableConstraintContext : TableConstraintContext
    {
        public UidContext name;
        public UidContext index;
        public ITerminalNode PRIMARY() { return GetToken(MySqlParser.PRIMARY, 0); }
        public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
        public IndexColumnNamesContext indexColumnNames()
        {
            return GetRuleContext<IndexColumnNamesContext>(0);
        }
        public ITerminalNode CONSTRAINT() { return GetToken(MySqlParser.CONSTRAINT, 0); }
        public IndexTypeContext indexType()
        {
            return GetRuleContext<IndexTypeContext>(0);
        }
        public IndexOptionContext[] indexOption()
        {
            return GetRuleContexts<IndexOptionContext>();
        }
        public IndexOptionContext indexOption(int i)
        {
            return GetRuleContext<IndexOptionContext>(i);
        }
        public UidContext[] uid()
        {
            return GetRuleContexts<UidContext>();
        }
        public UidContext uid(int i)
        {
            return GetRuleContext<UidContext>(i);
        }
        public PrimaryKeyTableConstraintContext(TableConstraintContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterPrimaryKeyTableConstraint(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitPrimaryKeyTableConstraint(this);
        }
    }
    public partial class ForeignKeyTableConstraintContext : TableConstraintContext
    {
        public UidContext name;
        public UidContext index;
        public ITerminalNode FOREIGN() { return GetToken(MySqlParser.FOREIGN, 0); }
        public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
        public IndexColumnNamesContext indexColumnNames()
        {
            return GetRuleContext<IndexColumnNamesContext>(0);
        }
        public ReferenceDefinitionContext referenceDefinition()
        {
            return GetRuleContext<ReferenceDefinitionContext>(0);
        }
        public ITerminalNode CONSTRAINT() { return GetToken(MySqlParser.CONSTRAINT, 0); }
        public UidContext[] uid()
        {
            return GetRuleContexts<UidContext>();
        }
        public UidContext uid(int i)
        {
            return GetRuleContext<UidContext>(i);
        }
        public ForeignKeyTableConstraintContext(TableConstraintContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterForeignKeyTableConstraint(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitForeignKeyTableConstraint(this);
        }
    }

    [RuleVersion(0)]
    public TableConstraintContext tableConstraint()
    {
        TableConstraintContext _localctx = new TableConstraintContext(Context, State);
        EnterRule(_localctx, 82, RULE_tableConstraint);
        int _la;
        try
        {
            State = 1531;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 153, Context))
            {
                case 1:
                    _localctx = new PrimaryKeyTableConstraintContext(_localctx);
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 1466;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == CONSTRAINT)
                        {
                            {
                                State = 1462; Match(CONSTRAINT);
                                State = 1464;
                                ErrorHandler.Sync(this);
                                _la = TokenStream.LA(1);
                                if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)) | (1L << (POSITION - 191)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ACCOUNT - 259)) | (1L << (ACTION - 259)) | (1L << (AFTER - 259)) | (1L << (AGGREGATE - 259)) | (1L << (ALGORITHM - 259)) | (1L << (ANY - 259)) | (1L << (AT - 259)) | (1L << (AUTHORS - 259)) | (1L << (AUTOCOMMIT - 259)) | (1L << (AUTOEXTEND_SIZE - 259)) | (1L << (AUTO_INCREMENT - 259)) | (1L << (AVG_ROW_LENGTH - 259)) | (1L << (BEGIN - 259)) | (1L << (BINLOG - 259)) | (1L << (BIT - 259)) | (1L << (BLOCK - 259)) | (1L << (BOOL - 259)) | (1L << (BOOLEAN - 259)) | (1L << (BTREE - 259)) | (1L << (CACHE - 259)) | (1L << (CASCADED - 259)) | (1L << (CHAIN - 259)) | (1L << (CHANGED - 259)) | (1L << (CHANNEL - 259)) | (1L << (CHECKSUM - 259)) | (1L << (PAGE_CHECKSUM - 259)) | (1L << (CIPHER - 259)) | (1L << (CLASS_ORIGIN - 259)) | (1L << (CLIENT - 259)) | (1L << (CLOSE - 259)) | (1L << (COALESCE - 259)) | (1L << (CODE - 259)) | (1L << (COLUMNS - 259)) | (1L << (COLUMN_FORMAT - 259)) | (1L << (COLUMN_NAME - 259)) | (1L << (COMMENT - 259)) | (1L << (COMMIT - 259)) | (1L << (COMPACT - 259)) | (1L << (COMPLETION - 259)) | (1L << (COMPRESSED - 259)) | (1L << (COMPRESSION - 259)) | (1L << (CONCURRENT - 259)) | (1L << (CONNECTION - 259)) | (1L << (CONSISTENT - 259)) | (1L << (CONSTRAINT_CATALOG - 259)) | (1L << (CONSTRAINT_SCHEMA - 259)) | (1L << (CONSTRAINT_NAME - 259)) | (1L << (CONTAINS - 259)) | (1L << (CONTEXT - 259)) | (1L << (CONTRIBUTORS - 259)) | (1L << (COPY - 259)) | (1L << (CPU - 259)) | (1L << (CURSOR_NAME - 259)) | (1L << (DATA - 259)) | (1L << (DATAFILE - 259)) | (1L << (DEALLOCATE - 259)) | (1L << (DEFAULT_AUTH - 259)) | (1L << (DEFINER - 259)) | (1L << (DELAY_KEY_WRITE - 259)) | (1L << (DES_KEY_FILE - 259)) | (1L << (DIRECTORY - 259)) | (1L << (DISABLE - 259)) | (1L << (DISCARD - 259)) | (1L << (DISK - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (DO - 323)) | (1L << (DUMPFILE - 323)) | (1L << (DUPLICATE - 323)) | (1L << (DYNAMIC - 323)) | (1L << (ENABLE - 323)) | (1L << (ENCRYPTION - 323)) | (1L << (END - 323)) | (1L << (ENDS - 323)) | (1L << (ENGINE - 323)) | (1L << (ENGINES - 323)) | (1L << (ERROR - 323)) | (1L << (ERRORS - 323)) | (1L << (ESCAPE - 323)) | (1L << (EVEN - 323)) | (1L << (EVENT - 323)) | (1L << (EVENTS - 323)) | (1L << (EVERY - 323)) | (1L << (EXCHANGE - 323)) | (1L << (EXCLUSIVE - 323)) | (1L << (EXPIRE - 323)) | (1L << (EXPORT - 323)) | (1L << (EXTENDED - 323)) | (1L << (EXTENT_SIZE - 323)) | (1L << (FAST - 323)) | (1L << (FAULTS - 323)) | (1L << (FIELDS - 323)) | (1L << (FILE_BLOCK_SIZE - 323)) | (1L << (FILTER - 323)) | (1L << (FIRST - 323)) | (1L << (FIXED - 323)) | (1L << (FLUSH - 323)) | (1L << (FOLLOWS - 323)) | (1L << (FOUND - 323)) | (1L << (FULL - 323)) | (1L << (FUNCTION - 323)) | (1L << (GENERAL - 323)) | (1L << (GLOBAL - 323)) | (1L << (GRANTS - 323)) | (1L << (GROUP_REPLICATION - 323)) | (1L << (HANDLER - 323)) | (1L << (HASH - 323)) | (1L << (HELP - 323)) | (1L << (HOST - 323)) | (1L << (HOSTS - 323)) | (1L << (IDENTIFIED - 323)) | (1L << (IGNORE_SERVER_IDS - 323)) | (1L << (IMPORT - 323)) | (1L << (INDEXES - 323)) | (1L << (INITIAL_SIZE - 323)) | (1L << (INPLACE - 323)) | (1L << (INSERT_METHOD - 323)) | (1L << (INSTALL - 323)) | (1L << (INSTANCE - 323)) | (1L << (INVISIBLE - 323)) | (1L << (INVOKER - 323)) | (1L << (IO - 323)) | (1L << (IO_THREAD - 323)) | (1L << (IPC - 323)) | (1L << (ISOLATION - 323)) | (1L << (ISSUER - 323)) | (1L << (JSON - 323)) | (1L << (KEY_BLOCK_SIZE - 323)) | (1L << (LANGUAGE - 323)) | (1L << (LAST - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (LEAVES - 387)) | (1L << (LESS - 387)) | (1L << (LEVEL - 387)) | (1L << (LIST - 387)) | (1L << (LOCAL - 387)) | (1L << (LOGFILE - 387)) | (1L << (LOGS - 387)) | (1L << (MASTER - 387)) | (1L << (MASTER_AUTO_POSITION - 387)) | (1L << (MASTER_CONNECT_RETRY - 387)) | (1L << (MASTER_DELAY - 387)) | (1L << (MASTER_HEARTBEAT_PERIOD - 387)) | (1L << (MASTER_HOST - 387)) | (1L << (MASTER_LOG_FILE - 387)) | (1L << (MASTER_LOG_POS - 387)) | (1L << (MASTER_PASSWORD - 387)) | (1L << (MASTER_PORT - 387)) | (1L << (MASTER_RETRY_COUNT - 387)) | (1L << (MASTER_SSL - 387)) | (1L << (MASTER_SSL_CA - 387)) | (1L << (MASTER_SSL_CAPATH - 387)) | (1L << (MASTER_SSL_CERT - 387)) | (1L << (MASTER_SSL_CIPHER - 387)) | (1L << (MASTER_SSL_CRL - 387)) | (1L << (MASTER_SSL_CRLPATH - 387)) | (1L << (MASTER_SSL_KEY - 387)) | (1L << (MASTER_TLS_VERSION - 387)) | (1L << (MASTER_USER - 387)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 387)) | (1L << (MAX_QUERIES_PER_HOUR - 387)) | (1L << (MAX_ROWS - 387)) | (1L << (MAX_SIZE - 387)) | (1L << (MAX_UPDATES_PER_HOUR - 387)) | (1L << (MAX_USER_CONNECTIONS - 387)) | (1L << (MEDIUM - 387)) | (1L << (MERGE - 387)) | (1L << (MESSAGE_TEXT - 387)) | (1L << (MID - 387)) | (1L << (MIGRATE - 387)) | (1L << (MIN_ROWS - 387)) | (1L << (MODE - 387)) | (1L << (MODIFY - 387)) | (1L << (MUTEX - 387)) | (1L << (MYSQL - 387)) | (1L << (MYSQL_ERRNO - 387)) | (1L << (NAME - 387)) | (1L << (NAMES - 387)) | (1L << (NCHAR - 387)) | (1L << (NEVER - 387)) | (1L << (NEXT - 387)) | (1L << (NO - 387)) | (1L << (NODEGROUP - 387)) | (1L << (NONE - 387)) | (1L << (OFFLINE - 387)) | (1L << (OFFSET - 387)) | (1L << (OJ - 387)) | (1L << (OLD_PASSWORD - 387)) | (1L << (ONE - 387)) | (1L << (ONLINE - 387)) | (1L << (ONLY - 387)) | (1L << (OPEN - 387)) | (1L << (OPTIMIZER_COSTS - 387)) | (1L << (OPTIONS - 387)) | (1L << (OWNER - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PAGE - 451)) | (1L << (PARSER - 451)) | (1L << (PARTIAL - 451)) | (1L << (PARTITIONING - 451)) | (1L << (PARTITIONS - 451)) | (1L << (PASSWORD - 451)) | (1L << (PHASE - 451)) | (1L << (PLUGIN - 451)) | (1L << (PLUGIN_DIR - 451)) | (1L << (PLUGINS - 451)) | (1L << (PORT - 451)) | (1L << (PRECEDES - 451)) | (1L << (PREPARE - 451)) | (1L << (PRESERVE - 451)) | (1L << (PREV - 451)) | (1L << (PROCESSLIST - 451)) | (1L << (PROFILE - 451)) | (1L << (PROFILES - 451)) | (1L << (PROXY - 451)) | (1L << (QUERY - 451)) | (1L << (QUICK - 451)) | (1L << (REBUILD - 451)) | (1L << (RECOVER - 451)) | (1L << (REDO_BUFFER_SIZE - 451)) | (1L << (REDUNDANT - 451)) | (1L << (RELAY - 451)) | (1L << (RELAY_LOG_FILE - 451)) | (1L << (RELAY_LOG_POS - 451)) | (1L << (RELAYLOG - 451)) | (1L << (REMOVE - 451)) | (1L << (REORGANIZE - 451)) | (1L << (REPAIR - 451)) | (1L << (REPLICATE_DO_DB - 451)) | (1L << (REPLICATE_DO_TABLE - 451)) | (1L << (REPLICATE_IGNORE_DB - 451)) | (1L << (REPLICATE_IGNORE_TABLE - 451)) | (1L << (REPLICATE_REWRITE_DB - 451)) | (1L << (REPLICATE_WILD_DO_TABLE - 451)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 451)) | (1L << (REPLICATION - 451)) | (1L << (RESET - 451)) | (1L << (RESUME - 451)) | (1L << (RETURNED_SQLSTATE - 451)) | (1L << (RETURNS - 451)) | (1L << (ROLLBACK - 451)) | (1L << (ROLLUP - 451)) | (1L << (ROTATE - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (ROW_FORMAT - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SCHEDULE - 451)) | (1L << (SECURITY - 451)) | (1L << (SERVER - 451)) | (1L << (SESSION - 451)) | (1L << (SHARE - 451)) | (1L << (SHARED - 451)) | (1L << (SIGNED - 451)) | (1L << (SIMPLE - 451)) | (1L << (SLAVE - 451)) | (1L << (SLOW - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOCKET - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SOME - 515)) | (1L << (SONAME - 515)) | (1L << (SOUNDS - 515)) | (1L << (SOURCE - 515)) | (1L << (SQL_AFTER_GTIDS - 515)) | (1L << (SQL_AFTER_MTS_GAPS - 515)) | (1L << (SQL_BEFORE_GTIDS - 515)) | (1L << (SQL_BUFFER_RESULT - 515)) | (1L << (SQL_CACHE - 515)) | (1L << (SQL_NO_CACHE - 515)) | (1L << (SQL_THREAD - 515)) | (1L << (START - 515)) | (1L << (STARTS - 515)) | (1L << (STATS_AUTO_RECALC - 515)) | (1L << (STATS_PERSISTENT - 515)) | (1L << (STATS_SAMPLE_PAGES - 515)) | (1L << (STATUS - 515)) | (1L << (STOP - 515)) | (1L << (STORAGE - 515)) | (1L << (STRING - 515)) | (1L << (SUBCLASS_ORIGIN - 515)) | (1L << (SUBJECT - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBPARTITIONS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SWAPS - 515)) | (1L << (SWITCHES - 515)) | (1L << (TABLE_NAME - 515)) | (1L << (TABLESPACE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TEMPTABLE - 515)) | (1L << (THAN - 515)) | (1L << (TRADITIONAL - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRIGGERS - 515)) | (1L << (TRUNCATE - 515)) | (1L << (UNDEFINED - 515)) | (1L << (UNDOFILE - 515)) | (1L << (UNDO_BUFFER_SIZE - 515)) | (1L << (UNINSTALL - 515)) | (1L << (UNKNOWN - 515)) | (1L << (UNTIL - 515)) | (1L << (UPGRADE - 515)) | (1L << (USER - 515)) | (1L << (USE_FRM - 515)) | (1L << (USER_RESOURCES - 515)) | (1L << (VALIDATION - 515)) | (1L << (VALUE - 515)) | (1L << (VARIABLES - 515)) | (1L << (VIEW - 515)) | (1L << (VISIBLE - 515)) | (1L << (WAIT - 515)) | (1L << (WARNINGS - 515)) | (1L << (WITHOUT - 515)) | (1L << (WORK - 515)) | (1L << (WRAPPER - 515)) | (1L << (X509 - 515)) | (1L << (XA - 515)) | (1L << (XML - 515)))) != 0) || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (INTERNAL - 580)) | (1L << (QUARTER - 580)) | (1L << (MONTH - 580)) | (1L << (DAY - 580)) | (1L << (HOUR - 580)) | (1L << (MINUTE - 580)) | (1L << (WEEK - 580)) | (1L << (SECOND - 580)) | (1L << (MICROSECOND - 580)) | (1L << (TABLES - 580)) | (1L << (ROUTINE - 580)) | (1L << (EXECUTE - 580)) | (1L << (FILE - 580)) | (1L << (PROCESS - 580)) | (1L << (RELOAD - 580)) | (1L << (SHUTDOWN - 580)) | (1L << (SUPER - 580)) | (1L << (PRIVILEGES - 580)) | (1L << (SESSION_VARIABLES_ADMIN - 580)) | (1L << (ARMSCII8 - 580)) | (1L << (ASCII - 580)) | (1L << (BIG5 - 580)) | (1L << (CP1250 - 580)) | (1L << (CP1251 - 580)) | (1L << (CP1256 - 580)) | (1L << (CP1257 - 580)) | (1L << (CP850 - 580)) | (1L << (CP852 - 580)) | (1L << (CP866 - 580)) | (1L << (CP932 - 580)) | (1L << (DEC8 - 580)) | (1L << (EUCJPMS - 580)) | (1L << (EUCKR - 580)) | (1L << (GB2312 - 580)) | (1L << (GBK - 580)) | (1L << (GEOSTD8 - 580)) | (1L << (GREEK - 580)) | (1L << (HEBREW - 580)) | (1L << (HP8 - 580)) | (1L << (KEYBCS2 - 580)) | (1L << (KOI8R - 580)) | (1L << (KOI8U - 580)) | (1L << (LATIN1 - 580)) | (1L << (LATIN2 - 580)) | (1L << (LATIN5 - 580)) | (1L << (LATIN7 - 580)) | (1L << (MACCE - 580)) | (1L << (MACROMAN - 580)) | (1L << (SJIS - 580)) | (1L << (SWE7 - 580)) | (1L << (TIS620 - 580)) | (1L << (UCS2 - 580)) | (1L << (UJIS - 580)) | (1L << (UTF16 - 580)) | (1L << (UTF16LE - 580)) | (1L << (UTF32 - 580)) | (1L << (UTF8 - 580)) | (1L << (UTF8MB3 - 580)) | (1L << (UTF8MB4 - 580)) | (1L << (ARCHIVE - 580)) | (1L << (BLACKHOLE - 580)) | (1L << (CSV - 580)) | (1L << (FEDERATED - 580)) | (1L << (INNODB - 580)))) != 0) || ((((_la - 644)) & ~0x3f) == 0 && ((1L << (_la - 644)) & ((1L << (MEMORY - 644)) | (1L << (MRG_MYISAM - 644)) | (1L << (MYISAM - 644)) | (1L << (NDB - 644)) | (1L << (NDBCLUSTER - 644)) | (1L << (PERFORMANCE_SCHEMA - 644)) | (1L << (TOKUDB - 644)) | (1L << (REPEATABLE - 644)) | (1L << (COMMITTED - 644)) | (1L << (UNCOMMITTED - 644)) | (1L << (SERIALIZABLE - 644)) | (1L << (GEOMETRYCOLLECTION - 644)) | (1L << (LINESTRING - 644)) | (1L << (MULTILINESTRING - 644)) | (1L << (MULTIPOINT - 644)) | (1L << (MULTIPOLYGON - 644)) | (1L << (POINT - 644)) | (1L << (POLYGON - 644)) | (1L << (ABS - 644)) | (1L << (ACOS - 644)) | (1L << (ADDDATE - 644)) | (1L << (ADDTIME - 644)) | (1L << (AES_DECRYPT - 644)) | (1L << (AES_ENCRYPT - 644)) | (1L << (AREA - 644)) | (1L << (ASBINARY - 644)) | (1L << (ASIN - 644)) | (1L << (ASTEXT - 644)) | (1L << (ASWKB - 644)) | (1L << (ASWKT - 644)) | (1L << (ASYMMETRIC_DECRYPT - 644)) | (1L << (ASYMMETRIC_DERIVE - 644)) | (1L << (ASYMMETRIC_ENCRYPT - 644)) | (1L << (ASYMMETRIC_SIGN - 644)) | (1L << (ASYMMETRIC_VERIFY - 644)) | (1L << (ATAN - 644)) | (1L << (ATAN2 - 644)) | (1L << (BENCHMARK - 644)) | (1L << (BIN - 644)) | (1L << (BIT_COUNT - 644)) | (1L << (BIT_LENGTH - 644)) | (1L << (BUFFER - 644)) | (1L << (CATALOG_NAME - 644)) | (1L << (CEIL - 644)) | (1L << (CEILING - 644)) | (1L << (CENTROID - 644)) | (1L << (CHARACTER_LENGTH - 644)) | (1L << (CHARSET - 644)) | (1L << (CHAR_LENGTH - 644)) | (1L << (COERCIBILITY - 644)) | (1L << (COLLATION - 644)) | (1L << (COMPRESS - 644)) | (1L << (CONCAT - 644)) | (1L << (CONCAT_WS - 644)) | (1L << (CONNECTION_ID - 644)) | (1L << (CONV - 644)) | (1L << (CONVERT_TZ - 644)) | (1L << (COS - 644)) | (1L << (COT - 644)) | (1L << (CRC32 - 644)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 644)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 644)))) != 0) || ((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (CREATE_DH_PARAMETERS - 708)) | (1L << (CREATE_DIGEST - 708)) | (1L << (CROSSES - 708)) | (1L << (DATEDIFF - 708)) | (1L << (DATE_FORMAT - 708)) | (1L << (DAYNAME - 708)) | (1L << (DAYOFMONTH - 708)) | (1L << (DAYOFWEEK - 708)) | (1L << (DAYOFYEAR - 708)) | (1L << (DECODE - 708)) | (1L << (DEGREES - 708)) | (1L << (DES_DECRYPT - 708)) | (1L << (DES_ENCRYPT - 708)) | (1L << (DIMENSION - 708)) | (1L << (DISJOINT - 708)) | (1L << (ELT - 708)) | (1L << (ENCODE - 708)) | (1L << (ENCRYPT - 708)) | (1L << (ENDPOINT - 708)) | (1L << (ENVELOPE - 708)) | (1L << (EQUALS - 708)) | (1L << (EXP - 708)) | (1L << (EXPORT_SET - 708)) | (1L << (EXTERIORRING - 708)) | (1L << (EXTRACTVALUE - 708)) | (1L << (FIELD - 708)) | (1L << (FIND_IN_SET - 708)) | (1L << (FLOOR - 708)) | (1L << (FORMAT - 708)) | (1L << (FOUND_ROWS - 708)) | (1L << (FROM_BASE64 - 708)) | (1L << (FROM_DAYS - 708)) | (1L << (FROM_UNIXTIME - 708)) | (1L << (GEOMCOLLFROMTEXT - 708)) | (1L << (GEOMCOLLFROMWKB - 708)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 708)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 708)) | (1L << (GEOMETRYFROMTEXT - 708)) | (1L << (GEOMETRYFROMWKB - 708)) | (1L << (GEOMETRYN - 708)) | (1L << (GEOMETRYTYPE - 708)) | (1L << (GEOMFROMTEXT - 708)) | (1L << (GEOMFROMWKB - 708)) | (1L << (GET_FORMAT - 708)) | (1L << (GET_LOCK - 708)) | (1L << (GLENGTH - 708)) | (1L << (GREATEST - 708)) | (1L << (GTID_SUBSET - 708)) | (1L << (GTID_SUBTRACT - 708)) | (1L << (HEX - 708)) | (1L << (IFNULL - 708)) | (1L << (INET6_ATON - 708)) | (1L << (INET6_NTOA - 708)) | (1L << (INET_ATON - 708)) | (1L << (INET_NTOA - 708)) | (1L << (INSTR - 708)) | (1L << (INTERIORRINGN - 708)) | (1L << (INTERSECTS - 708)) | (1L << (ISCLOSED - 708)) | (1L << (ISEMPTY - 708)) | (1L << (ISNULL - 708)) | (1L << (ISSIMPLE - 708)) | (1L << (IS_FREE_LOCK - 708)) | (1L << (IS_IPV4 - 708)))) != 0) || ((((_la - 772)) & ~0x3f) == 0 && ((1L << (_la - 772)) & ((1L << (IS_IPV4_COMPAT - 772)) | (1L << (IS_IPV4_MAPPED - 772)) | (1L << (IS_IPV6 - 772)) | (1L << (IS_USED_LOCK - 772)) | (1L << (LAST_INSERT_ID - 772)) | (1L << (LCASE - 772)) | (1L << (LEAST - 772)) | (1L << (LENGTH - 772)) | (1L << (LINEFROMTEXT - 772)) | (1L << (LINEFROMWKB - 772)) | (1L << (LINESTRINGFROMTEXT - 772)) | (1L << (LINESTRINGFROMWKB - 772)) | (1L << (LN - 772)) | (1L << (LOAD_FILE - 772)) | (1L << (LOCATE - 772)) | (1L << (LOG - 772)) | (1L << (LOG10 - 772)) | (1L << (LOG2 - 772)) | (1L << (LOWER - 772)) | (1L << (LPAD - 772)) | (1L << (LTRIM - 772)) | (1L << (MAKEDATE - 772)) | (1L << (MAKETIME - 772)) | (1L << (MAKE_SET - 772)) | (1L << (MASTER_POS_WAIT - 772)) | (1L << (MBRCONTAINS - 772)) | (1L << (MBRDISJOINT - 772)) | (1L << (MBREQUAL - 772)) | (1L << (MBRINTERSECTS - 772)) | (1L << (MBROVERLAPS - 772)) | (1L << (MBRTOUCHES - 772)) | (1L << (MBRWITHIN - 772)) | (1L << (MD5 - 772)) | (1L << (MLINEFROMTEXT - 772)) | (1L << (MLINEFROMWKB - 772)) | (1L << (MONTHNAME - 772)) | (1L << (MPOINTFROMTEXT - 772)) | (1L << (MPOINTFROMWKB - 772)) | (1L << (MPOLYFROMTEXT - 772)) | (1L << (MPOLYFROMWKB - 772)) | (1L << (MULTILINESTRINGFROMTEXT - 772)) | (1L << (MULTILINESTRINGFROMWKB - 772)) | (1L << (MULTIPOINTFROMTEXT - 772)) | (1L << (MULTIPOINTFROMWKB - 772)) | (1L << (MULTIPOLYGONFROMTEXT - 772)) | (1L << (MULTIPOLYGONFROMWKB - 772)) | (1L << (NAME_CONST - 772)) | (1L << (NULLIF - 772)) | (1L << (NUMGEOMETRIES - 772)) | (1L << (NUMINTERIORRINGS - 772)) | (1L << (NUMPOINTS - 772)) | (1L << (OCT - 772)) | (1L << (OCTET_LENGTH - 772)) | (1L << (ORD - 772)) | (1L << (OVERLAPS - 772)) | (1L << (PERIOD_ADD - 772)) | (1L << (PERIOD_DIFF - 772)) | (1L << (PI - 772)) | (1L << (POINTFROMTEXT - 772)) | (1L << (POINTFROMWKB - 772)) | (1L << (POINTN - 772)) | (1L << (POLYFROMTEXT - 772)) | (1L << (POLYFROMWKB - 772)) | (1L << (POLYGONFROMTEXT - 772)))) != 0) || ((((_la - 836)) & ~0x3f) == 0 && ((1L << (_la - 836)) & ((1L << (POLYGONFROMWKB - 836)) | (1L << (POW - 836)) | (1L << (POWER - 836)) | (1L << (QUOTE - 836)) | (1L << (RADIANS - 836)) | (1L << (RAND - 836)) | (1L << (RANDOM_BYTES - 836)) | (1L << (RELEASE_LOCK - 836)) | (1L << (REVERSE - 836)) | (1L << (ROUND - 836)) | (1L << (ROW_COUNT - 836)) | (1L << (RPAD - 836)) | (1L << (RTRIM - 836)) | (1L << (SEC_TO_TIME - 836)) | (1L << (SESSION_USER - 836)) | (1L << (SHA - 836)) | (1L << (SHA1 - 836)) | (1L << (SHA2 - 836)) | (1L << (SCHEMA_NAME - 836)) | (1L << (SIGN - 836)) | (1L << (SIN - 836)) | (1L << (SLEEP - 836)) | (1L << (SOUNDEX - 836)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 836)) | (1L << (SQRT - 836)) | (1L << (SRID - 836)) | (1L << (STARTPOINT - 836)) | (1L << (STRCMP - 836)) | (1L << (STR_TO_DATE - 836)) | (1L << (ST_AREA - 836)) | (1L << (ST_ASBINARY - 836)) | (1L << (ST_ASTEXT - 836)) | (1L << (ST_ASWKB - 836)) | (1L << (ST_ASWKT - 836)) | (1L << (ST_BUFFER - 836)) | (1L << (ST_CENTROID - 836)) | (1L << (ST_CONTAINS - 836)) | (1L << (ST_CROSSES - 836)) | (1L << (ST_DIFFERENCE - 836)) | (1L << (ST_DIMENSION - 836)) | (1L << (ST_DISJOINT - 836)) | (1L << (ST_DISTANCE - 836)) | (1L << (ST_ENDPOINT - 836)) | (1L << (ST_ENVELOPE - 836)) | (1L << (ST_EQUALS - 836)) | (1L << (ST_EXTERIORRING - 836)) | (1L << (ST_GEOMCOLLFROMTEXT - 836)) | (1L << (ST_GEOMCOLLFROMTXT - 836)) | (1L << (ST_GEOMCOLLFROMWKB - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 836)) | (1L << (ST_GEOMETRYFROMTEXT - 836)) | (1L << (ST_GEOMETRYFROMWKB - 836)) | (1L << (ST_GEOMETRYN - 836)) | (1L << (ST_GEOMETRYTYPE - 836)) | (1L << (ST_GEOMFROMTEXT - 836)) | (1L << (ST_GEOMFROMWKB - 836)) | (1L << (ST_INTERIORRINGN - 836)) | (1L << (ST_INTERSECTION - 836)) | (1L << (ST_INTERSECTS - 836)) | (1L << (ST_ISCLOSED - 836)) | (1L << (ST_ISEMPTY - 836)) | (1L << (ST_ISSIMPLE - 836)) | (1L << (ST_LINEFROMTEXT - 836)))) != 0) || ((((_la - 900)) & ~0x3f) == 0 && ((1L << (_la - 900)) & ((1L << (ST_LINEFROMWKB - 900)) | (1L << (ST_LINESTRINGFROMTEXT - 900)) | (1L << (ST_LINESTRINGFROMWKB - 900)) | (1L << (ST_NUMGEOMETRIES - 900)) | (1L << (ST_NUMINTERIORRING - 900)) | (1L << (ST_NUMINTERIORRINGS - 900)) | (1L << (ST_NUMPOINTS - 900)) | (1L << (ST_OVERLAPS - 900)) | (1L << (ST_POINTFROMTEXT - 900)) | (1L << (ST_POINTFROMWKB - 900)) | (1L << (ST_POINTN - 900)) | (1L << (ST_POLYFROMTEXT - 900)) | (1L << (ST_POLYFROMWKB - 900)) | (1L << (ST_POLYGONFROMTEXT - 900)) | (1L << (ST_POLYGONFROMWKB - 900)) | (1L << (ST_SRID - 900)) | (1L << (ST_STARTPOINT - 900)) | (1L << (ST_SYMDIFFERENCE - 900)) | (1L << (ST_TOUCHES - 900)) | (1L << (ST_UNION - 900)) | (1L << (ST_WITHIN - 900)) | (1L << (ST_X - 900)) | (1L << (ST_Y - 900)) | (1L << (SUBDATE - 900)) | (1L << (SUBSTRING_INDEX - 900)) | (1L << (SUBTIME - 900)) | (1L << (SYSTEM_USER - 900)) | (1L << (TAN - 900)) | (1L << (TIMEDIFF - 900)) | (1L << (TIMESTAMPADD - 900)) | (1L << (TIMESTAMPDIFF - 900)) | (1L << (TIME_FORMAT - 900)) | (1L << (TIME_TO_SEC - 900)) | (1L << (TOUCHES - 900)) | (1L << (TO_BASE64 - 900)) | (1L << (TO_DAYS - 900)) | (1L << (TO_SECONDS - 900)) | (1L << (UCASE - 900)) | (1L << (UNCOMPRESS - 900)) | (1L << (UNCOMPRESSED_LENGTH - 900)) | (1L << (UNHEX - 900)) | (1L << (UNIX_TIMESTAMP - 900)) | (1L << (UPDATEXML - 900)) | (1L << (UPPER - 900)) | (1L << (UUID - 900)) | (1L << (UUID_SHORT - 900)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 900)) | (1L << (VERSION - 900)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 900)) | (1L << (WEEKDAY - 900)) | (1L << (WEEKOFYEAR - 900)) | (1L << (WEIGHT_STRING - 900)) | (1L << (WITHIN - 900)) | (1L << (YEARWEEK - 900)) | (1L << (Y_FUNCTION - 900)) | (1L << (X_FUNCTION - 900)))) != 0) || ((((_la - 994)) & ~0x3f) == 0 && ((1L << (_la - 994)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 994)) | (1L << (STRING_LITERAL - 994)) | (1L << (ID - 994)) | (1L << (REVERSE_QUOTE_ID - 994)))) != 0))
                                {
                                    {
                                        State = 1463; ((PrimaryKeyTableConstraintContext)_localctx).name = uid();
                                    }
                                }

                            }
                        }

                        State = 1468; Match(PRIMARY);
                        State = 1469; Match(KEY);
                        State = 1471;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)) | (1L << (POSITION - 191)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ACCOUNT - 259)) | (1L << (ACTION - 259)) | (1L << (AFTER - 259)) | (1L << (AGGREGATE - 259)) | (1L << (ALGORITHM - 259)) | (1L << (ANY - 259)) | (1L << (AT - 259)) | (1L << (AUTHORS - 259)) | (1L << (AUTOCOMMIT - 259)) | (1L << (AUTOEXTEND_SIZE - 259)) | (1L << (AUTO_INCREMENT - 259)) | (1L << (AVG_ROW_LENGTH - 259)) | (1L << (BEGIN - 259)) | (1L << (BINLOG - 259)) | (1L << (BIT - 259)) | (1L << (BLOCK - 259)) | (1L << (BOOL - 259)) | (1L << (BOOLEAN - 259)) | (1L << (BTREE - 259)) | (1L << (CACHE - 259)) | (1L << (CASCADED - 259)) | (1L << (CHAIN - 259)) | (1L << (CHANGED - 259)) | (1L << (CHANNEL - 259)) | (1L << (CHECKSUM - 259)) | (1L << (PAGE_CHECKSUM - 259)) | (1L << (CIPHER - 259)) | (1L << (CLASS_ORIGIN - 259)) | (1L << (CLIENT - 259)) | (1L << (CLOSE - 259)) | (1L << (COALESCE - 259)) | (1L << (CODE - 259)) | (1L << (COLUMNS - 259)) | (1L << (COLUMN_FORMAT - 259)) | (1L << (COLUMN_NAME - 259)) | (1L << (COMMENT - 259)) | (1L << (COMMIT - 259)) | (1L << (COMPACT - 259)) | (1L << (COMPLETION - 259)) | (1L << (COMPRESSED - 259)) | (1L << (COMPRESSION - 259)) | (1L << (CONCURRENT - 259)) | (1L << (CONNECTION - 259)) | (1L << (CONSISTENT - 259)) | (1L << (CONSTRAINT_CATALOG - 259)) | (1L << (CONSTRAINT_SCHEMA - 259)) | (1L << (CONSTRAINT_NAME - 259)) | (1L << (CONTAINS - 259)) | (1L << (CONTEXT - 259)) | (1L << (CONTRIBUTORS - 259)) | (1L << (COPY - 259)) | (1L << (CPU - 259)) | (1L << (CURSOR_NAME - 259)) | (1L << (DATA - 259)) | (1L << (DATAFILE - 259)) | (1L << (DEALLOCATE - 259)) | (1L << (DEFAULT_AUTH - 259)) | (1L << (DEFINER - 259)) | (1L << (DELAY_KEY_WRITE - 259)) | (1L << (DES_KEY_FILE - 259)) | (1L << (DIRECTORY - 259)) | (1L << (DISABLE - 259)) | (1L << (DISCARD - 259)) | (1L << (DISK - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (DO - 323)) | (1L << (DUMPFILE - 323)) | (1L << (DUPLICATE - 323)) | (1L << (DYNAMIC - 323)) | (1L << (ENABLE - 323)) | (1L << (ENCRYPTION - 323)) | (1L << (END - 323)) | (1L << (ENDS - 323)) | (1L << (ENGINE - 323)) | (1L << (ENGINES - 323)) | (1L << (ERROR - 323)) | (1L << (ERRORS - 323)) | (1L << (ESCAPE - 323)) | (1L << (EVEN - 323)) | (1L << (EVENT - 323)) | (1L << (EVENTS - 323)) | (1L << (EVERY - 323)) | (1L << (EXCHANGE - 323)) | (1L << (EXCLUSIVE - 323)) | (1L << (EXPIRE - 323)) | (1L << (EXPORT - 323)) | (1L << (EXTENDED - 323)) | (1L << (EXTENT_SIZE - 323)) | (1L << (FAST - 323)) | (1L << (FAULTS - 323)) | (1L << (FIELDS - 323)) | (1L << (FILE_BLOCK_SIZE - 323)) | (1L << (FILTER - 323)) | (1L << (FIRST - 323)) | (1L << (FIXED - 323)) | (1L << (FLUSH - 323)) | (1L << (FOLLOWS - 323)) | (1L << (FOUND - 323)) | (1L << (FULL - 323)) | (1L << (FUNCTION - 323)) | (1L << (GENERAL - 323)) | (1L << (GLOBAL - 323)) | (1L << (GRANTS - 323)) | (1L << (GROUP_REPLICATION - 323)) | (1L << (HANDLER - 323)) | (1L << (HASH - 323)) | (1L << (HELP - 323)) | (1L << (HOST - 323)) | (1L << (HOSTS - 323)) | (1L << (IDENTIFIED - 323)) | (1L << (IGNORE_SERVER_IDS - 323)) | (1L << (IMPORT - 323)) | (1L << (INDEXES - 323)) | (1L << (INITIAL_SIZE - 323)) | (1L << (INPLACE - 323)) | (1L << (INSERT_METHOD - 323)) | (1L << (INSTALL - 323)) | (1L << (INSTANCE - 323)) | (1L << (INVISIBLE - 323)) | (1L << (INVOKER - 323)) | (1L << (IO - 323)) | (1L << (IO_THREAD - 323)) | (1L << (IPC - 323)) | (1L << (ISOLATION - 323)) | (1L << (ISSUER - 323)) | (1L << (JSON - 323)) | (1L << (KEY_BLOCK_SIZE - 323)) | (1L << (LANGUAGE - 323)) | (1L << (LAST - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (LEAVES - 387)) | (1L << (LESS - 387)) | (1L << (LEVEL - 387)) | (1L << (LIST - 387)) | (1L << (LOCAL - 387)) | (1L << (LOGFILE - 387)) | (1L << (LOGS - 387)) | (1L << (MASTER - 387)) | (1L << (MASTER_AUTO_POSITION - 387)) | (1L << (MASTER_CONNECT_RETRY - 387)) | (1L << (MASTER_DELAY - 387)) | (1L << (MASTER_HEARTBEAT_PERIOD - 387)) | (1L << (MASTER_HOST - 387)) | (1L << (MASTER_LOG_FILE - 387)) | (1L << (MASTER_LOG_POS - 387)) | (1L << (MASTER_PASSWORD - 387)) | (1L << (MASTER_PORT - 387)) | (1L << (MASTER_RETRY_COUNT - 387)) | (1L << (MASTER_SSL - 387)) | (1L << (MASTER_SSL_CA - 387)) | (1L << (MASTER_SSL_CAPATH - 387)) | (1L << (MASTER_SSL_CERT - 387)) | (1L << (MASTER_SSL_CIPHER - 387)) | (1L << (MASTER_SSL_CRL - 387)) | (1L << (MASTER_SSL_CRLPATH - 387)) | (1L << (MASTER_SSL_KEY - 387)) | (1L << (MASTER_TLS_VERSION - 387)) | (1L << (MASTER_USER - 387)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 387)) | (1L << (MAX_QUERIES_PER_HOUR - 387)) | (1L << (MAX_ROWS - 387)) | (1L << (MAX_SIZE - 387)) | (1L << (MAX_UPDATES_PER_HOUR - 387)) | (1L << (MAX_USER_CONNECTIONS - 387)) | (1L << (MEDIUM - 387)) | (1L << (MERGE - 387)) | (1L << (MESSAGE_TEXT - 387)) | (1L << (MID - 387)) | (1L << (MIGRATE - 387)) | (1L << (MIN_ROWS - 387)) | (1L << (MODE - 387)) | (1L << (MODIFY - 387)) | (1L << (MUTEX - 387)) | (1L << (MYSQL - 387)) | (1L << (MYSQL_ERRNO - 387)) | (1L << (NAME - 387)) | (1L << (NAMES - 387)) | (1L << (NCHAR - 387)) | (1L << (NEVER - 387)) | (1L << (NEXT - 387)) | (1L << (NO - 387)) | (1L << (NODEGROUP - 387)) | (1L << (NONE - 387)) | (1L << (OFFLINE - 387)) | (1L << (OFFSET - 387)) | (1L << (OJ - 387)) | (1L << (OLD_PASSWORD - 387)) | (1L << (ONE - 387)) | (1L << (ONLINE - 387)) | (1L << (ONLY - 387)) | (1L << (OPEN - 387)) | (1L << (OPTIMIZER_COSTS - 387)) | (1L << (OPTIONS - 387)) | (1L << (OWNER - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PAGE - 451)) | (1L << (PARSER - 451)) | (1L << (PARTIAL - 451)) | (1L << (PARTITIONING - 451)) | (1L << (PARTITIONS - 451)) | (1L << (PASSWORD - 451)) | (1L << (PHASE - 451)) | (1L << (PLUGIN - 451)) | (1L << (PLUGIN_DIR - 451)) | (1L << (PLUGINS - 451)) | (1L << (PORT - 451)) | (1L << (PRECEDES - 451)) | (1L << (PREPARE - 451)) | (1L << (PRESERVE - 451)) | (1L << (PREV - 451)) | (1L << (PROCESSLIST - 451)) | (1L << (PROFILE - 451)) | (1L << (PROFILES - 451)) | (1L << (PROXY - 451)) | (1L << (QUERY - 451)) | (1L << (QUICK - 451)) | (1L << (REBUILD - 451)) | (1L << (RECOVER - 451)) | (1L << (REDO_BUFFER_SIZE - 451)) | (1L << (REDUNDANT - 451)) | (1L << (RELAY - 451)) | (1L << (RELAY_LOG_FILE - 451)) | (1L << (RELAY_LOG_POS - 451)) | (1L << (RELAYLOG - 451)) | (1L << (REMOVE - 451)) | (1L << (REORGANIZE - 451)) | (1L << (REPAIR - 451)) | (1L << (REPLICATE_DO_DB - 451)) | (1L << (REPLICATE_DO_TABLE - 451)) | (1L << (REPLICATE_IGNORE_DB - 451)) | (1L << (REPLICATE_IGNORE_TABLE - 451)) | (1L << (REPLICATE_REWRITE_DB - 451)) | (1L << (REPLICATE_WILD_DO_TABLE - 451)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 451)) | (1L << (REPLICATION - 451)) | (1L << (RESET - 451)) | (1L << (RESUME - 451)) | (1L << (RETURNED_SQLSTATE - 451)) | (1L << (RETURNS - 451)) | (1L << (ROLLBACK - 451)) | (1L << (ROLLUP - 451)) | (1L << (ROTATE - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (ROW_FORMAT - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SCHEDULE - 451)) | (1L << (SECURITY - 451)) | (1L << (SERVER - 451)) | (1L << (SESSION - 451)) | (1L << (SHARE - 451)) | (1L << (SHARED - 451)) | (1L << (SIGNED - 451)) | (1L << (SIMPLE - 451)) | (1L << (SLAVE - 451)) | (1L << (SLOW - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOCKET - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SOME - 515)) | (1L << (SONAME - 515)) | (1L << (SOUNDS - 515)) | (1L << (SOURCE - 515)) | (1L << (SQL_AFTER_GTIDS - 515)) | (1L << (SQL_AFTER_MTS_GAPS - 515)) | (1L << (SQL_BEFORE_GTIDS - 515)) | (1L << (SQL_BUFFER_RESULT - 515)) | (1L << (SQL_CACHE - 515)) | (1L << (SQL_NO_CACHE - 515)) | (1L << (SQL_THREAD - 515)) | (1L << (START - 515)) | (1L << (STARTS - 515)) | (1L << (STATS_AUTO_RECALC - 515)) | (1L << (STATS_PERSISTENT - 515)) | (1L << (STATS_SAMPLE_PAGES - 515)) | (1L << (STATUS - 515)) | (1L << (STOP - 515)) | (1L << (STORAGE - 515)) | (1L << (STRING - 515)) | (1L << (SUBCLASS_ORIGIN - 515)) | (1L << (SUBJECT - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBPARTITIONS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SWAPS - 515)) | (1L << (SWITCHES - 515)) | (1L << (TABLE_NAME - 515)) | (1L << (TABLESPACE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TEMPTABLE - 515)) | (1L << (THAN - 515)) | (1L << (TRADITIONAL - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRIGGERS - 515)) | (1L << (TRUNCATE - 515)) | (1L << (UNDEFINED - 515)) | (1L << (UNDOFILE - 515)) | (1L << (UNDO_BUFFER_SIZE - 515)) | (1L << (UNINSTALL - 515)) | (1L << (UNKNOWN - 515)) | (1L << (UNTIL - 515)) | (1L << (UPGRADE - 515)) | (1L << (USER - 515)) | (1L << (USE_FRM - 515)) | (1L << (USER_RESOURCES - 515)) | (1L << (VALIDATION - 515)) | (1L << (VALUE - 515)) | (1L << (VARIABLES - 515)) | (1L << (VIEW - 515)) | (1L << (VISIBLE - 515)) | (1L << (WAIT - 515)) | (1L << (WARNINGS - 515)) | (1L << (WITHOUT - 515)) | (1L << (WORK - 515)) | (1L << (WRAPPER - 515)) | (1L << (X509 - 515)) | (1L << (XA - 515)) | (1L << (XML - 515)))) != 0) || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (INTERNAL - 580)) | (1L << (QUARTER - 580)) | (1L << (MONTH - 580)) | (1L << (DAY - 580)) | (1L << (HOUR - 580)) | (1L << (MINUTE - 580)) | (1L << (WEEK - 580)) | (1L << (SECOND - 580)) | (1L << (MICROSECOND - 580)) | (1L << (TABLES - 580)) | (1L << (ROUTINE - 580)) | (1L << (EXECUTE - 580)) | (1L << (FILE - 580)) | (1L << (PROCESS - 580)) | (1L << (RELOAD - 580)) | (1L << (SHUTDOWN - 580)) | (1L << (SUPER - 580)) | (1L << (PRIVILEGES - 580)) | (1L << (SESSION_VARIABLES_ADMIN - 580)) | (1L << (ARMSCII8 - 580)) | (1L << (ASCII - 580)) | (1L << (BIG5 - 580)) | (1L << (CP1250 - 580)) | (1L << (CP1251 - 580)) | (1L << (CP1256 - 580)) | (1L << (CP1257 - 580)) | (1L << (CP850 - 580)) | (1L << (CP852 - 580)) | (1L << (CP866 - 580)) | (1L << (CP932 - 580)) | (1L << (DEC8 - 580)) | (1L << (EUCJPMS - 580)) | (1L << (EUCKR - 580)) | (1L << (GB2312 - 580)) | (1L << (GBK - 580)) | (1L << (GEOSTD8 - 580)) | (1L << (GREEK - 580)) | (1L << (HEBREW - 580)) | (1L << (HP8 - 580)) | (1L << (KEYBCS2 - 580)) | (1L << (KOI8R - 580)) | (1L << (KOI8U - 580)) | (1L << (LATIN1 - 580)) | (1L << (LATIN2 - 580)) | (1L << (LATIN5 - 580)) | (1L << (LATIN7 - 580)) | (1L << (MACCE - 580)) | (1L << (MACROMAN - 580)) | (1L << (SJIS - 580)) | (1L << (SWE7 - 580)) | (1L << (TIS620 - 580)) | (1L << (UCS2 - 580)) | (1L << (UJIS - 580)) | (1L << (UTF16 - 580)) | (1L << (UTF16LE - 580)) | (1L << (UTF32 - 580)) | (1L << (UTF8 - 580)) | (1L << (UTF8MB3 - 580)) | (1L << (UTF8MB4 - 580)) | (1L << (ARCHIVE - 580)) | (1L << (BLACKHOLE - 580)) | (1L << (CSV - 580)) | (1L << (FEDERATED - 580)) | (1L << (INNODB - 580)))) != 0) || ((((_la - 644)) & ~0x3f) == 0 && ((1L << (_la - 644)) & ((1L << (MEMORY - 644)) | (1L << (MRG_MYISAM - 644)) | (1L << (MYISAM - 644)) | (1L << (NDB - 644)) | (1L << (NDBCLUSTER - 644)) | (1L << (PERFORMANCE_SCHEMA - 644)) | (1L << (TOKUDB - 644)) | (1L << (REPEATABLE - 644)) | (1L << (COMMITTED - 644)) | (1L << (UNCOMMITTED - 644)) | (1L << (SERIALIZABLE - 644)) | (1L << (GEOMETRYCOLLECTION - 644)) | (1L << (LINESTRING - 644)) | (1L << (MULTILINESTRING - 644)) | (1L << (MULTIPOINT - 644)) | (1L << (MULTIPOLYGON - 644)) | (1L << (POINT - 644)) | (1L << (POLYGON - 644)) | (1L << (ABS - 644)) | (1L << (ACOS - 644)) | (1L << (ADDDATE - 644)) | (1L << (ADDTIME - 644)) | (1L << (AES_DECRYPT - 644)) | (1L << (AES_ENCRYPT - 644)) | (1L << (AREA - 644)) | (1L << (ASBINARY - 644)) | (1L << (ASIN - 644)) | (1L << (ASTEXT - 644)) | (1L << (ASWKB - 644)) | (1L << (ASWKT - 644)) | (1L << (ASYMMETRIC_DECRYPT - 644)) | (1L << (ASYMMETRIC_DERIVE - 644)) | (1L << (ASYMMETRIC_ENCRYPT - 644)) | (1L << (ASYMMETRIC_SIGN - 644)) | (1L << (ASYMMETRIC_VERIFY - 644)) | (1L << (ATAN - 644)) | (1L << (ATAN2 - 644)) | (1L << (BENCHMARK - 644)) | (1L << (BIN - 644)) | (1L << (BIT_COUNT - 644)) | (1L << (BIT_LENGTH - 644)) | (1L << (BUFFER - 644)) | (1L << (CATALOG_NAME - 644)) | (1L << (CEIL - 644)) | (1L << (CEILING - 644)) | (1L << (CENTROID - 644)) | (1L << (CHARACTER_LENGTH - 644)) | (1L << (CHARSET - 644)) | (1L << (CHAR_LENGTH - 644)) | (1L << (COERCIBILITY - 644)) | (1L << (COLLATION - 644)) | (1L << (COMPRESS - 644)) | (1L << (CONCAT - 644)) | (1L << (CONCAT_WS - 644)) | (1L << (CONNECTION_ID - 644)) | (1L << (CONV - 644)) | (1L << (CONVERT_TZ - 644)) | (1L << (COS - 644)) | (1L << (COT - 644)) | (1L << (CRC32 - 644)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 644)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 644)))) != 0) || ((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (CREATE_DH_PARAMETERS - 708)) | (1L << (CREATE_DIGEST - 708)) | (1L << (CROSSES - 708)) | (1L << (DATEDIFF - 708)) | (1L << (DATE_FORMAT - 708)) | (1L << (DAYNAME - 708)) | (1L << (DAYOFMONTH - 708)) | (1L << (DAYOFWEEK - 708)) | (1L << (DAYOFYEAR - 708)) | (1L << (DECODE - 708)) | (1L << (DEGREES - 708)) | (1L << (DES_DECRYPT - 708)) | (1L << (DES_ENCRYPT - 708)) | (1L << (DIMENSION - 708)) | (1L << (DISJOINT - 708)) | (1L << (ELT - 708)) | (1L << (ENCODE - 708)) | (1L << (ENCRYPT - 708)) | (1L << (ENDPOINT - 708)) | (1L << (ENVELOPE - 708)) | (1L << (EQUALS - 708)) | (1L << (EXP - 708)) | (1L << (EXPORT_SET - 708)) | (1L << (EXTERIORRING - 708)) | (1L << (EXTRACTVALUE - 708)) | (1L << (FIELD - 708)) | (1L << (FIND_IN_SET - 708)) | (1L << (FLOOR - 708)) | (1L << (FORMAT - 708)) | (1L << (FOUND_ROWS - 708)) | (1L << (FROM_BASE64 - 708)) | (1L << (FROM_DAYS - 708)) | (1L << (FROM_UNIXTIME - 708)) | (1L << (GEOMCOLLFROMTEXT - 708)) | (1L << (GEOMCOLLFROMWKB - 708)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 708)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 708)) | (1L << (GEOMETRYFROMTEXT - 708)) | (1L << (GEOMETRYFROMWKB - 708)) | (1L << (GEOMETRYN - 708)) | (1L << (GEOMETRYTYPE - 708)) | (1L << (GEOMFROMTEXT - 708)) | (1L << (GEOMFROMWKB - 708)) | (1L << (GET_FORMAT - 708)) | (1L << (GET_LOCK - 708)) | (1L << (GLENGTH - 708)) | (1L << (GREATEST - 708)) | (1L << (GTID_SUBSET - 708)) | (1L << (GTID_SUBTRACT - 708)) | (1L << (HEX - 708)) | (1L << (IFNULL - 708)) | (1L << (INET6_ATON - 708)) | (1L << (INET6_NTOA - 708)) | (1L << (INET_ATON - 708)) | (1L << (INET_NTOA - 708)) | (1L << (INSTR - 708)) | (1L << (INTERIORRINGN - 708)) | (1L << (INTERSECTS - 708)) | (1L << (ISCLOSED - 708)) | (1L << (ISEMPTY - 708)) | (1L << (ISNULL - 708)) | (1L << (ISSIMPLE - 708)) | (1L << (IS_FREE_LOCK - 708)) | (1L << (IS_IPV4 - 708)))) != 0) || ((((_la - 772)) & ~0x3f) == 0 && ((1L << (_la - 772)) & ((1L << (IS_IPV4_COMPAT - 772)) | (1L << (IS_IPV4_MAPPED - 772)) | (1L << (IS_IPV6 - 772)) | (1L << (IS_USED_LOCK - 772)) | (1L << (LAST_INSERT_ID - 772)) | (1L << (LCASE - 772)) | (1L << (LEAST - 772)) | (1L << (LENGTH - 772)) | (1L << (LINEFROMTEXT - 772)) | (1L << (LINEFROMWKB - 772)) | (1L << (LINESTRINGFROMTEXT - 772)) | (1L << (LINESTRINGFROMWKB - 772)) | (1L << (LN - 772)) | (1L << (LOAD_FILE - 772)) | (1L << (LOCATE - 772)) | (1L << (LOG - 772)) | (1L << (LOG10 - 772)) | (1L << (LOG2 - 772)) | (1L << (LOWER - 772)) | (1L << (LPAD - 772)) | (1L << (LTRIM - 772)) | (1L << (MAKEDATE - 772)) | (1L << (MAKETIME - 772)) | (1L << (MAKE_SET - 772)) | (1L << (MASTER_POS_WAIT - 772)) | (1L << (MBRCONTAINS - 772)) | (1L << (MBRDISJOINT - 772)) | (1L << (MBREQUAL - 772)) | (1L << (MBRINTERSECTS - 772)) | (1L << (MBROVERLAPS - 772)) | (1L << (MBRTOUCHES - 772)) | (1L << (MBRWITHIN - 772)) | (1L << (MD5 - 772)) | (1L << (MLINEFROMTEXT - 772)) | (1L << (MLINEFROMWKB - 772)) | (1L << (MONTHNAME - 772)) | (1L << (MPOINTFROMTEXT - 772)) | (1L << (MPOINTFROMWKB - 772)) | (1L << (MPOLYFROMTEXT - 772)) | (1L << (MPOLYFROMWKB - 772)) | (1L << (MULTILINESTRINGFROMTEXT - 772)) | (1L << (MULTILINESTRINGFROMWKB - 772)) | (1L << (MULTIPOINTFROMTEXT - 772)) | (1L << (MULTIPOINTFROMWKB - 772)) | (1L << (MULTIPOLYGONFROMTEXT - 772)) | (1L << (MULTIPOLYGONFROMWKB - 772)) | (1L << (NAME_CONST - 772)) | (1L << (NULLIF - 772)) | (1L << (NUMGEOMETRIES - 772)) | (1L << (NUMINTERIORRINGS - 772)) | (1L << (NUMPOINTS - 772)) | (1L << (OCT - 772)) | (1L << (OCTET_LENGTH - 772)) | (1L << (ORD - 772)) | (1L << (OVERLAPS - 772)) | (1L << (PERIOD_ADD - 772)) | (1L << (PERIOD_DIFF - 772)) | (1L << (PI - 772)) | (1L << (POINTFROMTEXT - 772)) | (1L << (POINTFROMWKB - 772)) | (1L << (POINTN - 772)) | (1L << (POLYFROMTEXT - 772)) | (1L << (POLYFROMWKB - 772)) | (1L << (POLYGONFROMTEXT - 772)))) != 0) || ((((_la - 836)) & ~0x3f) == 0 && ((1L << (_la - 836)) & ((1L << (POLYGONFROMWKB - 836)) | (1L << (POW - 836)) | (1L << (POWER - 836)) | (1L << (QUOTE - 836)) | (1L << (RADIANS - 836)) | (1L << (RAND - 836)) | (1L << (RANDOM_BYTES - 836)) | (1L << (RELEASE_LOCK - 836)) | (1L << (REVERSE - 836)) | (1L << (ROUND - 836)) | (1L << (ROW_COUNT - 836)) | (1L << (RPAD - 836)) | (1L << (RTRIM - 836)) | (1L << (SEC_TO_TIME - 836)) | (1L << (SESSION_USER - 836)) | (1L << (SHA - 836)) | (1L << (SHA1 - 836)) | (1L << (SHA2 - 836)) | (1L << (SCHEMA_NAME - 836)) | (1L << (SIGN - 836)) | (1L << (SIN - 836)) | (1L << (SLEEP - 836)) | (1L << (SOUNDEX - 836)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 836)) | (1L << (SQRT - 836)) | (1L << (SRID - 836)) | (1L << (STARTPOINT - 836)) | (1L << (STRCMP - 836)) | (1L << (STR_TO_DATE - 836)) | (1L << (ST_AREA - 836)) | (1L << (ST_ASBINARY - 836)) | (1L << (ST_ASTEXT - 836)) | (1L << (ST_ASWKB - 836)) | (1L << (ST_ASWKT - 836)) | (1L << (ST_BUFFER - 836)) | (1L << (ST_CENTROID - 836)) | (1L << (ST_CONTAINS - 836)) | (1L << (ST_CROSSES - 836)) | (1L << (ST_DIFFERENCE - 836)) | (1L << (ST_DIMENSION - 836)) | (1L << (ST_DISJOINT - 836)) | (1L << (ST_DISTANCE - 836)) | (1L << (ST_ENDPOINT - 836)) | (1L << (ST_ENVELOPE - 836)) | (1L << (ST_EQUALS - 836)) | (1L << (ST_EXTERIORRING - 836)) | (1L << (ST_GEOMCOLLFROMTEXT - 836)) | (1L << (ST_GEOMCOLLFROMTXT - 836)) | (1L << (ST_GEOMCOLLFROMWKB - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 836)) | (1L << (ST_GEOMETRYFROMTEXT - 836)) | (1L << (ST_GEOMETRYFROMWKB - 836)) | (1L << (ST_GEOMETRYN - 836)) | (1L << (ST_GEOMETRYTYPE - 836)) | (1L << (ST_GEOMFROMTEXT - 836)) | (1L << (ST_GEOMFROMWKB - 836)) | (1L << (ST_INTERIORRINGN - 836)) | (1L << (ST_INTERSECTION - 836)) | (1L << (ST_INTERSECTS - 836)) | (1L << (ST_ISCLOSED - 836)) | (1L << (ST_ISEMPTY - 836)) | (1L << (ST_ISSIMPLE - 836)) | (1L << (ST_LINEFROMTEXT - 836)))) != 0) || ((((_la - 900)) & ~0x3f) == 0 && ((1L << (_la - 900)) & ((1L << (ST_LINEFROMWKB - 900)) | (1L << (ST_LINESTRINGFROMTEXT - 900)) | (1L << (ST_LINESTRINGFROMWKB - 900)) | (1L << (ST_NUMGEOMETRIES - 900)) | (1L << (ST_NUMINTERIORRING - 900)) | (1L << (ST_NUMINTERIORRINGS - 900)) | (1L << (ST_NUMPOINTS - 900)) | (1L << (ST_OVERLAPS - 900)) | (1L << (ST_POINTFROMTEXT - 900)) | (1L << (ST_POINTFROMWKB - 900)) | (1L << (ST_POINTN - 900)) | (1L << (ST_POLYFROMTEXT - 900)) | (1L << (ST_POLYFROMWKB - 900)) | (1L << (ST_POLYGONFROMTEXT - 900)) | (1L << (ST_POLYGONFROMWKB - 900)) | (1L << (ST_SRID - 900)) | (1L << (ST_STARTPOINT - 900)) | (1L << (ST_SYMDIFFERENCE - 900)) | (1L << (ST_TOUCHES - 900)) | (1L << (ST_UNION - 900)) | (1L << (ST_WITHIN - 900)) | (1L << (ST_X - 900)) | (1L << (ST_Y - 900)) | (1L << (SUBDATE - 900)) | (1L << (SUBSTRING_INDEX - 900)) | (1L << (SUBTIME - 900)) | (1L << (SYSTEM_USER - 900)) | (1L << (TAN - 900)) | (1L << (TIMEDIFF - 900)) | (1L << (TIMESTAMPADD - 900)) | (1L << (TIMESTAMPDIFF - 900)) | (1L << (TIME_FORMAT - 900)) | (1L << (TIME_TO_SEC - 900)) | (1L << (TOUCHES - 900)) | (1L << (TO_BASE64 - 900)) | (1L << (TO_DAYS - 900)) | (1L << (TO_SECONDS - 900)) | (1L << (UCASE - 900)) | (1L << (UNCOMPRESS - 900)) | (1L << (UNCOMPRESSED_LENGTH - 900)) | (1L << (UNHEX - 900)) | (1L << (UNIX_TIMESTAMP - 900)) | (1L << (UPDATEXML - 900)) | (1L << (UPPER - 900)) | (1L << (UUID - 900)) | (1L << (UUID_SHORT - 900)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 900)) | (1L << (VERSION - 900)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 900)) | (1L << (WEEKDAY - 900)) | (1L << (WEEKOFYEAR - 900)) | (1L << (WEIGHT_STRING - 900)) | (1L << (WITHIN - 900)) | (1L << (YEARWEEK - 900)) | (1L << (Y_FUNCTION - 900)) | (1L << (X_FUNCTION - 900)))) != 0) || ((((_la - 994)) & ~0x3f) == 0 && ((1L << (_la - 994)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 994)) | (1L << (STRING_LITERAL - 994)) | (1L << (ID - 994)) | (1L << (REVERSE_QUOTE_ID - 994)))) != 0))
                        {
                            {
                                State = 1470; ((PrimaryKeyTableConstraintContext)_localctx).index = uid();
                            }
                        }

                        State = 1474;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == USING)
                        {
                            {
                                State = 1473; indexType();
                            }
                        }

                        State = 1476; indexColumnNames();
                        State = 1480;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        while (_la == USING || _la == WITH || _la == COMMENT || _la == INVISIBLE || _la == KEY_BLOCK_SIZE || _la == VISIBLE)
                        {
                            {
                                {
                                    State = 1477; indexOption();
                                }
                            }
                            State = 1482;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                        }
                    }
                    break;
                case 2:
                    _localctx = new UniqueKeyTableConstraintContext(_localctx);
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 1487;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == CONSTRAINT)
                        {
                            {
                                State = 1483; Match(CONSTRAINT);
                                State = 1485;
                                ErrorHandler.Sync(this);
                                _la = TokenStream.LA(1);
                                if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)) | (1L << (POSITION - 191)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ACCOUNT - 259)) | (1L << (ACTION - 259)) | (1L << (AFTER - 259)) | (1L << (AGGREGATE - 259)) | (1L << (ALGORITHM - 259)) | (1L << (ANY - 259)) | (1L << (AT - 259)) | (1L << (AUTHORS - 259)) | (1L << (AUTOCOMMIT - 259)) | (1L << (AUTOEXTEND_SIZE - 259)) | (1L << (AUTO_INCREMENT - 259)) | (1L << (AVG_ROW_LENGTH - 259)) | (1L << (BEGIN - 259)) | (1L << (BINLOG - 259)) | (1L << (BIT - 259)) | (1L << (BLOCK - 259)) | (1L << (BOOL - 259)) | (1L << (BOOLEAN - 259)) | (1L << (BTREE - 259)) | (1L << (CACHE - 259)) | (1L << (CASCADED - 259)) | (1L << (CHAIN - 259)) | (1L << (CHANGED - 259)) | (1L << (CHANNEL - 259)) | (1L << (CHECKSUM - 259)) | (1L << (PAGE_CHECKSUM - 259)) | (1L << (CIPHER - 259)) | (1L << (CLASS_ORIGIN - 259)) | (1L << (CLIENT - 259)) | (1L << (CLOSE - 259)) | (1L << (COALESCE - 259)) | (1L << (CODE - 259)) | (1L << (COLUMNS - 259)) | (1L << (COLUMN_FORMAT - 259)) | (1L << (COLUMN_NAME - 259)) | (1L << (COMMENT - 259)) | (1L << (COMMIT - 259)) | (1L << (COMPACT - 259)) | (1L << (COMPLETION - 259)) | (1L << (COMPRESSED - 259)) | (1L << (COMPRESSION - 259)) | (1L << (CONCURRENT - 259)) | (1L << (CONNECTION - 259)) | (1L << (CONSISTENT - 259)) | (1L << (CONSTRAINT_CATALOG - 259)) | (1L << (CONSTRAINT_SCHEMA - 259)) | (1L << (CONSTRAINT_NAME - 259)) | (1L << (CONTAINS - 259)) | (1L << (CONTEXT - 259)) | (1L << (CONTRIBUTORS - 259)) | (1L << (COPY - 259)) | (1L << (CPU - 259)) | (1L << (CURSOR_NAME - 259)) | (1L << (DATA - 259)) | (1L << (DATAFILE - 259)) | (1L << (DEALLOCATE - 259)) | (1L << (DEFAULT_AUTH - 259)) | (1L << (DEFINER - 259)) | (1L << (DELAY_KEY_WRITE - 259)) | (1L << (DES_KEY_FILE - 259)) | (1L << (DIRECTORY - 259)) | (1L << (DISABLE - 259)) | (1L << (DISCARD - 259)) | (1L << (DISK - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (DO - 323)) | (1L << (DUMPFILE - 323)) | (1L << (DUPLICATE - 323)) | (1L << (DYNAMIC - 323)) | (1L << (ENABLE - 323)) | (1L << (ENCRYPTION - 323)) | (1L << (END - 323)) | (1L << (ENDS - 323)) | (1L << (ENGINE - 323)) | (1L << (ENGINES - 323)) | (1L << (ERROR - 323)) | (1L << (ERRORS - 323)) | (1L << (ESCAPE - 323)) | (1L << (EVEN - 323)) | (1L << (EVENT - 323)) | (1L << (EVENTS - 323)) | (1L << (EVERY - 323)) | (1L << (EXCHANGE - 323)) | (1L << (EXCLUSIVE - 323)) | (1L << (EXPIRE - 323)) | (1L << (EXPORT - 323)) | (1L << (EXTENDED - 323)) | (1L << (EXTENT_SIZE - 323)) | (1L << (FAST - 323)) | (1L << (FAULTS - 323)) | (1L << (FIELDS - 323)) | (1L << (FILE_BLOCK_SIZE - 323)) | (1L << (FILTER - 323)) | (1L << (FIRST - 323)) | (1L << (FIXED - 323)) | (1L << (FLUSH - 323)) | (1L << (FOLLOWS - 323)) | (1L << (FOUND - 323)) | (1L << (FULL - 323)) | (1L << (FUNCTION - 323)) | (1L << (GENERAL - 323)) | (1L << (GLOBAL - 323)) | (1L << (GRANTS - 323)) | (1L << (GROUP_REPLICATION - 323)) | (1L << (HANDLER - 323)) | (1L << (HASH - 323)) | (1L << (HELP - 323)) | (1L << (HOST - 323)) | (1L << (HOSTS - 323)) | (1L << (IDENTIFIED - 323)) | (1L << (IGNORE_SERVER_IDS - 323)) | (1L << (IMPORT - 323)) | (1L << (INDEXES - 323)) | (1L << (INITIAL_SIZE - 323)) | (1L << (INPLACE - 323)) | (1L << (INSERT_METHOD - 323)) | (1L << (INSTALL - 323)) | (1L << (INSTANCE - 323)) | (1L << (INVISIBLE - 323)) | (1L << (INVOKER - 323)) | (1L << (IO - 323)) | (1L << (IO_THREAD - 323)) | (1L << (IPC - 323)) | (1L << (ISOLATION - 323)) | (1L << (ISSUER - 323)) | (1L << (JSON - 323)) | (1L << (KEY_BLOCK_SIZE - 323)) | (1L << (LANGUAGE - 323)) | (1L << (LAST - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (LEAVES - 387)) | (1L << (LESS - 387)) | (1L << (LEVEL - 387)) | (1L << (LIST - 387)) | (1L << (LOCAL - 387)) | (1L << (LOGFILE - 387)) | (1L << (LOGS - 387)) | (1L << (MASTER - 387)) | (1L << (MASTER_AUTO_POSITION - 387)) | (1L << (MASTER_CONNECT_RETRY - 387)) | (1L << (MASTER_DELAY - 387)) | (1L << (MASTER_HEARTBEAT_PERIOD - 387)) | (1L << (MASTER_HOST - 387)) | (1L << (MASTER_LOG_FILE - 387)) | (1L << (MASTER_LOG_POS - 387)) | (1L << (MASTER_PASSWORD - 387)) | (1L << (MASTER_PORT - 387)) | (1L << (MASTER_RETRY_COUNT - 387)) | (1L << (MASTER_SSL - 387)) | (1L << (MASTER_SSL_CA - 387)) | (1L << (MASTER_SSL_CAPATH - 387)) | (1L << (MASTER_SSL_CERT - 387)) | (1L << (MASTER_SSL_CIPHER - 387)) | (1L << (MASTER_SSL_CRL - 387)) | (1L << (MASTER_SSL_CRLPATH - 387)) | (1L << (MASTER_SSL_KEY - 387)) | (1L << (MASTER_TLS_VERSION - 387)) | (1L << (MASTER_USER - 387)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 387)) | (1L << (MAX_QUERIES_PER_HOUR - 387)) | (1L << (MAX_ROWS - 387)) | (1L << (MAX_SIZE - 387)) | (1L << (MAX_UPDATES_PER_HOUR - 387)) | (1L << (MAX_USER_CONNECTIONS - 387)) | (1L << (MEDIUM - 387)) | (1L << (MERGE - 387)) | (1L << (MESSAGE_TEXT - 387)) | (1L << (MID - 387)) | (1L << (MIGRATE - 387)) | (1L << (MIN_ROWS - 387)) | (1L << (MODE - 387)) | (1L << (MODIFY - 387)) | (1L << (MUTEX - 387)) | (1L << (MYSQL - 387)) | (1L << (MYSQL_ERRNO - 387)) | (1L << (NAME - 387)) | (1L << (NAMES - 387)) | (1L << (NCHAR - 387)) | (1L << (NEVER - 387)) | (1L << (NEXT - 387)) | (1L << (NO - 387)) | (1L << (NODEGROUP - 387)) | (1L << (NONE - 387)) | (1L << (OFFLINE - 387)) | (1L << (OFFSET - 387)) | (1L << (OJ - 387)) | (1L << (OLD_PASSWORD - 387)) | (1L << (ONE - 387)) | (1L << (ONLINE - 387)) | (1L << (ONLY - 387)) | (1L << (OPEN - 387)) | (1L << (OPTIMIZER_COSTS - 387)) | (1L << (OPTIONS - 387)) | (1L << (OWNER - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PAGE - 451)) | (1L << (PARSER - 451)) | (1L << (PARTIAL - 451)) | (1L << (PARTITIONING - 451)) | (1L << (PARTITIONS - 451)) | (1L << (PASSWORD - 451)) | (1L << (PHASE - 451)) | (1L << (PLUGIN - 451)) | (1L << (PLUGIN_DIR - 451)) | (1L << (PLUGINS - 451)) | (1L << (PORT - 451)) | (1L << (PRECEDES - 451)) | (1L << (PREPARE - 451)) | (1L << (PRESERVE - 451)) | (1L << (PREV - 451)) | (1L << (PROCESSLIST - 451)) | (1L << (PROFILE - 451)) | (1L << (PROFILES - 451)) | (1L << (PROXY - 451)) | (1L << (QUERY - 451)) | (1L << (QUICK - 451)) | (1L << (REBUILD - 451)) | (1L << (RECOVER - 451)) | (1L << (REDO_BUFFER_SIZE - 451)) | (1L << (REDUNDANT - 451)) | (1L << (RELAY - 451)) | (1L << (RELAY_LOG_FILE - 451)) | (1L << (RELAY_LOG_POS - 451)) | (1L << (RELAYLOG - 451)) | (1L << (REMOVE - 451)) | (1L << (REORGANIZE - 451)) | (1L << (REPAIR - 451)) | (1L << (REPLICATE_DO_DB - 451)) | (1L << (REPLICATE_DO_TABLE - 451)) | (1L << (REPLICATE_IGNORE_DB - 451)) | (1L << (REPLICATE_IGNORE_TABLE - 451)) | (1L << (REPLICATE_REWRITE_DB - 451)) | (1L << (REPLICATE_WILD_DO_TABLE - 451)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 451)) | (1L << (REPLICATION - 451)) | (1L << (RESET - 451)) | (1L << (RESUME - 451)) | (1L << (RETURNED_SQLSTATE - 451)) | (1L << (RETURNS - 451)) | (1L << (ROLLBACK - 451)) | (1L << (ROLLUP - 451)) | (1L << (ROTATE - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (ROW_FORMAT - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SCHEDULE - 451)) | (1L << (SECURITY - 451)) | (1L << (SERVER - 451)) | (1L << (SESSION - 451)) | (1L << (SHARE - 451)) | (1L << (SHARED - 451)) | (1L << (SIGNED - 451)) | (1L << (SIMPLE - 451)) | (1L << (SLAVE - 451)) | (1L << (SLOW - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOCKET - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SOME - 515)) | (1L << (SONAME - 515)) | (1L << (SOUNDS - 515)) | (1L << (SOURCE - 515)) | (1L << (SQL_AFTER_GTIDS - 515)) | (1L << (SQL_AFTER_MTS_GAPS - 515)) | (1L << (SQL_BEFORE_GTIDS - 515)) | (1L << (SQL_BUFFER_RESULT - 515)) | (1L << (SQL_CACHE - 515)) | (1L << (SQL_NO_CACHE - 515)) | (1L << (SQL_THREAD - 515)) | (1L << (START - 515)) | (1L << (STARTS - 515)) | (1L << (STATS_AUTO_RECALC - 515)) | (1L << (STATS_PERSISTENT - 515)) | (1L << (STATS_SAMPLE_PAGES - 515)) | (1L << (STATUS - 515)) | (1L << (STOP - 515)) | (1L << (STORAGE - 515)) | (1L << (STRING - 515)) | (1L << (SUBCLASS_ORIGIN - 515)) | (1L << (SUBJECT - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBPARTITIONS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SWAPS - 515)) | (1L << (SWITCHES - 515)) | (1L << (TABLE_NAME - 515)) | (1L << (TABLESPACE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TEMPTABLE - 515)) | (1L << (THAN - 515)) | (1L << (TRADITIONAL - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRIGGERS - 515)) | (1L << (TRUNCATE - 515)) | (1L << (UNDEFINED - 515)) | (1L << (UNDOFILE - 515)) | (1L << (UNDO_BUFFER_SIZE - 515)) | (1L << (UNINSTALL - 515)) | (1L << (UNKNOWN - 515)) | (1L << (UNTIL - 515)) | (1L << (UPGRADE - 515)) | (1L << (USER - 515)) | (1L << (USE_FRM - 515)) | (1L << (USER_RESOURCES - 515)) | (1L << (VALIDATION - 515)) | (1L << (VALUE - 515)) | (1L << (VARIABLES - 515)) | (1L << (VIEW - 515)) | (1L << (VISIBLE - 515)) | (1L << (WAIT - 515)) | (1L << (WARNINGS - 515)) | (1L << (WITHOUT - 515)) | (1L << (WORK - 515)) | (1L << (WRAPPER - 515)) | (1L << (X509 - 515)) | (1L << (XA - 515)) | (1L << (XML - 515)))) != 0) || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (INTERNAL - 580)) | (1L << (QUARTER - 580)) | (1L << (MONTH - 580)) | (1L << (DAY - 580)) | (1L << (HOUR - 580)) | (1L << (MINUTE - 580)) | (1L << (WEEK - 580)) | (1L << (SECOND - 580)) | (1L << (MICROSECOND - 580)) | (1L << (TABLES - 580)) | (1L << (ROUTINE - 580)) | (1L << (EXECUTE - 580)) | (1L << (FILE - 580)) | (1L << (PROCESS - 580)) | (1L << (RELOAD - 580)) | (1L << (SHUTDOWN - 580)) | (1L << (SUPER - 580)) | (1L << (PRIVILEGES - 580)) | (1L << (SESSION_VARIABLES_ADMIN - 580)) | (1L << (ARMSCII8 - 580)) | (1L << (ASCII - 580)) | (1L << (BIG5 - 580)) | (1L << (CP1250 - 580)) | (1L << (CP1251 - 580)) | (1L << (CP1256 - 580)) | (1L << (CP1257 - 580)) | (1L << (CP850 - 580)) | (1L << (CP852 - 580)) | (1L << (CP866 - 580)) | (1L << (CP932 - 580)) | (1L << (DEC8 - 580)) | (1L << (EUCJPMS - 580)) | (1L << (EUCKR - 580)) | (1L << (GB2312 - 580)) | (1L << (GBK - 580)) | (1L << (GEOSTD8 - 580)) | (1L << (GREEK - 580)) | (1L << (HEBREW - 580)) | (1L << (HP8 - 580)) | (1L << (KEYBCS2 - 580)) | (1L << (KOI8R - 580)) | (1L << (KOI8U - 580)) | (1L << (LATIN1 - 580)) | (1L << (LATIN2 - 580)) | (1L << (LATIN5 - 580)) | (1L << (LATIN7 - 580)) | (1L << (MACCE - 580)) | (1L << (MACROMAN - 580)) | (1L << (SJIS - 580)) | (1L << (SWE7 - 580)) | (1L << (TIS620 - 580)) | (1L << (UCS2 - 580)) | (1L << (UJIS - 580)) | (1L << (UTF16 - 580)) | (1L << (UTF16LE - 580)) | (1L << (UTF32 - 580)) | (1L << (UTF8 - 580)) | (1L << (UTF8MB3 - 580)) | (1L << (UTF8MB4 - 580)) | (1L << (ARCHIVE - 580)) | (1L << (BLACKHOLE - 580)) | (1L << (CSV - 580)) | (1L << (FEDERATED - 580)) | (1L << (INNODB - 580)))) != 0) || ((((_la - 644)) & ~0x3f) == 0 && ((1L << (_la - 644)) & ((1L << (MEMORY - 644)) | (1L << (MRG_MYISAM - 644)) | (1L << (MYISAM - 644)) | (1L << (NDB - 644)) | (1L << (NDBCLUSTER - 644)) | (1L << (PERFORMANCE_SCHEMA - 644)) | (1L << (TOKUDB - 644)) | (1L << (REPEATABLE - 644)) | (1L << (COMMITTED - 644)) | (1L << (UNCOMMITTED - 644)) | (1L << (SERIALIZABLE - 644)) | (1L << (GEOMETRYCOLLECTION - 644)) | (1L << (LINESTRING - 644)) | (1L << (MULTILINESTRING - 644)) | (1L << (MULTIPOINT - 644)) | (1L << (MULTIPOLYGON - 644)) | (1L << (POINT - 644)) | (1L << (POLYGON - 644)) | (1L << (ABS - 644)) | (1L << (ACOS - 644)) | (1L << (ADDDATE - 644)) | (1L << (ADDTIME - 644)) | (1L << (AES_DECRYPT - 644)) | (1L << (AES_ENCRYPT - 644)) | (1L << (AREA - 644)) | (1L << (ASBINARY - 644)) | (1L << (ASIN - 644)) | (1L << (ASTEXT - 644)) | (1L << (ASWKB - 644)) | (1L << (ASWKT - 644)) | (1L << (ASYMMETRIC_DECRYPT - 644)) | (1L << (ASYMMETRIC_DERIVE - 644)) | (1L << (ASYMMETRIC_ENCRYPT - 644)) | (1L << (ASYMMETRIC_SIGN - 644)) | (1L << (ASYMMETRIC_VERIFY - 644)) | (1L << (ATAN - 644)) | (1L << (ATAN2 - 644)) | (1L << (BENCHMARK - 644)) | (1L << (BIN - 644)) | (1L << (BIT_COUNT - 644)) | (1L << (BIT_LENGTH - 644)) | (1L << (BUFFER - 644)) | (1L << (CATALOG_NAME - 644)) | (1L << (CEIL - 644)) | (1L << (CEILING - 644)) | (1L << (CENTROID - 644)) | (1L << (CHARACTER_LENGTH - 644)) | (1L << (CHARSET - 644)) | (1L << (CHAR_LENGTH - 644)) | (1L << (COERCIBILITY - 644)) | (1L << (COLLATION - 644)) | (1L << (COMPRESS - 644)) | (1L << (CONCAT - 644)) | (1L << (CONCAT_WS - 644)) | (1L << (CONNECTION_ID - 644)) | (1L << (CONV - 644)) | (1L << (CONVERT_TZ - 644)) | (1L << (COS - 644)) | (1L << (COT - 644)) | (1L << (CRC32 - 644)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 644)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 644)))) != 0) || ((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (CREATE_DH_PARAMETERS - 708)) | (1L << (CREATE_DIGEST - 708)) | (1L << (CROSSES - 708)) | (1L << (DATEDIFF - 708)) | (1L << (DATE_FORMAT - 708)) | (1L << (DAYNAME - 708)) | (1L << (DAYOFMONTH - 708)) | (1L << (DAYOFWEEK - 708)) | (1L << (DAYOFYEAR - 708)) | (1L << (DECODE - 708)) | (1L << (DEGREES - 708)) | (1L << (DES_DECRYPT - 708)) | (1L << (DES_ENCRYPT - 708)) | (1L << (DIMENSION - 708)) | (1L << (DISJOINT - 708)) | (1L << (ELT - 708)) | (1L << (ENCODE - 708)) | (1L << (ENCRYPT - 708)) | (1L << (ENDPOINT - 708)) | (1L << (ENVELOPE - 708)) | (1L << (EQUALS - 708)) | (1L << (EXP - 708)) | (1L << (EXPORT_SET - 708)) | (1L << (EXTERIORRING - 708)) | (1L << (EXTRACTVALUE - 708)) | (1L << (FIELD - 708)) | (1L << (FIND_IN_SET - 708)) | (1L << (FLOOR - 708)) | (1L << (FORMAT - 708)) | (1L << (FOUND_ROWS - 708)) | (1L << (FROM_BASE64 - 708)) | (1L << (FROM_DAYS - 708)) | (1L << (FROM_UNIXTIME - 708)) | (1L << (GEOMCOLLFROMTEXT - 708)) | (1L << (GEOMCOLLFROMWKB - 708)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 708)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 708)) | (1L << (GEOMETRYFROMTEXT - 708)) | (1L << (GEOMETRYFROMWKB - 708)) | (1L << (GEOMETRYN - 708)) | (1L << (GEOMETRYTYPE - 708)) | (1L << (GEOMFROMTEXT - 708)) | (1L << (GEOMFROMWKB - 708)) | (1L << (GET_FORMAT - 708)) | (1L << (GET_LOCK - 708)) | (1L << (GLENGTH - 708)) | (1L << (GREATEST - 708)) | (1L << (GTID_SUBSET - 708)) | (1L << (GTID_SUBTRACT - 708)) | (1L << (HEX - 708)) | (1L << (IFNULL - 708)) | (1L << (INET6_ATON - 708)) | (1L << (INET6_NTOA - 708)) | (1L << (INET_ATON - 708)) | (1L << (INET_NTOA - 708)) | (1L << (INSTR - 708)) | (1L << (INTERIORRINGN - 708)) | (1L << (INTERSECTS - 708)) | (1L << (ISCLOSED - 708)) | (1L << (ISEMPTY - 708)) | (1L << (ISNULL - 708)) | (1L << (ISSIMPLE - 708)) | (1L << (IS_FREE_LOCK - 708)) | (1L << (IS_IPV4 - 708)))) != 0) || ((((_la - 772)) & ~0x3f) == 0 && ((1L << (_la - 772)) & ((1L << (IS_IPV4_COMPAT - 772)) | (1L << (IS_IPV4_MAPPED - 772)) | (1L << (IS_IPV6 - 772)) | (1L << (IS_USED_LOCK - 772)) | (1L << (LAST_INSERT_ID - 772)) | (1L << (LCASE - 772)) | (1L << (LEAST - 772)) | (1L << (LENGTH - 772)) | (1L << (LINEFROMTEXT - 772)) | (1L << (LINEFROMWKB - 772)) | (1L << (LINESTRINGFROMTEXT - 772)) | (1L << (LINESTRINGFROMWKB - 772)) | (1L << (LN - 772)) | (1L << (LOAD_FILE - 772)) | (1L << (LOCATE - 772)) | (1L << (LOG - 772)) | (1L << (LOG10 - 772)) | (1L << (LOG2 - 772)) | (1L << (LOWER - 772)) | (1L << (LPAD - 772)) | (1L << (LTRIM - 772)) | (1L << (MAKEDATE - 772)) | (1L << (MAKETIME - 772)) | (1L << (MAKE_SET - 772)) | (1L << (MASTER_POS_WAIT - 772)) | (1L << (MBRCONTAINS - 772)) | (1L << (MBRDISJOINT - 772)) | (1L << (MBREQUAL - 772)) | (1L << (MBRINTERSECTS - 772)) | (1L << (MBROVERLAPS - 772)) | (1L << (MBRTOUCHES - 772)) | (1L << (MBRWITHIN - 772)) | (1L << (MD5 - 772)) | (1L << (MLINEFROMTEXT - 772)) | (1L << (MLINEFROMWKB - 772)) | (1L << (MONTHNAME - 772)) | (1L << (MPOINTFROMTEXT - 772)) | (1L << (MPOINTFROMWKB - 772)) | (1L << (MPOLYFROMTEXT - 772)) | (1L << (MPOLYFROMWKB - 772)) | (1L << (MULTILINESTRINGFROMTEXT - 772)) | (1L << (MULTILINESTRINGFROMWKB - 772)) | (1L << (MULTIPOINTFROMTEXT - 772)) | (1L << (MULTIPOINTFROMWKB - 772)) | (1L << (MULTIPOLYGONFROMTEXT - 772)) | (1L << (MULTIPOLYGONFROMWKB - 772)) | (1L << (NAME_CONST - 772)) | (1L << (NULLIF - 772)) | (1L << (NUMGEOMETRIES - 772)) | (1L << (NUMINTERIORRINGS - 772)) | (1L << (NUMPOINTS - 772)) | (1L << (OCT - 772)) | (1L << (OCTET_LENGTH - 772)) | (1L << (ORD - 772)) | (1L << (OVERLAPS - 772)) | (1L << (PERIOD_ADD - 772)) | (1L << (PERIOD_DIFF - 772)) | (1L << (PI - 772)) | (1L << (POINTFROMTEXT - 772)) | (1L << (POINTFROMWKB - 772)) | (1L << (POINTN - 772)) | (1L << (POLYFROMTEXT - 772)) | (1L << (POLYFROMWKB - 772)) | (1L << (POLYGONFROMTEXT - 772)))) != 0) || ((((_la - 836)) & ~0x3f) == 0 && ((1L << (_la - 836)) & ((1L << (POLYGONFROMWKB - 836)) | (1L << (POW - 836)) | (1L << (POWER - 836)) | (1L << (QUOTE - 836)) | (1L << (RADIANS - 836)) | (1L << (RAND - 836)) | (1L << (RANDOM_BYTES - 836)) | (1L << (RELEASE_LOCK - 836)) | (1L << (REVERSE - 836)) | (1L << (ROUND - 836)) | (1L << (ROW_COUNT - 836)) | (1L << (RPAD - 836)) | (1L << (RTRIM - 836)) | (1L << (SEC_TO_TIME - 836)) | (1L << (SESSION_USER - 836)) | (1L << (SHA - 836)) | (1L << (SHA1 - 836)) | (1L << (SHA2 - 836)) | (1L << (SCHEMA_NAME - 836)) | (1L << (SIGN - 836)) | (1L << (SIN - 836)) | (1L << (SLEEP - 836)) | (1L << (SOUNDEX - 836)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 836)) | (1L << (SQRT - 836)) | (1L << (SRID - 836)) | (1L << (STARTPOINT - 836)) | (1L << (STRCMP - 836)) | (1L << (STR_TO_DATE - 836)) | (1L << (ST_AREA - 836)) | (1L << (ST_ASBINARY - 836)) | (1L << (ST_ASTEXT - 836)) | (1L << (ST_ASWKB - 836)) | (1L << (ST_ASWKT - 836)) | (1L << (ST_BUFFER - 836)) | (1L << (ST_CENTROID - 836)) | (1L << (ST_CONTAINS - 836)) | (1L << (ST_CROSSES - 836)) | (1L << (ST_DIFFERENCE - 836)) | (1L << (ST_DIMENSION - 836)) | (1L << (ST_DISJOINT - 836)) | (1L << (ST_DISTANCE - 836)) | (1L << (ST_ENDPOINT - 836)) | (1L << (ST_ENVELOPE - 836)) | (1L << (ST_EQUALS - 836)) | (1L << (ST_EXTERIORRING - 836)) | (1L << (ST_GEOMCOLLFROMTEXT - 836)) | (1L << (ST_GEOMCOLLFROMTXT - 836)) | (1L << (ST_GEOMCOLLFROMWKB - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 836)) | (1L << (ST_GEOMETRYFROMTEXT - 836)) | (1L << (ST_GEOMETRYFROMWKB - 836)) | (1L << (ST_GEOMETRYN - 836)) | (1L << (ST_GEOMETRYTYPE - 836)) | (1L << (ST_GEOMFROMTEXT - 836)) | (1L << (ST_GEOMFROMWKB - 836)) | (1L << (ST_INTERIORRINGN - 836)) | (1L << (ST_INTERSECTION - 836)) | (1L << (ST_INTERSECTS - 836)) | (1L << (ST_ISCLOSED - 836)) | (1L << (ST_ISEMPTY - 836)) | (1L << (ST_ISSIMPLE - 836)) | (1L << (ST_LINEFROMTEXT - 836)))) != 0) || ((((_la - 900)) & ~0x3f) == 0 && ((1L << (_la - 900)) & ((1L << (ST_LINEFROMWKB - 900)) | (1L << (ST_LINESTRINGFROMTEXT - 900)) | (1L << (ST_LINESTRINGFROMWKB - 900)) | (1L << (ST_NUMGEOMETRIES - 900)) | (1L << (ST_NUMINTERIORRING - 900)) | (1L << (ST_NUMINTERIORRINGS - 900)) | (1L << (ST_NUMPOINTS - 900)) | (1L << (ST_OVERLAPS - 900)) | (1L << (ST_POINTFROMTEXT - 900)) | (1L << (ST_POINTFROMWKB - 900)) | (1L << (ST_POINTN - 900)) | (1L << (ST_POLYFROMTEXT - 900)) | (1L << (ST_POLYFROMWKB - 900)) | (1L << (ST_POLYGONFROMTEXT - 900)) | (1L << (ST_POLYGONFROMWKB - 900)) | (1L << (ST_SRID - 900)) | (1L << (ST_STARTPOINT - 900)) | (1L << (ST_SYMDIFFERENCE - 900)) | (1L << (ST_TOUCHES - 900)) | (1L << (ST_UNION - 900)) | (1L << (ST_WITHIN - 900)) | (1L << (ST_X - 900)) | (1L << (ST_Y - 900)) | (1L << (SUBDATE - 900)) | (1L << (SUBSTRING_INDEX - 900)) | (1L << (SUBTIME - 900)) | (1L << (SYSTEM_USER - 900)) | (1L << (TAN - 900)) | (1L << (TIMEDIFF - 900)) | (1L << (TIMESTAMPADD - 900)) | (1L << (TIMESTAMPDIFF - 900)) | (1L << (TIME_FORMAT - 900)) | (1L << (TIME_TO_SEC - 900)) | (1L << (TOUCHES - 900)) | (1L << (TO_BASE64 - 900)) | (1L << (TO_DAYS - 900)) | (1L << (TO_SECONDS - 900)) | (1L << (UCASE - 900)) | (1L << (UNCOMPRESS - 900)) | (1L << (UNCOMPRESSED_LENGTH - 900)) | (1L << (UNHEX - 900)) | (1L << (UNIX_TIMESTAMP - 900)) | (1L << (UPDATEXML - 900)) | (1L << (UPPER - 900)) | (1L << (UUID - 900)) | (1L << (UUID_SHORT - 900)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 900)) | (1L << (VERSION - 900)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 900)) | (1L << (WEEKDAY - 900)) | (1L << (WEEKOFYEAR - 900)) | (1L << (WEIGHT_STRING - 900)) | (1L << (WITHIN - 900)) | (1L << (YEARWEEK - 900)) | (1L << (Y_FUNCTION - 900)) | (1L << (X_FUNCTION - 900)))) != 0) || ((((_la - 994)) & ~0x3f) == 0 && ((1L << (_la - 994)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 994)) | (1L << (STRING_LITERAL - 994)) | (1L << (ID - 994)) | (1L << (REVERSE_QUOTE_ID - 994)))) != 0))
                                {
                                    {
                                        State = 1484; ((UniqueKeyTableConstraintContext)_localctx).name = uid();
                                    }
                                }

                            }
                        }

                        State = 1489; Match(UNIQUE);
                        State = 1491;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == INDEX || _la == KEY)
                        {
                            {
                                State = 1490;
                                ((UniqueKeyTableConstraintContext)_localctx).indexFormat = TokenStream.LT(1);
                                _la = TokenStream.LA(1);
                                if (!(_la == INDEX || _la == KEY))
                                {
                                    ((UniqueKeyTableConstraintContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
                                }
                                else
                                {
                                    ErrorHandler.ReportMatch(this);
                                    Consume();
                                }
                            }
                        }

                        State = 1494;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)) | (1L << (POSITION - 191)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ACCOUNT - 259)) | (1L << (ACTION - 259)) | (1L << (AFTER - 259)) | (1L << (AGGREGATE - 259)) | (1L << (ALGORITHM - 259)) | (1L << (ANY - 259)) | (1L << (AT - 259)) | (1L << (AUTHORS - 259)) | (1L << (AUTOCOMMIT - 259)) | (1L << (AUTOEXTEND_SIZE - 259)) | (1L << (AUTO_INCREMENT - 259)) | (1L << (AVG_ROW_LENGTH - 259)) | (1L << (BEGIN - 259)) | (1L << (BINLOG - 259)) | (1L << (BIT - 259)) | (1L << (BLOCK - 259)) | (1L << (BOOL - 259)) | (1L << (BOOLEAN - 259)) | (1L << (BTREE - 259)) | (1L << (CACHE - 259)) | (1L << (CASCADED - 259)) | (1L << (CHAIN - 259)) | (1L << (CHANGED - 259)) | (1L << (CHANNEL - 259)) | (1L << (CHECKSUM - 259)) | (1L << (PAGE_CHECKSUM - 259)) | (1L << (CIPHER - 259)) | (1L << (CLASS_ORIGIN - 259)) | (1L << (CLIENT - 259)) | (1L << (CLOSE - 259)) | (1L << (COALESCE - 259)) | (1L << (CODE - 259)) | (1L << (COLUMNS - 259)) | (1L << (COLUMN_FORMAT - 259)) | (1L << (COLUMN_NAME - 259)) | (1L << (COMMENT - 259)) | (1L << (COMMIT - 259)) | (1L << (COMPACT - 259)) | (1L << (COMPLETION - 259)) | (1L << (COMPRESSED - 259)) | (1L << (COMPRESSION - 259)) | (1L << (CONCURRENT - 259)) | (1L << (CONNECTION - 259)) | (1L << (CONSISTENT - 259)) | (1L << (CONSTRAINT_CATALOG - 259)) | (1L << (CONSTRAINT_SCHEMA - 259)) | (1L << (CONSTRAINT_NAME - 259)) | (1L << (CONTAINS - 259)) | (1L << (CONTEXT - 259)) | (1L << (CONTRIBUTORS - 259)) | (1L << (COPY - 259)) | (1L << (CPU - 259)) | (1L << (CURSOR_NAME - 259)) | (1L << (DATA - 259)) | (1L << (DATAFILE - 259)) | (1L << (DEALLOCATE - 259)) | (1L << (DEFAULT_AUTH - 259)) | (1L << (DEFINER - 259)) | (1L << (DELAY_KEY_WRITE - 259)) | (1L << (DES_KEY_FILE - 259)) | (1L << (DIRECTORY - 259)) | (1L << (DISABLE - 259)) | (1L << (DISCARD - 259)) | (1L << (DISK - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (DO - 323)) | (1L << (DUMPFILE - 323)) | (1L << (DUPLICATE - 323)) | (1L << (DYNAMIC - 323)) | (1L << (ENABLE - 323)) | (1L << (ENCRYPTION - 323)) | (1L << (END - 323)) | (1L << (ENDS - 323)) | (1L << (ENGINE - 323)) | (1L << (ENGINES - 323)) | (1L << (ERROR - 323)) | (1L << (ERRORS - 323)) | (1L << (ESCAPE - 323)) | (1L << (EVEN - 323)) | (1L << (EVENT - 323)) | (1L << (EVENTS - 323)) | (1L << (EVERY - 323)) | (1L << (EXCHANGE - 323)) | (1L << (EXCLUSIVE - 323)) | (1L << (EXPIRE - 323)) | (1L << (EXPORT - 323)) | (1L << (EXTENDED - 323)) | (1L << (EXTENT_SIZE - 323)) | (1L << (FAST - 323)) | (1L << (FAULTS - 323)) | (1L << (FIELDS - 323)) | (1L << (FILE_BLOCK_SIZE - 323)) | (1L << (FILTER - 323)) | (1L << (FIRST - 323)) | (1L << (FIXED - 323)) | (1L << (FLUSH - 323)) | (1L << (FOLLOWS - 323)) | (1L << (FOUND - 323)) | (1L << (FULL - 323)) | (1L << (FUNCTION - 323)) | (1L << (GENERAL - 323)) | (1L << (GLOBAL - 323)) | (1L << (GRANTS - 323)) | (1L << (GROUP_REPLICATION - 323)) | (1L << (HANDLER - 323)) | (1L << (HASH - 323)) | (1L << (HELP - 323)) | (1L << (HOST - 323)) | (1L << (HOSTS - 323)) | (1L << (IDENTIFIED - 323)) | (1L << (IGNORE_SERVER_IDS - 323)) | (1L << (IMPORT - 323)) | (1L << (INDEXES - 323)) | (1L << (INITIAL_SIZE - 323)) | (1L << (INPLACE - 323)) | (1L << (INSERT_METHOD - 323)) | (1L << (INSTALL - 323)) | (1L << (INSTANCE - 323)) | (1L << (INVISIBLE - 323)) | (1L << (INVOKER - 323)) | (1L << (IO - 323)) | (1L << (IO_THREAD - 323)) | (1L << (IPC - 323)) | (1L << (ISOLATION - 323)) | (1L << (ISSUER - 323)) | (1L << (JSON - 323)) | (1L << (KEY_BLOCK_SIZE - 323)) | (1L << (LANGUAGE - 323)) | (1L << (LAST - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (LEAVES - 387)) | (1L << (LESS - 387)) | (1L << (LEVEL - 387)) | (1L << (LIST - 387)) | (1L << (LOCAL - 387)) | (1L << (LOGFILE - 387)) | (1L << (LOGS - 387)) | (1L << (MASTER - 387)) | (1L << (MASTER_AUTO_POSITION - 387)) | (1L << (MASTER_CONNECT_RETRY - 387)) | (1L << (MASTER_DELAY - 387)) | (1L << (MASTER_HEARTBEAT_PERIOD - 387)) | (1L << (MASTER_HOST - 387)) | (1L << (MASTER_LOG_FILE - 387)) | (1L << (MASTER_LOG_POS - 387)) | (1L << (MASTER_PASSWORD - 387)) | (1L << (MASTER_PORT - 387)) | (1L << (MASTER_RETRY_COUNT - 387)) | (1L << (MASTER_SSL - 387)) | (1L << (MASTER_SSL_CA - 387)) | (1L << (MASTER_SSL_CAPATH - 387)) | (1L << (MASTER_SSL_CERT - 387)) | (1L << (MASTER_SSL_CIPHER - 387)) | (1L << (MASTER_SSL_CRL - 387)) | (1L << (MASTER_SSL_CRLPATH - 387)) | (1L << (MASTER_SSL_KEY - 387)) | (1L << (MASTER_TLS_VERSION - 387)) | (1L << (MASTER_USER - 387)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 387)) | (1L << (MAX_QUERIES_PER_HOUR - 387)) | (1L << (MAX_ROWS - 387)) | (1L << (MAX_SIZE - 387)) | (1L << (MAX_UPDATES_PER_HOUR - 387)) | (1L << (MAX_USER_CONNECTIONS - 387)) | (1L << (MEDIUM - 387)) | (1L << (MERGE - 387)) | (1L << (MESSAGE_TEXT - 387)) | (1L << (MID - 387)) | (1L << (MIGRATE - 387)) | (1L << (MIN_ROWS - 387)) | (1L << (MODE - 387)) | (1L << (MODIFY - 387)) | (1L << (MUTEX - 387)) | (1L << (MYSQL - 387)) | (1L << (MYSQL_ERRNO - 387)) | (1L << (NAME - 387)) | (1L << (NAMES - 387)) | (1L << (NCHAR - 387)) | (1L << (NEVER - 387)) | (1L << (NEXT - 387)) | (1L << (NO - 387)) | (1L << (NODEGROUP - 387)) | (1L << (NONE - 387)) | (1L << (OFFLINE - 387)) | (1L << (OFFSET - 387)) | (1L << (OJ - 387)) | (1L << (OLD_PASSWORD - 387)) | (1L << (ONE - 387)) | (1L << (ONLINE - 387)) | (1L << (ONLY - 387)) | (1L << (OPEN - 387)) | (1L << (OPTIMIZER_COSTS - 387)) | (1L << (OPTIONS - 387)) | (1L << (OWNER - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PAGE - 451)) | (1L << (PARSER - 451)) | (1L << (PARTIAL - 451)) | (1L << (PARTITIONING - 451)) | (1L << (PARTITIONS - 451)) | (1L << (PASSWORD - 451)) | (1L << (PHASE - 451)) | (1L << (PLUGIN - 451)) | (1L << (PLUGIN_DIR - 451)) | (1L << (PLUGINS - 451)) | (1L << (PORT - 451)) | (1L << (PRECEDES - 451)) | (1L << (PREPARE - 451)) | (1L << (PRESERVE - 451)) | (1L << (PREV - 451)) | (1L << (PROCESSLIST - 451)) | (1L << (PROFILE - 451)) | (1L << (PROFILES - 451)) | (1L << (PROXY - 451)) | (1L << (QUERY - 451)) | (1L << (QUICK - 451)) | (1L << (REBUILD - 451)) | (1L << (RECOVER - 451)) | (1L << (REDO_BUFFER_SIZE - 451)) | (1L << (REDUNDANT - 451)) | (1L << (RELAY - 451)) | (1L << (RELAY_LOG_FILE - 451)) | (1L << (RELAY_LOG_POS - 451)) | (1L << (RELAYLOG - 451)) | (1L << (REMOVE - 451)) | (1L << (REORGANIZE - 451)) | (1L << (REPAIR - 451)) | (1L << (REPLICATE_DO_DB - 451)) | (1L << (REPLICATE_DO_TABLE - 451)) | (1L << (REPLICATE_IGNORE_DB - 451)) | (1L << (REPLICATE_IGNORE_TABLE - 451)) | (1L << (REPLICATE_REWRITE_DB - 451)) | (1L << (REPLICATE_WILD_DO_TABLE - 451)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 451)) | (1L << (REPLICATION - 451)) | (1L << (RESET - 451)) | (1L << (RESUME - 451)) | (1L << (RETURNED_SQLSTATE - 451)) | (1L << (RETURNS - 451)) | (1L << (ROLLBACK - 451)) | (1L << (ROLLUP - 451)) | (1L << (ROTATE - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (ROW_FORMAT - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SCHEDULE - 451)) | (1L << (SECURITY - 451)) | (1L << (SERVER - 451)) | (1L << (SESSION - 451)) | (1L << (SHARE - 451)) | (1L << (SHARED - 451)) | (1L << (SIGNED - 451)) | (1L << (SIMPLE - 451)) | (1L << (SLAVE - 451)) | (1L << (SLOW - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOCKET - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SOME - 515)) | (1L << (SONAME - 515)) | (1L << (SOUNDS - 515)) | (1L << (SOURCE - 515)) | (1L << (SQL_AFTER_GTIDS - 515)) | (1L << (SQL_AFTER_MTS_GAPS - 515)) | (1L << (SQL_BEFORE_GTIDS - 515)) | (1L << (SQL_BUFFER_RESULT - 515)) | (1L << (SQL_CACHE - 515)) | (1L << (SQL_NO_CACHE - 515)) | (1L << (SQL_THREAD - 515)) | (1L << (START - 515)) | (1L << (STARTS - 515)) | (1L << (STATS_AUTO_RECALC - 515)) | (1L << (STATS_PERSISTENT - 515)) | (1L << (STATS_SAMPLE_PAGES - 515)) | (1L << (STATUS - 515)) | (1L << (STOP - 515)) | (1L << (STORAGE - 515)) | (1L << (STRING - 515)) | (1L << (SUBCLASS_ORIGIN - 515)) | (1L << (SUBJECT - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBPARTITIONS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SWAPS - 515)) | (1L << (SWITCHES - 515)) | (1L << (TABLE_NAME - 515)) | (1L << (TABLESPACE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TEMPTABLE - 515)) | (1L << (THAN - 515)) | (1L << (TRADITIONAL - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRIGGERS - 515)) | (1L << (TRUNCATE - 515)) | (1L << (UNDEFINED - 515)) | (1L << (UNDOFILE - 515)) | (1L << (UNDO_BUFFER_SIZE - 515)) | (1L << (UNINSTALL - 515)) | (1L << (UNKNOWN - 515)) | (1L << (UNTIL - 515)) | (1L << (UPGRADE - 515)) | (1L << (USER - 515)) | (1L << (USE_FRM - 515)) | (1L << (USER_RESOURCES - 515)) | (1L << (VALIDATION - 515)) | (1L << (VALUE - 515)) | (1L << (VARIABLES - 515)) | (1L << (VIEW - 515)) | (1L << (VISIBLE - 515)) | (1L << (WAIT - 515)) | (1L << (WARNINGS - 515)) | (1L << (WITHOUT - 515)) | (1L << (WORK - 515)) | (1L << (WRAPPER - 515)) | (1L << (X509 - 515)) | (1L << (XA - 515)) | (1L << (XML - 515)))) != 0) || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (INTERNAL - 580)) | (1L << (QUARTER - 580)) | (1L << (MONTH - 580)) | (1L << (DAY - 580)) | (1L << (HOUR - 580)) | (1L << (MINUTE - 580)) | (1L << (WEEK - 580)) | (1L << (SECOND - 580)) | (1L << (MICROSECOND - 580)) | (1L << (TABLES - 580)) | (1L << (ROUTINE - 580)) | (1L << (EXECUTE - 580)) | (1L << (FILE - 580)) | (1L << (PROCESS - 580)) | (1L << (RELOAD - 580)) | (1L << (SHUTDOWN - 580)) | (1L << (SUPER - 580)) | (1L << (PRIVILEGES - 580)) | (1L << (SESSION_VARIABLES_ADMIN - 580)) | (1L << (ARMSCII8 - 580)) | (1L << (ASCII - 580)) | (1L << (BIG5 - 580)) | (1L << (CP1250 - 580)) | (1L << (CP1251 - 580)) | (1L << (CP1256 - 580)) | (1L << (CP1257 - 580)) | (1L << (CP850 - 580)) | (1L << (CP852 - 580)) | (1L << (CP866 - 580)) | (1L << (CP932 - 580)) | (1L << (DEC8 - 580)) | (1L << (EUCJPMS - 580)) | (1L << (EUCKR - 580)) | (1L << (GB2312 - 580)) | (1L << (GBK - 580)) | (1L << (GEOSTD8 - 580)) | (1L << (GREEK - 580)) | (1L << (HEBREW - 580)) | (1L << (HP8 - 580)) | (1L << (KEYBCS2 - 580)) | (1L << (KOI8R - 580)) | (1L << (KOI8U - 580)) | (1L << (LATIN1 - 580)) | (1L << (LATIN2 - 580)) | (1L << (LATIN5 - 580)) | (1L << (LATIN7 - 580)) | (1L << (MACCE - 580)) | (1L << (MACROMAN - 580)) | (1L << (SJIS - 580)) | (1L << (SWE7 - 580)) | (1L << (TIS620 - 580)) | (1L << (UCS2 - 580)) | (1L << (UJIS - 580)) | (1L << (UTF16 - 580)) | (1L << (UTF16LE - 580)) | (1L << (UTF32 - 580)) | (1L << (UTF8 - 580)) | (1L << (UTF8MB3 - 580)) | (1L << (UTF8MB4 - 580)) | (1L << (ARCHIVE - 580)) | (1L << (BLACKHOLE - 580)) | (1L << (CSV - 580)) | (1L << (FEDERATED - 580)) | (1L << (INNODB - 580)))) != 0) || ((((_la - 644)) & ~0x3f) == 0 && ((1L << (_la - 644)) & ((1L << (MEMORY - 644)) | (1L << (MRG_MYISAM - 644)) | (1L << (MYISAM - 644)) | (1L << (NDB - 644)) | (1L << (NDBCLUSTER - 644)) | (1L << (PERFORMANCE_SCHEMA - 644)) | (1L << (TOKUDB - 644)) | (1L << (REPEATABLE - 644)) | (1L << (COMMITTED - 644)) | (1L << (UNCOMMITTED - 644)) | (1L << (SERIALIZABLE - 644)) | (1L << (GEOMETRYCOLLECTION - 644)) | (1L << (LINESTRING - 644)) | (1L << (MULTILINESTRING - 644)) | (1L << (MULTIPOINT - 644)) | (1L << (MULTIPOLYGON - 644)) | (1L << (POINT - 644)) | (1L << (POLYGON - 644)) | (1L << (ABS - 644)) | (1L << (ACOS - 644)) | (1L << (ADDDATE - 644)) | (1L << (ADDTIME - 644)) | (1L << (AES_DECRYPT - 644)) | (1L << (AES_ENCRYPT - 644)) | (1L << (AREA - 644)) | (1L << (ASBINARY - 644)) | (1L << (ASIN - 644)) | (1L << (ASTEXT - 644)) | (1L << (ASWKB - 644)) | (1L << (ASWKT - 644)) | (1L << (ASYMMETRIC_DECRYPT - 644)) | (1L << (ASYMMETRIC_DERIVE - 644)) | (1L << (ASYMMETRIC_ENCRYPT - 644)) | (1L << (ASYMMETRIC_SIGN - 644)) | (1L << (ASYMMETRIC_VERIFY - 644)) | (1L << (ATAN - 644)) | (1L << (ATAN2 - 644)) | (1L << (BENCHMARK - 644)) | (1L << (BIN - 644)) | (1L << (BIT_COUNT - 644)) | (1L << (BIT_LENGTH - 644)) | (1L << (BUFFER - 644)) | (1L << (CATALOG_NAME - 644)) | (1L << (CEIL - 644)) | (1L << (CEILING - 644)) | (1L << (CENTROID - 644)) | (1L << (CHARACTER_LENGTH - 644)) | (1L << (CHARSET - 644)) | (1L << (CHAR_LENGTH - 644)) | (1L << (COERCIBILITY - 644)) | (1L << (COLLATION - 644)) | (1L << (COMPRESS - 644)) | (1L << (CONCAT - 644)) | (1L << (CONCAT_WS - 644)) | (1L << (CONNECTION_ID - 644)) | (1L << (CONV - 644)) | (1L << (CONVERT_TZ - 644)) | (1L << (COS - 644)) | (1L << (COT - 644)) | (1L << (CRC32 - 644)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 644)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 644)))) != 0) || ((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (CREATE_DH_PARAMETERS - 708)) | (1L << (CREATE_DIGEST - 708)) | (1L << (CROSSES - 708)) | (1L << (DATEDIFF - 708)) | (1L << (DATE_FORMAT - 708)) | (1L << (DAYNAME - 708)) | (1L << (DAYOFMONTH - 708)) | (1L << (DAYOFWEEK - 708)) | (1L << (DAYOFYEAR - 708)) | (1L << (DECODE - 708)) | (1L << (DEGREES - 708)) | (1L << (DES_DECRYPT - 708)) | (1L << (DES_ENCRYPT - 708)) | (1L << (DIMENSION - 708)) | (1L << (DISJOINT - 708)) | (1L << (ELT - 708)) | (1L << (ENCODE - 708)) | (1L << (ENCRYPT - 708)) | (1L << (ENDPOINT - 708)) | (1L << (ENVELOPE - 708)) | (1L << (EQUALS - 708)) | (1L << (EXP - 708)) | (1L << (EXPORT_SET - 708)) | (1L << (EXTERIORRING - 708)) | (1L << (EXTRACTVALUE - 708)) | (1L << (FIELD - 708)) | (1L << (FIND_IN_SET - 708)) | (1L << (FLOOR - 708)) | (1L << (FORMAT - 708)) | (1L << (FOUND_ROWS - 708)) | (1L << (FROM_BASE64 - 708)) | (1L << (FROM_DAYS - 708)) | (1L << (FROM_UNIXTIME - 708)) | (1L << (GEOMCOLLFROMTEXT - 708)) | (1L << (GEOMCOLLFROMWKB - 708)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 708)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 708)) | (1L << (GEOMETRYFROMTEXT - 708)) | (1L << (GEOMETRYFROMWKB - 708)) | (1L << (GEOMETRYN - 708)) | (1L << (GEOMETRYTYPE - 708)) | (1L << (GEOMFROMTEXT - 708)) | (1L << (GEOMFROMWKB - 708)) | (1L << (GET_FORMAT - 708)) | (1L << (GET_LOCK - 708)) | (1L << (GLENGTH - 708)) | (1L << (GREATEST - 708)) | (1L << (GTID_SUBSET - 708)) | (1L << (GTID_SUBTRACT - 708)) | (1L << (HEX - 708)) | (1L << (IFNULL - 708)) | (1L << (INET6_ATON - 708)) | (1L << (INET6_NTOA - 708)) | (1L << (INET_ATON - 708)) | (1L << (INET_NTOA - 708)) | (1L << (INSTR - 708)) | (1L << (INTERIORRINGN - 708)) | (1L << (INTERSECTS - 708)) | (1L << (ISCLOSED - 708)) | (1L << (ISEMPTY - 708)) | (1L << (ISNULL - 708)) | (1L << (ISSIMPLE - 708)) | (1L << (IS_FREE_LOCK - 708)) | (1L << (IS_IPV4 - 708)))) != 0) || ((((_la - 772)) & ~0x3f) == 0 && ((1L << (_la - 772)) & ((1L << (IS_IPV4_COMPAT - 772)) | (1L << (IS_IPV4_MAPPED - 772)) | (1L << (IS_IPV6 - 772)) | (1L << (IS_USED_LOCK - 772)) | (1L << (LAST_INSERT_ID - 772)) | (1L << (LCASE - 772)) | (1L << (LEAST - 772)) | (1L << (LENGTH - 772)) | (1L << (LINEFROMTEXT - 772)) | (1L << (LINEFROMWKB - 772)) | (1L << (LINESTRINGFROMTEXT - 772)) | (1L << (LINESTRINGFROMWKB - 772)) | (1L << (LN - 772)) | (1L << (LOAD_FILE - 772)) | (1L << (LOCATE - 772)) | (1L << (LOG - 772)) | (1L << (LOG10 - 772)) | (1L << (LOG2 - 772)) | (1L << (LOWER - 772)) | (1L << (LPAD - 772)) | (1L << (LTRIM - 772)) | (1L << (MAKEDATE - 772)) | (1L << (MAKETIME - 772)) | (1L << (MAKE_SET - 772)) | (1L << (MASTER_POS_WAIT - 772)) | (1L << (MBRCONTAINS - 772)) | (1L << (MBRDISJOINT - 772)) | (1L << (MBREQUAL - 772)) | (1L << (MBRINTERSECTS - 772)) | (1L << (MBROVERLAPS - 772)) | (1L << (MBRTOUCHES - 772)) | (1L << (MBRWITHIN - 772)) | (1L << (MD5 - 772)) | (1L << (MLINEFROMTEXT - 772)) | (1L << (MLINEFROMWKB - 772)) | (1L << (MONTHNAME - 772)) | (1L << (MPOINTFROMTEXT - 772)) | (1L << (MPOINTFROMWKB - 772)) | (1L << (MPOLYFROMTEXT - 772)) | (1L << (MPOLYFROMWKB - 772)) | (1L << (MULTILINESTRINGFROMTEXT - 772)) | (1L << (MULTILINESTRINGFROMWKB - 772)) | (1L << (MULTIPOINTFROMTEXT - 772)) | (1L << (MULTIPOINTFROMWKB - 772)) | (1L << (MULTIPOLYGONFROMTEXT - 772)) | (1L << (MULTIPOLYGONFROMWKB - 772)) | (1L << (NAME_CONST - 772)) | (1L << (NULLIF - 772)) | (1L << (NUMGEOMETRIES - 772)) | (1L << (NUMINTERIORRINGS - 772)) | (1L << (NUMPOINTS - 772)) | (1L << (OCT - 772)) | (1L << (OCTET_LENGTH - 772)) | (1L << (ORD - 772)) | (1L << (OVERLAPS - 772)) | (1L << (PERIOD_ADD - 772)) | (1L << (PERIOD_DIFF - 772)) | (1L << (PI - 772)) | (1L << (POINTFROMTEXT - 772)) | (1L << (POINTFROMWKB - 772)) | (1L << (POINTN - 772)) | (1L << (POLYFROMTEXT - 772)) | (1L << (POLYFROMWKB - 772)) | (1L << (POLYGONFROMTEXT - 772)))) != 0) || ((((_la - 836)) & ~0x3f) == 0 && ((1L << (_la - 836)) & ((1L << (POLYGONFROMWKB - 836)) | (1L << (POW - 836)) | (1L << (POWER - 836)) | (1L << (QUOTE - 836)) | (1L << (RADIANS - 836)) | (1L << (RAND - 836)) | (1L << (RANDOM_BYTES - 836)) | (1L << (RELEASE_LOCK - 836)) | (1L << (REVERSE - 836)) | (1L << (ROUND - 836)) | (1L << (ROW_COUNT - 836)) | (1L << (RPAD - 836)) | (1L << (RTRIM - 836)) | (1L << (SEC_TO_TIME - 836)) | (1L << (SESSION_USER - 836)) | (1L << (SHA - 836)) | (1L << (SHA1 - 836)) | (1L << (SHA2 - 836)) | (1L << (SCHEMA_NAME - 836)) | (1L << (SIGN - 836)) | (1L << (SIN - 836)) | (1L << (SLEEP - 836)) | (1L << (SOUNDEX - 836)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 836)) | (1L << (SQRT - 836)) | (1L << (SRID - 836)) | (1L << (STARTPOINT - 836)) | (1L << (STRCMP - 836)) | (1L << (STR_TO_DATE - 836)) | (1L << (ST_AREA - 836)) | (1L << (ST_ASBINARY - 836)) | (1L << (ST_ASTEXT - 836)) | (1L << (ST_ASWKB - 836)) | (1L << (ST_ASWKT - 836)) | (1L << (ST_BUFFER - 836)) | (1L << (ST_CENTROID - 836)) | (1L << (ST_CONTAINS - 836)) | (1L << (ST_CROSSES - 836)) | (1L << (ST_DIFFERENCE - 836)) | (1L << (ST_DIMENSION - 836)) | (1L << (ST_DISJOINT - 836)) | (1L << (ST_DISTANCE - 836)) | (1L << (ST_ENDPOINT - 836)) | (1L << (ST_ENVELOPE - 836)) | (1L << (ST_EQUALS - 836)) | (1L << (ST_EXTERIORRING - 836)) | (1L << (ST_GEOMCOLLFROMTEXT - 836)) | (1L << (ST_GEOMCOLLFROMTXT - 836)) | (1L << (ST_GEOMCOLLFROMWKB - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 836)) | (1L << (ST_GEOMETRYFROMTEXT - 836)) | (1L << (ST_GEOMETRYFROMWKB - 836)) | (1L << (ST_GEOMETRYN - 836)) | (1L << (ST_GEOMETRYTYPE - 836)) | (1L << (ST_GEOMFROMTEXT - 836)) | (1L << (ST_GEOMFROMWKB - 836)) | (1L << (ST_INTERIORRINGN - 836)) | (1L << (ST_INTERSECTION - 836)) | (1L << (ST_INTERSECTS - 836)) | (1L << (ST_ISCLOSED - 836)) | (1L << (ST_ISEMPTY - 836)) | (1L << (ST_ISSIMPLE - 836)) | (1L << (ST_LINEFROMTEXT - 836)))) != 0) || ((((_la - 900)) & ~0x3f) == 0 && ((1L << (_la - 900)) & ((1L << (ST_LINEFROMWKB - 900)) | (1L << (ST_LINESTRINGFROMTEXT - 900)) | (1L << (ST_LINESTRINGFROMWKB - 900)) | (1L << (ST_NUMGEOMETRIES - 900)) | (1L << (ST_NUMINTERIORRING - 900)) | (1L << (ST_NUMINTERIORRINGS - 900)) | (1L << (ST_NUMPOINTS - 900)) | (1L << (ST_OVERLAPS - 900)) | (1L << (ST_POINTFROMTEXT - 900)) | (1L << (ST_POINTFROMWKB - 900)) | (1L << (ST_POINTN - 900)) | (1L << (ST_POLYFROMTEXT - 900)) | (1L << (ST_POLYFROMWKB - 900)) | (1L << (ST_POLYGONFROMTEXT - 900)) | (1L << (ST_POLYGONFROMWKB - 900)) | (1L << (ST_SRID - 900)) | (1L << (ST_STARTPOINT - 900)) | (1L << (ST_SYMDIFFERENCE - 900)) | (1L << (ST_TOUCHES - 900)) | (1L << (ST_UNION - 900)) | (1L << (ST_WITHIN - 900)) | (1L << (ST_X - 900)) | (1L << (ST_Y - 900)) | (1L << (SUBDATE - 900)) | (1L << (SUBSTRING_INDEX - 900)) | (1L << (SUBTIME - 900)) | (1L << (SYSTEM_USER - 900)) | (1L << (TAN - 900)) | (1L << (TIMEDIFF - 900)) | (1L << (TIMESTAMPADD - 900)) | (1L << (TIMESTAMPDIFF - 900)) | (1L << (TIME_FORMAT - 900)) | (1L << (TIME_TO_SEC - 900)) | (1L << (TOUCHES - 900)) | (1L << (TO_BASE64 - 900)) | (1L << (TO_DAYS - 900)) | (1L << (TO_SECONDS - 900)) | (1L << (UCASE - 900)) | (1L << (UNCOMPRESS - 900)) | (1L << (UNCOMPRESSED_LENGTH - 900)) | (1L << (UNHEX - 900)) | (1L << (UNIX_TIMESTAMP - 900)) | (1L << (UPDATEXML - 900)) | (1L << (UPPER - 900)) | (1L << (UUID - 900)) | (1L << (UUID_SHORT - 900)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 900)) | (1L << (VERSION - 900)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 900)) | (1L << (WEEKDAY - 900)) | (1L << (WEEKOFYEAR - 900)) | (1L << (WEIGHT_STRING - 900)) | (1L << (WITHIN - 900)) | (1L << (YEARWEEK - 900)) | (1L << (Y_FUNCTION - 900)) | (1L << (X_FUNCTION - 900)))) != 0) || ((((_la - 994)) & ~0x3f) == 0 && ((1L << (_la - 994)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 994)) | (1L << (STRING_LITERAL - 994)) | (1L << (ID - 994)) | (1L << (REVERSE_QUOTE_ID - 994)))) != 0))
                        {
                            {
                                State = 1493; ((UniqueKeyTableConstraintContext)_localctx).index = uid();
                            }
                        }

                        State = 1497;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == USING)
                        {
                            {
                                State = 1496; indexType();
                            }
                        }

                        State = 1499; indexColumnNames();
                        State = 1503;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        while (_la == USING || _la == WITH || _la == COMMENT || _la == INVISIBLE || _la == KEY_BLOCK_SIZE || _la == VISIBLE)
                        {
                            {
                                {
                                    State = 1500; indexOption();
                                }
                            }
                            State = 1505;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                        }
                    }
                    break;
                case 3:
                    _localctx = new ForeignKeyTableConstraintContext(_localctx);
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 1510;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == CONSTRAINT)
                        {
                            {
                                State = 1506; Match(CONSTRAINT);
                                State = 1508;
                                ErrorHandler.Sync(this);
                                _la = TokenStream.LA(1);
                                if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)) | (1L << (POSITION - 191)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ACCOUNT - 259)) | (1L << (ACTION - 259)) | (1L << (AFTER - 259)) | (1L << (AGGREGATE - 259)) | (1L << (ALGORITHM - 259)) | (1L << (ANY - 259)) | (1L << (AT - 259)) | (1L << (AUTHORS - 259)) | (1L << (AUTOCOMMIT - 259)) | (1L << (AUTOEXTEND_SIZE - 259)) | (1L << (AUTO_INCREMENT - 259)) | (1L << (AVG_ROW_LENGTH - 259)) | (1L << (BEGIN - 259)) | (1L << (BINLOG - 259)) | (1L << (BIT - 259)) | (1L << (BLOCK - 259)) | (1L << (BOOL - 259)) | (1L << (BOOLEAN - 259)) | (1L << (BTREE - 259)) | (1L << (CACHE - 259)) | (1L << (CASCADED - 259)) | (1L << (CHAIN - 259)) | (1L << (CHANGED - 259)) | (1L << (CHANNEL - 259)) | (1L << (CHECKSUM - 259)) | (1L << (PAGE_CHECKSUM - 259)) | (1L << (CIPHER - 259)) | (1L << (CLASS_ORIGIN - 259)) | (1L << (CLIENT - 259)) | (1L << (CLOSE - 259)) | (1L << (COALESCE - 259)) | (1L << (CODE - 259)) | (1L << (COLUMNS - 259)) | (1L << (COLUMN_FORMAT - 259)) | (1L << (COLUMN_NAME - 259)) | (1L << (COMMENT - 259)) | (1L << (COMMIT - 259)) | (1L << (COMPACT - 259)) | (1L << (COMPLETION - 259)) | (1L << (COMPRESSED - 259)) | (1L << (COMPRESSION - 259)) | (1L << (CONCURRENT - 259)) | (1L << (CONNECTION - 259)) | (1L << (CONSISTENT - 259)) | (1L << (CONSTRAINT_CATALOG - 259)) | (1L << (CONSTRAINT_SCHEMA - 259)) | (1L << (CONSTRAINT_NAME - 259)) | (1L << (CONTAINS - 259)) | (1L << (CONTEXT - 259)) | (1L << (CONTRIBUTORS - 259)) | (1L << (COPY - 259)) | (1L << (CPU - 259)) | (1L << (CURSOR_NAME - 259)) | (1L << (DATA - 259)) | (1L << (DATAFILE - 259)) | (1L << (DEALLOCATE - 259)) | (1L << (DEFAULT_AUTH - 259)) | (1L << (DEFINER - 259)) | (1L << (DELAY_KEY_WRITE - 259)) | (1L << (DES_KEY_FILE - 259)) | (1L << (DIRECTORY - 259)) | (1L << (DISABLE - 259)) | (1L << (DISCARD - 259)) | (1L << (DISK - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (DO - 323)) | (1L << (DUMPFILE - 323)) | (1L << (DUPLICATE - 323)) | (1L << (DYNAMIC - 323)) | (1L << (ENABLE - 323)) | (1L << (ENCRYPTION - 323)) | (1L << (END - 323)) | (1L << (ENDS - 323)) | (1L << (ENGINE - 323)) | (1L << (ENGINES - 323)) | (1L << (ERROR - 323)) | (1L << (ERRORS - 323)) | (1L << (ESCAPE - 323)) | (1L << (EVEN - 323)) | (1L << (EVENT - 323)) | (1L << (EVENTS - 323)) | (1L << (EVERY - 323)) | (1L << (EXCHANGE - 323)) | (1L << (EXCLUSIVE - 323)) | (1L << (EXPIRE - 323)) | (1L << (EXPORT - 323)) | (1L << (EXTENDED - 323)) | (1L << (EXTENT_SIZE - 323)) | (1L << (FAST - 323)) | (1L << (FAULTS - 323)) | (1L << (FIELDS - 323)) | (1L << (FILE_BLOCK_SIZE - 323)) | (1L << (FILTER - 323)) | (1L << (FIRST - 323)) | (1L << (FIXED - 323)) | (1L << (FLUSH - 323)) | (1L << (FOLLOWS - 323)) | (1L << (FOUND - 323)) | (1L << (FULL - 323)) | (1L << (FUNCTION - 323)) | (1L << (GENERAL - 323)) | (1L << (GLOBAL - 323)) | (1L << (GRANTS - 323)) | (1L << (GROUP_REPLICATION - 323)) | (1L << (HANDLER - 323)) | (1L << (HASH - 323)) | (1L << (HELP - 323)) | (1L << (HOST - 323)) | (1L << (HOSTS - 323)) | (1L << (IDENTIFIED - 323)) | (1L << (IGNORE_SERVER_IDS - 323)) | (1L << (IMPORT - 323)) | (1L << (INDEXES - 323)) | (1L << (INITIAL_SIZE - 323)) | (1L << (INPLACE - 323)) | (1L << (INSERT_METHOD - 323)) | (1L << (INSTALL - 323)) | (1L << (INSTANCE - 323)) | (1L << (INVISIBLE - 323)) | (1L << (INVOKER - 323)) | (1L << (IO - 323)) | (1L << (IO_THREAD - 323)) | (1L << (IPC - 323)) | (1L << (ISOLATION - 323)) | (1L << (ISSUER - 323)) | (1L << (JSON - 323)) | (1L << (KEY_BLOCK_SIZE - 323)) | (1L << (LANGUAGE - 323)) | (1L << (LAST - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (LEAVES - 387)) | (1L << (LESS - 387)) | (1L << (LEVEL - 387)) | (1L << (LIST - 387)) | (1L << (LOCAL - 387)) | (1L << (LOGFILE - 387)) | (1L << (LOGS - 387)) | (1L << (MASTER - 387)) | (1L << (MASTER_AUTO_POSITION - 387)) | (1L << (MASTER_CONNECT_RETRY - 387)) | (1L << (MASTER_DELAY - 387)) | (1L << (MASTER_HEARTBEAT_PERIOD - 387)) | (1L << (MASTER_HOST - 387)) | (1L << (MASTER_LOG_FILE - 387)) | (1L << (MASTER_LOG_POS - 387)) | (1L << (MASTER_PASSWORD - 387)) | (1L << (MASTER_PORT - 387)) | (1L << (MASTER_RETRY_COUNT - 387)) | (1L << (MASTER_SSL - 387)) | (1L << (MASTER_SSL_CA - 387)) | (1L << (MASTER_SSL_CAPATH - 387)) | (1L << (MASTER_SSL_CERT - 387)) | (1L << (MASTER_SSL_CIPHER - 387)) | (1L << (MASTER_SSL_CRL - 387)) | (1L << (MASTER_SSL_CRLPATH - 387)) | (1L << (MASTER_SSL_KEY - 387)) | (1L << (MASTER_TLS_VERSION - 387)) | (1L << (MASTER_USER - 387)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 387)) | (1L << (MAX_QUERIES_PER_HOUR - 387)) | (1L << (MAX_ROWS - 387)) | (1L << (MAX_SIZE - 387)) | (1L << (MAX_UPDATES_PER_HOUR - 387)) | (1L << (MAX_USER_CONNECTIONS - 387)) | (1L << (MEDIUM - 387)) | (1L << (MERGE - 387)) | (1L << (MESSAGE_TEXT - 387)) | (1L << (MID - 387)) | (1L << (MIGRATE - 387)) | (1L << (MIN_ROWS - 387)) | (1L << (MODE - 387)) | (1L << (MODIFY - 387)) | (1L << (MUTEX - 387)) | (1L << (MYSQL - 387)) | (1L << (MYSQL_ERRNO - 387)) | (1L << (NAME - 387)) | (1L << (NAMES - 387)) | (1L << (NCHAR - 387)) | (1L << (NEVER - 387)) | (1L << (NEXT - 387)) | (1L << (NO - 387)) | (1L << (NODEGROUP - 387)) | (1L << (NONE - 387)) | (1L << (OFFLINE - 387)) | (1L << (OFFSET - 387)) | (1L << (OJ - 387)) | (1L << (OLD_PASSWORD - 387)) | (1L << (ONE - 387)) | (1L << (ONLINE - 387)) | (1L << (ONLY - 387)) | (1L << (OPEN - 387)) | (1L << (OPTIMIZER_COSTS - 387)) | (1L << (OPTIONS - 387)) | (1L << (OWNER - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PAGE - 451)) | (1L << (PARSER - 451)) | (1L << (PARTIAL - 451)) | (1L << (PARTITIONING - 451)) | (1L << (PARTITIONS - 451)) | (1L << (PASSWORD - 451)) | (1L << (PHASE - 451)) | (1L << (PLUGIN - 451)) | (1L << (PLUGIN_DIR - 451)) | (1L << (PLUGINS - 451)) | (1L << (PORT - 451)) | (1L << (PRECEDES - 451)) | (1L << (PREPARE - 451)) | (1L << (PRESERVE - 451)) | (1L << (PREV - 451)) | (1L << (PROCESSLIST - 451)) | (1L << (PROFILE - 451)) | (1L << (PROFILES - 451)) | (1L << (PROXY - 451)) | (1L << (QUERY - 451)) | (1L << (QUICK - 451)) | (1L << (REBUILD - 451)) | (1L << (RECOVER - 451)) | (1L << (REDO_BUFFER_SIZE - 451)) | (1L << (REDUNDANT - 451)) | (1L << (RELAY - 451)) | (1L << (RELAY_LOG_FILE - 451)) | (1L << (RELAY_LOG_POS - 451)) | (1L << (RELAYLOG - 451)) | (1L << (REMOVE - 451)) | (1L << (REORGANIZE - 451)) | (1L << (REPAIR - 451)) | (1L << (REPLICATE_DO_DB - 451)) | (1L << (REPLICATE_DO_TABLE - 451)) | (1L << (REPLICATE_IGNORE_DB - 451)) | (1L << (REPLICATE_IGNORE_TABLE - 451)) | (1L << (REPLICATE_REWRITE_DB - 451)) | (1L << (REPLICATE_WILD_DO_TABLE - 451)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 451)) | (1L << (REPLICATION - 451)) | (1L << (RESET - 451)) | (1L << (RESUME - 451)) | (1L << (RETURNED_SQLSTATE - 451)) | (1L << (RETURNS - 451)) | (1L << (ROLLBACK - 451)) | (1L << (ROLLUP - 451)) | (1L << (ROTATE - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (ROW_FORMAT - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SCHEDULE - 451)) | (1L << (SECURITY - 451)) | (1L << (SERVER - 451)) | (1L << (SESSION - 451)) | (1L << (SHARE - 451)) | (1L << (SHARED - 451)) | (1L << (SIGNED - 451)) | (1L << (SIMPLE - 451)) | (1L << (SLAVE - 451)) | (1L << (SLOW - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOCKET - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SOME - 515)) | (1L << (SONAME - 515)) | (1L << (SOUNDS - 515)) | (1L << (SOURCE - 515)) | (1L << (SQL_AFTER_GTIDS - 515)) | (1L << (SQL_AFTER_MTS_GAPS - 515)) | (1L << (SQL_BEFORE_GTIDS - 515)) | (1L << (SQL_BUFFER_RESULT - 515)) | (1L << (SQL_CACHE - 515)) | (1L << (SQL_NO_CACHE - 515)) | (1L << (SQL_THREAD - 515)) | (1L << (START - 515)) | (1L << (STARTS - 515)) | (1L << (STATS_AUTO_RECALC - 515)) | (1L << (STATS_PERSISTENT - 515)) | (1L << (STATS_SAMPLE_PAGES - 515)) | (1L << (STATUS - 515)) | (1L << (STOP - 515)) | (1L << (STORAGE - 515)) | (1L << (STRING - 515)) | (1L << (SUBCLASS_ORIGIN - 515)) | (1L << (SUBJECT - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBPARTITIONS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SWAPS - 515)) | (1L << (SWITCHES - 515)) | (1L << (TABLE_NAME - 515)) | (1L << (TABLESPACE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TEMPTABLE - 515)) | (1L << (THAN - 515)) | (1L << (TRADITIONAL - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRIGGERS - 515)) | (1L << (TRUNCATE - 515)) | (1L << (UNDEFINED - 515)) | (1L << (UNDOFILE - 515)) | (1L << (UNDO_BUFFER_SIZE - 515)) | (1L << (UNINSTALL - 515)) | (1L << (UNKNOWN - 515)) | (1L << (UNTIL - 515)) | (1L << (UPGRADE - 515)) | (1L << (USER - 515)) | (1L << (USE_FRM - 515)) | (1L << (USER_RESOURCES - 515)) | (1L << (VALIDATION - 515)) | (1L << (VALUE - 515)) | (1L << (VARIABLES - 515)) | (1L << (VIEW - 515)) | (1L << (VISIBLE - 515)) | (1L << (WAIT - 515)) | (1L << (WARNINGS - 515)) | (1L << (WITHOUT - 515)) | (1L << (WORK - 515)) | (1L << (WRAPPER - 515)) | (1L << (X509 - 515)) | (1L << (XA - 515)) | (1L << (XML - 515)))) != 0) || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (INTERNAL - 580)) | (1L << (QUARTER - 580)) | (1L << (MONTH - 580)) | (1L << (DAY - 580)) | (1L << (HOUR - 580)) | (1L << (MINUTE - 580)) | (1L << (WEEK - 580)) | (1L << (SECOND - 580)) | (1L << (MICROSECOND - 580)) | (1L << (TABLES - 580)) | (1L << (ROUTINE - 580)) | (1L << (EXECUTE - 580)) | (1L << (FILE - 580)) | (1L << (PROCESS - 580)) | (1L << (RELOAD - 580)) | (1L << (SHUTDOWN - 580)) | (1L << (SUPER - 580)) | (1L << (PRIVILEGES - 580)) | (1L << (SESSION_VARIABLES_ADMIN - 580)) | (1L << (ARMSCII8 - 580)) | (1L << (ASCII - 580)) | (1L << (BIG5 - 580)) | (1L << (CP1250 - 580)) | (1L << (CP1251 - 580)) | (1L << (CP1256 - 580)) | (1L << (CP1257 - 580)) | (1L << (CP850 - 580)) | (1L << (CP852 - 580)) | (1L << (CP866 - 580)) | (1L << (CP932 - 580)) | (1L << (DEC8 - 580)) | (1L << (EUCJPMS - 580)) | (1L << (EUCKR - 580)) | (1L << (GB2312 - 580)) | (1L << (GBK - 580)) | (1L << (GEOSTD8 - 580)) | (1L << (GREEK - 580)) | (1L << (HEBREW - 580)) | (1L << (HP8 - 580)) | (1L << (KEYBCS2 - 580)) | (1L << (KOI8R - 580)) | (1L << (KOI8U - 580)) | (1L << (LATIN1 - 580)) | (1L << (LATIN2 - 580)) | (1L << (LATIN5 - 580)) | (1L << (LATIN7 - 580)) | (1L << (MACCE - 580)) | (1L << (MACROMAN - 580)) | (1L << (SJIS - 580)) | (1L << (SWE7 - 580)) | (1L << (TIS620 - 580)) | (1L << (UCS2 - 580)) | (1L << (UJIS - 580)) | (1L << (UTF16 - 580)) | (1L << (UTF16LE - 580)) | (1L << (UTF32 - 580)) | (1L << (UTF8 - 580)) | (1L << (UTF8MB3 - 580)) | (1L << (UTF8MB4 - 580)) | (1L << (ARCHIVE - 580)) | (1L << (BLACKHOLE - 580)) | (1L << (CSV - 580)) | (1L << (FEDERATED - 580)) | (1L << (INNODB - 580)))) != 0) || ((((_la - 644)) & ~0x3f) == 0 && ((1L << (_la - 644)) & ((1L << (MEMORY - 644)) | (1L << (MRG_MYISAM - 644)) | (1L << (MYISAM - 644)) | (1L << (NDB - 644)) | (1L << (NDBCLUSTER - 644)) | (1L << (PERFORMANCE_SCHEMA - 644)) | (1L << (TOKUDB - 644)) | (1L << (REPEATABLE - 644)) | (1L << (COMMITTED - 644)) | (1L << (UNCOMMITTED - 644)) | (1L << (SERIALIZABLE - 644)) | (1L << (GEOMETRYCOLLECTION - 644)) | (1L << (LINESTRING - 644)) | (1L << (MULTILINESTRING - 644)) | (1L << (MULTIPOINT - 644)) | (1L << (MULTIPOLYGON - 644)) | (1L << (POINT - 644)) | (1L << (POLYGON - 644)) | (1L << (ABS - 644)) | (1L << (ACOS - 644)) | (1L << (ADDDATE - 644)) | (1L << (ADDTIME - 644)) | (1L << (AES_DECRYPT - 644)) | (1L << (AES_ENCRYPT - 644)) | (1L << (AREA - 644)) | (1L << (ASBINARY - 644)) | (1L << (ASIN - 644)) | (1L << (ASTEXT - 644)) | (1L << (ASWKB - 644)) | (1L << (ASWKT - 644)) | (1L << (ASYMMETRIC_DECRYPT - 644)) | (1L << (ASYMMETRIC_DERIVE - 644)) | (1L << (ASYMMETRIC_ENCRYPT - 644)) | (1L << (ASYMMETRIC_SIGN - 644)) | (1L << (ASYMMETRIC_VERIFY - 644)) | (1L << (ATAN - 644)) | (1L << (ATAN2 - 644)) | (1L << (BENCHMARK - 644)) | (1L << (BIN - 644)) | (1L << (BIT_COUNT - 644)) | (1L << (BIT_LENGTH - 644)) | (1L << (BUFFER - 644)) | (1L << (CATALOG_NAME - 644)) | (1L << (CEIL - 644)) | (1L << (CEILING - 644)) | (1L << (CENTROID - 644)) | (1L << (CHARACTER_LENGTH - 644)) | (1L << (CHARSET - 644)) | (1L << (CHAR_LENGTH - 644)) | (1L << (COERCIBILITY - 644)) | (1L << (COLLATION - 644)) | (1L << (COMPRESS - 644)) | (1L << (CONCAT - 644)) | (1L << (CONCAT_WS - 644)) | (1L << (CONNECTION_ID - 644)) | (1L << (CONV - 644)) | (1L << (CONVERT_TZ - 644)) | (1L << (COS - 644)) | (1L << (COT - 644)) | (1L << (CRC32 - 644)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 644)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 644)))) != 0) || ((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (CREATE_DH_PARAMETERS - 708)) | (1L << (CREATE_DIGEST - 708)) | (1L << (CROSSES - 708)) | (1L << (DATEDIFF - 708)) | (1L << (DATE_FORMAT - 708)) | (1L << (DAYNAME - 708)) | (1L << (DAYOFMONTH - 708)) | (1L << (DAYOFWEEK - 708)) | (1L << (DAYOFYEAR - 708)) | (1L << (DECODE - 708)) | (1L << (DEGREES - 708)) | (1L << (DES_DECRYPT - 708)) | (1L << (DES_ENCRYPT - 708)) | (1L << (DIMENSION - 708)) | (1L << (DISJOINT - 708)) | (1L << (ELT - 708)) | (1L << (ENCODE - 708)) | (1L << (ENCRYPT - 708)) | (1L << (ENDPOINT - 708)) | (1L << (ENVELOPE - 708)) | (1L << (EQUALS - 708)) | (1L << (EXP - 708)) | (1L << (EXPORT_SET - 708)) | (1L << (EXTERIORRING - 708)) | (1L << (EXTRACTVALUE - 708)) | (1L << (FIELD - 708)) | (1L << (FIND_IN_SET - 708)) | (1L << (FLOOR - 708)) | (1L << (FORMAT - 708)) | (1L << (FOUND_ROWS - 708)) | (1L << (FROM_BASE64 - 708)) | (1L << (FROM_DAYS - 708)) | (1L << (FROM_UNIXTIME - 708)) | (1L << (GEOMCOLLFROMTEXT - 708)) | (1L << (GEOMCOLLFROMWKB - 708)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 708)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 708)) | (1L << (GEOMETRYFROMTEXT - 708)) | (1L << (GEOMETRYFROMWKB - 708)) | (1L << (GEOMETRYN - 708)) | (1L << (GEOMETRYTYPE - 708)) | (1L << (GEOMFROMTEXT - 708)) | (1L << (GEOMFROMWKB - 708)) | (1L << (GET_FORMAT - 708)) | (1L << (GET_LOCK - 708)) | (1L << (GLENGTH - 708)) | (1L << (GREATEST - 708)) | (1L << (GTID_SUBSET - 708)) | (1L << (GTID_SUBTRACT - 708)) | (1L << (HEX - 708)) | (1L << (IFNULL - 708)) | (1L << (INET6_ATON - 708)) | (1L << (INET6_NTOA - 708)) | (1L << (INET_ATON - 708)) | (1L << (INET_NTOA - 708)) | (1L << (INSTR - 708)) | (1L << (INTERIORRINGN - 708)) | (1L << (INTERSECTS - 708)) | (1L << (ISCLOSED - 708)) | (1L << (ISEMPTY - 708)) | (1L << (ISNULL - 708)) | (1L << (ISSIMPLE - 708)) | (1L << (IS_FREE_LOCK - 708)) | (1L << (IS_IPV4 - 708)))) != 0) || ((((_la - 772)) & ~0x3f) == 0 && ((1L << (_la - 772)) & ((1L << (IS_IPV4_COMPAT - 772)) | (1L << (IS_IPV4_MAPPED - 772)) | (1L << (IS_IPV6 - 772)) | (1L << (IS_USED_LOCK - 772)) | (1L << (LAST_INSERT_ID - 772)) | (1L << (LCASE - 772)) | (1L << (LEAST - 772)) | (1L << (LENGTH - 772)) | (1L << (LINEFROMTEXT - 772)) | (1L << (LINEFROMWKB - 772)) | (1L << (LINESTRINGFROMTEXT - 772)) | (1L << (LINESTRINGFROMWKB - 772)) | (1L << (LN - 772)) | (1L << (LOAD_FILE - 772)) | (1L << (LOCATE - 772)) | (1L << (LOG - 772)) | (1L << (LOG10 - 772)) | (1L << (LOG2 - 772)) | (1L << (LOWER - 772)) | (1L << (LPAD - 772)) | (1L << (LTRIM - 772)) | (1L << (MAKEDATE - 772)) | (1L << (MAKETIME - 772)) | (1L << (MAKE_SET - 772)) | (1L << (MASTER_POS_WAIT - 772)) | (1L << (MBRCONTAINS - 772)) | (1L << (MBRDISJOINT - 772)) | (1L << (MBREQUAL - 772)) | (1L << (MBRINTERSECTS - 772)) | (1L << (MBROVERLAPS - 772)) | (1L << (MBRTOUCHES - 772)) | (1L << (MBRWITHIN - 772)) | (1L << (MD5 - 772)) | (1L << (MLINEFROMTEXT - 772)) | (1L << (MLINEFROMWKB - 772)) | (1L << (MONTHNAME - 772)) | (1L << (MPOINTFROMTEXT - 772)) | (1L << (MPOINTFROMWKB - 772)) | (1L << (MPOLYFROMTEXT - 772)) | (1L << (MPOLYFROMWKB - 772)) | (1L << (MULTILINESTRINGFROMTEXT - 772)) | (1L << (MULTILINESTRINGFROMWKB - 772)) | (1L << (MULTIPOINTFROMTEXT - 772)) | (1L << (MULTIPOINTFROMWKB - 772)) | (1L << (MULTIPOLYGONFROMTEXT - 772)) | (1L << (MULTIPOLYGONFROMWKB - 772)) | (1L << (NAME_CONST - 772)) | (1L << (NULLIF - 772)) | (1L << (NUMGEOMETRIES - 772)) | (1L << (NUMINTERIORRINGS - 772)) | (1L << (NUMPOINTS - 772)) | (1L << (OCT - 772)) | (1L << (OCTET_LENGTH - 772)) | (1L << (ORD - 772)) | (1L << (OVERLAPS - 772)) | (1L << (PERIOD_ADD - 772)) | (1L << (PERIOD_DIFF - 772)) | (1L << (PI - 772)) | (1L << (POINTFROMTEXT - 772)) | (1L << (POINTFROMWKB - 772)) | (1L << (POINTN - 772)) | (1L << (POLYFROMTEXT - 772)) | (1L << (POLYFROMWKB - 772)) | (1L << (POLYGONFROMTEXT - 772)))) != 0) || ((((_la - 836)) & ~0x3f) == 0 && ((1L << (_la - 836)) & ((1L << (POLYGONFROMWKB - 836)) | (1L << (POW - 836)) | (1L << (POWER - 836)) | (1L << (QUOTE - 836)) | (1L << (RADIANS - 836)) | (1L << (RAND - 836)) | (1L << (RANDOM_BYTES - 836)) | (1L << (RELEASE_LOCK - 836)) | (1L << (REVERSE - 836)) | (1L << (ROUND - 836)) | (1L << (ROW_COUNT - 836)) | (1L << (RPAD - 836)) | (1L << (RTRIM - 836)) | (1L << (SEC_TO_TIME - 836)) | (1L << (SESSION_USER - 836)) | (1L << (SHA - 836)) | (1L << (SHA1 - 836)) | (1L << (SHA2 - 836)) | (1L << (SCHEMA_NAME - 836)) | (1L << (SIGN - 836)) | (1L << (SIN - 836)) | (1L << (SLEEP - 836)) | (1L << (SOUNDEX - 836)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 836)) | (1L << (SQRT - 836)) | (1L << (SRID - 836)) | (1L << (STARTPOINT - 836)) | (1L << (STRCMP - 836)) | (1L << (STR_TO_DATE - 836)) | (1L << (ST_AREA - 836)) | (1L << (ST_ASBINARY - 836)) | (1L << (ST_ASTEXT - 836)) | (1L << (ST_ASWKB - 836)) | (1L << (ST_ASWKT - 836)) | (1L << (ST_BUFFER - 836)) | (1L << (ST_CENTROID - 836)) | (1L << (ST_CONTAINS - 836)) | (1L << (ST_CROSSES - 836)) | (1L << (ST_DIFFERENCE - 836)) | (1L << (ST_DIMENSION - 836)) | (1L << (ST_DISJOINT - 836)) | (1L << (ST_DISTANCE - 836)) | (1L << (ST_ENDPOINT - 836)) | (1L << (ST_ENVELOPE - 836)) | (1L << (ST_EQUALS - 836)) | (1L << (ST_EXTERIORRING - 836)) | (1L << (ST_GEOMCOLLFROMTEXT - 836)) | (1L << (ST_GEOMCOLLFROMTXT - 836)) | (1L << (ST_GEOMCOLLFROMWKB - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 836)) | (1L << (ST_GEOMETRYFROMTEXT - 836)) | (1L << (ST_GEOMETRYFROMWKB - 836)) | (1L << (ST_GEOMETRYN - 836)) | (1L << (ST_GEOMETRYTYPE - 836)) | (1L << (ST_GEOMFROMTEXT - 836)) | (1L << (ST_GEOMFROMWKB - 836)) | (1L << (ST_INTERIORRINGN - 836)) | (1L << (ST_INTERSECTION - 836)) | (1L << (ST_INTERSECTS - 836)) | (1L << (ST_ISCLOSED - 836)) | (1L << (ST_ISEMPTY - 836)) | (1L << (ST_ISSIMPLE - 836)) | (1L << (ST_LINEFROMTEXT - 836)))) != 0) || ((((_la - 900)) & ~0x3f) == 0 && ((1L << (_la - 900)) & ((1L << (ST_LINEFROMWKB - 900)) | (1L << (ST_LINESTRINGFROMTEXT - 900)) | (1L << (ST_LINESTRINGFROMWKB - 900)) | (1L << (ST_NUMGEOMETRIES - 900)) | (1L << (ST_NUMINTERIORRING - 900)) | (1L << (ST_NUMINTERIORRINGS - 900)) | (1L << (ST_NUMPOINTS - 900)) | (1L << (ST_OVERLAPS - 900)) | (1L << (ST_POINTFROMTEXT - 900)) | (1L << (ST_POINTFROMWKB - 900)) | (1L << (ST_POINTN - 900)) | (1L << (ST_POLYFROMTEXT - 900)) | (1L << (ST_POLYFROMWKB - 900)) | (1L << (ST_POLYGONFROMTEXT - 900)) | (1L << (ST_POLYGONFROMWKB - 900)) | (1L << (ST_SRID - 900)) | (1L << (ST_STARTPOINT - 900)) | (1L << (ST_SYMDIFFERENCE - 900)) | (1L << (ST_TOUCHES - 900)) | (1L << (ST_UNION - 900)) | (1L << (ST_WITHIN - 900)) | (1L << (ST_X - 900)) | (1L << (ST_Y - 900)) | (1L << (SUBDATE - 900)) | (1L << (SUBSTRING_INDEX - 900)) | (1L << (SUBTIME - 900)) | (1L << (SYSTEM_USER - 900)) | (1L << (TAN - 900)) | (1L << (TIMEDIFF - 900)) | (1L << (TIMESTAMPADD - 900)) | (1L << (TIMESTAMPDIFF - 900)) | (1L << (TIME_FORMAT - 900)) | (1L << (TIME_TO_SEC - 900)) | (1L << (TOUCHES - 900)) | (1L << (TO_BASE64 - 900)) | (1L << (TO_DAYS - 900)) | (1L << (TO_SECONDS - 900)) | (1L << (UCASE - 900)) | (1L << (UNCOMPRESS - 900)) | (1L << (UNCOMPRESSED_LENGTH - 900)) | (1L << (UNHEX - 900)) | (1L << (UNIX_TIMESTAMP - 900)) | (1L << (UPDATEXML - 900)) | (1L << (UPPER - 900)) | (1L << (UUID - 900)) | (1L << (UUID_SHORT - 900)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 900)) | (1L << (VERSION - 900)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 900)) | (1L << (WEEKDAY - 900)) | (1L << (WEEKOFYEAR - 900)) | (1L << (WEIGHT_STRING - 900)) | (1L << (WITHIN - 900)) | (1L << (YEARWEEK - 900)) | (1L << (Y_FUNCTION - 900)) | (1L << (X_FUNCTION - 900)))) != 0) || ((((_la - 994)) & ~0x3f) == 0 && ((1L << (_la - 994)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 994)) | (1L << (STRING_LITERAL - 994)) | (1L << (ID - 994)) | (1L << (REVERSE_QUOTE_ID - 994)))) != 0))
                                {
                                    {
                                        State = 1507; ((ForeignKeyTableConstraintContext)_localctx).name = uid();
                                    }
                                }

                            }
                        }

                        State = 1512; Match(FOREIGN);
                        State = 1513; Match(KEY);
                        State = 1515;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)) | (1L << (POSITION - 191)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ACCOUNT - 259)) | (1L << (ACTION - 259)) | (1L << (AFTER - 259)) | (1L << (AGGREGATE - 259)) | (1L << (ALGORITHM - 259)) | (1L << (ANY - 259)) | (1L << (AT - 259)) | (1L << (AUTHORS - 259)) | (1L << (AUTOCOMMIT - 259)) | (1L << (AUTOEXTEND_SIZE - 259)) | (1L << (AUTO_INCREMENT - 259)) | (1L << (AVG_ROW_LENGTH - 259)) | (1L << (BEGIN - 259)) | (1L << (BINLOG - 259)) | (1L << (BIT - 259)) | (1L << (BLOCK - 259)) | (1L << (BOOL - 259)) | (1L << (BOOLEAN - 259)) | (1L << (BTREE - 259)) | (1L << (CACHE - 259)) | (1L << (CASCADED - 259)) | (1L << (CHAIN - 259)) | (1L << (CHANGED - 259)) | (1L << (CHANNEL - 259)) | (1L << (CHECKSUM - 259)) | (1L << (PAGE_CHECKSUM - 259)) | (1L << (CIPHER - 259)) | (1L << (CLASS_ORIGIN - 259)) | (1L << (CLIENT - 259)) | (1L << (CLOSE - 259)) | (1L << (COALESCE - 259)) | (1L << (CODE - 259)) | (1L << (COLUMNS - 259)) | (1L << (COLUMN_FORMAT - 259)) | (1L << (COLUMN_NAME - 259)) | (1L << (COMMENT - 259)) | (1L << (COMMIT - 259)) | (1L << (COMPACT - 259)) | (1L << (COMPLETION - 259)) | (1L << (COMPRESSED - 259)) | (1L << (COMPRESSION - 259)) | (1L << (CONCURRENT - 259)) | (1L << (CONNECTION - 259)) | (1L << (CONSISTENT - 259)) | (1L << (CONSTRAINT_CATALOG - 259)) | (1L << (CONSTRAINT_SCHEMA - 259)) | (1L << (CONSTRAINT_NAME - 259)) | (1L << (CONTAINS - 259)) | (1L << (CONTEXT - 259)) | (1L << (CONTRIBUTORS - 259)) | (1L << (COPY - 259)) | (1L << (CPU - 259)) | (1L << (CURSOR_NAME - 259)) | (1L << (DATA - 259)) | (1L << (DATAFILE - 259)) | (1L << (DEALLOCATE - 259)) | (1L << (DEFAULT_AUTH - 259)) | (1L << (DEFINER - 259)) | (1L << (DELAY_KEY_WRITE - 259)) | (1L << (DES_KEY_FILE - 259)) | (1L << (DIRECTORY - 259)) | (1L << (DISABLE - 259)) | (1L << (DISCARD - 259)) | (1L << (DISK - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (DO - 323)) | (1L << (DUMPFILE - 323)) | (1L << (DUPLICATE - 323)) | (1L << (DYNAMIC - 323)) | (1L << (ENABLE - 323)) | (1L << (ENCRYPTION - 323)) | (1L << (END - 323)) | (1L << (ENDS - 323)) | (1L << (ENGINE - 323)) | (1L << (ENGINES - 323)) | (1L << (ERROR - 323)) | (1L << (ERRORS - 323)) | (1L << (ESCAPE - 323)) | (1L << (EVEN - 323)) | (1L << (EVENT - 323)) | (1L << (EVENTS - 323)) | (1L << (EVERY - 323)) | (1L << (EXCHANGE - 323)) | (1L << (EXCLUSIVE - 323)) | (1L << (EXPIRE - 323)) | (1L << (EXPORT - 323)) | (1L << (EXTENDED - 323)) | (1L << (EXTENT_SIZE - 323)) | (1L << (FAST - 323)) | (1L << (FAULTS - 323)) | (1L << (FIELDS - 323)) | (1L << (FILE_BLOCK_SIZE - 323)) | (1L << (FILTER - 323)) | (1L << (FIRST - 323)) | (1L << (FIXED - 323)) | (1L << (FLUSH - 323)) | (1L << (FOLLOWS - 323)) | (1L << (FOUND - 323)) | (1L << (FULL - 323)) | (1L << (FUNCTION - 323)) | (1L << (GENERAL - 323)) | (1L << (GLOBAL - 323)) | (1L << (GRANTS - 323)) | (1L << (GROUP_REPLICATION - 323)) | (1L << (HANDLER - 323)) | (1L << (HASH - 323)) | (1L << (HELP - 323)) | (1L << (HOST - 323)) | (1L << (HOSTS - 323)) | (1L << (IDENTIFIED - 323)) | (1L << (IGNORE_SERVER_IDS - 323)) | (1L << (IMPORT - 323)) | (1L << (INDEXES - 323)) | (1L << (INITIAL_SIZE - 323)) | (1L << (INPLACE - 323)) | (1L << (INSERT_METHOD - 323)) | (1L << (INSTALL - 323)) | (1L << (INSTANCE - 323)) | (1L << (INVISIBLE - 323)) | (1L << (INVOKER - 323)) | (1L << (IO - 323)) | (1L << (IO_THREAD - 323)) | (1L << (IPC - 323)) | (1L << (ISOLATION - 323)) | (1L << (ISSUER - 323)) | (1L << (JSON - 323)) | (1L << (KEY_BLOCK_SIZE - 323)) | (1L << (LANGUAGE - 323)) | (1L << (LAST - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (LEAVES - 387)) | (1L << (LESS - 387)) | (1L << (LEVEL - 387)) | (1L << (LIST - 387)) | (1L << (LOCAL - 387)) | (1L << (LOGFILE - 387)) | (1L << (LOGS - 387)) | (1L << (MASTER - 387)) | (1L << (MASTER_AUTO_POSITION - 387)) | (1L << (MASTER_CONNECT_RETRY - 387)) | (1L << (MASTER_DELAY - 387)) | (1L << (MASTER_HEARTBEAT_PERIOD - 387)) | (1L << (MASTER_HOST - 387)) | (1L << (MASTER_LOG_FILE - 387)) | (1L << (MASTER_LOG_POS - 387)) | (1L << (MASTER_PASSWORD - 387)) | (1L << (MASTER_PORT - 387)) | (1L << (MASTER_RETRY_COUNT - 387)) | (1L << (MASTER_SSL - 387)) | (1L << (MASTER_SSL_CA - 387)) | (1L << (MASTER_SSL_CAPATH - 387)) | (1L << (MASTER_SSL_CERT - 387)) | (1L << (MASTER_SSL_CIPHER - 387)) | (1L << (MASTER_SSL_CRL - 387)) | (1L << (MASTER_SSL_CRLPATH - 387)) | (1L << (MASTER_SSL_KEY - 387)) | (1L << (MASTER_TLS_VERSION - 387)) | (1L << (MASTER_USER - 387)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 387)) | (1L << (MAX_QUERIES_PER_HOUR - 387)) | (1L << (MAX_ROWS - 387)) | (1L << (MAX_SIZE - 387)) | (1L << (MAX_UPDATES_PER_HOUR - 387)) | (1L << (MAX_USER_CONNECTIONS - 387)) | (1L << (MEDIUM - 387)) | (1L << (MERGE - 387)) | (1L << (MESSAGE_TEXT - 387)) | (1L << (MID - 387)) | (1L << (MIGRATE - 387)) | (1L << (MIN_ROWS - 387)) | (1L << (MODE - 387)) | (1L << (MODIFY - 387)) | (1L << (MUTEX - 387)) | (1L << (MYSQL - 387)) | (1L << (MYSQL_ERRNO - 387)) | (1L << (NAME - 387)) | (1L << (NAMES - 387)) | (1L << (NCHAR - 387)) | (1L << (NEVER - 387)) | (1L << (NEXT - 387)) | (1L << (NO - 387)) | (1L << (NODEGROUP - 387)) | (1L << (NONE - 387)) | (1L << (OFFLINE - 387)) | (1L << (OFFSET - 387)) | (1L << (OJ - 387)) | (1L << (OLD_PASSWORD - 387)) | (1L << (ONE - 387)) | (1L << (ONLINE - 387)) | (1L << (ONLY - 387)) | (1L << (OPEN - 387)) | (1L << (OPTIMIZER_COSTS - 387)) | (1L << (OPTIONS - 387)) | (1L << (OWNER - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PAGE - 451)) | (1L << (PARSER - 451)) | (1L << (PARTIAL - 451)) | (1L << (PARTITIONING - 451)) | (1L << (PARTITIONS - 451)) | (1L << (PASSWORD - 451)) | (1L << (PHASE - 451)) | (1L << (PLUGIN - 451)) | (1L << (PLUGIN_DIR - 451)) | (1L << (PLUGINS - 451)) | (1L << (PORT - 451)) | (1L << (PRECEDES - 451)) | (1L << (PREPARE - 451)) | (1L << (PRESERVE - 451)) | (1L << (PREV - 451)) | (1L << (PROCESSLIST - 451)) | (1L << (PROFILE - 451)) | (1L << (PROFILES - 451)) | (1L << (PROXY - 451)) | (1L << (QUERY - 451)) | (1L << (QUICK - 451)) | (1L << (REBUILD - 451)) | (1L << (RECOVER - 451)) | (1L << (REDO_BUFFER_SIZE - 451)) | (1L << (REDUNDANT - 451)) | (1L << (RELAY - 451)) | (1L << (RELAY_LOG_FILE - 451)) | (1L << (RELAY_LOG_POS - 451)) | (1L << (RELAYLOG - 451)) | (1L << (REMOVE - 451)) | (1L << (REORGANIZE - 451)) | (1L << (REPAIR - 451)) | (1L << (REPLICATE_DO_DB - 451)) | (1L << (REPLICATE_DO_TABLE - 451)) | (1L << (REPLICATE_IGNORE_DB - 451)) | (1L << (REPLICATE_IGNORE_TABLE - 451)) | (1L << (REPLICATE_REWRITE_DB - 451)) | (1L << (REPLICATE_WILD_DO_TABLE - 451)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 451)) | (1L << (REPLICATION - 451)) | (1L << (RESET - 451)) | (1L << (RESUME - 451)) | (1L << (RETURNED_SQLSTATE - 451)) | (1L << (RETURNS - 451)) | (1L << (ROLLBACK - 451)) | (1L << (ROLLUP - 451)) | (1L << (ROTATE - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (ROW_FORMAT - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SCHEDULE - 451)) | (1L << (SECURITY - 451)) | (1L << (SERVER - 451)) | (1L << (SESSION - 451)) | (1L << (SHARE - 451)) | (1L << (SHARED - 451)) | (1L << (SIGNED - 451)) | (1L << (SIMPLE - 451)) | (1L << (SLAVE - 451)) | (1L << (SLOW - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOCKET - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SOME - 515)) | (1L << (SONAME - 515)) | (1L << (SOUNDS - 515)) | (1L << (SOURCE - 515)) | (1L << (SQL_AFTER_GTIDS - 515)) | (1L << (SQL_AFTER_MTS_GAPS - 515)) | (1L << (SQL_BEFORE_GTIDS - 515)) | (1L << (SQL_BUFFER_RESULT - 515)) | (1L << (SQL_CACHE - 515)) | (1L << (SQL_NO_CACHE - 515)) | (1L << (SQL_THREAD - 515)) | (1L << (START - 515)) | (1L << (STARTS - 515)) | (1L << (STATS_AUTO_RECALC - 515)) | (1L << (STATS_PERSISTENT - 515)) | (1L << (STATS_SAMPLE_PAGES - 515)) | (1L << (STATUS - 515)) | (1L << (STOP - 515)) | (1L << (STORAGE - 515)) | (1L << (STRING - 515)) | (1L << (SUBCLASS_ORIGIN - 515)) | (1L << (SUBJECT - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBPARTITIONS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SWAPS - 515)) | (1L << (SWITCHES - 515)) | (1L << (TABLE_NAME - 515)) | (1L << (TABLESPACE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TEMPTABLE - 515)) | (1L << (THAN - 515)) | (1L << (TRADITIONAL - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRIGGERS - 515)) | (1L << (TRUNCATE - 515)) | (1L << (UNDEFINED - 515)) | (1L << (UNDOFILE - 515)) | (1L << (UNDO_BUFFER_SIZE - 515)) | (1L << (UNINSTALL - 515)) | (1L << (UNKNOWN - 515)) | (1L << (UNTIL - 515)) | (1L << (UPGRADE - 515)) | (1L << (USER - 515)) | (1L << (USE_FRM - 515)) | (1L << (USER_RESOURCES - 515)) | (1L << (VALIDATION - 515)) | (1L << (VALUE - 515)) | (1L << (VARIABLES - 515)) | (1L << (VIEW - 515)) | (1L << (VISIBLE - 515)) | (1L << (WAIT - 515)) | (1L << (WARNINGS - 515)) | (1L << (WITHOUT - 515)) | (1L << (WORK - 515)) | (1L << (WRAPPER - 515)) | (1L << (X509 - 515)) | (1L << (XA - 515)) | (1L << (XML - 515)))) != 0) || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (INTERNAL - 580)) | (1L << (QUARTER - 580)) | (1L << (MONTH - 580)) | (1L << (DAY - 580)) | (1L << (HOUR - 580)) | (1L << (MINUTE - 580)) | (1L << (WEEK - 580)) | (1L << (SECOND - 580)) | (1L << (MICROSECOND - 580)) | (1L << (TABLES - 580)) | (1L << (ROUTINE - 580)) | (1L << (EXECUTE - 580)) | (1L << (FILE - 580)) | (1L << (PROCESS - 580)) | (1L << (RELOAD - 580)) | (1L << (SHUTDOWN - 580)) | (1L << (SUPER - 580)) | (1L << (PRIVILEGES - 580)) | (1L << (SESSION_VARIABLES_ADMIN - 580)) | (1L << (ARMSCII8 - 580)) | (1L << (ASCII - 580)) | (1L << (BIG5 - 580)) | (1L << (CP1250 - 580)) | (1L << (CP1251 - 580)) | (1L << (CP1256 - 580)) | (1L << (CP1257 - 580)) | (1L << (CP850 - 580)) | (1L << (CP852 - 580)) | (1L << (CP866 - 580)) | (1L << (CP932 - 580)) | (1L << (DEC8 - 580)) | (1L << (EUCJPMS - 580)) | (1L << (EUCKR - 580)) | (1L << (GB2312 - 580)) | (1L << (GBK - 580)) | (1L << (GEOSTD8 - 580)) | (1L << (GREEK - 580)) | (1L << (HEBREW - 580)) | (1L << (HP8 - 580)) | (1L << (KEYBCS2 - 580)) | (1L << (KOI8R - 580)) | (1L << (KOI8U - 580)) | (1L << (LATIN1 - 580)) | (1L << (LATIN2 - 580)) | (1L << (LATIN5 - 580)) | (1L << (LATIN7 - 580)) | (1L << (MACCE - 580)) | (1L << (MACROMAN - 580)) | (1L << (SJIS - 580)) | (1L << (SWE7 - 580)) | (1L << (TIS620 - 580)) | (1L << (UCS2 - 580)) | (1L << (UJIS - 580)) | (1L << (UTF16 - 580)) | (1L << (UTF16LE - 580)) | (1L << (UTF32 - 580)) | (1L << (UTF8 - 580)) | (1L << (UTF8MB3 - 580)) | (1L << (UTF8MB4 - 580)) | (1L << (ARCHIVE - 580)) | (1L << (BLACKHOLE - 580)) | (1L << (CSV - 580)) | (1L << (FEDERATED - 580)) | (1L << (INNODB - 580)))) != 0) || ((((_la - 644)) & ~0x3f) == 0 && ((1L << (_la - 644)) & ((1L << (MEMORY - 644)) | (1L << (MRG_MYISAM - 644)) | (1L << (MYISAM - 644)) | (1L << (NDB - 644)) | (1L << (NDBCLUSTER - 644)) | (1L << (PERFORMANCE_SCHEMA - 644)) | (1L << (TOKUDB - 644)) | (1L << (REPEATABLE - 644)) | (1L << (COMMITTED - 644)) | (1L << (UNCOMMITTED - 644)) | (1L << (SERIALIZABLE - 644)) | (1L << (GEOMETRYCOLLECTION - 644)) | (1L << (LINESTRING - 644)) | (1L << (MULTILINESTRING - 644)) | (1L << (MULTIPOINT - 644)) | (1L << (MULTIPOLYGON - 644)) | (1L << (POINT - 644)) | (1L << (POLYGON - 644)) | (1L << (ABS - 644)) | (1L << (ACOS - 644)) | (1L << (ADDDATE - 644)) | (1L << (ADDTIME - 644)) | (1L << (AES_DECRYPT - 644)) | (1L << (AES_ENCRYPT - 644)) | (1L << (AREA - 644)) | (1L << (ASBINARY - 644)) | (1L << (ASIN - 644)) | (1L << (ASTEXT - 644)) | (1L << (ASWKB - 644)) | (1L << (ASWKT - 644)) | (1L << (ASYMMETRIC_DECRYPT - 644)) | (1L << (ASYMMETRIC_DERIVE - 644)) | (1L << (ASYMMETRIC_ENCRYPT - 644)) | (1L << (ASYMMETRIC_SIGN - 644)) | (1L << (ASYMMETRIC_VERIFY - 644)) | (1L << (ATAN - 644)) | (1L << (ATAN2 - 644)) | (1L << (BENCHMARK - 644)) | (1L << (BIN - 644)) | (1L << (BIT_COUNT - 644)) | (1L << (BIT_LENGTH - 644)) | (1L << (BUFFER - 644)) | (1L << (CATALOG_NAME - 644)) | (1L << (CEIL - 644)) | (1L << (CEILING - 644)) | (1L << (CENTROID - 644)) | (1L << (CHARACTER_LENGTH - 644)) | (1L << (CHARSET - 644)) | (1L << (CHAR_LENGTH - 644)) | (1L << (COERCIBILITY - 644)) | (1L << (COLLATION - 644)) | (1L << (COMPRESS - 644)) | (1L << (CONCAT - 644)) | (1L << (CONCAT_WS - 644)) | (1L << (CONNECTION_ID - 644)) | (1L << (CONV - 644)) | (1L << (CONVERT_TZ - 644)) | (1L << (COS - 644)) | (1L << (COT - 644)) | (1L << (CRC32 - 644)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 644)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 644)))) != 0) || ((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (CREATE_DH_PARAMETERS - 708)) | (1L << (CREATE_DIGEST - 708)) | (1L << (CROSSES - 708)) | (1L << (DATEDIFF - 708)) | (1L << (DATE_FORMAT - 708)) | (1L << (DAYNAME - 708)) | (1L << (DAYOFMONTH - 708)) | (1L << (DAYOFWEEK - 708)) | (1L << (DAYOFYEAR - 708)) | (1L << (DECODE - 708)) | (1L << (DEGREES - 708)) | (1L << (DES_DECRYPT - 708)) | (1L << (DES_ENCRYPT - 708)) | (1L << (DIMENSION - 708)) | (1L << (DISJOINT - 708)) | (1L << (ELT - 708)) | (1L << (ENCODE - 708)) | (1L << (ENCRYPT - 708)) | (1L << (ENDPOINT - 708)) | (1L << (ENVELOPE - 708)) | (1L << (EQUALS - 708)) | (1L << (EXP - 708)) | (1L << (EXPORT_SET - 708)) | (1L << (EXTERIORRING - 708)) | (1L << (EXTRACTVALUE - 708)) | (1L << (FIELD - 708)) | (1L << (FIND_IN_SET - 708)) | (1L << (FLOOR - 708)) | (1L << (FORMAT - 708)) | (1L << (FOUND_ROWS - 708)) | (1L << (FROM_BASE64 - 708)) | (1L << (FROM_DAYS - 708)) | (1L << (FROM_UNIXTIME - 708)) | (1L << (GEOMCOLLFROMTEXT - 708)) | (1L << (GEOMCOLLFROMWKB - 708)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 708)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 708)) | (1L << (GEOMETRYFROMTEXT - 708)) | (1L << (GEOMETRYFROMWKB - 708)) | (1L << (GEOMETRYN - 708)) | (1L << (GEOMETRYTYPE - 708)) | (1L << (GEOMFROMTEXT - 708)) | (1L << (GEOMFROMWKB - 708)) | (1L << (GET_FORMAT - 708)) | (1L << (GET_LOCK - 708)) | (1L << (GLENGTH - 708)) | (1L << (GREATEST - 708)) | (1L << (GTID_SUBSET - 708)) | (1L << (GTID_SUBTRACT - 708)) | (1L << (HEX - 708)) | (1L << (IFNULL - 708)) | (1L << (INET6_ATON - 708)) | (1L << (INET6_NTOA - 708)) | (1L << (INET_ATON - 708)) | (1L << (INET_NTOA - 708)) | (1L << (INSTR - 708)) | (1L << (INTERIORRINGN - 708)) | (1L << (INTERSECTS - 708)) | (1L << (ISCLOSED - 708)) | (1L << (ISEMPTY - 708)) | (1L << (ISNULL - 708)) | (1L << (ISSIMPLE - 708)) | (1L << (IS_FREE_LOCK - 708)) | (1L << (IS_IPV4 - 708)))) != 0) || ((((_la - 772)) & ~0x3f) == 0 && ((1L << (_la - 772)) & ((1L << (IS_IPV4_COMPAT - 772)) | (1L << (IS_IPV4_MAPPED - 772)) | (1L << (IS_IPV6 - 772)) | (1L << (IS_USED_LOCK - 772)) | (1L << (LAST_INSERT_ID - 772)) | (1L << (LCASE - 772)) | (1L << (LEAST - 772)) | (1L << (LENGTH - 772)) | (1L << (LINEFROMTEXT - 772)) | (1L << (LINEFROMWKB - 772)) | (1L << (LINESTRINGFROMTEXT - 772)) | (1L << (LINESTRINGFROMWKB - 772)) | (1L << (LN - 772)) | (1L << (LOAD_FILE - 772)) | (1L << (LOCATE - 772)) | (1L << (LOG - 772)) | (1L << (LOG10 - 772)) | (1L << (LOG2 - 772)) | (1L << (LOWER - 772)) | (1L << (LPAD - 772)) | (1L << (LTRIM - 772)) | (1L << (MAKEDATE - 772)) | (1L << (MAKETIME - 772)) | (1L << (MAKE_SET - 772)) | (1L << (MASTER_POS_WAIT - 772)) | (1L << (MBRCONTAINS - 772)) | (1L << (MBRDISJOINT - 772)) | (1L << (MBREQUAL - 772)) | (1L << (MBRINTERSECTS - 772)) | (1L << (MBROVERLAPS - 772)) | (1L << (MBRTOUCHES - 772)) | (1L << (MBRWITHIN - 772)) | (1L << (MD5 - 772)) | (1L << (MLINEFROMTEXT - 772)) | (1L << (MLINEFROMWKB - 772)) | (1L << (MONTHNAME - 772)) | (1L << (MPOINTFROMTEXT - 772)) | (1L << (MPOINTFROMWKB - 772)) | (1L << (MPOLYFROMTEXT - 772)) | (1L << (MPOLYFROMWKB - 772)) | (1L << (MULTILINESTRINGFROMTEXT - 772)) | (1L << (MULTILINESTRINGFROMWKB - 772)) | (1L << (MULTIPOINTFROMTEXT - 772)) | (1L << (MULTIPOINTFROMWKB - 772)) | (1L << (MULTIPOLYGONFROMTEXT - 772)) | (1L << (MULTIPOLYGONFROMWKB - 772)) | (1L << (NAME_CONST - 772)) | (1L << (NULLIF - 772)) | (1L << (NUMGEOMETRIES - 772)) | (1L << (NUMINTERIORRINGS - 772)) | (1L << (NUMPOINTS - 772)) | (1L << (OCT - 772)) | (1L << (OCTET_LENGTH - 772)) | (1L << (ORD - 772)) | (1L << (OVERLAPS - 772)) | (1L << (PERIOD_ADD - 772)) | (1L << (PERIOD_DIFF - 772)) | (1L << (PI - 772)) | (1L << (POINTFROMTEXT - 772)) | (1L << (POINTFROMWKB - 772)) | (1L << (POINTN - 772)) | (1L << (POLYFROMTEXT - 772)) | (1L << (POLYFROMWKB - 772)) | (1L << (POLYGONFROMTEXT - 772)))) != 0) || ((((_la - 836)) & ~0x3f) == 0 && ((1L << (_la - 836)) & ((1L << (POLYGONFROMWKB - 836)) | (1L << (POW - 836)) | (1L << (POWER - 836)) | (1L << (QUOTE - 836)) | (1L << (RADIANS - 836)) | (1L << (RAND - 836)) | (1L << (RANDOM_BYTES - 836)) | (1L << (RELEASE_LOCK - 836)) | (1L << (REVERSE - 836)) | (1L << (ROUND - 836)) | (1L << (ROW_COUNT - 836)) | (1L << (RPAD - 836)) | (1L << (RTRIM - 836)) | (1L << (SEC_TO_TIME - 836)) | (1L << (SESSION_USER - 836)) | (1L << (SHA - 836)) | (1L << (SHA1 - 836)) | (1L << (SHA2 - 836)) | (1L << (SCHEMA_NAME - 836)) | (1L << (SIGN - 836)) | (1L << (SIN - 836)) | (1L << (SLEEP - 836)) | (1L << (SOUNDEX - 836)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 836)) | (1L << (SQRT - 836)) | (1L << (SRID - 836)) | (1L << (STARTPOINT - 836)) | (1L << (STRCMP - 836)) | (1L << (STR_TO_DATE - 836)) | (1L << (ST_AREA - 836)) | (1L << (ST_ASBINARY - 836)) | (1L << (ST_ASTEXT - 836)) | (1L << (ST_ASWKB - 836)) | (1L << (ST_ASWKT - 836)) | (1L << (ST_BUFFER - 836)) | (1L << (ST_CENTROID - 836)) | (1L << (ST_CONTAINS - 836)) | (1L << (ST_CROSSES - 836)) | (1L << (ST_DIFFERENCE - 836)) | (1L << (ST_DIMENSION - 836)) | (1L << (ST_DISJOINT - 836)) | (1L << (ST_DISTANCE - 836)) | (1L << (ST_ENDPOINT - 836)) | (1L << (ST_ENVELOPE - 836)) | (1L << (ST_EQUALS - 836)) | (1L << (ST_EXTERIORRING - 836)) | (1L << (ST_GEOMCOLLFROMTEXT - 836)) | (1L << (ST_GEOMCOLLFROMTXT - 836)) | (1L << (ST_GEOMCOLLFROMWKB - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 836)) | (1L << (ST_GEOMETRYFROMTEXT - 836)) | (1L << (ST_GEOMETRYFROMWKB - 836)) | (1L << (ST_GEOMETRYN - 836)) | (1L << (ST_GEOMETRYTYPE - 836)) | (1L << (ST_GEOMFROMTEXT - 836)) | (1L << (ST_GEOMFROMWKB - 836)) | (1L << (ST_INTERIORRINGN - 836)) | (1L << (ST_INTERSECTION - 836)) | (1L << (ST_INTERSECTS - 836)) | (1L << (ST_ISCLOSED - 836)) | (1L << (ST_ISEMPTY - 836)) | (1L << (ST_ISSIMPLE - 836)) | (1L << (ST_LINEFROMTEXT - 836)))) != 0) || ((((_la - 900)) & ~0x3f) == 0 && ((1L << (_la - 900)) & ((1L << (ST_LINEFROMWKB - 900)) | (1L << (ST_LINESTRINGFROMTEXT - 900)) | (1L << (ST_LINESTRINGFROMWKB - 900)) | (1L << (ST_NUMGEOMETRIES - 900)) | (1L << (ST_NUMINTERIORRING - 900)) | (1L << (ST_NUMINTERIORRINGS - 900)) | (1L << (ST_NUMPOINTS - 900)) | (1L << (ST_OVERLAPS - 900)) | (1L << (ST_POINTFROMTEXT - 900)) | (1L << (ST_POINTFROMWKB - 900)) | (1L << (ST_POINTN - 900)) | (1L << (ST_POLYFROMTEXT - 900)) | (1L << (ST_POLYFROMWKB - 900)) | (1L << (ST_POLYGONFROMTEXT - 900)) | (1L << (ST_POLYGONFROMWKB - 900)) | (1L << (ST_SRID - 900)) | (1L << (ST_STARTPOINT - 900)) | (1L << (ST_SYMDIFFERENCE - 900)) | (1L << (ST_TOUCHES - 900)) | (1L << (ST_UNION - 900)) | (1L << (ST_WITHIN - 900)) | (1L << (ST_X - 900)) | (1L << (ST_Y - 900)) | (1L << (SUBDATE - 900)) | (1L << (SUBSTRING_INDEX - 900)) | (1L << (SUBTIME - 900)) | (1L << (SYSTEM_USER - 900)) | (1L << (TAN - 900)) | (1L << (TIMEDIFF - 900)) | (1L << (TIMESTAMPADD - 900)) | (1L << (TIMESTAMPDIFF - 900)) | (1L << (TIME_FORMAT - 900)) | (1L << (TIME_TO_SEC - 900)) | (1L << (TOUCHES - 900)) | (1L << (TO_BASE64 - 900)) | (1L << (TO_DAYS - 900)) | (1L << (TO_SECONDS - 900)) | (1L << (UCASE - 900)) | (1L << (UNCOMPRESS - 900)) | (1L << (UNCOMPRESSED_LENGTH - 900)) | (1L << (UNHEX - 900)) | (1L << (UNIX_TIMESTAMP - 900)) | (1L << (UPDATEXML - 900)) | (1L << (UPPER - 900)) | (1L << (UUID - 900)) | (1L << (UUID_SHORT - 900)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 900)) | (1L << (VERSION - 900)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 900)) | (1L << (WEEKDAY - 900)) | (1L << (WEEKOFYEAR - 900)) | (1L << (WEIGHT_STRING - 900)) | (1L << (WITHIN - 900)) | (1L << (YEARWEEK - 900)) | (1L << (Y_FUNCTION - 900)) | (1L << (X_FUNCTION - 900)))) != 0) || ((((_la - 994)) & ~0x3f) == 0 && ((1L << (_la - 994)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 994)) | (1L << (STRING_LITERAL - 994)) | (1L << (ID - 994)) | (1L << (REVERSE_QUOTE_ID - 994)))) != 0))
                        {
                            {
                                State = 1514; ((ForeignKeyTableConstraintContext)_localctx).index = uid();
                            }
                        }

                        State = 1517; indexColumnNames();
                        State = 1518; referenceDefinition();
                    }
                    break;
                case 4:
                    _localctx = new CheckTableConstraintContext(_localctx);
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 1524;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == CONSTRAINT)
                        {
                            {
                                State = 1520; Match(CONSTRAINT);
                                State = 1522;
                                ErrorHandler.Sync(this);
                                _la = TokenStream.LA(1);
                                if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)) | (1L << (POSITION - 191)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ACCOUNT - 259)) | (1L << (ACTION - 259)) | (1L << (AFTER - 259)) | (1L << (AGGREGATE - 259)) | (1L << (ALGORITHM - 259)) | (1L << (ANY - 259)) | (1L << (AT - 259)) | (1L << (AUTHORS - 259)) | (1L << (AUTOCOMMIT - 259)) | (1L << (AUTOEXTEND_SIZE - 259)) | (1L << (AUTO_INCREMENT - 259)) | (1L << (AVG_ROW_LENGTH - 259)) | (1L << (BEGIN - 259)) | (1L << (BINLOG - 259)) | (1L << (BIT - 259)) | (1L << (BLOCK - 259)) | (1L << (BOOL - 259)) | (1L << (BOOLEAN - 259)) | (1L << (BTREE - 259)) | (1L << (CACHE - 259)) | (1L << (CASCADED - 259)) | (1L << (CHAIN - 259)) | (1L << (CHANGED - 259)) | (1L << (CHANNEL - 259)) | (1L << (CHECKSUM - 259)) | (1L << (PAGE_CHECKSUM - 259)) | (1L << (CIPHER - 259)) | (1L << (CLASS_ORIGIN - 259)) | (1L << (CLIENT - 259)) | (1L << (CLOSE - 259)) | (1L << (COALESCE - 259)) | (1L << (CODE - 259)) | (1L << (COLUMNS - 259)) | (1L << (COLUMN_FORMAT - 259)) | (1L << (COLUMN_NAME - 259)) | (1L << (COMMENT - 259)) | (1L << (COMMIT - 259)) | (1L << (COMPACT - 259)) | (1L << (COMPLETION - 259)) | (1L << (COMPRESSED - 259)) | (1L << (COMPRESSION - 259)) | (1L << (CONCURRENT - 259)) | (1L << (CONNECTION - 259)) | (1L << (CONSISTENT - 259)) | (1L << (CONSTRAINT_CATALOG - 259)) | (1L << (CONSTRAINT_SCHEMA - 259)) | (1L << (CONSTRAINT_NAME - 259)) | (1L << (CONTAINS - 259)) | (1L << (CONTEXT - 259)) | (1L << (CONTRIBUTORS - 259)) | (1L << (COPY - 259)) | (1L << (CPU - 259)) | (1L << (CURSOR_NAME - 259)) | (1L << (DATA - 259)) | (1L << (DATAFILE - 259)) | (1L << (DEALLOCATE - 259)) | (1L << (DEFAULT_AUTH - 259)) | (1L << (DEFINER - 259)) | (1L << (DELAY_KEY_WRITE - 259)) | (1L << (DES_KEY_FILE - 259)) | (1L << (DIRECTORY - 259)) | (1L << (DISABLE - 259)) | (1L << (DISCARD - 259)) | (1L << (DISK - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (DO - 323)) | (1L << (DUMPFILE - 323)) | (1L << (DUPLICATE - 323)) | (1L << (DYNAMIC - 323)) | (1L << (ENABLE - 323)) | (1L << (ENCRYPTION - 323)) | (1L << (END - 323)) | (1L << (ENDS - 323)) | (1L << (ENGINE - 323)) | (1L << (ENGINES - 323)) | (1L << (ERROR - 323)) | (1L << (ERRORS - 323)) | (1L << (ESCAPE - 323)) | (1L << (EVEN - 323)) | (1L << (EVENT - 323)) | (1L << (EVENTS - 323)) | (1L << (EVERY - 323)) | (1L << (EXCHANGE - 323)) | (1L << (EXCLUSIVE - 323)) | (1L << (EXPIRE - 323)) | (1L << (EXPORT - 323)) | (1L << (EXTENDED - 323)) | (1L << (EXTENT_SIZE - 323)) | (1L << (FAST - 323)) | (1L << (FAULTS - 323)) | (1L << (FIELDS - 323)) | (1L << (FILE_BLOCK_SIZE - 323)) | (1L << (FILTER - 323)) | (1L << (FIRST - 323)) | (1L << (FIXED - 323)) | (1L << (FLUSH - 323)) | (1L << (FOLLOWS - 323)) | (1L << (FOUND - 323)) | (1L << (FULL - 323)) | (1L << (FUNCTION - 323)) | (1L << (GENERAL - 323)) | (1L << (GLOBAL - 323)) | (1L << (GRANTS - 323)) | (1L << (GROUP_REPLICATION - 323)) | (1L << (HANDLER - 323)) | (1L << (HASH - 323)) | (1L << (HELP - 323)) | (1L << (HOST - 323)) | (1L << (HOSTS - 323)) | (1L << (IDENTIFIED - 323)) | (1L << (IGNORE_SERVER_IDS - 323)) | (1L << (IMPORT - 323)) | (1L << (INDEXES - 323)) | (1L << (INITIAL_SIZE - 323)) | (1L << (INPLACE - 323)) | (1L << (INSERT_METHOD - 323)) | (1L << (INSTALL - 323)) | (1L << (INSTANCE - 323)) | (1L << (INVISIBLE - 323)) | (1L << (INVOKER - 323)) | (1L << (IO - 323)) | (1L << (IO_THREAD - 323)) | (1L << (IPC - 323)) | (1L << (ISOLATION - 323)) | (1L << (ISSUER - 323)) | (1L << (JSON - 323)) | (1L << (KEY_BLOCK_SIZE - 323)) | (1L << (LANGUAGE - 323)) | (1L << (LAST - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (LEAVES - 387)) | (1L << (LESS - 387)) | (1L << (LEVEL - 387)) | (1L << (LIST - 387)) | (1L << (LOCAL - 387)) | (1L << (LOGFILE - 387)) | (1L << (LOGS - 387)) | (1L << (MASTER - 387)) | (1L << (MASTER_AUTO_POSITION - 387)) | (1L << (MASTER_CONNECT_RETRY - 387)) | (1L << (MASTER_DELAY - 387)) | (1L << (MASTER_HEARTBEAT_PERIOD - 387)) | (1L << (MASTER_HOST - 387)) | (1L << (MASTER_LOG_FILE - 387)) | (1L << (MASTER_LOG_POS - 387)) | (1L << (MASTER_PASSWORD - 387)) | (1L << (MASTER_PORT - 387)) | (1L << (MASTER_RETRY_COUNT - 387)) | (1L << (MASTER_SSL - 387)) | (1L << (MASTER_SSL_CA - 387)) | (1L << (MASTER_SSL_CAPATH - 387)) | (1L << (MASTER_SSL_CERT - 387)) | (1L << (MASTER_SSL_CIPHER - 387)) | (1L << (MASTER_SSL_CRL - 387)) | (1L << (MASTER_SSL_CRLPATH - 387)) | (1L << (MASTER_SSL_KEY - 387)) | (1L << (MASTER_TLS_VERSION - 387)) | (1L << (MASTER_USER - 387)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 387)) | (1L << (MAX_QUERIES_PER_HOUR - 387)) | (1L << (MAX_ROWS - 387)) | (1L << (MAX_SIZE - 387)) | (1L << (MAX_UPDATES_PER_HOUR - 387)) | (1L << (MAX_USER_CONNECTIONS - 387)) | (1L << (MEDIUM - 387)) | (1L << (MERGE - 387)) | (1L << (MESSAGE_TEXT - 387)) | (1L << (MID - 387)) | (1L << (MIGRATE - 387)) | (1L << (MIN_ROWS - 387)) | (1L << (MODE - 387)) | (1L << (MODIFY - 387)) | (1L << (MUTEX - 387)) | (1L << (MYSQL - 387)) | (1L << (MYSQL_ERRNO - 387)) | (1L << (NAME - 387)) | (1L << (NAMES - 387)) | (1L << (NCHAR - 387)) | (1L << (NEVER - 387)) | (1L << (NEXT - 387)) | (1L << (NO - 387)) | (1L << (NODEGROUP - 387)) | (1L << (NONE - 387)) | (1L << (OFFLINE - 387)) | (1L << (OFFSET - 387)) | (1L << (OJ - 387)) | (1L << (OLD_PASSWORD - 387)) | (1L << (ONE - 387)) | (1L << (ONLINE - 387)) | (1L << (ONLY - 387)) | (1L << (OPEN - 387)) | (1L << (OPTIMIZER_COSTS - 387)) | (1L << (OPTIONS - 387)) | (1L << (OWNER - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PAGE - 451)) | (1L << (PARSER - 451)) | (1L << (PARTIAL - 451)) | (1L << (PARTITIONING - 451)) | (1L << (PARTITIONS - 451)) | (1L << (PASSWORD - 451)) | (1L << (PHASE - 451)) | (1L << (PLUGIN - 451)) | (1L << (PLUGIN_DIR - 451)) | (1L << (PLUGINS - 451)) | (1L << (PORT - 451)) | (1L << (PRECEDES - 451)) | (1L << (PREPARE - 451)) | (1L << (PRESERVE - 451)) | (1L << (PREV - 451)) | (1L << (PROCESSLIST - 451)) | (1L << (PROFILE - 451)) | (1L << (PROFILES - 451)) | (1L << (PROXY - 451)) | (1L << (QUERY - 451)) | (1L << (QUICK - 451)) | (1L << (REBUILD - 451)) | (1L << (RECOVER - 451)) | (1L << (REDO_BUFFER_SIZE - 451)) | (1L << (REDUNDANT - 451)) | (1L << (RELAY - 451)) | (1L << (RELAY_LOG_FILE - 451)) | (1L << (RELAY_LOG_POS - 451)) | (1L << (RELAYLOG - 451)) | (1L << (REMOVE - 451)) | (1L << (REORGANIZE - 451)) | (1L << (REPAIR - 451)) | (1L << (REPLICATE_DO_DB - 451)) | (1L << (REPLICATE_DO_TABLE - 451)) | (1L << (REPLICATE_IGNORE_DB - 451)) | (1L << (REPLICATE_IGNORE_TABLE - 451)) | (1L << (REPLICATE_REWRITE_DB - 451)) | (1L << (REPLICATE_WILD_DO_TABLE - 451)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 451)) | (1L << (REPLICATION - 451)) | (1L << (RESET - 451)) | (1L << (RESUME - 451)) | (1L << (RETURNED_SQLSTATE - 451)) | (1L << (RETURNS - 451)) | (1L << (ROLLBACK - 451)) | (1L << (ROLLUP - 451)) | (1L << (ROTATE - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (ROW_FORMAT - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SCHEDULE - 451)) | (1L << (SECURITY - 451)) | (1L << (SERVER - 451)) | (1L << (SESSION - 451)) | (1L << (SHARE - 451)) | (1L << (SHARED - 451)) | (1L << (SIGNED - 451)) | (1L << (SIMPLE - 451)) | (1L << (SLAVE - 451)) | (1L << (SLOW - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOCKET - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SOME - 515)) | (1L << (SONAME - 515)) | (1L << (SOUNDS - 515)) | (1L << (SOURCE - 515)) | (1L << (SQL_AFTER_GTIDS - 515)) | (1L << (SQL_AFTER_MTS_GAPS - 515)) | (1L << (SQL_BEFORE_GTIDS - 515)) | (1L << (SQL_BUFFER_RESULT - 515)) | (1L << (SQL_CACHE - 515)) | (1L << (SQL_NO_CACHE - 515)) | (1L << (SQL_THREAD - 515)) | (1L << (START - 515)) | (1L << (STARTS - 515)) | (1L << (STATS_AUTO_RECALC - 515)) | (1L << (STATS_PERSISTENT - 515)) | (1L << (STATS_SAMPLE_PAGES - 515)) | (1L << (STATUS - 515)) | (1L << (STOP - 515)) | (1L << (STORAGE - 515)) | (1L << (STRING - 515)) | (1L << (SUBCLASS_ORIGIN - 515)) | (1L << (SUBJECT - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBPARTITIONS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SWAPS - 515)) | (1L << (SWITCHES - 515)) | (1L << (TABLE_NAME - 515)) | (1L << (TABLESPACE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TEMPTABLE - 515)) | (1L << (THAN - 515)) | (1L << (TRADITIONAL - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRIGGERS - 515)) | (1L << (TRUNCATE - 515)) | (1L << (UNDEFINED - 515)) | (1L << (UNDOFILE - 515)) | (1L << (UNDO_BUFFER_SIZE - 515)) | (1L << (UNINSTALL - 515)) | (1L << (UNKNOWN - 515)) | (1L << (UNTIL - 515)) | (1L << (UPGRADE - 515)) | (1L << (USER - 515)) | (1L << (USE_FRM - 515)) | (1L << (USER_RESOURCES - 515)) | (1L << (VALIDATION - 515)) | (1L << (VALUE - 515)) | (1L << (VARIABLES - 515)) | (1L << (VIEW - 515)) | (1L << (VISIBLE - 515)) | (1L << (WAIT - 515)) | (1L << (WARNINGS - 515)) | (1L << (WITHOUT - 515)) | (1L << (WORK - 515)) | (1L << (WRAPPER - 515)) | (1L << (X509 - 515)) | (1L << (XA - 515)) | (1L << (XML - 515)))) != 0) || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (INTERNAL - 580)) | (1L << (QUARTER - 580)) | (1L << (MONTH - 580)) | (1L << (DAY - 580)) | (1L << (HOUR - 580)) | (1L << (MINUTE - 580)) | (1L << (WEEK - 580)) | (1L << (SECOND - 580)) | (1L << (MICROSECOND - 580)) | (1L << (TABLES - 580)) | (1L << (ROUTINE - 580)) | (1L << (EXECUTE - 580)) | (1L << (FILE - 580)) | (1L << (PROCESS - 580)) | (1L << (RELOAD - 580)) | (1L << (SHUTDOWN - 580)) | (1L << (SUPER - 580)) | (1L << (PRIVILEGES - 580)) | (1L << (SESSION_VARIABLES_ADMIN - 580)) | (1L << (ARMSCII8 - 580)) | (1L << (ASCII - 580)) | (1L << (BIG5 - 580)) | (1L << (CP1250 - 580)) | (1L << (CP1251 - 580)) | (1L << (CP1256 - 580)) | (1L << (CP1257 - 580)) | (1L << (CP850 - 580)) | (1L << (CP852 - 580)) | (1L << (CP866 - 580)) | (1L << (CP932 - 580)) | (1L << (DEC8 - 580)) | (1L << (EUCJPMS - 580)) | (1L << (EUCKR - 580)) | (1L << (GB2312 - 580)) | (1L << (GBK - 580)) | (1L << (GEOSTD8 - 580)) | (1L << (GREEK - 580)) | (1L << (HEBREW - 580)) | (1L << (HP8 - 580)) | (1L << (KEYBCS2 - 580)) | (1L << (KOI8R - 580)) | (1L << (KOI8U - 580)) | (1L << (LATIN1 - 580)) | (1L << (LATIN2 - 580)) | (1L << (LATIN5 - 580)) | (1L << (LATIN7 - 580)) | (1L << (MACCE - 580)) | (1L << (MACROMAN - 580)) | (1L << (SJIS - 580)) | (1L << (SWE7 - 580)) | (1L << (TIS620 - 580)) | (1L << (UCS2 - 580)) | (1L << (UJIS - 580)) | (1L << (UTF16 - 580)) | (1L << (UTF16LE - 580)) | (1L << (UTF32 - 580)) | (1L << (UTF8 - 580)) | (1L << (UTF8MB3 - 580)) | (1L << (UTF8MB4 - 580)) | (1L << (ARCHIVE - 580)) | (1L << (BLACKHOLE - 580)) | (1L << (CSV - 580)) | (1L << (FEDERATED - 580)) | (1L << (INNODB - 580)))) != 0) || ((((_la - 644)) & ~0x3f) == 0 && ((1L << (_la - 644)) & ((1L << (MEMORY - 644)) | (1L << (MRG_MYISAM - 644)) | (1L << (MYISAM - 644)) | (1L << (NDB - 644)) | (1L << (NDBCLUSTER - 644)) | (1L << (PERFORMANCE_SCHEMA - 644)) | (1L << (TOKUDB - 644)) | (1L << (REPEATABLE - 644)) | (1L << (COMMITTED - 644)) | (1L << (UNCOMMITTED - 644)) | (1L << (SERIALIZABLE - 644)) | (1L << (GEOMETRYCOLLECTION - 644)) | (1L << (LINESTRING - 644)) | (1L << (MULTILINESTRING - 644)) | (1L << (MULTIPOINT - 644)) | (1L << (MULTIPOLYGON - 644)) | (1L << (POINT - 644)) | (1L << (POLYGON - 644)) | (1L << (ABS - 644)) | (1L << (ACOS - 644)) | (1L << (ADDDATE - 644)) | (1L << (ADDTIME - 644)) | (1L << (AES_DECRYPT - 644)) | (1L << (AES_ENCRYPT - 644)) | (1L << (AREA - 644)) | (1L << (ASBINARY - 644)) | (1L << (ASIN - 644)) | (1L << (ASTEXT - 644)) | (1L << (ASWKB - 644)) | (1L << (ASWKT - 644)) | (1L << (ASYMMETRIC_DECRYPT - 644)) | (1L << (ASYMMETRIC_DERIVE - 644)) | (1L << (ASYMMETRIC_ENCRYPT - 644)) | (1L << (ASYMMETRIC_SIGN - 644)) | (1L << (ASYMMETRIC_VERIFY - 644)) | (1L << (ATAN - 644)) | (1L << (ATAN2 - 644)) | (1L << (BENCHMARK - 644)) | (1L << (BIN - 644)) | (1L << (BIT_COUNT - 644)) | (1L << (BIT_LENGTH - 644)) | (1L << (BUFFER - 644)) | (1L << (CATALOG_NAME - 644)) | (1L << (CEIL - 644)) | (1L << (CEILING - 644)) | (1L << (CENTROID - 644)) | (1L << (CHARACTER_LENGTH - 644)) | (1L << (CHARSET - 644)) | (1L << (CHAR_LENGTH - 644)) | (1L << (COERCIBILITY - 644)) | (1L << (COLLATION - 644)) | (1L << (COMPRESS - 644)) | (1L << (CONCAT - 644)) | (1L << (CONCAT_WS - 644)) | (1L << (CONNECTION_ID - 644)) | (1L << (CONV - 644)) | (1L << (CONVERT_TZ - 644)) | (1L << (COS - 644)) | (1L << (COT - 644)) | (1L << (CRC32 - 644)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 644)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 644)))) != 0) || ((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (CREATE_DH_PARAMETERS - 708)) | (1L << (CREATE_DIGEST - 708)) | (1L << (CROSSES - 708)) | (1L << (DATEDIFF - 708)) | (1L << (DATE_FORMAT - 708)) | (1L << (DAYNAME - 708)) | (1L << (DAYOFMONTH - 708)) | (1L << (DAYOFWEEK - 708)) | (1L << (DAYOFYEAR - 708)) | (1L << (DECODE - 708)) | (1L << (DEGREES - 708)) | (1L << (DES_DECRYPT - 708)) | (1L << (DES_ENCRYPT - 708)) | (1L << (DIMENSION - 708)) | (1L << (DISJOINT - 708)) | (1L << (ELT - 708)) | (1L << (ENCODE - 708)) | (1L << (ENCRYPT - 708)) | (1L << (ENDPOINT - 708)) | (1L << (ENVELOPE - 708)) | (1L << (EQUALS - 708)) | (1L << (EXP - 708)) | (1L << (EXPORT_SET - 708)) | (1L << (EXTERIORRING - 708)) | (1L << (EXTRACTVALUE - 708)) | (1L << (FIELD - 708)) | (1L << (FIND_IN_SET - 708)) | (1L << (FLOOR - 708)) | (1L << (FORMAT - 708)) | (1L << (FOUND_ROWS - 708)) | (1L << (FROM_BASE64 - 708)) | (1L << (FROM_DAYS - 708)) | (1L << (FROM_UNIXTIME - 708)) | (1L << (GEOMCOLLFROMTEXT - 708)) | (1L << (GEOMCOLLFROMWKB - 708)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 708)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 708)) | (1L << (GEOMETRYFROMTEXT - 708)) | (1L << (GEOMETRYFROMWKB - 708)) | (1L << (GEOMETRYN - 708)) | (1L << (GEOMETRYTYPE - 708)) | (1L << (GEOMFROMTEXT - 708)) | (1L << (GEOMFROMWKB - 708)) | (1L << (GET_FORMAT - 708)) | (1L << (GET_LOCK - 708)) | (1L << (GLENGTH - 708)) | (1L << (GREATEST - 708)) | (1L << (GTID_SUBSET - 708)) | (1L << (GTID_SUBTRACT - 708)) | (1L << (HEX - 708)) | (1L << (IFNULL - 708)) | (1L << (INET6_ATON - 708)) | (1L << (INET6_NTOA - 708)) | (1L << (INET_ATON - 708)) | (1L << (INET_NTOA - 708)) | (1L << (INSTR - 708)) | (1L << (INTERIORRINGN - 708)) | (1L << (INTERSECTS - 708)) | (1L << (ISCLOSED - 708)) | (1L << (ISEMPTY - 708)) | (1L << (ISNULL - 708)) | (1L << (ISSIMPLE - 708)) | (1L << (IS_FREE_LOCK - 708)) | (1L << (IS_IPV4 - 708)))) != 0) || ((((_la - 772)) & ~0x3f) == 0 && ((1L << (_la - 772)) & ((1L << (IS_IPV4_COMPAT - 772)) | (1L << (IS_IPV4_MAPPED - 772)) | (1L << (IS_IPV6 - 772)) | (1L << (IS_USED_LOCK - 772)) | (1L << (LAST_INSERT_ID - 772)) | (1L << (LCASE - 772)) | (1L << (LEAST - 772)) | (1L << (LENGTH - 772)) | (1L << (LINEFROMTEXT - 772)) | (1L << (LINEFROMWKB - 772)) | (1L << (LINESTRINGFROMTEXT - 772)) | (1L << (LINESTRINGFROMWKB - 772)) | (1L << (LN - 772)) | (1L << (LOAD_FILE - 772)) | (1L << (LOCATE - 772)) | (1L << (LOG - 772)) | (1L << (LOG10 - 772)) | (1L << (LOG2 - 772)) | (1L << (LOWER - 772)) | (1L << (LPAD - 772)) | (1L << (LTRIM - 772)) | (1L << (MAKEDATE - 772)) | (1L << (MAKETIME - 772)) | (1L << (MAKE_SET - 772)) | (1L << (MASTER_POS_WAIT - 772)) | (1L << (MBRCONTAINS - 772)) | (1L << (MBRDISJOINT - 772)) | (1L << (MBREQUAL - 772)) | (1L << (MBRINTERSECTS - 772)) | (1L << (MBROVERLAPS - 772)) | (1L << (MBRTOUCHES - 772)) | (1L << (MBRWITHIN - 772)) | (1L << (MD5 - 772)) | (1L << (MLINEFROMTEXT - 772)) | (1L << (MLINEFROMWKB - 772)) | (1L << (MONTHNAME - 772)) | (1L << (MPOINTFROMTEXT - 772)) | (1L << (MPOINTFROMWKB - 772)) | (1L << (MPOLYFROMTEXT - 772)) | (1L << (MPOLYFROMWKB - 772)) | (1L << (MULTILINESTRINGFROMTEXT - 772)) | (1L << (MULTILINESTRINGFROMWKB - 772)) | (1L << (MULTIPOINTFROMTEXT - 772)) | (1L << (MULTIPOINTFROMWKB - 772)) | (1L << (MULTIPOLYGONFROMTEXT - 772)) | (1L << (MULTIPOLYGONFROMWKB - 772)) | (1L << (NAME_CONST - 772)) | (1L << (NULLIF - 772)) | (1L << (NUMGEOMETRIES - 772)) | (1L << (NUMINTERIORRINGS - 772)) | (1L << (NUMPOINTS - 772)) | (1L << (OCT - 772)) | (1L << (OCTET_LENGTH - 772)) | (1L << (ORD - 772)) | (1L << (OVERLAPS - 772)) | (1L << (PERIOD_ADD - 772)) | (1L << (PERIOD_DIFF - 772)) | (1L << (PI - 772)) | (1L << (POINTFROMTEXT - 772)) | (1L << (POINTFROMWKB - 772)) | (1L << (POINTN - 772)) | (1L << (POLYFROMTEXT - 772)) | (1L << (POLYFROMWKB - 772)) | (1L << (POLYGONFROMTEXT - 772)))) != 0) || ((((_la - 836)) & ~0x3f) == 0 && ((1L << (_la - 836)) & ((1L << (POLYGONFROMWKB - 836)) | (1L << (POW - 836)) | (1L << (POWER - 836)) | (1L << (QUOTE - 836)) | (1L << (RADIANS - 836)) | (1L << (RAND - 836)) | (1L << (RANDOM_BYTES - 836)) | (1L << (RELEASE_LOCK - 836)) | (1L << (REVERSE - 836)) | (1L << (ROUND - 836)) | (1L << (ROW_COUNT - 836)) | (1L << (RPAD - 836)) | (1L << (RTRIM - 836)) | (1L << (SEC_TO_TIME - 836)) | (1L << (SESSION_USER - 836)) | (1L << (SHA - 836)) | (1L << (SHA1 - 836)) | (1L << (SHA2 - 836)) | (1L << (SCHEMA_NAME - 836)) | (1L << (SIGN - 836)) | (1L << (SIN - 836)) | (1L << (SLEEP - 836)) | (1L << (SOUNDEX - 836)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 836)) | (1L << (SQRT - 836)) | (1L << (SRID - 836)) | (1L << (STARTPOINT - 836)) | (1L << (STRCMP - 836)) | (1L << (STR_TO_DATE - 836)) | (1L << (ST_AREA - 836)) | (1L << (ST_ASBINARY - 836)) | (1L << (ST_ASTEXT - 836)) | (1L << (ST_ASWKB - 836)) | (1L << (ST_ASWKT - 836)) | (1L << (ST_BUFFER - 836)) | (1L << (ST_CENTROID - 836)) | (1L << (ST_CONTAINS - 836)) | (1L << (ST_CROSSES - 836)) | (1L << (ST_DIFFERENCE - 836)) | (1L << (ST_DIMENSION - 836)) | (1L << (ST_DISJOINT - 836)) | (1L << (ST_DISTANCE - 836)) | (1L << (ST_ENDPOINT - 836)) | (1L << (ST_ENVELOPE - 836)) | (1L << (ST_EQUALS - 836)) | (1L << (ST_EXTERIORRING - 836)) | (1L << (ST_GEOMCOLLFROMTEXT - 836)) | (1L << (ST_GEOMCOLLFROMTXT - 836)) | (1L << (ST_GEOMCOLLFROMWKB - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 836)) | (1L << (ST_GEOMETRYFROMTEXT - 836)) | (1L << (ST_GEOMETRYFROMWKB - 836)) | (1L << (ST_GEOMETRYN - 836)) | (1L << (ST_GEOMETRYTYPE - 836)) | (1L << (ST_GEOMFROMTEXT - 836)) | (1L << (ST_GEOMFROMWKB - 836)) | (1L << (ST_INTERIORRINGN - 836)) | (1L << (ST_INTERSECTION - 836)) | (1L << (ST_INTERSECTS - 836)) | (1L << (ST_ISCLOSED - 836)) | (1L << (ST_ISEMPTY - 836)) | (1L << (ST_ISSIMPLE - 836)) | (1L << (ST_LINEFROMTEXT - 836)))) != 0) || ((((_la - 900)) & ~0x3f) == 0 && ((1L << (_la - 900)) & ((1L << (ST_LINEFROMWKB - 900)) | (1L << (ST_LINESTRINGFROMTEXT - 900)) | (1L << (ST_LINESTRINGFROMWKB - 900)) | (1L << (ST_NUMGEOMETRIES - 900)) | (1L << (ST_NUMINTERIORRING - 900)) | (1L << (ST_NUMINTERIORRINGS - 900)) | (1L << (ST_NUMPOINTS - 900)) | (1L << (ST_OVERLAPS - 900)) | (1L << (ST_POINTFROMTEXT - 900)) | (1L << (ST_POINTFROMWKB - 900)) | (1L << (ST_POINTN - 900)) | (1L << (ST_POLYFROMTEXT - 900)) | (1L << (ST_POLYFROMWKB - 900)) | (1L << (ST_POLYGONFROMTEXT - 900)) | (1L << (ST_POLYGONFROMWKB - 900)) | (1L << (ST_SRID - 900)) | (1L << (ST_STARTPOINT - 900)) | (1L << (ST_SYMDIFFERENCE - 900)) | (1L << (ST_TOUCHES - 900)) | (1L << (ST_UNION - 900)) | (1L << (ST_WITHIN - 900)) | (1L << (ST_X - 900)) | (1L << (ST_Y - 900)) | (1L << (SUBDATE - 900)) | (1L << (SUBSTRING_INDEX - 900)) | (1L << (SUBTIME - 900)) | (1L << (SYSTEM_USER - 900)) | (1L << (TAN - 900)) | (1L << (TIMEDIFF - 900)) | (1L << (TIMESTAMPADD - 900)) | (1L << (TIMESTAMPDIFF - 900)) | (1L << (TIME_FORMAT - 900)) | (1L << (TIME_TO_SEC - 900)) | (1L << (TOUCHES - 900)) | (1L << (TO_BASE64 - 900)) | (1L << (TO_DAYS - 900)) | (1L << (TO_SECONDS - 900)) | (1L << (UCASE - 900)) | (1L << (UNCOMPRESS - 900)) | (1L << (UNCOMPRESSED_LENGTH - 900)) | (1L << (UNHEX - 900)) | (1L << (UNIX_TIMESTAMP - 900)) | (1L << (UPDATEXML - 900)) | (1L << (UPPER - 900)) | (1L << (UUID - 900)) | (1L << (UUID_SHORT - 900)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 900)) | (1L << (VERSION - 900)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 900)) | (1L << (WEEKDAY - 900)) | (1L << (WEEKOFYEAR - 900)) | (1L << (WEIGHT_STRING - 900)) | (1L << (WITHIN - 900)) | (1L << (YEARWEEK - 900)) | (1L << (Y_FUNCTION - 900)) | (1L << (X_FUNCTION - 900)))) != 0) || ((((_la - 994)) & ~0x3f) == 0 && ((1L << (_la - 994)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 994)) | (1L << (STRING_LITERAL - 994)) | (1L << (ID - 994)) | (1L << (REVERSE_QUOTE_ID - 994)))) != 0))
                                {
                                    {
                                        State = 1521; ((CheckTableConstraintContext)_localctx).name = uid();
                                    }
                                }

                            }
                        }

                        State = 1526; Match(CHECK);
                        State = 1527; Match(LR_BRACKET);
                        State = 1528; expression(0);
                        State = 1529; Match(RR_BRACKET);
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ReferenceDefinitionContext : ParserRuleContext
    {
        public IToken matchType;
        public ITerminalNode REFERENCES() { return GetToken(MySqlParser.REFERENCES, 0); }
        public TableNameContext tableName()
        {
            return GetRuleContext<TableNameContext>(0);
        }
        public IndexColumnNamesContext indexColumnNames()
        {
            return GetRuleContext<IndexColumnNamesContext>(0);
        }
        public ITerminalNode MATCH() { return GetToken(MySqlParser.MATCH, 0); }
        public ReferenceActionContext referenceAction()
        {
            return GetRuleContext<ReferenceActionContext>(0);
        }
        public ITerminalNode FULL() { return GetToken(MySqlParser.FULL, 0); }
        public ITerminalNode PARTIAL() { return GetToken(MySqlParser.PARTIAL, 0); }
        public ITerminalNode SIMPLE() { return GetToken(MySqlParser.SIMPLE, 0); }
        public ReferenceDefinitionContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_referenceDefinition; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterReferenceDefinition(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitReferenceDefinition(this);
        }
    }

    [RuleVersion(0)]
    public ReferenceDefinitionContext referenceDefinition()
    {
        ReferenceDefinitionContext _localctx = new ReferenceDefinitionContext(Context, State);
        EnterRule(_localctx, 84, RULE_referenceDefinition);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 1533; Match(REFERENCES);
                State = 1534; tableName();
                State = 1536;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 154, Context))
                {
                    case 1:
                        {
                            State = 1535; indexColumnNames();
                        }
                        break;
                }
                State = 1540;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == MATCH)
                {
                    {
                        State = 1538; Match(MATCH);
                        State = 1539;
                        _localctx.matchType = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == FULL || _la == PARTIAL || _la == SIMPLE))
                        {
                            _localctx.matchType = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                }

                State = 1543;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 156, Context))
                {
                    case 1:
                        {
                            State = 1542; referenceAction();
                        }
                        break;
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ReferenceActionContext : ParserRuleContext
    {
        public ReferenceControlTypeContext onDelete;
        public ReferenceControlTypeContext onUpdate;
        public ITerminalNode[] ON() { return GetTokens(MySqlParser.ON); }
        public ITerminalNode ON(int i)
        {
            return GetToken(MySqlParser.ON, i);
        }
        public ITerminalNode DELETE() { return GetToken(MySqlParser.DELETE, 0); }
        public ReferenceControlTypeContext[] referenceControlType()
        {
            return GetRuleContexts<ReferenceControlTypeContext>();
        }
        public ReferenceControlTypeContext referenceControlType(int i)
        {
            return GetRuleContext<ReferenceControlTypeContext>(i);
        }
        public ITerminalNode UPDATE() { return GetToken(MySqlParser.UPDATE, 0); }
        public ReferenceActionContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_referenceAction; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterReferenceAction(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitReferenceAction(this);
        }
    }

    [RuleVersion(0)]
    public ReferenceActionContext referenceAction()
    {
        ReferenceActionContext _localctx = new ReferenceActionContext(Context, State);
        EnterRule(_localctx, 86, RULE_referenceAction);
        try
        {
            State = 1561;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 159, Context))
            {
                case 1:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 1545; Match(ON);
                        State = 1546; Match(DELETE);
                        State = 1547; _localctx.onDelete = referenceControlType();
                        State = 1551;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 157, Context))
                        {
                            case 1:
                                {
                                    State = 1548; Match(ON);
                                    State = 1549; Match(UPDATE);
                                    State = 1550; _localctx.onUpdate = referenceControlType();
                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 1553; Match(ON);
                        State = 1554; Match(UPDATE);
                        State = 1555; _localctx.onUpdate = referenceControlType();
                        State = 1559;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 158, Context))
                        {
                            case 1:
                                {
                                    State = 1556; Match(ON);
                                    State = 1557; Match(DELETE);
                                    State = 1558; _localctx.onDelete = referenceControlType();
                                }
                                break;
                        }
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ReferenceControlTypeContext : ParserRuleContext
    {
        public ITerminalNode RESTRICT() { return GetToken(MySqlParser.RESTRICT, 0); }
        public ITerminalNode CASCADE() { return GetToken(MySqlParser.CASCADE, 0); }
        public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
        public ITerminalNode NULL_LITERAL() { return GetToken(MySqlParser.NULL_LITERAL, 0); }
        public ITerminalNode NO() { return GetToken(MySqlParser.NO, 0); }
        public ITerminalNode ACTION() { return GetToken(MySqlParser.ACTION, 0); }
        public ReferenceControlTypeContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_referenceControlType; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterReferenceControlType(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitReferenceControlType(this);
        }
    }

    [RuleVersion(0)]
    public ReferenceControlTypeContext referenceControlType()
    {
        ReferenceControlTypeContext _localctx = new ReferenceControlTypeContext(Context, State);
        EnterRule(_localctx, 88, RULE_referenceControlType);
        try
        {
            State = 1569;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case RESTRICT:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 1563; Match(RESTRICT);
                    }
                    break;
                case CASCADE:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 1564; Match(CASCADE);
                    }
                    break;
                case SET:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 1565; Match(SET);
                        State = 1566; Match(NULL_LITERAL);
                    }
                    break;
                case NO:
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 1567; Match(NO);
                        State = 1568; Match(ACTION);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class IndexColumnDefinitionContext : ParserRuleContext
    {
        public IndexColumnDefinitionContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_indexColumnDefinition; } }

        public IndexColumnDefinitionContext() { }
        public virtual void CopyFrom(IndexColumnDefinitionContext context)
        {
            base.CopyFrom(context);
        }
    }
    public partial class SpecialIndexDeclarationContext : IndexColumnDefinitionContext
    {
        public IToken indexFormat;
        public IndexColumnNamesContext indexColumnNames()
        {
            return GetRuleContext<IndexColumnNamesContext>(0);
        }
        public ITerminalNode FULLTEXT() { return GetToken(MySqlParser.FULLTEXT, 0); }
        public ITerminalNode SPATIAL() { return GetToken(MySqlParser.SPATIAL, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public IndexOptionContext[] indexOption()
        {
            return GetRuleContexts<IndexOptionContext>();
        }
        public IndexOptionContext indexOption(int i)
        {
            return GetRuleContext<IndexOptionContext>(i);
        }
        public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
        public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
        public SpecialIndexDeclarationContext(IndexColumnDefinitionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterSpecialIndexDeclaration(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitSpecialIndexDeclaration(this);
        }
    }
    public partial class SimpleIndexDeclarationContext : IndexColumnDefinitionContext
    {
        public IToken indexFormat;
        public IndexColumnNamesContext indexColumnNames()
        {
            return GetRuleContext<IndexColumnNamesContext>(0);
        }
        public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
        public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public IndexTypeContext indexType()
        {
            return GetRuleContext<IndexTypeContext>(0);
        }
        public IndexOptionContext[] indexOption()
        {
            return GetRuleContexts<IndexOptionContext>();
        }
        public IndexOptionContext indexOption(int i)
        {
            return GetRuleContext<IndexOptionContext>(i);
        }
        public SimpleIndexDeclarationContext(IndexColumnDefinitionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterSimpleIndexDeclaration(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitSimpleIndexDeclaration(this);
        }
    }

    [RuleVersion(0)]
    public IndexColumnDefinitionContext indexColumnDefinition()
    {
        IndexColumnDefinitionContext _localctx = new IndexColumnDefinitionContext(Context, State);
        EnterRule(_localctx, 90, RULE_indexColumnDefinition);
        int _la;
        try
        {
            State = 1599;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case INDEX:
                case KEY:
                    _localctx = new SimpleIndexDeclarationContext(_localctx);
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 1571;
                        ((SimpleIndexDeclarationContext)_localctx).indexFormat = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == INDEX || _la == KEY))
                        {
                            ((SimpleIndexDeclarationContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                        State = 1573;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)) | (1L << (POSITION - 191)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ACCOUNT - 259)) | (1L << (ACTION - 259)) | (1L << (AFTER - 259)) | (1L << (AGGREGATE - 259)) | (1L << (ALGORITHM - 259)) | (1L << (ANY - 259)) | (1L << (AT - 259)) | (1L << (AUTHORS - 259)) | (1L << (AUTOCOMMIT - 259)) | (1L << (AUTOEXTEND_SIZE - 259)) | (1L << (AUTO_INCREMENT - 259)) | (1L << (AVG_ROW_LENGTH - 259)) | (1L << (BEGIN - 259)) | (1L << (BINLOG - 259)) | (1L << (BIT - 259)) | (1L << (BLOCK - 259)) | (1L << (BOOL - 259)) | (1L << (BOOLEAN - 259)) | (1L << (BTREE - 259)) | (1L << (CACHE - 259)) | (1L << (CASCADED - 259)) | (1L << (CHAIN - 259)) | (1L << (CHANGED - 259)) | (1L << (CHANNEL - 259)) | (1L << (CHECKSUM - 259)) | (1L << (PAGE_CHECKSUM - 259)) | (1L << (CIPHER - 259)) | (1L << (CLASS_ORIGIN - 259)) | (1L << (CLIENT - 259)) | (1L << (CLOSE - 259)) | (1L << (COALESCE - 259)) | (1L << (CODE - 259)) | (1L << (COLUMNS - 259)) | (1L << (COLUMN_FORMAT - 259)) | (1L << (COLUMN_NAME - 259)) | (1L << (COMMENT - 259)) | (1L << (COMMIT - 259)) | (1L << (COMPACT - 259)) | (1L << (COMPLETION - 259)) | (1L << (COMPRESSED - 259)) | (1L << (COMPRESSION - 259)) | (1L << (CONCURRENT - 259)) | (1L << (CONNECTION - 259)) | (1L << (CONSISTENT - 259)) | (1L << (CONSTRAINT_CATALOG - 259)) | (1L << (CONSTRAINT_SCHEMA - 259)) | (1L << (CONSTRAINT_NAME - 259)) | (1L << (CONTAINS - 259)) | (1L << (CONTEXT - 259)) | (1L << (CONTRIBUTORS - 259)) | (1L << (COPY - 259)) | (1L << (CPU - 259)) | (1L << (CURSOR_NAME - 259)) | (1L << (DATA - 259)) | (1L << (DATAFILE - 259)) | (1L << (DEALLOCATE - 259)) | (1L << (DEFAULT_AUTH - 259)) | (1L << (DEFINER - 259)) | (1L << (DELAY_KEY_WRITE - 259)) | (1L << (DES_KEY_FILE - 259)) | (1L << (DIRECTORY - 259)) | (1L << (DISABLE - 259)) | (1L << (DISCARD - 259)) | (1L << (DISK - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (DO - 323)) | (1L << (DUMPFILE - 323)) | (1L << (DUPLICATE - 323)) | (1L << (DYNAMIC - 323)) | (1L << (ENABLE - 323)) | (1L << (ENCRYPTION - 323)) | (1L << (END - 323)) | (1L << (ENDS - 323)) | (1L << (ENGINE - 323)) | (1L << (ENGINES - 323)) | (1L << (ERROR - 323)) | (1L << (ERRORS - 323)) | (1L << (ESCAPE - 323)) | (1L << (EVEN - 323)) | (1L << (EVENT - 323)) | (1L << (EVENTS - 323)) | (1L << (EVERY - 323)) | (1L << (EXCHANGE - 323)) | (1L << (EXCLUSIVE - 323)) | (1L << (EXPIRE - 323)) | (1L << (EXPORT - 323)) | (1L << (EXTENDED - 323)) | (1L << (EXTENT_SIZE - 323)) | (1L << (FAST - 323)) | (1L << (FAULTS - 323)) | (1L << (FIELDS - 323)) | (1L << (FILE_BLOCK_SIZE - 323)) | (1L << (FILTER - 323)) | (1L << (FIRST - 323)) | (1L << (FIXED - 323)) | (1L << (FLUSH - 323)) | (1L << (FOLLOWS - 323)) | (1L << (FOUND - 323)) | (1L << (FULL - 323)) | (1L << (FUNCTION - 323)) | (1L << (GENERAL - 323)) | (1L << (GLOBAL - 323)) | (1L << (GRANTS - 323)) | (1L << (GROUP_REPLICATION - 323)) | (1L << (HANDLER - 323)) | (1L << (HASH - 323)) | (1L << (HELP - 323)) | (1L << (HOST - 323)) | (1L << (HOSTS - 323)) | (1L << (IDENTIFIED - 323)) | (1L << (IGNORE_SERVER_IDS - 323)) | (1L << (IMPORT - 323)) | (1L << (INDEXES - 323)) | (1L << (INITIAL_SIZE - 323)) | (1L << (INPLACE - 323)) | (1L << (INSERT_METHOD - 323)) | (1L << (INSTALL - 323)) | (1L << (INSTANCE - 323)) | (1L << (INVISIBLE - 323)) | (1L << (INVOKER - 323)) | (1L << (IO - 323)) | (1L << (IO_THREAD - 323)) | (1L << (IPC - 323)) | (1L << (ISOLATION - 323)) | (1L << (ISSUER - 323)) | (1L << (JSON - 323)) | (1L << (KEY_BLOCK_SIZE - 323)) | (1L << (LANGUAGE - 323)) | (1L << (LAST - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (LEAVES - 387)) | (1L << (LESS - 387)) | (1L << (LEVEL - 387)) | (1L << (LIST - 387)) | (1L << (LOCAL - 387)) | (1L << (LOGFILE - 387)) | (1L << (LOGS - 387)) | (1L << (MASTER - 387)) | (1L << (MASTER_AUTO_POSITION - 387)) | (1L << (MASTER_CONNECT_RETRY - 387)) | (1L << (MASTER_DELAY - 387)) | (1L << (MASTER_HEARTBEAT_PERIOD - 387)) | (1L << (MASTER_HOST - 387)) | (1L << (MASTER_LOG_FILE - 387)) | (1L << (MASTER_LOG_POS - 387)) | (1L << (MASTER_PASSWORD - 387)) | (1L << (MASTER_PORT - 387)) | (1L << (MASTER_RETRY_COUNT - 387)) | (1L << (MASTER_SSL - 387)) | (1L << (MASTER_SSL_CA - 387)) | (1L << (MASTER_SSL_CAPATH - 387)) | (1L << (MASTER_SSL_CERT - 387)) | (1L << (MASTER_SSL_CIPHER - 387)) | (1L << (MASTER_SSL_CRL - 387)) | (1L << (MASTER_SSL_CRLPATH - 387)) | (1L << (MASTER_SSL_KEY - 387)) | (1L << (MASTER_TLS_VERSION - 387)) | (1L << (MASTER_USER - 387)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 387)) | (1L << (MAX_QUERIES_PER_HOUR - 387)) | (1L << (MAX_ROWS - 387)) | (1L << (MAX_SIZE - 387)) | (1L << (MAX_UPDATES_PER_HOUR - 387)) | (1L << (MAX_USER_CONNECTIONS - 387)) | (1L << (MEDIUM - 387)) | (1L << (MERGE - 387)) | (1L << (MESSAGE_TEXT - 387)) | (1L << (MID - 387)) | (1L << (MIGRATE - 387)) | (1L << (MIN_ROWS - 387)) | (1L << (MODE - 387)) | (1L << (MODIFY - 387)) | (1L << (MUTEX - 387)) | (1L << (MYSQL - 387)) | (1L << (MYSQL_ERRNO - 387)) | (1L << (NAME - 387)) | (1L << (NAMES - 387)) | (1L << (NCHAR - 387)) | (1L << (NEVER - 387)) | (1L << (NEXT - 387)) | (1L << (NO - 387)) | (1L << (NODEGROUP - 387)) | (1L << (NONE - 387)) | (1L << (OFFLINE - 387)) | (1L << (OFFSET - 387)) | (1L << (OJ - 387)) | (1L << (OLD_PASSWORD - 387)) | (1L << (ONE - 387)) | (1L << (ONLINE - 387)) | (1L << (ONLY - 387)) | (1L << (OPEN - 387)) | (1L << (OPTIMIZER_COSTS - 387)) | (1L << (OPTIONS - 387)) | (1L << (OWNER - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PAGE - 451)) | (1L << (PARSER - 451)) | (1L << (PARTIAL - 451)) | (1L << (PARTITIONING - 451)) | (1L << (PARTITIONS - 451)) | (1L << (PASSWORD - 451)) | (1L << (PHASE - 451)) | (1L << (PLUGIN - 451)) | (1L << (PLUGIN_DIR - 451)) | (1L << (PLUGINS - 451)) | (1L << (PORT - 451)) | (1L << (PRECEDES - 451)) | (1L << (PREPARE - 451)) | (1L << (PRESERVE - 451)) | (1L << (PREV - 451)) | (1L << (PROCESSLIST - 451)) | (1L << (PROFILE - 451)) | (1L << (PROFILES - 451)) | (1L << (PROXY - 451)) | (1L << (QUERY - 451)) | (1L << (QUICK - 451)) | (1L << (REBUILD - 451)) | (1L << (RECOVER - 451)) | (1L << (REDO_BUFFER_SIZE - 451)) | (1L << (REDUNDANT - 451)) | (1L << (RELAY - 451)) | (1L << (RELAY_LOG_FILE - 451)) | (1L << (RELAY_LOG_POS - 451)) | (1L << (RELAYLOG - 451)) | (1L << (REMOVE - 451)) | (1L << (REORGANIZE - 451)) | (1L << (REPAIR - 451)) | (1L << (REPLICATE_DO_DB - 451)) | (1L << (REPLICATE_DO_TABLE - 451)) | (1L << (REPLICATE_IGNORE_DB - 451)) | (1L << (REPLICATE_IGNORE_TABLE - 451)) | (1L << (REPLICATE_REWRITE_DB - 451)) | (1L << (REPLICATE_WILD_DO_TABLE - 451)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 451)) | (1L << (REPLICATION - 451)) | (1L << (RESET - 451)) | (1L << (RESUME - 451)) | (1L << (RETURNED_SQLSTATE - 451)) | (1L << (RETURNS - 451)) | (1L << (ROLLBACK - 451)) | (1L << (ROLLUP - 451)) | (1L << (ROTATE - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (ROW_FORMAT - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SCHEDULE - 451)) | (1L << (SECURITY - 451)) | (1L << (SERVER - 451)) | (1L << (SESSION - 451)) | (1L << (SHARE - 451)) | (1L << (SHARED - 451)) | (1L << (SIGNED - 451)) | (1L << (SIMPLE - 451)) | (1L << (SLAVE - 451)) | (1L << (SLOW - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOCKET - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SOME - 515)) | (1L << (SONAME - 515)) | (1L << (SOUNDS - 515)) | (1L << (SOURCE - 515)) | (1L << (SQL_AFTER_GTIDS - 515)) | (1L << (SQL_AFTER_MTS_GAPS - 515)) | (1L << (SQL_BEFORE_GTIDS - 515)) | (1L << (SQL_BUFFER_RESULT - 515)) | (1L << (SQL_CACHE - 515)) | (1L << (SQL_NO_CACHE - 515)) | (1L << (SQL_THREAD - 515)) | (1L << (START - 515)) | (1L << (STARTS - 515)) | (1L << (STATS_AUTO_RECALC - 515)) | (1L << (STATS_PERSISTENT - 515)) | (1L << (STATS_SAMPLE_PAGES - 515)) | (1L << (STATUS - 515)) | (1L << (STOP - 515)) | (1L << (STORAGE - 515)) | (1L << (STRING - 515)) | (1L << (SUBCLASS_ORIGIN - 515)) | (1L << (SUBJECT - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBPARTITIONS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SWAPS - 515)) | (1L << (SWITCHES - 515)) | (1L << (TABLE_NAME - 515)) | (1L << (TABLESPACE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TEMPTABLE - 515)) | (1L << (THAN - 515)) | (1L << (TRADITIONAL - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRIGGERS - 515)) | (1L << (TRUNCATE - 515)) | (1L << (UNDEFINED - 515)) | (1L << (UNDOFILE - 515)) | (1L << (UNDO_BUFFER_SIZE - 515)) | (1L << (UNINSTALL - 515)) | (1L << (UNKNOWN - 515)) | (1L << (UNTIL - 515)) | (1L << (UPGRADE - 515)) | (1L << (USER - 515)) | (1L << (USE_FRM - 515)) | (1L << (USER_RESOURCES - 515)) | (1L << (VALIDATION - 515)) | (1L << (VALUE - 515)) | (1L << (VARIABLES - 515)) | (1L << (VIEW - 515)) | (1L << (VISIBLE - 515)) | (1L << (WAIT - 515)) | (1L << (WARNINGS - 515)) | (1L << (WITHOUT - 515)) | (1L << (WORK - 515)) | (1L << (WRAPPER - 515)) | (1L << (X509 - 515)) | (1L << (XA - 515)) | (1L << (XML - 515)))) != 0) || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (INTERNAL - 580)) | (1L << (QUARTER - 580)) | (1L << (MONTH - 580)) | (1L << (DAY - 580)) | (1L << (HOUR - 580)) | (1L << (MINUTE - 580)) | (1L << (WEEK - 580)) | (1L << (SECOND - 580)) | (1L << (MICROSECOND - 580)) | (1L << (TABLES - 580)) | (1L << (ROUTINE - 580)) | (1L << (EXECUTE - 580)) | (1L << (FILE - 580)) | (1L << (PROCESS - 580)) | (1L << (RELOAD - 580)) | (1L << (SHUTDOWN - 580)) | (1L << (SUPER - 580)) | (1L << (PRIVILEGES - 580)) | (1L << (SESSION_VARIABLES_ADMIN - 580)) | (1L << (ARMSCII8 - 580)) | (1L << (ASCII - 580)) | (1L << (BIG5 - 580)) | (1L << (CP1250 - 580)) | (1L << (CP1251 - 580)) | (1L << (CP1256 - 580)) | (1L << (CP1257 - 580)) | (1L << (CP850 - 580)) | (1L << (CP852 - 580)) | (1L << (CP866 - 580)) | (1L << (CP932 - 580)) | (1L << (DEC8 - 580)) | (1L << (EUCJPMS - 580)) | (1L << (EUCKR - 580)) | (1L << (GB2312 - 580)) | (1L << (GBK - 580)) | (1L << (GEOSTD8 - 580)) | (1L << (GREEK - 580)) | (1L << (HEBREW - 580)) | (1L << (HP8 - 580)) | (1L << (KEYBCS2 - 580)) | (1L << (KOI8R - 580)) | (1L << (KOI8U - 580)) | (1L << (LATIN1 - 580)) | (1L << (LATIN2 - 580)) | (1L << (LATIN5 - 580)) | (1L << (LATIN7 - 580)) | (1L << (MACCE - 580)) | (1L << (MACROMAN - 580)) | (1L << (SJIS - 580)) | (1L << (SWE7 - 580)) | (1L << (TIS620 - 580)) | (1L << (UCS2 - 580)) | (1L << (UJIS - 580)) | (1L << (UTF16 - 580)) | (1L << (UTF16LE - 580)) | (1L << (UTF32 - 580)) | (1L << (UTF8 - 580)) | (1L << (UTF8MB3 - 580)) | (1L << (UTF8MB4 - 580)) | (1L << (ARCHIVE - 580)) | (1L << (BLACKHOLE - 580)) | (1L << (CSV - 580)) | (1L << (FEDERATED - 580)) | (1L << (INNODB - 580)))) != 0) || ((((_la - 644)) & ~0x3f) == 0 && ((1L << (_la - 644)) & ((1L << (MEMORY - 644)) | (1L << (MRG_MYISAM - 644)) | (1L << (MYISAM - 644)) | (1L << (NDB - 644)) | (1L << (NDBCLUSTER - 644)) | (1L << (PERFORMANCE_SCHEMA - 644)) | (1L << (TOKUDB - 644)) | (1L << (REPEATABLE - 644)) | (1L << (COMMITTED - 644)) | (1L << (UNCOMMITTED - 644)) | (1L << (SERIALIZABLE - 644)) | (1L << (GEOMETRYCOLLECTION - 644)) | (1L << (LINESTRING - 644)) | (1L << (MULTILINESTRING - 644)) | (1L << (MULTIPOINT - 644)) | (1L << (MULTIPOLYGON - 644)) | (1L << (POINT - 644)) | (1L << (POLYGON - 644)) | (1L << (ABS - 644)) | (1L << (ACOS - 644)) | (1L << (ADDDATE - 644)) | (1L << (ADDTIME - 644)) | (1L << (AES_DECRYPT - 644)) | (1L << (AES_ENCRYPT - 644)) | (1L << (AREA - 644)) | (1L << (ASBINARY - 644)) | (1L << (ASIN - 644)) | (1L << (ASTEXT - 644)) | (1L << (ASWKB - 644)) | (1L << (ASWKT - 644)) | (1L << (ASYMMETRIC_DECRYPT - 644)) | (1L << (ASYMMETRIC_DERIVE - 644)) | (1L << (ASYMMETRIC_ENCRYPT - 644)) | (1L << (ASYMMETRIC_SIGN - 644)) | (1L << (ASYMMETRIC_VERIFY - 644)) | (1L << (ATAN - 644)) | (1L << (ATAN2 - 644)) | (1L << (BENCHMARK - 644)) | (1L << (BIN - 644)) | (1L << (BIT_COUNT - 644)) | (1L << (BIT_LENGTH - 644)) | (1L << (BUFFER - 644)) | (1L << (CATALOG_NAME - 644)) | (1L << (CEIL - 644)) | (1L << (CEILING - 644)) | (1L << (CENTROID - 644)) | (1L << (CHARACTER_LENGTH - 644)) | (1L << (CHARSET - 644)) | (1L << (CHAR_LENGTH - 644)) | (1L << (COERCIBILITY - 644)) | (1L << (COLLATION - 644)) | (1L << (COMPRESS - 644)) | (1L << (CONCAT - 644)) | (1L << (CONCAT_WS - 644)) | (1L << (CONNECTION_ID - 644)) | (1L << (CONV - 644)) | (1L << (CONVERT_TZ - 644)) | (1L << (COS - 644)) | (1L << (COT - 644)) | (1L << (CRC32 - 644)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 644)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 644)))) != 0) || ((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (CREATE_DH_PARAMETERS - 708)) | (1L << (CREATE_DIGEST - 708)) | (1L << (CROSSES - 708)) | (1L << (DATEDIFF - 708)) | (1L << (DATE_FORMAT - 708)) | (1L << (DAYNAME - 708)) | (1L << (DAYOFMONTH - 708)) | (1L << (DAYOFWEEK - 708)) | (1L << (DAYOFYEAR - 708)) | (1L << (DECODE - 708)) | (1L << (DEGREES - 708)) | (1L << (DES_DECRYPT - 708)) | (1L << (DES_ENCRYPT - 708)) | (1L << (DIMENSION - 708)) | (1L << (DISJOINT - 708)) | (1L << (ELT - 708)) | (1L << (ENCODE - 708)) | (1L << (ENCRYPT - 708)) | (1L << (ENDPOINT - 708)) | (1L << (ENVELOPE - 708)) | (1L << (EQUALS - 708)) | (1L << (EXP - 708)) | (1L << (EXPORT_SET - 708)) | (1L << (EXTERIORRING - 708)) | (1L << (EXTRACTVALUE - 708)) | (1L << (FIELD - 708)) | (1L << (FIND_IN_SET - 708)) | (1L << (FLOOR - 708)) | (1L << (FORMAT - 708)) | (1L << (FOUND_ROWS - 708)) | (1L << (FROM_BASE64 - 708)) | (1L << (FROM_DAYS - 708)) | (1L << (FROM_UNIXTIME - 708)) | (1L << (GEOMCOLLFROMTEXT - 708)) | (1L << (GEOMCOLLFROMWKB - 708)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 708)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 708)) | (1L << (GEOMETRYFROMTEXT - 708)) | (1L << (GEOMETRYFROMWKB - 708)) | (1L << (GEOMETRYN - 708)) | (1L << (GEOMETRYTYPE - 708)) | (1L << (GEOMFROMTEXT - 708)) | (1L << (GEOMFROMWKB - 708)) | (1L << (GET_FORMAT - 708)) | (1L << (GET_LOCK - 708)) | (1L << (GLENGTH - 708)) | (1L << (GREATEST - 708)) | (1L << (GTID_SUBSET - 708)) | (1L << (GTID_SUBTRACT - 708)) | (1L << (HEX - 708)) | (1L << (IFNULL - 708)) | (1L << (INET6_ATON - 708)) | (1L << (INET6_NTOA - 708)) | (1L << (INET_ATON - 708)) | (1L << (INET_NTOA - 708)) | (1L << (INSTR - 708)) | (1L << (INTERIORRINGN - 708)) | (1L << (INTERSECTS - 708)) | (1L << (ISCLOSED - 708)) | (1L << (ISEMPTY - 708)) | (1L << (ISNULL - 708)) | (1L << (ISSIMPLE - 708)) | (1L << (IS_FREE_LOCK - 708)) | (1L << (IS_IPV4 - 708)))) != 0) || ((((_la - 772)) & ~0x3f) == 0 && ((1L << (_la - 772)) & ((1L << (IS_IPV4_COMPAT - 772)) | (1L << (IS_IPV4_MAPPED - 772)) | (1L << (IS_IPV6 - 772)) | (1L << (IS_USED_LOCK - 772)) | (1L << (LAST_INSERT_ID - 772)) | (1L << (LCASE - 772)) | (1L << (LEAST - 772)) | (1L << (LENGTH - 772)) | (1L << (LINEFROMTEXT - 772)) | (1L << (LINEFROMWKB - 772)) | (1L << (LINESTRINGFROMTEXT - 772)) | (1L << (LINESTRINGFROMWKB - 772)) | (1L << (LN - 772)) | (1L << (LOAD_FILE - 772)) | (1L << (LOCATE - 772)) | (1L << (LOG - 772)) | (1L << (LOG10 - 772)) | (1L << (LOG2 - 772)) | (1L << (LOWER - 772)) | (1L << (LPAD - 772)) | (1L << (LTRIM - 772)) | (1L << (MAKEDATE - 772)) | (1L << (MAKETIME - 772)) | (1L << (MAKE_SET - 772)) | (1L << (MASTER_POS_WAIT - 772)) | (1L << (MBRCONTAINS - 772)) | (1L << (MBRDISJOINT - 772)) | (1L << (MBREQUAL - 772)) | (1L << (MBRINTERSECTS - 772)) | (1L << (MBROVERLAPS - 772)) | (1L << (MBRTOUCHES - 772)) | (1L << (MBRWITHIN - 772)) | (1L << (MD5 - 772)) | (1L << (MLINEFROMTEXT - 772)) | (1L << (MLINEFROMWKB - 772)) | (1L << (MONTHNAME - 772)) | (1L << (MPOINTFROMTEXT - 772)) | (1L << (MPOINTFROMWKB - 772)) | (1L << (MPOLYFROMTEXT - 772)) | (1L << (MPOLYFROMWKB - 772)) | (1L << (MULTILINESTRINGFROMTEXT - 772)) | (1L << (MULTILINESTRINGFROMWKB - 772)) | (1L << (MULTIPOINTFROMTEXT - 772)) | (1L << (MULTIPOINTFROMWKB - 772)) | (1L << (MULTIPOLYGONFROMTEXT - 772)) | (1L << (MULTIPOLYGONFROMWKB - 772)) | (1L << (NAME_CONST - 772)) | (1L << (NULLIF - 772)) | (1L << (NUMGEOMETRIES - 772)) | (1L << (NUMINTERIORRINGS - 772)) | (1L << (NUMPOINTS - 772)) | (1L << (OCT - 772)) | (1L << (OCTET_LENGTH - 772)) | (1L << (ORD - 772)) | (1L << (OVERLAPS - 772)) | (1L << (PERIOD_ADD - 772)) | (1L << (PERIOD_DIFF - 772)) | (1L << (PI - 772)) | (1L << (POINTFROMTEXT - 772)) | (1L << (POINTFROMWKB - 772)) | (1L << (POINTN - 772)) | (1L << (POLYFROMTEXT - 772)) | (1L << (POLYFROMWKB - 772)) | (1L << (POLYGONFROMTEXT - 772)))) != 0) || ((((_la - 836)) & ~0x3f) == 0 && ((1L << (_la - 836)) & ((1L << (POLYGONFROMWKB - 836)) | (1L << (POW - 836)) | (1L << (POWER - 836)) | (1L << (QUOTE - 836)) | (1L << (RADIANS - 836)) | (1L << (RAND - 836)) | (1L << (RANDOM_BYTES - 836)) | (1L << (RELEASE_LOCK - 836)) | (1L << (REVERSE - 836)) | (1L << (ROUND - 836)) | (1L << (ROW_COUNT - 836)) | (1L << (RPAD - 836)) | (1L << (RTRIM - 836)) | (1L << (SEC_TO_TIME - 836)) | (1L << (SESSION_USER - 836)) | (1L << (SHA - 836)) | (1L << (SHA1 - 836)) | (1L << (SHA2 - 836)) | (1L << (SCHEMA_NAME - 836)) | (1L << (SIGN - 836)) | (1L << (SIN - 836)) | (1L << (SLEEP - 836)) | (1L << (SOUNDEX - 836)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 836)) | (1L << (SQRT - 836)) | (1L << (SRID - 836)) | (1L << (STARTPOINT - 836)) | (1L << (STRCMP - 836)) | (1L << (STR_TO_DATE - 836)) | (1L << (ST_AREA - 836)) | (1L << (ST_ASBINARY - 836)) | (1L << (ST_ASTEXT - 836)) | (1L << (ST_ASWKB - 836)) | (1L << (ST_ASWKT - 836)) | (1L << (ST_BUFFER - 836)) | (1L << (ST_CENTROID - 836)) | (1L << (ST_CONTAINS - 836)) | (1L << (ST_CROSSES - 836)) | (1L << (ST_DIFFERENCE - 836)) | (1L << (ST_DIMENSION - 836)) | (1L << (ST_DISJOINT - 836)) | (1L << (ST_DISTANCE - 836)) | (1L << (ST_ENDPOINT - 836)) | (1L << (ST_ENVELOPE - 836)) | (1L << (ST_EQUALS - 836)) | (1L << (ST_EXTERIORRING - 836)) | (1L << (ST_GEOMCOLLFROMTEXT - 836)) | (1L << (ST_GEOMCOLLFROMTXT - 836)) | (1L << (ST_GEOMCOLLFROMWKB - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 836)) | (1L << (ST_GEOMETRYFROMTEXT - 836)) | (1L << (ST_GEOMETRYFROMWKB - 836)) | (1L << (ST_GEOMETRYN - 836)) | (1L << (ST_GEOMETRYTYPE - 836)) | (1L << (ST_GEOMFROMTEXT - 836)) | (1L << (ST_GEOMFROMWKB - 836)) | (1L << (ST_INTERIORRINGN - 836)) | (1L << (ST_INTERSECTION - 836)) | (1L << (ST_INTERSECTS - 836)) | (1L << (ST_ISCLOSED - 836)) | (1L << (ST_ISEMPTY - 836)) | (1L << (ST_ISSIMPLE - 836)) | (1L << (ST_LINEFROMTEXT - 836)))) != 0) || ((((_la - 900)) & ~0x3f) == 0 && ((1L << (_la - 900)) & ((1L << (ST_LINEFROMWKB - 900)) | (1L << (ST_LINESTRINGFROMTEXT - 900)) | (1L << (ST_LINESTRINGFROMWKB - 900)) | (1L << (ST_NUMGEOMETRIES - 900)) | (1L << (ST_NUMINTERIORRING - 900)) | (1L << (ST_NUMINTERIORRINGS - 900)) | (1L << (ST_NUMPOINTS - 900)) | (1L << (ST_OVERLAPS - 900)) | (1L << (ST_POINTFROMTEXT - 900)) | (1L << (ST_POINTFROMWKB - 900)) | (1L << (ST_POINTN - 900)) | (1L << (ST_POLYFROMTEXT - 900)) | (1L << (ST_POLYFROMWKB - 900)) | (1L << (ST_POLYGONFROMTEXT - 900)) | (1L << (ST_POLYGONFROMWKB - 900)) | (1L << (ST_SRID - 900)) | (1L << (ST_STARTPOINT - 900)) | (1L << (ST_SYMDIFFERENCE - 900)) | (1L << (ST_TOUCHES - 900)) | (1L << (ST_UNION - 900)) | (1L << (ST_WITHIN - 900)) | (1L << (ST_X - 900)) | (1L << (ST_Y - 900)) | (1L << (SUBDATE - 900)) | (1L << (SUBSTRING_INDEX - 900)) | (1L << (SUBTIME - 900)) | (1L << (SYSTEM_USER - 900)) | (1L << (TAN - 900)) | (1L << (TIMEDIFF - 900)) | (1L << (TIMESTAMPADD - 900)) | (1L << (TIMESTAMPDIFF - 900)) | (1L << (TIME_FORMAT - 900)) | (1L << (TIME_TO_SEC - 900)) | (1L << (TOUCHES - 900)) | (1L << (TO_BASE64 - 900)) | (1L << (TO_DAYS - 900)) | (1L << (TO_SECONDS - 900)) | (1L << (UCASE - 900)) | (1L << (UNCOMPRESS - 900)) | (1L << (UNCOMPRESSED_LENGTH - 900)) | (1L << (UNHEX - 900)) | (1L << (UNIX_TIMESTAMP - 900)) | (1L << (UPDATEXML - 900)) | (1L << (UPPER - 900)) | (1L << (UUID - 900)) | (1L << (UUID_SHORT - 900)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 900)) | (1L << (VERSION - 900)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 900)) | (1L << (WEEKDAY - 900)) | (1L << (WEEKOFYEAR - 900)) | (1L << (WEIGHT_STRING - 900)) | (1L << (WITHIN - 900)) | (1L << (YEARWEEK - 900)) | (1L << (Y_FUNCTION - 900)) | (1L << (X_FUNCTION - 900)))) != 0) || ((((_la - 994)) & ~0x3f) == 0 && ((1L << (_la - 994)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 994)) | (1L << (STRING_LITERAL - 994)) | (1L << (ID - 994)) | (1L << (REVERSE_QUOTE_ID - 994)))) != 0))
                        {
                            {
                                State = 1572; uid();
                            }
                        }

                        State = 1576;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == USING)
                        {
                            {
                                State = 1575; indexType();
                            }
                        }

                        State = 1578; indexColumnNames();
                        State = 1582;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        while (_la == USING || _la == WITH || _la == COMMENT || _la == INVISIBLE || _la == KEY_BLOCK_SIZE || _la == VISIBLE)
                        {
                            {
                                {
                                    State = 1579; indexOption();
                                }
                            }
                            State = 1584;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                        }
                    }
                    break;
                case FULLTEXT:
                case SPATIAL:
                    _localctx = new SpecialIndexDeclarationContext(_localctx);
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 1585;
                        _la = TokenStream.LA(1);
                        if (!(_la == FULLTEXT || _la == SPATIAL))
                        {
                            ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                        State = 1587;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == INDEX || _la == KEY)
                        {
                            {
                                State = 1586;
                                ((SpecialIndexDeclarationContext)_localctx).indexFormat = TokenStream.LT(1);
                                _la = TokenStream.LA(1);
                                if (!(_la == INDEX || _la == KEY))
                                {
                                    ((SpecialIndexDeclarationContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
                                }
                                else
                                {
                                    ErrorHandler.ReportMatch(this);
                                    Consume();
                                }
                            }
                        }

                        State = 1590;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)) | (1L << (POSITION - 191)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ACCOUNT - 259)) | (1L << (ACTION - 259)) | (1L << (AFTER - 259)) | (1L << (AGGREGATE - 259)) | (1L << (ALGORITHM - 259)) | (1L << (ANY - 259)) | (1L << (AT - 259)) | (1L << (AUTHORS - 259)) | (1L << (AUTOCOMMIT - 259)) | (1L << (AUTOEXTEND_SIZE - 259)) | (1L << (AUTO_INCREMENT - 259)) | (1L << (AVG_ROW_LENGTH - 259)) | (1L << (BEGIN - 259)) | (1L << (BINLOG - 259)) | (1L << (BIT - 259)) | (1L << (BLOCK - 259)) | (1L << (BOOL - 259)) | (1L << (BOOLEAN - 259)) | (1L << (BTREE - 259)) | (1L << (CACHE - 259)) | (1L << (CASCADED - 259)) | (1L << (CHAIN - 259)) | (1L << (CHANGED - 259)) | (1L << (CHANNEL - 259)) | (1L << (CHECKSUM - 259)) | (1L << (PAGE_CHECKSUM - 259)) | (1L << (CIPHER - 259)) | (1L << (CLASS_ORIGIN - 259)) | (1L << (CLIENT - 259)) | (1L << (CLOSE - 259)) | (1L << (COALESCE - 259)) | (1L << (CODE - 259)) | (1L << (COLUMNS - 259)) | (1L << (COLUMN_FORMAT - 259)) | (1L << (COLUMN_NAME - 259)) | (1L << (COMMENT - 259)) | (1L << (COMMIT - 259)) | (1L << (COMPACT - 259)) | (1L << (COMPLETION - 259)) | (1L << (COMPRESSED - 259)) | (1L << (COMPRESSION - 259)) | (1L << (CONCURRENT - 259)) | (1L << (CONNECTION - 259)) | (1L << (CONSISTENT - 259)) | (1L << (CONSTRAINT_CATALOG - 259)) | (1L << (CONSTRAINT_SCHEMA - 259)) | (1L << (CONSTRAINT_NAME - 259)) | (1L << (CONTAINS - 259)) | (1L << (CONTEXT - 259)) | (1L << (CONTRIBUTORS - 259)) | (1L << (COPY - 259)) | (1L << (CPU - 259)) | (1L << (CURSOR_NAME - 259)) | (1L << (DATA - 259)) | (1L << (DATAFILE - 259)) | (1L << (DEALLOCATE - 259)) | (1L << (DEFAULT_AUTH - 259)) | (1L << (DEFINER - 259)) | (1L << (DELAY_KEY_WRITE - 259)) | (1L << (DES_KEY_FILE - 259)) | (1L << (DIRECTORY - 259)) | (1L << (DISABLE - 259)) | (1L << (DISCARD - 259)) | (1L << (DISK - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (DO - 323)) | (1L << (DUMPFILE - 323)) | (1L << (DUPLICATE - 323)) | (1L << (DYNAMIC - 323)) | (1L << (ENABLE - 323)) | (1L << (ENCRYPTION - 323)) | (1L << (END - 323)) | (1L << (ENDS - 323)) | (1L << (ENGINE - 323)) | (1L << (ENGINES - 323)) | (1L << (ERROR - 323)) | (1L << (ERRORS - 323)) | (1L << (ESCAPE - 323)) | (1L << (EVEN - 323)) | (1L << (EVENT - 323)) | (1L << (EVENTS - 323)) | (1L << (EVERY - 323)) | (1L << (EXCHANGE - 323)) | (1L << (EXCLUSIVE - 323)) | (1L << (EXPIRE - 323)) | (1L << (EXPORT - 323)) | (1L << (EXTENDED - 323)) | (1L << (EXTENT_SIZE - 323)) | (1L << (FAST - 323)) | (1L << (FAULTS - 323)) | (1L << (FIELDS - 323)) | (1L << (FILE_BLOCK_SIZE - 323)) | (1L << (FILTER - 323)) | (1L << (FIRST - 323)) | (1L << (FIXED - 323)) | (1L << (FLUSH - 323)) | (1L << (FOLLOWS - 323)) | (1L << (FOUND - 323)) | (1L << (FULL - 323)) | (1L << (FUNCTION - 323)) | (1L << (GENERAL - 323)) | (1L << (GLOBAL - 323)) | (1L << (GRANTS - 323)) | (1L << (GROUP_REPLICATION - 323)) | (1L << (HANDLER - 323)) | (1L << (HASH - 323)) | (1L << (HELP - 323)) | (1L << (HOST - 323)) | (1L << (HOSTS - 323)) | (1L << (IDENTIFIED - 323)) | (1L << (IGNORE_SERVER_IDS - 323)) | (1L << (IMPORT - 323)) | (1L << (INDEXES - 323)) | (1L << (INITIAL_SIZE - 323)) | (1L << (INPLACE - 323)) | (1L << (INSERT_METHOD - 323)) | (1L << (INSTALL - 323)) | (1L << (INSTANCE - 323)) | (1L << (INVISIBLE - 323)) | (1L << (INVOKER - 323)) | (1L << (IO - 323)) | (1L << (IO_THREAD - 323)) | (1L << (IPC - 323)) | (1L << (ISOLATION - 323)) | (1L << (ISSUER - 323)) | (1L << (JSON - 323)) | (1L << (KEY_BLOCK_SIZE - 323)) | (1L << (LANGUAGE - 323)) | (1L << (LAST - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (LEAVES - 387)) | (1L << (LESS - 387)) | (1L << (LEVEL - 387)) | (1L << (LIST - 387)) | (1L << (LOCAL - 387)) | (1L << (LOGFILE - 387)) | (1L << (LOGS - 387)) | (1L << (MASTER - 387)) | (1L << (MASTER_AUTO_POSITION - 387)) | (1L << (MASTER_CONNECT_RETRY - 387)) | (1L << (MASTER_DELAY - 387)) | (1L << (MASTER_HEARTBEAT_PERIOD - 387)) | (1L << (MASTER_HOST - 387)) | (1L << (MASTER_LOG_FILE - 387)) | (1L << (MASTER_LOG_POS - 387)) | (1L << (MASTER_PASSWORD - 387)) | (1L << (MASTER_PORT - 387)) | (1L << (MASTER_RETRY_COUNT - 387)) | (1L << (MASTER_SSL - 387)) | (1L << (MASTER_SSL_CA - 387)) | (1L << (MASTER_SSL_CAPATH - 387)) | (1L << (MASTER_SSL_CERT - 387)) | (1L << (MASTER_SSL_CIPHER - 387)) | (1L << (MASTER_SSL_CRL - 387)) | (1L << (MASTER_SSL_CRLPATH - 387)) | (1L << (MASTER_SSL_KEY - 387)) | (1L << (MASTER_TLS_VERSION - 387)) | (1L << (MASTER_USER - 387)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 387)) | (1L << (MAX_QUERIES_PER_HOUR - 387)) | (1L << (MAX_ROWS - 387)) | (1L << (MAX_SIZE - 387)) | (1L << (MAX_UPDATES_PER_HOUR - 387)) | (1L << (MAX_USER_CONNECTIONS - 387)) | (1L << (MEDIUM - 387)) | (1L << (MERGE - 387)) | (1L << (MESSAGE_TEXT - 387)) | (1L << (MID - 387)) | (1L << (MIGRATE - 387)) | (1L << (MIN_ROWS - 387)) | (1L << (MODE - 387)) | (1L << (MODIFY - 387)) | (1L << (MUTEX - 387)) | (1L << (MYSQL - 387)) | (1L << (MYSQL_ERRNO - 387)) | (1L << (NAME - 387)) | (1L << (NAMES - 387)) | (1L << (NCHAR - 387)) | (1L << (NEVER - 387)) | (1L << (NEXT - 387)) | (1L << (NO - 387)) | (1L << (NODEGROUP - 387)) | (1L << (NONE - 387)) | (1L << (OFFLINE - 387)) | (1L << (OFFSET - 387)) | (1L << (OJ - 387)) | (1L << (OLD_PASSWORD - 387)) | (1L << (ONE - 387)) | (1L << (ONLINE - 387)) | (1L << (ONLY - 387)) | (1L << (OPEN - 387)) | (1L << (OPTIMIZER_COSTS - 387)) | (1L << (OPTIONS - 387)) | (1L << (OWNER - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PAGE - 451)) | (1L << (PARSER - 451)) | (1L << (PARTIAL - 451)) | (1L << (PARTITIONING - 451)) | (1L << (PARTITIONS - 451)) | (1L << (PASSWORD - 451)) | (1L << (PHASE - 451)) | (1L << (PLUGIN - 451)) | (1L << (PLUGIN_DIR - 451)) | (1L << (PLUGINS - 451)) | (1L << (PORT - 451)) | (1L << (PRECEDES - 451)) | (1L << (PREPARE - 451)) | (1L << (PRESERVE - 451)) | (1L << (PREV - 451)) | (1L << (PROCESSLIST - 451)) | (1L << (PROFILE - 451)) | (1L << (PROFILES - 451)) | (1L << (PROXY - 451)) | (1L << (QUERY - 451)) | (1L << (QUICK - 451)) | (1L << (REBUILD - 451)) | (1L << (RECOVER - 451)) | (1L << (REDO_BUFFER_SIZE - 451)) | (1L << (REDUNDANT - 451)) | (1L << (RELAY - 451)) | (1L << (RELAY_LOG_FILE - 451)) | (1L << (RELAY_LOG_POS - 451)) | (1L << (RELAYLOG - 451)) | (1L << (REMOVE - 451)) | (1L << (REORGANIZE - 451)) | (1L << (REPAIR - 451)) | (1L << (REPLICATE_DO_DB - 451)) | (1L << (REPLICATE_DO_TABLE - 451)) | (1L << (REPLICATE_IGNORE_DB - 451)) | (1L << (REPLICATE_IGNORE_TABLE - 451)) | (1L << (REPLICATE_REWRITE_DB - 451)) | (1L << (REPLICATE_WILD_DO_TABLE - 451)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 451)) | (1L << (REPLICATION - 451)) | (1L << (RESET - 451)) | (1L << (RESUME - 451)) | (1L << (RETURNED_SQLSTATE - 451)) | (1L << (RETURNS - 451)) | (1L << (ROLLBACK - 451)) | (1L << (ROLLUP - 451)) | (1L << (ROTATE - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (ROW_FORMAT - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SCHEDULE - 451)) | (1L << (SECURITY - 451)) | (1L << (SERVER - 451)) | (1L << (SESSION - 451)) | (1L << (SHARE - 451)) | (1L << (SHARED - 451)) | (1L << (SIGNED - 451)) | (1L << (SIMPLE - 451)) | (1L << (SLAVE - 451)) | (1L << (SLOW - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOCKET - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SOME - 515)) | (1L << (SONAME - 515)) | (1L << (SOUNDS - 515)) | (1L << (SOURCE - 515)) | (1L << (SQL_AFTER_GTIDS - 515)) | (1L << (SQL_AFTER_MTS_GAPS - 515)) | (1L << (SQL_BEFORE_GTIDS - 515)) | (1L << (SQL_BUFFER_RESULT - 515)) | (1L << (SQL_CACHE - 515)) | (1L << (SQL_NO_CACHE - 515)) | (1L << (SQL_THREAD - 515)) | (1L << (START - 515)) | (1L << (STARTS - 515)) | (1L << (STATS_AUTO_RECALC - 515)) | (1L << (STATS_PERSISTENT - 515)) | (1L << (STATS_SAMPLE_PAGES - 515)) | (1L << (STATUS - 515)) | (1L << (STOP - 515)) | (1L << (STORAGE - 515)) | (1L << (STRING - 515)) | (1L << (SUBCLASS_ORIGIN - 515)) | (1L << (SUBJECT - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBPARTITIONS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SWAPS - 515)) | (1L << (SWITCHES - 515)) | (1L << (TABLE_NAME - 515)) | (1L << (TABLESPACE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TEMPTABLE - 515)) | (1L << (THAN - 515)) | (1L << (TRADITIONAL - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRIGGERS - 515)) | (1L << (TRUNCATE - 515)) | (1L << (UNDEFINED - 515)) | (1L << (UNDOFILE - 515)) | (1L << (UNDO_BUFFER_SIZE - 515)) | (1L << (UNINSTALL - 515)) | (1L << (UNKNOWN - 515)) | (1L << (UNTIL - 515)) | (1L << (UPGRADE - 515)) | (1L << (USER - 515)) | (1L << (USE_FRM - 515)) | (1L << (USER_RESOURCES - 515)) | (1L << (VALIDATION - 515)) | (1L << (VALUE - 515)) | (1L << (VARIABLES - 515)) | (1L << (VIEW - 515)) | (1L << (VISIBLE - 515)) | (1L << (WAIT - 515)) | (1L << (WARNINGS - 515)) | (1L << (WITHOUT - 515)) | (1L << (WORK - 515)) | (1L << (WRAPPER - 515)) | (1L << (X509 - 515)) | (1L << (XA - 515)) | (1L << (XML - 515)))) != 0) || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (INTERNAL - 580)) | (1L << (QUARTER - 580)) | (1L << (MONTH - 580)) | (1L << (DAY - 580)) | (1L << (HOUR - 580)) | (1L << (MINUTE - 580)) | (1L << (WEEK - 580)) | (1L << (SECOND - 580)) | (1L << (MICROSECOND - 580)) | (1L << (TABLES - 580)) | (1L << (ROUTINE - 580)) | (1L << (EXECUTE - 580)) | (1L << (FILE - 580)) | (1L << (PROCESS - 580)) | (1L << (RELOAD - 580)) | (1L << (SHUTDOWN - 580)) | (1L << (SUPER - 580)) | (1L << (PRIVILEGES - 580)) | (1L << (SESSION_VARIABLES_ADMIN - 580)) | (1L << (ARMSCII8 - 580)) | (1L << (ASCII - 580)) | (1L << (BIG5 - 580)) | (1L << (CP1250 - 580)) | (1L << (CP1251 - 580)) | (1L << (CP1256 - 580)) | (1L << (CP1257 - 580)) | (1L << (CP850 - 580)) | (1L << (CP852 - 580)) | (1L << (CP866 - 580)) | (1L << (CP932 - 580)) | (1L << (DEC8 - 580)) | (1L << (EUCJPMS - 580)) | (1L << (EUCKR - 580)) | (1L << (GB2312 - 580)) | (1L << (GBK - 580)) | (1L << (GEOSTD8 - 580)) | (1L << (GREEK - 580)) | (1L << (HEBREW - 580)) | (1L << (HP8 - 580)) | (1L << (KEYBCS2 - 580)) | (1L << (KOI8R - 580)) | (1L << (KOI8U - 580)) | (1L << (LATIN1 - 580)) | (1L << (LATIN2 - 580)) | (1L << (LATIN5 - 580)) | (1L << (LATIN7 - 580)) | (1L << (MACCE - 580)) | (1L << (MACROMAN - 580)) | (1L << (SJIS - 580)) | (1L << (SWE7 - 580)) | (1L << (TIS620 - 580)) | (1L << (UCS2 - 580)) | (1L << (UJIS - 580)) | (1L << (UTF16 - 580)) | (1L << (UTF16LE - 580)) | (1L << (UTF32 - 580)) | (1L << (UTF8 - 580)) | (1L << (UTF8MB3 - 580)) | (1L << (UTF8MB4 - 580)) | (1L << (ARCHIVE - 580)) | (1L << (BLACKHOLE - 580)) | (1L << (CSV - 580)) | (1L << (FEDERATED - 580)) | (1L << (INNODB - 580)))) != 0) || ((((_la - 644)) & ~0x3f) == 0 && ((1L << (_la - 644)) & ((1L << (MEMORY - 644)) | (1L << (MRG_MYISAM - 644)) | (1L << (MYISAM - 644)) | (1L << (NDB - 644)) | (1L << (NDBCLUSTER - 644)) | (1L << (PERFORMANCE_SCHEMA - 644)) | (1L << (TOKUDB - 644)) | (1L << (REPEATABLE - 644)) | (1L << (COMMITTED - 644)) | (1L << (UNCOMMITTED - 644)) | (1L << (SERIALIZABLE - 644)) | (1L << (GEOMETRYCOLLECTION - 644)) | (1L << (LINESTRING - 644)) | (1L << (MULTILINESTRING - 644)) | (1L << (MULTIPOINT - 644)) | (1L << (MULTIPOLYGON - 644)) | (1L << (POINT - 644)) | (1L << (POLYGON - 644)) | (1L << (ABS - 644)) | (1L << (ACOS - 644)) | (1L << (ADDDATE - 644)) | (1L << (ADDTIME - 644)) | (1L << (AES_DECRYPT - 644)) | (1L << (AES_ENCRYPT - 644)) | (1L << (AREA - 644)) | (1L << (ASBINARY - 644)) | (1L << (ASIN - 644)) | (1L << (ASTEXT - 644)) | (1L << (ASWKB - 644)) | (1L << (ASWKT - 644)) | (1L << (ASYMMETRIC_DECRYPT - 644)) | (1L << (ASYMMETRIC_DERIVE - 644)) | (1L << (ASYMMETRIC_ENCRYPT - 644)) | (1L << (ASYMMETRIC_SIGN - 644)) | (1L << (ASYMMETRIC_VERIFY - 644)) | (1L << (ATAN - 644)) | (1L << (ATAN2 - 644)) | (1L << (BENCHMARK - 644)) | (1L << (BIN - 644)) | (1L << (BIT_COUNT - 644)) | (1L << (BIT_LENGTH - 644)) | (1L << (BUFFER - 644)) | (1L << (CATALOG_NAME - 644)) | (1L << (CEIL - 644)) | (1L << (CEILING - 644)) | (1L << (CENTROID - 644)) | (1L << (CHARACTER_LENGTH - 644)) | (1L << (CHARSET - 644)) | (1L << (CHAR_LENGTH - 644)) | (1L << (COERCIBILITY - 644)) | (1L << (COLLATION - 644)) | (1L << (COMPRESS - 644)) | (1L << (CONCAT - 644)) | (1L << (CONCAT_WS - 644)) | (1L << (CONNECTION_ID - 644)) | (1L << (CONV - 644)) | (1L << (CONVERT_TZ - 644)) | (1L << (COS - 644)) | (1L << (COT - 644)) | (1L << (CRC32 - 644)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 644)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 644)))) != 0) || ((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (CREATE_DH_PARAMETERS - 708)) | (1L << (CREATE_DIGEST - 708)) | (1L << (CROSSES - 708)) | (1L << (DATEDIFF - 708)) | (1L << (DATE_FORMAT - 708)) | (1L << (DAYNAME - 708)) | (1L << (DAYOFMONTH - 708)) | (1L << (DAYOFWEEK - 708)) | (1L << (DAYOFYEAR - 708)) | (1L << (DECODE - 708)) | (1L << (DEGREES - 708)) | (1L << (DES_DECRYPT - 708)) | (1L << (DES_ENCRYPT - 708)) | (1L << (DIMENSION - 708)) | (1L << (DISJOINT - 708)) | (1L << (ELT - 708)) | (1L << (ENCODE - 708)) | (1L << (ENCRYPT - 708)) | (1L << (ENDPOINT - 708)) | (1L << (ENVELOPE - 708)) | (1L << (EQUALS - 708)) | (1L << (EXP - 708)) | (1L << (EXPORT_SET - 708)) | (1L << (EXTERIORRING - 708)) | (1L << (EXTRACTVALUE - 708)) | (1L << (FIELD - 708)) | (1L << (FIND_IN_SET - 708)) | (1L << (FLOOR - 708)) | (1L << (FORMAT - 708)) | (1L << (FOUND_ROWS - 708)) | (1L << (FROM_BASE64 - 708)) | (1L << (FROM_DAYS - 708)) | (1L << (FROM_UNIXTIME - 708)) | (1L << (GEOMCOLLFROMTEXT - 708)) | (1L << (GEOMCOLLFROMWKB - 708)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 708)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 708)) | (1L << (GEOMETRYFROMTEXT - 708)) | (1L << (GEOMETRYFROMWKB - 708)) | (1L << (GEOMETRYN - 708)) | (1L << (GEOMETRYTYPE - 708)) | (1L << (GEOMFROMTEXT - 708)) | (1L << (GEOMFROMWKB - 708)) | (1L << (GET_FORMAT - 708)) | (1L << (GET_LOCK - 708)) | (1L << (GLENGTH - 708)) | (1L << (GREATEST - 708)) | (1L << (GTID_SUBSET - 708)) | (1L << (GTID_SUBTRACT - 708)) | (1L << (HEX - 708)) | (1L << (IFNULL - 708)) | (1L << (INET6_ATON - 708)) | (1L << (INET6_NTOA - 708)) | (1L << (INET_ATON - 708)) | (1L << (INET_NTOA - 708)) | (1L << (INSTR - 708)) | (1L << (INTERIORRINGN - 708)) | (1L << (INTERSECTS - 708)) | (1L << (ISCLOSED - 708)) | (1L << (ISEMPTY - 708)) | (1L << (ISNULL - 708)) | (1L << (ISSIMPLE - 708)) | (1L << (IS_FREE_LOCK - 708)) | (1L << (IS_IPV4 - 708)))) != 0) || ((((_la - 772)) & ~0x3f) == 0 && ((1L << (_la - 772)) & ((1L << (IS_IPV4_COMPAT - 772)) | (1L << (IS_IPV4_MAPPED - 772)) | (1L << (IS_IPV6 - 772)) | (1L << (IS_USED_LOCK - 772)) | (1L << (LAST_INSERT_ID - 772)) | (1L << (LCASE - 772)) | (1L << (LEAST - 772)) | (1L << (LENGTH - 772)) | (1L << (LINEFROMTEXT - 772)) | (1L << (LINEFROMWKB - 772)) | (1L << (LINESTRINGFROMTEXT - 772)) | (1L << (LINESTRINGFROMWKB - 772)) | (1L << (LN - 772)) | (1L << (LOAD_FILE - 772)) | (1L << (LOCATE - 772)) | (1L << (LOG - 772)) | (1L << (LOG10 - 772)) | (1L << (LOG2 - 772)) | (1L << (LOWER - 772)) | (1L << (LPAD - 772)) | (1L << (LTRIM - 772)) | (1L << (MAKEDATE - 772)) | (1L << (MAKETIME - 772)) | (1L << (MAKE_SET - 772)) | (1L << (MASTER_POS_WAIT - 772)) | (1L << (MBRCONTAINS - 772)) | (1L << (MBRDISJOINT - 772)) | (1L << (MBREQUAL - 772)) | (1L << (MBRINTERSECTS - 772)) | (1L << (MBROVERLAPS - 772)) | (1L << (MBRTOUCHES - 772)) | (1L << (MBRWITHIN - 772)) | (1L << (MD5 - 772)) | (1L << (MLINEFROMTEXT - 772)) | (1L << (MLINEFROMWKB - 772)) | (1L << (MONTHNAME - 772)) | (1L << (MPOINTFROMTEXT - 772)) | (1L << (MPOINTFROMWKB - 772)) | (1L << (MPOLYFROMTEXT - 772)) | (1L << (MPOLYFROMWKB - 772)) | (1L << (MULTILINESTRINGFROMTEXT - 772)) | (1L << (MULTILINESTRINGFROMWKB - 772)) | (1L << (MULTIPOINTFROMTEXT - 772)) | (1L << (MULTIPOINTFROMWKB - 772)) | (1L << (MULTIPOLYGONFROMTEXT - 772)) | (1L << (MULTIPOLYGONFROMWKB - 772)) | (1L << (NAME_CONST - 772)) | (1L << (NULLIF - 772)) | (1L << (NUMGEOMETRIES - 772)) | (1L << (NUMINTERIORRINGS - 772)) | (1L << (NUMPOINTS - 772)) | (1L << (OCT - 772)) | (1L << (OCTET_LENGTH - 772)) | (1L << (ORD - 772)) | (1L << (OVERLAPS - 772)) | (1L << (PERIOD_ADD - 772)) | (1L << (PERIOD_DIFF - 772)) | (1L << (PI - 772)) | (1L << (POINTFROMTEXT - 772)) | (1L << (POINTFROMWKB - 772)) | (1L << (POINTN - 772)) | (1L << (POLYFROMTEXT - 772)) | (1L << (POLYFROMWKB - 772)) | (1L << (POLYGONFROMTEXT - 772)))) != 0) || ((((_la - 836)) & ~0x3f) == 0 && ((1L << (_la - 836)) & ((1L << (POLYGONFROMWKB - 836)) | (1L << (POW - 836)) | (1L << (POWER - 836)) | (1L << (QUOTE - 836)) | (1L << (RADIANS - 836)) | (1L << (RAND - 836)) | (1L << (RANDOM_BYTES - 836)) | (1L << (RELEASE_LOCK - 836)) | (1L << (REVERSE - 836)) | (1L << (ROUND - 836)) | (1L << (ROW_COUNT - 836)) | (1L << (RPAD - 836)) | (1L << (RTRIM - 836)) | (1L << (SEC_TO_TIME - 836)) | (1L << (SESSION_USER - 836)) | (1L << (SHA - 836)) | (1L << (SHA1 - 836)) | (1L << (SHA2 - 836)) | (1L << (SCHEMA_NAME - 836)) | (1L << (SIGN - 836)) | (1L << (SIN - 836)) | (1L << (SLEEP - 836)) | (1L << (SOUNDEX - 836)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 836)) | (1L << (SQRT - 836)) | (1L << (SRID - 836)) | (1L << (STARTPOINT - 836)) | (1L << (STRCMP - 836)) | (1L << (STR_TO_DATE - 836)) | (1L << (ST_AREA - 836)) | (1L << (ST_ASBINARY - 836)) | (1L << (ST_ASTEXT - 836)) | (1L << (ST_ASWKB - 836)) | (1L << (ST_ASWKT - 836)) | (1L << (ST_BUFFER - 836)) | (1L << (ST_CENTROID - 836)) | (1L << (ST_CONTAINS - 836)) | (1L << (ST_CROSSES - 836)) | (1L << (ST_DIFFERENCE - 836)) | (1L << (ST_DIMENSION - 836)) | (1L << (ST_DISJOINT - 836)) | (1L << (ST_DISTANCE - 836)) | (1L << (ST_ENDPOINT - 836)) | (1L << (ST_ENVELOPE - 836)) | (1L << (ST_EQUALS - 836)) | (1L << (ST_EXTERIORRING - 836)) | (1L << (ST_GEOMCOLLFROMTEXT - 836)) | (1L << (ST_GEOMCOLLFROMTXT - 836)) | (1L << (ST_GEOMCOLLFROMWKB - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 836)) | (1L << (ST_GEOMETRYFROMTEXT - 836)) | (1L << (ST_GEOMETRYFROMWKB - 836)) | (1L << (ST_GEOMETRYN - 836)) | (1L << (ST_GEOMETRYTYPE - 836)) | (1L << (ST_GEOMFROMTEXT - 836)) | (1L << (ST_GEOMFROMWKB - 836)) | (1L << (ST_INTERIORRINGN - 836)) | (1L << (ST_INTERSECTION - 836)) | (1L << (ST_INTERSECTS - 836)) | (1L << (ST_ISCLOSED - 836)) | (1L << (ST_ISEMPTY - 836)) | (1L << (ST_ISSIMPLE - 836)) | (1L << (ST_LINEFROMTEXT - 836)))) != 0) || ((((_la - 900)) & ~0x3f) == 0 && ((1L << (_la - 900)) & ((1L << (ST_LINEFROMWKB - 900)) | (1L << (ST_LINESTRINGFROMTEXT - 900)) | (1L << (ST_LINESTRINGFROMWKB - 900)) | (1L << (ST_NUMGEOMETRIES - 900)) | (1L << (ST_NUMINTERIORRING - 900)) | (1L << (ST_NUMINTERIORRINGS - 900)) | (1L << (ST_NUMPOINTS - 900)) | (1L << (ST_OVERLAPS - 900)) | (1L << (ST_POINTFROMTEXT - 900)) | (1L << (ST_POINTFROMWKB - 900)) | (1L << (ST_POINTN - 900)) | (1L << (ST_POLYFROMTEXT - 900)) | (1L << (ST_POLYFROMWKB - 900)) | (1L << (ST_POLYGONFROMTEXT - 900)) | (1L << (ST_POLYGONFROMWKB - 900)) | (1L << (ST_SRID - 900)) | (1L << (ST_STARTPOINT - 900)) | (1L << (ST_SYMDIFFERENCE - 900)) | (1L << (ST_TOUCHES - 900)) | (1L << (ST_UNION - 900)) | (1L << (ST_WITHIN - 900)) | (1L << (ST_X - 900)) | (1L << (ST_Y - 900)) | (1L << (SUBDATE - 900)) | (1L << (SUBSTRING_INDEX - 900)) | (1L << (SUBTIME - 900)) | (1L << (SYSTEM_USER - 900)) | (1L << (TAN - 900)) | (1L << (TIMEDIFF - 900)) | (1L << (TIMESTAMPADD - 900)) | (1L << (TIMESTAMPDIFF - 900)) | (1L << (TIME_FORMAT - 900)) | (1L << (TIME_TO_SEC - 900)) | (1L << (TOUCHES - 900)) | (1L << (TO_BASE64 - 900)) | (1L << (TO_DAYS - 900)) | (1L << (TO_SECONDS - 900)) | (1L << (UCASE - 900)) | (1L << (UNCOMPRESS - 900)) | (1L << (UNCOMPRESSED_LENGTH - 900)) | (1L << (UNHEX - 900)) | (1L << (UNIX_TIMESTAMP - 900)) | (1L << (UPDATEXML - 900)) | (1L << (UPPER - 900)) | (1L << (UUID - 900)) | (1L << (UUID_SHORT - 900)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 900)) | (1L << (VERSION - 900)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 900)) | (1L << (WEEKDAY - 900)) | (1L << (WEEKOFYEAR - 900)) | (1L << (WEIGHT_STRING - 900)) | (1L << (WITHIN - 900)) | (1L << (YEARWEEK - 900)) | (1L << (Y_FUNCTION - 900)) | (1L << (X_FUNCTION - 900)))) != 0) || ((((_la - 994)) & ~0x3f) == 0 && ((1L << (_la - 994)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 994)) | (1L << (STRING_LITERAL - 994)) | (1L << (ID - 994)) | (1L << (REVERSE_QUOTE_ID - 994)))) != 0))
                        {
                            {
                                State = 1589; uid();
                            }
                        }

                        State = 1592; indexColumnNames();
                        State = 1596;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        while (_la == USING || _la == WITH || _la == COMMENT || _la == INVISIBLE || _la == KEY_BLOCK_SIZE || _la == VISIBLE)
                        {
                            {
                                {
                                    State = 1593; indexOption();
                                }
                            }
                            State = 1598;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class TableOptionContext : ParserRuleContext
    {
        public TableOptionContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_tableOption; } }

        public TableOptionContext() { }
        public virtual void CopyFrom(TableOptionContext context)
        {
            base.CopyFrom(context);
        }
    }
    public partial class TableOptionEngineContext : TableOptionContext
    {
        public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
        public EngineNameContext engineName()
        {
            return GetRuleContext<EngineNameContext>(0);
        }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public TableOptionEngineContext(TableOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterTableOptionEngine(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitTableOptionEngine(this);
        }
    }
    public partial class TableOptionMaxRowsContext : TableOptionContext
    {
        public ITerminalNode MAX_ROWS() { return GetToken(MySqlParser.MAX_ROWS, 0); }
        public DecimalLiteralContext decimalLiteral()
        {
            return GetRuleContext<DecimalLiteralContext>(0);
        }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public TableOptionMaxRowsContext(TableOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterTableOptionMaxRows(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitTableOptionMaxRows(this);
        }
    }
    public partial class TableOptionCollateContext : TableOptionContext
    {
        public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
        public CollationNameContext collationName()
        {
            return GetRuleContext<CollationNameContext>(0);
        }
        public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public TableOptionCollateContext(TableOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterTableOptionCollate(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitTableOptionCollate(this);
        }
    }
    public partial class TableOptionPersistentContext : TableOptionContext
    {
        public IToken extBoolValue;
        public ITerminalNode STATS_PERSISTENT() { return GetToken(MySqlParser.STATS_PERSISTENT, 0); }
        public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
        public ITerminalNode ZERO_DECIMAL() { return GetToken(MySqlParser.ZERO_DECIMAL, 0); }
        public ITerminalNode ONE_DECIMAL() { return GetToken(MySqlParser.ONE_DECIMAL, 0); }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public TableOptionPersistentContext(TableOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterTableOptionPersistent(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitTableOptionPersistent(this);
        }
    }
    public partial class TableOptionTablespaceContext : TableOptionContext
    {
        public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public TablespaceStorageContext tablespaceStorage()
        {
            return GetRuleContext<TablespaceStorageContext>(0);
        }
        public TableOptionTablespaceContext(TableOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterTableOptionTablespace(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitTableOptionTablespace(this);
        }
    }
    public partial class TableOptionPackKeysContext : TableOptionContext
    {
        public IToken extBoolValue;
        public ITerminalNode PACK_KEYS() { return GetToken(MySqlParser.PACK_KEYS, 0); }
        public ITerminalNode ZERO_DECIMAL() { return GetToken(MySqlParser.ZERO_DECIMAL, 0); }
        public ITerminalNode ONE_DECIMAL() { return GetToken(MySqlParser.ONE_DECIMAL, 0); }
        public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public TableOptionPackKeysContext(TableOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterTableOptionPackKeys(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitTableOptionPackKeys(this);
        }
    }
    public partial class TableOptionPasswordContext : TableOptionContext
    {
        public ITerminalNode PASSWORD() { return GetToken(MySqlParser.PASSWORD, 0); }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public TableOptionPasswordContext(TableOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterTableOptionPassword(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitTableOptionPassword(this);
        }
    }
    public partial class TableOptionUnionContext : TableOptionContext
    {
        public ITerminalNode UNION() { return GetToken(MySqlParser.UNION, 0); }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public TablesContext tables()
        {
            return GetRuleContext<TablesContext>(0);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public TableOptionUnionContext(TableOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterTableOptionUnion(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitTableOptionUnion(this);
        }
    }
    public partial class TableOptionSamplePageContext : TableOptionContext
    {
        public ITerminalNode STATS_SAMPLE_PAGES() { return GetToken(MySqlParser.STATS_SAMPLE_PAGES, 0); }
        public DecimalLiteralContext decimalLiteral()
        {
            return GetRuleContext<DecimalLiteralContext>(0);
        }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public TableOptionSamplePageContext(TableOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterTableOptionSamplePage(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitTableOptionSamplePage(this);
        }
    }
    public partial class TableOptionCharsetContext : TableOptionContext
    {
        public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
        public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
        public ITerminalNode CHARSET() { return GetToken(MySqlParser.CHARSET, 0); }
        public CharsetNameContext charsetName()
        {
            return GetRuleContext<CharsetNameContext>(0);
        }
        public ITerminalNode[] DEFAULT() { return GetTokens(MySqlParser.DEFAULT); }
        public ITerminalNode DEFAULT(int i)
        {
            return GetToken(MySqlParser.DEFAULT, i);
        }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public TableOptionCharsetContext(TableOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterTableOptionCharset(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitTableOptionCharset(this);
        }
    }
    public partial class TableOptionIndexDirectoryContext : TableOptionContext
    {
        public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
        public ITerminalNode DIRECTORY() { return GetToken(MySqlParser.DIRECTORY, 0); }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public TableOptionIndexDirectoryContext(TableOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterTableOptionIndexDirectory(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitTableOptionIndexDirectory(this);
        }
    }
    public partial class TableOptionKeyBlockSizeContext : TableOptionContext
    {
        public ITerminalNode KEY_BLOCK_SIZE() { return GetToken(MySqlParser.KEY_BLOCK_SIZE, 0); }
        public FileSizeLiteralContext fileSizeLiteral()
        {
            return GetRuleContext<FileSizeLiteralContext>(0);
        }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public TableOptionKeyBlockSizeContext(TableOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterTableOptionKeyBlockSize(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitTableOptionKeyBlockSize(this);
        }
    }
    public partial class TableOptionEncryptionContext : TableOptionContext
    {
        public ITerminalNode ENCRYPTION() { return GetToken(MySqlParser.ENCRYPTION, 0); }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public TableOptionEncryptionContext(TableOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterTableOptionEncryption(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitTableOptionEncryption(this);
        }
    }
    public partial class TableOptionDataDirectoryContext : TableOptionContext
    {
        public ITerminalNode DATA() { return GetToken(MySqlParser.DATA, 0); }
        public ITerminalNode DIRECTORY() { return GetToken(MySqlParser.DIRECTORY, 0); }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public TableOptionDataDirectoryContext(TableOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterTableOptionDataDirectory(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitTableOptionDataDirectory(this);
        }
    }
    public partial class TableOptionRecalculationContext : TableOptionContext
    {
        public IToken extBoolValue;
        public ITerminalNode STATS_AUTO_RECALC() { return GetToken(MySqlParser.STATS_AUTO_RECALC, 0); }
        public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
        public ITerminalNode ZERO_DECIMAL() { return GetToken(MySqlParser.ZERO_DECIMAL, 0); }
        public ITerminalNode ONE_DECIMAL() { return GetToken(MySqlParser.ONE_DECIMAL, 0); }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public TableOptionRecalculationContext(TableOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterTableOptionRecalculation(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitTableOptionRecalculation(this);
        }
    }
    public partial class TableOptionAutoIncrementContext : TableOptionContext
    {
        public ITerminalNode AUTO_INCREMENT() { return GetToken(MySqlParser.AUTO_INCREMENT, 0); }
        public DecimalLiteralContext decimalLiteral()
        {
            return GetRuleContext<DecimalLiteralContext>(0);
        }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public TableOptionAutoIncrementContext(TableOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterTableOptionAutoIncrement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitTableOptionAutoIncrement(this);
        }
    }
    public partial class TableOptionChecksumContext : TableOptionContext
    {
        public IToken boolValue;
        public ITerminalNode CHECKSUM() { return GetToken(MySqlParser.CHECKSUM, 0); }
        public ITerminalNode PAGE_CHECKSUM() { return GetToken(MySqlParser.PAGE_CHECKSUM, 0); }
        public ITerminalNode ZERO_DECIMAL() { return GetToken(MySqlParser.ZERO_DECIMAL, 0); }
        public ITerminalNode ONE_DECIMAL() { return GetToken(MySqlParser.ONE_DECIMAL, 0); }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public TableOptionChecksumContext(TableOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterTableOptionChecksum(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitTableOptionChecksum(this);
        }
    }
    public partial class TableOptionDelayContext : TableOptionContext
    {
        public IToken boolValue;
        public ITerminalNode DELAY_KEY_WRITE() { return GetToken(MySqlParser.DELAY_KEY_WRITE, 0); }
        public ITerminalNode ZERO_DECIMAL() { return GetToken(MySqlParser.ZERO_DECIMAL, 0); }
        public ITerminalNode ONE_DECIMAL() { return GetToken(MySqlParser.ONE_DECIMAL, 0); }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public TableOptionDelayContext(TableOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterTableOptionDelay(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitTableOptionDelay(this);
        }
    }
    public partial class TableOptionConnectionContext : TableOptionContext
    {
        public ITerminalNode CONNECTION() { return GetToken(MySqlParser.CONNECTION, 0); }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public TableOptionConnectionContext(TableOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterTableOptionConnection(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitTableOptionConnection(this);
        }
    }
    public partial class TableOptionCommentContext : TableOptionContext
    {
        public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public TableOptionCommentContext(TableOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterTableOptionComment(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitTableOptionComment(this);
        }
    }
    public partial class TableOptionAverageContext : TableOptionContext
    {
        public ITerminalNode AVG_ROW_LENGTH() { return GetToken(MySqlParser.AVG_ROW_LENGTH, 0); }
        public DecimalLiteralContext decimalLiteral()
        {
            return GetRuleContext<DecimalLiteralContext>(0);
        }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public TableOptionAverageContext(TableOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterTableOptionAverage(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitTableOptionAverage(this);
        }
    }
    public partial class TableOptionRowFormatContext : TableOptionContext
    {
        public IToken rowFormat;
        public ITerminalNode ROW_FORMAT() { return GetToken(MySqlParser.ROW_FORMAT, 0); }
        public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
        public ITerminalNode DYNAMIC() { return GetToken(MySqlParser.DYNAMIC, 0); }
        public ITerminalNode FIXED() { return GetToken(MySqlParser.FIXED, 0); }
        public ITerminalNode COMPRESSED() { return GetToken(MySqlParser.COMPRESSED, 0); }
        public ITerminalNode REDUNDANT() { return GetToken(MySqlParser.REDUNDANT, 0); }
        public ITerminalNode COMPACT() { return GetToken(MySqlParser.COMPACT, 0); }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public TableOptionRowFormatContext(TableOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterTableOptionRowFormat(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitTableOptionRowFormat(this);
        }
    }
    public partial class TableOptionCompressionContext : TableOptionContext
    {
        public ITerminalNode COMPRESSION() { return GetToken(MySqlParser.COMPRESSION, 0); }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public ITerminalNode ID() { return GetToken(MySqlParser.ID, 0); }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public TableOptionCompressionContext(TableOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterTableOptionCompression(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitTableOptionCompression(this);
        }
    }
    public partial class TableOptionInsertMethodContext : TableOptionContext
    {
        public IToken insertMethod;
        public ITerminalNode INSERT_METHOD() { return GetToken(MySqlParser.INSERT_METHOD, 0); }
        public ITerminalNode NO() { return GetToken(MySqlParser.NO, 0); }
        public ITerminalNode FIRST() { return GetToken(MySqlParser.FIRST, 0); }
        public ITerminalNode LAST() { return GetToken(MySqlParser.LAST, 0); }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public TableOptionInsertMethodContext(TableOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterTableOptionInsertMethod(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitTableOptionInsertMethod(this);
        }
    }
    public partial class TableOptionMinRowsContext : TableOptionContext
    {
        public ITerminalNode MIN_ROWS() { return GetToken(MySqlParser.MIN_ROWS, 0); }
        public DecimalLiteralContext decimalLiteral()
        {
            return GetRuleContext<DecimalLiteralContext>(0);
        }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public TableOptionMinRowsContext(TableOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterTableOptionMinRows(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitTableOptionMinRows(this);
        }
    }

    [RuleVersion(0)]
    public TableOptionContext tableOption()
    {
        TableOptionContext _localctx = new TableOptionContext(Context, State);
        EnterRule(_localctx, 92, RULE_tableOption);
        int _la;
        try
        {
            State = 1745;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 197, Context))
            {
                case 1:
                    _localctx = new TableOptionEngineContext(_localctx);
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 1601; Match(ENGINE);
                        State = 1603;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == EQUAL_SYMBOL)
                        {
                            {
                                State = 1602; Match(EQUAL_SYMBOL);
                            }
                        }

                        State = 1605; engineName();
                    }
                    break;
                case 2:
                    _localctx = new TableOptionAutoIncrementContext(_localctx);
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 1606; Match(AUTO_INCREMENT);
                        State = 1608;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == EQUAL_SYMBOL)
                        {
                            {
                                State = 1607; Match(EQUAL_SYMBOL);
                            }
                        }

                        State = 1610; decimalLiteral();
                    }
                    break;
                case 3:
                    _localctx = new TableOptionAverageContext(_localctx);
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 1611; Match(AVG_ROW_LENGTH);
                        State = 1613;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == EQUAL_SYMBOL)
                        {
                            {
                                State = 1612; Match(EQUAL_SYMBOL);
                            }
                        }

                        State = 1615; decimalLiteral();
                    }
                    break;
                case 4:
                    _localctx = new TableOptionCharsetContext(_localctx);
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 1617;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == DEFAULT)
                        {
                            {
                                State = 1616; Match(DEFAULT);
                            }
                        }

                        State = 1622;
                        ErrorHandler.Sync(this);
                        switch (TokenStream.LA(1))
                        {
                            case CHARACTER:
                                {
                                    State = 1619; Match(CHARACTER);
                                    State = 1620; Match(SET);
                                }
                                break;
                            case CHARSET:
                                {
                                    State = 1621; Match(CHARSET);
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        State = 1625;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == EQUAL_SYMBOL)
                        {
                            {
                                State = 1624; Match(EQUAL_SYMBOL);
                            }
                        }

                        State = 1629;
                        ErrorHandler.Sync(this);
                        switch (TokenStream.LA(1))
                        {
                            case BINARY:
                            case ARMSCII8:
                            case ASCII:
                            case BIG5:
                            case CP1250:
                            case CP1251:
                            case CP1256:
                            case CP1257:
                            case CP850:
                            case CP852:
                            case CP866:
                            case CP932:
                            case DEC8:
                            case EUCJPMS:
                            case EUCKR:
                            case GB2312:
                            case GBK:
                            case GEOSTD8:
                            case GREEK:
                            case HEBREW:
                            case HP8:
                            case KEYBCS2:
                            case KOI8R:
                            case KOI8U:
                            case LATIN1:
                            case LATIN2:
                            case LATIN5:
                            case LATIN7:
                            case MACCE:
                            case MACROMAN:
                            case SJIS:
                            case SWE7:
                            case TIS620:
                            case UCS2:
                            case UJIS:
                            case UTF16:
                            case UTF16LE:
                            case UTF32:
                            case UTF8:
                            case UTF8MB3:
                            case UTF8MB4:
                            case CHARSET_REVERSE_QOUTE_STRING:
                            case STRING_LITERAL:
                                {
                                    State = 1627; charsetName();
                                }
                                break;
                            case DEFAULT:
                                {
                                    State = 1628; Match(DEFAULT);
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }
                    break;
                case 5:
                    _localctx = new TableOptionChecksumContext(_localctx);
                    EnterOuterAlt(_localctx, 5);
                    {
                        State = 1631;
                        _la = TokenStream.LA(1);
                        if (!(_la == CHECKSUM || _la == PAGE_CHECKSUM))
                        {
                            ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                        State = 1633;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == EQUAL_SYMBOL)
                        {
                            {
                                State = 1632; Match(EQUAL_SYMBOL);
                            }
                        }

                        State = 1635;
                        ((TableOptionChecksumContext)_localctx).boolValue = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == ZERO_DECIMAL || _la == ONE_DECIMAL))
                        {
                            ((TableOptionChecksumContext)_localctx).boolValue = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                    break;
                case 6:
                    _localctx = new TableOptionCollateContext(_localctx);
                    EnterOuterAlt(_localctx, 6);
                    {
                        State = 1637;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == DEFAULT)
                        {
                            {
                                State = 1636; Match(DEFAULT);
                            }
                        }

                        State = 1639; Match(COLLATE);
                        State = 1641;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == EQUAL_SYMBOL)
                        {
                            {
                                State = 1640; Match(EQUAL_SYMBOL);
                            }
                        }

                        State = 1643; collationName();
                    }
                    break;
                case 7:
                    _localctx = new TableOptionCommentContext(_localctx);
                    EnterOuterAlt(_localctx, 7);
                    {
                        State = 1644; Match(COMMENT);
                        State = 1646;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == EQUAL_SYMBOL)
                        {
                            {
                                State = 1645; Match(EQUAL_SYMBOL);
                            }
                        }

                        State = 1648; Match(STRING_LITERAL);
                    }
                    break;
                case 8:
                    _localctx = new TableOptionCompressionContext(_localctx);
                    EnterOuterAlt(_localctx, 8);
                    {
                        State = 1649; Match(COMPRESSION);
                        State = 1651;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == EQUAL_SYMBOL)
                        {
                            {
                                State = 1650; Match(EQUAL_SYMBOL);
                            }
                        }

                        State = 1653;
                        _la = TokenStream.LA(1);
                        if (!(_la == STRING_LITERAL || _la == ID))
                        {
                            ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                    break;
                case 9:
                    _localctx = new TableOptionConnectionContext(_localctx);
                    EnterOuterAlt(_localctx, 9);
                    {
                        State = 1654; Match(CONNECTION);
                        State = 1656;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == EQUAL_SYMBOL)
                        {
                            {
                                State = 1655; Match(EQUAL_SYMBOL);
                            }
                        }

                        State = 1658; Match(STRING_LITERAL);
                    }
                    break;
                case 10:
                    _localctx = new TableOptionDataDirectoryContext(_localctx);
                    EnterOuterAlt(_localctx, 10);
                    {
                        State = 1659; Match(DATA);
                        State = 1660; Match(DIRECTORY);
                        State = 1662;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == EQUAL_SYMBOL)
                        {
                            {
                                State = 1661; Match(EQUAL_SYMBOL);
                            }
                        }

                        State = 1664; Match(STRING_LITERAL);
                    }
                    break;
                case 11:
                    _localctx = new TableOptionDelayContext(_localctx);
                    EnterOuterAlt(_localctx, 11);
                    {
                        State = 1665; Match(DELAY_KEY_WRITE);
                        State = 1667;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == EQUAL_SYMBOL)
                        {
                            {
                                State = 1666; Match(EQUAL_SYMBOL);
                            }
                        }

                        State = 1669;
                        ((TableOptionDelayContext)_localctx).boolValue = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == ZERO_DECIMAL || _la == ONE_DECIMAL))
                        {
                            ((TableOptionDelayContext)_localctx).boolValue = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                    break;
                case 12:
                    _localctx = new TableOptionEncryptionContext(_localctx);
                    EnterOuterAlt(_localctx, 12);
                    {
                        State = 1670; Match(ENCRYPTION);
                        State = 1672;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == EQUAL_SYMBOL)
                        {
                            {
                                State = 1671; Match(EQUAL_SYMBOL);
                            }
                        }

                        State = 1674; Match(STRING_LITERAL);
                    }
                    break;
                case 13:
                    _localctx = new TableOptionIndexDirectoryContext(_localctx);
                    EnterOuterAlt(_localctx, 13);
                    {
                        State = 1675; Match(INDEX);
                        State = 1676; Match(DIRECTORY);
                        State = 1678;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == EQUAL_SYMBOL)
                        {
                            {
                                State = 1677; Match(EQUAL_SYMBOL);
                            }
                        }

                        State = 1680; Match(STRING_LITERAL);
                    }
                    break;
                case 14:
                    _localctx = new TableOptionInsertMethodContext(_localctx);
                    EnterOuterAlt(_localctx, 14);
                    {
                        State = 1681; Match(INSERT_METHOD);
                        State = 1683;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == EQUAL_SYMBOL)
                        {
                            {
                                State = 1682; Match(EQUAL_SYMBOL);
                            }
                        }

                        State = 1685;
                        ((TableOptionInsertMethodContext)_localctx).insertMethod = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == FIRST || _la == LAST || _la == NO))
                        {
                            ((TableOptionInsertMethodContext)_localctx).insertMethod = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                    break;
                case 15:
                    _localctx = new TableOptionKeyBlockSizeContext(_localctx);
                    EnterOuterAlt(_localctx, 15);
                    {
                        State = 1686; Match(KEY_BLOCK_SIZE);
                        State = 1688;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == EQUAL_SYMBOL)
                        {
                            {
                                State = 1687; Match(EQUAL_SYMBOL);
                            }
                        }

                        State = 1690; fileSizeLiteral();
                    }
                    break;
                case 16:
                    _localctx = new TableOptionMaxRowsContext(_localctx);
                    EnterOuterAlt(_localctx, 16);
                    {
                        State = 1691; Match(MAX_ROWS);
                        State = 1693;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == EQUAL_SYMBOL)
                        {
                            {
                                State = 1692; Match(EQUAL_SYMBOL);
                            }
                        }

                        State = 1695; decimalLiteral();
                    }
                    break;
                case 17:
                    _localctx = new TableOptionMinRowsContext(_localctx);
                    EnterOuterAlt(_localctx, 17);
                    {
                        State = 1696; Match(MIN_ROWS);
                        State = 1698;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == EQUAL_SYMBOL)
                        {
                            {
                                State = 1697; Match(EQUAL_SYMBOL);
                            }
                        }

                        State = 1700; decimalLiteral();
                    }
                    break;
                case 18:
                    _localctx = new TableOptionPackKeysContext(_localctx);
                    EnterOuterAlt(_localctx, 18);
                    {
                        State = 1701; Match(PACK_KEYS);
                        State = 1703;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == EQUAL_SYMBOL)
                        {
                            {
                                State = 1702; Match(EQUAL_SYMBOL);
                            }
                        }

                        State = 1705;
                        ((TableOptionPackKeysContext)_localctx).extBoolValue = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == DEFAULT || _la == ZERO_DECIMAL || _la == ONE_DECIMAL))
                        {
                            ((TableOptionPackKeysContext)_localctx).extBoolValue = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                    break;
                case 19:
                    _localctx = new TableOptionPasswordContext(_localctx);
                    EnterOuterAlt(_localctx, 19);
                    {
                        State = 1706; Match(PASSWORD);
                        State = 1708;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == EQUAL_SYMBOL)
                        {
                            {
                                State = 1707; Match(EQUAL_SYMBOL);
                            }
                        }

                        State = 1710; Match(STRING_LITERAL);
                    }
                    break;
                case 20:
                    _localctx = new TableOptionRowFormatContext(_localctx);
                    EnterOuterAlt(_localctx, 20);
                    {
                        State = 1711; Match(ROW_FORMAT);
                        State = 1713;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == EQUAL_SYMBOL)
                        {
                            {
                                State = 1712; Match(EQUAL_SYMBOL);
                            }
                        }

                        State = 1715;
                        ((TableOptionRowFormatContext)_localctx).rowFormat = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == DEFAULT || ((((_la - 296)) & ~0x3f) == 0 && ((1L << (_la - 296)) & ((1L << (COMPACT - 296)) | (1L << (COMPRESSED - 296)) | (1L << (DYNAMIC - 296)) | (1L << (FIXED - 296)))) != 0) || _la == REDUNDANT))
                        {
                            ((TableOptionRowFormatContext)_localctx).rowFormat = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                    break;
                case 21:
                    _localctx = new TableOptionRecalculationContext(_localctx);
                    EnterOuterAlt(_localctx, 21);
                    {
                        State = 1716; Match(STATS_AUTO_RECALC);
                        State = 1718;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == EQUAL_SYMBOL)
                        {
                            {
                                State = 1717; Match(EQUAL_SYMBOL);
                            }
                        }

                        State = 1720;
                        ((TableOptionRecalculationContext)_localctx).extBoolValue = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == DEFAULT || _la == ZERO_DECIMAL || _la == ONE_DECIMAL))
                        {
                            ((TableOptionRecalculationContext)_localctx).extBoolValue = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                    break;
                case 22:
                    _localctx = new TableOptionPersistentContext(_localctx);
                    EnterOuterAlt(_localctx, 22);
                    {
                        State = 1721; Match(STATS_PERSISTENT);
                        State = 1723;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == EQUAL_SYMBOL)
                        {
                            {
                                State = 1722; Match(EQUAL_SYMBOL);
                            }
                        }

                        State = 1725;
                        ((TableOptionPersistentContext)_localctx).extBoolValue = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == DEFAULT || _la == ZERO_DECIMAL || _la == ONE_DECIMAL))
                        {
                            ((TableOptionPersistentContext)_localctx).extBoolValue = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                    break;
                case 23:
                    _localctx = new TableOptionSamplePageContext(_localctx);
                    EnterOuterAlt(_localctx, 23);
                    {
                        State = 1726; Match(STATS_SAMPLE_PAGES);
                        State = 1728;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == EQUAL_SYMBOL)
                        {
                            {
                                State = 1727; Match(EQUAL_SYMBOL);
                            }
                        }

                        State = 1730; decimalLiteral();
                    }
                    break;
                case 24:
                    _localctx = new TableOptionTablespaceContext(_localctx);
                    EnterOuterAlt(_localctx, 24);
                    {
                        State = 1731; Match(TABLESPACE);
                        State = 1732; uid();
                        State = 1734;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 195, Context))
                        {
                            case 1:
                                {
                                    State = 1733; tablespaceStorage();
                                }
                                break;
                        }
                    }
                    break;
                case 25:
                    _localctx = new TableOptionTablespaceContext(_localctx);
                    EnterOuterAlt(_localctx, 25);
                    {
                        State = 1736; tablespaceStorage();
                    }
                    break;
                case 26:
                    _localctx = new TableOptionUnionContext(_localctx);
                    EnterOuterAlt(_localctx, 26);
                    {
                        State = 1737; Match(UNION);
                        State = 1739;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == EQUAL_SYMBOL)
                        {
                            {
                                State = 1738; Match(EQUAL_SYMBOL);
                            }
                        }

                        State = 1741; Match(LR_BRACKET);
                        State = 1742; tables();
                        State = 1743; Match(RR_BRACKET);
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class TablespaceStorageContext : ParserRuleContext
    {
        public ITerminalNode STORAGE() { return GetToken(MySqlParser.STORAGE, 0); }
        public ITerminalNode DISK() { return GetToken(MySqlParser.DISK, 0); }
        public ITerminalNode MEMORY() { return GetToken(MySqlParser.MEMORY, 0); }
        public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
        public TablespaceStorageContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_tablespaceStorage; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterTablespaceStorage(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitTablespaceStorage(this);
        }
    }

    [RuleVersion(0)]
    public TablespaceStorageContext tablespaceStorage()
    {
        TablespaceStorageContext _localctx = new TablespaceStorageContext(Context, State);
        EnterRule(_localctx, 94, RULE_tablespaceStorage);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 1747; Match(STORAGE);
                State = 1748;
                _la = TokenStream.LA(1);
                if (!(_la == DEFAULT || _la == DISK || _la == MEMORY))
                {
                    ErrorHandler.RecoverInline(this);
                }
                else
                {
                    ErrorHandler.ReportMatch(this);
                    Consume();
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class PartitionDefinitionsContext : ParserRuleContext
    {
        public DecimalLiteralContext count;
        public DecimalLiteralContext subCount;
        public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
        public ITerminalNode[] BY() { return GetTokens(MySqlParser.BY); }
        public ITerminalNode BY(int i)
        {
            return GetToken(MySqlParser.BY, i);
        }
        public PartitionFunctionDefinitionContext partitionFunctionDefinition()
        {
            return GetRuleContext<PartitionFunctionDefinitionContext>(0);
        }
        public ITerminalNode PARTITIONS() { return GetToken(MySqlParser.PARTITIONS, 0); }
        public ITerminalNode SUBPARTITION() { return GetToken(MySqlParser.SUBPARTITION, 0); }
        public SubpartitionFunctionDefinitionContext subpartitionFunctionDefinition()
        {
            return GetRuleContext<SubpartitionFunctionDefinitionContext>(0);
        }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public PartitionDefinitionContext[] partitionDefinition()
        {
            return GetRuleContexts<PartitionDefinitionContext>();
        }
        public PartitionDefinitionContext partitionDefinition(int i)
        {
            return GetRuleContext<PartitionDefinitionContext>(i);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public DecimalLiteralContext[] decimalLiteral()
        {
            return GetRuleContexts<DecimalLiteralContext>();
        }
        public DecimalLiteralContext decimalLiteral(int i)
        {
            return GetRuleContext<DecimalLiteralContext>(i);
        }
        public ITerminalNode SUBPARTITIONS() { return GetToken(MySqlParser.SUBPARTITIONS, 0); }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public PartitionDefinitionsContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_partitionDefinitions; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterPartitionDefinitions(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitPartitionDefinitions(this);
        }
    }

    [RuleVersion(0)]
    public PartitionDefinitionsContext partitionDefinitions()
    {
        PartitionDefinitionsContext _localctx = new PartitionDefinitionsContext(Context, State);
        EnterRule(_localctx, 96, RULE_partitionDefinitions);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 1750; Match(PARTITION);
                State = 1751; Match(BY);
                State = 1752; partitionFunctionDefinition();
                State = 1755;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == PARTITIONS)
                {
                    {
                        State = 1753; Match(PARTITIONS);
                        State = 1754; _localctx.count = decimalLiteral();
                    }
                }

                State = 1764;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == SUBPARTITION)
                {
                    {
                        State = 1757; Match(SUBPARTITION);
                        State = 1758; Match(BY);
                        State = 1759; subpartitionFunctionDefinition();
                        State = 1762;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == SUBPARTITIONS)
                        {
                            {
                                State = 1760; Match(SUBPARTITIONS);
                                State = 1761; _localctx.subCount = decimalLiteral();
                            }
                        }

                    }
                }

                State = 1777;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 202, Context))
                {
                    case 1:
                        {
                            State = 1766; Match(LR_BRACKET);
                            State = 1767; partitionDefinition();
                            State = 1772;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            while (_la == COMMA)
                            {
                                {
                                    {
                                        State = 1768; Match(COMMA);
                                        State = 1769; partitionDefinition();
                                    }
                                }
                                State = 1774;
                                ErrorHandler.Sync(this);
                                _la = TokenStream.LA(1);
                            }
                            State = 1775; Match(RR_BRACKET);
                        }
                        break;
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class PartitionFunctionDefinitionContext : ParserRuleContext
    {
        public PartitionFunctionDefinitionContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_partitionFunctionDefinition; } }

        public PartitionFunctionDefinitionContext() { }
        public virtual void CopyFrom(PartitionFunctionDefinitionContext context)
        {
            base.CopyFrom(context);
        }
    }
    public partial class PartitionFunctionKeyContext : PartitionFunctionDefinitionContext
    {
        public IToken algType;
        public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public UidListContext uidList()
        {
            return GetRuleContext<UidListContext>(0);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public ITerminalNode LINEAR() { return GetToken(MySqlParser.LINEAR, 0); }
        public ITerminalNode ALGORITHM() { return GetToken(MySqlParser.ALGORITHM, 0); }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public ITerminalNode ONE_DECIMAL() { return GetToken(MySqlParser.ONE_DECIMAL, 0); }
        public ITerminalNode TWO_DECIMAL() { return GetToken(MySqlParser.TWO_DECIMAL, 0); }
        public PartitionFunctionKeyContext(PartitionFunctionDefinitionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterPartitionFunctionKey(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitPartitionFunctionKey(this);
        }
    }
    public partial class PartitionFunctionHashContext : PartitionFunctionDefinitionContext
    {
        public ITerminalNode HASH() { return GetToken(MySqlParser.HASH, 0); }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public ExpressionContext expression()
        {
            return GetRuleContext<ExpressionContext>(0);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public ITerminalNode LINEAR() { return GetToken(MySqlParser.LINEAR, 0); }
        public PartitionFunctionHashContext(PartitionFunctionDefinitionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterPartitionFunctionHash(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitPartitionFunctionHash(this);
        }
    }
    public partial class PartitionFunctionListContext : PartitionFunctionDefinitionContext
    {
        public ITerminalNode LIST() { return GetToken(MySqlParser.LIST, 0); }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public ExpressionContext expression()
        {
            return GetRuleContext<ExpressionContext>(0);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public ITerminalNode COLUMNS() { return GetToken(MySqlParser.COLUMNS, 0); }
        public UidListContext uidList()
        {
            return GetRuleContext<UidListContext>(0);
        }
        public PartitionFunctionListContext(PartitionFunctionDefinitionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterPartitionFunctionList(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitPartitionFunctionList(this);
        }
    }
    public partial class PartitionFunctionRangeContext : PartitionFunctionDefinitionContext
    {
        public ITerminalNode RANGE() { return GetToken(MySqlParser.RANGE, 0); }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public ExpressionContext expression()
        {
            return GetRuleContext<ExpressionContext>(0);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public ITerminalNode COLUMNS() { return GetToken(MySqlParser.COLUMNS, 0); }
        public UidListContext uidList()
        {
            return GetRuleContext<UidListContext>(0);
        }
        public PartitionFunctionRangeContext(PartitionFunctionDefinitionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterPartitionFunctionRange(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitPartitionFunctionRange(this);
        }
    }

    [RuleVersion(0)]
    public PartitionFunctionDefinitionContext partitionFunctionDefinition()
    {
        PartitionFunctionDefinitionContext _localctx = new PartitionFunctionDefinitionContext(Context, State);
        EnterRule(_localctx, 98, RULE_partitionFunctionDefinition);
        int _la;
        try
        {
            State = 1824;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 208, Context))
            {
                case 1:
                    _localctx = new PartitionFunctionHashContext(_localctx);
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 1780;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == LINEAR)
                        {
                            {
                                State = 1779; Match(LINEAR);
                            }
                        }

                        State = 1782; Match(HASH);
                        State = 1783; Match(LR_BRACKET);
                        State = 1784; expression(0);
                        State = 1785; Match(RR_BRACKET);
                    }
                    break;
                case 2:
                    _localctx = new PartitionFunctionKeyContext(_localctx);
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 1788;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == LINEAR)
                        {
                            {
                                State = 1787; Match(LINEAR);
                            }
                        }

                        State = 1790; Match(KEY);
                        State = 1794;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == ALGORITHM)
                        {
                            {
                                State = 1791; Match(ALGORITHM);
                                State = 1792; Match(EQUAL_SYMBOL);
                                State = 1793;
                                ((PartitionFunctionKeyContext)_localctx).algType = TokenStream.LT(1);
                                _la = TokenStream.LA(1);
                                if (!(_la == ONE_DECIMAL || _la == TWO_DECIMAL))
                                {
                                    ((PartitionFunctionKeyContext)_localctx).algType = ErrorHandler.RecoverInline(this);
                                }
                                else
                                {
                                    ErrorHandler.ReportMatch(this);
                                    Consume();
                                }
                            }
                        }

                        State = 1796; Match(LR_BRACKET);
                        State = 1797; uidList();
                        State = 1798; Match(RR_BRACKET);
                    }
                    break;
                case 3:
                    _localctx = new PartitionFunctionRangeContext(_localctx);
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 1800; Match(RANGE);
                        State = 1810;
                        ErrorHandler.Sync(this);
                        switch (TokenStream.LA(1))
                        {
                            case LR_BRACKET:
                                {
                                    State = 1801; Match(LR_BRACKET);
                                    State = 1802; expression(0);
                                    State = 1803; Match(RR_BRACKET);
                                }
                                break;
                            case COLUMNS:
                                {
                                    State = 1805; Match(COLUMNS);
                                    State = 1806; Match(LR_BRACKET);
                                    State = 1807; uidList();
                                    State = 1808; Match(RR_BRACKET);
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }
                    break;
                case 4:
                    _localctx = new PartitionFunctionListContext(_localctx);
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 1812; Match(LIST);
                        State = 1822;
                        ErrorHandler.Sync(this);
                        switch (TokenStream.LA(1))
                        {
                            case LR_BRACKET:
                                {
                                    State = 1813; Match(LR_BRACKET);
                                    State = 1814; expression(0);
                                    State = 1815; Match(RR_BRACKET);
                                }
                                break;
                            case COLUMNS:
                                {
                                    State = 1817; Match(COLUMNS);
                                    State = 1818; Match(LR_BRACKET);
                                    State = 1819; uidList();
                                    State = 1820; Match(RR_BRACKET);
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class SubpartitionFunctionDefinitionContext : ParserRuleContext
    {
        public SubpartitionFunctionDefinitionContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_subpartitionFunctionDefinition; } }

        public SubpartitionFunctionDefinitionContext() { }
        public virtual void CopyFrom(SubpartitionFunctionDefinitionContext context)
        {
            base.CopyFrom(context);
        }
    }
    public partial class SubPartitionFunctionHashContext : SubpartitionFunctionDefinitionContext
    {
        public ITerminalNode HASH() { return GetToken(MySqlParser.HASH, 0); }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public ExpressionContext expression()
        {
            return GetRuleContext<ExpressionContext>(0);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public ITerminalNode LINEAR() { return GetToken(MySqlParser.LINEAR, 0); }
        public SubPartitionFunctionHashContext(SubpartitionFunctionDefinitionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterSubPartitionFunctionHash(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitSubPartitionFunctionHash(this);
        }
    }
    public partial class SubPartitionFunctionKeyContext : SubpartitionFunctionDefinitionContext
    {
        public IToken algType;
        public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public UidListContext uidList()
        {
            return GetRuleContext<UidListContext>(0);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public ITerminalNode LINEAR() { return GetToken(MySqlParser.LINEAR, 0); }
        public ITerminalNode ALGORITHM() { return GetToken(MySqlParser.ALGORITHM, 0); }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public ITerminalNode ONE_DECIMAL() { return GetToken(MySqlParser.ONE_DECIMAL, 0); }
        public ITerminalNode TWO_DECIMAL() { return GetToken(MySqlParser.TWO_DECIMAL, 0); }
        public SubPartitionFunctionKeyContext(SubpartitionFunctionDefinitionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterSubPartitionFunctionKey(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitSubPartitionFunctionKey(this);
        }
    }

    [RuleVersion(0)]
    public SubpartitionFunctionDefinitionContext subpartitionFunctionDefinition()
    {
        SubpartitionFunctionDefinitionContext _localctx = new SubpartitionFunctionDefinitionContext(Context, State);
        EnterRule(_localctx, 100, RULE_subpartitionFunctionDefinition);
        int _la;
        try
        {
            State = 1847;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 212, Context))
            {
                case 1:
                    _localctx = new SubPartitionFunctionHashContext(_localctx);
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 1827;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == LINEAR)
                        {
                            {
                                State = 1826; Match(LINEAR);
                            }
                        }

                        State = 1829; Match(HASH);
                        State = 1830; Match(LR_BRACKET);
                        State = 1831; expression(0);
                        State = 1832; Match(RR_BRACKET);
                    }
                    break;
                case 2:
                    _localctx = new SubPartitionFunctionKeyContext(_localctx);
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 1835;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == LINEAR)
                        {
                            {
                                State = 1834; Match(LINEAR);
                            }
                        }

                        State = 1837; Match(KEY);
                        State = 1841;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == ALGORITHM)
                        {
                            {
                                State = 1838; Match(ALGORITHM);
                                State = 1839; Match(EQUAL_SYMBOL);
                                State = 1840;
                                ((SubPartitionFunctionKeyContext)_localctx).algType = TokenStream.LT(1);
                                _la = TokenStream.LA(1);
                                if (!(_la == ONE_DECIMAL || _la == TWO_DECIMAL))
                                {
                                    ((SubPartitionFunctionKeyContext)_localctx).algType = ErrorHandler.RecoverInline(this);
                                }
                                else
                                {
                                    ErrorHandler.ReportMatch(this);
                                    Consume();
                                }
                            }
                        }

                        State = 1843; Match(LR_BRACKET);
                        State = 1844; uidList();
                        State = 1845; Match(RR_BRACKET);
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class PartitionDefinitionContext : ParserRuleContext
    {
        public PartitionDefinitionContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_partitionDefinition; } }

        public PartitionDefinitionContext() { }
        public virtual void CopyFrom(PartitionDefinitionContext context)
        {
            base.CopyFrom(context);
        }
    }
    public partial class PartitionComparisionContext : PartitionDefinitionContext
    {
        public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public ITerminalNode VALUES() { return GetToken(MySqlParser.VALUES, 0); }
        public ITerminalNode LESS() { return GetToken(MySqlParser.LESS, 0); }
        public ITerminalNode THAN() { return GetToken(MySqlParser.THAN, 0); }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public PartitionDefinerAtomContext[] partitionDefinerAtom()
        {
            return GetRuleContexts<PartitionDefinerAtomContext>();
        }
        public PartitionDefinerAtomContext partitionDefinerAtom(int i)
        {
            return GetRuleContext<PartitionDefinerAtomContext>(i);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public PartitionOptionContext[] partitionOption()
        {
            return GetRuleContexts<PartitionOptionContext>();
        }
        public PartitionOptionContext partitionOption(int i)
        {
            return GetRuleContext<PartitionOptionContext>(i);
        }
        public SubpartitionDefinitionContext[] subpartitionDefinition()
        {
            return GetRuleContexts<SubpartitionDefinitionContext>();
        }
        public SubpartitionDefinitionContext subpartitionDefinition(int i)
        {
            return GetRuleContext<SubpartitionDefinitionContext>(i);
        }
        public PartitionComparisionContext(PartitionDefinitionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterPartitionComparision(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitPartitionComparision(this);
        }
    }
    public partial class PartitionListAtomContext : PartitionDefinitionContext
    {
        public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public ITerminalNode VALUES() { return GetToken(MySqlParser.VALUES, 0); }
        public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public PartitionDefinerAtomContext[] partitionDefinerAtom()
        {
            return GetRuleContexts<PartitionDefinerAtomContext>();
        }
        public PartitionDefinerAtomContext partitionDefinerAtom(int i)
        {
            return GetRuleContext<PartitionDefinerAtomContext>(i);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public PartitionOptionContext[] partitionOption()
        {
            return GetRuleContexts<PartitionOptionContext>();
        }
        public PartitionOptionContext partitionOption(int i)
        {
            return GetRuleContext<PartitionOptionContext>(i);
        }
        public SubpartitionDefinitionContext[] subpartitionDefinition()
        {
            return GetRuleContexts<SubpartitionDefinitionContext>();
        }
        public SubpartitionDefinitionContext subpartitionDefinition(int i)
        {
            return GetRuleContext<SubpartitionDefinitionContext>(i);
        }
        public PartitionListAtomContext(PartitionDefinitionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterPartitionListAtom(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitPartitionListAtom(this);
        }
    }
    public partial class PartitionListVectorContext : PartitionDefinitionContext
    {
        public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public ITerminalNode VALUES() { return GetToken(MySqlParser.VALUES, 0); }
        public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public PartitionDefinerVectorContext[] partitionDefinerVector()
        {
            return GetRuleContexts<PartitionDefinerVectorContext>();
        }
        public PartitionDefinerVectorContext partitionDefinerVector(int i)
        {
            return GetRuleContext<PartitionDefinerVectorContext>(i);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public PartitionOptionContext[] partitionOption()
        {
            return GetRuleContexts<PartitionOptionContext>();
        }
        public PartitionOptionContext partitionOption(int i)
        {
            return GetRuleContext<PartitionOptionContext>(i);
        }
        public SubpartitionDefinitionContext[] subpartitionDefinition()
        {
            return GetRuleContexts<SubpartitionDefinitionContext>();
        }
        public SubpartitionDefinitionContext subpartitionDefinition(int i)
        {
            return GetRuleContext<SubpartitionDefinitionContext>(i);
        }
        public PartitionListVectorContext(PartitionDefinitionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterPartitionListVector(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitPartitionListVector(this);
        }
    }
    public partial class PartitionSimpleContext : PartitionDefinitionContext
    {
        public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public PartitionOptionContext[] partitionOption()
        {
            return GetRuleContexts<PartitionOptionContext>();
        }
        public PartitionOptionContext partitionOption(int i)
        {
            return GetRuleContext<PartitionOptionContext>(i);
        }
        public SubpartitionDefinitionContext[] subpartitionDefinition()
        {
            return GetRuleContexts<SubpartitionDefinitionContext>();
        }
        public SubpartitionDefinitionContext subpartitionDefinition(int i)
        {
            return GetRuleContext<SubpartitionDefinitionContext>(i);
        }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public PartitionSimpleContext(PartitionDefinitionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterPartitionSimple(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitPartitionSimple(this);
        }
    }

    [RuleVersion(0)]
    public PartitionDefinitionContext partitionDefinition()
    {
        PartitionDefinitionContext _localctx = new PartitionDefinitionContext(Context, State);
        EnterRule(_localctx, 102, RULE_partitionDefinition);
        int _la;
        try
        {
            int _alt;
            State = 1980;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 231, Context))
            {
                case 1:
                    _localctx = new PartitionComparisionContext(_localctx);
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 1849; Match(PARTITION);
                        State = 1850; uid();
                        State = 1851; Match(VALUES);
                        State = 1852; Match(LESS);
                        State = 1853; Match(THAN);
                        State = 1854; Match(LR_BRACKET);
                        State = 1855; partitionDefinerAtom();
                        State = 1860;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        while (_la == COMMA)
                        {
                            {
                                {
                                    State = 1856; Match(COMMA);
                                    State = 1857; partitionDefinerAtom();
                                }
                            }
                            State = 1862;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                        }
                        State = 1863; Match(RR_BRACKET);
                        State = 1867;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        while (_la == INDEX || ((((_la - 294)) & ~0x3f) == 0 && ((1L << (_la - 294)) & ((1L << (COMMENT - 294)) | (1L << (DATA - 294)) | (1L << (ENGINE - 294)))) != 0) || ((((_la - 417)) & ~0x3f) == 0 && ((1L << (_la - 417)) & ((1L << (MAX_ROWS - 417)) | (1L << (MIN_ROWS - 417)) | (1L << (NODEGROUP - 417)))) != 0) || _la == STORAGE || _la == TABLESPACE)
                        {
                            {
                                {
                                    State = 1864; partitionOption();
                                }
                            }
                            State = 1869;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                        }
                        State = 1878;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == SUBPARTITION)
                        {
                            {
                                State = 1870; subpartitionDefinition();
                                State = 1875;
                                ErrorHandler.Sync(this);
                                _alt = Interpreter.AdaptivePredict(TokenStream, 215, Context);
                                while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                                {
                                    if (_alt == 1)
                                    {
                                        {
                                            {
                                                State = 1871; Match(COMMA);
                                                State = 1872; subpartitionDefinition();
                                            }
                                        }
                                    }
                                    State = 1877;
                                    ErrorHandler.Sync(this);
                                    _alt = Interpreter.AdaptivePredict(TokenStream, 215, Context);
                                }
                            }
                        }

                    }
                    break;
                case 2:
                    _localctx = new PartitionComparisionContext(_localctx);
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 1880; Match(PARTITION);
                        State = 1881; uid();
                        State = 1882; Match(VALUES);
                        State = 1883; Match(LESS);
                        State = 1884; Match(THAN);
                        State = 1885; partitionDefinerAtom();
                        State = 1889;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        while (_la == INDEX || ((((_la - 294)) & ~0x3f) == 0 && ((1L << (_la - 294)) & ((1L << (COMMENT - 294)) | (1L << (DATA - 294)) | (1L << (ENGINE - 294)))) != 0) || ((((_la - 417)) & ~0x3f) == 0 && ((1L << (_la - 417)) & ((1L << (MAX_ROWS - 417)) | (1L << (MIN_ROWS - 417)) | (1L << (NODEGROUP - 417)))) != 0) || _la == STORAGE || _la == TABLESPACE)
                        {
                            {
                                {
                                    State = 1886; partitionOption();
                                }
                            }
                            State = 1891;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                        }
                        State = 1900;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == SUBPARTITION)
                        {
                            {
                                State = 1892; subpartitionDefinition();
                                State = 1897;
                                ErrorHandler.Sync(this);
                                _alt = Interpreter.AdaptivePredict(TokenStream, 218, Context);
                                while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                                {
                                    if (_alt == 1)
                                    {
                                        {
                                            {
                                                State = 1893; Match(COMMA);
                                                State = 1894; subpartitionDefinition();
                                            }
                                        }
                                    }
                                    State = 1899;
                                    ErrorHandler.Sync(this);
                                    _alt = Interpreter.AdaptivePredict(TokenStream, 218, Context);
                                }
                            }
                        }

                    }
                    break;
                case 3:
                    _localctx = new PartitionListAtomContext(_localctx);
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 1902; Match(PARTITION);
                        State = 1903; uid();
                        State = 1904; Match(VALUES);
                        State = 1905; Match(IN);
                        State = 1906; Match(LR_BRACKET);
                        State = 1907; partitionDefinerAtom();
                        State = 1912;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        while (_la == COMMA)
                        {
                            {
                                {
                                    State = 1908; Match(COMMA);
                                    State = 1909; partitionDefinerAtom();
                                }
                            }
                            State = 1914;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                        }
                        State = 1915; Match(RR_BRACKET);
                        State = 1919;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        while (_la == INDEX || ((((_la - 294)) & ~0x3f) == 0 && ((1L << (_la - 294)) & ((1L << (COMMENT - 294)) | (1L << (DATA - 294)) | (1L << (ENGINE - 294)))) != 0) || ((((_la - 417)) & ~0x3f) == 0 && ((1L << (_la - 417)) & ((1L << (MAX_ROWS - 417)) | (1L << (MIN_ROWS - 417)) | (1L << (NODEGROUP - 417)))) != 0) || _la == STORAGE || _la == TABLESPACE)
                        {
                            {
                                {
                                    State = 1916; partitionOption();
                                }
                            }
                            State = 1921;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                        }
                        State = 1930;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == SUBPARTITION)
                        {
                            {
                                State = 1922; subpartitionDefinition();
                                State = 1927;
                                ErrorHandler.Sync(this);
                                _alt = Interpreter.AdaptivePredict(TokenStream, 222, Context);
                                while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                                {
                                    if (_alt == 1)
                                    {
                                        {
                                            {
                                                State = 1923; Match(COMMA);
                                                State = 1924; subpartitionDefinition();
                                            }
                                        }
                                    }
                                    State = 1929;
                                    ErrorHandler.Sync(this);
                                    _alt = Interpreter.AdaptivePredict(TokenStream, 222, Context);
                                }
                            }
                        }

                    }
                    break;
                case 4:
                    _localctx = new PartitionListVectorContext(_localctx);
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 1932; Match(PARTITION);
                        State = 1933; uid();
                        State = 1934; Match(VALUES);
                        State = 1935; Match(IN);
                        State = 1936; Match(LR_BRACKET);
                        State = 1937; partitionDefinerVector();
                        State = 1942;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        while (_la == COMMA)
                        {
                            {
                                {
                                    State = 1938; Match(COMMA);
                                    State = 1939; partitionDefinerVector();
                                }
                            }
                            State = 1944;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                        }
                        State = 1945; Match(RR_BRACKET);
                        State = 1949;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        while (_la == INDEX || ((((_la - 294)) & ~0x3f) == 0 && ((1L << (_la - 294)) & ((1L << (COMMENT - 294)) | (1L << (DATA - 294)) | (1L << (ENGINE - 294)))) != 0) || ((((_la - 417)) & ~0x3f) == 0 && ((1L << (_la - 417)) & ((1L << (MAX_ROWS - 417)) | (1L << (MIN_ROWS - 417)) | (1L << (NODEGROUP - 417)))) != 0) || _la == STORAGE || _la == TABLESPACE)
                        {
                            {
                                {
                                    State = 1946; partitionOption();
                                }
                            }
                            State = 1951;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                        }
                        State = 1960;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == SUBPARTITION)
                        {
                            {
                                State = 1952; subpartitionDefinition();
                                State = 1957;
                                ErrorHandler.Sync(this);
                                _alt = Interpreter.AdaptivePredict(TokenStream, 226, Context);
                                while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                                {
                                    if (_alt == 1)
                                    {
                                        {
                                            {
                                                State = 1953; Match(COMMA);
                                                State = 1954; subpartitionDefinition();
                                            }
                                        }
                                    }
                                    State = 1959;
                                    ErrorHandler.Sync(this);
                                    _alt = Interpreter.AdaptivePredict(TokenStream, 226, Context);
                                }
                            }
                        }

                    }
                    break;
                case 5:
                    _localctx = new PartitionSimpleContext(_localctx);
                    EnterOuterAlt(_localctx, 5);
                    {
                        State = 1962; Match(PARTITION);
                        State = 1963; uid();
                        State = 1967;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        while (_la == INDEX || ((((_la - 294)) & ~0x3f) == 0 && ((1L << (_la - 294)) & ((1L << (COMMENT - 294)) | (1L << (DATA - 294)) | (1L << (ENGINE - 294)))) != 0) || ((((_la - 417)) & ~0x3f) == 0 && ((1L << (_la - 417)) & ((1L << (MAX_ROWS - 417)) | (1L << (MIN_ROWS - 417)) | (1L << (NODEGROUP - 417)))) != 0) || _la == STORAGE || _la == TABLESPACE)
                        {
                            {
                                {
                                    State = 1964; partitionOption();
                                }
                            }
                            State = 1969;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                        }
                        State = 1978;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == SUBPARTITION)
                        {
                            {
                                State = 1970; subpartitionDefinition();
                                State = 1975;
                                ErrorHandler.Sync(this);
                                _alt = Interpreter.AdaptivePredict(TokenStream, 229, Context);
                                while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                                {
                                    if (_alt == 1)
                                    {
                                        {
                                            {
                                                State = 1971; Match(COMMA);
                                                State = 1972; subpartitionDefinition();
                                            }
                                        }
                                    }
                                    State = 1977;
                                    ErrorHandler.Sync(this);
                                    _alt = Interpreter.AdaptivePredict(TokenStream, 229, Context);
                                }
                            }
                        }

                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class PartitionDefinerAtomContext : ParserRuleContext
    {
        public ConstantContext constant()
        {
            return GetRuleContext<ConstantContext>(0);
        }
        public ExpressionContext expression()
        {
            return GetRuleContext<ExpressionContext>(0);
        }
        public ITerminalNode MAXVALUE() { return GetToken(MySqlParser.MAXVALUE, 0); }
        public PartitionDefinerAtomContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_partitionDefinerAtom; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterPartitionDefinerAtom(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitPartitionDefinerAtom(this);
        }
    }

    [RuleVersion(0)]
    public PartitionDefinerAtomContext partitionDefinerAtom()
    {
        PartitionDefinerAtomContext _localctx = new PartitionDefinerAtomContext(Context, State);
        EnterRule(_localctx, 104, RULE_partitionDefinerAtom);
        try
        {
            State = 1985;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 232, Context))
            {
                case 1:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 1982; constant();
                    }
                    break;
                case 2:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 1983; expression(0);
                    }
                    break;
                case 3:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 1984; Match(MAXVALUE);
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class PartitionDefinerVectorContext : ParserRuleContext
    {
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public PartitionDefinerAtomContext[] partitionDefinerAtom()
        {
            return GetRuleContexts<PartitionDefinerAtomContext>();
        }
        public PartitionDefinerAtomContext partitionDefinerAtom(int i)
        {
            return GetRuleContext<PartitionDefinerAtomContext>(i);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public PartitionDefinerVectorContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_partitionDefinerVector; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterPartitionDefinerVector(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitPartitionDefinerVector(this);
        }
    }

    [RuleVersion(0)]
    public PartitionDefinerVectorContext partitionDefinerVector()
    {
        PartitionDefinerVectorContext _localctx = new PartitionDefinerVectorContext(Context, State);
        EnterRule(_localctx, 106, RULE_partitionDefinerVector);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 1987; Match(LR_BRACKET);
                State = 1988; partitionDefinerAtom();
                State = 1991;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                do
                {
                    {
                        {
                            State = 1989; Match(COMMA);
                            State = 1990; partitionDefinerAtom();
                        }
                    }
                    State = 1993;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                } while (_la == COMMA);
                State = 1995; Match(RR_BRACKET);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class SubpartitionDefinitionContext : ParserRuleContext
    {
        public ITerminalNode SUBPARTITION() { return GetToken(MySqlParser.SUBPARTITION, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public PartitionOptionContext[] partitionOption()
        {
            return GetRuleContexts<PartitionOptionContext>();
        }
        public PartitionOptionContext partitionOption(int i)
        {
            return GetRuleContext<PartitionOptionContext>(i);
        }
        public SubpartitionDefinitionContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_subpartitionDefinition; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterSubpartitionDefinition(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitSubpartitionDefinition(this);
        }
    }

    [RuleVersion(0)]
    public SubpartitionDefinitionContext subpartitionDefinition()
    {
        SubpartitionDefinitionContext _localctx = new SubpartitionDefinitionContext(Context, State);
        EnterRule(_localctx, 108, RULE_subpartitionDefinition);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 1997; Match(SUBPARTITION);
                State = 1998; uid();
                State = 2002;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while (_la == INDEX || ((((_la - 294)) & ~0x3f) == 0 && ((1L << (_la - 294)) & ((1L << (COMMENT - 294)) | (1L << (DATA - 294)) | (1L << (ENGINE - 294)))) != 0) || ((((_la - 417)) & ~0x3f) == 0 && ((1L << (_la - 417)) & ((1L << (MAX_ROWS - 417)) | (1L << (MIN_ROWS - 417)) | (1L << (NODEGROUP - 417)))) != 0) || _la == STORAGE || _la == TABLESPACE)
                {
                    {
                        {
                            State = 1999; partitionOption();
                        }
                    }
                    State = 2004;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class PartitionOptionContext : ParserRuleContext
    {
        public PartitionOptionContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_partitionOption; } }

        public PartitionOptionContext() { }
        public virtual void CopyFrom(PartitionOptionContext context)
        {
            base.CopyFrom(context);
        }
    }
    public partial class PartitionOptionCommentContext : PartitionOptionContext
    {
        public IToken comment;
        public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public PartitionOptionCommentContext(PartitionOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterPartitionOptionComment(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitPartitionOptionComment(this);
        }
    }
    public partial class PartitionOptionNodeGroupContext : PartitionOptionContext
    {
        public UidContext nodegroup;
        public ITerminalNode NODEGROUP() { return GetToken(MySqlParser.NODEGROUP, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public PartitionOptionNodeGroupContext(PartitionOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterPartitionOptionNodeGroup(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitPartitionOptionNodeGroup(this);
        }
    }
    public partial class PartitionOptionIndexDirectoryContext : PartitionOptionContext
    {
        public IToken indexDirectory;
        public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
        public ITerminalNode DIRECTORY() { return GetToken(MySqlParser.DIRECTORY, 0); }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public PartitionOptionIndexDirectoryContext(PartitionOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterPartitionOptionIndexDirectory(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitPartitionOptionIndexDirectory(this);
        }
    }
    public partial class PartitionOptionMaxRowsContext : PartitionOptionContext
    {
        public DecimalLiteralContext maxRows;
        public ITerminalNode MAX_ROWS() { return GetToken(MySqlParser.MAX_ROWS, 0); }
        public DecimalLiteralContext decimalLiteral()
        {
            return GetRuleContext<DecimalLiteralContext>(0);
        }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public PartitionOptionMaxRowsContext(PartitionOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterPartitionOptionMaxRows(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitPartitionOptionMaxRows(this);
        }
    }
    public partial class PartitionOptionTablespaceContext : PartitionOptionContext
    {
        public UidContext tablespace;
        public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public PartitionOptionTablespaceContext(PartitionOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterPartitionOptionTablespace(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitPartitionOptionTablespace(this);
        }
    }
    public partial class PartitionOptionEngineContext : PartitionOptionContext
    {
        public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
        public EngineNameContext engineName()
        {
            return GetRuleContext<EngineNameContext>(0);
        }
        public ITerminalNode STORAGE() { return GetToken(MySqlParser.STORAGE, 0); }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public PartitionOptionEngineContext(PartitionOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterPartitionOptionEngine(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitPartitionOptionEngine(this);
        }
    }
    public partial class PartitionOptionMinRowsContext : PartitionOptionContext
    {
        public DecimalLiteralContext minRows;
        public ITerminalNode MIN_ROWS() { return GetToken(MySqlParser.MIN_ROWS, 0); }
        public DecimalLiteralContext decimalLiteral()
        {
            return GetRuleContext<DecimalLiteralContext>(0);
        }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public PartitionOptionMinRowsContext(PartitionOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterPartitionOptionMinRows(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitPartitionOptionMinRows(this);
        }
    }
    public partial class PartitionOptionDataDirectoryContext : PartitionOptionContext
    {
        public IToken dataDirectory;
        public ITerminalNode DATA() { return GetToken(MySqlParser.DATA, 0); }
        public ITerminalNode DIRECTORY() { return GetToken(MySqlParser.DIRECTORY, 0); }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public PartitionOptionDataDirectoryContext(PartitionOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterPartitionOptionDataDirectory(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitPartitionOptionDataDirectory(this);
        }
    }

    [RuleVersion(0)]
    public PartitionOptionContext partitionOption()
    {
        PartitionOptionContext _localctx = new PartitionOptionContext(Context, State);
        EnterRule(_localctx, 110, RULE_partitionOption);
        int _la;
        try
        {
            State = 2050;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case ENGINE:
                case STORAGE:
                    _localctx = new PartitionOptionEngineContext(_localctx);
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 2006;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == STORAGE)
                        {
                            {
                                State = 2005; Match(STORAGE);
                            }
                        }

                        State = 2008; Match(ENGINE);
                        State = 2010;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == EQUAL_SYMBOL)
                        {
                            {
                                State = 2009; Match(EQUAL_SYMBOL);
                            }
                        }

                        State = 2012; engineName();
                    }
                    break;
                case COMMENT:
                    _localctx = new PartitionOptionCommentContext(_localctx);
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 2013; Match(COMMENT);
                        State = 2015;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == EQUAL_SYMBOL)
                        {
                            {
                                State = 2014; Match(EQUAL_SYMBOL);
                            }
                        }

                        State = 2017; ((PartitionOptionCommentContext)_localctx).comment = Match(STRING_LITERAL);
                    }
                    break;
                case DATA:
                    _localctx = new PartitionOptionDataDirectoryContext(_localctx);
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 2018; Match(DATA);
                        State = 2019; Match(DIRECTORY);
                        State = 2021;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == EQUAL_SYMBOL)
                        {
                            {
                                State = 2020; Match(EQUAL_SYMBOL);
                            }
                        }

                        State = 2023; ((PartitionOptionDataDirectoryContext)_localctx).dataDirectory = Match(STRING_LITERAL);
                    }
                    break;
                case INDEX:
                    _localctx = new PartitionOptionIndexDirectoryContext(_localctx);
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 2024; Match(INDEX);
                        State = 2025; Match(DIRECTORY);
                        State = 2027;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == EQUAL_SYMBOL)
                        {
                            {
                                State = 2026; Match(EQUAL_SYMBOL);
                            }
                        }

                        State = 2029; ((PartitionOptionIndexDirectoryContext)_localctx).indexDirectory = Match(STRING_LITERAL);
                    }
                    break;
                case MAX_ROWS:
                    _localctx = new PartitionOptionMaxRowsContext(_localctx);
                    EnterOuterAlt(_localctx, 5);
                    {
                        State = 2030; Match(MAX_ROWS);
                        State = 2032;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == EQUAL_SYMBOL)
                        {
                            {
                                State = 2031; Match(EQUAL_SYMBOL);
                            }
                        }

                        State = 2034; ((PartitionOptionMaxRowsContext)_localctx).maxRows = decimalLiteral();
                    }
                    break;
                case MIN_ROWS:
                    _localctx = new PartitionOptionMinRowsContext(_localctx);
                    EnterOuterAlt(_localctx, 6);
                    {
                        State = 2035; Match(MIN_ROWS);
                        State = 2037;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == EQUAL_SYMBOL)
                        {
                            {
                                State = 2036; Match(EQUAL_SYMBOL);
                            }
                        }

                        State = 2039; ((PartitionOptionMinRowsContext)_localctx).minRows = decimalLiteral();
                    }
                    break;
                case TABLESPACE:
                    _localctx = new PartitionOptionTablespaceContext(_localctx);
                    EnterOuterAlt(_localctx, 7);
                    {
                        State = 2040; Match(TABLESPACE);
                        State = 2042;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == EQUAL_SYMBOL)
                        {
                            {
                                State = 2041; Match(EQUAL_SYMBOL);
                            }
                        }

                        State = 2044; ((PartitionOptionTablespaceContext)_localctx).tablespace = uid();
                    }
                    break;
                case NODEGROUP:
                    _localctx = new PartitionOptionNodeGroupContext(_localctx);
                    EnterOuterAlt(_localctx, 8);
                    {
                        State = 2045; Match(NODEGROUP);
                        State = 2047;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == EQUAL_SYMBOL)
                        {
                            {
                                State = 2046; Match(EQUAL_SYMBOL);
                            }
                        }

                        State = 2049; ((PartitionOptionNodeGroupContext)_localctx).nodegroup = uid();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class AlterDatabaseContext : ParserRuleContext
    {
        public AlterDatabaseContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_alterDatabase; } }

        public AlterDatabaseContext() { }
        public virtual void CopyFrom(AlterDatabaseContext context)
        {
            base.CopyFrom(context);
        }
    }
    public partial class AlterUpgradeNameContext : AlterDatabaseContext
    {
        public IToken dbFormat;
        public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public ITerminalNode UPGRADE() { return GetToken(MySqlParser.UPGRADE, 0); }
        public ITerminalNode DATA() { return GetToken(MySqlParser.DATA, 0); }
        public ITerminalNode DIRECTORY() { return GetToken(MySqlParser.DIRECTORY, 0); }
        public ITerminalNode NAME() { return GetToken(MySqlParser.NAME, 0); }
        public ITerminalNode DATABASE() { return GetToken(MySqlParser.DATABASE, 0); }
        public ITerminalNode SCHEMA() { return GetToken(MySqlParser.SCHEMA, 0); }
        public AlterUpgradeNameContext(AlterDatabaseContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterUpgradeName(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterUpgradeName(this);
        }
    }
    public partial class AlterSimpleDatabaseContext : AlterDatabaseContext
    {
        public IToken dbFormat;
        public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
        public ITerminalNode DATABASE() { return GetToken(MySqlParser.DATABASE, 0); }
        public ITerminalNode SCHEMA() { return GetToken(MySqlParser.SCHEMA, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public CreateDatabaseOptionContext[] createDatabaseOption()
        {
            return GetRuleContexts<CreateDatabaseOptionContext>();
        }
        public CreateDatabaseOptionContext createDatabaseOption(int i)
        {
            return GetRuleContext<CreateDatabaseOptionContext>(i);
        }
        public AlterSimpleDatabaseContext(AlterDatabaseContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterSimpleDatabase(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterSimpleDatabase(this);
        }
    }

    [RuleVersion(0)]
    public AlterDatabaseContext alterDatabase()
    {
        AlterDatabaseContext _localctx = new AlterDatabaseContext(Context, State);
        EnterRule(_localctx, 112, RULE_alterDatabase);
        int _la;
        try
        {
            State = 2070;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 247, Context))
            {
                case 1:
                    _localctx = new AlterSimpleDatabaseContext(_localctx);
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 2052; Match(ALTER);
                        State = 2053;
                        ((AlterSimpleDatabaseContext)_localctx).dbFormat = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == DATABASE || _la == SCHEMA))
                        {
                            ((AlterSimpleDatabaseContext)_localctx).dbFormat = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                        State = 2055;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 245, Context))
                        {
                            case 1:
                                {
                                    State = 2054; uid();
                                }
                                break;
                        }
                        State = 2058;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        do
                        {
                            {
                                {
                                    State = 2057; createDatabaseOption();
                                }
                            }
                            State = 2060;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                        } while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CHARACTER) | (1L << COLLATE) | (1L << DEFAULT))) != 0) || _la == CHARSET);
                    }
                    break;
                case 2:
                    _localctx = new AlterUpgradeNameContext(_localctx);
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 2062; Match(ALTER);
                        State = 2063;
                        ((AlterUpgradeNameContext)_localctx).dbFormat = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == DATABASE || _la == SCHEMA))
                        {
                            ((AlterUpgradeNameContext)_localctx).dbFormat = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                        State = 2064; uid();
                        State = 2065; Match(UPGRADE);
                        State = 2066; Match(DATA);
                        State = 2067; Match(DIRECTORY);
                        State = 2068; Match(NAME);
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class AlterEventContext : ParserRuleContext
    {
        public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
        public ITerminalNode EVENT() { return GetToken(MySqlParser.EVENT, 0); }
        public FullIdContext[] fullId()
        {
            return GetRuleContexts<FullIdContext>();
        }
        public FullIdContext fullId(int i)
        {
            return GetRuleContext<FullIdContext>(i);
        }
        public OwnerStatementContext ownerStatement()
        {
            return GetRuleContext<OwnerStatementContext>(0);
        }
        public ITerminalNode[] ON() { return GetTokens(MySqlParser.ON); }
        public ITerminalNode ON(int i)
        {
            return GetToken(MySqlParser.ON, i);
        }
        public ITerminalNode SCHEDULE() { return GetToken(MySqlParser.SCHEDULE, 0); }
        public ScheduleExpressionContext scheduleExpression()
        {
            return GetRuleContext<ScheduleExpressionContext>(0);
        }
        public ITerminalNode COMPLETION() { return GetToken(MySqlParser.COMPLETION, 0); }
        public ITerminalNode PRESERVE() { return GetToken(MySqlParser.PRESERVE, 0); }
        public ITerminalNode RENAME() { return GetToken(MySqlParser.RENAME, 0); }
        public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
        public EnableTypeContext enableType()
        {
            return GetRuleContext<EnableTypeContext>(0);
        }
        public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public ITerminalNode DO() { return GetToken(MySqlParser.DO, 0); }
        public RoutineBodyContext routineBody()
        {
            return GetRuleContext<RoutineBodyContext>(0);
        }
        public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
        public AlterEventContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_alterEvent; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterEvent(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterEvent(this);
        }
    }

    [RuleVersion(0)]
    public AlterEventContext alterEvent()
    {
        AlterEventContext _localctx = new AlterEventContext(Context, State);
        EnterRule(_localctx, 114, RULE_alterEvent);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 2072; Match(ALTER);
                State = 2074;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == DEFINER)
                {
                    {
                        State = 2073; ownerStatement();
                    }
                }

                State = 2076; Match(EVENT);
                State = 2077; fullId();
                State = 2081;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 249, Context))
                {
                    case 1:
                        {
                            State = 2078; Match(ON);
                            State = 2079; Match(SCHEDULE);
                            State = 2080; scheduleExpression();
                        }
                        break;
                }
                State = 2089;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == ON)
                {
                    {
                        State = 2083; Match(ON);
                        State = 2084; Match(COMPLETION);
                        State = 2086;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == NOT)
                        {
                            {
                                State = 2085; Match(NOT);
                            }
                        }

                        State = 2088; Match(PRESERVE);
                    }
                }

                State = 2094;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 252, Context))
                {
                    case 1:
                        {
                            State = 2091; Match(RENAME);
                            State = 2092; Match(TO);
                            State = 2093; fullId();
                        }
                        break;
                }
                State = 2097;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == DISABLE || _la == ENABLE)
                {
                    {
                        State = 2096; enableType();
                    }
                }

                State = 2101;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == COMMENT)
                {
                    {
                        State = 2099; Match(COMMENT);
                        State = 2100; Match(STRING_LITERAL);
                    }
                }

                State = 2105;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 255, Context))
                {
                    case 1:
                        {
                            State = 2103; Match(DO);
                            State = 2104; routineBody();
                        }
                        break;
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class AlterFunctionContext : ParserRuleContext
    {
        public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
        public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
        public FullIdContext fullId()
        {
            return GetRuleContext<FullIdContext>(0);
        }
        public RoutineOptionContext[] routineOption()
        {
            return GetRuleContexts<RoutineOptionContext>();
        }
        public RoutineOptionContext routineOption(int i)
        {
            return GetRuleContext<RoutineOptionContext>(i);
        }
        public AlterFunctionContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_alterFunction; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterFunction(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterFunction(this);
        }
    }

    [RuleVersion(0)]
    public AlterFunctionContext alterFunction()
    {
        AlterFunctionContext _localctx = new AlterFunctionContext(Context, State);
        EnterRule(_localctx, 116, RULE_alterFunction);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 2107; Match(ALTER);
                State = 2108; Match(FUNCTION);
                State = 2109; fullId();
                State = 2113;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while (_la == DETERMINISTIC || ((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (MODIFIES - 100)) | (1L << (NOT - 100)) | (1L << (READS - 100)) | (1L << (SQL - 100)))) != 0) || _la == COMMENT || _la == CONTAINS || _la == LANGUAGE || _la == NO)
                {
                    {
                        {
                            State = 2110; routineOption();
                        }
                    }
                    State = 2115;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class AlterInstanceContext : ParserRuleContext
    {
        public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
        public ITerminalNode INSTANCE() { return GetToken(MySqlParser.INSTANCE, 0); }
        public ITerminalNode ROTATE() { return GetToken(MySqlParser.ROTATE, 0); }
        public ITerminalNode INNODB() { return GetToken(MySqlParser.INNODB, 0); }
        public ITerminalNode MASTER() { return GetToken(MySqlParser.MASTER, 0); }
        public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
        public AlterInstanceContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_alterInstance; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterInstance(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterInstance(this);
        }
    }

    [RuleVersion(0)]
    public AlterInstanceContext alterInstance()
    {
        AlterInstanceContext _localctx = new AlterInstanceContext(Context, State);
        EnterRule(_localctx, 118, RULE_alterInstance);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 2116; Match(ALTER);
                State = 2117; Match(INSTANCE);
                State = 2118; Match(ROTATE);
                State = 2119; Match(INNODB);
                State = 2120; Match(MASTER);
                State = 2121; Match(KEY);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class AlterLogfileGroupContext : ParserRuleContext
    {
        public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
        public ITerminalNode LOGFILE() { return GetToken(MySqlParser.LOGFILE, 0); }
        public ITerminalNode GROUP() { return GetToken(MySqlParser.GROUP, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
        public ITerminalNode UNDOFILE() { return GetToken(MySqlParser.UNDOFILE, 0); }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
        public EngineNameContext engineName()
        {
            return GetRuleContext<EngineNameContext>(0);
        }
        public ITerminalNode INITIAL_SIZE() { return GetToken(MySqlParser.INITIAL_SIZE, 0); }
        public FileSizeLiteralContext fileSizeLiteral()
        {
            return GetRuleContext<FileSizeLiteralContext>(0);
        }
        public ITerminalNode WAIT() { return GetToken(MySqlParser.WAIT, 0); }
        public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
        public ITerminalNode EQUAL_SYMBOL(int i)
        {
            return GetToken(MySqlParser.EQUAL_SYMBOL, i);
        }
        public AlterLogfileGroupContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_alterLogfileGroup; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterLogfileGroup(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterLogfileGroup(this);
        }
    }

    [RuleVersion(0)]
    public AlterLogfileGroupContext alterLogfileGroup()
    {
        AlterLogfileGroupContext _localctx = new AlterLogfileGroupContext(Context, State);
        EnterRule(_localctx, 120, RULE_alterLogfileGroup);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 2123; Match(ALTER);
                State = 2124; Match(LOGFILE);
                State = 2125; Match(GROUP);
                State = 2126; uid();
                State = 2127; Match(ADD);
                State = 2128; Match(UNDOFILE);
                State = 2129; Match(STRING_LITERAL);
                State = 2135;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == INITIAL_SIZE)
                {
                    {
                        State = 2130; Match(INITIAL_SIZE);
                        State = 2132;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == EQUAL_SYMBOL)
                        {
                            {
                                State = 2131; Match(EQUAL_SYMBOL);
                            }
                        }

                        State = 2134; fileSizeLiteral();
                    }
                }

                State = 2138;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == WAIT)
                {
                    {
                        State = 2137; Match(WAIT);
                    }
                }

                State = 2140; Match(ENGINE);
                State = 2142;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == EQUAL_SYMBOL)
                {
                    {
                        State = 2141; Match(EQUAL_SYMBOL);
                    }
                }

                State = 2144; engineName();
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class AlterProcedureContext : ParserRuleContext
    {
        public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
        public ITerminalNode PROCEDURE() { return GetToken(MySqlParser.PROCEDURE, 0); }
        public FullIdContext fullId()
        {
            return GetRuleContext<FullIdContext>(0);
        }
        public RoutineOptionContext[] routineOption()
        {
            return GetRuleContexts<RoutineOptionContext>();
        }
        public RoutineOptionContext routineOption(int i)
        {
            return GetRuleContext<RoutineOptionContext>(i);
        }
        public AlterProcedureContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_alterProcedure; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterProcedure(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterProcedure(this);
        }
    }

    [RuleVersion(0)]
    public AlterProcedureContext alterProcedure()
    {
        AlterProcedureContext _localctx = new AlterProcedureContext(Context, State);
        EnterRule(_localctx, 122, RULE_alterProcedure);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 2146; Match(ALTER);
                State = 2147; Match(PROCEDURE);
                State = 2148; fullId();
                State = 2152;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while (_la == DETERMINISTIC || ((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (MODIFIES - 100)) | (1L << (NOT - 100)) | (1L << (READS - 100)) | (1L << (SQL - 100)))) != 0) || _la == COMMENT || _la == CONTAINS || _la == LANGUAGE || _la == NO)
                {
                    {
                        {
                            State = 2149; routineOption();
                        }
                    }
                    State = 2154;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class AlterServerContext : ParserRuleContext
    {
        public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
        public ITerminalNode SERVER() { return GetToken(MySqlParser.SERVER, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public ITerminalNode OPTIONS() { return GetToken(MySqlParser.OPTIONS, 0); }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public ServerOptionContext[] serverOption()
        {
            return GetRuleContexts<ServerOptionContext>();
        }
        public ServerOptionContext serverOption(int i)
        {
            return GetRuleContext<ServerOptionContext>(i);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public AlterServerContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_alterServer; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterServer(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterServer(this);
        }
    }

    [RuleVersion(0)]
    public AlterServerContext alterServer()
    {
        AlterServerContext _localctx = new AlterServerContext(Context, State);
        EnterRule(_localctx, 124, RULE_alterServer);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 2155; Match(ALTER);
                State = 2156; Match(SERVER);
                State = 2157; uid();
                State = 2158; Match(OPTIONS);
                State = 2159; Match(LR_BRACKET);
                State = 2160; serverOption();
                State = 2165;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while (_la == COMMA)
                {
                    {
                        {
                            State = 2161; Match(COMMA);
                            State = 2162; serverOption();
                        }
                    }
                    State = 2167;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
                State = 2168; Match(RR_BRACKET);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class AlterTableContext : ParserRuleContext
    {
        public IToken intimeAction;
        public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
        public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
        public TableNameContext tableName()
        {
            return GetRuleContext<TableNameContext>(0);
        }
        public ITerminalNode IGNORE() { return GetToken(MySqlParser.IGNORE, 0); }
        public AlterSpecificationContext[] alterSpecification()
        {
            return GetRuleContexts<AlterSpecificationContext>();
        }
        public AlterSpecificationContext alterSpecification(int i)
        {
            return GetRuleContext<AlterSpecificationContext>(i);
        }
        public PartitionDefinitionsContext partitionDefinitions()
        {
            return GetRuleContext<PartitionDefinitionsContext>(0);
        }
        public ITerminalNode ONLINE() { return GetToken(MySqlParser.ONLINE, 0); }
        public ITerminalNode OFFLINE() { return GetToken(MySqlParser.OFFLINE, 0); }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public AlterTableContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_alterTable; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterTable(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterTable(this);
        }
    }

    [RuleVersion(0)]
    public AlterTableContext alterTable()
    {
        AlterTableContext _localctx = new AlterTableContext(Context, State);
        EnterRule(_localctx, 126, RULE_alterTable);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 2170; Match(ALTER);
                State = 2172;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == OFFLINE || _la == ONLINE)
                {
                    {
                        State = 2171;
                        _localctx.intimeAction = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == OFFLINE || _la == ONLINE))
                        {
                            _localctx.intimeAction = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                }

                State = 2175;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == IGNORE)
                {
                    {
                        State = 2174; Match(IGNORE);
                    }
                }

                State = 2177; Match(TABLE);
                State = 2178; tableName();
                State = 2187;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 266, Context))
                {
                    case 1:
                        {
                            State = 2179; alterSpecification();
                            State = 2184;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            while (_la == COMMA)
                            {
                                {
                                    {
                                        State = 2180; Match(COMMA);
                                        State = 2181; alterSpecification();
                                    }
                                }
                                State = 2186;
                                ErrorHandler.Sync(this);
                                _la = TokenStream.LA(1);
                            }
                        }
                        break;
                }
                State = 2190;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == PARTITION)
                {
                    {
                        State = 2189; partitionDefinitions();
                    }
                }

            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class AlterTablespaceContext : ParserRuleContext
    {
        public IToken objectAction;
        public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
        public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public ITerminalNode DATAFILE() { return GetToken(MySqlParser.DATAFILE, 0); }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
        public EngineNameContext engineName()
        {
            return GetRuleContext<EngineNameContext>(0);
        }
        public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
        public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
        public ITerminalNode INITIAL_SIZE() { return GetToken(MySqlParser.INITIAL_SIZE, 0); }
        public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
        public ITerminalNode EQUAL_SYMBOL(int i)
        {
            return GetToken(MySqlParser.EQUAL_SYMBOL, i);
        }
        public FileSizeLiteralContext fileSizeLiteral()
        {
            return GetRuleContext<FileSizeLiteralContext>(0);
        }
        public ITerminalNode WAIT() { return GetToken(MySqlParser.WAIT, 0); }
        public AlterTablespaceContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_alterTablespace; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterTablespace(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterTablespace(this);
        }
    }

    [RuleVersion(0)]
    public AlterTablespaceContext alterTablespace()
    {
        AlterTablespaceContext _localctx = new AlterTablespaceContext(Context, State);
        EnterRule(_localctx, 128, RULE_alterTablespace);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 2192; Match(ALTER);
                State = 2193; Match(TABLESPACE);
                State = 2194; uid();
                State = 2195;
                _localctx.objectAction = TokenStream.LT(1);
                _la = TokenStream.LA(1);
                if (!(_la == ADD || _la == DROP))
                {
                    _localctx.objectAction = ErrorHandler.RecoverInline(this);
                }
                else
                {
                    ErrorHandler.ReportMatch(this);
                    Consume();
                }
                State = 2196; Match(DATAFILE);
                State = 2197; Match(STRING_LITERAL);
                State = 2201;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == INITIAL_SIZE)
                {
                    {
                        State = 2198; Match(INITIAL_SIZE);
                        State = 2199; Match(EQUAL_SYMBOL);
                        State = 2200; fileSizeLiteral();
                    }
                }

                State = 2204;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == WAIT)
                {
                    {
                        State = 2203; Match(WAIT);
                    }
                }

                State = 2206; Match(ENGINE);
                State = 2208;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == EQUAL_SYMBOL)
                {
                    {
                        State = 2207; Match(EQUAL_SYMBOL);
                    }
                }

                State = 2210; engineName();
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class AlterViewContext : ParserRuleContext
    {
        public IToken algType;
        public IToken secContext;
        public IToken checkOpt;
        public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
        public ITerminalNode VIEW() { return GetToken(MySqlParser.VIEW, 0); }
        public FullIdContext fullId()
        {
            return GetRuleContext<FullIdContext>(0);
        }
        public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
        public SelectStatementContext selectStatement()
        {
            return GetRuleContext<SelectStatementContext>(0);
        }
        public ITerminalNode ALGORITHM() { return GetToken(MySqlParser.ALGORITHM, 0); }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public OwnerStatementContext ownerStatement()
        {
            return GetRuleContext<OwnerStatementContext>(0);
        }
        public ITerminalNode SQL() { return GetToken(MySqlParser.SQL, 0); }
        public ITerminalNode SECURITY() { return GetToken(MySqlParser.SECURITY, 0); }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public UidListContext uidList()
        {
            return GetRuleContext<UidListContext>(0);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
        public ITerminalNode CHECK() { return GetToken(MySqlParser.CHECK, 0); }
        public ITerminalNode OPTION() { return GetToken(MySqlParser.OPTION, 0); }
        public ITerminalNode UNDEFINED() { return GetToken(MySqlParser.UNDEFINED, 0); }
        public ITerminalNode MERGE() { return GetToken(MySqlParser.MERGE, 0); }
        public ITerminalNode TEMPTABLE() { return GetToken(MySqlParser.TEMPTABLE, 0); }
        public ITerminalNode DEFINER() { return GetToken(MySqlParser.DEFINER, 0); }
        public ITerminalNode INVOKER() { return GetToken(MySqlParser.INVOKER, 0); }
        public ITerminalNode CASCADED() { return GetToken(MySqlParser.CASCADED, 0); }
        public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
        public AlterViewContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_alterView; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterView(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterView(this);
        }
    }

    [RuleVersion(0)]
    public AlterViewContext alterView()
    {
        AlterViewContext _localctx = new AlterViewContext(Context, State);
        EnterRule(_localctx, 130, RULE_alterView);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 2212; Match(ALTER);
                State = 2216;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == ALGORITHM)
                {
                    {
                        State = 2213; Match(ALGORITHM);
                        State = 2214; Match(EQUAL_SYMBOL);
                        State = 2215;
                        _localctx.algType = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == MERGE || _la == TEMPTABLE || _la == UNDEFINED))
                        {
                            _localctx.algType = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                }

                State = 2219;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == DEFINER)
                {
                    {
                        State = 2218; ownerStatement();
                    }
                }

                State = 2224;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == SQL)
                {
                    {
                        State = 2221; Match(SQL);
                        State = 2222; Match(SECURITY);
                        State = 2223;
                        _localctx.secContext = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == DEFINER || _la == INVOKER))
                        {
                            _localctx.secContext = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                }

                State = 2226; Match(VIEW);
                State = 2227; fullId();
                State = 2232;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == LR_BRACKET)
                {
                    {
                        State = 2228; Match(LR_BRACKET);
                        State = 2229; uidList();
                        State = 2230; Match(RR_BRACKET);
                    }
                }

                State = 2234; Match(AS);
                State = 2235; selectStatement();
                State = 2242;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == WITH)
                {
                    {
                        State = 2236; Match(WITH);
                        State = 2238;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == CASCADED || _la == LOCAL)
                        {
                            {
                                State = 2237;
                                _localctx.checkOpt = TokenStream.LT(1);
                                _la = TokenStream.LA(1);
                                if (!(_la == CASCADED || _la == LOCAL))
                                {
                                    _localctx.checkOpt = ErrorHandler.RecoverInline(this);
                                }
                                else
                                {
                                    ErrorHandler.ReportMatch(this);
                                    Consume();
                                }
                            }
                        }

                        State = 2240; Match(CHECK);
                        State = 2241; Match(OPTION);
                    }
                }

            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class AlterSpecificationContext : ParserRuleContext
    {
        public AlterSpecificationContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_alterSpecification; } }

        public AlterSpecificationContext() { }
        public virtual void CopyFrom(AlterSpecificationContext context)
        {
            base.CopyFrom(context);
        }
    }
    public partial class AlterByDisableKeysContext : AlterSpecificationContext
    {
        public ITerminalNode DISABLE() { return GetToken(MySqlParser.DISABLE, 0); }
        public ITerminalNode KEYS() { return GetToken(MySqlParser.KEYS, 0); }
        public AlterByDisableKeysContext(AlterSpecificationContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterByDisableKeys(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterByDisableKeys(this);
        }
    }
    public partial class AlterByDefaultCharsetContext : AlterSpecificationContext
    {
        public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
        public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
        public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
        public ITerminalNode EQUAL_SYMBOL(int i)
        {
            return GetToken(MySqlParser.EQUAL_SYMBOL, i);
        }
        public CharsetNameContext charsetName()
        {
            return GetRuleContext<CharsetNameContext>(0);
        }
        public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
        public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
        public CollationNameContext collationName()
        {
            return GetRuleContext<CollationNameContext>(0);
        }
        public AlterByDefaultCharsetContext(AlterSpecificationContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterByDefaultCharset(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterByDefaultCharset(this);
        }
    }
    public partial class AlterByRenameColumnContext : AlterSpecificationContext
    {
        public UidContext oldColumn;
        public UidContext newColumn;
        public ITerminalNode RENAME() { return GetToken(MySqlParser.RENAME, 0); }
        public ITerminalNode COLUMN() { return GetToken(MySqlParser.COLUMN, 0); }
        public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
        public UidContext[] uid()
        {
            return GetRuleContexts<UidContext>();
        }
        public UidContext uid(int i)
        {
            return GetRuleContext<UidContext>(i);
        }
        public AlterByRenameColumnContext(AlterSpecificationContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterByRenameColumn(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterByRenameColumn(this);
        }
    }
    public partial class AlterByConvertCharsetContext : AlterSpecificationContext
    {
        public ITerminalNode CONVERT() { return GetToken(MySqlParser.CONVERT, 0); }
        public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
        public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
        public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
        public CharsetNameContext charsetName()
        {
            return GetRuleContext<CharsetNameContext>(0);
        }
        public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
        public CollationNameContext collationName()
        {
            return GetRuleContext<CollationNameContext>(0);
        }
        public AlterByConvertCharsetContext(AlterSpecificationContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterByConvertCharset(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterByConvertCharset(this);
        }
    }
    public partial class AlterByAddPartitionContext : AlterSpecificationContext
    {
        public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
        public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public PartitionDefinitionContext[] partitionDefinition()
        {
            return GetRuleContexts<PartitionDefinitionContext>();
        }
        public PartitionDefinitionContext partitionDefinition(int i)
        {
            return GetRuleContext<PartitionDefinitionContext>(i);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public AlterByAddPartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterByAddPartition(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterByAddPartition(this);
        }
    }
    public partial class AlterByAddForeignKeyContext : AlterSpecificationContext
    {
        public UidContext name;
        public UidContext indexName;
        public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
        public ITerminalNode FOREIGN() { return GetToken(MySqlParser.FOREIGN, 0); }
        public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
        public IndexColumnNamesContext indexColumnNames()
        {
            return GetRuleContext<IndexColumnNamesContext>(0);
        }
        public ReferenceDefinitionContext referenceDefinition()
        {
            return GetRuleContext<ReferenceDefinitionContext>(0);
        }
        public ITerminalNode CONSTRAINT() { return GetToken(MySqlParser.CONSTRAINT, 0); }
        public UidContext[] uid()
        {
            return GetRuleContexts<UidContext>();
        }
        public UidContext uid(int i)
        {
            return GetRuleContext<UidContext>(i);
        }
        public AlterByAddForeignKeyContext(AlterSpecificationContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterByAddForeignKey(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterByAddForeignKey(this);
        }
    }
    public partial class AlterByRenameIndexContext : AlterSpecificationContext
    {
        public IToken indexFormat;
        public ITerminalNode RENAME() { return GetToken(MySqlParser.RENAME, 0); }
        public UidContext[] uid()
        {
            return GetRuleContexts<UidContext>();
        }
        public UidContext uid(int i)
        {
            return GetRuleContext<UidContext>(i);
        }
        public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
        public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
        public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
        public AlterByRenameIndexContext(AlterSpecificationContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterByRenameIndex(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterByRenameIndex(this);
        }
    }
    public partial class AlterByRemovePartitioningContext : AlterSpecificationContext
    {
        public ITerminalNode REMOVE() { return GetToken(MySqlParser.REMOVE, 0); }
        public ITerminalNode PARTITIONING() { return GetToken(MySqlParser.PARTITIONING, 0); }
        public AlterByRemovePartitioningContext(AlterSpecificationContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterByRemovePartitioning(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterByRemovePartitioning(this);
        }
    }
    public partial class AlterByRenameContext : AlterSpecificationContext
    {
        public IToken renameFormat;
        public ITerminalNode RENAME() { return GetToken(MySqlParser.RENAME, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public FullIdContext fullId()
        {
            return GetRuleContext<FullIdContext>(0);
        }
        public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
        public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
        public AlterByRenameContext(AlterSpecificationContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterByRename(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterByRename(this);
        }
    }
    public partial class AlterByOptimizePartitionContext : AlterSpecificationContext
    {
        public ITerminalNode OPTIMIZE() { return GetToken(MySqlParser.OPTIMIZE, 0); }
        public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
        public UidListContext uidList()
        {
            return GetRuleContext<UidListContext>(0);
        }
        public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
        public AlterByOptimizePartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterByOptimizePartition(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterByOptimizePartition(this);
        }
    }
    public partial class AlterByImportTablespaceContext : AlterSpecificationContext
    {
        public ITerminalNode IMPORT() { return GetToken(MySqlParser.IMPORT, 0); }
        public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
        public AlterByImportTablespaceContext(AlterSpecificationContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterByImportTablespace(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterByImportTablespace(this);
        }
    }
    public partial class AlterByCoalescePartitionContext : AlterSpecificationContext
    {
        public ITerminalNode COALESCE() { return GetToken(MySqlParser.COALESCE, 0); }
        public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
        public DecimalLiteralContext decimalLiteral()
        {
            return GetRuleContext<DecimalLiteralContext>(0);
        }
        public AlterByCoalescePartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterByCoalescePartition(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterByCoalescePartition(this);
        }
    }
    public partial class AlterByAddColumnsContext : AlterSpecificationContext
    {
        public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public UidContext[] uid()
        {
            return GetRuleContexts<UidContext>();
        }
        public UidContext uid(int i)
        {
            return GetRuleContext<UidContext>(i);
        }
        public ColumnDefinitionContext[] columnDefinition()
        {
            return GetRuleContexts<ColumnDefinitionContext>();
        }
        public ColumnDefinitionContext columnDefinition(int i)
        {
            return GetRuleContext<ColumnDefinitionContext>(i);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public ITerminalNode COLUMN() { return GetToken(MySqlParser.COLUMN, 0); }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public AlterByAddColumnsContext(AlterSpecificationContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterByAddColumns(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterByAddColumns(this);
        }
    }
    public partial class AlterByDropForeignKeyContext : AlterSpecificationContext
    {
        public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
        public ITerminalNode FOREIGN() { return GetToken(MySqlParser.FOREIGN, 0); }
        public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public AlterByDropForeignKeyContext(AlterSpecificationContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterByDropForeignKey(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterByDropForeignKey(this);
        }
    }
    public partial class AlterByAddCheckTableConstraintContext : AlterSpecificationContext
    {
        public UidContext name;
        public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
        public ITerminalNode CHECK() { return GetToken(MySqlParser.CHECK, 0); }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public ExpressionContext expression()
        {
            return GetRuleContext<ExpressionContext>(0);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public ITerminalNode CONSTRAINT() { return GetToken(MySqlParser.CONSTRAINT, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public AlterByAddCheckTableConstraintContext(AlterSpecificationContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterByAddCheckTableConstraint(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterByAddCheckTableConstraint(this);
        }
    }
    public partial class AlterByRebuildPartitionContext : AlterSpecificationContext
    {
        public ITerminalNode REBUILD() { return GetToken(MySqlParser.REBUILD, 0); }
        public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
        public UidListContext uidList()
        {
            return GetRuleContext<UidListContext>(0);
        }
        public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
        public AlterByRebuildPartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterByRebuildPartition(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterByRebuildPartition(this);
        }
    }
    public partial class AlterByUpgradePartitioningContext : AlterSpecificationContext
    {
        public ITerminalNode UPGRADE() { return GetToken(MySqlParser.UPGRADE, 0); }
        public ITerminalNode PARTITIONING() { return GetToken(MySqlParser.PARTITIONING, 0); }
        public AlterByUpgradePartitioningContext(AlterSpecificationContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterByUpgradePartitioning(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterByUpgradePartitioning(this);
        }
    }
    public partial class AlterByRepairPartitionContext : AlterSpecificationContext
    {
        public ITerminalNode REPAIR() { return GetToken(MySqlParser.REPAIR, 0); }
        public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
        public UidListContext uidList()
        {
            return GetRuleContext<UidListContext>(0);
        }
        public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
        public AlterByRepairPartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterByRepairPartition(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterByRepairPartition(this);
        }
    }
    public partial class AlterByExchangePartitionContext : AlterSpecificationContext
    {
        public IToken validationFormat;
        public ITerminalNode EXCHANGE() { return GetToken(MySqlParser.EXCHANGE, 0); }
        public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public ITerminalNode[] WITH() { return GetTokens(MySqlParser.WITH); }
        public ITerminalNode WITH(int i)
        {
            return GetToken(MySqlParser.WITH, i);
        }
        public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
        public TableNameContext tableName()
        {
            return GetRuleContext<TableNameContext>(0);
        }
        public ITerminalNode VALIDATION() { return GetToken(MySqlParser.VALIDATION, 0); }
        public ITerminalNode WITHOUT() { return GetToken(MySqlParser.WITHOUT, 0); }
        public AlterByExchangePartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterByExchangePartition(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterByExchangePartition(this);
        }
    }
    public partial class AlterByAddIndexContext : AlterSpecificationContext
    {
        public IToken indexFormat;
        public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
        public IndexColumnNamesContext indexColumnNames()
        {
            return GetRuleContext<IndexColumnNamesContext>(0);
        }
        public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
        public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public IndexTypeContext indexType()
        {
            return GetRuleContext<IndexTypeContext>(0);
        }
        public IndexOptionContext[] indexOption()
        {
            return GetRuleContexts<IndexOptionContext>();
        }
        public IndexOptionContext indexOption(int i)
        {
            return GetRuleContext<IndexOptionContext>(i);
        }
        public AlterByAddIndexContext(AlterSpecificationContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterByAddIndex(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterByAddIndex(this);
        }
    }
    public partial class AlterByDropColumnContext : AlterSpecificationContext
    {
        public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public ITerminalNode COLUMN() { return GetToken(MySqlParser.COLUMN, 0); }
        public ITerminalNode RESTRICT() { return GetToken(MySqlParser.RESTRICT, 0); }
        public AlterByDropColumnContext(AlterSpecificationContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterByDropColumn(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterByDropColumn(this);
        }
    }
    public partial class AlterByImportPartitionContext : AlterSpecificationContext
    {
        public ITerminalNode IMPORT() { return GetToken(MySqlParser.IMPORT, 0); }
        public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
        public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
        public UidListContext uidList()
        {
            return GetRuleContext<UidListContext>(0);
        }
        public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
        public AlterByImportPartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterByImportPartition(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterByImportPartition(this);
        }
    }
    public partial class AlterByChangeDefaultContext : AlterSpecificationContext
    {
        public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
        public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
        public DefaultValueContext defaultValue()
        {
            return GetRuleContext<DefaultValueContext>(0);
        }
        public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
        public ITerminalNode COLUMN() { return GetToken(MySqlParser.COLUMN, 0); }
        public AlterByChangeDefaultContext(AlterSpecificationContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterByChangeDefault(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterByChangeDefault(this);
        }
    }
    public partial class AlterByForceContext : AlterSpecificationContext
    {
        public ITerminalNode FORCE() { return GetToken(MySqlParser.FORCE, 0); }
        public AlterByForceContext(AlterSpecificationContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterByForce(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterByForce(this);
        }
    }
    public partial class AlterByDropPartitionContext : AlterSpecificationContext
    {
        public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
        public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
        public UidListContext uidList()
        {
            return GetRuleContext<UidListContext>(0);
        }
        public AlterByDropPartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterByDropPartition(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterByDropPartition(this);
        }
    }
    public partial class AlterByAddSpecialIndexContext : AlterSpecificationContext
    {
        public IToken keyType;
        public IToken indexFormat;
        public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
        public IndexColumnNamesContext indexColumnNames()
        {
            return GetRuleContext<IndexColumnNamesContext>(0);
        }
        public ITerminalNode FULLTEXT() { return GetToken(MySqlParser.FULLTEXT, 0); }
        public ITerminalNode SPATIAL() { return GetToken(MySqlParser.SPATIAL, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public IndexOptionContext[] indexOption()
        {
            return GetRuleContexts<IndexOptionContext>();
        }
        public IndexOptionContext indexOption(int i)
        {
            return GetRuleContext<IndexOptionContext>(i);
        }
        public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
        public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
        public AlterByAddSpecialIndexContext(AlterSpecificationContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterByAddSpecialIndex(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterByAddSpecialIndex(this);
        }
    }
    public partial class AlterByModifyColumnContext : AlterSpecificationContext
    {
        public ITerminalNode MODIFY() { return GetToken(MySqlParser.MODIFY, 0); }
        public UidContext[] uid()
        {
            return GetRuleContexts<UidContext>();
        }
        public UidContext uid(int i)
        {
            return GetRuleContext<UidContext>(i);
        }
        public ColumnDefinitionContext columnDefinition()
        {
            return GetRuleContext<ColumnDefinitionContext>(0);
        }
        public ITerminalNode COLUMN() { return GetToken(MySqlParser.COLUMN, 0); }
        public ITerminalNode FIRST() { return GetToken(MySqlParser.FIRST, 0); }
        public ITerminalNode AFTER() { return GetToken(MySqlParser.AFTER, 0); }
        public AlterByModifyColumnContext(AlterSpecificationContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterByModifyColumn(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterByModifyColumn(this);
        }
    }
    public partial class AlterByTableOptionContext : AlterSpecificationContext
    {
        public TableOptionContext[] tableOption()
        {
            return GetRuleContexts<TableOptionContext>();
        }
        public TableOptionContext tableOption(int i)
        {
            return GetRuleContext<TableOptionContext>(i);
        }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public AlterByTableOptionContext(AlterSpecificationContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterByTableOption(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterByTableOption(this);
        }
    }
    public partial class AlterByDropPrimaryKeyContext : AlterSpecificationContext
    {
        public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
        public ITerminalNode PRIMARY() { return GetToken(MySqlParser.PRIMARY, 0); }
        public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
        public AlterByDropPrimaryKeyContext(AlterSpecificationContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterByDropPrimaryKey(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterByDropPrimaryKey(this);
        }
    }
    public partial class AlterByLockContext : AlterSpecificationContext
    {
        public IToken lockType;
        public ITerminalNode LOCK() { return GetToken(MySqlParser.LOCK, 0); }
        public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
        public ITerminalNode NONE() { return GetToken(MySqlParser.NONE, 0); }
        public ITerminalNode SHARED() { return GetToken(MySqlParser.SHARED, 0); }
        public ITerminalNode EXCLUSIVE() { return GetToken(MySqlParser.EXCLUSIVE, 0); }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public AlterByLockContext(AlterSpecificationContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterByLock(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterByLock(this);
        }
    }
    public partial class AlterByDiscardPartitionContext : AlterSpecificationContext
    {
        public ITerminalNode DISCARD() { return GetToken(MySqlParser.DISCARD, 0); }
        public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
        public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
        public UidListContext uidList()
        {
            return GetRuleContext<UidListContext>(0);
        }
        public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
        public AlterByDiscardPartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterByDiscardPartition(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterByDiscardPartition(this);
        }
    }
    public partial class AlterByDiscardTablespaceContext : AlterSpecificationContext
    {
        public ITerminalNode DISCARD() { return GetToken(MySqlParser.DISCARD, 0); }
        public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
        public AlterByDiscardTablespaceContext(AlterSpecificationContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterByDiscardTablespace(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterByDiscardTablespace(this);
        }
    }
    public partial class AlterByValidateContext : AlterSpecificationContext
    {
        public IToken validationFormat;
        public ITerminalNode VALIDATION() { return GetToken(MySqlParser.VALIDATION, 0); }
        public ITerminalNode WITHOUT() { return GetToken(MySqlParser.WITHOUT, 0); }
        public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
        public AlterByValidateContext(AlterSpecificationContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterByValidate(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterByValidate(this);
        }
    }
    public partial class AlterByAddPrimaryKeyContext : AlterSpecificationContext
    {
        public UidContext name;
        public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
        public ITerminalNode PRIMARY() { return GetToken(MySqlParser.PRIMARY, 0); }
        public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
        public IndexColumnNamesContext indexColumnNames()
        {
            return GetRuleContext<IndexColumnNamesContext>(0);
        }
        public ITerminalNode CONSTRAINT() { return GetToken(MySqlParser.CONSTRAINT, 0); }
        public IndexTypeContext indexType()
        {
            return GetRuleContext<IndexTypeContext>(0);
        }
        public IndexOptionContext[] indexOption()
        {
            return GetRuleContexts<IndexOptionContext>();
        }
        public IndexOptionContext indexOption(int i)
        {
            return GetRuleContext<IndexOptionContext>(i);
        }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public AlterByAddPrimaryKeyContext(AlterSpecificationContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterByAddPrimaryKey(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterByAddPrimaryKey(this);
        }
    }
    public partial class AlterByCheckPartitionContext : AlterSpecificationContext
    {
        public ITerminalNode CHECK() { return GetToken(MySqlParser.CHECK, 0); }
        public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
        public UidListContext uidList()
        {
            return GetRuleContext<UidListContext>(0);
        }
        public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
        public AlterByCheckPartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterByCheckPartition(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterByCheckPartition(this);
        }
    }
    public partial class AlterByEnableKeysContext : AlterSpecificationContext
    {
        public ITerminalNode ENABLE() { return GetToken(MySqlParser.ENABLE, 0); }
        public ITerminalNode KEYS() { return GetToken(MySqlParser.KEYS, 0); }
        public AlterByEnableKeysContext(AlterSpecificationContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterByEnableKeys(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterByEnableKeys(this);
        }
    }
    public partial class AlterByReorganizePartitionContext : AlterSpecificationContext
    {
        public ITerminalNode REORGANIZE() { return GetToken(MySqlParser.REORGANIZE, 0); }
        public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
        public UidListContext uidList()
        {
            return GetRuleContext<UidListContext>(0);
        }
        public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public PartitionDefinitionContext[] partitionDefinition()
        {
            return GetRuleContexts<PartitionDefinitionContext>();
        }
        public PartitionDefinitionContext partitionDefinition(int i)
        {
            return GetRuleContext<PartitionDefinitionContext>(i);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public AlterByReorganizePartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterByReorganizePartition(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterByReorganizePartition(this);
        }
    }
    public partial class AlterBySetAlgorithmContext : AlterSpecificationContext
    {
        public IToken algType;
        public ITerminalNode ALGORITHM() { return GetToken(MySqlParser.ALGORITHM, 0); }
        public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
        public ITerminalNode INPLACE() { return GetToken(MySqlParser.INPLACE, 0); }
        public ITerminalNode COPY() { return GetToken(MySqlParser.COPY, 0); }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public AlterBySetAlgorithmContext(AlterSpecificationContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterBySetAlgorithm(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterBySetAlgorithm(this);
        }
    }
    public partial class AlterByAnalyzePartitionContext : AlterSpecificationContext
    {
        public ITerminalNode ANALYZE() { return GetToken(MySqlParser.ANALYZE, 0); }
        public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
        public UidListContext uidList()
        {
            return GetRuleContext<UidListContext>(0);
        }
        public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
        public AlterByAnalyzePartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterByAnalyzePartition(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterByAnalyzePartition(this);
        }
    }
    public partial class AlterByChangeColumnContext : AlterSpecificationContext
    {
        public UidContext oldColumn;
        public UidContext newColumn;
        public UidContext afterColumn;
        public ITerminalNode CHANGE() { return GetToken(MySqlParser.CHANGE, 0); }
        public ColumnDefinitionContext columnDefinition()
        {
            return GetRuleContext<ColumnDefinitionContext>(0);
        }
        public UidContext[] uid()
        {
            return GetRuleContexts<UidContext>();
        }
        public UidContext uid(int i)
        {
            return GetRuleContext<UidContext>(i);
        }
        public ITerminalNode COLUMN() { return GetToken(MySqlParser.COLUMN, 0); }
        public ITerminalNode FIRST() { return GetToken(MySqlParser.FIRST, 0); }
        public ITerminalNode AFTER() { return GetToken(MySqlParser.AFTER, 0); }
        public AlterByChangeColumnContext(AlterSpecificationContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterByChangeColumn(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterByChangeColumn(this);
        }
    }
    public partial class AlterByAddUniqueKeyContext : AlterSpecificationContext
    {
        public UidContext name;
        public IToken indexFormat;
        public UidContext indexName;
        public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
        public ITerminalNode UNIQUE() { return GetToken(MySqlParser.UNIQUE, 0); }
        public IndexColumnNamesContext indexColumnNames()
        {
            return GetRuleContext<IndexColumnNamesContext>(0);
        }
        public ITerminalNode CONSTRAINT() { return GetToken(MySqlParser.CONSTRAINT, 0); }
        public IndexTypeContext indexType()
        {
            return GetRuleContext<IndexTypeContext>(0);
        }
        public IndexOptionContext[] indexOption()
        {
            return GetRuleContexts<IndexOptionContext>();
        }
        public IndexOptionContext indexOption(int i)
        {
            return GetRuleContext<IndexOptionContext>(i);
        }
        public UidContext[] uid()
        {
            return GetRuleContexts<UidContext>();
        }
        public UidContext uid(int i)
        {
            return GetRuleContext<UidContext>(i);
        }
        public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
        public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
        public AlterByAddUniqueKeyContext(AlterSpecificationContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterByAddUniqueKey(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterByAddUniqueKey(this);
        }
    }
    public partial class AlterByTruncatePartitionContext : AlterSpecificationContext
    {
        public ITerminalNode TRUNCATE() { return GetToken(MySqlParser.TRUNCATE, 0); }
        public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
        public UidListContext uidList()
        {
            return GetRuleContext<UidListContext>(0);
        }
        public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
        public AlterByTruncatePartitionContext(AlterSpecificationContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterByTruncatePartition(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterByTruncatePartition(this);
        }
    }
    public partial class AlterByDropIndexContext : AlterSpecificationContext
    {
        public IToken indexFormat;
        public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
        public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
        public AlterByDropIndexContext(AlterSpecificationContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterByDropIndex(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterByDropIndex(this);
        }
    }
    public partial class AlterByAddColumnContext : AlterSpecificationContext
    {
        public ITerminalNode ADD() { return GetToken(MySqlParser.ADD, 0); }
        public UidContext[] uid()
        {
            return GetRuleContexts<UidContext>();
        }
        public UidContext uid(int i)
        {
            return GetRuleContext<UidContext>(i);
        }
        public ColumnDefinitionContext columnDefinition()
        {
            return GetRuleContext<ColumnDefinitionContext>(0);
        }
        public ITerminalNode COLUMN() { return GetToken(MySqlParser.COLUMN, 0); }
        public ITerminalNode FIRST() { return GetToken(MySqlParser.FIRST, 0); }
        public ITerminalNode AFTER() { return GetToken(MySqlParser.AFTER, 0); }
        public AlterByAddColumnContext(AlterSpecificationContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterByAddColumn(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterByAddColumn(this);
        }
    }
    public partial class AlterByOrderContext : AlterSpecificationContext
    {
        public ITerminalNode ORDER() { return GetToken(MySqlParser.ORDER, 0); }
        public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
        public UidListContext uidList()
        {
            return GetRuleContext<UidListContext>(0);
        }
        public AlterByOrderContext(AlterSpecificationContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterByOrder(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterByOrder(this);
        }
    }

    [RuleVersion(0)]
    public AlterSpecificationContext alterSpecification()
    {
        AlterSpecificationContext _localctx = new AlterSpecificationContext(Context, State);
        EnterRule(_localctx, 132, RULE_alterSpecification);
        int _la;
        try
        {
            int _alt;
            State = 2599;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 330, Context))
            {
                case 1:
                    _localctx = new AlterByTableOptionContext(_localctx);
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 2244; tableOption();
                        State = 2251;
                        ErrorHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(TokenStream, 278, Context);
                        while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                        {
                            if (_alt == 1)
                            {
                                {
                                    {
                                        State = 2246;
                                        ErrorHandler.Sync(this);
                                        _la = TokenStream.LA(1);
                                        if (_la == COMMA)
                                        {
                                            {
                                                State = 2245; Match(COMMA);
                                            }
                                        }

                                        State = 2248; tableOption();
                                    }
                                }
                            }
                            State = 2253;
                            ErrorHandler.Sync(this);
                            _alt = Interpreter.AdaptivePredict(TokenStream, 278, Context);
                        }
                    }
                    break;
                case 2:
                    _localctx = new AlterByAddColumnContext(_localctx);
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 2254; Match(ADD);
                        State = 2256;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == COLUMN)
                        {
                            {
                                State = 2255; Match(COLUMN);
                            }
                        }

                        State = 2258; uid();
                        State = 2259; columnDefinition();
                        State = 2263;
                        ErrorHandler.Sync(this);
                        switch (TokenStream.LA(1))
                        {
                            case FIRST:
                                {
                                    State = 2260; Match(FIRST);
                                }
                                break;
                            case AFTER:
                                {
                                    State = 2261; Match(AFTER);
                                    State = 2262; uid();
                                }
                                break;
                            case Eof:
                            case ALTER:
                            case ANALYZE:
                            case CALL:
                            case CHANGE:
                            case CHECK:
                            case CREATE:
                            case DELETE:
                            case DESC:
                            case DESCRIBE:
                            case DROP:
                            case EXPLAIN:
                            case GET:
                            case GRANT:
                            case INSERT:
                            case KILL:
                            case LOAD:
                            case LOCK:
                            case OPTIMIZE:
                            case PARTITION:
                            case PURGE:
                            case RELEASE:
                            case RENAME:
                            case REPLACE:
                            case RESIGNAL:
                            case REVOKE:
                            case SELECT:
                            case SET:
                            case SHOW:
                            case SIGNAL:
                            case UNLOCK:
                            case UPDATE:
                            case USE:
                            case BEGIN:
                            case BINLOG:
                            case CACHE:
                            case CHECKSUM:
                            case COMMIT:
                            case DEALLOCATE:
                            case DO:
                            case FLUSH:
                            case HANDLER:
                            case HELP:
                            case INSTALL:
                            case PREPARE:
                            case REPAIR:
                            case RESET:
                            case ROLLBACK:
                            case SAVEPOINT:
                            case START:
                            case STOP:
                            case TRUNCATE:
                            case UNINSTALL:
                            case XA:
                            case EXECUTE:
                            case SHUTDOWN:
                            case MINUSMINUS:
                            case LR_BRACKET:
                            case COMMA:
                            case SEMI:
                                break;
                            default:
                                break;
                        }
                    }
                    break;
                case 3:
                    _localctx = new AlterByAddColumnsContext(_localctx);
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 2265; Match(ADD);
                        State = 2267;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == COLUMN)
                        {
                            {
                                State = 2266; Match(COLUMN);
                            }
                        }

                        State = 2269; Match(LR_BRACKET);
                        State = 2270; uid();
                        State = 2271; columnDefinition();
                        State = 2278;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        while (_la == COMMA)
                        {
                            {
                                {
                                    State = 2272; Match(COMMA);
                                    State = 2273; uid();
                                    State = 2274; columnDefinition();
                                }
                            }
                            State = 2280;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                        }
                        State = 2281; Match(RR_BRACKET);
                    }
                    break;
                case 4:
                    _localctx = new AlterByAddIndexContext(_localctx);
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 2283; Match(ADD);
                        State = 2284;
                        ((AlterByAddIndexContext)_localctx).indexFormat = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == INDEX || _la == KEY))
                        {
                            ((AlterByAddIndexContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                        State = 2286;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)) | (1L << (POSITION - 191)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ACCOUNT - 259)) | (1L << (ACTION - 259)) | (1L << (AFTER - 259)) | (1L << (AGGREGATE - 259)) | (1L << (ALGORITHM - 259)) | (1L << (ANY - 259)) | (1L << (AT - 259)) | (1L << (AUTHORS - 259)) | (1L << (AUTOCOMMIT - 259)) | (1L << (AUTOEXTEND_SIZE - 259)) | (1L << (AUTO_INCREMENT - 259)) | (1L << (AVG_ROW_LENGTH - 259)) | (1L << (BEGIN - 259)) | (1L << (BINLOG - 259)) | (1L << (BIT - 259)) | (1L << (BLOCK - 259)) | (1L << (BOOL - 259)) | (1L << (BOOLEAN - 259)) | (1L << (BTREE - 259)) | (1L << (CACHE - 259)) | (1L << (CASCADED - 259)) | (1L << (CHAIN - 259)) | (1L << (CHANGED - 259)) | (1L << (CHANNEL - 259)) | (1L << (CHECKSUM - 259)) | (1L << (PAGE_CHECKSUM - 259)) | (1L << (CIPHER - 259)) | (1L << (CLASS_ORIGIN - 259)) | (1L << (CLIENT - 259)) | (1L << (CLOSE - 259)) | (1L << (COALESCE - 259)) | (1L << (CODE - 259)) | (1L << (COLUMNS - 259)) | (1L << (COLUMN_FORMAT - 259)) | (1L << (COLUMN_NAME - 259)) | (1L << (COMMENT - 259)) | (1L << (COMMIT - 259)) | (1L << (COMPACT - 259)) | (1L << (COMPLETION - 259)) | (1L << (COMPRESSED - 259)) | (1L << (COMPRESSION - 259)) | (1L << (CONCURRENT - 259)) | (1L << (CONNECTION - 259)) | (1L << (CONSISTENT - 259)) | (1L << (CONSTRAINT_CATALOG - 259)) | (1L << (CONSTRAINT_SCHEMA - 259)) | (1L << (CONSTRAINT_NAME - 259)) | (1L << (CONTAINS - 259)) | (1L << (CONTEXT - 259)) | (1L << (CONTRIBUTORS - 259)) | (1L << (COPY - 259)) | (1L << (CPU - 259)) | (1L << (CURSOR_NAME - 259)) | (1L << (DATA - 259)) | (1L << (DATAFILE - 259)) | (1L << (DEALLOCATE - 259)) | (1L << (DEFAULT_AUTH - 259)) | (1L << (DEFINER - 259)) | (1L << (DELAY_KEY_WRITE - 259)) | (1L << (DES_KEY_FILE - 259)) | (1L << (DIRECTORY - 259)) | (1L << (DISABLE - 259)) | (1L << (DISCARD - 259)) | (1L << (DISK - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (DO - 323)) | (1L << (DUMPFILE - 323)) | (1L << (DUPLICATE - 323)) | (1L << (DYNAMIC - 323)) | (1L << (ENABLE - 323)) | (1L << (ENCRYPTION - 323)) | (1L << (END - 323)) | (1L << (ENDS - 323)) | (1L << (ENGINE - 323)) | (1L << (ENGINES - 323)) | (1L << (ERROR - 323)) | (1L << (ERRORS - 323)) | (1L << (ESCAPE - 323)) | (1L << (EVEN - 323)) | (1L << (EVENT - 323)) | (1L << (EVENTS - 323)) | (1L << (EVERY - 323)) | (1L << (EXCHANGE - 323)) | (1L << (EXCLUSIVE - 323)) | (1L << (EXPIRE - 323)) | (1L << (EXPORT - 323)) | (1L << (EXTENDED - 323)) | (1L << (EXTENT_SIZE - 323)) | (1L << (FAST - 323)) | (1L << (FAULTS - 323)) | (1L << (FIELDS - 323)) | (1L << (FILE_BLOCK_SIZE - 323)) | (1L << (FILTER - 323)) | (1L << (FIRST - 323)) | (1L << (FIXED - 323)) | (1L << (FLUSH - 323)) | (1L << (FOLLOWS - 323)) | (1L << (FOUND - 323)) | (1L << (FULL - 323)) | (1L << (FUNCTION - 323)) | (1L << (GENERAL - 323)) | (1L << (GLOBAL - 323)) | (1L << (GRANTS - 323)) | (1L << (GROUP_REPLICATION - 323)) | (1L << (HANDLER - 323)) | (1L << (HASH - 323)) | (1L << (HELP - 323)) | (1L << (HOST - 323)) | (1L << (HOSTS - 323)) | (1L << (IDENTIFIED - 323)) | (1L << (IGNORE_SERVER_IDS - 323)) | (1L << (IMPORT - 323)) | (1L << (INDEXES - 323)) | (1L << (INITIAL_SIZE - 323)) | (1L << (INPLACE - 323)) | (1L << (INSERT_METHOD - 323)) | (1L << (INSTALL - 323)) | (1L << (INSTANCE - 323)) | (1L << (INVISIBLE - 323)) | (1L << (INVOKER - 323)) | (1L << (IO - 323)) | (1L << (IO_THREAD - 323)) | (1L << (IPC - 323)) | (1L << (ISOLATION - 323)) | (1L << (ISSUER - 323)) | (1L << (JSON - 323)) | (1L << (KEY_BLOCK_SIZE - 323)) | (1L << (LANGUAGE - 323)) | (1L << (LAST - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (LEAVES - 387)) | (1L << (LESS - 387)) | (1L << (LEVEL - 387)) | (1L << (LIST - 387)) | (1L << (LOCAL - 387)) | (1L << (LOGFILE - 387)) | (1L << (LOGS - 387)) | (1L << (MASTER - 387)) | (1L << (MASTER_AUTO_POSITION - 387)) | (1L << (MASTER_CONNECT_RETRY - 387)) | (1L << (MASTER_DELAY - 387)) | (1L << (MASTER_HEARTBEAT_PERIOD - 387)) | (1L << (MASTER_HOST - 387)) | (1L << (MASTER_LOG_FILE - 387)) | (1L << (MASTER_LOG_POS - 387)) | (1L << (MASTER_PASSWORD - 387)) | (1L << (MASTER_PORT - 387)) | (1L << (MASTER_RETRY_COUNT - 387)) | (1L << (MASTER_SSL - 387)) | (1L << (MASTER_SSL_CA - 387)) | (1L << (MASTER_SSL_CAPATH - 387)) | (1L << (MASTER_SSL_CERT - 387)) | (1L << (MASTER_SSL_CIPHER - 387)) | (1L << (MASTER_SSL_CRL - 387)) | (1L << (MASTER_SSL_CRLPATH - 387)) | (1L << (MASTER_SSL_KEY - 387)) | (1L << (MASTER_TLS_VERSION - 387)) | (1L << (MASTER_USER - 387)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 387)) | (1L << (MAX_QUERIES_PER_HOUR - 387)) | (1L << (MAX_ROWS - 387)) | (1L << (MAX_SIZE - 387)) | (1L << (MAX_UPDATES_PER_HOUR - 387)) | (1L << (MAX_USER_CONNECTIONS - 387)) | (1L << (MEDIUM - 387)) | (1L << (MERGE - 387)) | (1L << (MESSAGE_TEXT - 387)) | (1L << (MID - 387)) | (1L << (MIGRATE - 387)) | (1L << (MIN_ROWS - 387)) | (1L << (MODE - 387)) | (1L << (MODIFY - 387)) | (1L << (MUTEX - 387)) | (1L << (MYSQL - 387)) | (1L << (MYSQL_ERRNO - 387)) | (1L << (NAME - 387)) | (1L << (NAMES - 387)) | (1L << (NCHAR - 387)) | (1L << (NEVER - 387)) | (1L << (NEXT - 387)) | (1L << (NO - 387)) | (1L << (NODEGROUP - 387)) | (1L << (NONE - 387)) | (1L << (OFFLINE - 387)) | (1L << (OFFSET - 387)) | (1L << (OJ - 387)) | (1L << (OLD_PASSWORD - 387)) | (1L << (ONE - 387)) | (1L << (ONLINE - 387)) | (1L << (ONLY - 387)) | (1L << (OPEN - 387)) | (1L << (OPTIMIZER_COSTS - 387)) | (1L << (OPTIONS - 387)) | (1L << (OWNER - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PAGE - 451)) | (1L << (PARSER - 451)) | (1L << (PARTIAL - 451)) | (1L << (PARTITIONING - 451)) | (1L << (PARTITIONS - 451)) | (1L << (PASSWORD - 451)) | (1L << (PHASE - 451)) | (1L << (PLUGIN - 451)) | (1L << (PLUGIN_DIR - 451)) | (1L << (PLUGINS - 451)) | (1L << (PORT - 451)) | (1L << (PRECEDES - 451)) | (1L << (PREPARE - 451)) | (1L << (PRESERVE - 451)) | (1L << (PREV - 451)) | (1L << (PROCESSLIST - 451)) | (1L << (PROFILE - 451)) | (1L << (PROFILES - 451)) | (1L << (PROXY - 451)) | (1L << (QUERY - 451)) | (1L << (QUICK - 451)) | (1L << (REBUILD - 451)) | (1L << (RECOVER - 451)) | (1L << (REDO_BUFFER_SIZE - 451)) | (1L << (REDUNDANT - 451)) | (1L << (RELAY - 451)) | (1L << (RELAY_LOG_FILE - 451)) | (1L << (RELAY_LOG_POS - 451)) | (1L << (RELAYLOG - 451)) | (1L << (REMOVE - 451)) | (1L << (REORGANIZE - 451)) | (1L << (REPAIR - 451)) | (1L << (REPLICATE_DO_DB - 451)) | (1L << (REPLICATE_DO_TABLE - 451)) | (1L << (REPLICATE_IGNORE_DB - 451)) | (1L << (REPLICATE_IGNORE_TABLE - 451)) | (1L << (REPLICATE_REWRITE_DB - 451)) | (1L << (REPLICATE_WILD_DO_TABLE - 451)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 451)) | (1L << (REPLICATION - 451)) | (1L << (RESET - 451)) | (1L << (RESUME - 451)) | (1L << (RETURNED_SQLSTATE - 451)) | (1L << (RETURNS - 451)) | (1L << (ROLLBACK - 451)) | (1L << (ROLLUP - 451)) | (1L << (ROTATE - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (ROW_FORMAT - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SCHEDULE - 451)) | (1L << (SECURITY - 451)) | (1L << (SERVER - 451)) | (1L << (SESSION - 451)) | (1L << (SHARE - 451)) | (1L << (SHARED - 451)) | (1L << (SIGNED - 451)) | (1L << (SIMPLE - 451)) | (1L << (SLAVE - 451)) | (1L << (SLOW - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOCKET - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SOME - 515)) | (1L << (SONAME - 515)) | (1L << (SOUNDS - 515)) | (1L << (SOURCE - 515)) | (1L << (SQL_AFTER_GTIDS - 515)) | (1L << (SQL_AFTER_MTS_GAPS - 515)) | (1L << (SQL_BEFORE_GTIDS - 515)) | (1L << (SQL_BUFFER_RESULT - 515)) | (1L << (SQL_CACHE - 515)) | (1L << (SQL_NO_CACHE - 515)) | (1L << (SQL_THREAD - 515)) | (1L << (START - 515)) | (1L << (STARTS - 515)) | (1L << (STATS_AUTO_RECALC - 515)) | (1L << (STATS_PERSISTENT - 515)) | (1L << (STATS_SAMPLE_PAGES - 515)) | (1L << (STATUS - 515)) | (1L << (STOP - 515)) | (1L << (STORAGE - 515)) | (1L << (STRING - 515)) | (1L << (SUBCLASS_ORIGIN - 515)) | (1L << (SUBJECT - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBPARTITIONS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SWAPS - 515)) | (1L << (SWITCHES - 515)) | (1L << (TABLE_NAME - 515)) | (1L << (TABLESPACE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TEMPTABLE - 515)) | (1L << (THAN - 515)) | (1L << (TRADITIONAL - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRIGGERS - 515)) | (1L << (TRUNCATE - 515)) | (1L << (UNDEFINED - 515)) | (1L << (UNDOFILE - 515)) | (1L << (UNDO_BUFFER_SIZE - 515)) | (1L << (UNINSTALL - 515)) | (1L << (UNKNOWN - 515)) | (1L << (UNTIL - 515)) | (1L << (UPGRADE - 515)) | (1L << (USER - 515)) | (1L << (USE_FRM - 515)) | (1L << (USER_RESOURCES - 515)) | (1L << (VALIDATION - 515)) | (1L << (VALUE - 515)) | (1L << (VARIABLES - 515)) | (1L << (VIEW - 515)) | (1L << (VISIBLE - 515)) | (1L << (WAIT - 515)) | (1L << (WARNINGS - 515)) | (1L << (WITHOUT - 515)) | (1L << (WORK - 515)) | (1L << (WRAPPER - 515)) | (1L << (X509 - 515)) | (1L << (XA - 515)) | (1L << (XML - 515)))) != 0) || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (INTERNAL - 580)) | (1L << (QUARTER - 580)) | (1L << (MONTH - 580)) | (1L << (DAY - 580)) | (1L << (HOUR - 580)) | (1L << (MINUTE - 580)) | (1L << (WEEK - 580)) | (1L << (SECOND - 580)) | (1L << (MICROSECOND - 580)) | (1L << (TABLES - 580)) | (1L << (ROUTINE - 580)) | (1L << (EXECUTE - 580)) | (1L << (FILE - 580)) | (1L << (PROCESS - 580)) | (1L << (RELOAD - 580)) | (1L << (SHUTDOWN - 580)) | (1L << (SUPER - 580)) | (1L << (PRIVILEGES - 580)) | (1L << (SESSION_VARIABLES_ADMIN - 580)) | (1L << (ARMSCII8 - 580)) | (1L << (ASCII - 580)) | (1L << (BIG5 - 580)) | (1L << (CP1250 - 580)) | (1L << (CP1251 - 580)) | (1L << (CP1256 - 580)) | (1L << (CP1257 - 580)) | (1L << (CP850 - 580)) | (1L << (CP852 - 580)) | (1L << (CP866 - 580)) | (1L << (CP932 - 580)) | (1L << (DEC8 - 580)) | (1L << (EUCJPMS - 580)) | (1L << (EUCKR - 580)) | (1L << (GB2312 - 580)) | (1L << (GBK - 580)) | (1L << (GEOSTD8 - 580)) | (1L << (GREEK - 580)) | (1L << (HEBREW - 580)) | (1L << (HP8 - 580)) | (1L << (KEYBCS2 - 580)) | (1L << (KOI8R - 580)) | (1L << (KOI8U - 580)) | (1L << (LATIN1 - 580)) | (1L << (LATIN2 - 580)) | (1L << (LATIN5 - 580)) | (1L << (LATIN7 - 580)) | (1L << (MACCE - 580)) | (1L << (MACROMAN - 580)) | (1L << (SJIS - 580)) | (1L << (SWE7 - 580)) | (1L << (TIS620 - 580)) | (1L << (UCS2 - 580)) | (1L << (UJIS - 580)) | (1L << (UTF16 - 580)) | (1L << (UTF16LE - 580)) | (1L << (UTF32 - 580)) | (1L << (UTF8 - 580)) | (1L << (UTF8MB3 - 580)) | (1L << (UTF8MB4 - 580)) | (1L << (ARCHIVE - 580)) | (1L << (BLACKHOLE - 580)) | (1L << (CSV - 580)) | (1L << (FEDERATED - 580)) | (1L << (INNODB - 580)))) != 0) || ((((_la - 644)) & ~0x3f) == 0 && ((1L << (_la - 644)) & ((1L << (MEMORY - 644)) | (1L << (MRG_MYISAM - 644)) | (1L << (MYISAM - 644)) | (1L << (NDB - 644)) | (1L << (NDBCLUSTER - 644)) | (1L << (PERFORMANCE_SCHEMA - 644)) | (1L << (TOKUDB - 644)) | (1L << (REPEATABLE - 644)) | (1L << (COMMITTED - 644)) | (1L << (UNCOMMITTED - 644)) | (1L << (SERIALIZABLE - 644)) | (1L << (GEOMETRYCOLLECTION - 644)) | (1L << (LINESTRING - 644)) | (1L << (MULTILINESTRING - 644)) | (1L << (MULTIPOINT - 644)) | (1L << (MULTIPOLYGON - 644)) | (1L << (POINT - 644)) | (1L << (POLYGON - 644)) | (1L << (ABS - 644)) | (1L << (ACOS - 644)) | (1L << (ADDDATE - 644)) | (1L << (ADDTIME - 644)) | (1L << (AES_DECRYPT - 644)) | (1L << (AES_ENCRYPT - 644)) | (1L << (AREA - 644)) | (1L << (ASBINARY - 644)) | (1L << (ASIN - 644)) | (1L << (ASTEXT - 644)) | (1L << (ASWKB - 644)) | (1L << (ASWKT - 644)) | (1L << (ASYMMETRIC_DECRYPT - 644)) | (1L << (ASYMMETRIC_DERIVE - 644)) | (1L << (ASYMMETRIC_ENCRYPT - 644)) | (1L << (ASYMMETRIC_SIGN - 644)) | (1L << (ASYMMETRIC_VERIFY - 644)) | (1L << (ATAN - 644)) | (1L << (ATAN2 - 644)) | (1L << (BENCHMARK - 644)) | (1L << (BIN - 644)) | (1L << (BIT_COUNT - 644)) | (1L << (BIT_LENGTH - 644)) | (1L << (BUFFER - 644)) | (1L << (CATALOG_NAME - 644)) | (1L << (CEIL - 644)) | (1L << (CEILING - 644)) | (1L << (CENTROID - 644)) | (1L << (CHARACTER_LENGTH - 644)) | (1L << (CHARSET - 644)) | (1L << (CHAR_LENGTH - 644)) | (1L << (COERCIBILITY - 644)) | (1L << (COLLATION - 644)) | (1L << (COMPRESS - 644)) | (1L << (CONCAT - 644)) | (1L << (CONCAT_WS - 644)) | (1L << (CONNECTION_ID - 644)) | (1L << (CONV - 644)) | (1L << (CONVERT_TZ - 644)) | (1L << (COS - 644)) | (1L << (COT - 644)) | (1L << (CRC32 - 644)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 644)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 644)))) != 0) || ((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (CREATE_DH_PARAMETERS - 708)) | (1L << (CREATE_DIGEST - 708)) | (1L << (CROSSES - 708)) | (1L << (DATEDIFF - 708)) | (1L << (DATE_FORMAT - 708)) | (1L << (DAYNAME - 708)) | (1L << (DAYOFMONTH - 708)) | (1L << (DAYOFWEEK - 708)) | (1L << (DAYOFYEAR - 708)) | (1L << (DECODE - 708)) | (1L << (DEGREES - 708)) | (1L << (DES_DECRYPT - 708)) | (1L << (DES_ENCRYPT - 708)) | (1L << (DIMENSION - 708)) | (1L << (DISJOINT - 708)) | (1L << (ELT - 708)) | (1L << (ENCODE - 708)) | (1L << (ENCRYPT - 708)) | (1L << (ENDPOINT - 708)) | (1L << (ENVELOPE - 708)) | (1L << (EQUALS - 708)) | (1L << (EXP - 708)) | (1L << (EXPORT_SET - 708)) | (1L << (EXTERIORRING - 708)) | (1L << (EXTRACTVALUE - 708)) | (1L << (FIELD - 708)) | (1L << (FIND_IN_SET - 708)) | (1L << (FLOOR - 708)) | (1L << (FORMAT - 708)) | (1L << (FOUND_ROWS - 708)) | (1L << (FROM_BASE64 - 708)) | (1L << (FROM_DAYS - 708)) | (1L << (FROM_UNIXTIME - 708)) | (1L << (GEOMCOLLFROMTEXT - 708)) | (1L << (GEOMCOLLFROMWKB - 708)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 708)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 708)) | (1L << (GEOMETRYFROMTEXT - 708)) | (1L << (GEOMETRYFROMWKB - 708)) | (1L << (GEOMETRYN - 708)) | (1L << (GEOMETRYTYPE - 708)) | (1L << (GEOMFROMTEXT - 708)) | (1L << (GEOMFROMWKB - 708)) | (1L << (GET_FORMAT - 708)) | (1L << (GET_LOCK - 708)) | (1L << (GLENGTH - 708)) | (1L << (GREATEST - 708)) | (1L << (GTID_SUBSET - 708)) | (1L << (GTID_SUBTRACT - 708)) | (1L << (HEX - 708)) | (1L << (IFNULL - 708)) | (1L << (INET6_ATON - 708)) | (1L << (INET6_NTOA - 708)) | (1L << (INET_ATON - 708)) | (1L << (INET_NTOA - 708)) | (1L << (INSTR - 708)) | (1L << (INTERIORRINGN - 708)) | (1L << (INTERSECTS - 708)) | (1L << (ISCLOSED - 708)) | (1L << (ISEMPTY - 708)) | (1L << (ISNULL - 708)) | (1L << (ISSIMPLE - 708)) | (1L << (IS_FREE_LOCK - 708)) | (1L << (IS_IPV4 - 708)))) != 0) || ((((_la - 772)) & ~0x3f) == 0 && ((1L << (_la - 772)) & ((1L << (IS_IPV4_COMPAT - 772)) | (1L << (IS_IPV4_MAPPED - 772)) | (1L << (IS_IPV6 - 772)) | (1L << (IS_USED_LOCK - 772)) | (1L << (LAST_INSERT_ID - 772)) | (1L << (LCASE - 772)) | (1L << (LEAST - 772)) | (1L << (LENGTH - 772)) | (1L << (LINEFROMTEXT - 772)) | (1L << (LINEFROMWKB - 772)) | (1L << (LINESTRINGFROMTEXT - 772)) | (1L << (LINESTRINGFROMWKB - 772)) | (1L << (LN - 772)) | (1L << (LOAD_FILE - 772)) | (1L << (LOCATE - 772)) | (1L << (LOG - 772)) | (1L << (LOG10 - 772)) | (1L << (LOG2 - 772)) | (1L << (LOWER - 772)) | (1L << (LPAD - 772)) | (1L << (LTRIM - 772)) | (1L << (MAKEDATE - 772)) | (1L << (MAKETIME - 772)) | (1L << (MAKE_SET - 772)) | (1L << (MASTER_POS_WAIT - 772)) | (1L << (MBRCONTAINS - 772)) | (1L << (MBRDISJOINT - 772)) | (1L << (MBREQUAL - 772)) | (1L << (MBRINTERSECTS - 772)) | (1L << (MBROVERLAPS - 772)) | (1L << (MBRTOUCHES - 772)) | (1L << (MBRWITHIN - 772)) | (1L << (MD5 - 772)) | (1L << (MLINEFROMTEXT - 772)) | (1L << (MLINEFROMWKB - 772)) | (1L << (MONTHNAME - 772)) | (1L << (MPOINTFROMTEXT - 772)) | (1L << (MPOINTFROMWKB - 772)) | (1L << (MPOLYFROMTEXT - 772)) | (1L << (MPOLYFROMWKB - 772)) | (1L << (MULTILINESTRINGFROMTEXT - 772)) | (1L << (MULTILINESTRINGFROMWKB - 772)) | (1L << (MULTIPOINTFROMTEXT - 772)) | (1L << (MULTIPOINTFROMWKB - 772)) | (1L << (MULTIPOLYGONFROMTEXT - 772)) | (1L << (MULTIPOLYGONFROMWKB - 772)) | (1L << (NAME_CONST - 772)) | (1L << (NULLIF - 772)) | (1L << (NUMGEOMETRIES - 772)) | (1L << (NUMINTERIORRINGS - 772)) | (1L << (NUMPOINTS - 772)) | (1L << (OCT - 772)) | (1L << (OCTET_LENGTH - 772)) | (1L << (ORD - 772)) | (1L << (OVERLAPS - 772)) | (1L << (PERIOD_ADD - 772)) | (1L << (PERIOD_DIFF - 772)) | (1L << (PI - 772)) | (1L << (POINTFROMTEXT - 772)) | (1L << (POINTFROMWKB - 772)) | (1L << (POINTN - 772)) | (1L << (POLYFROMTEXT - 772)) | (1L << (POLYFROMWKB - 772)) | (1L << (POLYGONFROMTEXT - 772)))) != 0) || ((((_la - 836)) & ~0x3f) == 0 && ((1L << (_la - 836)) & ((1L << (POLYGONFROMWKB - 836)) | (1L << (POW - 836)) | (1L << (POWER - 836)) | (1L << (QUOTE - 836)) | (1L << (RADIANS - 836)) | (1L << (RAND - 836)) | (1L << (RANDOM_BYTES - 836)) | (1L << (RELEASE_LOCK - 836)) | (1L << (REVERSE - 836)) | (1L << (ROUND - 836)) | (1L << (ROW_COUNT - 836)) | (1L << (RPAD - 836)) | (1L << (RTRIM - 836)) | (1L << (SEC_TO_TIME - 836)) | (1L << (SESSION_USER - 836)) | (1L << (SHA - 836)) | (1L << (SHA1 - 836)) | (1L << (SHA2 - 836)) | (1L << (SCHEMA_NAME - 836)) | (1L << (SIGN - 836)) | (1L << (SIN - 836)) | (1L << (SLEEP - 836)) | (1L << (SOUNDEX - 836)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 836)) | (1L << (SQRT - 836)) | (1L << (SRID - 836)) | (1L << (STARTPOINT - 836)) | (1L << (STRCMP - 836)) | (1L << (STR_TO_DATE - 836)) | (1L << (ST_AREA - 836)) | (1L << (ST_ASBINARY - 836)) | (1L << (ST_ASTEXT - 836)) | (1L << (ST_ASWKB - 836)) | (1L << (ST_ASWKT - 836)) | (1L << (ST_BUFFER - 836)) | (1L << (ST_CENTROID - 836)) | (1L << (ST_CONTAINS - 836)) | (1L << (ST_CROSSES - 836)) | (1L << (ST_DIFFERENCE - 836)) | (1L << (ST_DIMENSION - 836)) | (1L << (ST_DISJOINT - 836)) | (1L << (ST_DISTANCE - 836)) | (1L << (ST_ENDPOINT - 836)) | (1L << (ST_ENVELOPE - 836)) | (1L << (ST_EQUALS - 836)) | (1L << (ST_EXTERIORRING - 836)) | (1L << (ST_GEOMCOLLFROMTEXT - 836)) | (1L << (ST_GEOMCOLLFROMTXT - 836)) | (1L << (ST_GEOMCOLLFROMWKB - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 836)) | (1L << (ST_GEOMETRYFROMTEXT - 836)) | (1L << (ST_GEOMETRYFROMWKB - 836)) | (1L << (ST_GEOMETRYN - 836)) | (1L << (ST_GEOMETRYTYPE - 836)) | (1L << (ST_GEOMFROMTEXT - 836)) | (1L << (ST_GEOMFROMWKB - 836)) | (1L << (ST_INTERIORRINGN - 836)) | (1L << (ST_INTERSECTION - 836)) | (1L << (ST_INTERSECTS - 836)) | (1L << (ST_ISCLOSED - 836)) | (1L << (ST_ISEMPTY - 836)) | (1L << (ST_ISSIMPLE - 836)) | (1L << (ST_LINEFROMTEXT - 836)))) != 0) || ((((_la - 900)) & ~0x3f) == 0 && ((1L << (_la - 900)) & ((1L << (ST_LINEFROMWKB - 900)) | (1L << (ST_LINESTRINGFROMTEXT - 900)) | (1L << (ST_LINESTRINGFROMWKB - 900)) | (1L << (ST_NUMGEOMETRIES - 900)) | (1L << (ST_NUMINTERIORRING - 900)) | (1L << (ST_NUMINTERIORRINGS - 900)) | (1L << (ST_NUMPOINTS - 900)) | (1L << (ST_OVERLAPS - 900)) | (1L << (ST_POINTFROMTEXT - 900)) | (1L << (ST_POINTFROMWKB - 900)) | (1L << (ST_POINTN - 900)) | (1L << (ST_POLYFROMTEXT - 900)) | (1L << (ST_POLYFROMWKB - 900)) | (1L << (ST_POLYGONFROMTEXT - 900)) | (1L << (ST_POLYGONFROMWKB - 900)) | (1L << (ST_SRID - 900)) | (1L << (ST_STARTPOINT - 900)) | (1L << (ST_SYMDIFFERENCE - 900)) | (1L << (ST_TOUCHES - 900)) | (1L << (ST_UNION - 900)) | (1L << (ST_WITHIN - 900)) | (1L << (ST_X - 900)) | (1L << (ST_Y - 900)) | (1L << (SUBDATE - 900)) | (1L << (SUBSTRING_INDEX - 900)) | (1L << (SUBTIME - 900)) | (1L << (SYSTEM_USER - 900)) | (1L << (TAN - 900)) | (1L << (TIMEDIFF - 900)) | (1L << (TIMESTAMPADD - 900)) | (1L << (TIMESTAMPDIFF - 900)) | (1L << (TIME_FORMAT - 900)) | (1L << (TIME_TO_SEC - 900)) | (1L << (TOUCHES - 900)) | (1L << (TO_BASE64 - 900)) | (1L << (TO_DAYS - 900)) | (1L << (TO_SECONDS - 900)) | (1L << (UCASE - 900)) | (1L << (UNCOMPRESS - 900)) | (1L << (UNCOMPRESSED_LENGTH - 900)) | (1L << (UNHEX - 900)) | (1L << (UNIX_TIMESTAMP - 900)) | (1L << (UPDATEXML - 900)) | (1L << (UPPER - 900)) | (1L << (UUID - 900)) | (1L << (UUID_SHORT - 900)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 900)) | (1L << (VERSION - 900)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 900)) | (1L << (WEEKDAY - 900)) | (1L << (WEEKOFYEAR - 900)) | (1L << (WEIGHT_STRING - 900)) | (1L << (WITHIN - 900)) | (1L << (YEARWEEK - 900)) | (1L << (Y_FUNCTION - 900)) | (1L << (X_FUNCTION - 900)))) != 0) || ((((_la - 994)) & ~0x3f) == 0 && ((1L << (_la - 994)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 994)) | (1L << (STRING_LITERAL - 994)) | (1L << (ID - 994)) | (1L << (REVERSE_QUOTE_ID - 994)))) != 0))
                        {
                            {
                                State = 2285; uid();
                            }
                        }

                        State = 2289;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == USING)
                        {
                            {
                                State = 2288; indexType();
                            }
                        }

                        State = 2291; indexColumnNames();
                        State = 2295;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        while (_la == USING || _la == WITH || _la == COMMENT || _la == INVISIBLE || _la == KEY_BLOCK_SIZE || _la == VISIBLE)
                        {
                            {
                                {
                                    State = 2292; indexOption();
                                }
                            }
                            State = 2297;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                        }
                    }
                    break;
                case 5:
                    _localctx = new AlterByAddPrimaryKeyContext(_localctx);
                    EnterOuterAlt(_localctx, 5);
                    {
                        State = 2298; Match(ADD);
                        State = 2303;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == CONSTRAINT)
                        {
                            {
                                State = 2299; Match(CONSTRAINT);
                                State = 2301;
                                ErrorHandler.Sync(this);
                                _la = TokenStream.LA(1);
                                if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)) | (1L << (POSITION - 191)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ACCOUNT - 259)) | (1L << (ACTION - 259)) | (1L << (AFTER - 259)) | (1L << (AGGREGATE - 259)) | (1L << (ALGORITHM - 259)) | (1L << (ANY - 259)) | (1L << (AT - 259)) | (1L << (AUTHORS - 259)) | (1L << (AUTOCOMMIT - 259)) | (1L << (AUTOEXTEND_SIZE - 259)) | (1L << (AUTO_INCREMENT - 259)) | (1L << (AVG_ROW_LENGTH - 259)) | (1L << (BEGIN - 259)) | (1L << (BINLOG - 259)) | (1L << (BIT - 259)) | (1L << (BLOCK - 259)) | (1L << (BOOL - 259)) | (1L << (BOOLEAN - 259)) | (1L << (BTREE - 259)) | (1L << (CACHE - 259)) | (1L << (CASCADED - 259)) | (1L << (CHAIN - 259)) | (1L << (CHANGED - 259)) | (1L << (CHANNEL - 259)) | (1L << (CHECKSUM - 259)) | (1L << (PAGE_CHECKSUM - 259)) | (1L << (CIPHER - 259)) | (1L << (CLASS_ORIGIN - 259)) | (1L << (CLIENT - 259)) | (1L << (CLOSE - 259)) | (1L << (COALESCE - 259)) | (1L << (CODE - 259)) | (1L << (COLUMNS - 259)) | (1L << (COLUMN_FORMAT - 259)) | (1L << (COLUMN_NAME - 259)) | (1L << (COMMENT - 259)) | (1L << (COMMIT - 259)) | (1L << (COMPACT - 259)) | (1L << (COMPLETION - 259)) | (1L << (COMPRESSED - 259)) | (1L << (COMPRESSION - 259)) | (1L << (CONCURRENT - 259)) | (1L << (CONNECTION - 259)) | (1L << (CONSISTENT - 259)) | (1L << (CONSTRAINT_CATALOG - 259)) | (1L << (CONSTRAINT_SCHEMA - 259)) | (1L << (CONSTRAINT_NAME - 259)) | (1L << (CONTAINS - 259)) | (1L << (CONTEXT - 259)) | (1L << (CONTRIBUTORS - 259)) | (1L << (COPY - 259)) | (1L << (CPU - 259)) | (1L << (CURSOR_NAME - 259)) | (1L << (DATA - 259)) | (1L << (DATAFILE - 259)) | (1L << (DEALLOCATE - 259)) | (1L << (DEFAULT_AUTH - 259)) | (1L << (DEFINER - 259)) | (1L << (DELAY_KEY_WRITE - 259)) | (1L << (DES_KEY_FILE - 259)) | (1L << (DIRECTORY - 259)) | (1L << (DISABLE - 259)) | (1L << (DISCARD - 259)) | (1L << (DISK - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (DO - 323)) | (1L << (DUMPFILE - 323)) | (1L << (DUPLICATE - 323)) | (1L << (DYNAMIC - 323)) | (1L << (ENABLE - 323)) | (1L << (ENCRYPTION - 323)) | (1L << (END - 323)) | (1L << (ENDS - 323)) | (1L << (ENGINE - 323)) | (1L << (ENGINES - 323)) | (1L << (ERROR - 323)) | (1L << (ERRORS - 323)) | (1L << (ESCAPE - 323)) | (1L << (EVEN - 323)) | (1L << (EVENT - 323)) | (1L << (EVENTS - 323)) | (1L << (EVERY - 323)) | (1L << (EXCHANGE - 323)) | (1L << (EXCLUSIVE - 323)) | (1L << (EXPIRE - 323)) | (1L << (EXPORT - 323)) | (1L << (EXTENDED - 323)) | (1L << (EXTENT_SIZE - 323)) | (1L << (FAST - 323)) | (1L << (FAULTS - 323)) | (1L << (FIELDS - 323)) | (1L << (FILE_BLOCK_SIZE - 323)) | (1L << (FILTER - 323)) | (1L << (FIRST - 323)) | (1L << (FIXED - 323)) | (1L << (FLUSH - 323)) | (1L << (FOLLOWS - 323)) | (1L << (FOUND - 323)) | (1L << (FULL - 323)) | (1L << (FUNCTION - 323)) | (1L << (GENERAL - 323)) | (1L << (GLOBAL - 323)) | (1L << (GRANTS - 323)) | (1L << (GROUP_REPLICATION - 323)) | (1L << (HANDLER - 323)) | (1L << (HASH - 323)) | (1L << (HELP - 323)) | (1L << (HOST - 323)) | (1L << (HOSTS - 323)) | (1L << (IDENTIFIED - 323)) | (1L << (IGNORE_SERVER_IDS - 323)) | (1L << (IMPORT - 323)) | (1L << (INDEXES - 323)) | (1L << (INITIAL_SIZE - 323)) | (1L << (INPLACE - 323)) | (1L << (INSERT_METHOD - 323)) | (1L << (INSTALL - 323)) | (1L << (INSTANCE - 323)) | (1L << (INVISIBLE - 323)) | (1L << (INVOKER - 323)) | (1L << (IO - 323)) | (1L << (IO_THREAD - 323)) | (1L << (IPC - 323)) | (1L << (ISOLATION - 323)) | (1L << (ISSUER - 323)) | (1L << (JSON - 323)) | (1L << (KEY_BLOCK_SIZE - 323)) | (1L << (LANGUAGE - 323)) | (1L << (LAST - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (LEAVES - 387)) | (1L << (LESS - 387)) | (1L << (LEVEL - 387)) | (1L << (LIST - 387)) | (1L << (LOCAL - 387)) | (1L << (LOGFILE - 387)) | (1L << (LOGS - 387)) | (1L << (MASTER - 387)) | (1L << (MASTER_AUTO_POSITION - 387)) | (1L << (MASTER_CONNECT_RETRY - 387)) | (1L << (MASTER_DELAY - 387)) | (1L << (MASTER_HEARTBEAT_PERIOD - 387)) | (1L << (MASTER_HOST - 387)) | (1L << (MASTER_LOG_FILE - 387)) | (1L << (MASTER_LOG_POS - 387)) | (1L << (MASTER_PASSWORD - 387)) | (1L << (MASTER_PORT - 387)) | (1L << (MASTER_RETRY_COUNT - 387)) | (1L << (MASTER_SSL - 387)) | (1L << (MASTER_SSL_CA - 387)) | (1L << (MASTER_SSL_CAPATH - 387)) | (1L << (MASTER_SSL_CERT - 387)) | (1L << (MASTER_SSL_CIPHER - 387)) | (1L << (MASTER_SSL_CRL - 387)) | (1L << (MASTER_SSL_CRLPATH - 387)) | (1L << (MASTER_SSL_KEY - 387)) | (1L << (MASTER_TLS_VERSION - 387)) | (1L << (MASTER_USER - 387)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 387)) | (1L << (MAX_QUERIES_PER_HOUR - 387)) | (1L << (MAX_ROWS - 387)) | (1L << (MAX_SIZE - 387)) | (1L << (MAX_UPDATES_PER_HOUR - 387)) | (1L << (MAX_USER_CONNECTIONS - 387)) | (1L << (MEDIUM - 387)) | (1L << (MERGE - 387)) | (1L << (MESSAGE_TEXT - 387)) | (1L << (MID - 387)) | (1L << (MIGRATE - 387)) | (1L << (MIN_ROWS - 387)) | (1L << (MODE - 387)) | (1L << (MODIFY - 387)) | (1L << (MUTEX - 387)) | (1L << (MYSQL - 387)) | (1L << (MYSQL_ERRNO - 387)) | (1L << (NAME - 387)) | (1L << (NAMES - 387)) | (1L << (NCHAR - 387)) | (1L << (NEVER - 387)) | (1L << (NEXT - 387)) | (1L << (NO - 387)) | (1L << (NODEGROUP - 387)) | (1L << (NONE - 387)) | (1L << (OFFLINE - 387)) | (1L << (OFFSET - 387)) | (1L << (OJ - 387)) | (1L << (OLD_PASSWORD - 387)) | (1L << (ONE - 387)) | (1L << (ONLINE - 387)) | (1L << (ONLY - 387)) | (1L << (OPEN - 387)) | (1L << (OPTIMIZER_COSTS - 387)) | (1L << (OPTIONS - 387)) | (1L << (OWNER - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PAGE - 451)) | (1L << (PARSER - 451)) | (1L << (PARTIAL - 451)) | (1L << (PARTITIONING - 451)) | (1L << (PARTITIONS - 451)) | (1L << (PASSWORD - 451)) | (1L << (PHASE - 451)) | (1L << (PLUGIN - 451)) | (1L << (PLUGIN_DIR - 451)) | (1L << (PLUGINS - 451)) | (1L << (PORT - 451)) | (1L << (PRECEDES - 451)) | (1L << (PREPARE - 451)) | (1L << (PRESERVE - 451)) | (1L << (PREV - 451)) | (1L << (PROCESSLIST - 451)) | (1L << (PROFILE - 451)) | (1L << (PROFILES - 451)) | (1L << (PROXY - 451)) | (1L << (QUERY - 451)) | (1L << (QUICK - 451)) | (1L << (REBUILD - 451)) | (1L << (RECOVER - 451)) | (1L << (REDO_BUFFER_SIZE - 451)) | (1L << (REDUNDANT - 451)) | (1L << (RELAY - 451)) | (1L << (RELAY_LOG_FILE - 451)) | (1L << (RELAY_LOG_POS - 451)) | (1L << (RELAYLOG - 451)) | (1L << (REMOVE - 451)) | (1L << (REORGANIZE - 451)) | (1L << (REPAIR - 451)) | (1L << (REPLICATE_DO_DB - 451)) | (1L << (REPLICATE_DO_TABLE - 451)) | (1L << (REPLICATE_IGNORE_DB - 451)) | (1L << (REPLICATE_IGNORE_TABLE - 451)) | (1L << (REPLICATE_REWRITE_DB - 451)) | (1L << (REPLICATE_WILD_DO_TABLE - 451)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 451)) | (1L << (REPLICATION - 451)) | (1L << (RESET - 451)) | (1L << (RESUME - 451)) | (1L << (RETURNED_SQLSTATE - 451)) | (1L << (RETURNS - 451)) | (1L << (ROLLBACK - 451)) | (1L << (ROLLUP - 451)) | (1L << (ROTATE - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (ROW_FORMAT - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SCHEDULE - 451)) | (1L << (SECURITY - 451)) | (1L << (SERVER - 451)) | (1L << (SESSION - 451)) | (1L << (SHARE - 451)) | (1L << (SHARED - 451)) | (1L << (SIGNED - 451)) | (1L << (SIMPLE - 451)) | (1L << (SLAVE - 451)) | (1L << (SLOW - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOCKET - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SOME - 515)) | (1L << (SONAME - 515)) | (1L << (SOUNDS - 515)) | (1L << (SOURCE - 515)) | (1L << (SQL_AFTER_GTIDS - 515)) | (1L << (SQL_AFTER_MTS_GAPS - 515)) | (1L << (SQL_BEFORE_GTIDS - 515)) | (1L << (SQL_BUFFER_RESULT - 515)) | (1L << (SQL_CACHE - 515)) | (1L << (SQL_NO_CACHE - 515)) | (1L << (SQL_THREAD - 515)) | (1L << (START - 515)) | (1L << (STARTS - 515)) | (1L << (STATS_AUTO_RECALC - 515)) | (1L << (STATS_PERSISTENT - 515)) | (1L << (STATS_SAMPLE_PAGES - 515)) | (1L << (STATUS - 515)) | (1L << (STOP - 515)) | (1L << (STORAGE - 515)) | (1L << (STRING - 515)) | (1L << (SUBCLASS_ORIGIN - 515)) | (1L << (SUBJECT - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBPARTITIONS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SWAPS - 515)) | (1L << (SWITCHES - 515)) | (1L << (TABLE_NAME - 515)) | (1L << (TABLESPACE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TEMPTABLE - 515)) | (1L << (THAN - 515)) | (1L << (TRADITIONAL - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRIGGERS - 515)) | (1L << (TRUNCATE - 515)) | (1L << (UNDEFINED - 515)) | (1L << (UNDOFILE - 515)) | (1L << (UNDO_BUFFER_SIZE - 515)) | (1L << (UNINSTALL - 515)) | (1L << (UNKNOWN - 515)) | (1L << (UNTIL - 515)) | (1L << (UPGRADE - 515)) | (1L << (USER - 515)) | (1L << (USE_FRM - 515)) | (1L << (USER_RESOURCES - 515)) | (1L << (VALIDATION - 515)) | (1L << (VALUE - 515)) | (1L << (VARIABLES - 515)) | (1L << (VIEW - 515)) | (1L << (VISIBLE - 515)) | (1L << (WAIT - 515)) | (1L << (WARNINGS - 515)) | (1L << (WITHOUT - 515)) | (1L << (WORK - 515)) | (1L << (WRAPPER - 515)) | (1L << (X509 - 515)) | (1L << (XA - 515)) | (1L << (XML - 515)))) != 0) || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (INTERNAL - 580)) | (1L << (QUARTER - 580)) | (1L << (MONTH - 580)) | (1L << (DAY - 580)) | (1L << (HOUR - 580)) | (1L << (MINUTE - 580)) | (1L << (WEEK - 580)) | (1L << (SECOND - 580)) | (1L << (MICROSECOND - 580)) | (1L << (TABLES - 580)) | (1L << (ROUTINE - 580)) | (1L << (EXECUTE - 580)) | (1L << (FILE - 580)) | (1L << (PROCESS - 580)) | (1L << (RELOAD - 580)) | (1L << (SHUTDOWN - 580)) | (1L << (SUPER - 580)) | (1L << (PRIVILEGES - 580)) | (1L << (SESSION_VARIABLES_ADMIN - 580)) | (1L << (ARMSCII8 - 580)) | (1L << (ASCII - 580)) | (1L << (BIG5 - 580)) | (1L << (CP1250 - 580)) | (1L << (CP1251 - 580)) | (1L << (CP1256 - 580)) | (1L << (CP1257 - 580)) | (1L << (CP850 - 580)) | (1L << (CP852 - 580)) | (1L << (CP866 - 580)) | (1L << (CP932 - 580)) | (1L << (DEC8 - 580)) | (1L << (EUCJPMS - 580)) | (1L << (EUCKR - 580)) | (1L << (GB2312 - 580)) | (1L << (GBK - 580)) | (1L << (GEOSTD8 - 580)) | (1L << (GREEK - 580)) | (1L << (HEBREW - 580)) | (1L << (HP8 - 580)) | (1L << (KEYBCS2 - 580)) | (1L << (KOI8R - 580)) | (1L << (KOI8U - 580)) | (1L << (LATIN1 - 580)) | (1L << (LATIN2 - 580)) | (1L << (LATIN5 - 580)) | (1L << (LATIN7 - 580)) | (1L << (MACCE - 580)) | (1L << (MACROMAN - 580)) | (1L << (SJIS - 580)) | (1L << (SWE7 - 580)) | (1L << (TIS620 - 580)) | (1L << (UCS2 - 580)) | (1L << (UJIS - 580)) | (1L << (UTF16 - 580)) | (1L << (UTF16LE - 580)) | (1L << (UTF32 - 580)) | (1L << (UTF8 - 580)) | (1L << (UTF8MB3 - 580)) | (1L << (UTF8MB4 - 580)) | (1L << (ARCHIVE - 580)) | (1L << (BLACKHOLE - 580)) | (1L << (CSV - 580)) | (1L << (FEDERATED - 580)) | (1L << (INNODB - 580)))) != 0) || ((((_la - 644)) & ~0x3f) == 0 && ((1L << (_la - 644)) & ((1L << (MEMORY - 644)) | (1L << (MRG_MYISAM - 644)) | (1L << (MYISAM - 644)) | (1L << (NDB - 644)) | (1L << (NDBCLUSTER - 644)) | (1L << (PERFORMANCE_SCHEMA - 644)) | (1L << (TOKUDB - 644)) | (1L << (REPEATABLE - 644)) | (1L << (COMMITTED - 644)) | (1L << (UNCOMMITTED - 644)) | (1L << (SERIALIZABLE - 644)) | (1L << (GEOMETRYCOLLECTION - 644)) | (1L << (LINESTRING - 644)) | (1L << (MULTILINESTRING - 644)) | (1L << (MULTIPOINT - 644)) | (1L << (MULTIPOLYGON - 644)) | (1L << (POINT - 644)) | (1L << (POLYGON - 644)) | (1L << (ABS - 644)) | (1L << (ACOS - 644)) | (1L << (ADDDATE - 644)) | (1L << (ADDTIME - 644)) | (1L << (AES_DECRYPT - 644)) | (1L << (AES_ENCRYPT - 644)) | (1L << (AREA - 644)) | (1L << (ASBINARY - 644)) | (1L << (ASIN - 644)) | (1L << (ASTEXT - 644)) | (1L << (ASWKB - 644)) | (1L << (ASWKT - 644)) | (1L << (ASYMMETRIC_DECRYPT - 644)) | (1L << (ASYMMETRIC_DERIVE - 644)) | (1L << (ASYMMETRIC_ENCRYPT - 644)) | (1L << (ASYMMETRIC_SIGN - 644)) | (1L << (ASYMMETRIC_VERIFY - 644)) | (1L << (ATAN - 644)) | (1L << (ATAN2 - 644)) | (1L << (BENCHMARK - 644)) | (1L << (BIN - 644)) | (1L << (BIT_COUNT - 644)) | (1L << (BIT_LENGTH - 644)) | (1L << (BUFFER - 644)) | (1L << (CATALOG_NAME - 644)) | (1L << (CEIL - 644)) | (1L << (CEILING - 644)) | (1L << (CENTROID - 644)) | (1L << (CHARACTER_LENGTH - 644)) | (1L << (CHARSET - 644)) | (1L << (CHAR_LENGTH - 644)) | (1L << (COERCIBILITY - 644)) | (1L << (COLLATION - 644)) | (1L << (COMPRESS - 644)) | (1L << (CONCAT - 644)) | (1L << (CONCAT_WS - 644)) | (1L << (CONNECTION_ID - 644)) | (1L << (CONV - 644)) | (1L << (CONVERT_TZ - 644)) | (1L << (COS - 644)) | (1L << (COT - 644)) | (1L << (CRC32 - 644)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 644)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 644)))) != 0) || ((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (CREATE_DH_PARAMETERS - 708)) | (1L << (CREATE_DIGEST - 708)) | (1L << (CROSSES - 708)) | (1L << (DATEDIFF - 708)) | (1L << (DATE_FORMAT - 708)) | (1L << (DAYNAME - 708)) | (1L << (DAYOFMONTH - 708)) | (1L << (DAYOFWEEK - 708)) | (1L << (DAYOFYEAR - 708)) | (1L << (DECODE - 708)) | (1L << (DEGREES - 708)) | (1L << (DES_DECRYPT - 708)) | (1L << (DES_ENCRYPT - 708)) | (1L << (DIMENSION - 708)) | (1L << (DISJOINT - 708)) | (1L << (ELT - 708)) | (1L << (ENCODE - 708)) | (1L << (ENCRYPT - 708)) | (1L << (ENDPOINT - 708)) | (1L << (ENVELOPE - 708)) | (1L << (EQUALS - 708)) | (1L << (EXP - 708)) | (1L << (EXPORT_SET - 708)) | (1L << (EXTERIORRING - 708)) | (1L << (EXTRACTVALUE - 708)) | (1L << (FIELD - 708)) | (1L << (FIND_IN_SET - 708)) | (1L << (FLOOR - 708)) | (1L << (FORMAT - 708)) | (1L << (FOUND_ROWS - 708)) | (1L << (FROM_BASE64 - 708)) | (1L << (FROM_DAYS - 708)) | (1L << (FROM_UNIXTIME - 708)) | (1L << (GEOMCOLLFROMTEXT - 708)) | (1L << (GEOMCOLLFROMWKB - 708)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 708)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 708)) | (1L << (GEOMETRYFROMTEXT - 708)) | (1L << (GEOMETRYFROMWKB - 708)) | (1L << (GEOMETRYN - 708)) | (1L << (GEOMETRYTYPE - 708)) | (1L << (GEOMFROMTEXT - 708)) | (1L << (GEOMFROMWKB - 708)) | (1L << (GET_FORMAT - 708)) | (1L << (GET_LOCK - 708)) | (1L << (GLENGTH - 708)) | (1L << (GREATEST - 708)) | (1L << (GTID_SUBSET - 708)) | (1L << (GTID_SUBTRACT - 708)) | (1L << (HEX - 708)) | (1L << (IFNULL - 708)) | (1L << (INET6_ATON - 708)) | (1L << (INET6_NTOA - 708)) | (1L << (INET_ATON - 708)) | (1L << (INET_NTOA - 708)) | (1L << (INSTR - 708)) | (1L << (INTERIORRINGN - 708)) | (1L << (INTERSECTS - 708)) | (1L << (ISCLOSED - 708)) | (1L << (ISEMPTY - 708)) | (1L << (ISNULL - 708)) | (1L << (ISSIMPLE - 708)) | (1L << (IS_FREE_LOCK - 708)) | (1L << (IS_IPV4 - 708)))) != 0) || ((((_la - 772)) & ~0x3f) == 0 && ((1L << (_la - 772)) & ((1L << (IS_IPV4_COMPAT - 772)) | (1L << (IS_IPV4_MAPPED - 772)) | (1L << (IS_IPV6 - 772)) | (1L << (IS_USED_LOCK - 772)) | (1L << (LAST_INSERT_ID - 772)) | (1L << (LCASE - 772)) | (1L << (LEAST - 772)) | (1L << (LENGTH - 772)) | (1L << (LINEFROMTEXT - 772)) | (1L << (LINEFROMWKB - 772)) | (1L << (LINESTRINGFROMTEXT - 772)) | (1L << (LINESTRINGFROMWKB - 772)) | (1L << (LN - 772)) | (1L << (LOAD_FILE - 772)) | (1L << (LOCATE - 772)) | (1L << (LOG - 772)) | (1L << (LOG10 - 772)) | (1L << (LOG2 - 772)) | (1L << (LOWER - 772)) | (1L << (LPAD - 772)) | (1L << (LTRIM - 772)) | (1L << (MAKEDATE - 772)) | (1L << (MAKETIME - 772)) | (1L << (MAKE_SET - 772)) | (1L << (MASTER_POS_WAIT - 772)) | (1L << (MBRCONTAINS - 772)) | (1L << (MBRDISJOINT - 772)) | (1L << (MBREQUAL - 772)) | (1L << (MBRINTERSECTS - 772)) | (1L << (MBROVERLAPS - 772)) | (1L << (MBRTOUCHES - 772)) | (1L << (MBRWITHIN - 772)) | (1L << (MD5 - 772)) | (1L << (MLINEFROMTEXT - 772)) | (1L << (MLINEFROMWKB - 772)) | (1L << (MONTHNAME - 772)) | (1L << (MPOINTFROMTEXT - 772)) | (1L << (MPOINTFROMWKB - 772)) | (1L << (MPOLYFROMTEXT - 772)) | (1L << (MPOLYFROMWKB - 772)) | (1L << (MULTILINESTRINGFROMTEXT - 772)) | (1L << (MULTILINESTRINGFROMWKB - 772)) | (1L << (MULTIPOINTFROMTEXT - 772)) | (1L << (MULTIPOINTFROMWKB - 772)) | (1L << (MULTIPOLYGONFROMTEXT - 772)) | (1L << (MULTIPOLYGONFROMWKB - 772)) | (1L << (NAME_CONST - 772)) | (1L << (NULLIF - 772)) | (1L << (NUMGEOMETRIES - 772)) | (1L << (NUMINTERIORRINGS - 772)) | (1L << (NUMPOINTS - 772)) | (1L << (OCT - 772)) | (1L << (OCTET_LENGTH - 772)) | (1L << (ORD - 772)) | (1L << (OVERLAPS - 772)) | (1L << (PERIOD_ADD - 772)) | (1L << (PERIOD_DIFF - 772)) | (1L << (PI - 772)) | (1L << (POINTFROMTEXT - 772)) | (1L << (POINTFROMWKB - 772)) | (1L << (POINTN - 772)) | (1L << (POLYFROMTEXT - 772)) | (1L << (POLYFROMWKB - 772)) | (1L << (POLYGONFROMTEXT - 772)))) != 0) || ((((_la - 836)) & ~0x3f) == 0 && ((1L << (_la - 836)) & ((1L << (POLYGONFROMWKB - 836)) | (1L << (POW - 836)) | (1L << (POWER - 836)) | (1L << (QUOTE - 836)) | (1L << (RADIANS - 836)) | (1L << (RAND - 836)) | (1L << (RANDOM_BYTES - 836)) | (1L << (RELEASE_LOCK - 836)) | (1L << (REVERSE - 836)) | (1L << (ROUND - 836)) | (1L << (ROW_COUNT - 836)) | (1L << (RPAD - 836)) | (1L << (RTRIM - 836)) | (1L << (SEC_TO_TIME - 836)) | (1L << (SESSION_USER - 836)) | (1L << (SHA - 836)) | (1L << (SHA1 - 836)) | (1L << (SHA2 - 836)) | (1L << (SCHEMA_NAME - 836)) | (1L << (SIGN - 836)) | (1L << (SIN - 836)) | (1L << (SLEEP - 836)) | (1L << (SOUNDEX - 836)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 836)) | (1L << (SQRT - 836)) | (1L << (SRID - 836)) | (1L << (STARTPOINT - 836)) | (1L << (STRCMP - 836)) | (1L << (STR_TO_DATE - 836)) | (1L << (ST_AREA - 836)) | (1L << (ST_ASBINARY - 836)) | (1L << (ST_ASTEXT - 836)) | (1L << (ST_ASWKB - 836)) | (1L << (ST_ASWKT - 836)) | (1L << (ST_BUFFER - 836)) | (1L << (ST_CENTROID - 836)) | (1L << (ST_CONTAINS - 836)) | (1L << (ST_CROSSES - 836)) | (1L << (ST_DIFFERENCE - 836)) | (1L << (ST_DIMENSION - 836)) | (1L << (ST_DISJOINT - 836)) | (1L << (ST_DISTANCE - 836)) | (1L << (ST_ENDPOINT - 836)) | (1L << (ST_ENVELOPE - 836)) | (1L << (ST_EQUALS - 836)) | (1L << (ST_EXTERIORRING - 836)) | (1L << (ST_GEOMCOLLFROMTEXT - 836)) | (1L << (ST_GEOMCOLLFROMTXT - 836)) | (1L << (ST_GEOMCOLLFROMWKB - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 836)) | (1L << (ST_GEOMETRYFROMTEXT - 836)) | (1L << (ST_GEOMETRYFROMWKB - 836)) | (1L << (ST_GEOMETRYN - 836)) | (1L << (ST_GEOMETRYTYPE - 836)) | (1L << (ST_GEOMFROMTEXT - 836)) | (1L << (ST_GEOMFROMWKB - 836)) | (1L << (ST_INTERIORRINGN - 836)) | (1L << (ST_INTERSECTION - 836)) | (1L << (ST_INTERSECTS - 836)) | (1L << (ST_ISCLOSED - 836)) | (1L << (ST_ISEMPTY - 836)) | (1L << (ST_ISSIMPLE - 836)) | (1L << (ST_LINEFROMTEXT - 836)))) != 0) || ((((_la - 900)) & ~0x3f) == 0 && ((1L << (_la - 900)) & ((1L << (ST_LINEFROMWKB - 900)) | (1L << (ST_LINESTRINGFROMTEXT - 900)) | (1L << (ST_LINESTRINGFROMWKB - 900)) | (1L << (ST_NUMGEOMETRIES - 900)) | (1L << (ST_NUMINTERIORRING - 900)) | (1L << (ST_NUMINTERIORRINGS - 900)) | (1L << (ST_NUMPOINTS - 900)) | (1L << (ST_OVERLAPS - 900)) | (1L << (ST_POINTFROMTEXT - 900)) | (1L << (ST_POINTFROMWKB - 900)) | (1L << (ST_POINTN - 900)) | (1L << (ST_POLYFROMTEXT - 900)) | (1L << (ST_POLYFROMWKB - 900)) | (1L << (ST_POLYGONFROMTEXT - 900)) | (1L << (ST_POLYGONFROMWKB - 900)) | (1L << (ST_SRID - 900)) | (1L << (ST_STARTPOINT - 900)) | (1L << (ST_SYMDIFFERENCE - 900)) | (1L << (ST_TOUCHES - 900)) | (1L << (ST_UNION - 900)) | (1L << (ST_WITHIN - 900)) | (1L << (ST_X - 900)) | (1L << (ST_Y - 900)) | (1L << (SUBDATE - 900)) | (1L << (SUBSTRING_INDEX - 900)) | (1L << (SUBTIME - 900)) | (1L << (SYSTEM_USER - 900)) | (1L << (TAN - 900)) | (1L << (TIMEDIFF - 900)) | (1L << (TIMESTAMPADD - 900)) | (1L << (TIMESTAMPDIFF - 900)) | (1L << (TIME_FORMAT - 900)) | (1L << (TIME_TO_SEC - 900)) | (1L << (TOUCHES - 900)) | (1L << (TO_BASE64 - 900)) | (1L << (TO_DAYS - 900)) | (1L << (TO_SECONDS - 900)) | (1L << (UCASE - 900)) | (1L << (UNCOMPRESS - 900)) | (1L << (UNCOMPRESSED_LENGTH - 900)) | (1L << (UNHEX - 900)) | (1L << (UNIX_TIMESTAMP - 900)) | (1L << (UPDATEXML - 900)) | (1L << (UPPER - 900)) | (1L << (UUID - 900)) | (1L << (UUID_SHORT - 900)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 900)) | (1L << (VERSION - 900)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 900)) | (1L << (WEEKDAY - 900)) | (1L << (WEEKOFYEAR - 900)) | (1L << (WEIGHT_STRING - 900)) | (1L << (WITHIN - 900)) | (1L << (YEARWEEK - 900)) | (1L << (Y_FUNCTION - 900)) | (1L << (X_FUNCTION - 900)))) != 0) || ((((_la - 994)) & ~0x3f) == 0 && ((1L << (_la - 994)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 994)) | (1L << (STRING_LITERAL - 994)) | (1L << (ID - 994)) | (1L << (REVERSE_QUOTE_ID - 994)))) != 0))
                                {
                                    {
                                        State = 2300; ((AlterByAddPrimaryKeyContext)_localctx).name = uid();
                                    }
                                }

                            }
                        }

                        State = 2305; Match(PRIMARY);
                        State = 2306; Match(KEY);
                        State = 2308;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == USING)
                        {
                            {
                                State = 2307; indexType();
                            }
                        }

                        State = 2310; indexColumnNames();
                        State = 2314;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        while (_la == USING || _la == WITH || _la == COMMENT || _la == INVISIBLE || _la == KEY_BLOCK_SIZE || _la == VISIBLE)
                        {
                            {
                                {
                                    State = 2311; indexOption();
                                }
                            }
                            State = 2316;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                        }
                    }
                    break;
                case 6:
                    _localctx = new AlterByAddUniqueKeyContext(_localctx);
                    EnterOuterAlt(_localctx, 6);
                    {
                        State = 2317; Match(ADD);
                        State = 2322;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == CONSTRAINT)
                        {
                            {
                                State = 2318; Match(CONSTRAINT);
                                State = 2320;
                                ErrorHandler.Sync(this);
                                _la = TokenStream.LA(1);
                                if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)) | (1L << (POSITION - 191)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ACCOUNT - 259)) | (1L << (ACTION - 259)) | (1L << (AFTER - 259)) | (1L << (AGGREGATE - 259)) | (1L << (ALGORITHM - 259)) | (1L << (ANY - 259)) | (1L << (AT - 259)) | (1L << (AUTHORS - 259)) | (1L << (AUTOCOMMIT - 259)) | (1L << (AUTOEXTEND_SIZE - 259)) | (1L << (AUTO_INCREMENT - 259)) | (1L << (AVG_ROW_LENGTH - 259)) | (1L << (BEGIN - 259)) | (1L << (BINLOG - 259)) | (1L << (BIT - 259)) | (1L << (BLOCK - 259)) | (1L << (BOOL - 259)) | (1L << (BOOLEAN - 259)) | (1L << (BTREE - 259)) | (1L << (CACHE - 259)) | (1L << (CASCADED - 259)) | (1L << (CHAIN - 259)) | (1L << (CHANGED - 259)) | (1L << (CHANNEL - 259)) | (1L << (CHECKSUM - 259)) | (1L << (PAGE_CHECKSUM - 259)) | (1L << (CIPHER - 259)) | (1L << (CLASS_ORIGIN - 259)) | (1L << (CLIENT - 259)) | (1L << (CLOSE - 259)) | (1L << (COALESCE - 259)) | (1L << (CODE - 259)) | (1L << (COLUMNS - 259)) | (1L << (COLUMN_FORMAT - 259)) | (1L << (COLUMN_NAME - 259)) | (1L << (COMMENT - 259)) | (1L << (COMMIT - 259)) | (1L << (COMPACT - 259)) | (1L << (COMPLETION - 259)) | (1L << (COMPRESSED - 259)) | (1L << (COMPRESSION - 259)) | (1L << (CONCURRENT - 259)) | (1L << (CONNECTION - 259)) | (1L << (CONSISTENT - 259)) | (1L << (CONSTRAINT_CATALOG - 259)) | (1L << (CONSTRAINT_SCHEMA - 259)) | (1L << (CONSTRAINT_NAME - 259)) | (1L << (CONTAINS - 259)) | (1L << (CONTEXT - 259)) | (1L << (CONTRIBUTORS - 259)) | (1L << (COPY - 259)) | (1L << (CPU - 259)) | (1L << (CURSOR_NAME - 259)) | (1L << (DATA - 259)) | (1L << (DATAFILE - 259)) | (1L << (DEALLOCATE - 259)) | (1L << (DEFAULT_AUTH - 259)) | (1L << (DEFINER - 259)) | (1L << (DELAY_KEY_WRITE - 259)) | (1L << (DES_KEY_FILE - 259)) | (1L << (DIRECTORY - 259)) | (1L << (DISABLE - 259)) | (1L << (DISCARD - 259)) | (1L << (DISK - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (DO - 323)) | (1L << (DUMPFILE - 323)) | (1L << (DUPLICATE - 323)) | (1L << (DYNAMIC - 323)) | (1L << (ENABLE - 323)) | (1L << (ENCRYPTION - 323)) | (1L << (END - 323)) | (1L << (ENDS - 323)) | (1L << (ENGINE - 323)) | (1L << (ENGINES - 323)) | (1L << (ERROR - 323)) | (1L << (ERRORS - 323)) | (1L << (ESCAPE - 323)) | (1L << (EVEN - 323)) | (1L << (EVENT - 323)) | (1L << (EVENTS - 323)) | (1L << (EVERY - 323)) | (1L << (EXCHANGE - 323)) | (1L << (EXCLUSIVE - 323)) | (1L << (EXPIRE - 323)) | (1L << (EXPORT - 323)) | (1L << (EXTENDED - 323)) | (1L << (EXTENT_SIZE - 323)) | (1L << (FAST - 323)) | (1L << (FAULTS - 323)) | (1L << (FIELDS - 323)) | (1L << (FILE_BLOCK_SIZE - 323)) | (1L << (FILTER - 323)) | (1L << (FIRST - 323)) | (1L << (FIXED - 323)) | (1L << (FLUSH - 323)) | (1L << (FOLLOWS - 323)) | (1L << (FOUND - 323)) | (1L << (FULL - 323)) | (1L << (FUNCTION - 323)) | (1L << (GENERAL - 323)) | (1L << (GLOBAL - 323)) | (1L << (GRANTS - 323)) | (1L << (GROUP_REPLICATION - 323)) | (1L << (HANDLER - 323)) | (1L << (HASH - 323)) | (1L << (HELP - 323)) | (1L << (HOST - 323)) | (1L << (HOSTS - 323)) | (1L << (IDENTIFIED - 323)) | (1L << (IGNORE_SERVER_IDS - 323)) | (1L << (IMPORT - 323)) | (1L << (INDEXES - 323)) | (1L << (INITIAL_SIZE - 323)) | (1L << (INPLACE - 323)) | (1L << (INSERT_METHOD - 323)) | (1L << (INSTALL - 323)) | (1L << (INSTANCE - 323)) | (1L << (INVISIBLE - 323)) | (1L << (INVOKER - 323)) | (1L << (IO - 323)) | (1L << (IO_THREAD - 323)) | (1L << (IPC - 323)) | (1L << (ISOLATION - 323)) | (1L << (ISSUER - 323)) | (1L << (JSON - 323)) | (1L << (KEY_BLOCK_SIZE - 323)) | (1L << (LANGUAGE - 323)) | (1L << (LAST - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (LEAVES - 387)) | (1L << (LESS - 387)) | (1L << (LEVEL - 387)) | (1L << (LIST - 387)) | (1L << (LOCAL - 387)) | (1L << (LOGFILE - 387)) | (1L << (LOGS - 387)) | (1L << (MASTER - 387)) | (1L << (MASTER_AUTO_POSITION - 387)) | (1L << (MASTER_CONNECT_RETRY - 387)) | (1L << (MASTER_DELAY - 387)) | (1L << (MASTER_HEARTBEAT_PERIOD - 387)) | (1L << (MASTER_HOST - 387)) | (1L << (MASTER_LOG_FILE - 387)) | (1L << (MASTER_LOG_POS - 387)) | (1L << (MASTER_PASSWORD - 387)) | (1L << (MASTER_PORT - 387)) | (1L << (MASTER_RETRY_COUNT - 387)) | (1L << (MASTER_SSL - 387)) | (1L << (MASTER_SSL_CA - 387)) | (1L << (MASTER_SSL_CAPATH - 387)) | (1L << (MASTER_SSL_CERT - 387)) | (1L << (MASTER_SSL_CIPHER - 387)) | (1L << (MASTER_SSL_CRL - 387)) | (1L << (MASTER_SSL_CRLPATH - 387)) | (1L << (MASTER_SSL_KEY - 387)) | (1L << (MASTER_TLS_VERSION - 387)) | (1L << (MASTER_USER - 387)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 387)) | (1L << (MAX_QUERIES_PER_HOUR - 387)) | (1L << (MAX_ROWS - 387)) | (1L << (MAX_SIZE - 387)) | (1L << (MAX_UPDATES_PER_HOUR - 387)) | (1L << (MAX_USER_CONNECTIONS - 387)) | (1L << (MEDIUM - 387)) | (1L << (MERGE - 387)) | (1L << (MESSAGE_TEXT - 387)) | (1L << (MID - 387)) | (1L << (MIGRATE - 387)) | (1L << (MIN_ROWS - 387)) | (1L << (MODE - 387)) | (1L << (MODIFY - 387)) | (1L << (MUTEX - 387)) | (1L << (MYSQL - 387)) | (1L << (MYSQL_ERRNO - 387)) | (1L << (NAME - 387)) | (1L << (NAMES - 387)) | (1L << (NCHAR - 387)) | (1L << (NEVER - 387)) | (1L << (NEXT - 387)) | (1L << (NO - 387)) | (1L << (NODEGROUP - 387)) | (1L << (NONE - 387)) | (1L << (OFFLINE - 387)) | (1L << (OFFSET - 387)) | (1L << (OJ - 387)) | (1L << (OLD_PASSWORD - 387)) | (1L << (ONE - 387)) | (1L << (ONLINE - 387)) | (1L << (ONLY - 387)) | (1L << (OPEN - 387)) | (1L << (OPTIMIZER_COSTS - 387)) | (1L << (OPTIONS - 387)) | (1L << (OWNER - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PAGE - 451)) | (1L << (PARSER - 451)) | (1L << (PARTIAL - 451)) | (1L << (PARTITIONING - 451)) | (1L << (PARTITIONS - 451)) | (1L << (PASSWORD - 451)) | (1L << (PHASE - 451)) | (1L << (PLUGIN - 451)) | (1L << (PLUGIN_DIR - 451)) | (1L << (PLUGINS - 451)) | (1L << (PORT - 451)) | (1L << (PRECEDES - 451)) | (1L << (PREPARE - 451)) | (1L << (PRESERVE - 451)) | (1L << (PREV - 451)) | (1L << (PROCESSLIST - 451)) | (1L << (PROFILE - 451)) | (1L << (PROFILES - 451)) | (1L << (PROXY - 451)) | (1L << (QUERY - 451)) | (1L << (QUICK - 451)) | (1L << (REBUILD - 451)) | (1L << (RECOVER - 451)) | (1L << (REDO_BUFFER_SIZE - 451)) | (1L << (REDUNDANT - 451)) | (1L << (RELAY - 451)) | (1L << (RELAY_LOG_FILE - 451)) | (1L << (RELAY_LOG_POS - 451)) | (1L << (RELAYLOG - 451)) | (1L << (REMOVE - 451)) | (1L << (REORGANIZE - 451)) | (1L << (REPAIR - 451)) | (1L << (REPLICATE_DO_DB - 451)) | (1L << (REPLICATE_DO_TABLE - 451)) | (1L << (REPLICATE_IGNORE_DB - 451)) | (1L << (REPLICATE_IGNORE_TABLE - 451)) | (1L << (REPLICATE_REWRITE_DB - 451)) | (1L << (REPLICATE_WILD_DO_TABLE - 451)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 451)) | (1L << (REPLICATION - 451)) | (1L << (RESET - 451)) | (1L << (RESUME - 451)) | (1L << (RETURNED_SQLSTATE - 451)) | (1L << (RETURNS - 451)) | (1L << (ROLLBACK - 451)) | (1L << (ROLLUP - 451)) | (1L << (ROTATE - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (ROW_FORMAT - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SCHEDULE - 451)) | (1L << (SECURITY - 451)) | (1L << (SERVER - 451)) | (1L << (SESSION - 451)) | (1L << (SHARE - 451)) | (1L << (SHARED - 451)) | (1L << (SIGNED - 451)) | (1L << (SIMPLE - 451)) | (1L << (SLAVE - 451)) | (1L << (SLOW - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOCKET - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SOME - 515)) | (1L << (SONAME - 515)) | (1L << (SOUNDS - 515)) | (1L << (SOURCE - 515)) | (1L << (SQL_AFTER_GTIDS - 515)) | (1L << (SQL_AFTER_MTS_GAPS - 515)) | (1L << (SQL_BEFORE_GTIDS - 515)) | (1L << (SQL_BUFFER_RESULT - 515)) | (1L << (SQL_CACHE - 515)) | (1L << (SQL_NO_CACHE - 515)) | (1L << (SQL_THREAD - 515)) | (1L << (START - 515)) | (1L << (STARTS - 515)) | (1L << (STATS_AUTO_RECALC - 515)) | (1L << (STATS_PERSISTENT - 515)) | (1L << (STATS_SAMPLE_PAGES - 515)) | (1L << (STATUS - 515)) | (1L << (STOP - 515)) | (1L << (STORAGE - 515)) | (1L << (STRING - 515)) | (1L << (SUBCLASS_ORIGIN - 515)) | (1L << (SUBJECT - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBPARTITIONS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SWAPS - 515)) | (1L << (SWITCHES - 515)) | (1L << (TABLE_NAME - 515)) | (1L << (TABLESPACE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TEMPTABLE - 515)) | (1L << (THAN - 515)) | (1L << (TRADITIONAL - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRIGGERS - 515)) | (1L << (TRUNCATE - 515)) | (1L << (UNDEFINED - 515)) | (1L << (UNDOFILE - 515)) | (1L << (UNDO_BUFFER_SIZE - 515)) | (1L << (UNINSTALL - 515)) | (1L << (UNKNOWN - 515)) | (1L << (UNTIL - 515)) | (1L << (UPGRADE - 515)) | (1L << (USER - 515)) | (1L << (USE_FRM - 515)) | (1L << (USER_RESOURCES - 515)) | (1L << (VALIDATION - 515)) | (1L << (VALUE - 515)) | (1L << (VARIABLES - 515)) | (1L << (VIEW - 515)) | (1L << (VISIBLE - 515)) | (1L << (WAIT - 515)) | (1L << (WARNINGS - 515)) | (1L << (WITHOUT - 515)) | (1L << (WORK - 515)) | (1L << (WRAPPER - 515)) | (1L << (X509 - 515)) | (1L << (XA - 515)) | (1L << (XML - 515)))) != 0) || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (INTERNAL - 580)) | (1L << (QUARTER - 580)) | (1L << (MONTH - 580)) | (1L << (DAY - 580)) | (1L << (HOUR - 580)) | (1L << (MINUTE - 580)) | (1L << (WEEK - 580)) | (1L << (SECOND - 580)) | (1L << (MICROSECOND - 580)) | (1L << (TABLES - 580)) | (1L << (ROUTINE - 580)) | (1L << (EXECUTE - 580)) | (1L << (FILE - 580)) | (1L << (PROCESS - 580)) | (1L << (RELOAD - 580)) | (1L << (SHUTDOWN - 580)) | (1L << (SUPER - 580)) | (1L << (PRIVILEGES - 580)) | (1L << (SESSION_VARIABLES_ADMIN - 580)) | (1L << (ARMSCII8 - 580)) | (1L << (ASCII - 580)) | (1L << (BIG5 - 580)) | (1L << (CP1250 - 580)) | (1L << (CP1251 - 580)) | (1L << (CP1256 - 580)) | (1L << (CP1257 - 580)) | (1L << (CP850 - 580)) | (1L << (CP852 - 580)) | (1L << (CP866 - 580)) | (1L << (CP932 - 580)) | (1L << (DEC8 - 580)) | (1L << (EUCJPMS - 580)) | (1L << (EUCKR - 580)) | (1L << (GB2312 - 580)) | (1L << (GBK - 580)) | (1L << (GEOSTD8 - 580)) | (1L << (GREEK - 580)) | (1L << (HEBREW - 580)) | (1L << (HP8 - 580)) | (1L << (KEYBCS2 - 580)) | (1L << (KOI8R - 580)) | (1L << (KOI8U - 580)) | (1L << (LATIN1 - 580)) | (1L << (LATIN2 - 580)) | (1L << (LATIN5 - 580)) | (1L << (LATIN7 - 580)) | (1L << (MACCE - 580)) | (1L << (MACROMAN - 580)) | (1L << (SJIS - 580)) | (1L << (SWE7 - 580)) | (1L << (TIS620 - 580)) | (1L << (UCS2 - 580)) | (1L << (UJIS - 580)) | (1L << (UTF16 - 580)) | (1L << (UTF16LE - 580)) | (1L << (UTF32 - 580)) | (1L << (UTF8 - 580)) | (1L << (UTF8MB3 - 580)) | (1L << (UTF8MB4 - 580)) | (1L << (ARCHIVE - 580)) | (1L << (BLACKHOLE - 580)) | (1L << (CSV - 580)) | (1L << (FEDERATED - 580)) | (1L << (INNODB - 580)))) != 0) || ((((_la - 644)) & ~0x3f) == 0 && ((1L << (_la - 644)) & ((1L << (MEMORY - 644)) | (1L << (MRG_MYISAM - 644)) | (1L << (MYISAM - 644)) | (1L << (NDB - 644)) | (1L << (NDBCLUSTER - 644)) | (1L << (PERFORMANCE_SCHEMA - 644)) | (1L << (TOKUDB - 644)) | (1L << (REPEATABLE - 644)) | (1L << (COMMITTED - 644)) | (1L << (UNCOMMITTED - 644)) | (1L << (SERIALIZABLE - 644)) | (1L << (GEOMETRYCOLLECTION - 644)) | (1L << (LINESTRING - 644)) | (1L << (MULTILINESTRING - 644)) | (1L << (MULTIPOINT - 644)) | (1L << (MULTIPOLYGON - 644)) | (1L << (POINT - 644)) | (1L << (POLYGON - 644)) | (1L << (ABS - 644)) | (1L << (ACOS - 644)) | (1L << (ADDDATE - 644)) | (1L << (ADDTIME - 644)) | (1L << (AES_DECRYPT - 644)) | (1L << (AES_ENCRYPT - 644)) | (1L << (AREA - 644)) | (1L << (ASBINARY - 644)) | (1L << (ASIN - 644)) | (1L << (ASTEXT - 644)) | (1L << (ASWKB - 644)) | (1L << (ASWKT - 644)) | (1L << (ASYMMETRIC_DECRYPT - 644)) | (1L << (ASYMMETRIC_DERIVE - 644)) | (1L << (ASYMMETRIC_ENCRYPT - 644)) | (1L << (ASYMMETRIC_SIGN - 644)) | (1L << (ASYMMETRIC_VERIFY - 644)) | (1L << (ATAN - 644)) | (1L << (ATAN2 - 644)) | (1L << (BENCHMARK - 644)) | (1L << (BIN - 644)) | (1L << (BIT_COUNT - 644)) | (1L << (BIT_LENGTH - 644)) | (1L << (BUFFER - 644)) | (1L << (CATALOG_NAME - 644)) | (1L << (CEIL - 644)) | (1L << (CEILING - 644)) | (1L << (CENTROID - 644)) | (1L << (CHARACTER_LENGTH - 644)) | (1L << (CHARSET - 644)) | (1L << (CHAR_LENGTH - 644)) | (1L << (COERCIBILITY - 644)) | (1L << (COLLATION - 644)) | (1L << (COMPRESS - 644)) | (1L << (CONCAT - 644)) | (1L << (CONCAT_WS - 644)) | (1L << (CONNECTION_ID - 644)) | (1L << (CONV - 644)) | (1L << (CONVERT_TZ - 644)) | (1L << (COS - 644)) | (1L << (COT - 644)) | (1L << (CRC32 - 644)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 644)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 644)))) != 0) || ((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (CREATE_DH_PARAMETERS - 708)) | (1L << (CREATE_DIGEST - 708)) | (1L << (CROSSES - 708)) | (1L << (DATEDIFF - 708)) | (1L << (DATE_FORMAT - 708)) | (1L << (DAYNAME - 708)) | (1L << (DAYOFMONTH - 708)) | (1L << (DAYOFWEEK - 708)) | (1L << (DAYOFYEAR - 708)) | (1L << (DECODE - 708)) | (1L << (DEGREES - 708)) | (1L << (DES_DECRYPT - 708)) | (1L << (DES_ENCRYPT - 708)) | (1L << (DIMENSION - 708)) | (1L << (DISJOINT - 708)) | (1L << (ELT - 708)) | (1L << (ENCODE - 708)) | (1L << (ENCRYPT - 708)) | (1L << (ENDPOINT - 708)) | (1L << (ENVELOPE - 708)) | (1L << (EQUALS - 708)) | (1L << (EXP - 708)) | (1L << (EXPORT_SET - 708)) | (1L << (EXTERIORRING - 708)) | (1L << (EXTRACTVALUE - 708)) | (1L << (FIELD - 708)) | (1L << (FIND_IN_SET - 708)) | (1L << (FLOOR - 708)) | (1L << (FORMAT - 708)) | (1L << (FOUND_ROWS - 708)) | (1L << (FROM_BASE64 - 708)) | (1L << (FROM_DAYS - 708)) | (1L << (FROM_UNIXTIME - 708)) | (1L << (GEOMCOLLFROMTEXT - 708)) | (1L << (GEOMCOLLFROMWKB - 708)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 708)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 708)) | (1L << (GEOMETRYFROMTEXT - 708)) | (1L << (GEOMETRYFROMWKB - 708)) | (1L << (GEOMETRYN - 708)) | (1L << (GEOMETRYTYPE - 708)) | (1L << (GEOMFROMTEXT - 708)) | (1L << (GEOMFROMWKB - 708)) | (1L << (GET_FORMAT - 708)) | (1L << (GET_LOCK - 708)) | (1L << (GLENGTH - 708)) | (1L << (GREATEST - 708)) | (1L << (GTID_SUBSET - 708)) | (1L << (GTID_SUBTRACT - 708)) | (1L << (HEX - 708)) | (1L << (IFNULL - 708)) | (1L << (INET6_ATON - 708)) | (1L << (INET6_NTOA - 708)) | (1L << (INET_ATON - 708)) | (1L << (INET_NTOA - 708)) | (1L << (INSTR - 708)) | (1L << (INTERIORRINGN - 708)) | (1L << (INTERSECTS - 708)) | (1L << (ISCLOSED - 708)) | (1L << (ISEMPTY - 708)) | (1L << (ISNULL - 708)) | (1L << (ISSIMPLE - 708)) | (1L << (IS_FREE_LOCK - 708)) | (1L << (IS_IPV4 - 708)))) != 0) || ((((_la - 772)) & ~0x3f) == 0 && ((1L << (_la - 772)) & ((1L << (IS_IPV4_COMPAT - 772)) | (1L << (IS_IPV4_MAPPED - 772)) | (1L << (IS_IPV6 - 772)) | (1L << (IS_USED_LOCK - 772)) | (1L << (LAST_INSERT_ID - 772)) | (1L << (LCASE - 772)) | (1L << (LEAST - 772)) | (1L << (LENGTH - 772)) | (1L << (LINEFROMTEXT - 772)) | (1L << (LINEFROMWKB - 772)) | (1L << (LINESTRINGFROMTEXT - 772)) | (1L << (LINESTRINGFROMWKB - 772)) | (1L << (LN - 772)) | (1L << (LOAD_FILE - 772)) | (1L << (LOCATE - 772)) | (1L << (LOG - 772)) | (1L << (LOG10 - 772)) | (1L << (LOG2 - 772)) | (1L << (LOWER - 772)) | (1L << (LPAD - 772)) | (1L << (LTRIM - 772)) | (1L << (MAKEDATE - 772)) | (1L << (MAKETIME - 772)) | (1L << (MAKE_SET - 772)) | (1L << (MASTER_POS_WAIT - 772)) | (1L << (MBRCONTAINS - 772)) | (1L << (MBRDISJOINT - 772)) | (1L << (MBREQUAL - 772)) | (1L << (MBRINTERSECTS - 772)) | (1L << (MBROVERLAPS - 772)) | (1L << (MBRTOUCHES - 772)) | (1L << (MBRWITHIN - 772)) | (1L << (MD5 - 772)) | (1L << (MLINEFROMTEXT - 772)) | (1L << (MLINEFROMWKB - 772)) | (1L << (MONTHNAME - 772)) | (1L << (MPOINTFROMTEXT - 772)) | (1L << (MPOINTFROMWKB - 772)) | (1L << (MPOLYFROMTEXT - 772)) | (1L << (MPOLYFROMWKB - 772)) | (1L << (MULTILINESTRINGFROMTEXT - 772)) | (1L << (MULTILINESTRINGFROMWKB - 772)) | (1L << (MULTIPOINTFROMTEXT - 772)) | (1L << (MULTIPOINTFROMWKB - 772)) | (1L << (MULTIPOLYGONFROMTEXT - 772)) | (1L << (MULTIPOLYGONFROMWKB - 772)) | (1L << (NAME_CONST - 772)) | (1L << (NULLIF - 772)) | (1L << (NUMGEOMETRIES - 772)) | (1L << (NUMINTERIORRINGS - 772)) | (1L << (NUMPOINTS - 772)) | (1L << (OCT - 772)) | (1L << (OCTET_LENGTH - 772)) | (1L << (ORD - 772)) | (1L << (OVERLAPS - 772)) | (1L << (PERIOD_ADD - 772)) | (1L << (PERIOD_DIFF - 772)) | (1L << (PI - 772)) | (1L << (POINTFROMTEXT - 772)) | (1L << (POINTFROMWKB - 772)) | (1L << (POINTN - 772)) | (1L << (POLYFROMTEXT - 772)) | (1L << (POLYFROMWKB - 772)) | (1L << (POLYGONFROMTEXT - 772)))) != 0) || ((((_la - 836)) & ~0x3f) == 0 && ((1L << (_la - 836)) & ((1L << (POLYGONFROMWKB - 836)) | (1L << (POW - 836)) | (1L << (POWER - 836)) | (1L << (QUOTE - 836)) | (1L << (RADIANS - 836)) | (1L << (RAND - 836)) | (1L << (RANDOM_BYTES - 836)) | (1L << (RELEASE_LOCK - 836)) | (1L << (REVERSE - 836)) | (1L << (ROUND - 836)) | (1L << (ROW_COUNT - 836)) | (1L << (RPAD - 836)) | (1L << (RTRIM - 836)) | (1L << (SEC_TO_TIME - 836)) | (1L << (SESSION_USER - 836)) | (1L << (SHA - 836)) | (1L << (SHA1 - 836)) | (1L << (SHA2 - 836)) | (1L << (SCHEMA_NAME - 836)) | (1L << (SIGN - 836)) | (1L << (SIN - 836)) | (1L << (SLEEP - 836)) | (1L << (SOUNDEX - 836)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 836)) | (1L << (SQRT - 836)) | (1L << (SRID - 836)) | (1L << (STARTPOINT - 836)) | (1L << (STRCMP - 836)) | (1L << (STR_TO_DATE - 836)) | (1L << (ST_AREA - 836)) | (1L << (ST_ASBINARY - 836)) | (1L << (ST_ASTEXT - 836)) | (1L << (ST_ASWKB - 836)) | (1L << (ST_ASWKT - 836)) | (1L << (ST_BUFFER - 836)) | (1L << (ST_CENTROID - 836)) | (1L << (ST_CONTAINS - 836)) | (1L << (ST_CROSSES - 836)) | (1L << (ST_DIFFERENCE - 836)) | (1L << (ST_DIMENSION - 836)) | (1L << (ST_DISJOINT - 836)) | (1L << (ST_DISTANCE - 836)) | (1L << (ST_ENDPOINT - 836)) | (1L << (ST_ENVELOPE - 836)) | (1L << (ST_EQUALS - 836)) | (1L << (ST_EXTERIORRING - 836)) | (1L << (ST_GEOMCOLLFROMTEXT - 836)) | (1L << (ST_GEOMCOLLFROMTXT - 836)) | (1L << (ST_GEOMCOLLFROMWKB - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 836)) | (1L << (ST_GEOMETRYFROMTEXT - 836)) | (1L << (ST_GEOMETRYFROMWKB - 836)) | (1L << (ST_GEOMETRYN - 836)) | (1L << (ST_GEOMETRYTYPE - 836)) | (1L << (ST_GEOMFROMTEXT - 836)) | (1L << (ST_GEOMFROMWKB - 836)) | (1L << (ST_INTERIORRINGN - 836)) | (1L << (ST_INTERSECTION - 836)) | (1L << (ST_INTERSECTS - 836)) | (1L << (ST_ISCLOSED - 836)) | (1L << (ST_ISEMPTY - 836)) | (1L << (ST_ISSIMPLE - 836)) | (1L << (ST_LINEFROMTEXT - 836)))) != 0) || ((((_la - 900)) & ~0x3f) == 0 && ((1L << (_la - 900)) & ((1L << (ST_LINEFROMWKB - 900)) | (1L << (ST_LINESTRINGFROMTEXT - 900)) | (1L << (ST_LINESTRINGFROMWKB - 900)) | (1L << (ST_NUMGEOMETRIES - 900)) | (1L << (ST_NUMINTERIORRING - 900)) | (1L << (ST_NUMINTERIORRINGS - 900)) | (1L << (ST_NUMPOINTS - 900)) | (1L << (ST_OVERLAPS - 900)) | (1L << (ST_POINTFROMTEXT - 900)) | (1L << (ST_POINTFROMWKB - 900)) | (1L << (ST_POINTN - 900)) | (1L << (ST_POLYFROMTEXT - 900)) | (1L << (ST_POLYFROMWKB - 900)) | (1L << (ST_POLYGONFROMTEXT - 900)) | (1L << (ST_POLYGONFROMWKB - 900)) | (1L << (ST_SRID - 900)) | (1L << (ST_STARTPOINT - 900)) | (1L << (ST_SYMDIFFERENCE - 900)) | (1L << (ST_TOUCHES - 900)) | (1L << (ST_UNION - 900)) | (1L << (ST_WITHIN - 900)) | (1L << (ST_X - 900)) | (1L << (ST_Y - 900)) | (1L << (SUBDATE - 900)) | (1L << (SUBSTRING_INDEX - 900)) | (1L << (SUBTIME - 900)) | (1L << (SYSTEM_USER - 900)) | (1L << (TAN - 900)) | (1L << (TIMEDIFF - 900)) | (1L << (TIMESTAMPADD - 900)) | (1L << (TIMESTAMPDIFF - 900)) | (1L << (TIME_FORMAT - 900)) | (1L << (TIME_TO_SEC - 900)) | (1L << (TOUCHES - 900)) | (1L << (TO_BASE64 - 900)) | (1L << (TO_DAYS - 900)) | (1L << (TO_SECONDS - 900)) | (1L << (UCASE - 900)) | (1L << (UNCOMPRESS - 900)) | (1L << (UNCOMPRESSED_LENGTH - 900)) | (1L << (UNHEX - 900)) | (1L << (UNIX_TIMESTAMP - 900)) | (1L << (UPDATEXML - 900)) | (1L << (UPPER - 900)) | (1L << (UUID - 900)) | (1L << (UUID_SHORT - 900)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 900)) | (1L << (VERSION - 900)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 900)) | (1L << (WEEKDAY - 900)) | (1L << (WEEKOFYEAR - 900)) | (1L << (WEIGHT_STRING - 900)) | (1L << (WITHIN - 900)) | (1L << (YEARWEEK - 900)) | (1L << (Y_FUNCTION - 900)) | (1L << (X_FUNCTION - 900)))) != 0) || ((((_la - 994)) & ~0x3f) == 0 && ((1L << (_la - 994)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 994)) | (1L << (STRING_LITERAL - 994)) | (1L << (ID - 994)) | (1L << (REVERSE_QUOTE_ID - 994)))) != 0))
                                {
                                    {
                                        State = 2319; ((AlterByAddUniqueKeyContext)_localctx).name = uid();
                                    }
                                }

                            }
                        }

                        State = 2324; Match(UNIQUE);
                        State = 2326;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == INDEX || _la == KEY)
                        {
                            {
                                State = 2325;
                                ((AlterByAddUniqueKeyContext)_localctx).indexFormat = TokenStream.LT(1);
                                _la = TokenStream.LA(1);
                                if (!(_la == INDEX || _la == KEY))
                                {
                                    ((AlterByAddUniqueKeyContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
                                }
                                else
                                {
                                    ErrorHandler.ReportMatch(this);
                                    Consume();
                                }
                            }
                        }

                        State = 2329;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)) | (1L << (POSITION - 191)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ACCOUNT - 259)) | (1L << (ACTION - 259)) | (1L << (AFTER - 259)) | (1L << (AGGREGATE - 259)) | (1L << (ALGORITHM - 259)) | (1L << (ANY - 259)) | (1L << (AT - 259)) | (1L << (AUTHORS - 259)) | (1L << (AUTOCOMMIT - 259)) | (1L << (AUTOEXTEND_SIZE - 259)) | (1L << (AUTO_INCREMENT - 259)) | (1L << (AVG_ROW_LENGTH - 259)) | (1L << (BEGIN - 259)) | (1L << (BINLOG - 259)) | (1L << (BIT - 259)) | (1L << (BLOCK - 259)) | (1L << (BOOL - 259)) | (1L << (BOOLEAN - 259)) | (1L << (BTREE - 259)) | (1L << (CACHE - 259)) | (1L << (CASCADED - 259)) | (1L << (CHAIN - 259)) | (1L << (CHANGED - 259)) | (1L << (CHANNEL - 259)) | (1L << (CHECKSUM - 259)) | (1L << (PAGE_CHECKSUM - 259)) | (1L << (CIPHER - 259)) | (1L << (CLASS_ORIGIN - 259)) | (1L << (CLIENT - 259)) | (1L << (CLOSE - 259)) | (1L << (COALESCE - 259)) | (1L << (CODE - 259)) | (1L << (COLUMNS - 259)) | (1L << (COLUMN_FORMAT - 259)) | (1L << (COLUMN_NAME - 259)) | (1L << (COMMENT - 259)) | (1L << (COMMIT - 259)) | (1L << (COMPACT - 259)) | (1L << (COMPLETION - 259)) | (1L << (COMPRESSED - 259)) | (1L << (COMPRESSION - 259)) | (1L << (CONCURRENT - 259)) | (1L << (CONNECTION - 259)) | (1L << (CONSISTENT - 259)) | (1L << (CONSTRAINT_CATALOG - 259)) | (1L << (CONSTRAINT_SCHEMA - 259)) | (1L << (CONSTRAINT_NAME - 259)) | (1L << (CONTAINS - 259)) | (1L << (CONTEXT - 259)) | (1L << (CONTRIBUTORS - 259)) | (1L << (COPY - 259)) | (1L << (CPU - 259)) | (1L << (CURSOR_NAME - 259)) | (1L << (DATA - 259)) | (1L << (DATAFILE - 259)) | (1L << (DEALLOCATE - 259)) | (1L << (DEFAULT_AUTH - 259)) | (1L << (DEFINER - 259)) | (1L << (DELAY_KEY_WRITE - 259)) | (1L << (DES_KEY_FILE - 259)) | (1L << (DIRECTORY - 259)) | (1L << (DISABLE - 259)) | (1L << (DISCARD - 259)) | (1L << (DISK - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (DO - 323)) | (1L << (DUMPFILE - 323)) | (1L << (DUPLICATE - 323)) | (1L << (DYNAMIC - 323)) | (1L << (ENABLE - 323)) | (1L << (ENCRYPTION - 323)) | (1L << (END - 323)) | (1L << (ENDS - 323)) | (1L << (ENGINE - 323)) | (1L << (ENGINES - 323)) | (1L << (ERROR - 323)) | (1L << (ERRORS - 323)) | (1L << (ESCAPE - 323)) | (1L << (EVEN - 323)) | (1L << (EVENT - 323)) | (1L << (EVENTS - 323)) | (1L << (EVERY - 323)) | (1L << (EXCHANGE - 323)) | (1L << (EXCLUSIVE - 323)) | (1L << (EXPIRE - 323)) | (1L << (EXPORT - 323)) | (1L << (EXTENDED - 323)) | (1L << (EXTENT_SIZE - 323)) | (1L << (FAST - 323)) | (1L << (FAULTS - 323)) | (1L << (FIELDS - 323)) | (1L << (FILE_BLOCK_SIZE - 323)) | (1L << (FILTER - 323)) | (1L << (FIRST - 323)) | (1L << (FIXED - 323)) | (1L << (FLUSH - 323)) | (1L << (FOLLOWS - 323)) | (1L << (FOUND - 323)) | (1L << (FULL - 323)) | (1L << (FUNCTION - 323)) | (1L << (GENERAL - 323)) | (1L << (GLOBAL - 323)) | (1L << (GRANTS - 323)) | (1L << (GROUP_REPLICATION - 323)) | (1L << (HANDLER - 323)) | (1L << (HASH - 323)) | (1L << (HELP - 323)) | (1L << (HOST - 323)) | (1L << (HOSTS - 323)) | (1L << (IDENTIFIED - 323)) | (1L << (IGNORE_SERVER_IDS - 323)) | (1L << (IMPORT - 323)) | (1L << (INDEXES - 323)) | (1L << (INITIAL_SIZE - 323)) | (1L << (INPLACE - 323)) | (1L << (INSERT_METHOD - 323)) | (1L << (INSTALL - 323)) | (1L << (INSTANCE - 323)) | (1L << (INVISIBLE - 323)) | (1L << (INVOKER - 323)) | (1L << (IO - 323)) | (1L << (IO_THREAD - 323)) | (1L << (IPC - 323)) | (1L << (ISOLATION - 323)) | (1L << (ISSUER - 323)) | (1L << (JSON - 323)) | (1L << (KEY_BLOCK_SIZE - 323)) | (1L << (LANGUAGE - 323)) | (1L << (LAST - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (LEAVES - 387)) | (1L << (LESS - 387)) | (1L << (LEVEL - 387)) | (1L << (LIST - 387)) | (1L << (LOCAL - 387)) | (1L << (LOGFILE - 387)) | (1L << (LOGS - 387)) | (1L << (MASTER - 387)) | (1L << (MASTER_AUTO_POSITION - 387)) | (1L << (MASTER_CONNECT_RETRY - 387)) | (1L << (MASTER_DELAY - 387)) | (1L << (MASTER_HEARTBEAT_PERIOD - 387)) | (1L << (MASTER_HOST - 387)) | (1L << (MASTER_LOG_FILE - 387)) | (1L << (MASTER_LOG_POS - 387)) | (1L << (MASTER_PASSWORD - 387)) | (1L << (MASTER_PORT - 387)) | (1L << (MASTER_RETRY_COUNT - 387)) | (1L << (MASTER_SSL - 387)) | (1L << (MASTER_SSL_CA - 387)) | (1L << (MASTER_SSL_CAPATH - 387)) | (1L << (MASTER_SSL_CERT - 387)) | (1L << (MASTER_SSL_CIPHER - 387)) | (1L << (MASTER_SSL_CRL - 387)) | (1L << (MASTER_SSL_CRLPATH - 387)) | (1L << (MASTER_SSL_KEY - 387)) | (1L << (MASTER_TLS_VERSION - 387)) | (1L << (MASTER_USER - 387)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 387)) | (1L << (MAX_QUERIES_PER_HOUR - 387)) | (1L << (MAX_ROWS - 387)) | (1L << (MAX_SIZE - 387)) | (1L << (MAX_UPDATES_PER_HOUR - 387)) | (1L << (MAX_USER_CONNECTIONS - 387)) | (1L << (MEDIUM - 387)) | (1L << (MERGE - 387)) | (1L << (MESSAGE_TEXT - 387)) | (1L << (MID - 387)) | (1L << (MIGRATE - 387)) | (1L << (MIN_ROWS - 387)) | (1L << (MODE - 387)) | (1L << (MODIFY - 387)) | (1L << (MUTEX - 387)) | (1L << (MYSQL - 387)) | (1L << (MYSQL_ERRNO - 387)) | (1L << (NAME - 387)) | (1L << (NAMES - 387)) | (1L << (NCHAR - 387)) | (1L << (NEVER - 387)) | (1L << (NEXT - 387)) | (1L << (NO - 387)) | (1L << (NODEGROUP - 387)) | (1L << (NONE - 387)) | (1L << (OFFLINE - 387)) | (1L << (OFFSET - 387)) | (1L << (OJ - 387)) | (1L << (OLD_PASSWORD - 387)) | (1L << (ONE - 387)) | (1L << (ONLINE - 387)) | (1L << (ONLY - 387)) | (1L << (OPEN - 387)) | (1L << (OPTIMIZER_COSTS - 387)) | (1L << (OPTIONS - 387)) | (1L << (OWNER - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PAGE - 451)) | (1L << (PARSER - 451)) | (1L << (PARTIAL - 451)) | (1L << (PARTITIONING - 451)) | (1L << (PARTITIONS - 451)) | (1L << (PASSWORD - 451)) | (1L << (PHASE - 451)) | (1L << (PLUGIN - 451)) | (1L << (PLUGIN_DIR - 451)) | (1L << (PLUGINS - 451)) | (1L << (PORT - 451)) | (1L << (PRECEDES - 451)) | (1L << (PREPARE - 451)) | (1L << (PRESERVE - 451)) | (1L << (PREV - 451)) | (1L << (PROCESSLIST - 451)) | (1L << (PROFILE - 451)) | (1L << (PROFILES - 451)) | (1L << (PROXY - 451)) | (1L << (QUERY - 451)) | (1L << (QUICK - 451)) | (1L << (REBUILD - 451)) | (1L << (RECOVER - 451)) | (1L << (REDO_BUFFER_SIZE - 451)) | (1L << (REDUNDANT - 451)) | (1L << (RELAY - 451)) | (1L << (RELAY_LOG_FILE - 451)) | (1L << (RELAY_LOG_POS - 451)) | (1L << (RELAYLOG - 451)) | (1L << (REMOVE - 451)) | (1L << (REORGANIZE - 451)) | (1L << (REPAIR - 451)) | (1L << (REPLICATE_DO_DB - 451)) | (1L << (REPLICATE_DO_TABLE - 451)) | (1L << (REPLICATE_IGNORE_DB - 451)) | (1L << (REPLICATE_IGNORE_TABLE - 451)) | (1L << (REPLICATE_REWRITE_DB - 451)) | (1L << (REPLICATE_WILD_DO_TABLE - 451)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 451)) | (1L << (REPLICATION - 451)) | (1L << (RESET - 451)) | (1L << (RESUME - 451)) | (1L << (RETURNED_SQLSTATE - 451)) | (1L << (RETURNS - 451)) | (1L << (ROLLBACK - 451)) | (1L << (ROLLUP - 451)) | (1L << (ROTATE - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (ROW_FORMAT - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SCHEDULE - 451)) | (1L << (SECURITY - 451)) | (1L << (SERVER - 451)) | (1L << (SESSION - 451)) | (1L << (SHARE - 451)) | (1L << (SHARED - 451)) | (1L << (SIGNED - 451)) | (1L << (SIMPLE - 451)) | (1L << (SLAVE - 451)) | (1L << (SLOW - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOCKET - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SOME - 515)) | (1L << (SONAME - 515)) | (1L << (SOUNDS - 515)) | (1L << (SOURCE - 515)) | (1L << (SQL_AFTER_GTIDS - 515)) | (1L << (SQL_AFTER_MTS_GAPS - 515)) | (1L << (SQL_BEFORE_GTIDS - 515)) | (1L << (SQL_BUFFER_RESULT - 515)) | (1L << (SQL_CACHE - 515)) | (1L << (SQL_NO_CACHE - 515)) | (1L << (SQL_THREAD - 515)) | (1L << (START - 515)) | (1L << (STARTS - 515)) | (1L << (STATS_AUTO_RECALC - 515)) | (1L << (STATS_PERSISTENT - 515)) | (1L << (STATS_SAMPLE_PAGES - 515)) | (1L << (STATUS - 515)) | (1L << (STOP - 515)) | (1L << (STORAGE - 515)) | (1L << (STRING - 515)) | (1L << (SUBCLASS_ORIGIN - 515)) | (1L << (SUBJECT - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBPARTITIONS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SWAPS - 515)) | (1L << (SWITCHES - 515)) | (1L << (TABLE_NAME - 515)) | (1L << (TABLESPACE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TEMPTABLE - 515)) | (1L << (THAN - 515)) | (1L << (TRADITIONAL - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRIGGERS - 515)) | (1L << (TRUNCATE - 515)) | (1L << (UNDEFINED - 515)) | (1L << (UNDOFILE - 515)) | (1L << (UNDO_BUFFER_SIZE - 515)) | (1L << (UNINSTALL - 515)) | (1L << (UNKNOWN - 515)) | (1L << (UNTIL - 515)) | (1L << (UPGRADE - 515)) | (1L << (USER - 515)) | (1L << (USE_FRM - 515)) | (1L << (USER_RESOURCES - 515)) | (1L << (VALIDATION - 515)) | (1L << (VALUE - 515)) | (1L << (VARIABLES - 515)) | (1L << (VIEW - 515)) | (1L << (VISIBLE - 515)) | (1L << (WAIT - 515)) | (1L << (WARNINGS - 515)) | (1L << (WITHOUT - 515)) | (1L << (WORK - 515)) | (1L << (WRAPPER - 515)) | (1L << (X509 - 515)) | (1L << (XA - 515)) | (1L << (XML - 515)))) != 0) || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (INTERNAL - 580)) | (1L << (QUARTER - 580)) | (1L << (MONTH - 580)) | (1L << (DAY - 580)) | (1L << (HOUR - 580)) | (1L << (MINUTE - 580)) | (1L << (WEEK - 580)) | (1L << (SECOND - 580)) | (1L << (MICROSECOND - 580)) | (1L << (TABLES - 580)) | (1L << (ROUTINE - 580)) | (1L << (EXECUTE - 580)) | (1L << (FILE - 580)) | (1L << (PROCESS - 580)) | (1L << (RELOAD - 580)) | (1L << (SHUTDOWN - 580)) | (1L << (SUPER - 580)) | (1L << (PRIVILEGES - 580)) | (1L << (SESSION_VARIABLES_ADMIN - 580)) | (1L << (ARMSCII8 - 580)) | (1L << (ASCII - 580)) | (1L << (BIG5 - 580)) | (1L << (CP1250 - 580)) | (1L << (CP1251 - 580)) | (1L << (CP1256 - 580)) | (1L << (CP1257 - 580)) | (1L << (CP850 - 580)) | (1L << (CP852 - 580)) | (1L << (CP866 - 580)) | (1L << (CP932 - 580)) | (1L << (DEC8 - 580)) | (1L << (EUCJPMS - 580)) | (1L << (EUCKR - 580)) | (1L << (GB2312 - 580)) | (1L << (GBK - 580)) | (1L << (GEOSTD8 - 580)) | (1L << (GREEK - 580)) | (1L << (HEBREW - 580)) | (1L << (HP8 - 580)) | (1L << (KEYBCS2 - 580)) | (1L << (KOI8R - 580)) | (1L << (KOI8U - 580)) | (1L << (LATIN1 - 580)) | (1L << (LATIN2 - 580)) | (1L << (LATIN5 - 580)) | (1L << (LATIN7 - 580)) | (1L << (MACCE - 580)) | (1L << (MACROMAN - 580)) | (1L << (SJIS - 580)) | (1L << (SWE7 - 580)) | (1L << (TIS620 - 580)) | (1L << (UCS2 - 580)) | (1L << (UJIS - 580)) | (1L << (UTF16 - 580)) | (1L << (UTF16LE - 580)) | (1L << (UTF32 - 580)) | (1L << (UTF8 - 580)) | (1L << (UTF8MB3 - 580)) | (1L << (UTF8MB4 - 580)) | (1L << (ARCHIVE - 580)) | (1L << (BLACKHOLE - 580)) | (1L << (CSV - 580)) | (1L << (FEDERATED - 580)) | (1L << (INNODB - 580)))) != 0) || ((((_la - 644)) & ~0x3f) == 0 && ((1L << (_la - 644)) & ((1L << (MEMORY - 644)) | (1L << (MRG_MYISAM - 644)) | (1L << (MYISAM - 644)) | (1L << (NDB - 644)) | (1L << (NDBCLUSTER - 644)) | (1L << (PERFORMANCE_SCHEMA - 644)) | (1L << (TOKUDB - 644)) | (1L << (REPEATABLE - 644)) | (1L << (COMMITTED - 644)) | (1L << (UNCOMMITTED - 644)) | (1L << (SERIALIZABLE - 644)) | (1L << (GEOMETRYCOLLECTION - 644)) | (1L << (LINESTRING - 644)) | (1L << (MULTILINESTRING - 644)) | (1L << (MULTIPOINT - 644)) | (1L << (MULTIPOLYGON - 644)) | (1L << (POINT - 644)) | (1L << (POLYGON - 644)) | (1L << (ABS - 644)) | (1L << (ACOS - 644)) | (1L << (ADDDATE - 644)) | (1L << (ADDTIME - 644)) | (1L << (AES_DECRYPT - 644)) | (1L << (AES_ENCRYPT - 644)) | (1L << (AREA - 644)) | (1L << (ASBINARY - 644)) | (1L << (ASIN - 644)) | (1L << (ASTEXT - 644)) | (1L << (ASWKB - 644)) | (1L << (ASWKT - 644)) | (1L << (ASYMMETRIC_DECRYPT - 644)) | (1L << (ASYMMETRIC_DERIVE - 644)) | (1L << (ASYMMETRIC_ENCRYPT - 644)) | (1L << (ASYMMETRIC_SIGN - 644)) | (1L << (ASYMMETRIC_VERIFY - 644)) | (1L << (ATAN - 644)) | (1L << (ATAN2 - 644)) | (1L << (BENCHMARK - 644)) | (1L << (BIN - 644)) | (1L << (BIT_COUNT - 644)) | (1L << (BIT_LENGTH - 644)) | (1L << (BUFFER - 644)) | (1L << (CATALOG_NAME - 644)) | (1L << (CEIL - 644)) | (1L << (CEILING - 644)) | (1L << (CENTROID - 644)) | (1L << (CHARACTER_LENGTH - 644)) | (1L << (CHARSET - 644)) | (1L << (CHAR_LENGTH - 644)) | (1L << (COERCIBILITY - 644)) | (1L << (COLLATION - 644)) | (1L << (COMPRESS - 644)) | (1L << (CONCAT - 644)) | (1L << (CONCAT_WS - 644)) | (1L << (CONNECTION_ID - 644)) | (1L << (CONV - 644)) | (1L << (CONVERT_TZ - 644)) | (1L << (COS - 644)) | (1L << (COT - 644)) | (1L << (CRC32 - 644)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 644)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 644)))) != 0) || ((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (CREATE_DH_PARAMETERS - 708)) | (1L << (CREATE_DIGEST - 708)) | (1L << (CROSSES - 708)) | (1L << (DATEDIFF - 708)) | (1L << (DATE_FORMAT - 708)) | (1L << (DAYNAME - 708)) | (1L << (DAYOFMONTH - 708)) | (1L << (DAYOFWEEK - 708)) | (1L << (DAYOFYEAR - 708)) | (1L << (DECODE - 708)) | (1L << (DEGREES - 708)) | (1L << (DES_DECRYPT - 708)) | (1L << (DES_ENCRYPT - 708)) | (1L << (DIMENSION - 708)) | (1L << (DISJOINT - 708)) | (1L << (ELT - 708)) | (1L << (ENCODE - 708)) | (1L << (ENCRYPT - 708)) | (1L << (ENDPOINT - 708)) | (1L << (ENVELOPE - 708)) | (1L << (EQUALS - 708)) | (1L << (EXP - 708)) | (1L << (EXPORT_SET - 708)) | (1L << (EXTERIORRING - 708)) | (1L << (EXTRACTVALUE - 708)) | (1L << (FIELD - 708)) | (1L << (FIND_IN_SET - 708)) | (1L << (FLOOR - 708)) | (1L << (FORMAT - 708)) | (1L << (FOUND_ROWS - 708)) | (1L << (FROM_BASE64 - 708)) | (1L << (FROM_DAYS - 708)) | (1L << (FROM_UNIXTIME - 708)) | (1L << (GEOMCOLLFROMTEXT - 708)) | (1L << (GEOMCOLLFROMWKB - 708)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 708)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 708)) | (1L << (GEOMETRYFROMTEXT - 708)) | (1L << (GEOMETRYFROMWKB - 708)) | (1L << (GEOMETRYN - 708)) | (1L << (GEOMETRYTYPE - 708)) | (1L << (GEOMFROMTEXT - 708)) | (1L << (GEOMFROMWKB - 708)) | (1L << (GET_FORMAT - 708)) | (1L << (GET_LOCK - 708)) | (1L << (GLENGTH - 708)) | (1L << (GREATEST - 708)) | (1L << (GTID_SUBSET - 708)) | (1L << (GTID_SUBTRACT - 708)) | (1L << (HEX - 708)) | (1L << (IFNULL - 708)) | (1L << (INET6_ATON - 708)) | (1L << (INET6_NTOA - 708)) | (1L << (INET_ATON - 708)) | (1L << (INET_NTOA - 708)) | (1L << (INSTR - 708)) | (1L << (INTERIORRINGN - 708)) | (1L << (INTERSECTS - 708)) | (1L << (ISCLOSED - 708)) | (1L << (ISEMPTY - 708)) | (1L << (ISNULL - 708)) | (1L << (ISSIMPLE - 708)) | (1L << (IS_FREE_LOCK - 708)) | (1L << (IS_IPV4 - 708)))) != 0) || ((((_la - 772)) & ~0x3f) == 0 && ((1L << (_la - 772)) & ((1L << (IS_IPV4_COMPAT - 772)) | (1L << (IS_IPV4_MAPPED - 772)) | (1L << (IS_IPV6 - 772)) | (1L << (IS_USED_LOCK - 772)) | (1L << (LAST_INSERT_ID - 772)) | (1L << (LCASE - 772)) | (1L << (LEAST - 772)) | (1L << (LENGTH - 772)) | (1L << (LINEFROMTEXT - 772)) | (1L << (LINEFROMWKB - 772)) | (1L << (LINESTRINGFROMTEXT - 772)) | (1L << (LINESTRINGFROMWKB - 772)) | (1L << (LN - 772)) | (1L << (LOAD_FILE - 772)) | (1L << (LOCATE - 772)) | (1L << (LOG - 772)) | (1L << (LOG10 - 772)) | (1L << (LOG2 - 772)) | (1L << (LOWER - 772)) | (1L << (LPAD - 772)) | (1L << (LTRIM - 772)) | (1L << (MAKEDATE - 772)) | (1L << (MAKETIME - 772)) | (1L << (MAKE_SET - 772)) | (1L << (MASTER_POS_WAIT - 772)) | (1L << (MBRCONTAINS - 772)) | (1L << (MBRDISJOINT - 772)) | (1L << (MBREQUAL - 772)) | (1L << (MBRINTERSECTS - 772)) | (1L << (MBROVERLAPS - 772)) | (1L << (MBRTOUCHES - 772)) | (1L << (MBRWITHIN - 772)) | (1L << (MD5 - 772)) | (1L << (MLINEFROMTEXT - 772)) | (1L << (MLINEFROMWKB - 772)) | (1L << (MONTHNAME - 772)) | (1L << (MPOINTFROMTEXT - 772)) | (1L << (MPOINTFROMWKB - 772)) | (1L << (MPOLYFROMTEXT - 772)) | (1L << (MPOLYFROMWKB - 772)) | (1L << (MULTILINESTRINGFROMTEXT - 772)) | (1L << (MULTILINESTRINGFROMWKB - 772)) | (1L << (MULTIPOINTFROMTEXT - 772)) | (1L << (MULTIPOINTFROMWKB - 772)) | (1L << (MULTIPOLYGONFROMTEXT - 772)) | (1L << (MULTIPOLYGONFROMWKB - 772)) | (1L << (NAME_CONST - 772)) | (1L << (NULLIF - 772)) | (1L << (NUMGEOMETRIES - 772)) | (1L << (NUMINTERIORRINGS - 772)) | (1L << (NUMPOINTS - 772)) | (1L << (OCT - 772)) | (1L << (OCTET_LENGTH - 772)) | (1L << (ORD - 772)) | (1L << (OVERLAPS - 772)) | (1L << (PERIOD_ADD - 772)) | (1L << (PERIOD_DIFF - 772)) | (1L << (PI - 772)) | (1L << (POINTFROMTEXT - 772)) | (1L << (POINTFROMWKB - 772)) | (1L << (POINTN - 772)) | (1L << (POLYFROMTEXT - 772)) | (1L << (POLYFROMWKB - 772)) | (1L << (POLYGONFROMTEXT - 772)))) != 0) || ((((_la - 836)) & ~0x3f) == 0 && ((1L << (_la - 836)) & ((1L << (POLYGONFROMWKB - 836)) | (1L << (POW - 836)) | (1L << (POWER - 836)) | (1L << (QUOTE - 836)) | (1L << (RADIANS - 836)) | (1L << (RAND - 836)) | (1L << (RANDOM_BYTES - 836)) | (1L << (RELEASE_LOCK - 836)) | (1L << (REVERSE - 836)) | (1L << (ROUND - 836)) | (1L << (ROW_COUNT - 836)) | (1L << (RPAD - 836)) | (1L << (RTRIM - 836)) | (1L << (SEC_TO_TIME - 836)) | (1L << (SESSION_USER - 836)) | (1L << (SHA - 836)) | (1L << (SHA1 - 836)) | (1L << (SHA2 - 836)) | (1L << (SCHEMA_NAME - 836)) | (1L << (SIGN - 836)) | (1L << (SIN - 836)) | (1L << (SLEEP - 836)) | (1L << (SOUNDEX - 836)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 836)) | (1L << (SQRT - 836)) | (1L << (SRID - 836)) | (1L << (STARTPOINT - 836)) | (1L << (STRCMP - 836)) | (1L << (STR_TO_DATE - 836)) | (1L << (ST_AREA - 836)) | (1L << (ST_ASBINARY - 836)) | (1L << (ST_ASTEXT - 836)) | (1L << (ST_ASWKB - 836)) | (1L << (ST_ASWKT - 836)) | (1L << (ST_BUFFER - 836)) | (1L << (ST_CENTROID - 836)) | (1L << (ST_CONTAINS - 836)) | (1L << (ST_CROSSES - 836)) | (1L << (ST_DIFFERENCE - 836)) | (1L << (ST_DIMENSION - 836)) | (1L << (ST_DISJOINT - 836)) | (1L << (ST_DISTANCE - 836)) | (1L << (ST_ENDPOINT - 836)) | (1L << (ST_ENVELOPE - 836)) | (1L << (ST_EQUALS - 836)) | (1L << (ST_EXTERIORRING - 836)) | (1L << (ST_GEOMCOLLFROMTEXT - 836)) | (1L << (ST_GEOMCOLLFROMTXT - 836)) | (1L << (ST_GEOMCOLLFROMWKB - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 836)) | (1L << (ST_GEOMETRYFROMTEXT - 836)) | (1L << (ST_GEOMETRYFROMWKB - 836)) | (1L << (ST_GEOMETRYN - 836)) | (1L << (ST_GEOMETRYTYPE - 836)) | (1L << (ST_GEOMFROMTEXT - 836)) | (1L << (ST_GEOMFROMWKB - 836)) | (1L << (ST_INTERIORRINGN - 836)) | (1L << (ST_INTERSECTION - 836)) | (1L << (ST_INTERSECTS - 836)) | (1L << (ST_ISCLOSED - 836)) | (1L << (ST_ISEMPTY - 836)) | (1L << (ST_ISSIMPLE - 836)) | (1L << (ST_LINEFROMTEXT - 836)))) != 0) || ((((_la - 900)) & ~0x3f) == 0 && ((1L << (_la - 900)) & ((1L << (ST_LINEFROMWKB - 900)) | (1L << (ST_LINESTRINGFROMTEXT - 900)) | (1L << (ST_LINESTRINGFROMWKB - 900)) | (1L << (ST_NUMGEOMETRIES - 900)) | (1L << (ST_NUMINTERIORRING - 900)) | (1L << (ST_NUMINTERIORRINGS - 900)) | (1L << (ST_NUMPOINTS - 900)) | (1L << (ST_OVERLAPS - 900)) | (1L << (ST_POINTFROMTEXT - 900)) | (1L << (ST_POINTFROMWKB - 900)) | (1L << (ST_POINTN - 900)) | (1L << (ST_POLYFROMTEXT - 900)) | (1L << (ST_POLYFROMWKB - 900)) | (1L << (ST_POLYGONFROMTEXT - 900)) | (1L << (ST_POLYGONFROMWKB - 900)) | (1L << (ST_SRID - 900)) | (1L << (ST_STARTPOINT - 900)) | (1L << (ST_SYMDIFFERENCE - 900)) | (1L << (ST_TOUCHES - 900)) | (1L << (ST_UNION - 900)) | (1L << (ST_WITHIN - 900)) | (1L << (ST_X - 900)) | (1L << (ST_Y - 900)) | (1L << (SUBDATE - 900)) | (1L << (SUBSTRING_INDEX - 900)) | (1L << (SUBTIME - 900)) | (1L << (SYSTEM_USER - 900)) | (1L << (TAN - 900)) | (1L << (TIMEDIFF - 900)) | (1L << (TIMESTAMPADD - 900)) | (1L << (TIMESTAMPDIFF - 900)) | (1L << (TIME_FORMAT - 900)) | (1L << (TIME_TO_SEC - 900)) | (1L << (TOUCHES - 900)) | (1L << (TO_BASE64 - 900)) | (1L << (TO_DAYS - 900)) | (1L << (TO_SECONDS - 900)) | (1L << (UCASE - 900)) | (1L << (UNCOMPRESS - 900)) | (1L << (UNCOMPRESSED_LENGTH - 900)) | (1L << (UNHEX - 900)) | (1L << (UNIX_TIMESTAMP - 900)) | (1L << (UPDATEXML - 900)) | (1L << (UPPER - 900)) | (1L << (UUID - 900)) | (1L << (UUID_SHORT - 900)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 900)) | (1L << (VERSION - 900)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 900)) | (1L << (WEEKDAY - 900)) | (1L << (WEEKOFYEAR - 900)) | (1L << (WEIGHT_STRING - 900)) | (1L << (WITHIN - 900)) | (1L << (YEARWEEK - 900)) | (1L << (Y_FUNCTION - 900)) | (1L << (X_FUNCTION - 900)))) != 0) || ((((_la - 994)) & ~0x3f) == 0 && ((1L << (_la - 994)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 994)) | (1L << (STRING_LITERAL - 994)) | (1L << (ID - 994)) | (1L << (REVERSE_QUOTE_ID - 994)))) != 0))
                        {
                            {
                                State = 2328; ((AlterByAddUniqueKeyContext)_localctx).indexName = uid();
                            }
                        }

                        State = 2332;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == USING)
                        {
                            {
                                State = 2331; indexType();
                            }
                        }

                        State = 2334; indexColumnNames();
                        State = 2338;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        while (_la == USING || _la == WITH || _la == COMMENT || _la == INVISIBLE || _la == KEY_BLOCK_SIZE || _la == VISIBLE)
                        {
                            {
                                {
                                    State = 2335; indexOption();
                                }
                            }
                            State = 2340;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                        }
                    }
                    break;
                case 7:
                    _localctx = new AlterByAddSpecialIndexContext(_localctx);
                    EnterOuterAlt(_localctx, 7);
                    {
                        State = 2341; Match(ADD);
                        State = 2342;
                        ((AlterByAddSpecialIndexContext)_localctx).keyType = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == FULLTEXT || _la == SPATIAL))
                        {
                            ((AlterByAddSpecialIndexContext)_localctx).keyType = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                        State = 2344;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == INDEX || _la == KEY)
                        {
                            {
                                State = 2343;
                                ((AlterByAddSpecialIndexContext)_localctx).indexFormat = TokenStream.LT(1);
                                _la = TokenStream.LA(1);
                                if (!(_la == INDEX || _la == KEY))
                                {
                                    ((AlterByAddSpecialIndexContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
                                }
                                else
                                {
                                    ErrorHandler.ReportMatch(this);
                                    Consume();
                                }
                            }
                        }

                        State = 2347;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)) | (1L << (POSITION - 191)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ACCOUNT - 259)) | (1L << (ACTION - 259)) | (1L << (AFTER - 259)) | (1L << (AGGREGATE - 259)) | (1L << (ALGORITHM - 259)) | (1L << (ANY - 259)) | (1L << (AT - 259)) | (1L << (AUTHORS - 259)) | (1L << (AUTOCOMMIT - 259)) | (1L << (AUTOEXTEND_SIZE - 259)) | (1L << (AUTO_INCREMENT - 259)) | (1L << (AVG_ROW_LENGTH - 259)) | (1L << (BEGIN - 259)) | (1L << (BINLOG - 259)) | (1L << (BIT - 259)) | (1L << (BLOCK - 259)) | (1L << (BOOL - 259)) | (1L << (BOOLEAN - 259)) | (1L << (BTREE - 259)) | (1L << (CACHE - 259)) | (1L << (CASCADED - 259)) | (1L << (CHAIN - 259)) | (1L << (CHANGED - 259)) | (1L << (CHANNEL - 259)) | (1L << (CHECKSUM - 259)) | (1L << (PAGE_CHECKSUM - 259)) | (1L << (CIPHER - 259)) | (1L << (CLASS_ORIGIN - 259)) | (1L << (CLIENT - 259)) | (1L << (CLOSE - 259)) | (1L << (COALESCE - 259)) | (1L << (CODE - 259)) | (1L << (COLUMNS - 259)) | (1L << (COLUMN_FORMAT - 259)) | (1L << (COLUMN_NAME - 259)) | (1L << (COMMENT - 259)) | (1L << (COMMIT - 259)) | (1L << (COMPACT - 259)) | (1L << (COMPLETION - 259)) | (1L << (COMPRESSED - 259)) | (1L << (COMPRESSION - 259)) | (1L << (CONCURRENT - 259)) | (1L << (CONNECTION - 259)) | (1L << (CONSISTENT - 259)) | (1L << (CONSTRAINT_CATALOG - 259)) | (1L << (CONSTRAINT_SCHEMA - 259)) | (1L << (CONSTRAINT_NAME - 259)) | (1L << (CONTAINS - 259)) | (1L << (CONTEXT - 259)) | (1L << (CONTRIBUTORS - 259)) | (1L << (COPY - 259)) | (1L << (CPU - 259)) | (1L << (CURSOR_NAME - 259)) | (1L << (DATA - 259)) | (1L << (DATAFILE - 259)) | (1L << (DEALLOCATE - 259)) | (1L << (DEFAULT_AUTH - 259)) | (1L << (DEFINER - 259)) | (1L << (DELAY_KEY_WRITE - 259)) | (1L << (DES_KEY_FILE - 259)) | (1L << (DIRECTORY - 259)) | (1L << (DISABLE - 259)) | (1L << (DISCARD - 259)) | (1L << (DISK - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (DO - 323)) | (1L << (DUMPFILE - 323)) | (1L << (DUPLICATE - 323)) | (1L << (DYNAMIC - 323)) | (1L << (ENABLE - 323)) | (1L << (ENCRYPTION - 323)) | (1L << (END - 323)) | (1L << (ENDS - 323)) | (1L << (ENGINE - 323)) | (1L << (ENGINES - 323)) | (1L << (ERROR - 323)) | (1L << (ERRORS - 323)) | (1L << (ESCAPE - 323)) | (1L << (EVEN - 323)) | (1L << (EVENT - 323)) | (1L << (EVENTS - 323)) | (1L << (EVERY - 323)) | (1L << (EXCHANGE - 323)) | (1L << (EXCLUSIVE - 323)) | (1L << (EXPIRE - 323)) | (1L << (EXPORT - 323)) | (1L << (EXTENDED - 323)) | (1L << (EXTENT_SIZE - 323)) | (1L << (FAST - 323)) | (1L << (FAULTS - 323)) | (1L << (FIELDS - 323)) | (1L << (FILE_BLOCK_SIZE - 323)) | (1L << (FILTER - 323)) | (1L << (FIRST - 323)) | (1L << (FIXED - 323)) | (1L << (FLUSH - 323)) | (1L << (FOLLOWS - 323)) | (1L << (FOUND - 323)) | (1L << (FULL - 323)) | (1L << (FUNCTION - 323)) | (1L << (GENERAL - 323)) | (1L << (GLOBAL - 323)) | (1L << (GRANTS - 323)) | (1L << (GROUP_REPLICATION - 323)) | (1L << (HANDLER - 323)) | (1L << (HASH - 323)) | (1L << (HELP - 323)) | (1L << (HOST - 323)) | (1L << (HOSTS - 323)) | (1L << (IDENTIFIED - 323)) | (1L << (IGNORE_SERVER_IDS - 323)) | (1L << (IMPORT - 323)) | (1L << (INDEXES - 323)) | (1L << (INITIAL_SIZE - 323)) | (1L << (INPLACE - 323)) | (1L << (INSERT_METHOD - 323)) | (1L << (INSTALL - 323)) | (1L << (INSTANCE - 323)) | (1L << (INVISIBLE - 323)) | (1L << (INVOKER - 323)) | (1L << (IO - 323)) | (1L << (IO_THREAD - 323)) | (1L << (IPC - 323)) | (1L << (ISOLATION - 323)) | (1L << (ISSUER - 323)) | (1L << (JSON - 323)) | (1L << (KEY_BLOCK_SIZE - 323)) | (1L << (LANGUAGE - 323)) | (1L << (LAST - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (LEAVES - 387)) | (1L << (LESS - 387)) | (1L << (LEVEL - 387)) | (1L << (LIST - 387)) | (1L << (LOCAL - 387)) | (1L << (LOGFILE - 387)) | (1L << (LOGS - 387)) | (1L << (MASTER - 387)) | (1L << (MASTER_AUTO_POSITION - 387)) | (1L << (MASTER_CONNECT_RETRY - 387)) | (1L << (MASTER_DELAY - 387)) | (1L << (MASTER_HEARTBEAT_PERIOD - 387)) | (1L << (MASTER_HOST - 387)) | (1L << (MASTER_LOG_FILE - 387)) | (1L << (MASTER_LOG_POS - 387)) | (1L << (MASTER_PASSWORD - 387)) | (1L << (MASTER_PORT - 387)) | (1L << (MASTER_RETRY_COUNT - 387)) | (1L << (MASTER_SSL - 387)) | (1L << (MASTER_SSL_CA - 387)) | (1L << (MASTER_SSL_CAPATH - 387)) | (1L << (MASTER_SSL_CERT - 387)) | (1L << (MASTER_SSL_CIPHER - 387)) | (1L << (MASTER_SSL_CRL - 387)) | (1L << (MASTER_SSL_CRLPATH - 387)) | (1L << (MASTER_SSL_KEY - 387)) | (1L << (MASTER_TLS_VERSION - 387)) | (1L << (MASTER_USER - 387)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 387)) | (1L << (MAX_QUERIES_PER_HOUR - 387)) | (1L << (MAX_ROWS - 387)) | (1L << (MAX_SIZE - 387)) | (1L << (MAX_UPDATES_PER_HOUR - 387)) | (1L << (MAX_USER_CONNECTIONS - 387)) | (1L << (MEDIUM - 387)) | (1L << (MERGE - 387)) | (1L << (MESSAGE_TEXT - 387)) | (1L << (MID - 387)) | (1L << (MIGRATE - 387)) | (1L << (MIN_ROWS - 387)) | (1L << (MODE - 387)) | (1L << (MODIFY - 387)) | (1L << (MUTEX - 387)) | (1L << (MYSQL - 387)) | (1L << (MYSQL_ERRNO - 387)) | (1L << (NAME - 387)) | (1L << (NAMES - 387)) | (1L << (NCHAR - 387)) | (1L << (NEVER - 387)) | (1L << (NEXT - 387)) | (1L << (NO - 387)) | (1L << (NODEGROUP - 387)) | (1L << (NONE - 387)) | (1L << (OFFLINE - 387)) | (1L << (OFFSET - 387)) | (1L << (OJ - 387)) | (1L << (OLD_PASSWORD - 387)) | (1L << (ONE - 387)) | (1L << (ONLINE - 387)) | (1L << (ONLY - 387)) | (1L << (OPEN - 387)) | (1L << (OPTIMIZER_COSTS - 387)) | (1L << (OPTIONS - 387)) | (1L << (OWNER - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PAGE - 451)) | (1L << (PARSER - 451)) | (1L << (PARTIAL - 451)) | (1L << (PARTITIONING - 451)) | (1L << (PARTITIONS - 451)) | (1L << (PASSWORD - 451)) | (1L << (PHASE - 451)) | (1L << (PLUGIN - 451)) | (1L << (PLUGIN_DIR - 451)) | (1L << (PLUGINS - 451)) | (1L << (PORT - 451)) | (1L << (PRECEDES - 451)) | (1L << (PREPARE - 451)) | (1L << (PRESERVE - 451)) | (1L << (PREV - 451)) | (1L << (PROCESSLIST - 451)) | (1L << (PROFILE - 451)) | (1L << (PROFILES - 451)) | (1L << (PROXY - 451)) | (1L << (QUERY - 451)) | (1L << (QUICK - 451)) | (1L << (REBUILD - 451)) | (1L << (RECOVER - 451)) | (1L << (REDO_BUFFER_SIZE - 451)) | (1L << (REDUNDANT - 451)) | (1L << (RELAY - 451)) | (1L << (RELAY_LOG_FILE - 451)) | (1L << (RELAY_LOG_POS - 451)) | (1L << (RELAYLOG - 451)) | (1L << (REMOVE - 451)) | (1L << (REORGANIZE - 451)) | (1L << (REPAIR - 451)) | (1L << (REPLICATE_DO_DB - 451)) | (1L << (REPLICATE_DO_TABLE - 451)) | (1L << (REPLICATE_IGNORE_DB - 451)) | (1L << (REPLICATE_IGNORE_TABLE - 451)) | (1L << (REPLICATE_REWRITE_DB - 451)) | (1L << (REPLICATE_WILD_DO_TABLE - 451)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 451)) | (1L << (REPLICATION - 451)) | (1L << (RESET - 451)) | (1L << (RESUME - 451)) | (1L << (RETURNED_SQLSTATE - 451)) | (1L << (RETURNS - 451)) | (1L << (ROLLBACK - 451)) | (1L << (ROLLUP - 451)) | (1L << (ROTATE - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (ROW_FORMAT - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SCHEDULE - 451)) | (1L << (SECURITY - 451)) | (1L << (SERVER - 451)) | (1L << (SESSION - 451)) | (1L << (SHARE - 451)) | (1L << (SHARED - 451)) | (1L << (SIGNED - 451)) | (1L << (SIMPLE - 451)) | (1L << (SLAVE - 451)) | (1L << (SLOW - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOCKET - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SOME - 515)) | (1L << (SONAME - 515)) | (1L << (SOUNDS - 515)) | (1L << (SOURCE - 515)) | (1L << (SQL_AFTER_GTIDS - 515)) | (1L << (SQL_AFTER_MTS_GAPS - 515)) | (1L << (SQL_BEFORE_GTIDS - 515)) | (1L << (SQL_BUFFER_RESULT - 515)) | (1L << (SQL_CACHE - 515)) | (1L << (SQL_NO_CACHE - 515)) | (1L << (SQL_THREAD - 515)) | (1L << (START - 515)) | (1L << (STARTS - 515)) | (1L << (STATS_AUTO_RECALC - 515)) | (1L << (STATS_PERSISTENT - 515)) | (1L << (STATS_SAMPLE_PAGES - 515)) | (1L << (STATUS - 515)) | (1L << (STOP - 515)) | (1L << (STORAGE - 515)) | (1L << (STRING - 515)) | (1L << (SUBCLASS_ORIGIN - 515)) | (1L << (SUBJECT - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBPARTITIONS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SWAPS - 515)) | (1L << (SWITCHES - 515)) | (1L << (TABLE_NAME - 515)) | (1L << (TABLESPACE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TEMPTABLE - 515)) | (1L << (THAN - 515)) | (1L << (TRADITIONAL - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRIGGERS - 515)) | (1L << (TRUNCATE - 515)) | (1L << (UNDEFINED - 515)) | (1L << (UNDOFILE - 515)) | (1L << (UNDO_BUFFER_SIZE - 515)) | (1L << (UNINSTALL - 515)) | (1L << (UNKNOWN - 515)) | (1L << (UNTIL - 515)) | (1L << (UPGRADE - 515)) | (1L << (USER - 515)) | (1L << (USE_FRM - 515)) | (1L << (USER_RESOURCES - 515)) | (1L << (VALIDATION - 515)) | (1L << (VALUE - 515)) | (1L << (VARIABLES - 515)) | (1L << (VIEW - 515)) | (1L << (VISIBLE - 515)) | (1L << (WAIT - 515)) | (1L << (WARNINGS - 515)) | (1L << (WITHOUT - 515)) | (1L << (WORK - 515)) | (1L << (WRAPPER - 515)) | (1L << (X509 - 515)) | (1L << (XA - 515)) | (1L << (XML - 515)))) != 0) || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (INTERNAL - 580)) | (1L << (QUARTER - 580)) | (1L << (MONTH - 580)) | (1L << (DAY - 580)) | (1L << (HOUR - 580)) | (1L << (MINUTE - 580)) | (1L << (WEEK - 580)) | (1L << (SECOND - 580)) | (1L << (MICROSECOND - 580)) | (1L << (TABLES - 580)) | (1L << (ROUTINE - 580)) | (1L << (EXECUTE - 580)) | (1L << (FILE - 580)) | (1L << (PROCESS - 580)) | (1L << (RELOAD - 580)) | (1L << (SHUTDOWN - 580)) | (1L << (SUPER - 580)) | (1L << (PRIVILEGES - 580)) | (1L << (SESSION_VARIABLES_ADMIN - 580)) | (1L << (ARMSCII8 - 580)) | (1L << (ASCII - 580)) | (1L << (BIG5 - 580)) | (1L << (CP1250 - 580)) | (1L << (CP1251 - 580)) | (1L << (CP1256 - 580)) | (1L << (CP1257 - 580)) | (1L << (CP850 - 580)) | (1L << (CP852 - 580)) | (1L << (CP866 - 580)) | (1L << (CP932 - 580)) | (1L << (DEC8 - 580)) | (1L << (EUCJPMS - 580)) | (1L << (EUCKR - 580)) | (1L << (GB2312 - 580)) | (1L << (GBK - 580)) | (1L << (GEOSTD8 - 580)) | (1L << (GREEK - 580)) | (1L << (HEBREW - 580)) | (1L << (HP8 - 580)) | (1L << (KEYBCS2 - 580)) | (1L << (KOI8R - 580)) | (1L << (KOI8U - 580)) | (1L << (LATIN1 - 580)) | (1L << (LATIN2 - 580)) | (1L << (LATIN5 - 580)) | (1L << (LATIN7 - 580)) | (1L << (MACCE - 580)) | (1L << (MACROMAN - 580)) | (1L << (SJIS - 580)) | (1L << (SWE7 - 580)) | (1L << (TIS620 - 580)) | (1L << (UCS2 - 580)) | (1L << (UJIS - 580)) | (1L << (UTF16 - 580)) | (1L << (UTF16LE - 580)) | (1L << (UTF32 - 580)) | (1L << (UTF8 - 580)) | (1L << (UTF8MB3 - 580)) | (1L << (UTF8MB4 - 580)) | (1L << (ARCHIVE - 580)) | (1L << (BLACKHOLE - 580)) | (1L << (CSV - 580)) | (1L << (FEDERATED - 580)) | (1L << (INNODB - 580)))) != 0) || ((((_la - 644)) & ~0x3f) == 0 && ((1L << (_la - 644)) & ((1L << (MEMORY - 644)) | (1L << (MRG_MYISAM - 644)) | (1L << (MYISAM - 644)) | (1L << (NDB - 644)) | (1L << (NDBCLUSTER - 644)) | (1L << (PERFORMANCE_SCHEMA - 644)) | (1L << (TOKUDB - 644)) | (1L << (REPEATABLE - 644)) | (1L << (COMMITTED - 644)) | (1L << (UNCOMMITTED - 644)) | (1L << (SERIALIZABLE - 644)) | (1L << (GEOMETRYCOLLECTION - 644)) | (1L << (LINESTRING - 644)) | (1L << (MULTILINESTRING - 644)) | (1L << (MULTIPOINT - 644)) | (1L << (MULTIPOLYGON - 644)) | (1L << (POINT - 644)) | (1L << (POLYGON - 644)) | (1L << (ABS - 644)) | (1L << (ACOS - 644)) | (1L << (ADDDATE - 644)) | (1L << (ADDTIME - 644)) | (1L << (AES_DECRYPT - 644)) | (1L << (AES_ENCRYPT - 644)) | (1L << (AREA - 644)) | (1L << (ASBINARY - 644)) | (1L << (ASIN - 644)) | (1L << (ASTEXT - 644)) | (1L << (ASWKB - 644)) | (1L << (ASWKT - 644)) | (1L << (ASYMMETRIC_DECRYPT - 644)) | (1L << (ASYMMETRIC_DERIVE - 644)) | (1L << (ASYMMETRIC_ENCRYPT - 644)) | (1L << (ASYMMETRIC_SIGN - 644)) | (1L << (ASYMMETRIC_VERIFY - 644)) | (1L << (ATAN - 644)) | (1L << (ATAN2 - 644)) | (1L << (BENCHMARK - 644)) | (1L << (BIN - 644)) | (1L << (BIT_COUNT - 644)) | (1L << (BIT_LENGTH - 644)) | (1L << (BUFFER - 644)) | (1L << (CATALOG_NAME - 644)) | (1L << (CEIL - 644)) | (1L << (CEILING - 644)) | (1L << (CENTROID - 644)) | (1L << (CHARACTER_LENGTH - 644)) | (1L << (CHARSET - 644)) | (1L << (CHAR_LENGTH - 644)) | (1L << (COERCIBILITY - 644)) | (1L << (COLLATION - 644)) | (1L << (COMPRESS - 644)) | (1L << (CONCAT - 644)) | (1L << (CONCAT_WS - 644)) | (1L << (CONNECTION_ID - 644)) | (1L << (CONV - 644)) | (1L << (CONVERT_TZ - 644)) | (1L << (COS - 644)) | (1L << (COT - 644)) | (1L << (CRC32 - 644)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 644)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 644)))) != 0) || ((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (CREATE_DH_PARAMETERS - 708)) | (1L << (CREATE_DIGEST - 708)) | (1L << (CROSSES - 708)) | (1L << (DATEDIFF - 708)) | (1L << (DATE_FORMAT - 708)) | (1L << (DAYNAME - 708)) | (1L << (DAYOFMONTH - 708)) | (1L << (DAYOFWEEK - 708)) | (1L << (DAYOFYEAR - 708)) | (1L << (DECODE - 708)) | (1L << (DEGREES - 708)) | (1L << (DES_DECRYPT - 708)) | (1L << (DES_ENCRYPT - 708)) | (1L << (DIMENSION - 708)) | (1L << (DISJOINT - 708)) | (1L << (ELT - 708)) | (1L << (ENCODE - 708)) | (1L << (ENCRYPT - 708)) | (1L << (ENDPOINT - 708)) | (1L << (ENVELOPE - 708)) | (1L << (EQUALS - 708)) | (1L << (EXP - 708)) | (1L << (EXPORT_SET - 708)) | (1L << (EXTERIORRING - 708)) | (1L << (EXTRACTVALUE - 708)) | (1L << (FIELD - 708)) | (1L << (FIND_IN_SET - 708)) | (1L << (FLOOR - 708)) | (1L << (FORMAT - 708)) | (1L << (FOUND_ROWS - 708)) | (1L << (FROM_BASE64 - 708)) | (1L << (FROM_DAYS - 708)) | (1L << (FROM_UNIXTIME - 708)) | (1L << (GEOMCOLLFROMTEXT - 708)) | (1L << (GEOMCOLLFROMWKB - 708)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 708)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 708)) | (1L << (GEOMETRYFROMTEXT - 708)) | (1L << (GEOMETRYFROMWKB - 708)) | (1L << (GEOMETRYN - 708)) | (1L << (GEOMETRYTYPE - 708)) | (1L << (GEOMFROMTEXT - 708)) | (1L << (GEOMFROMWKB - 708)) | (1L << (GET_FORMAT - 708)) | (1L << (GET_LOCK - 708)) | (1L << (GLENGTH - 708)) | (1L << (GREATEST - 708)) | (1L << (GTID_SUBSET - 708)) | (1L << (GTID_SUBTRACT - 708)) | (1L << (HEX - 708)) | (1L << (IFNULL - 708)) | (1L << (INET6_ATON - 708)) | (1L << (INET6_NTOA - 708)) | (1L << (INET_ATON - 708)) | (1L << (INET_NTOA - 708)) | (1L << (INSTR - 708)) | (1L << (INTERIORRINGN - 708)) | (1L << (INTERSECTS - 708)) | (1L << (ISCLOSED - 708)) | (1L << (ISEMPTY - 708)) | (1L << (ISNULL - 708)) | (1L << (ISSIMPLE - 708)) | (1L << (IS_FREE_LOCK - 708)) | (1L << (IS_IPV4 - 708)))) != 0) || ((((_la - 772)) & ~0x3f) == 0 && ((1L << (_la - 772)) & ((1L << (IS_IPV4_COMPAT - 772)) | (1L << (IS_IPV4_MAPPED - 772)) | (1L << (IS_IPV6 - 772)) | (1L << (IS_USED_LOCK - 772)) | (1L << (LAST_INSERT_ID - 772)) | (1L << (LCASE - 772)) | (1L << (LEAST - 772)) | (1L << (LENGTH - 772)) | (1L << (LINEFROMTEXT - 772)) | (1L << (LINEFROMWKB - 772)) | (1L << (LINESTRINGFROMTEXT - 772)) | (1L << (LINESTRINGFROMWKB - 772)) | (1L << (LN - 772)) | (1L << (LOAD_FILE - 772)) | (1L << (LOCATE - 772)) | (1L << (LOG - 772)) | (1L << (LOG10 - 772)) | (1L << (LOG2 - 772)) | (1L << (LOWER - 772)) | (1L << (LPAD - 772)) | (1L << (LTRIM - 772)) | (1L << (MAKEDATE - 772)) | (1L << (MAKETIME - 772)) | (1L << (MAKE_SET - 772)) | (1L << (MASTER_POS_WAIT - 772)) | (1L << (MBRCONTAINS - 772)) | (1L << (MBRDISJOINT - 772)) | (1L << (MBREQUAL - 772)) | (1L << (MBRINTERSECTS - 772)) | (1L << (MBROVERLAPS - 772)) | (1L << (MBRTOUCHES - 772)) | (1L << (MBRWITHIN - 772)) | (1L << (MD5 - 772)) | (1L << (MLINEFROMTEXT - 772)) | (1L << (MLINEFROMWKB - 772)) | (1L << (MONTHNAME - 772)) | (1L << (MPOINTFROMTEXT - 772)) | (1L << (MPOINTFROMWKB - 772)) | (1L << (MPOLYFROMTEXT - 772)) | (1L << (MPOLYFROMWKB - 772)) | (1L << (MULTILINESTRINGFROMTEXT - 772)) | (1L << (MULTILINESTRINGFROMWKB - 772)) | (1L << (MULTIPOINTFROMTEXT - 772)) | (1L << (MULTIPOINTFROMWKB - 772)) | (1L << (MULTIPOLYGONFROMTEXT - 772)) | (1L << (MULTIPOLYGONFROMWKB - 772)) | (1L << (NAME_CONST - 772)) | (1L << (NULLIF - 772)) | (1L << (NUMGEOMETRIES - 772)) | (1L << (NUMINTERIORRINGS - 772)) | (1L << (NUMPOINTS - 772)) | (1L << (OCT - 772)) | (1L << (OCTET_LENGTH - 772)) | (1L << (ORD - 772)) | (1L << (OVERLAPS - 772)) | (1L << (PERIOD_ADD - 772)) | (1L << (PERIOD_DIFF - 772)) | (1L << (PI - 772)) | (1L << (POINTFROMTEXT - 772)) | (1L << (POINTFROMWKB - 772)) | (1L << (POINTN - 772)) | (1L << (POLYFROMTEXT - 772)) | (1L << (POLYFROMWKB - 772)) | (1L << (POLYGONFROMTEXT - 772)))) != 0) || ((((_la - 836)) & ~0x3f) == 0 && ((1L << (_la - 836)) & ((1L << (POLYGONFROMWKB - 836)) | (1L << (POW - 836)) | (1L << (POWER - 836)) | (1L << (QUOTE - 836)) | (1L << (RADIANS - 836)) | (1L << (RAND - 836)) | (1L << (RANDOM_BYTES - 836)) | (1L << (RELEASE_LOCK - 836)) | (1L << (REVERSE - 836)) | (1L << (ROUND - 836)) | (1L << (ROW_COUNT - 836)) | (1L << (RPAD - 836)) | (1L << (RTRIM - 836)) | (1L << (SEC_TO_TIME - 836)) | (1L << (SESSION_USER - 836)) | (1L << (SHA - 836)) | (1L << (SHA1 - 836)) | (1L << (SHA2 - 836)) | (1L << (SCHEMA_NAME - 836)) | (1L << (SIGN - 836)) | (1L << (SIN - 836)) | (1L << (SLEEP - 836)) | (1L << (SOUNDEX - 836)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 836)) | (1L << (SQRT - 836)) | (1L << (SRID - 836)) | (1L << (STARTPOINT - 836)) | (1L << (STRCMP - 836)) | (1L << (STR_TO_DATE - 836)) | (1L << (ST_AREA - 836)) | (1L << (ST_ASBINARY - 836)) | (1L << (ST_ASTEXT - 836)) | (1L << (ST_ASWKB - 836)) | (1L << (ST_ASWKT - 836)) | (1L << (ST_BUFFER - 836)) | (1L << (ST_CENTROID - 836)) | (1L << (ST_CONTAINS - 836)) | (1L << (ST_CROSSES - 836)) | (1L << (ST_DIFFERENCE - 836)) | (1L << (ST_DIMENSION - 836)) | (1L << (ST_DISJOINT - 836)) | (1L << (ST_DISTANCE - 836)) | (1L << (ST_ENDPOINT - 836)) | (1L << (ST_ENVELOPE - 836)) | (1L << (ST_EQUALS - 836)) | (1L << (ST_EXTERIORRING - 836)) | (1L << (ST_GEOMCOLLFROMTEXT - 836)) | (1L << (ST_GEOMCOLLFROMTXT - 836)) | (1L << (ST_GEOMCOLLFROMWKB - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 836)) | (1L << (ST_GEOMETRYFROMTEXT - 836)) | (1L << (ST_GEOMETRYFROMWKB - 836)) | (1L << (ST_GEOMETRYN - 836)) | (1L << (ST_GEOMETRYTYPE - 836)) | (1L << (ST_GEOMFROMTEXT - 836)) | (1L << (ST_GEOMFROMWKB - 836)) | (1L << (ST_INTERIORRINGN - 836)) | (1L << (ST_INTERSECTION - 836)) | (1L << (ST_INTERSECTS - 836)) | (1L << (ST_ISCLOSED - 836)) | (1L << (ST_ISEMPTY - 836)) | (1L << (ST_ISSIMPLE - 836)) | (1L << (ST_LINEFROMTEXT - 836)))) != 0) || ((((_la - 900)) & ~0x3f) == 0 && ((1L << (_la - 900)) & ((1L << (ST_LINEFROMWKB - 900)) | (1L << (ST_LINESTRINGFROMTEXT - 900)) | (1L << (ST_LINESTRINGFROMWKB - 900)) | (1L << (ST_NUMGEOMETRIES - 900)) | (1L << (ST_NUMINTERIORRING - 900)) | (1L << (ST_NUMINTERIORRINGS - 900)) | (1L << (ST_NUMPOINTS - 900)) | (1L << (ST_OVERLAPS - 900)) | (1L << (ST_POINTFROMTEXT - 900)) | (1L << (ST_POINTFROMWKB - 900)) | (1L << (ST_POINTN - 900)) | (1L << (ST_POLYFROMTEXT - 900)) | (1L << (ST_POLYFROMWKB - 900)) | (1L << (ST_POLYGONFROMTEXT - 900)) | (1L << (ST_POLYGONFROMWKB - 900)) | (1L << (ST_SRID - 900)) | (1L << (ST_STARTPOINT - 900)) | (1L << (ST_SYMDIFFERENCE - 900)) | (1L << (ST_TOUCHES - 900)) | (1L << (ST_UNION - 900)) | (1L << (ST_WITHIN - 900)) | (1L << (ST_X - 900)) | (1L << (ST_Y - 900)) | (1L << (SUBDATE - 900)) | (1L << (SUBSTRING_INDEX - 900)) | (1L << (SUBTIME - 900)) | (1L << (SYSTEM_USER - 900)) | (1L << (TAN - 900)) | (1L << (TIMEDIFF - 900)) | (1L << (TIMESTAMPADD - 900)) | (1L << (TIMESTAMPDIFF - 900)) | (1L << (TIME_FORMAT - 900)) | (1L << (TIME_TO_SEC - 900)) | (1L << (TOUCHES - 900)) | (1L << (TO_BASE64 - 900)) | (1L << (TO_DAYS - 900)) | (1L << (TO_SECONDS - 900)) | (1L << (UCASE - 900)) | (1L << (UNCOMPRESS - 900)) | (1L << (UNCOMPRESSED_LENGTH - 900)) | (1L << (UNHEX - 900)) | (1L << (UNIX_TIMESTAMP - 900)) | (1L << (UPDATEXML - 900)) | (1L << (UPPER - 900)) | (1L << (UUID - 900)) | (1L << (UUID_SHORT - 900)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 900)) | (1L << (VERSION - 900)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 900)) | (1L << (WEEKDAY - 900)) | (1L << (WEEKOFYEAR - 900)) | (1L << (WEIGHT_STRING - 900)) | (1L << (WITHIN - 900)) | (1L << (YEARWEEK - 900)) | (1L << (Y_FUNCTION - 900)) | (1L << (X_FUNCTION - 900)))) != 0) || ((((_la - 994)) & ~0x3f) == 0 && ((1L << (_la - 994)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 994)) | (1L << (STRING_LITERAL - 994)) | (1L << (ID - 994)) | (1L << (REVERSE_QUOTE_ID - 994)))) != 0))
                        {
                            {
                                State = 2346; uid();
                            }
                        }

                        State = 2349; indexColumnNames();
                        State = 2353;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        while (_la == USING || _la == WITH || _la == COMMENT || _la == INVISIBLE || _la == KEY_BLOCK_SIZE || _la == VISIBLE)
                        {
                            {
                                {
                                    State = 2350; indexOption();
                                }
                            }
                            State = 2355;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                        }
                    }
                    break;
                case 8:
                    _localctx = new AlterByAddForeignKeyContext(_localctx);
                    EnterOuterAlt(_localctx, 8);
                    {
                        State = 2356; Match(ADD);
                        State = 2361;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == CONSTRAINT)
                        {
                            {
                                State = 2357; Match(CONSTRAINT);
                                State = 2359;
                                ErrorHandler.Sync(this);
                                _la = TokenStream.LA(1);
                                if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)) | (1L << (POSITION - 191)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ACCOUNT - 259)) | (1L << (ACTION - 259)) | (1L << (AFTER - 259)) | (1L << (AGGREGATE - 259)) | (1L << (ALGORITHM - 259)) | (1L << (ANY - 259)) | (1L << (AT - 259)) | (1L << (AUTHORS - 259)) | (1L << (AUTOCOMMIT - 259)) | (1L << (AUTOEXTEND_SIZE - 259)) | (1L << (AUTO_INCREMENT - 259)) | (1L << (AVG_ROW_LENGTH - 259)) | (1L << (BEGIN - 259)) | (1L << (BINLOG - 259)) | (1L << (BIT - 259)) | (1L << (BLOCK - 259)) | (1L << (BOOL - 259)) | (1L << (BOOLEAN - 259)) | (1L << (BTREE - 259)) | (1L << (CACHE - 259)) | (1L << (CASCADED - 259)) | (1L << (CHAIN - 259)) | (1L << (CHANGED - 259)) | (1L << (CHANNEL - 259)) | (1L << (CHECKSUM - 259)) | (1L << (PAGE_CHECKSUM - 259)) | (1L << (CIPHER - 259)) | (1L << (CLASS_ORIGIN - 259)) | (1L << (CLIENT - 259)) | (1L << (CLOSE - 259)) | (1L << (COALESCE - 259)) | (1L << (CODE - 259)) | (1L << (COLUMNS - 259)) | (1L << (COLUMN_FORMAT - 259)) | (1L << (COLUMN_NAME - 259)) | (1L << (COMMENT - 259)) | (1L << (COMMIT - 259)) | (1L << (COMPACT - 259)) | (1L << (COMPLETION - 259)) | (1L << (COMPRESSED - 259)) | (1L << (COMPRESSION - 259)) | (1L << (CONCURRENT - 259)) | (1L << (CONNECTION - 259)) | (1L << (CONSISTENT - 259)) | (1L << (CONSTRAINT_CATALOG - 259)) | (1L << (CONSTRAINT_SCHEMA - 259)) | (1L << (CONSTRAINT_NAME - 259)) | (1L << (CONTAINS - 259)) | (1L << (CONTEXT - 259)) | (1L << (CONTRIBUTORS - 259)) | (1L << (COPY - 259)) | (1L << (CPU - 259)) | (1L << (CURSOR_NAME - 259)) | (1L << (DATA - 259)) | (1L << (DATAFILE - 259)) | (1L << (DEALLOCATE - 259)) | (1L << (DEFAULT_AUTH - 259)) | (1L << (DEFINER - 259)) | (1L << (DELAY_KEY_WRITE - 259)) | (1L << (DES_KEY_FILE - 259)) | (1L << (DIRECTORY - 259)) | (1L << (DISABLE - 259)) | (1L << (DISCARD - 259)) | (1L << (DISK - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (DO - 323)) | (1L << (DUMPFILE - 323)) | (1L << (DUPLICATE - 323)) | (1L << (DYNAMIC - 323)) | (1L << (ENABLE - 323)) | (1L << (ENCRYPTION - 323)) | (1L << (END - 323)) | (1L << (ENDS - 323)) | (1L << (ENGINE - 323)) | (1L << (ENGINES - 323)) | (1L << (ERROR - 323)) | (1L << (ERRORS - 323)) | (1L << (ESCAPE - 323)) | (1L << (EVEN - 323)) | (1L << (EVENT - 323)) | (1L << (EVENTS - 323)) | (1L << (EVERY - 323)) | (1L << (EXCHANGE - 323)) | (1L << (EXCLUSIVE - 323)) | (1L << (EXPIRE - 323)) | (1L << (EXPORT - 323)) | (1L << (EXTENDED - 323)) | (1L << (EXTENT_SIZE - 323)) | (1L << (FAST - 323)) | (1L << (FAULTS - 323)) | (1L << (FIELDS - 323)) | (1L << (FILE_BLOCK_SIZE - 323)) | (1L << (FILTER - 323)) | (1L << (FIRST - 323)) | (1L << (FIXED - 323)) | (1L << (FLUSH - 323)) | (1L << (FOLLOWS - 323)) | (1L << (FOUND - 323)) | (1L << (FULL - 323)) | (1L << (FUNCTION - 323)) | (1L << (GENERAL - 323)) | (1L << (GLOBAL - 323)) | (1L << (GRANTS - 323)) | (1L << (GROUP_REPLICATION - 323)) | (1L << (HANDLER - 323)) | (1L << (HASH - 323)) | (1L << (HELP - 323)) | (1L << (HOST - 323)) | (1L << (HOSTS - 323)) | (1L << (IDENTIFIED - 323)) | (1L << (IGNORE_SERVER_IDS - 323)) | (1L << (IMPORT - 323)) | (1L << (INDEXES - 323)) | (1L << (INITIAL_SIZE - 323)) | (1L << (INPLACE - 323)) | (1L << (INSERT_METHOD - 323)) | (1L << (INSTALL - 323)) | (1L << (INSTANCE - 323)) | (1L << (INVISIBLE - 323)) | (1L << (INVOKER - 323)) | (1L << (IO - 323)) | (1L << (IO_THREAD - 323)) | (1L << (IPC - 323)) | (1L << (ISOLATION - 323)) | (1L << (ISSUER - 323)) | (1L << (JSON - 323)) | (1L << (KEY_BLOCK_SIZE - 323)) | (1L << (LANGUAGE - 323)) | (1L << (LAST - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (LEAVES - 387)) | (1L << (LESS - 387)) | (1L << (LEVEL - 387)) | (1L << (LIST - 387)) | (1L << (LOCAL - 387)) | (1L << (LOGFILE - 387)) | (1L << (LOGS - 387)) | (1L << (MASTER - 387)) | (1L << (MASTER_AUTO_POSITION - 387)) | (1L << (MASTER_CONNECT_RETRY - 387)) | (1L << (MASTER_DELAY - 387)) | (1L << (MASTER_HEARTBEAT_PERIOD - 387)) | (1L << (MASTER_HOST - 387)) | (1L << (MASTER_LOG_FILE - 387)) | (1L << (MASTER_LOG_POS - 387)) | (1L << (MASTER_PASSWORD - 387)) | (1L << (MASTER_PORT - 387)) | (1L << (MASTER_RETRY_COUNT - 387)) | (1L << (MASTER_SSL - 387)) | (1L << (MASTER_SSL_CA - 387)) | (1L << (MASTER_SSL_CAPATH - 387)) | (1L << (MASTER_SSL_CERT - 387)) | (1L << (MASTER_SSL_CIPHER - 387)) | (1L << (MASTER_SSL_CRL - 387)) | (1L << (MASTER_SSL_CRLPATH - 387)) | (1L << (MASTER_SSL_KEY - 387)) | (1L << (MASTER_TLS_VERSION - 387)) | (1L << (MASTER_USER - 387)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 387)) | (1L << (MAX_QUERIES_PER_HOUR - 387)) | (1L << (MAX_ROWS - 387)) | (1L << (MAX_SIZE - 387)) | (1L << (MAX_UPDATES_PER_HOUR - 387)) | (1L << (MAX_USER_CONNECTIONS - 387)) | (1L << (MEDIUM - 387)) | (1L << (MERGE - 387)) | (1L << (MESSAGE_TEXT - 387)) | (1L << (MID - 387)) | (1L << (MIGRATE - 387)) | (1L << (MIN_ROWS - 387)) | (1L << (MODE - 387)) | (1L << (MODIFY - 387)) | (1L << (MUTEX - 387)) | (1L << (MYSQL - 387)) | (1L << (MYSQL_ERRNO - 387)) | (1L << (NAME - 387)) | (1L << (NAMES - 387)) | (1L << (NCHAR - 387)) | (1L << (NEVER - 387)) | (1L << (NEXT - 387)) | (1L << (NO - 387)) | (1L << (NODEGROUP - 387)) | (1L << (NONE - 387)) | (1L << (OFFLINE - 387)) | (1L << (OFFSET - 387)) | (1L << (OJ - 387)) | (1L << (OLD_PASSWORD - 387)) | (1L << (ONE - 387)) | (1L << (ONLINE - 387)) | (1L << (ONLY - 387)) | (1L << (OPEN - 387)) | (1L << (OPTIMIZER_COSTS - 387)) | (1L << (OPTIONS - 387)) | (1L << (OWNER - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PAGE - 451)) | (1L << (PARSER - 451)) | (1L << (PARTIAL - 451)) | (1L << (PARTITIONING - 451)) | (1L << (PARTITIONS - 451)) | (1L << (PASSWORD - 451)) | (1L << (PHASE - 451)) | (1L << (PLUGIN - 451)) | (1L << (PLUGIN_DIR - 451)) | (1L << (PLUGINS - 451)) | (1L << (PORT - 451)) | (1L << (PRECEDES - 451)) | (1L << (PREPARE - 451)) | (1L << (PRESERVE - 451)) | (1L << (PREV - 451)) | (1L << (PROCESSLIST - 451)) | (1L << (PROFILE - 451)) | (1L << (PROFILES - 451)) | (1L << (PROXY - 451)) | (1L << (QUERY - 451)) | (1L << (QUICK - 451)) | (1L << (REBUILD - 451)) | (1L << (RECOVER - 451)) | (1L << (REDO_BUFFER_SIZE - 451)) | (1L << (REDUNDANT - 451)) | (1L << (RELAY - 451)) | (1L << (RELAY_LOG_FILE - 451)) | (1L << (RELAY_LOG_POS - 451)) | (1L << (RELAYLOG - 451)) | (1L << (REMOVE - 451)) | (1L << (REORGANIZE - 451)) | (1L << (REPAIR - 451)) | (1L << (REPLICATE_DO_DB - 451)) | (1L << (REPLICATE_DO_TABLE - 451)) | (1L << (REPLICATE_IGNORE_DB - 451)) | (1L << (REPLICATE_IGNORE_TABLE - 451)) | (1L << (REPLICATE_REWRITE_DB - 451)) | (1L << (REPLICATE_WILD_DO_TABLE - 451)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 451)) | (1L << (REPLICATION - 451)) | (1L << (RESET - 451)) | (1L << (RESUME - 451)) | (1L << (RETURNED_SQLSTATE - 451)) | (1L << (RETURNS - 451)) | (1L << (ROLLBACK - 451)) | (1L << (ROLLUP - 451)) | (1L << (ROTATE - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (ROW_FORMAT - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SCHEDULE - 451)) | (1L << (SECURITY - 451)) | (1L << (SERVER - 451)) | (1L << (SESSION - 451)) | (1L << (SHARE - 451)) | (1L << (SHARED - 451)) | (1L << (SIGNED - 451)) | (1L << (SIMPLE - 451)) | (1L << (SLAVE - 451)) | (1L << (SLOW - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOCKET - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SOME - 515)) | (1L << (SONAME - 515)) | (1L << (SOUNDS - 515)) | (1L << (SOURCE - 515)) | (1L << (SQL_AFTER_GTIDS - 515)) | (1L << (SQL_AFTER_MTS_GAPS - 515)) | (1L << (SQL_BEFORE_GTIDS - 515)) | (1L << (SQL_BUFFER_RESULT - 515)) | (1L << (SQL_CACHE - 515)) | (1L << (SQL_NO_CACHE - 515)) | (1L << (SQL_THREAD - 515)) | (1L << (START - 515)) | (1L << (STARTS - 515)) | (1L << (STATS_AUTO_RECALC - 515)) | (1L << (STATS_PERSISTENT - 515)) | (1L << (STATS_SAMPLE_PAGES - 515)) | (1L << (STATUS - 515)) | (1L << (STOP - 515)) | (1L << (STORAGE - 515)) | (1L << (STRING - 515)) | (1L << (SUBCLASS_ORIGIN - 515)) | (1L << (SUBJECT - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBPARTITIONS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SWAPS - 515)) | (1L << (SWITCHES - 515)) | (1L << (TABLE_NAME - 515)) | (1L << (TABLESPACE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TEMPTABLE - 515)) | (1L << (THAN - 515)) | (1L << (TRADITIONAL - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRIGGERS - 515)) | (1L << (TRUNCATE - 515)) | (1L << (UNDEFINED - 515)) | (1L << (UNDOFILE - 515)) | (1L << (UNDO_BUFFER_SIZE - 515)) | (1L << (UNINSTALL - 515)) | (1L << (UNKNOWN - 515)) | (1L << (UNTIL - 515)) | (1L << (UPGRADE - 515)) | (1L << (USER - 515)) | (1L << (USE_FRM - 515)) | (1L << (USER_RESOURCES - 515)) | (1L << (VALIDATION - 515)) | (1L << (VALUE - 515)) | (1L << (VARIABLES - 515)) | (1L << (VIEW - 515)) | (1L << (VISIBLE - 515)) | (1L << (WAIT - 515)) | (1L << (WARNINGS - 515)) | (1L << (WITHOUT - 515)) | (1L << (WORK - 515)) | (1L << (WRAPPER - 515)) | (1L << (X509 - 515)) | (1L << (XA - 515)) | (1L << (XML - 515)))) != 0) || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (INTERNAL - 580)) | (1L << (QUARTER - 580)) | (1L << (MONTH - 580)) | (1L << (DAY - 580)) | (1L << (HOUR - 580)) | (1L << (MINUTE - 580)) | (1L << (WEEK - 580)) | (1L << (SECOND - 580)) | (1L << (MICROSECOND - 580)) | (1L << (TABLES - 580)) | (1L << (ROUTINE - 580)) | (1L << (EXECUTE - 580)) | (1L << (FILE - 580)) | (1L << (PROCESS - 580)) | (1L << (RELOAD - 580)) | (1L << (SHUTDOWN - 580)) | (1L << (SUPER - 580)) | (1L << (PRIVILEGES - 580)) | (1L << (SESSION_VARIABLES_ADMIN - 580)) | (1L << (ARMSCII8 - 580)) | (1L << (ASCII - 580)) | (1L << (BIG5 - 580)) | (1L << (CP1250 - 580)) | (1L << (CP1251 - 580)) | (1L << (CP1256 - 580)) | (1L << (CP1257 - 580)) | (1L << (CP850 - 580)) | (1L << (CP852 - 580)) | (1L << (CP866 - 580)) | (1L << (CP932 - 580)) | (1L << (DEC8 - 580)) | (1L << (EUCJPMS - 580)) | (1L << (EUCKR - 580)) | (1L << (GB2312 - 580)) | (1L << (GBK - 580)) | (1L << (GEOSTD8 - 580)) | (1L << (GREEK - 580)) | (1L << (HEBREW - 580)) | (1L << (HP8 - 580)) | (1L << (KEYBCS2 - 580)) | (1L << (KOI8R - 580)) | (1L << (KOI8U - 580)) | (1L << (LATIN1 - 580)) | (1L << (LATIN2 - 580)) | (1L << (LATIN5 - 580)) | (1L << (LATIN7 - 580)) | (1L << (MACCE - 580)) | (1L << (MACROMAN - 580)) | (1L << (SJIS - 580)) | (1L << (SWE7 - 580)) | (1L << (TIS620 - 580)) | (1L << (UCS2 - 580)) | (1L << (UJIS - 580)) | (1L << (UTF16 - 580)) | (1L << (UTF16LE - 580)) | (1L << (UTF32 - 580)) | (1L << (UTF8 - 580)) | (1L << (UTF8MB3 - 580)) | (1L << (UTF8MB4 - 580)) | (1L << (ARCHIVE - 580)) | (1L << (BLACKHOLE - 580)) | (1L << (CSV - 580)) | (1L << (FEDERATED - 580)) | (1L << (INNODB - 580)))) != 0) || ((((_la - 644)) & ~0x3f) == 0 && ((1L << (_la - 644)) & ((1L << (MEMORY - 644)) | (1L << (MRG_MYISAM - 644)) | (1L << (MYISAM - 644)) | (1L << (NDB - 644)) | (1L << (NDBCLUSTER - 644)) | (1L << (PERFORMANCE_SCHEMA - 644)) | (1L << (TOKUDB - 644)) | (1L << (REPEATABLE - 644)) | (1L << (COMMITTED - 644)) | (1L << (UNCOMMITTED - 644)) | (1L << (SERIALIZABLE - 644)) | (1L << (GEOMETRYCOLLECTION - 644)) | (1L << (LINESTRING - 644)) | (1L << (MULTILINESTRING - 644)) | (1L << (MULTIPOINT - 644)) | (1L << (MULTIPOLYGON - 644)) | (1L << (POINT - 644)) | (1L << (POLYGON - 644)) | (1L << (ABS - 644)) | (1L << (ACOS - 644)) | (1L << (ADDDATE - 644)) | (1L << (ADDTIME - 644)) | (1L << (AES_DECRYPT - 644)) | (1L << (AES_ENCRYPT - 644)) | (1L << (AREA - 644)) | (1L << (ASBINARY - 644)) | (1L << (ASIN - 644)) | (1L << (ASTEXT - 644)) | (1L << (ASWKB - 644)) | (1L << (ASWKT - 644)) | (1L << (ASYMMETRIC_DECRYPT - 644)) | (1L << (ASYMMETRIC_DERIVE - 644)) | (1L << (ASYMMETRIC_ENCRYPT - 644)) | (1L << (ASYMMETRIC_SIGN - 644)) | (1L << (ASYMMETRIC_VERIFY - 644)) | (1L << (ATAN - 644)) | (1L << (ATAN2 - 644)) | (1L << (BENCHMARK - 644)) | (1L << (BIN - 644)) | (1L << (BIT_COUNT - 644)) | (1L << (BIT_LENGTH - 644)) | (1L << (BUFFER - 644)) | (1L << (CATALOG_NAME - 644)) | (1L << (CEIL - 644)) | (1L << (CEILING - 644)) | (1L << (CENTROID - 644)) | (1L << (CHARACTER_LENGTH - 644)) | (1L << (CHARSET - 644)) | (1L << (CHAR_LENGTH - 644)) | (1L << (COERCIBILITY - 644)) | (1L << (COLLATION - 644)) | (1L << (COMPRESS - 644)) | (1L << (CONCAT - 644)) | (1L << (CONCAT_WS - 644)) | (1L << (CONNECTION_ID - 644)) | (1L << (CONV - 644)) | (1L << (CONVERT_TZ - 644)) | (1L << (COS - 644)) | (1L << (COT - 644)) | (1L << (CRC32 - 644)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 644)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 644)))) != 0) || ((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (CREATE_DH_PARAMETERS - 708)) | (1L << (CREATE_DIGEST - 708)) | (1L << (CROSSES - 708)) | (1L << (DATEDIFF - 708)) | (1L << (DATE_FORMAT - 708)) | (1L << (DAYNAME - 708)) | (1L << (DAYOFMONTH - 708)) | (1L << (DAYOFWEEK - 708)) | (1L << (DAYOFYEAR - 708)) | (1L << (DECODE - 708)) | (1L << (DEGREES - 708)) | (1L << (DES_DECRYPT - 708)) | (1L << (DES_ENCRYPT - 708)) | (1L << (DIMENSION - 708)) | (1L << (DISJOINT - 708)) | (1L << (ELT - 708)) | (1L << (ENCODE - 708)) | (1L << (ENCRYPT - 708)) | (1L << (ENDPOINT - 708)) | (1L << (ENVELOPE - 708)) | (1L << (EQUALS - 708)) | (1L << (EXP - 708)) | (1L << (EXPORT_SET - 708)) | (1L << (EXTERIORRING - 708)) | (1L << (EXTRACTVALUE - 708)) | (1L << (FIELD - 708)) | (1L << (FIND_IN_SET - 708)) | (1L << (FLOOR - 708)) | (1L << (FORMAT - 708)) | (1L << (FOUND_ROWS - 708)) | (1L << (FROM_BASE64 - 708)) | (1L << (FROM_DAYS - 708)) | (1L << (FROM_UNIXTIME - 708)) | (1L << (GEOMCOLLFROMTEXT - 708)) | (1L << (GEOMCOLLFROMWKB - 708)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 708)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 708)) | (1L << (GEOMETRYFROMTEXT - 708)) | (1L << (GEOMETRYFROMWKB - 708)) | (1L << (GEOMETRYN - 708)) | (1L << (GEOMETRYTYPE - 708)) | (1L << (GEOMFROMTEXT - 708)) | (1L << (GEOMFROMWKB - 708)) | (1L << (GET_FORMAT - 708)) | (1L << (GET_LOCK - 708)) | (1L << (GLENGTH - 708)) | (1L << (GREATEST - 708)) | (1L << (GTID_SUBSET - 708)) | (1L << (GTID_SUBTRACT - 708)) | (1L << (HEX - 708)) | (1L << (IFNULL - 708)) | (1L << (INET6_ATON - 708)) | (1L << (INET6_NTOA - 708)) | (1L << (INET_ATON - 708)) | (1L << (INET_NTOA - 708)) | (1L << (INSTR - 708)) | (1L << (INTERIORRINGN - 708)) | (1L << (INTERSECTS - 708)) | (1L << (ISCLOSED - 708)) | (1L << (ISEMPTY - 708)) | (1L << (ISNULL - 708)) | (1L << (ISSIMPLE - 708)) | (1L << (IS_FREE_LOCK - 708)) | (1L << (IS_IPV4 - 708)))) != 0) || ((((_la - 772)) & ~0x3f) == 0 && ((1L << (_la - 772)) & ((1L << (IS_IPV4_COMPAT - 772)) | (1L << (IS_IPV4_MAPPED - 772)) | (1L << (IS_IPV6 - 772)) | (1L << (IS_USED_LOCK - 772)) | (1L << (LAST_INSERT_ID - 772)) | (1L << (LCASE - 772)) | (1L << (LEAST - 772)) | (1L << (LENGTH - 772)) | (1L << (LINEFROMTEXT - 772)) | (1L << (LINEFROMWKB - 772)) | (1L << (LINESTRINGFROMTEXT - 772)) | (1L << (LINESTRINGFROMWKB - 772)) | (1L << (LN - 772)) | (1L << (LOAD_FILE - 772)) | (1L << (LOCATE - 772)) | (1L << (LOG - 772)) | (1L << (LOG10 - 772)) | (1L << (LOG2 - 772)) | (1L << (LOWER - 772)) | (1L << (LPAD - 772)) | (1L << (LTRIM - 772)) | (1L << (MAKEDATE - 772)) | (1L << (MAKETIME - 772)) | (1L << (MAKE_SET - 772)) | (1L << (MASTER_POS_WAIT - 772)) | (1L << (MBRCONTAINS - 772)) | (1L << (MBRDISJOINT - 772)) | (1L << (MBREQUAL - 772)) | (1L << (MBRINTERSECTS - 772)) | (1L << (MBROVERLAPS - 772)) | (1L << (MBRTOUCHES - 772)) | (1L << (MBRWITHIN - 772)) | (1L << (MD5 - 772)) | (1L << (MLINEFROMTEXT - 772)) | (1L << (MLINEFROMWKB - 772)) | (1L << (MONTHNAME - 772)) | (1L << (MPOINTFROMTEXT - 772)) | (1L << (MPOINTFROMWKB - 772)) | (1L << (MPOLYFROMTEXT - 772)) | (1L << (MPOLYFROMWKB - 772)) | (1L << (MULTILINESTRINGFROMTEXT - 772)) | (1L << (MULTILINESTRINGFROMWKB - 772)) | (1L << (MULTIPOINTFROMTEXT - 772)) | (1L << (MULTIPOINTFROMWKB - 772)) | (1L << (MULTIPOLYGONFROMTEXT - 772)) | (1L << (MULTIPOLYGONFROMWKB - 772)) | (1L << (NAME_CONST - 772)) | (1L << (NULLIF - 772)) | (1L << (NUMGEOMETRIES - 772)) | (1L << (NUMINTERIORRINGS - 772)) | (1L << (NUMPOINTS - 772)) | (1L << (OCT - 772)) | (1L << (OCTET_LENGTH - 772)) | (1L << (ORD - 772)) | (1L << (OVERLAPS - 772)) | (1L << (PERIOD_ADD - 772)) | (1L << (PERIOD_DIFF - 772)) | (1L << (PI - 772)) | (1L << (POINTFROMTEXT - 772)) | (1L << (POINTFROMWKB - 772)) | (1L << (POINTN - 772)) | (1L << (POLYFROMTEXT - 772)) | (1L << (POLYFROMWKB - 772)) | (1L << (POLYGONFROMTEXT - 772)))) != 0) || ((((_la - 836)) & ~0x3f) == 0 && ((1L << (_la - 836)) & ((1L << (POLYGONFROMWKB - 836)) | (1L << (POW - 836)) | (1L << (POWER - 836)) | (1L << (QUOTE - 836)) | (1L << (RADIANS - 836)) | (1L << (RAND - 836)) | (1L << (RANDOM_BYTES - 836)) | (1L << (RELEASE_LOCK - 836)) | (1L << (REVERSE - 836)) | (1L << (ROUND - 836)) | (1L << (ROW_COUNT - 836)) | (1L << (RPAD - 836)) | (1L << (RTRIM - 836)) | (1L << (SEC_TO_TIME - 836)) | (1L << (SESSION_USER - 836)) | (1L << (SHA - 836)) | (1L << (SHA1 - 836)) | (1L << (SHA2 - 836)) | (1L << (SCHEMA_NAME - 836)) | (1L << (SIGN - 836)) | (1L << (SIN - 836)) | (1L << (SLEEP - 836)) | (1L << (SOUNDEX - 836)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 836)) | (1L << (SQRT - 836)) | (1L << (SRID - 836)) | (1L << (STARTPOINT - 836)) | (1L << (STRCMP - 836)) | (1L << (STR_TO_DATE - 836)) | (1L << (ST_AREA - 836)) | (1L << (ST_ASBINARY - 836)) | (1L << (ST_ASTEXT - 836)) | (1L << (ST_ASWKB - 836)) | (1L << (ST_ASWKT - 836)) | (1L << (ST_BUFFER - 836)) | (1L << (ST_CENTROID - 836)) | (1L << (ST_CONTAINS - 836)) | (1L << (ST_CROSSES - 836)) | (1L << (ST_DIFFERENCE - 836)) | (1L << (ST_DIMENSION - 836)) | (1L << (ST_DISJOINT - 836)) | (1L << (ST_DISTANCE - 836)) | (1L << (ST_ENDPOINT - 836)) | (1L << (ST_ENVELOPE - 836)) | (1L << (ST_EQUALS - 836)) | (1L << (ST_EXTERIORRING - 836)) | (1L << (ST_GEOMCOLLFROMTEXT - 836)) | (1L << (ST_GEOMCOLLFROMTXT - 836)) | (1L << (ST_GEOMCOLLFROMWKB - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 836)) | (1L << (ST_GEOMETRYFROMTEXT - 836)) | (1L << (ST_GEOMETRYFROMWKB - 836)) | (1L << (ST_GEOMETRYN - 836)) | (1L << (ST_GEOMETRYTYPE - 836)) | (1L << (ST_GEOMFROMTEXT - 836)) | (1L << (ST_GEOMFROMWKB - 836)) | (1L << (ST_INTERIORRINGN - 836)) | (1L << (ST_INTERSECTION - 836)) | (1L << (ST_INTERSECTS - 836)) | (1L << (ST_ISCLOSED - 836)) | (1L << (ST_ISEMPTY - 836)) | (1L << (ST_ISSIMPLE - 836)) | (1L << (ST_LINEFROMTEXT - 836)))) != 0) || ((((_la - 900)) & ~0x3f) == 0 && ((1L << (_la - 900)) & ((1L << (ST_LINEFROMWKB - 900)) | (1L << (ST_LINESTRINGFROMTEXT - 900)) | (1L << (ST_LINESTRINGFROMWKB - 900)) | (1L << (ST_NUMGEOMETRIES - 900)) | (1L << (ST_NUMINTERIORRING - 900)) | (1L << (ST_NUMINTERIORRINGS - 900)) | (1L << (ST_NUMPOINTS - 900)) | (1L << (ST_OVERLAPS - 900)) | (1L << (ST_POINTFROMTEXT - 900)) | (1L << (ST_POINTFROMWKB - 900)) | (1L << (ST_POINTN - 900)) | (1L << (ST_POLYFROMTEXT - 900)) | (1L << (ST_POLYFROMWKB - 900)) | (1L << (ST_POLYGONFROMTEXT - 900)) | (1L << (ST_POLYGONFROMWKB - 900)) | (1L << (ST_SRID - 900)) | (1L << (ST_STARTPOINT - 900)) | (1L << (ST_SYMDIFFERENCE - 900)) | (1L << (ST_TOUCHES - 900)) | (1L << (ST_UNION - 900)) | (1L << (ST_WITHIN - 900)) | (1L << (ST_X - 900)) | (1L << (ST_Y - 900)) | (1L << (SUBDATE - 900)) | (1L << (SUBSTRING_INDEX - 900)) | (1L << (SUBTIME - 900)) | (1L << (SYSTEM_USER - 900)) | (1L << (TAN - 900)) | (1L << (TIMEDIFF - 900)) | (1L << (TIMESTAMPADD - 900)) | (1L << (TIMESTAMPDIFF - 900)) | (1L << (TIME_FORMAT - 900)) | (1L << (TIME_TO_SEC - 900)) | (1L << (TOUCHES - 900)) | (1L << (TO_BASE64 - 900)) | (1L << (TO_DAYS - 900)) | (1L << (TO_SECONDS - 900)) | (1L << (UCASE - 900)) | (1L << (UNCOMPRESS - 900)) | (1L << (UNCOMPRESSED_LENGTH - 900)) | (1L << (UNHEX - 900)) | (1L << (UNIX_TIMESTAMP - 900)) | (1L << (UPDATEXML - 900)) | (1L << (UPPER - 900)) | (1L << (UUID - 900)) | (1L << (UUID_SHORT - 900)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 900)) | (1L << (VERSION - 900)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 900)) | (1L << (WEEKDAY - 900)) | (1L << (WEEKOFYEAR - 900)) | (1L << (WEIGHT_STRING - 900)) | (1L << (WITHIN - 900)) | (1L << (YEARWEEK - 900)) | (1L << (Y_FUNCTION - 900)) | (1L << (X_FUNCTION - 900)))) != 0) || ((((_la - 994)) & ~0x3f) == 0 && ((1L << (_la - 994)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 994)) | (1L << (STRING_LITERAL - 994)) | (1L << (ID - 994)) | (1L << (REVERSE_QUOTE_ID - 994)))) != 0))
                                {
                                    {
                                        State = 2358; ((AlterByAddForeignKeyContext)_localctx).name = uid();
                                    }
                                }

                            }
                        }

                        State = 2363; Match(FOREIGN);
                        State = 2364; Match(KEY);
                        State = 2366;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)) | (1L << (POSITION - 191)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ACCOUNT - 259)) | (1L << (ACTION - 259)) | (1L << (AFTER - 259)) | (1L << (AGGREGATE - 259)) | (1L << (ALGORITHM - 259)) | (1L << (ANY - 259)) | (1L << (AT - 259)) | (1L << (AUTHORS - 259)) | (1L << (AUTOCOMMIT - 259)) | (1L << (AUTOEXTEND_SIZE - 259)) | (1L << (AUTO_INCREMENT - 259)) | (1L << (AVG_ROW_LENGTH - 259)) | (1L << (BEGIN - 259)) | (1L << (BINLOG - 259)) | (1L << (BIT - 259)) | (1L << (BLOCK - 259)) | (1L << (BOOL - 259)) | (1L << (BOOLEAN - 259)) | (1L << (BTREE - 259)) | (1L << (CACHE - 259)) | (1L << (CASCADED - 259)) | (1L << (CHAIN - 259)) | (1L << (CHANGED - 259)) | (1L << (CHANNEL - 259)) | (1L << (CHECKSUM - 259)) | (1L << (PAGE_CHECKSUM - 259)) | (1L << (CIPHER - 259)) | (1L << (CLASS_ORIGIN - 259)) | (1L << (CLIENT - 259)) | (1L << (CLOSE - 259)) | (1L << (COALESCE - 259)) | (1L << (CODE - 259)) | (1L << (COLUMNS - 259)) | (1L << (COLUMN_FORMAT - 259)) | (1L << (COLUMN_NAME - 259)) | (1L << (COMMENT - 259)) | (1L << (COMMIT - 259)) | (1L << (COMPACT - 259)) | (1L << (COMPLETION - 259)) | (1L << (COMPRESSED - 259)) | (1L << (COMPRESSION - 259)) | (1L << (CONCURRENT - 259)) | (1L << (CONNECTION - 259)) | (1L << (CONSISTENT - 259)) | (1L << (CONSTRAINT_CATALOG - 259)) | (1L << (CONSTRAINT_SCHEMA - 259)) | (1L << (CONSTRAINT_NAME - 259)) | (1L << (CONTAINS - 259)) | (1L << (CONTEXT - 259)) | (1L << (CONTRIBUTORS - 259)) | (1L << (COPY - 259)) | (1L << (CPU - 259)) | (1L << (CURSOR_NAME - 259)) | (1L << (DATA - 259)) | (1L << (DATAFILE - 259)) | (1L << (DEALLOCATE - 259)) | (1L << (DEFAULT_AUTH - 259)) | (1L << (DEFINER - 259)) | (1L << (DELAY_KEY_WRITE - 259)) | (1L << (DES_KEY_FILE - 259)) | (1L << (DIRECTORY - 259)) | (1L << (DISABLE - 259)) | (1L << (DISCARD - 259)) | (1L << (DISK - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (DO - 323)) | (1L << (DUMPFILE - 323)) | (1L << (DUPLICATE - 323)) | (1L << (DYNAMIC - 323)) | (1L << (ENABLE - 323)) | (1L << (ENCRYPTION - 323)) | (1L << (END - 323)) | (1L << (ENDS - 323)) | (1L << (ENGINE - 323)) | (1L << (ENGINES - 323)) | (1L << (ERROR - 323)) | (1L << (ERRORS - 323)) | (1L << (ESCAPE - 323)) | (1L << (EVEN - 323)) | (1L << (EVENT - 323)) | (1L << (EVENTS - 323)) | (1L << (EVERY - 323)) | (1L << (EXCHANGE - 323)) | (1L << (EXCLUSIVE - 323)) | (1L << (EXPIRE - 323)) | (1L << (EXPORT - 323)) | (1L << (EXTENDED - 323)) | (1L << (EXTENT_SIZE - 323)) | (1L << (FAST - 323)) | (1L << (FAULTS - 323)) | (1L << (FIELDS - 323)) | (1L << (FILE_BLOCK_SIZE - 323)) | (1L << (FILTER - 323)) | (1L << (FIRST - 323)) | (1L << (FIXED - 323)) | (1L << (FLUSH - 323)) | (1L << (FOLLOWS - 323)) | (1L << (FOUND - 323)) | (1L << (FULL - 323)) | (1L << (FUNCTION - 323)) | (1L << (GENERAL - 323)) | (1L << (GLOBAL - 323)) | (1L << (GRANTS - 323)) | (1L << (GROUP_REPLICATION - 323)) | (1L << (HANDLER - 323)) | (1L << (HASH - 323)) | (1L << (HELP - 323)) | (1L << (HOST - 323)) | (1L << (HOSTS - 323)) | (1L << (IDENTIFIED - 323)) | (1L << (IGNORE_SERVER_IDS - 323)) | (1L << (IMPORT - 323)) | (1L << (INDEXES - 323)) | (1L << (INITIAL_SIZE - 323)) | (1L << (INPLACE - 323)) | (1L << (INSERT_METHOD - 323)) | (1L << (INSTALL - 323)) | (1L << (INSTANCE - 323)) | (1L << (INVISIBLE - 323)) | (1L << (INVOKER - 323)) | (1L << (IO - 323)) | (1L << (IO_THREAD - 323)) | (1L << (IPC - 323)) | (1L << (ISOLATION - 323)) | (1L << (ISSUER - 323)) | (1L << (JSON - 323)) | (1L << (KEY_BLOCK_SIZE - 323)) | (1L << (LANGUAGE - 323)) | (1L << (LAST - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (LEAVES - 387)) | (1L << (LESS - 387)) | (1L << (LEVEL - 387)) | (1L << (LIST - 387)) | (1L << (LOCAL - 387)) | (1L << (LOGFILE - 387)) | (1L << (LOGS - 387)) | (1L << (MASTER - 387)) | (1L << (MASTER_AUTO_POSITION - 387)) | (1L << (MASTER_CONNECT_RETRY - 387)) | (1L << (MASTER_DELAY - 387)) | (1L << (MASTER_HEARTBEAT_PERIOD - 387)) | (1L << (MASTER_HOST - 387)) | (1L << (MASTER_LOG_FILE - 387)) | (1L << (MASTER_LOG_POS - 387)) | (1L << (MASTER_PASSWORD - 387)) | (1L << (MASTER_PORT - 387)) | (1L << (MASTER_RETRY_COUNT - 387)) | (1L << (MASTER_SSL - 387)) | (1L << (MASTER_SSL_CA - 387)) | (1L << (MASTER_SSL_CAPATH - 387)) | (1L << (MASTER_SSL_CERT - 387)) | (1L << (MASTER_SSL_CIPHER - 387)) | (1L << (MASTER_SSL_CRL - 387)) | (1L << (MASTER_SSL_CRLPATH - 387)) | (1L << (MASTER_SSL_KEY - 387)) | (1L << (MASTER_TLS_VERSION - 387)) | (1L << (MASTER_USER - 387)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 387)) | (1L << (MAX_QUERIES_PER_HOUR - 387)) | (1L << (MAX_ROWS - 387)) | (1L << (MAX_SIZE - 387)) | (1L << (MAX_UPDATES_PER_HOUR - 387)) | (1L << (MAX_USER_CONNECTIONS - 387)) | (1L << (MEDIUM - 387)) | (1L << (MERGE - 387)) | (1L << (MESSAGE_TEXT - 387)) | (1L << (MID - 387)) | (1L << (MIGRATE - 387)) | (1L << (MIN_ROWS - 387)) | (1L << (MODE - 387)) | (1L << (MODIFY - 387)) | (1L << (MUTEX - 387)) | (1L << (MYSQL - 387)) | (1L << (MYSQL_ERRNO - 387)) | (1L << (NAME - 387)) | (1L << (NAMES - 387)) | (1L << (NCHAR - 387)) | (1L << (NEVER - 387)) | (1L << (NEXT - 387)) | (1L << (NO - 387)) | (1L << (NODEGROUP - 387)) | (1L << (NONE - 387)) | (1L << (OFFLINE - 387)) | (1L << (OFFSET - 387)) | (1L << (OJ - 387)) | (1L << (OLD_PASSWORD - 387)) | (1L << (ONE - 387)) | (1L << (ONLINE - 387)) | (1L << (ONLY - 387)) | (1L << (OPEN - 387)) | (1L << (OPTIMIZER_COSTS - 387)) | (1L << (OPTIONS - 387)) | (1L << (OWNER - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PAGE - 451)) | (1L << (PARSER - 451)) | (1L << (PARTIAL - 451)) | (1L << (PARTITIONING - 451)) | (1L << (PARTITIONS - 451)) | (1L << (PASSWORD - 451)) | (1L << (PHASE - 451)) | (1L << (PLUGIN - 451)) | (1L << (PLUGIN_DIR - 451)) | (1L << (PLUGINS - 451)) | (1L << (PORT - 451)) | (1L << (PRECEDES - 451)) | (1L << (PREPARE - 451)) | (1L << (PRESERVE - 451)) | (1L << (PREV - 451)) | (1L << (PROCESSLIST - 451)) | (1L << (PROFILE - 451)) | (1L << (PROFILES - 451)) | (1L << (PROXY - 451)) | (1L << (QUERY - 451)) | (1L << (QUICK - 451)) | (1L << (REBUILD - 451)) | (1L << (RECOVER - 451)) | (1L << (REDO_BUFFER_SIZE - 451)) | (1L << (REDUNDANT - 451)) | (1L << (RELAY - 451)) | (1L << (RELAY_LOG_FILE - 451)) | (1L << (RELAY_LOG_POS - 451)) | (1L << (RELAYLOG - 451)) | (1L << (REMOVE - 451)) | (1L << (REORGANIZE - 451)) | (1L << (REPAIR - 451)) | (1L << (REPLICATE_DO_DB - 451)) | (1L << (REPLICATE_DO_TABLE - 451)) | (1L << (REPLICATE_IGNORE_DB - 451)) | (1L << (REPLICATE_IGNORE_TABLE - 451)) | (1L << (REPLICATE_REWRITE_DB - 451)) | (1L << (REPLICATE_WILD_DO_TABLE - 451)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 451)) | (1L << (REPLICATION - 451)) | (1L << (RESET - 451)) | (1L << (RESUME - 451)) | (1L << (RETURNED_SQLSTATE - 451)) | (1L << (RETURNS - 451)) | (1L << (ROLLBACK - 451)) | (1L << (ROLLUP - 451)) | (1L << (ROTATE - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (ROW_FORMAT - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SCHEDULE - 451)) | (1L << (SECURITY - 451)) | (1L << (SERVER - 451)) | (1L << (SESSION - 451)) | (1L << (SHARE - 451)) | (1L << (SHARED - 451)) | (1L << (SIGNED - 451)) | (1L << (SIMPLE - 451)) | (1L << (SLAVE - 451)) | (1L << (SLOW - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOCKET - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SOME - 515)) | (1L << (SONAME - 515)) | (1L << (SOUNDS - 515)) | (1L << (SOURCE - 515)) | (1L << (SQL_AFTER_GTIDS - 515)) | (1L << (SQL_AFTER_MTS_GAPS - 515)) | (1L << (SQL_BEFORE_GTIDS - 515)) | (1L << (SQL_BUFFER_RESULT - 515)) | (1L << (SQL_CACHE - 515)) | (1L << (SQL_NO_CACHE - 515)) | (1L << (SQL_THREAD - 515)) | (1L << (START - 515)) | (1L << (STARTS - 515)) | (1L << (STATS_AUTO_RECALC - 515)) | (1L << (STATS_PERSISTENT - 515)) | (1L << (STATS_SAMPLE_PAGES - 515)) | (1L << (STATUS - 515)) | (1L << (STOP - 515)) | (1L << (STORAGE - 515)) | (1L << (STRING - 515)) | (1L << (SUBCLASS_ORIGIN - 515)) | (1L << (SUBJECT - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBPARTITIONS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SWAPS - 515)) | (1L << (SWITCHES - 515)) | (1L << (TABLE_NAME - 515)) | (1L << (TABLESPACE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TEMPTABLE - 515)) | (1L << (THAN - 515)) | (1L << (TRADITIONAL - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRIGGERS - 515)) | (1L << (TRUNCATE - 515)) | (1L << (UNDEFINED - 515)) | (1L << (UNDOFILE - 515)) | (1L << (UNDO_BUFFER_SIZE - 515)) | (1L << (UNINSTALL - 515)) | (1L << (UNKNOWN - 515)) | (1L << (UNTIL - 515)) | (1L << (UPGRADE - 515)) | (1L << (USER - 515)) | (1L << (USE_FRM - 515)) | (1L << (USER_RESOURCES - 515)) | (1L << (VALIDATION - 515)) | (1L << (VALUE - 515)) | (1L << (VARIABLES - 515)) | (1L << (VIEW - 515)) | (1L << (VISIBLE - 515)) | (1L << (WAIT - 515)) | (1L << (WARNINGS - 515)) | (1L << (WITHOUT - 515)) | (1L << (WORK - 515)) | (1L << (WRAPPER - 515)) | (1L << (X509 - 515)) | (1L << (XA - 515)) | (1L << (XML - 515)))) != 0) || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (INTERNAL - 580)) | (1L << (QUARTER - 580)) | (1L << (MONTH - 580)) | (1L << (DAY - 580)) | (1L << (HOUR - 580)) | (1L << (MINUTE - 580)) | (1L << (WEEK - 580)) | (1L << (SECOND - 580)) | (1L << (MICROSECOND - 580)) | (1L << (TABLES - 580)) | (1L << (ROUTINE - 580)) | (1L << (EXECUTE - 580)) | (1L << (FILE - 580)) | (1L << (PROCESS - 580)) | (1L << (RELOAD - 580)) | (1L << (SHUTDOWN - 580)) | (1L << (SUPER - 580)) | (1L << (PRIVILEGES - 580)) | (1L << (SESSION_VARIABLES_ADMIN - 580)) | (1L << (ARMSCII8 - 580)) | (1L << (ASCII - 580)) | (1L << (BIG5 - 580)) | (1L << (CP1250 - 580)) | (1L << (CP1251 - 580)) | (1L << (CP1256 - 580)) | (1L << (CP1257 - 580)) | (1L << (CP850 - 580)) | (1L << (CP852 - 580)) | (1L << (CP866 - 580)) | (1L << (CP932 - 580)) | (1L << (DEC8 - 580)) | (1L << (EUCJPMS - 580)) | (1L << (EUCKR - 580)) | (1L << (GB2312 - 580)) | (1L << (GBK - 580)) | (1L << (GEOSTD8 - 580)) | (1L << (GREEK - 580)) | (1L << (HEBREW - 580)) | (1L << (HP8 - 580)) | (1L << (KEYBCS2 - 580)) | (1L << (KOI8R - 580)) | (1L << (KOI8U - 580)) | (1L << (LATIN1 - 580)) | (1L << (LATIN2 - 580)) | (1L << (LATIN5 - 580)) | (1L << (LATIN7 - 580)) | (1L << (MACCE - 580)) | (1L << (MACROMAN - 580)) | (1L << (SJIS - 580)) | (1L << (SWE7 - 580)) | (1L << (TIS620 - 580)) | (1L << (UCS2 - 580)) | (1L << (UJIS - 580)) | (1L << (UTF16 - 580)) | (1L << (UTF16LE - 580)) | (1L << (UTF32 - 580)) | (1L << (UTF8 - 580)) | (1L << (UTF8MB3 - 580)) | (1L << (UTF8MB4 - 580)) | (1L << (ARCHIVE - 580)) | (1L << (BLACKHOLE - 580)) | (1L << (CSV - 580)) | (1L << (FEDERATED - 580)) | (1L << (INNODB - 580)))) != 0) || ((((_la - 644)) & ~0x3f) == 0 && ((1L << (_la - 644)) & ((1L << (MEMORY - 644)) | (1L << (MRG_MYISAM - 644)) | (1L << (MYISAM - 644)) | (1L << (NDB - 644)) | (1L << (NDBCLUSTER - 644)) | (1L << (PERFORMANCE_SCHEMA - 644)) | (1L << (TOKUDB - 644)) | (1L << (REPEATABLE - 644)) | (1L << (COMMITTED - 644)) | (1L << (UNCOMMITTED - 644)) | (1L << (SERIALIZABLE - 644)) | (1L << (GEOMETRYCOLLECTION - 644)) | (1L << (LINESTRING - 644)) | (1L << (MULTILINESTRING - 644)) | (1L << (MULTIPOINT - 644)) | (1L << (MULTIPOLYGON - 644)) | (1L << (POINT - 644)) | (1L << (POLYGON - 644)) | (1L << (ABS - 644)) | (1L << (ACOS - 644)) | (1L << (ADDDATE - 644)) | (1L << (ADDTIME - 644)) | (1L << (AES_DECRYPT - 644)) | (1L << (AES_ENCRYPT - 644)) | (1L << (AREA - 644)) | (1L << (ASBINARY - 644)) | (1L << (ASIN - 644)) | (1L << (ASTEXT - 644)) | (1L << (ASWKB - 644)) | (1L << (ASWKT - 644)) | (1L << (ASYMMETRIC_DECRYPT - 644)) | (1L << (ASYMMETRIC_DERIVE - 644)) | (1L << (ASYMMETRIC_ENCRYPT - 644)) | (1L << (ASYMMETRIC_SIGN - 644)) | (1L << (ASYMMETRIC_VERIFY - 644)) | (1L << (ATAN - 644)) | (1L << (ATAN2 - 644)) | (1L << (BENCHMARK - 644)) | (1L << (BIN - 644)) | (1L << (BIT_COUNT - 644)) | (1L << (BIT_LENGTH - 644)) | (1L << (BUFFER - 644)) | (1L << (CATALOG_NAME - 644)) | (1L << (CEIL - 644)) | (1L << (CEILING - 644)) | (1L << (CENTROID - 644)) | (1L << (CHARACTER_LENGTH - 644)) | (1L << (CHARSET - 644)) | (1L << (CHAR_LENGTH - 644)) | (1L << (COERCIBILITY - 644)) | (1L << (COLLATION - 644)) | (1L << (COMPRESS - 644)) | (1L << (CONCAT - 644)) | (1L << (CONCAT_WS - 644)) | (1L << (CONNECTION_ID - 644)) | (1L << (CONV - 644)) | (1L << (CONVERT_TZ - 644)) | (1L << (COS - 644)) | (1L << (COT - 644)) | (1L << (CRC32 - 644)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 644)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 644)))) != 0) || ((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (CREATE_DH_PARAMETERS - 708)) | (1L << (CREATE_DIGEST - 708)) | (1L << (CROSSES - 708)) | (1L << (DATEDIFF - 708)) | (1L << (DATE_FORMAT - 708)) | (1L << (DAYNAME - 708)) | (1L << (DAYOFMONTH - 708)) | (1L << (DAYOFWEEK - 708)) | (1L << (DAYOFYEAR - 708)) | (1L << (DECODE - 708)) | (1L << (DEGREES - 708)) | (1L << (DES_DECRYPT - 708)) | (1L << (DES_ENCRYPT - 708)) | (1L << (DIMENSION - 708)) | (1L << (DISJOINT - 708)) | (1L << (ELT - 708)) | (1L << (ENCODE - 708)) | (1L << (ENCRYPT - 708)) | (1L << (ENDPOINT - 708)) | (1L << (ENVELOPE - 708)) | (1L << (EQUALS - 708)) | (1L << (EXP - 708)) | (1L << (EXPORT_SET - 708)) | (1L << (EXTERIORRING - 708)) | (1L << (EXTRACTVALUE - 708)) | (1L << (FIELD - 708)) | (1L << (FIND_IN_SET - 708)) | (1L << (FLOOR - 708)) | (1L << (FORMAT - 708)) | (1L << (FOUND_ROWS - 708)) | (1L << (FROM_BASE64 - 708)) | (1L << (FROM_DAYS - 708)) | (1L << (FROM_UNIXTIME - 708)) | (1L << (GEOMCOLLFROMTEXT - 708)) | (1L << (GEOMCOLLFROMWKB - 708)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 708)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 708)) | (1L << (GEOMETRYFROMTEXT - 708)) | (1L << (GEOMETRYFROMWKB - 708)) | (1L << (GEOMETRYN - 708)) | (1L << (GEOMETRYTYPE - 708)) | (1L << (GEOMFROMTEXT - 708)) | (1L << (GEOMFROMWKB - 708)) | (1L << (GET_FORMAT - 708)) | (1L << (GET_LOCK - 708)) | (1L << (GLENGTH - 708)) | (1L << (GREATEST - 708)) | (1L << (GTID_SUBSET - 708)) | (1L << (GTID_SUBTRACT - 708)) | (1L << (HEX - 708)) | (1L << (IFNULL - 708)) | (1L << (INET6_ATON - 708)) | (1L << (INET6_NTOA - 708)) | (1L << (INET_ATON - 708)) | (1L << (INET_NTOA - 708)) | (1L << (INSTR - 708)) | (1L << (INTERIORRINGN - 708)) | (1L << (INTERSECTS - 708)) | (1L << (ISCLOSED - 708)) | (1L << (ISEMPTY - 708)) | (1L << (ISNULL - 708)) | (1L << (ISSIMPLE - 708)) | (1L << (IS_FREE_LOCK - 708)) | (1L << (IS_IPV4 - 708)))) != 0) || ((((_la - 772)) & ~0x3f) == 0 && ((1L << (_la - 772)) & ((1L << (IS_IPV4_COMPAT - 772)) | (1L << (IS_IPV4_MAPPED - 772)) | (1L << (IS_IPV6 - 772)) | (1L << (IS_USED_LOCK - 772)) | (1L << (LAST_INSERT_ID - 772)) | (1L << (LCASE - 772)) | (1L << (LEAST - 772)) | (1L << (LENGTH - 772)) | (1L << (LINEFROMTEXT - 772)) | (1L << (LINEFROMWKB - 772)) | (1L << (LINESTRINGFROMTEXT - 772)) | (1L << (LINESTRINGFROMWKB - 772)) | (1L << (LN - 772)) | (1L << (LOAD_FILE - 772)) | (1L << (LOCATE - 772)) | (1L << (LOG - 772)) | (1L << (LOG10 - 772)) | (1L << (LOG2 - 772)) | (1L << (LOWER - 772)) | (1L << (LPAD - 772)) | (1L << (LTRIM - 772)) | (1L << (MAKEDATE - 772)) | (1L << (MAKETIME - 772)) | (1L << (MAKE_SET - 772)) | (1L << (MASTER_POS_WAIT - 772)) | (1L << (MBRCONTAINS - 772)) | (1L << (MBRDISJOINT - 772)) | (1L << (MBREQUAL - 772)) | (1L << (MBRINTERSECTS - 772)) | (1L << (MBROVERLAPS - 772)) | (1L << (MBRTOUCHES - 772)) | (1L << (MBRWITHIN - 772)) | (1L << (MD5 - 772)) | (1L << (MLINEFROMTEXT - 772)) | (1L << (MLINEFROMWKB - 772)) | (1L << (MONTHNAME - 772)) | (1L << (MPOINTFROMTEXT - 772)) | (1L << (MPOINTFROMWKB - 772)) | (1L << (MPOLYFROMTEXT - 772)) | (1L << (MPOLYFROMWKB - 772)) | (1L << (MULTILINESTRINGFROMTEXT - 772)) | (1L << (MULTILINESTRINGFROMWKB - 772)) | (1L << (MULTIPOINTFROMTEXT - 772)) | (1L << (MULTIPOINTFROMWKB - 772)) | (1L << (MULTIPOLYGONFROMTEXT - 772)) | (1L << (MULTIPOLYGONFROMWKB - 772)) | (1L << (NAME_CONST - 772)) | (1L << (NULLIF - 772)) | (1L << (NUMGEOMETRIES - 772)) | (1L << (NUMINTERIORRINGS - 772)) | (1L << (NUMPOINTS - 772)) | (1L << (OCT - 772)) | (1L << (OCTET_LENGTH - 772)) | (1L << (ORD - 772)) | (1L << (OVERLAPS - 772)) | (1L << (PERIOD_ADD - 772)) | (1L << (PERIOD_DIFF - 772)) | (1L << (PI - 772)) | (1L << (POINTFROMTEXT - 772)) | (1L << (POINTFROMWKB - 772)) | (1L << (POINTN - 772)) | (1L << (POLYFROMTEXT - 772)) | (1L << (POLYFROMWKB - 772)) | (1L << (POLYGONFROMTEXT - 772)))) != 0) || ((((_la - 836)) & ~0x3f) == 0 && ((1L << (_la - 836)) & ((1L << (POLYGONFROMWKB - 836)) | (1L << (POW - 836)) | (1L << (POWER - 836)) | (1L << (QUOTE - 836)) | (1L << (RADIANS - 836)) | (1L << (RAND - 836)) | (1L << (RANDOM_BYTES - 836)) | (1L << (RELEASE_LOCK - 836)) | (1L << (REVERSE - 836)) | (1L << (ROUND - 836)) | (1L << (ROW_COUNT - 836)) | (1L << (RPAD - 836)) | (1L << (RTRIM - 836)) | (1L << (SEC_TO_TIME - 836)) | (1L << (SESSION_USER - 836)) | (1L << (SHA - 836)) | (1L << (SHA1 - 836)) | (1L << (SHA2 - 836)) | (1L << (SCHEMA_NAME - 836)) | (1L << (SIGN - 836)) | (1L << (SIN - 836)) | (1L << (SLEEP - 836)) | (1L << (SOUNDEX - 836)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 836)) | (1L << (SQRT - 836)) | (1L << (SRID - 836)) | (1L << (STARTPOINT - 836)) | (1L << (STRCMP - 836)) | (1L << (STR_TO_DATE - 836)) | (1L << (ST_AREA - 836)) | (1L << (ST_ASBINARY - 836)) | (1L << (ST_ASTEXT - 836)) | (1L << (ST_ASWKB - 836)) | (1L << (ST_ASWKT - 836)) | (1L << (ST_BUFFER - 836)) | (1L << (ST_CENTROID - 836)) | (1L << (ST_CONTAINS - 836)) | (1L << (ST_CROSSES - 836)) | (1L << (ST_DIFFERENCE - 836)) | (1L << (ST_DIMENSION - 836)) | (1L << (ST_DISJOINT - 836)) | (1L << (ST_DISTANCE - 836)) | (1L << (ST_ENDPOINT - 836)) | (1L << (ST_ENVELOPE - 836)) | (1L << (ST_EQUALS - 836)) | (1L << (ST_EXTERIORRING - 836)) | (1L << (ST_GEOMCOLLFROMTEXT - 836)) | (1L << (ST_GEOMCOLLFROMTXT - 836)) | (1L << (ST_GEOMCOLLFROMWKB - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 836)) | (1L << (ST_GEOMETRYFROMTEXT - 836)) | (1L << (ST_GEOMETRYFROMWKB - 836)) | (1L << (ST_GEOMETRYN - 836)) | (1L << (ST_GEOMETRYTYPE - 836)) | (1L << (ST_GEOMFROMTEXT - 836)) | (1L << (ST_GEOMFROMWKB - 836)) | (1L << (ST_INTERIORRINGN - 836)) | (1L << (ST_INTERSECTION - 836)) | (1L << (ST_INTERSECTS - 836)) | (1L << (ST_ISCLOSED - 836)) | (1L << (ST_ISEMPTY - 836)) | (1L << (ST_ISSIMPLE - 836)) | (1L << (ST_LINEFROMTEXT - 836)))) != 0) || ((((_la - 900)) & ~0x3f) == 0 && ((1L << (_la - 900)) & ((1L << (ST_LINEFROMWKB - 900)) | (1L << (ST_LINESTRINGFROMTEXT - 900)) | (1L << (ST_LINESTRINGFROMWKB - 900)) | (1L << (ST_NUMGEOMETRIES - 900)) | (1L << (ST_NUMINTERIORRING - 900)) | (1L << (ST_NUMINTERIORRINGS - 900)) | (1L << (ST_NUMPOINTS - 900)) | (1L << (ST_OVERLAPS - 900)) | (1L << (ST_POINTFROMTEXT - 900)) | (1L << (ST_POINTFROMWKB - 900)) | (1L << (ST_POINTN - 900)) | (1L << (ST_POLYFROMTEXT - 900)) | (1L << (ST_POLYFROMWKB - 900)) | (1L << (ST_POLYGONFROMTEXT - 900)) | (1L << (ST_POLYGONFROMWKB - 900)) | (1L << (ST_SRID - 900)) | (1L << (ST_STARTPOINT - 900)) | (1L << (ST_SYMDIFFERENCE - 900)) | (1L << (ST_TOUCHES - 900)) | (1L << (ST_UNION - 900)) | (1L << (ST_WITHIN - 900)) | (1L << (ST_X - 900)) | (1L << (ST_Y - 900)) | (1L << (SUBDATE - 900)) | (1L << (SUBSTRING_INDEX - 900)) | (1L << (SUBTIME - 900)) | (1L << (SYSTEM_USER - 900)) | (1L << (TAN - 900)) | (1L << (TIMEDIFF - 900)) | (1L << (TIMESTAMPADD - 900)) | (1L << (TIMESTAMPDIFF - 900)) | (1L << (TIME_FORMAT - 900)) | (1L << (TIME_TO_SEC - 900)) | (1L << (TOUCHES - 900)) | (1L << (TO_BASE64 - 900)) | (1L << (TO_DAYS - 900)) | (1L << (TO_SECONDS - 900)) | (1L << (UCASE - 900)) | (1L << (UNCOMPRESS - 900)) | (1L << (UNCOMPRESSED_LENGTH - 900)) | (1L << (UNHEX - 900)) | (1L << (UNIX_TIMESTAMP - 900)) | (1L << (UPDATEXML - 900)) | (1L << (UPPER - 900)) | (1L << (UUID - 900)) | (1L << (UUID_SHORT - 900)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 900)) | (1L << (VERSION - 900)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 900)) | (1L << (WEEKDAY - 900)) | (1L << (WEEKOFYEAR - 900)) | (1L << (WEIGHT_STRING - 900)) | (1L << (WITHIN - 900)) | (1L << (YEARWEEK - 900)) | (1L << (Y_FUNCTION - 900)) | (1L << (X_FUNCTION - 900)))) != 0) || ((((_la - 994)) & ~0x3f) == 0 && ((1L << (_la - 994)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 994)) | (1L << (STRING_LITERAL - 994)) | (1L << (ID - 994)) | (1L << (REVERSE_QUOTE_ID - 994)))) != 0))
                        {
                            {
                                State = 2365; ((AlterByAddForeignKeyContext)_localctx).indexName = uid();
                            }
                        }

                        State = 2368; indexColumnNames();
                        State = 2369; referenceDefinition();
                    }
                    break;
                case 9:
                    _localctx = new AlterByAddCheckTableConstraintContext(_localctx);
                    EnterOuterAlt(_localctx, 9);
                    {
                        State = 2371; Match(ADD);
                        State = 2376;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == CONSTRAINT)
                        {
                            {
                                State = 2372; Match(CONSTRAINT);
                                State = 2374;
                                ErrorHandler.Sync(this);
                                _la = TokenStream.LA(1);
                                if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)) | (1L << (POSITION - 191)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ACCOUNT - 259)) | (1L << (ACTION - 259)) | (1L << (AFTER - 259)) | (1L << (AGGREGATE - 259)) | (1L << (ALGORITHM - 259)) | (1L << (ANY - 259)) | (1L << (AT - 259)) | (1L << (AUTHORS - 259)) | (1L << (AUTOCOMMIT - 259)) | (1L << (AUTOEXTEND_SIZE - 259)) | (1L << (AUTO_INCREMENT - 259)) | (1L << (AVG_ROW_LENGTH - 259)) | (1L << (BEGIN - 259)) | (1L << (BINLOG - 259)) | (1L << (BIT - 259)) | (1L << (BLOCK - 259)) | (1L << (BOOL - 259)) | (1L << (BOOLEAN - 259)) | (1L << (BTREE - 259)) | (1L << (CACHE - 259)) | (1L << (CASCADED - 259)) | (1L << (CHAIN - 259)) | (1L << (CHANGED - 259)) | (1L << (CHANNEL - 259)) | (1L << (CHECKSUM - 259)) | (1L << (PAGE_CHECKSUM - 259)) | (1L << (CIPHER - 259)) | (1L << (CLASS_ORIGIN - 259)) | (1L << (CLIENT - 259)) | (1L << (CLOSE - 259)) | (1L << (COALESCE - 259)) | (1L << (CODE - 259)) | (1L << (COLUMNS - 259)) | (1L << (COLUMN_FORMAT - 259)) | (1L << (COLUMN_NAME - 259)) | (1L << (COMMENT - 259)) | (1L << (COMMIT - 259)) | (1L << (COMPACT - 259)) | (1L << (COMPLETION - 259)) | (1L << (COMPRESSED - 259)) | (1L << (COMPRESSION - 259)) | (1L << (CONCURRENT - 259)) | (1L << (CONNECTION - 259)) | (1L << (CONSISTENT - 259)) | (1L << (CONSTRAINT_CATALOG - 259)) | (1L << (CONSTRAINT_SCHEMA - 259)) | (1L << (CONSTRAINT_NAME - 259)) | (1L << (CONTAINS - 259)) | (1L << (CONTEXT - 259)) | (1L << (CONTRIBUTORS - 259)) | (1L << (COPY - 259)) | (1L << (CPU - 259)) | (1L << (CURSOR_NAME - 259)) | (1L << (DATA - 259)) | (1L << (DATAFILE - 259)) | (1L << (DEALLOCATE - 259)) | (1L << (DEFAULT_AUTH - 259)) | (1L << (DEFINER - 259)) | (1L << (DELAY_KEY_WRITE - 259)) | (1L << (DES_KEY_FILE - 259)) | (1L << (DIRECTORY - 259)) | (1L << (DISABLE - 259)) | (1L << (DISCARD - 259)) | (1L << (DISK - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (DO - 323)) | (1L << (DUMPFILE - 323)) | (1L << (DUPLICATE - 323)) | (1L << (DYNAMIC - 323)) | (1L << (ENABLE - 323)) | (1L << (ENCRYPTION - 323)) | (1L << (END - 323)) | (1L << (ENDS - 323)) | (1L << (ENGINE - 323)) | (1L << (ENGINES - 323)) | (1L << (ERROR - 323)) | (1L << (ERRORS - 323)) | (1L << (ESCAPE - 323)) | (1L << (EVEN - 323)) | (1L << (EVENT - 323)) | (1L << (EVENTS - 323)) | (1L << (EVERY - 323)) | (1L << (EXCHANGE - 323)) | (1L << (EXCLUSIVE - 323)) | (1L << (EXPIRE - 323)) | (1L << (EXPORT - 323)) | (1L << (EXTENDED - 323)) | (1L << (EXTENT_SIZE - 323)) | (1L << (FAST - 323)) | (1L << (FAULTS - 323)) | (1L << (FIELDS - 323)) | (1L << (FILE_BLOCK_SIZE - 323)) | (1L << (FILTER - 323)) | (1L << (FIRST - 323)) | (1L << (FIXED - 323)) | (1L << (FLUSH - 323)) | (1L << (FOLLOWS - 323)) | (1L << (FOUND - 323)) | (1L << (FULL - 323)) | (1L << (FUNCTION - 323)) | (1L << (GENERAL - 323)) | (1L << (GLOBAL - 323)) | (1L << (GRANTS - 323)) | (1L << (GROUP_REPLICATION - 323)) | (1L << (HANDLER - 323)) | (1L << (HASH - 323)) | (1L << (HELP - 323)) | (1L << (HOST - 323)) | (1L << (HOSTS - 323)) | (1L << (IDENTIFIED - 323)) | (1L << (IGNORE_SERVER_IDS - 323)) | (1L << (IMPORT - 323)) | (1L << (INDEXES - 323)) | (1L << (INITIAL_SIZE - 323)) | (1L << (INPLACE - 323)) | (1L << (INSERT_METHOD - 323)) | (1L << (INSTALL - 323)) | (1L << (INSTANCE - 323)) | (1L << (INVISIBLE - 323)) | (1L << (INVOKER - 323)) | (1L << (IO - 323)) | (1L << (IO_THREAD - 323)) | (1L << (IPC - 323)) | (1L << (ISOLATION - 323)) | (1L << (ISSUER - 323)) | (1L << (JSON - 323)) | (1L << (KEY_BLOCK_SIZE - 323)) | (1L << (LANGUAGE - 323)) | (1L << (LAST - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (LEAVES - 387)) | (1L << (LESS - 387)) | (1L << (LEVEL - 387)) | (1L << (LIST - 387)) | (1L << (LOCAL - 387)) | (1L << (LOGFILE - 387)) | (1L << (LOGS - 387)) | (1L << (MASTER - 387)) | (1L << (MASTER_AUTO_POSITION - 387)) | (1L << (MASTER_CONNECT_RETRY - 387)) | (1L << (MASTER_DELAY - 387)) | (1L << (MASTER_HEARTBEAT_PERIOD - 387)) | (1L << (MASTER_HOST - 387)) | (1L << (MASTER_LOG_FILE - 387)) | (1L << (MASTER_LOG_POS - 387)) | (1L << (MASTER_PASSWORD - 387)) | (1L << (MASTER_PORT - 387)) | (1L << (MASTER_RETRY_COUNT - 387)) | (1L << (MASTER_SSL - 387)) | (1L << (MASTER_SSL_CA - 387)) | (1L << (MASTER_SSL_CAPATH - 387)) | (1L << (MASTER_SSL_CERT - 387)) | (1L << (MASTER_SSL_CIPHER - 387)) | (1L << (MASTER_SSL_CRL - 387)) | (1L << (MASTER_SSL_CRLPATH - 387)) | (1L << (MASTER_SSL_KEY - 387)) | (1L << (MASTER_TLS_VERSION - 387)) | (1L << (MASTER_USER - 387)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 387)) | (1L << (MAX_QUERIES_PER_HOUR - 387)) | (1L << (MAX_ROWS - 387)) | (1L << (MAX_SIZE - 387)) | (1L << (MAX_UPDATES_PER_HOUR - 387)) | (1L << (MAX_USER_CONNECTIONS - 387)) | (1L << (MEDIUM - 387)) | (1L << (MERGE - 387)) | (1L << (MESSAGE_TEXT - 387)) | (1L << (MID - 387)) | (1L << (MIGRATE - 387)) | (1L << (MIN_ROWS - 387)) | (1L << (MODE - 387)) | (1L << (MODIFY - 387)) | (1L << (MUTEX - 387)) | (1L << (MYSQL - 387)) | (1L << (MYSQL_ERRNO - 387)) | (1L << (NAME - 387)) | (1L << (NAMES - 387)) | (1L << (NCHAR - 387)) | (1L << (NEVER - 387)) | (1L << (NEXT - 387)) | (1L << (NO - 387)) | (1L << (NODEGROUP - 387)) | (1L << (NONE - 387)) | (1L << (OFFLINE - 387)) | (1L << (OFFSET - 387)) | (1L << (OJ - 387)) | (1L << (OLD_PASSWORD - 387)) | (1L << (ONE - 387)) | (1L << (ONLINE - 387)) | (1L << (ONLY - 387)) | (1L << (OPEN - 387)) | (1L << (OPTIMIZER_COSTS - 387)) | (1L << (OPTIONS - 387)) | (1L << (OWNER - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PAGE - 451)) | (1L << (PARSER - 451)) | (1L << (PARTIAL - 451)) | (1L << (PARTITIONING - 451)) | (1L << (PARTITIONS - 451)) | (1L << (PASSWORD - 451)) | (1L << (PHASE - 451)) | (1L << (PLUGIN - 451)) | (1L << (PLUGIN_DIR - 451)) | (1L << (PLUGINS - 451)) | (1L << (PORT - 451)) | (1L << (PRECEDES - 451)) | (1L << (PREPARE - 451)) | (1L << (PRESERVE - 451)) | (1L << (PREV - 451)) | (1L << (PROCESSLIST - 451)) | (1L << (PROFILE - 451)) | (1L << (PROFILES - 451)) | (1L << (PROXY - 451)) | (1L << (QUERY - 451)) | (1L << (QUICK - 451)) | (1L << (REBUILD - 451)) | (1L << (RECOVER - 451)) | (1L << (REDO_BUFFER_SIZE - 451)) | (1L << (REDUNDANT - 451)) | (1L << (RELAY - 451)) | (1L << (RELAY_LOG_FILE - 451)) | (1L << (RELAY_LOG_POS - 451)) | (1L << (RELAYLOG - 451)) | (1L << (REMOVE - 451)) | (1L << (REORGANIZE - 451)) | (1L << (REPAIR - 451)) | (1L << (REPLICATE_DO_DB - 451)) | (1L << (REPLICATE_DO_TABLE - 451)) | (1L << (REPLICATE_IGNORE_DB - 451)) | (1L << (REPLICATE_IGNORE_TABLE - 451)) | (1L << (REPLICATE_REWRITE_DB - 451)) | (1L << (REPLICATE_WILD_DO_TABLE - 451)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 451)) | (1L << (REPLICATION - 451)) | (1L << (RESET - 451)) | (1L << (RESUME - 451)) | (1L << (RETURNED_SQLSTATE - 451)) | (1L << (RETURNS - 451)) | (1L << (ROLLBACK - 451)) | (1L << (ROLLUP - 451)) | (1L << (ROTATE - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (ROW_FORMAT - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SCHEDULE - 451)) | (1L << (SECURITY - 451)) | (1L << (SERVER - 451)) | (1L << (SESSION - 451)) | (1L << (SHARE - 451)) | (1L << (SHARED - 451)) | (1L << (SIGNED - 451)) | (1L << (SIMPLE - 451)) | (1L << (SLAVE - 451)) | (1L << (SLOW - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOCKET - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SOME - 515)) | (1L << (SONAME - 515)) | (1L << (SOUNDS - 515)) | (1L << (SOURCE - 515)) | (1L << (SQL_AFTER_GTIDS - 515)) | (1L << (SQL_AFTER_MTS_GAPS - 515)) | (1L << (SQL_BEFORE_GTIDS - 515)) | (1L << (SQL_BUFFER_RESULT - 515)) | (1L << (SQL_CACHE - 515)) | (1L << (SQL_NO_CACHE - 515)) | (1L << (SQL_THREAD - 515)) | (1L << (START - 515)) | (1L << (STARTS - 515)) | (1L << (STATS_AUTO_RECALC - 515)) | (1L << (STATS_PERSISTENT - 515)) | (1L << (STATS_SAMPLE_PAGES - 515)) | (1L << (STATUS - 515)) | (1L << (STOP - 515)) | (1L << (STORAGE - 515)) | (1L << (STRING - 515)) | (1L << (SUBCLASS_ORIGIN - 515)) | (1L << (SUBJECT - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBPARTITIONS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SWAPS - 515)) | (1L << (SWITCHES - 515)) | (1L << (TABLE_NAME - 515)) | (1L << (TABLESPACE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TEMPTABLE - 515)) | (1L << (THAN - 515)) | (1L << (TRADITIONAL - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRIGGERS - 515)) | (1L << (TRUNCATE - 515)) | (1L << (UNDEFINED - 515)) | (1L << (UNDOFILE - 515)) | (1L << (UNDO_BUFFER_SIZE - 515)) | (1L << (UNINSTALL - 515)) | (1L << (UNKNOWN - 515)) | (1L << (UNTIL - 515)) | (1L << (UPGRADE - 515)) | (1L << (USER - 515)) | (1L << (USE_FRM - 515)) | (1L << (USER_RESOURCES - 515)) | (1L << (VALIDATION - 515)) | (1L << (VALUE - 515)) | (1L << (VARIABLES - 515)) | (1L << (VIEW - 515)) | (1L << (VISIBLE - 515)) | (1L << (WAIT - 515)) | (1L << (WARNINGS - 515)) | (1L << (WITHOUT - 515)) | (1L << (WORK - 515)) | (1L << (WRAPPER - 515)) | (1L << (X509 - 515)) | (1L << (XA - 515)) | (1L << (XML - 515)))) != 0) || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (INTERNAL - 580)) | (1L << (QUARTER - 580)) | (1L << (MONTH - 580)) | (1L << (DAY - 580)) | (1L << (HOUR - 580)) | (1L << (MINUTE - 580)) | (1L << (WEEK - 580)) | (1L << (SECOND - 580)) | (1L << (MICROSECOND - 580)) | (1L << (TABLES - 580)) | (1L << (ROUTINE - 580)) | (1L << (EXECUTE - 580)) | (1L << (FILE - 580)) | (1L << (PROCESS - 580)) | (1L << (RELOAD - 580)) | (1L << (SHUTDOWN - 580)) | (1L << (SUPER - 580)) | (1L << (PRIVILEGES - 580)) | (1L << (SESSION_VARIABLES_ADMIN - 580)) | (1L << (ARMSCII8 - 580)) | (1L << (ASCII - 580)) | (1L << (BIG5 - 580)) | (1L << (CP1250 - 580)) | (1L << (CP1251 - 580)) | (1L << (CP1256 - 580)) | (1L << (CP1257 - 580)) | (1L << (CP850 - 580)) | (1L << (CP852 - 580)) | (1L << (CP866 - 580)) | (1L << (CP932 - 580)) | (1L << (DEC8 - 580)) | (1L << (EUCJPMS - 580)) | (1L << (EUCKR - 580)) | (1L << (GB2312 - 580)) | (1L << (GBK - 580)) | (1L << (GEOSTD8 - 580)) | (1L << (GREEK - 580)) | (1L << (HEBREW - 580)) | (1L << (HP8 - 580)) | (1L << (KEYBCS2 - 580)) | (1L << (KOI8R - 580)) | (1L << (KOI8U - 580)) | (1L << (LATIN1 - 580)) | (1L << (LATIN2 - 580)) | (1L << (LATIN5 - 580)) | (1L << (LATIN7 - 580)) | (1L << (MACCE - 580)) | (1L << (MACROMAN - 580)) | (1L << (SJIS - 580)) | (1L << (SWE7 - 580)) | (1L << (TIS620 - 580)) | (1L << (UCS2 - 580)) | (1L << (UJIS - 580)) | (1L << (UTF16 - 580)) | (1L << (UTF16LE - 580)) | (1L << (UTF32 - 580)) | (1L << (UTF8 - 580)) | (1L << (UTF8MB3 - 580)) | (1L << (UTF8MB4 - 580)) | (1L << (ARCHIVE - 580)) | (1L << (BLACKHOLE - 580)) | (1L << (CSV - 580)) | (1L << (FEDERATED - 580)) | (1L << (INNODB - 580)))) != 0) || ((((_la - 644)) & ~0x3f) == 0 && ((1L << (_la - 644)) & ((1L << (MEMORY - 644)) | (1L << (MRG_MYISAM - 644)) | (1L << (MYISAM - 644)) | (1L << (NDB - 644)) | (1L << (NDBCLUSTER - 644)) | (1L << (PERFORMANCE_SCHEMA - 644)) | (1L << (TOKUDB - 644)) | (1L << (REPEATABLE - 644)) | (1L << (COMMITTED - 644)) | (1L << (UNCOMMITTED - 644)) | (1L << (SERIALIZABLE - 644)) | (1L << (GEOMETRYCOLLECTION - 644)) | (1L << (LINESTRING - 644)) | (1L << (MULTILINESTRING - 644)) | (1L << (MULTIPOINT - 644)) | (1L << (MULTIPOLYGON - 644)) | (1L << (POINT - 644)) | (1L << (POLYGON - 644)) | (1L << (ABS - 644)) | (1L << (ACOS - 644)) | (1L << (ADDDATE - 644)) | (1L << (ADDTIME - 644)) | (1L << (AES_DECRYPT - 644)) | (1L << (AES_ENCRYPT - 644)) | (1L << (AREA - 644)) | (1L << (ASBINARY - 644)) | (1L << (ASIN - 644)) | (1L << (ASTEXT - 644)) | (1L << (ASWKB - 644)) | (1L << (ASWKT - 644)) | (1L << (ASYMMETRIC_DECRYPT - 644)) | (1L << (ASYMMETRIC_DERIVE - 644)) | (1L << (ASYMMETRIC_ENCRYPT - 644)) | (1L << (ASYMMETRIC_SIGN - 644)) | (1L << (ASYMMETRIC_VERIFY - 644)) | (1L << (ATAN - 644)) | (1L << (ATAN2 - 644)) | (1L << (BENCHMARK - 644)) | (1L << (BIN - 644)) | (1L << (BIT_COUNT - 644)) | (1L << (BIT_LENGTH - 644)) | (1L << (BUFFER - 644)) | (1L << (CATALOG_NAME - 644)) | (1L << (CEIL - 644)) | (1L << (CEILING - 644)) | (1L << (CENTROID - 644)) | (1L << (CHARACTER_LENGTH - 644)) | (1L << (CHARSET - 644)) | (1L << (CHAR_LENGTH - 644)) | (1L << (COERCIBILITY - 644)) | (1L << (COLLATION - 644)) | (1L << (COMPRESS - 644)) | (1L << (CONCAT - 644)) | (1L << (CONCAT_WS - 644)) | (1L << (CONNECTION_ID - 644)) | (1L << (CONV - 644)) | (1L << (CONVERT_TZ - 644)) | (1L << (COS - 644)) | (1L << (COT - 644)) | (1L << (CRC32 - 644)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 644)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 644)))) != 0) || ((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (CREATE_DH_PARAMETERS - 708)) | (1L << (CREATE_DIGEST - 708)) | (1L << (CROSSES - 708)) | (1L << (DATEDIFF - 708)) | (1L << (DATE_FORMAT - 708)) | (1L << (DAYNAME - 708)) | (1L << (DAYOFMONTH - 708)) | (1L << (DAYOFWEEK - 708)) | (1L << (DAYOFYEAR - 708)) | (1L << (DECODE - 708)) | (1L << (DEGREES - 708)) | (1L << (DES_DECRYPT - 708)) | (1L << (DES_ENCRYPT - 708)) | (1L << (DIMENSION - 708)) | (1L << (DISJOINT - 708)) | (1L << (ELT - 708)) | (1L << (ENCODE - 708)) | (1L << (ENCRYPT - 708)) | (1L << (ENDPOINT - 708)) | (1L << (ENVELOPE - 708)) | (1L << (EQUALS - 708)) | (1L << (EXP - 708)) | (1L << (EXPORT_SET - 708)) | (1L << (EXTERIORRING - 708)) | (1L << (EXTRACTVALUE - 708)) | (1L << (FIELD - 708)) | (1L << (FIND_IN_SET - 708)) | (1L << (FLOOR - 708)) | (1L << (FORMAT - 708)) | (1L << (FOUND_ROWS - 708)) | (1L << (FROM_BASE64 - 708)) | (1L << (FROM_DAYS - 708)) | (1L << (FROM_UNIXTIME - 708)) | (1L << (GEOMCOLLFROMTEXT - 708)) | (1L << (GEOMCOLLFROMWKB - 708)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 708)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 708)) | (1L << (GEOMETRYFROMTEXT - 708)) | (1L << (GEOMETRYFROMWKB - 708)) | (1L << (GEOMETRYN - 708)) | (1L << (GEOMETRYTYPE - 708)) | (1L << (GEOMFROMTEXT - 708)) | (1L << (GEOMFROMWKB - 708)) | (1L << (GET_FORMAT - 708)) | (1L << (GET_LOCK - 708)) | (1L << (GLENGTH - 708)) | (1L << (GREATEST - 708)) | (1L << (GTID_SUBSET - 708)) | (1L << (GTID_SUBTRACT - 708)) | (1L << (HEX - 708)) | (1L << (IFNULL - 708)) | (1L << (INET6_ATON - 708)) | (1L << (INET6_NTOA - 708)) | (1L << (INET_ATON - 708)) | (1L << (INET_NTOA - 708)) | (1L << (INSTR - 708)) | (1L << (INTERIORRINGN - 708)) | (1L << (INTERSECTS - 708)) | (1L << (ISCLOSED - 708)) | (1L << (ISEMPTY - 708)) | (1L << (ISNULL - 708)) | (1L << (ISSIMPLE - 708)) | (1L << (IS_FREE_LOCK - 708)) | (1L << (IS_IPV4 - 708)))) != 0) || ((((_la - 772)) & ~0x3f) == 0 && ((1L << (_la - 772)) & ((1L << (IS_IPV4_COMPAT - 772)) | (1L << (IS_IPV4_MAPPED - 772)) | (1L << (IS_IPV6 - 772)) | (1L << (IS_USED_LOCK - 772)) | (1L << (LAST_INSERT_ID - 772)) | (1L << (LCASE - 772)) | (1L << (LEAST - 772)) | (1L << (LENGTH - 772)) | (1L << (LINEFROMTEXT - 772)) | (1L << (LINEFROMWKB - 772)) | (1L << (LINESTRINGFROMTEXT - 772)) | (1L << (LINESTRINGFROMWKB - 772)) | (1L << (LN - 772)) | (1L << (LOAD_FILE - 772)) | (1L << (LOCATE - 772)) | (1L << (LOG - 772)) | (1L << (LOG10 - 772)) | (1L << (LOG2 - 772)) | (1L << (LOWER - 772)) | (1L << (LPAD - 772)) | (1L << (LTRIM - 772)) | (1L << (MAKEDATE - 772)) | (1L << (MAKETIME - 772)) | (1L << (MAKE_SET - 772)) | (1L << (MASTER_POS_WAIT - 772)) | (1L << (MBRCONTAINS - 772)) | (1L << (MBRDISJOINT - 772)) | (1L << (MBREQUAL - 772)) | (1L << (MBRINTERSECTS - 772)) | (1L << (MBROVERLAPS - 772)) | (1L << (MBRTOUCHES - 772)) | (1L << (MBRWITHIN - 772)) | (1L << (MD5 - 772)) | (1L << (MLINEFROMTEXT - 772)) | (1L << (MLINEFROMWKB - 772)) | (1L << (MONTHNAME - 772)) | (1L << (MPOINTFROMTEXT - 772)) | (1L << (MPOINTFROMWKB - 772)) | (1L << (MPOLYFROMTEXT - 772)) | (1L << (MPOLYFROMWKB - 772)) | (1L << (MULTILINESTRINGFROMTEXT - 772)) | (1L << (MULTILINESTRINGFROMWKB - 772)) | (1L << (MULTIPOINTFROMTEXT - 772)) | (1L << (MULTIPOINTFROMWKB - 772)) | (1L << (MULTIPOLYGONFROMTEXT - 772)) | (1L << (MULTIPOLYGONFROMWKB - 772)) | (1L << (NAME_CONST - 772)) | (1L << (NULLIF - 772)) | (1L << (NUMGEOMETRIES - 772)) | (1L << (NUMINTERIORRINGS - 772)) | (1L << (NUMPOINTS - 772)) | (1L << (OCT - 772)) | (1L << (OCTET_LENGTH - 772)) | (1L << (ORD - 772)) | (1L << (OVERLAPS - 772)) | (1L << (PERIOD_ADD - 772)) | (1L << (PERIOD_DIFF - 772)) | (1L << (PI - 772)) | (1L << (POINTFROMTEXT - 772)) | (1L << (POINTFROMWKB - 772)) | (1L << (POINTN - 772)) | (1L << (POLYFROMTEXT - 772)) | (1L << (POLYFROMWKB - 772)) | (1L << (POLYGONFROMTEXT - 772)))) != 0) || ((((_la - 836)) & ~0x3f) == 0 && ((1L << (_la - 836)) & ((1L << (POLYGONFROMWKB - 836)) | (1L << (POW - 836)) | (1L << (POWER - 836)) | (1L << (QUOTE - 836)) | (1L << (RADIANS - 836)) | (1L << (RAND - 836)) | (1L << (RANDOM_BYTES - 836)) | (1L << (RELEASE_LOCK - 836)) | (1L << (REVERSE - 836)) | (1L << (ROUND - 836)) | (1L << (ROW_COUNT - 836)) | (1L << (RPAD - 836)) | (1L << (RTRIM - 836)) | (1L << (SEC_TO_TIME - 836)) | (1L << (SESSION_USER - 836)) | (1L << (SHA - 836)) | (1L << (SHA1 - 836)) | (1L << (SHA2 - 836)) | (1L << (SCHEMA_NAME - 836)) | (1L << (SIGN - 836)) | (1L << (SIN - 836)) | (1L << (SLEEP - 836)) | (1L << (SOUNDEX - 836)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 836)) | (1L << (SQRT - 836)) | (1L << (SRID - 836)) | (1L << (STARTPOINT - 836)) | (1L << (STRCMP - 836)) | (1L << (STR_TO_DATE - 836)) | (1L << (ST_AREA - 836)) | (1L << (ST_ASBINARY - 836)) | (1L << (ST_ASTEXT - 836)) | (1L << (ST_ASWKB - 836)) | (1L << (ST_ASWKT - 836)) | (1L << (ST_BUFFER - 836)) | (1L << (ST_CENTROID - 836)) | (1L << (ST_CONTAINS - 836)) | (1L << (ST_CROSSES - 836)) | (1L << (ST_DIFFERENCE - 836)) | (1L << (ST_DIMENSION - 836)) | (1L << (ST_DISJOINT - 836)) | (1L << (ST_DISTANCE - 836)) | (1L << (ST_ENDPOINT - 836)) | (1L << (ST_ENVELOPE - 836)) | (1L << (ST_EQUALS - 836)) | (1L << (ST_EXTERIORRING - 836)) | (1L << (ST_GEOMCOLLFROMTEXT - 836)) | (1L << (ST_GEOMCOLLFROMTXT - 836)) | (1L << (ST_GEOMCOLLFROMWKB - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 836)) | (1L << (ST_GEOMETRYFROMTEXT - 836)) | (1L << (ST_GEOMETRYFROMWKB - 836)) | (1L << (ST_GEOMETRYN - 836)) | (1L << (ST_GEOMETRYTYPE - 836)) | (1L << (ST_GEOMFROMTEXT - 836)) | (1L << (ST_GEOMFROMWKB - 836)) | (1L << (ST_INTERIORRINGN - 836)) | (1L << (ST_INTERSECTION - 836)) | (1L << (ST_INTERSECTS - 836)) | (1L << (ST_ISCLOSED - 836)) | (1L << (ST_ISEMPTY - 836)) | (1L << (ST_ISSIMPLE - 836)) | (1L << (ST_LINEFROMTEXT - 836)))) != 0) || ((((_la - 900)) & ~0x3f) == 0 && ((1L << (_la - 900)) & ((1L << (ST_LINEFROMWKB - 900)) | (1L << (ST_LINESTRINGFROMTEXT - 900)) | (1L << (ST_LINESTRINGFROMWKB - 900)) | (1L << (ST_NUMGEOMETRIES - 900)) | (1L << (ST_NUMINTERIORRING - 900)) | (1L << (ST_NUMINTERIORRINGS - 900)) | (1L << (ST_NUMPOINTS - 900)) | (1L << (ST_OVERLAPS - 900)) | (1L << (ST_POINTFROMTEXT - 900)) | (1L << (ST_POINTFROMWKB - 900)) | (1L << (ST_POINTN - 900)) | (1L << (ST_POLYFROMTEXT - 900)) | (1L << (ST_POLYFROMWKB - 900)) | (1L << (ST_POLYGONFROMTEXT - 900)) | (1L << (ST_POLYGONFROMWKB - 900)) | (1L << (ST_SRID - 900)) | (1L << (ST_STARTPOINT - 900)) | (1L << (ST_SYMDIFFERENCE - 900)) | (1L << (ST_TOUCHES - 900)) | (1L << (ST_UNION - 900)) | (1L << (ST_WITHIN - 900)) | (1L << (ST_X - 900)) | (1L << (ST_Y - 900)) | (1L << (SUBDATE - 900)) | (1L << (SUBSTRING_INDEX - 900)) | (1L << (SUBTIME - 900)) | (1L << (SYSTEM_USER - 900)) | (1L << (TAN - 900)) | (1L << (TIMEDIFF - 900)) | (1L << (TIMESTAMPADD - 900)) | (1L << (TIMESTAMPDIFF - 900)) | (1L << (TIME_FORMAT - 900)) | (1L << (TIME_TO_SEC - 900)) | (1L << (TOUCHES - 900)) | (1L << (TO_BASE64 - 900)) | (1L << (TO_DAYS - 900)) | (1L << (TO_SECONDS - 900)) | (1L << (UCASE - 900)) | (1L << (UNCOMPRESS - 900)) | (1L << (UNCOMPRESSED_LENGTH - 900)) | (1L << (UNHEX - 900)) | (1L << (UNIX_TIMESTAMP - 900)) | (1L << (UPDATEXML - 900)) | (1L << (UPPER - 900)) | (1L << (UUID - 900)) | (1L << (UUID_SHORT - 900)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 900)) | (1L << (VERSION - 900)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 900)) | (1L << (WEEKDAY - 900)) | (1L << (WEEKOFYEAR - 900)) | (1L << (WEIGHT_STRING - 900)) | (1L << (WITHIN - 900)) | (1L << (YEARWEEK - 900)) | (1L << (Y_FUNCTION - 900)) | (1L << (X_FUNCTION - 900)))) != 0) || ((((_la - 994)) & ~0x3f) == 0 && ((1L << (_la - 994)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 994)) | (1L << (STRING_LITERAL - 994)) | (1L << (ID - 994)) | (1L << (REVERSE_QUOTE_ID - 994)))) != 0))
                                {
                                    {
                                        State = 2373; ((AlterByAddCheckTableConstraintContext)_localctx).name = uid();
                                    }
                                }

                            }
                        }

                        State = 2378; Match(CHECK);
                        State = 2379; Match(LR_BRACKET);
                        State = 2380; expression(0);
                        State = 2381; Match(RR_BRACKET);
                    }
                    break;
                case 10:
                    _localctx = new AlterBySetAlgorithmContext(_localctx);
                    EnterOuterAlt(_localctx, 10);
                    {
                        State = 2383; Match(ALGORITHM);
                        State = 2385;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == EQUAL_SYMBOL)
                        {
                            {
                                State = 2384; Match(EQUAL_SYMBOL);
                            }
                        }

                        State = 2387;
                        ((AlterBySetAlgorithmContext)_localctx).algType = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == DEFAULT || _la == COPY || _la == INPLACE))
                        {
                            ((AlterBySetAlgorithmContext)_localctx).algType = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                    break;
                case 11:
                    _localctx = new AlterByChangeDefaultContext(_localctx);
                    EnterOuterAlt(_localctx, 11);
                    {
                        State = 2388; Match(ALTER);
                        State = 2390;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == COLUMN)
                        {
                            {
                                State = 2389; Match(COLUMN);
                            }
                        }

                        State = 2392; uid();
                        State = 2398;
                        ErrorHandler.Sync(this);
                        switch (TokenStream.LA(1))
                        {
                            case SET:
                                {
                                    State = 2393; Match(SET);
                                    State = 2394; Match(DEFAULT);
                                    State = 2395; defaultValue();
                                }
                                break;
                            case DROP:
                                {
                                    State = 2396; Match(DROP);
                                    State = 2397; Match(DEFAULT);
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }
                    break;
                case 12:
                    _localctx = new AlterByChangeColumnContext(_localctx);
                    EnterOuterAlt(_localctx, 12);
                    {
                        State = 2400; Match(CHANGE);
                        State = 2402;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == COLUMN)
                        {
                            {
                                State = 2401; Match(COLUMN);
                            }
                        }

                        State = 2404; ((AlterByChangeColumnContext)_localctx).oldColumn = uid();
                        State = 2405; ((AlterByChangeColumnContext)_localctx).newColumn = uid();
                        State = 2406; columnDefinition();
                        State = 2410;
                        ErrorHandler.Sync(this);
                        switch (TokenStream.LA(1))
                        {
                            case FIRST:
                                {
                                    State = 2407; Match(FIRST);
                                }
                                break;
                            case AFTER:
                                {
                                    State = 2408; Match(AFTER);
                                    State = 2409; ((AlterByChangeColumnContext)_localctx).afterColumn = uid();
                                }
                                break;
                            case Eof:
                            case ALTER:
                            case ANALYZE:
                            case CALL:
                            case CHANGE:
                            case CHECK:
                            case CREATE:
                            case DELETE:
                            case DESC:
                            case DESCRIBE:
                            case DROP:
                            case EXPLAIN:
                            case GET:
                            case GRANT:
                            case INSERT:
                            case KILL:
                            case LOAD:
                            case LOCK:
                            case OPTIMIZE:
                            case PARTITION:
                            case PURGE:
                            case RELEASE:
                            case RENAME:
                            case REPLACE:
                            case RESIGNAL:
                            case REVOKE:
                            case SELECT:
                            case SET:
                            case SHOW:
                            case SIGNAL:
                            case UNLOCK:
                            case UPDATE:
                            case USE:
                            case BEGIN:
                            case BINLOG:
                            case CACHE:
                            case CHECKSUM:
                            case COMMIT:
                            case DEALLOCATE:
                            case DO:
                            case FLUSH:
                            case HANDLER:
                            case HELP:
                            case INSTALL:
                            case PREPARE:
                            case REPAIR:
                            case RESET:
                            case ROLLBACK:
                            case SAVEPOINT:
                            case START:
                            case STOP:
                            case TRUNCATE:
                            case UNINSTALL:
                            case XA:
                            case EXECUTE:
                            case SHUTDOWN:
                            case MINUSMINUS:
                            case LR_BRACKET:
                            case COMMA:
                            case SEMI:
                                break;
                            default:
                                break;
                        }
                    }
                    break;
                case 13:
                    _localctx = new AlterByRenameColumnContext(_localctx);
                    EnterOuterAlt(_localctx, 13);
                    {
                        State = 2412; Match(RENAME);
                        State = 2413; Match(COLUMN);
                        State = 2414; ((AlterByRenameColumnContext)_localctx).oldColumn = uid();
                        State = 2415; Match(TO);
                        State = 2416; ((AlterByRenameColumnContext)_localctx).newColumn = uid();
                    }
                    break;
                case 14:
                    _localctx = new AlterByLockContext(_localctx);
                    EnterOuterAlt(_localctx, 14);
                    {
                        State = 2418; Match(LOCK);
                        State = 2420;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == EQUAL_SYMBOL)
                        {
                            {
                                State = 2419; Match(EQUAL_SYMBOL);
                            }
                        }

                        State = 2422;
                        ((AlterByLockContext)_localctx).lockType = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == DEFAULT || _la == EXCLUSIVE || _la == NONE || _la == SHARED))
                        {
                            ((AlterByLockContext)_localctx).lockType = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                    break;
                case 15:
                    _localctx = new AlterByModifyColumnContext(_localctx);
                    EnterOuterAlt(_localctx, 15);
                    {
                        State = 2423; Match(MODIFY);
                        State = 2425;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == COLUMN)
                        {
                            {
                                State = 2424; Match(COLUMN);
                            }
                        }

                        State = 2427; uid();
                        State = 2428; columnDefinition();
                        State = 2432;
                        ErrorHandler.Sync(this);
                        switch (TokenStream.LA(1))
                        {
                            case FIRST:
                                {
                                    State = 2429; Match(FIRST);
                                }
                                break;
                            case AFTER:
                                {
                                    State = 2430; Match(AFTER);
                                    State = 2431; uid();
                                }
                                break;
                            case Eof:
                            case ALTER:
                            case ANALYZE:
                            case CALL:
                            case CHANGE:
                            case CHECK:
                            case CREATE:
                            case DELETE:
                            case DESC:
                            case DESCRIBE:
                            case DROP:
                            case EXPLAIN:
                            case GET:
                            case GRANT:
                            case INSERT:
                            case KILL:
                            case LOAD:
                            case LOCK:
                            case OPTIMIZE:
                            case PARTITION:
                            case PURGE:
                            case RELEASE:
                            case RENAME:
                            case REPLACE:
                            case RESIGNAL:
                            case REVOKE:
                            case SELECT:
                            case SET:
                            case SHOW:
                            case SIGNAL:
                            case UNLOCK:
                            case UPDATE:
                            case USE:
                            case BEGIN:
                            case BINLOG:
                            case CACHE:
                            case CHECKSUM:
                            case COMMIT:
                            case DEALLOCATE:
                            case DO:
                            case FLUSH:
                            case HANDLER:
                            case HELP:
                            case INSTALL:
                            case PREPARE:
                            case REPAIR:
                            case RESET:
                            case ROLLBACK:
                            case SAVEPOINT:
                            case START:
                            case STOP:
                            case TRUNCATE:
                            case UNINSTALL:
                            case XA:
                            case EXECUTE:
                            case SHUTDOWN:
                            case MINUSMINUS:
                            case LR_BRACKET:
                            case COMMA:
                            case SEMI:
                                break;
                            default:
                                break;
                        }
                    }
                    break;
                case 16:
                    _localctx = new AlterByDropColumnContext(_localctx);
                    EnterOuterAlt(_localctx, 16);
                    {
                        State = 2434; Match(DROP);
                        State = 2436;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == COLUMN)
                        {
                            {
                                State = 2435; Match(COLUMN);
                            }
                        }

                        State = 2438; uid();
                        State = 2440;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == RESTRICT)
                        {
                            {
                                State = 2439; Match(RESTRICT);
                            }
                        }

                    }
                    break;
                case 17:
                    _localctx = new AlterByDropPrimaryKeyContext(_localctx);
                    EnterOuterAlt(_localctx, 17);
                    {
                        State = 2442; Match(DROP);
                        State = 2443; Match(PRIMARY);
                        State = 2444; Match(KEY);
                    }
                    break;
                case 18:
                    _localctx = new AlterByRenameIndexContext(_localctx);
                    EnterOuterAlt(_localctx, 18);
                    {
                        State = 2445; Match(RENAME);
                        State = 2446;
                        ((AlterByRenameIndexContext)_localctx).indexFormat = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == INDEX || _la == KEY))
                        {
                            ((AlterByRenameIndexContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                        State = 2447; uid();
                        State = 2448; Match(TO);
                        State = 2449; uid();
                    }
                    break;
                case 19:
                    _localctx = new AlterByDropIndexContext(_localctx);
                    EnterOuterAlt(_localctx, 19);
                    {
                        State = 2451; Match(DROP);
                        State = 2452;
                        ((AlterByDropIndexContext)_localctx).indexFormat = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == INDEX || _la == KEY))
                        {
                            ((AlterByDropIndexContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                        State = 2453; uid();
                    }
                    break;
                case 20:
                    _localctx = new AlterByDropForeignKeyContext(_localctx);
                    EnterOuterAlt(_localctx, 20);
                    {
                        State = 2454; Match(DROP);
                        State = 2455; Match(FOREIGN);
                        State = 2456; Match(KEY);
                        State = 2457; uid();
                    }
                    break;
                case 21:
                    _localctx = new AlterByDisableKeysContext(_localctx);
                    EnterOuterAlt(_localctx, 21);
                    {
                        State = 2458; Match(DISABLE);
                        State = 2459; Match(KEYS);
                    }
                    break;
                case 22:
                    _localctx = new AlterByEnableKeysContext(_localctx);
                    EnterOuterAlt(_localctx, 22);
                    {
                        State = 2460; Match(ENABLE);
                        State = 2461; Match(KEYS);
                    }
                    break;
                case 23:
                    _localctx = new AlterByRenameContext(_localctx);
                    EnterOuterAlt(_localctx, 23);
                    {
                        State = 2462; Match(RENAME);
                        State = 2464;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == AS || _la == TO)
                        {
                            {
                                State = 2463;
                                ((AlterByRenameContext)_localctx).renameFormat = TokenStream.LT(1);
                                _la = TokenStream.LA(1);
                                if (!(_la == AS || _la == TO))
                                {
                                    ((AlterByRenameContext)_localctx).renameFormat = ErrorHandler.RecoverInline(this);
                                }
                                else
                                {
                                    ErrorHandler.ReportMatch(this);
                                    Consume();
                                }
                            }
                        }

                        State = 2468;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 315, Context))
                        {
                            case 1:
                                {
                                    State = 2466; uid();
                                }
                                break;
                            case 2:
                                {
                                    State = 2467; fullId();
                                }
                                break;
                        }
                    }
                    break;
                case 24:
                    _localctx = new AlterByOrderContext(_localctx);
                    EnterOuterAlt(_localctx, 24);
                    {
                        State = 2470; Match(ORDER);
                        State = 2471; Match(BY);
                        State = 2472; uidList();
                    }
                    break;
                case 25:
                    _localctx = new AlterByConvertCharsetContext(_localctx);
                    EnterOuterAlt(_localctx, 25);
                    {
                        State = 2473; Match(CONVERT);
                        State = 2474; Match(TO);
                        State = 2475; Match(CHARACTER);
                        State = 2476; Match(SET);
                        State = 2477; charsetName();
                        State = 2480;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == COLLATE)
                        {
                            {
                                State = 2478; Match(COLLATE);
                                State = 2479; collationName();
                            }
                        }

                    }
                    break;
                case 26:
                    _localctx = new AlterByDefaultCharsetContext(_localctx);
                    EnterOuterAlt(_localctx, 26);
                    {
                        State = 2483;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == DEFAULT)
                        {
                            {
                                State = 2482; Match(DEFAULT);
                            }
                        }

                        State = 2485; Match(CHARACTER);
                        State = 2486; Match(SET);
                        State = 2487; Match(EQUAL_SYMBOL);
                        State = 2488; charsetName();
                        State = 2492;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == COLLATE)
                        {
                            {
                                State = 2489; Match(COLLATE);
                                State = 2490; Match(EQUAL_SYMBOL);
                                State = 2491; collationName();
                            }
                        }

                    }
                    break;
                case 27:
                    _localctx = new AlterByDiscardTablespaceContext(_localctx);
                    EnterOuterAlt(_localctx, 27);
                    {
                        State = 2494; Match(DISCARD);
                        State = 2495; Match(TABLESPACE);
                    }
                    break;
                case 28:
                    _localctx = new AlterByImportTablespaceContext(_localctx);
                    EnterOuterAlt(_localctx, 28);
                    {
                        State = 2496; Match(IMPORT);
                        State = 2497; Match(TABLESPACE);
                    }
                    break;
                case 29:
                    _localctx = new AlterByForceContext(_localctx);
                    EnterOuterAlt(_localctx, 29);
                    {
                        State = 2498; Match(FORCE);
                    }
                    break;
                case 30:
                    _localctx = new AlterByValidateContext(_localctx);
                    EnterOuterAlt(_localctx, 30);
                    {
                        State = 2499;
                        ((AlterByValidateContext)_localctx).validationFormat = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == WITH || _la == WITHOUT))
                        {
                            ((AlterByValidateContext)_localctx).validationFormat = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                        State = 2500; Match(VALIDATION);
                    }
                    break;
                case 31:
                    _localctx = new AlterByAddPartitionContext(_localctx);
                    EnterOuterAlt(_localctx, 31);
                    {
                        State = 2501; Match(ADD);
                        State = 2502; Match(PARTITION);
                        State = 2503; Match(LR_BRACKET);
                        State = 2504; partitionDefinition();
                        State = 2509;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        while (_la == COMMA)
                        {
                            {
                                {
                                    State = 2505; Match(COMMA);
                                    State = 2506; partitionDefinition();
                                }
                            }
                            State = 2511;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                        }
                        State = 2512; Match(RR_BRACKET);
                    }
                    break;
                case 32:
                    _localctx = new AlterByDropPartitionContext(_localctx);
                    EnterOuterAlt(_localctx, 32);
                    {
                        State = 2514; Match(DROP);
                        State = 2515; Match(PARTITION);
                        State = 2516; uidList();
                    }
                    break;
                case 33:
                    _localctx = new AlterByDiscardPartitionContext(_localctx);
                    EnterOuterAlt(_localctx, 33);
                    {
                        State = 2517; Match(DISCARD);
                        State = 2518; Match(PARTITION);
                        State = 2521;
                        ErrorHandler.Sync(this);
                        switch (TokenStream.LA(1))
                        {
                            case CURRENT:
                            case DATABASE:
                            case DIAGNOSTICS:
                            case LEFT:
                            case NUMBER:
                            case RIGHT:
                            case STACKED:
                            case DATE:
                            case TIME:
                            case TIMESTAMP:
                            case DATETIME:
                            case YEAR:
                            case TEXT:
                            case ENUM:
                            case SERIAL:
                            case COUNT:
                            case POSITION:
                            case ACCOUNT:
                            case ACTION:
                            case AFTER:
                            case AGGREGATE:
                            case ALGORITHM:
                            case ANY:
                            case AT:
                            case AUTHORS:
                            case AUTOCOMMIT:
                            case AUTOEXTEND_SIZE:
                            case AUTO_INCREMENT:
                            case AVG_ROW_LENGTH:
                            case BEGIN:
                            case BINLOG:
                            case BIT:
                            case BLOCK:
                            case BOOL:
                            case BOOLEAN:
                            case BTREE:
                            case CACHE:
                            case CASCADED:
                            case CHAIN:
                            case CHANGED:
                            case CHANNEL:
                            case CHECKSUM:
                            case PAGE_CHECKSUM:
                            case CIPHER:
                            case CLASS_ORIGIN:
                            case CLIENT:
                            case CLOSE:
                            case COALESCE:
                            case CODE:
                            case COLUMNS:
                            case COLUMN_FORMAT:
                            case COLUMN_NAME:
                            case COMMENT:
                            case COMMIT:
                            case COMPACT:
                            case COMPLETION:
                            case COMPRESSED:
                            case COMPRESSION:
                            case CONCURRENT:
                            case CONNECTION:
                            case CONSISTENT:
                            case CONSTRAINT_CATALOG:
                            case CONSTRAINT_SCHEMA:
                            case CONSTRAINT_NAME:
                            case CONTAINS:
                            case CONTEXT:
                            case CONTRIBUTORS:
                            case COPY:
                            case CPU:
                            case CURSOR_NAME:
                            case DATA:
                            case DATAFILE:
                            case DEALLOCATE:
                            case DEFAULT_AUTH:
                            case DEFINER:
                            case DELAY_KEY_WRITE:
                            case DES_KEY_FILE:
                            case DIRECTORY:
                            case DISABLE:
                            case DISCARD:
                            case DISK:
                            case DO:
                            case DUMPFILE:
                            case DUPLICATE:
                            case DYNAMIC:
                            case ENABLE:
                            case ENCRYPTION:
                            case END:
                            case ENDS:
                            case ENGINE:
                            case ENGINES:
                            case ERROR:
                            case ERRORS:
                            case ESCAPE:
                            case EVEN:
                            case EVENT:
                            case EVENTS:
                            case EVERY:
                            case EXCHANGE:
                            case EXCLUSIVE:
                            case EXPIRE:
                            case EXPORT:
                            case EXTENDED:
                            case EXTENT_SIZE:
                            case FAST:
                            case FAULTS:
                            case FIELDS:
                            case FILE_BLOCK_SIZE:
                            case FILTER:
                            case FIRST:
                            case FIXED:
                            case FLUSH:
                            case FOLLOWS:
                            case FOUND:
                            case FULL:
                            case FUNCTION:
                            case GENERAL:
                            case GLOBAL:
                            case GRANTS:
                            case GROUP_REPLICATION:
                            case HANDLER:
                            case HASH:
                            case HELP:
                            case HOST:
                            case HOSTS:
                            case IDENTIFIED:
                            case IGNORE_SERVER_IDS:
                            case IMPORT:
                            case INDEXES:
                            case INITIAL_SIZE:
                            case INPLACE:
                            case INSERT_METHOD:
                            case INSTALL:
                            case INSTANCE:
                            case INVISIBLE:
                            case INVOKER:
                            case IO:
                            case IO_THREAD:
                            case IPC:
                            case ISOLATION:
                            case ISSUER:
                            case JSON:
                            case KEY_BLOCK_SIZE:
                            case LANGUAGE:
                            case LAST:
                            case LEAVES:
                            case LESS:
                            case LEVEL:
                            case LIST:
                            case LOCAL:
                            case LOGFILE:
                            case LOGS:
                            case MASTER:
                            case MASTER_AUTO_POSITION:
                            case MASTER_CONNECT_RETRY:
                            case MASTER_DELAY:
                            case MASTER_HEARTBEAT_PERIOD:
                            case MASTER_HOST:
                            case MASTER_LOG_FILE:
                            case MASTER_LOG_POS:
                            case MASTER_PASSWORD:
                            case MASTER_PORT:
                            case MASTER_RETRY_COUNT:
                            case MASTER_SSL:
                            case MASTER_SSL_CA:
                            case MASTER_SSL_CAPATH:
                            case MASTER_SSL_CERT:
                            case MASTER_SSL_CIPHER:
                            case MASTER_SSL_CRL:
                            case MASTER_SSL_CRLPATH:
                            case MASTER_SSL_KEY:
                            case MASTER_TLS_VERSION:
                            case MASTER_USER:
                            case MAX_CONNECTIONS_PER_HOUR:
                            case MAX_QUERIES_PER_HOUR:
                            case MAX_ROWS:
                            case MAX_SIZE:
                            case MAX_UPDATES_PER_HOUR:
                            case MAX_USER_CONNECTIONS:
                            case MEDIUM:
                            case MERGE:
                            case MESSAGE_TEXT:
                            case MID:
                            case MIGRATE:
                            case MIN_ROWS:
                            case MODE:
                            case MODIFY:
                            case MUTEX:
                            case MYSQL:
                            case MYSQL_ERRNO:
                            case NAME:
                            case NAMES:
                            case NCHAR:
                            case NEVER:
                            case NEXT:
                            case NO:
                            case NODEGROUP:
                            case NONE:
                            case OFFLINE:
                            case OFFSET:
                            case OJ:
                            case OLD_PASSWORD:
                            case ONE:
                            case ONLINE:
                            case ONLY:
                            case OPEN:
                            case OPTIMIZER_COSTS:
                            case OPTIONS:
                            case OWNER:
                            case PACK_KEYS:
                            case PAGE:
                            case PARSER:
                            case PARTIAL:
                            case PARTITIONING:
                            case PARTITIONS:
                            case PASSWORD:
                            case PHASE:
                            case PLUGIN:
                            case PLUGIN_DIR:
                            case PLUGINS:
                            case PORT:
                            case PRECEDES:
                            case PREPARE:
                            case PRESERVE:
                            case PREV:
                            case PROCESSLIST:
                            case PROFILE:
                            case PROFILES:
                            case PROXY:
                            case QUERY:
                            case QUICK:
                            case REBUILD:
                            case RECOVER:
                            case REDO_BUFFER_SIZE:
                            case REDUNDANT:
                            case RELAY:
                            case RELAY_LOG_FILE:
                            case RELAY_LOG_POS:
                            case RELAYLOG:
                            case REMOVE:
                            case REORGANIZE:
                            case REPAIR:
                            case REPLICATE_DO_DB:
                            case REPLICATE_DO_TABLE:
                            case REPLICATE_IGNORE_DB:
                            case REPLICATE_IGNORE_TABLE:
                            case REPLICATE_REWRITE_DB:
                            case REPLICATE_WILD_DO_TABLE:
                            case REPLICATE_WILD_IGNORE_TABLE:
                            case REPLICATION:
                            case RESET:
                            case RESUME:
                            case RETURNED_SQLSTATE:
                            case RETURNS:
                            case ROLLBACK:
                            case ROLLUP:
                            case ROTATE:
                            case ROW:
                            case ROWS:
                            case ROW_FORMAT:
                            case SAVEPOINT:
                            case SCHEDULE:
                            case SECURITY:
                            case SERVER:
                            case SESSION:
                            case SHARE:
                            case SHARED:
                            case SIGNED:
                            case SIMPLE:
                            case SLAVE:
                            case SLOW:
                            case SNAPSHOT:
                            case SOCKET:
                            case SOME:
                            case SONAME:
                            case SOUNDS:
                            case SOURCE:
                            case SQL_AFTER_GTIDS:
                            case SQL_AFTER_MTS_GAPS:
                            case SQL_BEFORE_GTIDS:
                            case SQL_BUFFER_RESULT:
                            case SQL_CACHE:
                            case SQL_NO_CACHE:
                            case SQL_THREAD:
                            case START:
                            case STARTS:
                            case STATS_AUTO_RECALC:
                            case STATS_PERSISTENT:
                            case STATS_SAMPLE_PAGES:
                            case STATUS:
                            case STOP:
                            case STORAGE:
                            case STRING:
                            case SUBCLASS_ORIGIN:
                            case SUBJECT:
                            case SUBPARTITION:
                            case SUBPARTITIONS:
                            case SUSPEND:
                            case SWAPS:
                            case SWITCHES:
                            case TABLE_NAME:
                            case TABLESPACE:
                            case TEMPORARY:
                            case TEMPTABLE:
                            case THAN:
                            case TRADITIONAL:
                            case TRANSACTION:
                            case TRIGGERS:
                            case TRUNCATE:
                            case UNDEFINED:
                            case UNDOFILE:
                            case UNDO_BUFFER_SIZE:
                            case UNINSTALL:
                            case UNKNOWN:
                            case UNTIL:
                            case UPGRADE:
                            case USER:
                            case USE_FRM:
                            case USER_RESOURCES:
                            case VALIDATION:
                            case VALUE:
                            case VARIABLES:
                            case VIEW:
                            case VISIBLE:
                            case WAIT:
                            case WARNINGS:
                            case WITHOUT:
                            case WORK:
                            case WRAPPER:
                            case X509:
                            case XA:
                            case XML:
                            case INTERNAL:
                            case QUARTER:
                            case MONTH:
                            case DAY:
                            case HOUR:
                            case MINUTE:
                            case WEEK:
                            case SECOND:
                            case MICROSECOND:
                            case TABLES:
                            case ROUTINE:
                            case EXECUTE:
                            case FILE:
                            case PROCESS:
                            case RELOAD:
                            case SHUTDOWN:
                            case SUPER:
                            case PRIVILEGES:
                            case SESSION_VARIABLES_ADMIN:
                            case ARMSCII8:
                            case ASCII:
                            case BIG5:
                            case CP1250:
                            case CP1251:
                            case CP1256:
                            case CP1257:
                            case CP850:
                            case CP852:
                            case CP866:
                            case CP932:
                            case DEC8:
                            case EUCJPMS:
                            case EUCKR:
                            case GB2312:
                            case GBK:
                            case GEOSTD8:
                            case GREEK:
                            case HEBREW:
                            case HP8:
                            case KEYBCS2:
                            case KOI8R:
                            case KOI8U:
                            case LATIN1:
                            case LATIN2:
                            case LATIN5:
                            case LATIN7:
                            case MACCE:
                            case MACROMAN:
                            case SJIS:
                            case SWE7:
                            case TIS620:
                            case UCS2:
                            case UJIS:
                            case UTF16:
                            case UTF16LE:
                            case UTF32:
                            case UTF8:
                            case UTF8MB3:
                            case UTF8MB4:
                            case ARCHIVE:
                            case BLACKHOLE:
                            case CSV:
                            case FEDERATED:
                            case INNODB:
                            case MEMORY:
                            case MRG_MYISAM:
                            case MYISAM:
                            case NDB:
                            case NDBCLUSTER:
                            case PERFORMANCE_SCHEMA:
                            case TOKUDB:
                            case REPEATABLE:
                            case COMMITTED:
                            case UNCOMMITTED:
                            case SERIALIZABLE:
                            case GEOMETRYCOLLECTION:
                            case LINESTRING:
                            case MULTILINESTRING:
                            case MULTIPOINT:
                            case MULTIPOLYGON:
                            case POINT:
                            case POLYGON:
                            case ABS:
                            case ACOS:
                            case ADDDATE:
                            case ADDTIME:
                            case AES_DECRYPT:
                            case AES_ENCRYPT:
                            case AREA:
                            case ASBINARY:
                            case ASIN:
                            case ASTEXT:
                            case ASWKB:
                            case ASWKT:
                            case ASYMMETRIC_DECRYPT:
                            case ASYMMETRIC_DERIVE:
                            case ASYMMETRIC_ENCRYPT:
                            case ASYMMETRIC_SIGN:
                            case ASYMMETRIC_VERIFY:
                            case ATAN:
                            case ATAN2:
                            case BENCHMARK:
                            case BIN:
                            case BIT_COUNT:
                            case BIT_LENGTH:
                            case BUFFER:
                            case CATALOG_NAME:
                            case CEIL:
                            case CEILING:
                            case CENTROID:
                            case CHARACTER_LENGTH:
                            case CHARSET:
                            case CHAR_LENGTH:
                            case COERCIBILITY:
                            case COLLATION:
                            case COMPRESS:
                            case CONCAT:
                            case CONCAT_WS:
                            case CONNECTION_ID:
                            case CONV:
                            case CONVERT_TZ:
                            case COS:
                            case COT:
                            case CRC32:
                            case CREATE_ASYMMETRIC_PRIV_KEY:
                            case CREATE_ASYMMETRIC_PUB_KEY:
                            case CREATE_DH_PARAMETERS:
                            case CREATE_DIGEST:
                            case CROSSES:
                            case DATEDIFF:
                            case DATE_FORMAT:
                            case DAYNAME:
                            case DAYOFMONTH:
                            case DAYOFWEEK:
                            case DAYOFYEAR:
                            case DECODE:
                            case DEGREES:
                            case DES_DECRYPT:
                            case DES_ENCRYPT:
                            case DIMENSION:
                            case DISJOINT:
                            case ELT:
                            case ENCODE:
                            case ENCRYPT:
                            case ENDPOINT:
                            case ENVELOPE:
                            case EQUALS:
                            case EXP:
                            case EXPORT_SET:
                            case EXTERIORRING:
                            case EXTRACTVALUE:
                            case FIELD:
                            case FIND_IN_SET:
                            case FLOOR:
                            case FORMAT:
                            case FOUND_ROWS:
                            case FROM_BASE64:
                            case FROM_DAYS:
                            case FROM_UNIXTIME:
                            case GEOMCOLLFROMTEXT:
                            case GEOMCOLLFROMWKB:
                            case GEOMETRYCOLLECTIONFROMTEXT:
                            case GEOMETRYCOLLECTIONFROMWKB:
                            case GEOMETRYFROMTEXT:
                            case GEOMETRYFROMWKB:
                            case GEOMETRYN:
                            case GEOMETRYTYPE:
                            case GEOMFROMTEXT:
                            case GEOMFROMWKB:
                            case GET_FORMAT:
                            case GET_LOCK:
                            case GLENGTH:
                            case GREATEST:
                            case GTID_SUBSET:
                            case GTID_SUBTRACT:
                            case HEX:
                            case IFNULL:
                            case INET6_ATON:
                            case INET6_NTOA:
                            case INET_ATON:
                            case INET_NTOA:
                            case INSTR:
                            case INTERIORRINGN:
                            case INTERSECTS:
                            case ISCLOSED:
                            case ISEMPTY:
                            case ISNULL:
                            case ISSIMPLE:
                            case IS_FREE_LOCK:
                            case IS_IPV4:
                            case IS_IPV4_COMPAT:
                            case IS_IPV4_MAPPED:
                            case IS_IPV6:
                            case IS_USED_LOCK:
                            case LAST_INSERT_ID:
                            case LCASE:
                            case LEAST:
                            case LENGTH:
                            case LINEFROMTEXT:
                            case LINEFROMWKB:
                            case LINESTRINGFROMTEXT:
                            case LINESTRINGFROMWKB:
                            case LN:
                            case LOAD_FILE:
                            case LOCATE:
                            case LOG:
                            case LOG10:
                            case LOG2:
                            case LOWER:
                            case LPAD:
                            case LTRIM:
                            case MAKEDATE:
                            case MAKETIME:
                            case MAKE_SET:
                            case MASTER_POS_WAIT:
                            case MBRCONTAINS:
                            case MBRDISJOINT:
                            case MBREQUAL:
                            case MBRINTERSECTS:
                            case MBROVERLAPS:
                            case MBRTOUCHES:
                            case MBRWITHIN:
                            case MD5:
                            case MLINEFROMTEXT:
                            case MLINEFROMWKB:
                            case MONTHNAME:
                            case MPOINTFROMTEXT:
                            case MPOINTFROMWKB:
                            case MPOLYFROMTEXT:
                            case MPOLYFROMWKB:
                            case MULTILINESTRINGFROMTEXT:
                            case MULTILINESTRINGFROMWKB:
                            case MULTIPOINTFROMTEXT:
                            case MULTIPOINTFROMWKB:
                            case MULTIPOLYGONFROMTEXT:
                            case MULTIPOLYGONFROMWKB:
                            case NAME_CONST:
                            case NULLIF:
                            case NUMGEOMETRIES:
                            case NUMINTERIORRINGS:
                            case NUMPOINTS:
                            case OCT:
                            case OCTET_LENGTH:
                            case ORD:
                            case OVERLAPS:
                            case PERIOD_ADD:
                            case PERIOD_DIFF:
                            case PI:
                            case POINTFROMTEXT:
                            case POINTFROMWKB:
                            case POINTN:
                            case POLYFROMTEXT:
                            case POLYFROMWKB:
                            case POLYGONFROMTEXT:
                            case POLYGONFROMWKB:
                            case POW:
                            case POWER:
                            case QUOTE:
                            case RADIANS:
                            case RAND:
                            case RANDOM_BYTES:
                            case RELEASE_LOCK:
                            case REVERSE:
                            case ROUND:
                            case ROW_COUNT:
                            case RPAD:
                            case RTRIM:
                            case SEC_TO_TIME:
                            case SESSION_USER:
                            case SHA:
                            case SHA1:
                            case SHA2:
                            case SCHEMA_NAME:
                            case SIGN:
                            case SIN:
                            case SLEEP:
                            case SOUNDEX:
                            case SQL_THREAD_WAIT_AFTER_GTIDS:
                            case SQRT:
                            case SRID:
                            case STARTPOINT:
                            case STRCMP:
                            case STR_TO_DATE:
                            case ST_AREA:
                            case ST_ASBINARY:
                            case ST_ASTEXT:
                            case ST_ASWKB:
                            case ST_ASWKT:
                            case ST_BUFFER:
                            case ST_CENTROID:
                            case ST_CONTAINS:
                            case ST_CROSSES:
                            case ST_DIFFERENCE:
                            case ST_DIMENSION:
                            case ST_DISJOINT:
                            case ST_DISTANCE:
                            case ST_ENDPOINT:
                            case ST_ENVELOPE:
                            case ST_EQUALS:
                            case ST_EXTERIORRING:
                            case ST_GEOMCOLLFROMTEXT:
                            case ST_GEOMCOLLFROMTXT:
                            case ST_GEOMCOLLFROMWKB:
                            case ST_GEOMETRYCOLLECTIONFROMTEXT:
                            case ST_GEOMETRYCOLLECTIONFROMWKB:
                            case ST_GEOMETRYFROMTEXT:
                            case ST_GEOMETRYFROMWKB:
                            case ST_GEOMETRYN:
                            case ST_GEOMETRYTYPE:
                            case ST_GEOMFROMTEXT:
                            case ST_GEOMFROMWKB:
                            case ST_INTERIORRINGN:
                            case ST_INTERSECTION:
                            case ST_INTERSECTS:
                            case ST_ISCLOSED:
                            case ST_ISEMPTY:
                            case ST_ISSIMPLE:
                            case ST_LINEFROMTEXT:
                            case ST_LINEFROMWKB:
                            case ST_LINESTRINGFROMTEXT:
                            case ST_LINESTRINGFROMWKB:
                            case ST_NUMGEOMETRIES:
                            case ST_NUMINTERIORRING:
                            case ST_NUMINTERIORRINGS:
                            case ST_NUMPOINTS:
                            case ST_OVERLAPS:
                            case ST_POINTFROMTEXT:
                            case ST_POINTFROMWKB:
                            case ST_POINTN:
                            case ST_POLYFROMTEXT:
                            case ST_POLYFROMWKB:
                            case ST_POLYGONFROMTEXT:
                            case ST_POLYGONFROMWKB:
                            case ST_SRID:
                            case ST_STARTPOINT:
                            case ST_SYMDIFFERENCE:
                            case ST_TOUCHES:
                            case ST_UNION:
                            case ST_WITHIN:
                            case ST_X:
                            case ST_Y:
                            case SUBDATE:
                            case SUBSTRING_INDEX:
                            case SUBTIME:
                            case SYSTEM_USER:
                            case TAN:
                            case TIMEDIFF:
                            case TIMESTAMPADD:
                            case TIMESTAMPDIFF:
                            case TIME_FORMAT:
                            case TIME_TO_SEC:
                            case TOUCHES:
                            case TO_BASE64:
                            case TO_DAYS:
                            case TO_SECONDS:
                            case UCASE:
                            case UNCOMPRESS:
                            case UNCOMPRESSED_LENGTH:
                            case UNHEX:
                            case UNIX_TIMESTAMP:
                            case UPDATEXML:
                            case UPPER:
                            case UUID:
                            case UUID_SHORT:
                            case VALIDATE_PASSWORD_STRENGTH:
                            case VERSION:
                            case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
                            case WEEKDAY:
                            case WEEKOFYEAR:
                            case WEIGHT_STRING:
                            case WITHIN:
                            case YEARWEEK:
                            case Y_FUNCTION:
                            case X_FUNCTION:
                            case CHARSET_REVERSE_QOUTE_STRING:
                            case STRING_LITERAL:
                            case ID:
                            case REVERSE_QUOTE_ID:
                                {
                                    State = 2519; uidList();
                                }
                                break;
                            case ALL:
                                {
                                    State = 2520; Match(ALL);
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        State = 2523; Match(TABLESPACE);
                    }
                    break;
                case 34:
                    _localctx = new AlterByImportPartitionContext(_localctx);
                    EnterOuterAlt(_localctx, 34);
                    {
                        State = 2524; Match(IMPORT);
                        State = 2525; Match(PARTITION);
                        State = 2528;
                        ErrorHandler.Sync(this);
                        switch (TokenStream.LA(1))
                        {
                            case CURRENT:
                            case DATABASE:
                            case DIAGNOSTICS:
                            case LEFT:
                            case NUMBER:
                            case RIGHT:
                            case STACKED:
                            case DATE:
                            case TIME:
                            case TIMESTAMP:
                            case DATETIME:
                            case YEAR:
                            case TEXT:
                            case ENUM:
                            case SERIAL:
                            case COUNT:
                            case POSITION:
                            case ACCOUNT:
                            case ACTION:
                            case AFTER:
                            case AGGREGATE:
                            case ALGORITHM:
                            case ANY:
                            case AT:
                            case AUTHORS:
                            case AUTOCOMMIT:
                            case AUTOEXTEND_SIZE:
                            case AUTO_INCREMENT:
                            case AVG_ROW_LENGTH:
                            case BEGIN:
                            case BINLOG:
                            case BIT:
                            case BLOCK:
                            case BOOL:
                            case BOOLEAN:
                            case BTREE:
                            case CACHE:
                            case CASCADED:
                            case CHAIN:
                            case CHANGED:
                            case CHANNEL:
                            case CHECKSUM:
                            case PAGE_CHECKSUM:
                            case CIPHER:
                            case CLASS_ORIGIN:
                            case CLIENT:
                            case CLOSE:
                            case COALESCE:
                            case CODE:
                            case COLUMNS:
                            case COLUMN_FORMAT:
                            case COLUMN_NAME:
                            case COMMENT:
                            case COMMIT:
                            case COMPACT:
                            case COMPLETION:
                            case COMPRESSED:
                            case COMPRESSION:
                            case CONCURRENT:
                            case CONNECTION:
                            case CONSISTENT:
                            case CONSTRAINT_CATALOG:
                            case CONSTRAINT_SCHEMA:
                            case CONSTRAINT_NAME:
                            case CONTAINS:
                            case CONTEXT:
                            case CONTRIBUTORS:
                            case COPY:
                            case CPU:
                            case CURSOR_NAME:
                            case DATA:
                            case DATAFILE:
                            case DEALLOCATE:
                            case DEFAULT_AUTH:
                            case DEFINER:
                            case DELAY_KEY_WRITE:
                            case DES_KEY_FILE:
                            case DIRECTORY:
                            case DISABLE:
                            case DISCARD:
                            case DISK:
                            case DO:
                            case DUMPFILE:
                            case DUPLICATE:
                            case DYNAMIC:
                            case ENABLE:
                            case ENCRYPTION:
                            case END:
                            case ENDS:
                            case ENGINE:
                            case ENGINES:
                            case ERROR:
                            case ERRORS:
                            case ESCAPE:
                            case EVEN:
                            case EVENT:
                            case EVENTS:
                            case EVERY:
                            case EXCHANGE:
                            case EXCLUSIVE:
                            case EXPIRE:
                            case EXPORT:
                            case EXTENDED:
                            case EXTENT_SIZE:
                            case FAST:
                            case FAULTS:
                            case FIELDS:
                            case FILE_BLOCK_SIZE:
                            case FILTER:
                            case FIRST:
                            case FIXED:
                            case FLUSH:
                            case FOLLOWS:
                            case FOUND:
                            case FULL:
                            case FUNCTION:
                            case GENERAL:
                            case GLOBAL:
                            case GRANTS:
                            case GROUP_REPLICATION:
                            case HANDLER:
                            case HASH:
                            case HELP:
                            case HOST:
                            case HOSTS:
                            case IDENTIFIED:
                            case IGNORE_SERVER_IDS:
                            case IMPORT:
                            case INDEXES:
                            case INITIAL_SIZE:
                            case INPLACE:
                            case INSERT_METHOD:
                            case INSTALL:
                            case INSTANCE:
                            case INVISIBLE:
                            case INVOKER:
                            case IO:
                            case IO_THREAD:
                            case IPC:
                            case ISOLATION:
                            case ISSUER:
                            case JSON:
                            case KEY_BLOCK_SIZE:
                            case LANGUAGE:
                            case LAST:
                            case LEAVES:
                            case LESS:
                            case LEVEL:
                            case LIST:
                            case LOCAL:
                            case LOGFILE:
                            case LOGS:
                            case MASTER:
                            case MASTER_AUTO_POSITION:
                            case MASTER_CONNECT_RETRY:
                            case MASTER_DELAY:
                            case MASTER_HEARTBEAT_PERIOD:
                            case MASTER_HOST:
                            case MASTER_LOG_FILE:
                            case MASTER_LOG_POS:
                            case MASTER_PASSWORD:
                            case MASTER_PORT:
                            case MASTER_RETRY_COUNT:
                            case MASTER_SSL:
                            case MASTER_SSL_CA:
                            case MASTER_SSL_CAPATH:
                            case MASTER_SSL_CERT:
                            case MASTER_SSL_CIPHER:
                            case MASTER_SSL_CRL:
                            case MASTER_SSL_CRLPATH:
                            case MASTER_SSL_KEY:
                            case MASTER_TLS_VERSION:
                            case MASTER_USER:
                            case MAX_CONNECTIONS_PER_HOUR:
                            case MAX_QUERIES_PER_HOUR:
                            case MAX_ROWS:
                            case MAX_SIZE:
                            case MAX_UPDATES_PER_HOUR:
                            case MAX_USER_CONNECTIONS:
                            case MEDIUM:
                            case MERGE:
                            case MESSAGE_TEXT:
                            case MID:
                            case MIGRATE:
                            case MIN_ROWS:
                            case MODE:
                            case MODIFY:
                            case MUTEX:
                            case MYSQL:
                            case MYSQL_ERRNO:
                            case NAME:
                            case NAMES:
                            case NCHAR:
                            case NEVER:
                            case NEXT:
                            case NO:
                            case NODEGROUP:
                            case NONE:
                            case OFFLINE:
                            case OFFSET:
                            case OJ:
                            case OLD_PASSWORD:
                            case ONE:
                            case ONLINE:
                            case ONLY:
                            case OPEN:
                            case OPTIMIZER_COSTS:
                            case OPTIONS:
                            case OWNER:
                            case PACK_KEYS:
                            case PAGE:
                            case PARSER:
                            case PARTIAL:
                            case PARTITIONING:
                            case PARTITIONS:
                            case PASSWORD:
                            case PHASE:
                            case PLUGIN:
                            case PLUGIN_DIR:
                            case PLUGINS:
                            case PORT:
                            case PRECEDES:
                            case PREPARE:
                            case PRESERVE:
                            case PREV:
                            case PROCESSLIST:
                            case PROFILE:
                            case PROFILES:
                            case PROXY:
                            case QUERY:
                            case QUICK:
                            case REBUILD:
                            case RECOVER:
                            case REDO_BUFFER_SIZE:
                            case REDUNDANT:
                            case RELAY:
                            case RELAY_LOG_FILE:
                            case RELAY_LOG_POS:
                            case RELAYLOG:
                            case REMOVE:
                            case REORGANIZE:
                            case REPAIR:
                            case REPLICATE_DO_DB:
                            case REPLICATE_DO_TABLE:
                            case REPLICATE_IGNORE_DB:
                            case REPLICATE_IGNORE_TABLE:
                            case REPLICATE_REWRITE_DB:
                            case REPLICATE_WILD_DO_TABLE:
                            case REPLICATE_WILD_IGNORE_TABLE:
                            case REPLICATION:
                            case RESET:
                            case RESUME:
                            case RETURNED_SQLSTATE:
                            case RETURNS:
                            case ROLLBACK:
                            case ROLLUP:
                            case ROTATE:
                            case ROW:
                            case ROWS:
                            case ROW_FORMAT:
                            case SAVEPOINT:
                            case SCHEDULE:
                            case SECURITY:
                            case SERVER:
                            case SESSION:
                            case SHARE:
                            case SHARED:
                            case SIGNED:
                            case SIMPLE:
                            case SLAVE:
                            case SLOW:
                            case SNAPSHOT:
                            case SOCKET:
                            case SOME:
                            case SONAME:
                            case SOUNDS:
                            case SOURCE:
                            case SQL_AFTER_GTIDS:
                            case SQL_AFTER_MTS_GAPS:
                            case SQL_BEFORE_GTIDS:
                            case SQL_BUFFER_RESULT:
                            case SQL_CACHE:
                            case SQL_NO_CACHE:
                            case SQL_THREAD:
                            case START:
                            case STARTS:
                            case STATS_AUTO_RECALC:
                            case STATS_PERSISTENT:
                            case STATS_SAMPLE_PAGES:
                            case STATUS:
                            case STOP:
                            case STORAGE:
                            case STRING:
                            case SUBCLASS_ORIGIN:
                            case SUBJECT:
                            case SUBPARTITION:
                            case SUBPARTITIONS:
                            case SUSPEND:
                            case SWAPS:
                            case SWITCHES:
                            case TABLE_NAME:
                            case TABLESPACE:
                            case TEMPORARY:
                            case TEMPTABLE:
                            case THAN:
                            case TRADITIONAL:
                            case TRANSACTION:
                            case TRIGGERS:
                            case TRUNCATE:
                            case UNDEFINED:
                            case UNDOFILE:
                            case UNDO_BUFFER_SIZE:
                            case UNINSTALL:
                            case UNKNOWN:
                            case UNTIL:
                            case UPGRADE:
                            case USER:
                            case USE_FRM:
                            case USER_RESOURCES:
                            case VALIDATION:
                            case VALUE:
                            case VARIABLES:
                            case VIEW:
                            case VISIBLE:
                            case WAIT:
                            case WARNINGS:
                            case WITHOUT:
                            case WORK:
                            case WRAPPER:
                            case X509:
                            case XA:
                            case XML:
                            case INTERNAL:
                            case QUARTER:
                            case MONTH:
                            case DAY:
                            case HOUR:
                            case MINUTE:
                            case WEEK:
                            case SECOND:
                            case MICROSECOND:
                            case TABLES:
                            case ROUTINE:
                            case EXECUTE:
                            case FILE:
                            case PROCESS:
                            case RELOAD:
                            case SHUTDOWN:
                            case SUPER:
                            case PRIVILEGES:
                            case SESSION_VARIABLES_ADMIN:
                            case ARMSCII8:
                            case ASCII:
                            case BIG5:
                            case CP1250:
                            case CP1251:
                            case CP1256:
                            case CP1257:
                            case CP850:
                            case CP852:
                            case CP866:
                            case CP932:
                            case DEC8:
                            case EUCJPMS:
                            case EUCKR:
                            case GB2312:
                            case GBK:
                            case GEOSTD8:
                            case GREEK:
                            case HEBREW:
                            case HP8:
                            case KEYBCS2:
                            case KOI8R:
                            case KOI8U:
                            case LATIN1:
                            case LATIN2:
                            case LATIN5:
                            case LATIN7:
                            case MACCE:
                            case MACROMAN:
                            case SJIS:
                            case SWE7:
                            case TIS620:
                            case UCS2:
                            case UJIS:
                            case UTF16:
                            case UTF16LE:
                            case UTF32:
                            case UTF8:
                            case UTF8MB3:
                            case UTF8MB4:
                            case ARCHIVE:
                            case BLACKHOLE:
                            case CSV:
                            case FEDERATED:
                            case INNODB:
                            case MEMORY:
                            case MRG_MYISAM:
                            case MYISAM:
                            case NDB:
                            case NDBCLUSTER:
                            case PERFORMANCE_SCHEMA:
                            case TOKUDB:
                            case REPEATABLE:
                            case COMMITTED:
                            case UNCOMMITTED:
                            case SERIALIZABLE:
                            case GEOMETRYCOLLECTION:
                            case LINESTRING:
                            case MULTILINESTRING:
                            case MULTIPOINT:
                            case MULTIPOLYGON:
                            case POINT:
                            case POLYGON:
                            case ABS:
                            case ACOS:
                            case ADDDATE:
                            case ADDTIME:
                            case AES_DECRYPT:
                            case AES_ENCRYPT:
                            case AREA:
                            case ASBINARY:
                            case ASIN:
                            case ASTEXT:
                            case ASWKB:
                            case ASWKT:
                            case ASYMMETRIC_DECRYPT:
                            case ASYMMETRIC_DERIVE:
                            case ASYMMETRIC_ENCRYPT:
                            case ASYMMETRIC_SIGN:
                            case ASYMMETRIC_VERIFY:
                            case ATAN:
                            case ATAN2:
                            case BENCHMARK:
                            case BIN:
                            case BIT_COUNT:
                            case BIT_LENGTH:
                            case BUFFER:
                            case CATALOG_NAME:
                            case CEIL:
                            case CEILING:
                            case CENTROID:
                            case CHARACTER_LENGTH:
                            case CHARSET:
                            case CHAR_LENGTH:
                            case COERCIBILITY:
                            case COLLATION:
                            case COMPRESS:
                            case CONCAT:
                            case CONCAT_WS:
                            case CONNECTION_ID:
                            case CONV:
                            case CONVERT_TZ:
                            case COS:
                            case COT:
                            case CRC32:
                            case CREATE_ASYMMETRIC_PRIV_KEY:
                            case CREATE_ASYMMETRIC_PUB_KEY:
                            case CREATE_DH_PARAMETERS:
                            case CREATE_DIGEST:
                            case CROSSES:
                            case DATEDIFF:
                            case DATE_FORMAT:
                            case DAYNAME:
                            case DAYOFMONTH:
                            case DAYOFWEEK:
                            case DAYOFYEAR:
                            case DECODE:
                            case DEGREES:
                            case DES_DECRYPT:
                            case DES_ENCRYPT:
                            case DIMENSION:
                            case DISJOINT:
                            case ELT:
                            case ENCODE:
                            case ENCRYPT:
                            case ENDPOINT:
                            case ENVELOPE:
                            case EQUALS:
                            case EXP:
                            case EXPORT_SET:
                            case EXTERIORRING:
                            case EXTRACTVALUE:
                            case FIELD:
                            case FIND_IN_SET:
                            case FLOOR:
                            case FORMAT:
                            case FOUND_ROWS:
                            case FROM_BASE64:
                            case FROM_DAYS:
                            case FROM_UNIXTIME:
                            case GEOMCOLLFROMTEXT:
                            case GEOMCOLLFROMWKB:
                            case GEOMETRYCOLLECTIONFROMTEXT:
                            case GEOMETRYCOLLECTIONFROMWKB:
                            case GEOMETRYFROMTEXT:
                            case GEOMETRYFROMWKB:
                            case GEOMETRYN:
                            case GEOMETRYTYPE:
                            case GEOMFROMTEXT:
                            case GEOMFROMWKB:
                            case GET_FORMAT:
                            case GET_LOCK:
                            case GLENGTH:
                            case GREATEST:
                            case GTID_SUBSET:
                            case GTID_SUBTRACT:
                            case HEX:
                            case IFNULL:
                            case INET6_ATON:
                            case INET6_NTOA:
                            case INET_ATON:
                            case INET_NTOA:
                            case INSTR:
                            case INTERIORRINGN:
                            case INTERSECTS:
                            case ISCLOSED:
                            case ISEMPTY:
                            case ISNULL:
                            case ISSIMPLE:
                            case IS_FREE_LOCK:
                            case IS_IPV4:
                            case IS_IPV4_COMPAT:
                            case IS_IPV4_MAPPED:
                            case IS_IPV6:
                            case IS_USED_LOCK:
                            case LAST_INSERT_ID:
                            case LCASE:
                            case LEAST:
                            case LENGTH:
                            case LINEFROMTEXT:
                            case LINEFROMWKB:
                            case LINESTRINGFROMTEXT:
                            case LINESTRINGFROMWKB:
                            case LN:
                            case LOAD_FILE:
                            case LOCATE:
                            case LOG:
                            case LOG10:
                            case LOG2:
                            case LOWER:
                            case LPAD:
                            case LTRIM:
                            case MAKEDATE:
                            case MAKETIME:
                            case MAKE_SET:
                            case MASTER_POS_WAIT:
                            case MBRCONTAINS:
                            case MBRDISJOINT:
                            case MBREQUAL:
                            case MBRINTERSECTS:
                            case MBROVERLAPS:
                            case MBRTOUCHES:
                            case MBRWITHIN:
                            case MD5:
                            case MLINEFROMTEXT:
                            case MLINEFROMWKB:
                            case MONTHNAME:
                            case MPOINTFROMTEXT:
                            case MPOINTFROMWKB:
                            case MPOLYFROMTEXT:
                            case MPOLYFROMWKB:
                            case MULTILINESTRINGFROMTEXT:
                            case MULTILINESTRINGFROMWKB:
                            case MULTIPOINTFROMTEXT:
                            case MULTIPOINTFROMWKB:
                            case MULTIPOLYGONFROMTEXT:
                            case MULTIPOLYGONFROMWKB:
                            case NAME_CONST:
                            case NULLIF:
                            case NUMGEOMETRIES:
                            case NUMINTERIORRINGS:
                            case NUMPOINTS:
                            case OCT:
                            case OCTET_LENGTH:
                            case ORD:
                            case OVERLAPS:
                            case PERIOD_ADD:
                            case PERIOD_DIFF:
                            case PI:
                            case POINTFROMTEXT:
                            case POINTFROMWKB:
                            case POINTN:
                            case POLYFROMTEXT:
                            case POLYFROMWKB:
                            case POLYGONFROMTEXT:
                            case POLYGONFROMWKB:
                            case POW:
                            case POWER:
                            case QUOTE:
                            case RADIANS:
                            case RAND:
                            case RANDOM_BYTES:
                            case RELEASE_LOCK:
                            case REVERSE:
                            case ROUND:
                            case ROW_COUNT:
                            case RPAD:
                            case RTRIM:
                            case SEC_TO_TIME:
                            case SESSION_USER:
                            case SHA:
                            case SHA1:
                            case SHA2:
                            case SCHEMA_NAME:
                            case SIGN:
                            case SIN:
                            case SLEEP:
                            case SOUNDEX:
                            case SQL_THREAD_WAIT_AFTER_GTIDS:
                            case SQRT:
                            case SRID:
                            case STARTPOINT:
                            case STRCMP:
                            case STR_TO_DATE:
                            case ST_AREA:
                            case ST_ASBINARY:
                            case ST_ASTEXT:
                            case ST_ASWKB:
                            case ST_ASWKT:
                            case ST_BUFFER:
                            case ST_CENTROID:
                            case ST_CONTAINS:
                            case ST_CROSSES:
                            case ST_DIFFERENCE:
                            case ST_DIMENSION:
                            case ST_DISJOINT:
                            case ST_DISTANCE:
                            case ST_ENDPOINT:
                            case ST_ENVELOPE:
                            case ST_EQUALS:
                            case ST_EXTERIORRING:
                            case ST_GEOMCOLLFROMTEXT:
                            case ST_GEOMCOLLFROMTXT:
                            case ST_GEOMCOLLFROMWKB:
                            case ST_GEOMETRYCOLLECTIONFROMTEXT:
                            case ST_GEOMETRYCOLLECTIONFROMWKB:
                            case ST_GEOMETRYFROMTEXT:
                            case ST_GEOMETRYFROMWKB:
                            case ST_GEOMETRYN:
                            case ST_GEOMETRYTYPE:
                            case ST_GEOMFROMTEXT:
                            case ST_GEOMFROMWKB:
                            case ST_INTERIORRINGN:
                            case ST_INTERSECTION:
                            case ST_INTERSECTS:
                            case ST_ISCLOSED:
                            case ST_ISEMPTY:
                            case ST_ISSIMPLE:
                            case ST_LINEFROMTEXT:
                            case ST_LINEFROMWKB:
                            case ST_LINESTRINGFROMTEXT:
                            case ST_LINESTRINGFROMWKB:
                            case ST_NUMGEOMETRIES:
                            case ST_NUMINTERIORRING:
                            case ST_NUMINTERIORRINGS:
                            case ST_NUMPOINTS:
                            case ST_OVERLAPS:
                            case ST_POINTFROMTEXT:
                            case ST_POINTFROMWKB:
                            case ST_POINTN:
                            case ST_POLYFROMTEXT:
                            case ST_POLYFROMWKB:
                            case ST_POLYGONFROMTEXT:
                            case ST_POLYGONFROMWKB:
                            case ST_SRID:
                            case ST_STARTPOINT:
                            case ST_SYMDIFFERENCE:
                            case ST_TOUCHES:
                            case ST_UNION:
                            case ST_WITHIN:
                            case ST_X:
                            case ST_Y:
                            case SUBDATE:
                            case SUBSTRING_INDEX:
                            case SUBTIME:
                            case SYSTEM_USER:
                            case TAN:
                            case TIMEDIFF:
                            case TIMESTAMPADD:
                            case TIMESTAMPDIFF:
                            case TIME_FORMAT:
                            case TIME_TO_SEC:
                            case TOUCHES:
                            case TO_BASE64:
                            case TO_DAYS:
                            case TO_SECONDS:
                            case UCASE:
                            case UNCOMPRESS:
                            case UNCOMPRESSED_LENGTH:
                            case UNHEX:
                            case UNIX_TIMESTAMP:
                            case UPDATEXML:
                            case UPPER:
                            case UUID:
                            case UUID_SHORT:
                            case VALIDATE_PASSWORD_STRENGTH:
                            case VERSION:
                            case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
                            case WEEKDAY:
                            case WEEKOFYEAR:
                            case WEIGHT_STRING:
                            case WITHIN:
                            case YEARWEEK:
                            case Y_FUNCTION:
                            case X_FUNCTION:
                            case CHARSET_REVERSE_QOUTE_STRING:
                            case STRING_LITERAL:
                            case ID:
                            case REVERSE_QUOTE_ID:
                                {
                                    State = 2526; uidList();
                                }
                                break;
                            case ALL:
                                {
                                    State = 2527; Match(ALL);
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        State = 2530; Match(TABLESPACE);
                    }
                    break;
                case 35:
                    _localctx = new AlterByTruncatePartitionContext(_localctx);
                    EnterOuterAlt(_localctx, 35);
                    {
                        State = 2531; Match(TRUNCATE);
                        State = 2532; Match(PARTITION);
                        State = 2535;
                        ErrorHandler.Sync(this);
                        switch (TokenStream.LA(1))
                        {
                            case CURRENT:
                            case DATABASE:
                            case DIAGNOSTICS:
                            case LEFT:
                            case NUMBER:
                            case RIGHT:
                            case STACKED:
                            case DATE:
                            case TIME:
                            case TIMESTAMP:
                            case DATETIME:
                            case YEAR:
                            case TEXT:
                            case ENUM:
                            case SERIAL:
                            case COUNT:
                            case POSITION:
                            case ACCOUNT:
                            case ACTION:
                            case AFTER:
                            case AGGREGATE:
                            case ALGORITHM:
                            case ANY:
                            case AT:
                            case AUTHORS:
                            case AUTOCOMMIT:
                            case AUTOEXTEND_SIZE:
                            case AUTO_INCREMENT:
                            case AVG_ROW_LENGTH:
                            case BEGIN:
                            case BINLOG:
                            case BIT:
                            case BLOCK:
                            case BOOL:
                            case BOOLEAN:
                            case BTREE:
                            case CACHE:
                            case CASCADED:
                            case CHAIN:
                            case CHANGED:
                            case CHANNEL:
                            case CHECKSUM:
                            case PAGE_CHECKSUM:
                            case CIPHER:
                            case CLASS_ORIGIN:
                            case CLIENT:
                            case CLOSE:
                            case COALESCE:
                            case CODE:
                            case COLUMNS:
                            case COLUMN_FORMAT:
                            case COLUMN_NAME:
                            case COMMENT:
                            case COMMIT:
                            case COMPACT:
                            case COMPLETION:
                            case COMPRESSED:
                            case COMPRESSION:
                            case CONCURRENT:
                            case CONNECTION:
                            case CONSISTENT:
                            case CONSTRAINT_CATALOG:
                            case CONSTRAINT_SCHEMA:
                            case CONSTRAINT_NAME:
                            case CONTAINS:
                            case CONTEXT:
                            case CONTRIBUTORS:
                            case COPY:
                            case CPU:
                            case CURSOR_NAME:
                            case DATA:
                            case DATAFILE:
                            case DEALLOCATE:
                            case DEFAULT_AUTH:
                            case DEFINER:
                            case DELAY_KEY_WRITE:
                            case DES_KEY_FILE:
                            case DIRECTORY:
                            case DISABLE:
                            case DISCARD:
                            case DISK:
                            case DO:
                            case DUMPFILE:
                            case DUPLICATE:
                            case DYNAMIC:
                            case ENABLE:
                            case ENCRYPTION:
                            case END:
                            case ENDS:
                            case ENGINE:
                            case ENGINES:
                            case ERROR:
                            case ERRORS:
                            case ESCAPE:
                            case EVEN:
                            case EVENT:
                            case EVENTS:
                            case EVERY:
                            case EXCHANGE:
                            case EXCLUSIVE:
                            case EXPIRE:
                            case EXPORT:
                            case EXTENDED:
                            case EXTENT_SIZE:
                            case FAST:
                            case FAULTS:
                            case FIELDS:
                            case FILE_BLOCK_SIZE:
                            case FILTER:
                            case FIRST:
                            case FIXED:
                            case FLUSH:
                            case FOLLOWS:
                            case FOUND:
                            case FULL:
                            case FUNCTION:
                            case GENERAL:
                            case GLOBAL:
                            case GRANTS:
                            case GROUP_REPLICATION:
                            case HANDLER:
                            case HASH:
                            case HELP:
                            case HOST:
                            case HOSTS:
                            case IDENTIFIED:
                            case IGNORE_SERVER_IDS:
                            case IMPORT:
                            case INDEXES:
                            case INITIAL_SIZE:
                            case INPLACE:
                            case INSERT_METHOD:
                            case INSTALL:
                            case INSTANCE:
                            case INVISIBLE:
                            case INVOKER:
                            case IO:
                            case IO_THREAD:
                            case IPC:
                            case ISOLATION:
                            case ISSUER:
                            case JSON:
                            case KEY_BLOCK_SIZE:
                            case LANGUAGE:
                            case LAST:
                            case LEAVES:
                            case LESS:
                            case LEVEL:
                            case LIST:
                            case LOCAL:
                            case LOGFILE:
                            case LOGS:
                            case MASTER:
                            case MASTER_AUTO_POSITION:
                            case MASTER_CONNECT_RETRY:
                            case MASTER_DELAY:
                            case MASTER_HEARTBEAT_PERIOD:
                            case MASTER_HOST:
                            case MASTER_LOG_FILE:
                            case MASTER_LOG_POS:
                            case MASTER_PASSWORD:
                            case MASTER_PORT:
                            case MASTER_RETRY_COUNT:
                            case MASTER_SSL:
                            case MASTER_SSL_CA:
                            case MASTER_SSL_CAPATH:
                            case MASTER_SSL_CERT:
                            case MASTER_SSL_CIPHER:
                            case MASTER_SSL_CRL:
                            case MASTER_SSL_CRLPATH:
                            case MASTER_SSL_KEY:
                            case MASTER_TLS_VERSION:
                            case MASTER_USER:
                            case MAX_CONNECTIONS_PER_HOUR:
                            case MAX_QUERIES_PER_HOUR:
                            case MAX_ROWS:
                            case MAX_SIZE:
                            case MAX_UPDATES_PER_HOUR:
                            case MAX_USER_CONNECTIONS:
                            case MEDIUM:
                            case MERGE:
                            case MESSAGE_TEXT:
                            case MID:
                            case MIGRATE:
                            case MIN_ROWS:
                            case MODE:
                            case MODIFY:
                            case MUTEX:
                            case MYSQL:
                            case MYSQL_ERRNO:
                            case NAME:
                            case NAMES:
                            case NCHAR:
                            case NEVER:
                            case NEXT:
                            case NO:
                            case NODEGROUP:
                            case NONE:
                            case OFFLINE:
                            case OFFSET:
                            case OJ:
                            case OLD_PASSWORD:
                            case ONE:
                            case ONLINE:
                            case ONLY:
                            case OPEN:
                            case OPTIMIZER_COSTS:
                            case OPTIONS:
                            case OWNER:
                            case PACK_KEYS:
                            case PAGE:
                            case PARSER:
                            case PARTIAL:
                            case PARTITIONING:
                            case PARTITIONS:
                            case PASSWORD:
                            case PHASE:
                            case PLUGIN:
                            case PLUGIN_DIR:
                            case PLUGINS:
                            case PORT:
                            case PRECEDES:
                            case PREPARE:
                            case PRESERVE:
                            case PREV:
                            case PROCESSLIST:
                            case PROFILE:
                            case PROFILES:
                            case PROXY:
                            case QUERY:
                            case QUICK:
                            case REBUILD:
                            case RECOVER:
                            case REDO_BUFFER_SIZE:
                            case REDUNDANT:
                            case RELAY:
                            case RELAY_LOG_FILE:
                            case RELAY_LOG_POS:
                            case RELAYLOG:
                            case REMOVE:
                            case REORGANIZE:
                            case REPAIR:
                            case REPLICATE_DO_DB:
                            case REPLICATE_DO_TABLE:
                            case REPLICATE_IGNORE_DB:
                            case REPLICATE_IGNORE_TABLE:
                            case REPLICATE_REWRITE_DB:
                            case REPLICATE_WILD_DO_TABLE:
                            case REPLICATE_WILD_IGNORE_TABLE:
                            case REPLICATION:
                            case RESET:
                            case RESUME:
                            case RETURNED_SQLSTATE:
                            case RETURNS:
                            case ROLLBACK:
                            case ROLLUP:
                            case ROTATE:
                            case ROW:
                            case ROWS:
                            case ROW_FORMAT:
                            case SAVEPOINT:
                            case SCHEDULE:
                            case SECURITY:
                            case SERVER:
                            case SESSION:
                            case SHARE:
                            case SHARED:
                            case SIGNED:
                            case SIMPLE:
                            case SLAVE:
                            case SLOW:
                            case SNAPSHOT:
                            case SOCKET:
                            case SOME:
                            case SONAME:
                            case SOUNDS:
                            case SOURCE:
                            case SQL_AFTER_GTIDS:
                            case SQL_AFTER_MTS_GAPS:
                            case SQL_BEFORE_GTIDS:
                            case SQL_BUFFER_RESULT:
                            case SQL_CACHE:
                            case SQL_NO_CACHE:
                            case SQL_THREAD:
                            case START:
                            case STARTS:
                            case STATS_AUTO_RECALC:
                            case STATS_PERSISTENT:
                            case STATS_SAMPLE_PAGES:
                            case STATUS:
                            case STOP:
                            case STORAGE:
                            case STRING:
                            case SUBCLASS_ORIGIN:
                            case SUBJECT:
                            case SUBPARTITION:
                            case SUBPARTITIONS:
                            case SUSPEND:
                            case SWAPS:
                            case SWITCHES:
                            case TABLE_NAME:
                            case TABLESPACE:
                            case TEMPORARY:
                            case TEMPTABLE:
                            case THAN:
                            case TRADITIONAL:
                            case TRANSACTION:
                            case TRIGGERS:
                            case TRUNCATE:
                            case UNDEFINED:
                            case UNDOFILE:
                            case UNDO_BUFFER_SIZE:
                            case UNINSTALL:
                            case UNKNOWN:
                            case UNTIL:
                            case UPGRADE:
                            case USER:
                            case USE_FRM:
                            case USER_RESOURCES:
                            case VALIDATION:
                            case VALUE:
                            case VARIABLES:
                            case VIEW:
                            case VISIBLE:
                            case WAIT:
                            case WARNINGS:
                            case WITHOUT:
                            case WORK:
                            case WRAPPER:
                            case X509:
                            case XA:
                            case XML:
                            case INTERNAL:
                            case QUARTER:
                            case MONTH:
                            case DAY:
                            case HOUR:
                            case MINUTE:
                            case WEEK:
                            case SECOND:
                            case MICROSECOND:
                            case TABLES:
                            case ROUTINE:
                            case EXECUTE:
                            case FILE:
                            case PROCESS:
                            case RELOAD:
                            case SHUTDOWN:
                            case SUPER:
                            case PRIVILEGES:
                            case SESSION_VARIABLES_ADMIN:
                            case ARMSCII8:
                            case ASCII:
                            case BIG5:
                            case CP1250:
                            case CP1251:
                            case CP1256:
                            case CP1257:
                            case CP850:
                            case CP852:
                            case CP866:
                            case CP932:
                            case DEC8:
                            case EUCJPMS:
                            case EUCKR:
                            case GB2312:
                            case GBK:
                            case GEOSTD8:
                            case GREEK:
                            case HEBREW:
                            case HP8:
                            case KEYBCS2:
                            case KOI8R:
                            case KOI8U:
                            case LATIN1:
                            case LATIN2:
                            case LATIN5:
                            case LATIN7:
                            case MACCE:
                            case MACROMAN:
                            case SJIS:
                            case SWE7:
                            case TIS620:
                            case UCS2:
                            case UJIS:
                            case UTF16:
                            case UTF16LE:
                            case UTF32:
                            case UTF8:
                            case UTF8MB3:
                            case UTF8MB4:
                            case ARCHIVE:
                            case BLACKHOLE:
                            case CSV:
                            case FEDERATED:
                            case INNODB:
                            case MEMORY:
                            case MRG_MYISAM:
                            case MYISAM:
                            case NDB:
                            case NDBCLUSTER:
                            case PERFORMANCE_SCHEMA:
                            case TOKUDB:
                            case REPEATABLE:
                            case COMMITTED:
                            case UNCOMMITTED:
                            case SERIALIZABLE:
                            case GEOMETRYCOLLECTION:
                            case LINESTRING:
                            case MULTILINESTRING:
                            case MULTIPOINT:
                            case MULTIPOLYGON:
                            case POINT:
                            case POLYGON:
                            case ABS:
                            case ACOS:
                            case ADDDATE:
                            case ADDTIME:
                            case AES_DECRYPT:
                            case AES_ENCRYPT:
                            case AREA:
                            case ASBINARY:
                            case ASIN:
                            case ASTEXT:
                            case ASWKB:
                            case ASWKT:
                            case ASYMMETRIC_DECRYPT:
                            case ASYMMETRIC_DERIVE:
                            case ASYMMETRIC_ENCRYPT:
                            case ASYMMETRIC_SIGN:
                            case ASYMMETRIC_VERIFY:
                            case ATAN:
                            case ATAN2:
                            case BENCHMARK:
                            case BIN:
                            case BIT_COUNT:
                            case BIT_LENGTH:
                            case BUFFER:
                            case CATALOG_NAME:
                            case CEIL:
                            case CEILING:
                            case CENTROID:
                            case CHARACTER_LENGTH:
                            case CHARSET:
                            case CHAR_LENGTH:
                            case COERCIBILITY:
                            case COLLATION:
                            case COMPRESS:
                            case CONCAT:
                            case CONCAT_WS:
                            case CONNECTION_ID:
                            case CONV:
                            case CONVERT_TZ:
                            case COS:
                            case COT:
                            case CRC32:
                            case CREATE_ASYMMETRIC_PRIV_KEY:
                            case CREATE_ASYMMETRIC_PUB_KEY:
                            case CREATE_DH_PARAMETERS:
                            case CREATE_DIGEST:
                            case CROSSES:
                            case DATEDIFF:
                            case DATE_FORMAT:
                            case DAYNAME:
                            case DAYOFMONTH:
                            case DAYOFWEEK:
                            case DAYOFYEAR:
                            case DECODE:
                            case DEGREES:
                            case DES_DECRYPT:
                            case DES_ENCRYPT:
                            case DIMENSION:
                            case DISJOINT:
                            case ELT:
                            case ENCODE:
                            case ENCRYPT:
                            case ENDPOINT:
                            case ENVELOPE:
                            case EQUALS:
                            case EXP:
                            case EXPORT_SET:
                            case EXTERIORRING:
                            case EXTRACTVALUE:
                            case FIELD:
                            case FIND_IN_SET:
                            case FLOOR:
                            case FORMAT:
                            case FOUND_ROWS:
                            case FROM_BASE64:
                            case FROM_DAYS:
                            case FROM_UNIXTIME:
                            case GEOMCOLLFROMTEXT:
                            case GEOMCOLLFROMWKB:
                            case GEOMETRYCOLLECTIONFROMTEXT:
                            case GEOMETRYCOLLECTIONFROMWKB:
                            case GEOMETRYFROMTEXT:
                            case GEOMETRYFROMWKB:
                            case GEOMETRYN:
                            case GEOMETRYTYPE:
                            case GEOMFROMTEXT:
                            case GEOMFROMWKB:
                            case GET_FORMAT:
                            case GET_LOCK:
                            case GLENGTH:
                            case GREATEST:
                            case GTID_SUBSET:
                            case GTID_SUBTRACT:
                            case HEX:
                            case IFNULL:
                            case INET6_ATON:
                            case INET6_NTOA:
                            case INET_ATON:
                            case INET_NTOA:
                            case INSTR:
                            case INTERIORRINGN:
                            case INTERSECTS:
                            case ISCLOSED:
                            case ISEMPTY:
                            case ISNULL:
                            case ISSIMPLE:
                            case IS_FREE_LOCK:
                            case IS_IPV4:
                            case IS_IPV4_COMPAT:
                            case IS_IPV4_MAPPED:
                            case IS_IPV6:
                            case IS_USED_LOCK:
                            case LAST_INSERT_ID:
                            case LCASE:
                            case LEAST:
                            case LENGTH:
                            case LINEFROMTEXT:
                            case LINEFROMWKB:
                            case LINESTRINGFROMTEXT:
                            case LINESTRINGFROMWKB:
                            case LN:
                            case LOAD_FILE:
                            case LOCATE:
                            case LOG:
                            case LOG10:
                            case LOG2:
                            case LOWER:
                            case LPAD:
                            case LTRIM:
                            case MAKEDATE:
                            case MAKETIME:
                            case MAKE_SET:
                            case MASTER_POS_WAIT:
                            case MBRCONTAINS:
                            case MBRDISJOINT:
                            case MBREQUAL:
                            case MBRINTERSECTS:
                            case MBROVERLAPS:
                            case MBRTOUCHES:
                            case MBRWITHIN:
                            case MD5:
                            case MLINEFROMTEXT:
                            case MLINEFROMWKB:
                            case MONTHNAME:
                            case MPOINTFROMTEXT:
                            case MPOINTFROMWKB:
                            case MPOLYFROMTEXT:
                            case MPOLYFROMWKB:
                            case MULTILINESTRINGFROMTEXT:
                            case MULTILINESTRINGFROMWKB:
                            case MULTIPOINTFROMTEXT:
                            case MULTIPOINTFROMWKB:
                            case MULTIPOLYGONFROMTEXT:
                            case MULTIPOLYGONFROMWKB:
                            case NAME_CONST:
                            case NULLIF:
                            case NUMGEOMETRIES:
                            case NUMINTERIORRINGS:
                            case NUMPOINTS:
                            case OCT:
                            case OCTET_LENGTH:
                            case ORD:
                            case OVERLAPS:
                            case PERIOD_ADD:
                            case PERIOD_DIFF:
                            case PI:
                            case POINTFROMTEXT:
                            case POINTFROMWKB:
                            case POINTN:
                            case POLYFROMTEXT:
                            case POLYFROMWKB:
                            case POLYGONFROMTEXT:
                            case POLYGONFROMWKB:
                            case POW:
                            case POWER:
                            case QUOTE:
                            case RADIANS:
                            case RAND:
                            case RANDOM_BYTES:
                            case RELEASE_LOCK:
                            case REVERSE:
                            case ROUND:
                            case ROW_COUNT:
                            case RPAD:
                            case RTRIM:
                            case SEC_TO_TIME:
                            case SESSION_USER:
                            case SHA:
                            case SHA1:
                            case SHA2:
                            case SCHEMA_NAME:
                            case SIGN:
                            case SIN:
                            case SLEEP:
                            case SOUNDEX:
                            case SQL_THREAD_WAIT_AFTER_GTIDS:
                            case SQRT:
                            case SRID:
                            case STARTPOINT:
                            case STRCMP:
                            case STR_TO_DATE:
                            case ST_AREA:
                            case ST_ASBINARY:
                            case ST_ASTEXT:
                            case ST_ASWKB:
                            case ST_ASWKT:
                            case ST_BUFFER:
                            case ST_CENTROID:
                            case ST_CONTAINS:
                            case ST_CROSSES:
                            case ST_DIFFERENCE:
                            case ST_DIMENSION:
                            case ST_DISJOINT:
                            case ST_DISTANCE:
                            case ST_ENDPOINT:
                            case ST_ENVELOPE:
                            case ST_EQUALS:
                            case ST_EXTERIORRING:
                            case ST_GEOMCOLLFROMTEXT:
                            case ST_GEOMCOLLFROMTXT:
                            case ST_GEOMCOLLFROMWKB:
                            case ST_GEOMETRYCOLLECTIONFROMTEXT:
                            case ST_GEOMETRYCOLLECTIONFROMWKB:
                            case ST_GEOMETRYFROMTEXT:
                            case ST_GEOMETRYFROMWKB:
                            case ST_GEOMETRYN:
                            case ST_GEOMETRYTYPE:
                            case ST_GEOMFROMTEXT:
                            case ST_GEOMFROMWKB:
                            case ST_INTERIORRINGN:
                            case ST_INTERSECTION:
                            case ST_INTERSECTS:
                            case ST_ISCLOSED:
                            case ST_ISEMPTY:
                            case ST_ISSIMPLE:
                            case ST_LINEFROMTEXT:
                            case ST_LINEFROMWKB:
                            case ST_LINESTRINGFROMTEXT:
                            case ST_LINESTRINGFROMWKB:
                            case ST_NUMGEOMETRIES:
                            case ST_NUMINTERIORRING:
                            case ST_NUMINTERIORRINGS:
                            case ST_NUMPOINTS:
                            case ST_OVERLAPS:
                            case ST_POINTFROMTEXT:
                            case ST_POINTFROMWKB:
                            case ST_POINTN:
                            case ST_POLYFROMTEXT:
                            case ST_POLYFROMWKB:
                            case ST_POLYGONFROMTEXT:
                            case ST_POLYGONFROMWKB:
                            case ST_SRID:
                            case ST_STARTPOINT:
                            case ST_SYMDIFFERENCE:
                            case ST_TOUCHES:
                            case ST_UNION:
                            case ST_WITHIN:
                            case ST_X:
                            case ST_Y:
                            case SUBDATE:
                            case SUBSTRING_INDEX:
                            case SUBTIME:
                            case SYSTEM_USER:
                            case TAN:
                            case TIMEDIFF:
                            case TIMESTAMPADD:
                            case TIMESTAMPDIFF:
                            case TIME_FORMAT:
                            case TIME_TO_SEC:
                            case TOUCHES:
                            case TO_BASE64:
                            case TO_DAYS:
                            case TO_SECONDS:
                            case UCASE:
                            case UNCOMPRESS:
                            case UNCOMPRESSED_LENGTH:
                            case UNHEX:
                            case UNIX_TIMESTAMP:
                            case UPDATEXML:
                            case UPPER:
                            case UUID:
                            case UUID_SHORT:
                            case VALIDATE_PASSWORD_STRENGTH:
                            case VERSION:
                            case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
                            case WEEKDAY:
                            case WEEKOFYEAR:
                            case WEIGHT_STRING:
                            case WITHIN:
                            case YEARWEEK:
                            case Y_FUNCTION:
                            case X_FUNCTION:
                            case CHARSET_REVERSE_QOUTE_STRING:
                            case STRING_LITERAL:
                            case ID:
                            case REVERSE_QUOTE_ID:
                                {
                                    State = 2533; uidList();
                                }
                                break;
                            case ALL:
                                {
                                    State = 2534; Match(ALL);
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }
                    break;
                case 36:
                    _localctx = new AlterByCoalescePartitionContext(_localctx);
                    EnterOuterAlt(_localctx, 36);
                    {
                        State = 2537; Match(COALESCE);
                        State = 2538; Match(PARTITION);
                        State = 2539; decimalLiteral();
                    }
                    break;
                case 37:
                    _localctx = new AlterByReorganizePartitionContext(_localctx);
                    EnterOuterAlt(_localctx, 37);
                    {
                        State = 2540; Match(REORGANIZE);
                        State = 2541; Match(PARTITION);
                        State = 2542; uidList();
                        State = 2543; Match(INTO);
                        State = 2544; Match(LR_BRACKET);
                        State = 2545; partitionDefinition();
                        State = 2550;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        while (_la == COMMA)
                        {
                            {
                                {
                                    State = 2546; Match(COMMA);
                                    State = 2547; partitionDefinition();
                                }
                            }
                            State = 2552;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                        }
                        State = 2553; Match(RR_BRACKET);
                    }
                    break;
                case 38:
                    _localctx = new AlterByExchangePartitionContext(_localctx);
                    EnterOuterAlt(_localctx, 38);
                    {
                        State = 2555; Match(EXCHANGE);
                        State = 2556; Match(PARTITION);
                        State = 2557; uid();
                        State = 2558; Match(WITH);
                        State = 2559; Match(TABLE);
                        State = 2560; tableName();
                        State = 2563;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == WITH || _la == WITHOUT)
                        {
                            {
                                State = 2561;
                                ((AlterByExchangePartitionContext)_localctx).validationFormat = TokenStream.LT(1);
                                _la = TokenStream.LA(1);
                                if (!(_la == WITH || _la == WITHOUT))
                                {
                                    ((AlterByExchangePartitionContext)_localctx).validationFormat = ErrorHandler.RecoverInline(this);
                                }
                                else
                                {
                                    ErrorHandler.ReportMatch(this);
                                    Consume();
                                }
                                State = 2562; Match(VALIDATION);
                            }
                        }

                    }
                    break;
                case 39:
                    _localctx = new AlterByAnalyzePartitionContext(_localctx);
                    EnterOuterAlt(_localctx, 39);
                    {
                        State = 2565; Match(ANALYZE);
                        State = 2566; Match(PARTITION);
                        State = 2569;
                        ErrorHandler.Sync(this);
                        switch (TokenStream.LA(1))
                        {
                            case CURRENT:
                            case DATABASE:
                            case DIAGNOSTICS:
                            case LEFT:
                            case NUMBER:
                            case RIGHT:
                            case STACKED:
                            case DATE:
                            case TIME:
                            case TIMESTAMP:
                            case DATETIME:
                            case YEAR:
                            case TEXT:
                            case ENUM:
                            case SERIAL:
                            case COUNT:
                            case POSITION:
                            case ACCOUNT:
                            case ACTION:
                            case AFTER:
                            case AGGREGATE:
                            case ALGORITHM:
                            case ANY:
                            case AT:
                            case AUTHORS:
                            case AUTOCOMMIT:
                            case AUTOEXTEND_SIZE:
                            case AUTO_INCREMENT:
                            case AVG_ROW_LENGTH:
                            case BEGIN:
                            case BINLOG:
                            case BIT:
                            case BLOCK:
                            case BOOL:
                            case BOOLEAN:
                            case BTREE:
                            case CACHE:
                            case CASCADED:
                            case CHAIN:
                            case CHANGED:
                            case CHANNEL:
                            case CHECKSUM:
                            case PAGE_CHECKSUM:
                            case CIPHER:
                            case CLASS_ORIGIN:
                            case CLIENT:
                            case CLOSE:
                            case COALESCE:
                            case CODE:
                            case COLUMNS:
                            case COLUMN_FORMAT:
                            case COLUMN_NAME:
                            case COMMENT:
                            case COMMIT:
                            case COMPACT:
                            case COMPLETION:
                            case COMPRESSED:
                            case COMPRESSION:
                            case CONCURRENT:
                            case CONNECTION:
                            case CONSISTENT:
                            case CONSTRAINT_CATALOG:
                            case CONSTRAINT_SCHEMA:
                            case CONSTRAINT_NAME:
                            case CONTAINS:
                            case CONTEXT:
                            case CONTRIBUTORS:
                            case COPY:
                            case CPU:
                            case CURSOR_NAME:
                            case DATA:
                            case DATAFILE:
                            case DEALLOCATE:
                            case DEFAULT_AUTH:
                            case DEFINER:
                            case DELAY_KEY_WRITE:
                            case DES_KEY_FILE:
                            case DIRECTORY:
                            case DISABLE:
                            case DISCARD:
                            case DISK:
                            case DO:
                            case DUMPFILE:
                            case DUPLICATE:
                            case DYNAMIC:
                            case ENABLE:
                            case ENCRYPTION:
                            case END:
                            case ENDS:
                            case ENGINE:
                            case ENGINES:
                            case ERROR:
                            case ERRORS:
                            case ESCAPE:
                            case EVEN:
                            case EVENT:
                            case EVENTS:
                            case EVERY:
                            case EXCHANGE:
                            case EXCLUSIVE:
                            case EXPIRE:
                            case EXPORT:
                            case EXTENDED:
                            case EXTENT_SIZE:
                            case FAST:
                            case FAULTS:
                            case FIELDS:
                            case FILE_BLOCK_SIZE:
                            case FILTER:
                            case FIRST:
                            case FIXED:
                            case FLUSH:
                            case FOLLOWS:
                            case FOUND:
                            case FULL:
                            case FUNCTION:
                            case GENERAL:
                            case GLOBAL:
                            case GRANTS:
                            case GROUP_REPLICATION:
                            case HANDLER:
                            case HASH:
                            case HELP:
                            case HOST:
                            case HOSTS:
                            case IDENTIFIED:
                            case IGNORE_SERVER_IDS:
                            case IMPORT:
                            case INDEXES:
                            case INITIAL_SIZE:
                            case INPLACE:
                            case INSERT_METHOD:
                            case INSTALL:
                            case INSTANCE:
                            case INVISIBLE:
                            case INVOKER:
                            case IO:
                            case IO_THREAD:
                            case IPC:
                            case ISOLATION:
                            case ISSUER:
                            case JSON:
                            case KEY_BLOCK_SIZE:
                            case LANGUAGE:
                            case LAST:
                            case LEAVES:
                            case LESS:
                            case LEVEL:
                            case LIST:
                            case LOCAL:
                            case LOGFILE:
                            case LOGS:
                            case MASTER:
                            case MASTER_AUTO_POSITION:
                            case MASTER_CONNECT_RETRY:
                            case MASTER_DELAY:
                            case MASTER_HEARTBEAT_PERIOD:
                            case MASTER_HOST:
                            case MASTER_LOG_FILE:
                            case MASTER_LOG_POS:
                            case MASTER_PASSWORD:
                            case MASTER_PORT:
                            case MASTER_RETRY_COUNT:
                            case MASTER_SSL:
                            case MASTER_SSL_CA:
                            case MASTER_SSL_CAPATH:
                            case MASTER_SSL_CERT:
                            case MASTER_SSL_CIPHER:
                            case MASTER_SSL_CRL:
                            case MASTER_SSL_CRLPATH:
                            case MASTER_SSL_KEY:
                            case MASTER_TLS_VERSION:
                            case MASTER_USER:
                            case MAX_CONNECTIONS_PER_HOUR:
                            case MAX_QUERIES_PER_HOUR:
                            case MAX_ROWS:
                            case MAX_SIZE:
                            case MAX_UPDATES_PER_HOUR:
                            case MAX_USER_CONNECTIONS:
                            case MEDIUM:
                            case MERGE:
                            case MESSAGE_TEXT:
                            case MID:
                            case MIGRATE:
                            case MIN_ROWS:
                            case MODE:
                            case MODIFY:
                            case MUTEX:
                            case MYSQL:
                            case MYSQL_ERRNO:
                            case NAME:
                            case NAMES:
                            case NCHAR:
                            case NEVER:
                            case NEXT:
                            case NO:
                            case NODEGROUP:
                            case NONE:
                            case OFFLINE:
                            case OFFSET:
                            case OJ:
                            case OLD_PASSWORD:
                            case ONE:
                            case ONLINE:
                            case ONLY:
                            case OPEN:
                            case OPTIMIZER_COSTS:
                            case OPTIONS:
                            case OWNER:
                            case PACK_KEYS:
                            case PAGE:
                            case PARSER:
                            case PARTIAL:
                            case PARTITIONING:
                            case PARTITIONS:
                            case PASSWORD:
                            case PHASE:
                            case PLUGIN:
                            case PLUGIN_DIR:
                            case PLUGINS:
                            case PORT:
                            case PRECEDES:
                            case PREPARE:
                            case PRESERVE:
                            case PREV:
                            case PROCESSLIST:
                            case PROFILE:
                            case PROFILES:
                            case PROXY:
                            case QUERY:
                            case QUICK:
                            case REBUILD:
                            case RECOVER:
                            case REDO_BUFFER_SIZE:
                            case REDUNDANT:
                            case RELAY:
                            case RELAY_LOG_FILE:
                            case RELAY_LOG_POS:
                            case RELAYLOG:
                            case REMOVE:
                            case REORGANIZE:
                            case REPAIR:
                            case REPLICATE_DO_DB:
                            case REPLICATE_DO_TABLE:
                            case REPLICATE_IGNORE_DB:
                            case REPLICATE_IGNORE_TABLE:
                            case REPLICATE_REWRITE_DB:
                            case REPLICATE_WILD_DO_TABLE:
                            case REPLICATE_WILD_IGNORE_TABLE:
                            case REPLICATION:
                            case RESET:
                            case RESUME:
                            case RETURNED_SQLSTATE:
                            case RETURNS:
                            case ROLLBACK:
                            case ROLLUP:
                            case ROTATE:
                            case ROW:
                            case ROWS:
                            case ROW_FORMAT:
                            case SAVEPOINT:
                            case SCHEDULE:
                            case SECURITY:
                            case SERVER:
                            case SESSION:
                            case SHARE:
                            case SHARED:
                            case SIGNED:
                            case SIMPLE:
                            case SLAVE:
                            case SLOW:
                            case SNAPSHOT:
                            case SOCKET:
                            case SOME:
                            case SONAME:
                            case SOUNDS:
                            case SOURCE:
                            case SQL_AFTER_GTIDS:
                            case SQL_AFTER_MTS_GAPS:
                            case SQL_BEFORE_GTIDS:
                            case SQL_BUFFER_RESULT:
                            case SQL_CACHE:
                            case SQL_NO_CACHE:
                            case SQL_THREAD:
                            case START:
                            case STARTS:
                            case STATS_AUTO_RECALC:
                            case STATS_PERSISTENT:
                            case STATS_SAMPLE_PAGES:
                            case STATUS:
                            case STOP:
                            case STORAGE:
                            case STRING:
                            case SUBCLASS_ORIGIN:
                            case SUBJECT:
                            case SUBPARTITION:
                            case SUBPARTITIONS:
                            case SUSPEND:
                            case SWAPS:
                            case SWITCHES:
                            case TABLE_NAME:
                            case TABLESPACE:
                            case TEMPORARY:
                            case TEMPTABLE:
                            case THAN:
                            case TRADITIONAL:
                            case TRANSACTION:
                            case TRIGGERS:
                            case TRUNCATE:
                            case UNDEFINED:
                            case UNDOFILE:
                            case UNDO_BUFFER_SIZE:
                            case UNINSTALL:
                            case UNKNOWN:
                            case UNTIL:
                            case UPGRADE:
                            case USER:
                            case USE_FRM:
                            case USER_RESOURCES:
                            case VALIDATION:
                            case VALUE:
                            case VARIABLES:
                            case VIEW:
                            case VISIBLE:
                            case WAIT:
                            case WARNINGS:
                            case WITHOUT:
                            case WORK:
                            case WRAPPER:
                            case X509:
                            case XA:
                            case XML:
                            case INTERNAL:
                            case QUARTER:
                            case MONTH:
                            case DAY:
                            case HOUR:
                            case MINUTE:
                            case WEEK:
                            case SECOND:
                            case MICROSECOND:
                            case TABLES:
                            case ROUTINE:
                            case EXECUTE:
                            case FILE:
                            case PROCESS:
                            case RELOAD:
                            case SHUTDOWN:
                            case SUPER:
                            case PRIVILEGES:
                            case SESSION_VARIABLES_ADMIN:
                            case ARMSCII8:
                            case ASCII:
                            case BIG5:
                            case CP1250:
                            case CP1251:
                            case CP1256:
                            case CP1257:
                            case CP850:
                            case CP852:
                            case CP866:
                            case CP932:
                            case DEC8:
                            case EUCJPMS:
                            case EUCKR:
                            case GB2312:
                            case GBK:
                            case GEOSTD8:
                            case GREEK:
                            case HEBREW:
                            case HP8:
                            case KEYBCS2:
                            case KOI8R:
                            case KOI8U:
                            case LATIN1:
                            case LATIN2:
                            case LATIN5:
                            case LATIN7:
                            case MACCE:
                            case MACROMAN:
                            case SJIS:
                            case SWE7:
                            case TIS620:
                            case UCS2:
                            case UJIS:
                            case UTF16:
                            case UTF16LE:
                            case UTF32:
                            case UTF8:
                            case UTF8MB3:
                            case UTF8MB4:
                            case ARCHIVE:
                            case BLACKHOLE:
                            case CSV:
                            case FEDERATED:
                            case INNODB:
                            case MEMORY:
                            case MRG_MYISAM:
                            case MYISAM:
                            case NDB:
                            case NDBCLUSTER:
                            case PERFORMANCE_SCHEMA:
                            case TOKUDB:
                            case REPEATABLE:
                            case COMMITTED:
                            case UNCOMMITTED:
                            case SERIALIZABLE:
                            case GEOMETRYCOLLECTION:
                            case LINESTRING:
                            case MULTILINESTRING:
                            case MULTIPOINT:
                            case MULTIPOLYGON:
                            case POINT:
                            case POLYGON:
                            case ABS:
                            case ACOS:
                            case ADDDATE:
                            case ADDTIME:
                            case AES_DECRYPT:
                            case AES_ENCRYPT:
                            case AREA:
                            case ASBINARY:
                            case ASIN:
                            case ASTEXT:
                            case ASWKB:
                            case ASWKT:
                            case ASYMMETRIC_DECRYPT:
                            case ASYMMETRIC_DERIVE:
                            case ASYMMETRIC_ENCRYPT:
                            case ASYMMETRIC_SIGN:
                            case ASYMMETRIC_VERIFY:
                            case ATAN:
                            case ATAN2:
                            case BENCHMARK:
                            case BIN:
                            case BIT_COUNT:
                            case BIT_LENGTH:
                            case BUFFER:
                            case CATALOG_NAME:
                            case CEIL:
                            case CEILING:
                            case CENTROID:
                            case CHARACTER_LENGTH:
                            case CHARSET:
                            case CHAR_LENGTH:
                            case COERCIBILITY:
                            case COLLATION:
                            case COMPRESS:
                            case CONCAT:
                            case CONCAT_WS:
                            case CONNECTION_ID:
                            case CONV:
                            case CONVERT_TZ:
                            case COS:
                            case COT:
                            case CRC32:
                            case CREATE_ASYMMETRIC_PRIV_KEY:
                            case CREATE_ASYMMETRIC_PUB_KEY:
                            case CREATE_DH_PARAMETERS:
                            case CREATE_DIGEST:
                            case CROSSES:
                            case DATEDIFF:
                            case DATE_FORMAT:
                            case DAYNAME:
                            case DAYOFMONTH:
                            case DAYOFWEEK:
                            case DAYOFYEAR:
                            case DECODE:
                            case DEGREES:
                            case DES_DECRYPT:
                            case DES_ENCRYPT:
                            case DIMENSION:
                            case DISJOINT:
                            case ELT:
                            case ENCODE:
                            case ENCRYPT:
                            case ENDPOINT:
                            case ENVELOPE:
                            case EQUALS:
                            case EXP:
                            case EXPORT_SET:
                            case EXTERIORRING:
                            case EXTRACTVALUE:
                            case FIELD:
                            case FIND_IN_SET:
                            case FLOOR:
                            case FORMAT:
                            case FOUND_ROWS:
                            case FROM_BASE64:
                            case FROM_DAYS:
                            case FROM_UNIXTIME:
                            case GEOMCOLLFROMTEXT:
                            case GEOMCOLLFROMWKB:
                            case GEOMETRYCOLLECTIONFROMTEXT:
                            case GEOMETRYCOLLECTIONFROMWKB:
                            case GEOMETRYFROMTEXT:
                            case GEOMETRYFROMWKB:
                            case GEOMETRYN:
                            case GEOMETRYTYPE:
                            case GEOMFROMTEXT:
                            case GEOMFROMWKB:
                            case GET_FORMAT:
                            case GET_LOCK:
                            case GLENGTH:
                            case GREATEST:
                            case GTID_SUBSET:
                            case GTID_SUBTRACT:
                            case HEX:
                            case IFNULL:
                            case INET6_ATON:
                            case INET6_NTOA:
                            case INET_ATON:
                            case INET_NTOA:
                            case INSTR:
                            case INTERIORRINGN:
                            case INTERSECTS:
                            case ISCLOSED:
                            case ISEMPTY:
                            case ISNULL:
                            case ISSIMPLE:
                            case IS_FREE_LOCK:
                            case IS_IPV4:
                            case IS_IPV4_COMPAT:
                            case IS_IPV4_MAPPED:
                            case IS_IPV6:
                            case IS_USED_LOCK:
                            case LAST_INSERT_ID:
                            case LCASE:
                            case LEAST:
                            case LENGTH:
                            case LINEFROMTEXT:
                            case LINEFROMWKB:
                            case LINESTRINGFROMTEXT:
                            case LINESTRINGFROMWKB:
                            case LN:
                            case LOAD_FILE:
                            case LOCATE:
                            case LOG:
                            case LOG10:
                            case LOG2:
                            case LOWER:
                            case LPAD:
                            case LTRIM:
                            case MAKEDATE:
                            case MAKETIME:
                            case MAKE_SET:
                            case MASTER_POS_WAIT:
                            case MBRCONTAINS:
                            case MBRDISJOINT:
                            case MBREQUAL:
                            case MBRINTERSECTS:
                            case MBROVERLAPS:
                            case MBRTOUCHES:
                            case MBRWITHIN:
                            case MD5:
                            case MLINEFROMTEXT:
                            case MLINEFROMWKB:
                            case MONTHNAME:
                            case MPOINTFROMTEXT:
                            case MPOINTFROMWKB:
                            case MPOLYFROMTEXT:
                            case MPOLYFROMWKB:
                            case MULTILINESTRINGFROMTEXT:
                            case MULTILINESTRINGFROMWKB:
                            case MULTIPOINTFROMTEXT:
                            case MULTIPOINTFROMWKB:
                            case MULTIPOLYGONFROMTEXT:
                            case MULTIPOLYGONFROMWKB:
                            case NAME_CONST:
                            case NULLIF:
                            case NUMGEOMETRIES:
                            case NUMINTERIORRINGS:
                            case NUMPOINTS:
                            case OCT:
                            case OCTET_LENGTH:
                            case ORD:
                            case OVERLAPS:
                            case PERIOD_ADD:
                            case PERIOD_DIFF:
                            case PI:
                            case POINTFROMTEXT:
                            case POINTFROMWKB:
                            case POINTN:
                            case POLYFROMTEXT:
                            case POLYFROMWKB:
                            case POLYGONFROMTEXT:
                            case POLYGONFROMWKB:
                            case POW:
                            case POWER:
                            case QUOTE:
                            case RADIANS:
                            case RAND:
                            case RANDOM_BYTES:
                            case RELEASE_LOCK:
                            case REVERSE:
                            case ROUND:
                            case ROW_COUNT:
                            case RPAD:
                            case RTRIM:
                            case SEC_TO_TIME:
                            case SESSION_USER:
                            case SHA:
                            case SHA1:
                            case SHA2:
                            case SCHEMA_NAME:
                            case SIGN:
                            case SIN:
                            case SLEEP:
                            case SOUNDEX:
                            case SQL_THREAD_WAIT_AFTER_GTIDS:
                            case SQRT:
                            case SRID:
                            case STARTPOINT:
                            case STRCMP:
                            case STR_TO_DATE:
                            case ST_AREA:
                            case ST_ASBINARY:
                            case ST_ASTEXT:
                            case ST_ASWKB:
                            case ST_ASWKT:
                            case ST_BUFFER:
                            case ST_CENTROID:
                            case ST_CONTAINS:
                            case ST_CROSSES:
                            case ST_DIFFERENCE:
                            case ST_DIMENSION:
                            case ST_DISJOINT:
                            case ST_DISTANCE:
                            case ST_ENDPOINT:
                            case ST_ENVELOPE:
                            case ST_EQUALS:
                            case ST_EXTERIORRING:
                            case ST_GEOMCOLLFROMTEXT:
                            case ST_GEOMCOLLFROMTXT:
                            case ST_GEOMCOLLFROMWKB:
                            case ST_GEOMETRYCOLLECTIONFROMTEXT:
                            case ST_GEOMETRYCOLLECTIONFROMWKB:
                            case ST_GEOMETRYFROMTEXT:
                            case ST_GEOMETRYFROMWKB:
                            case ST_GEOMETRYN:
                            case ST_GEOMETRYTYPE:
                            case ST_GEOMFROMTEXT:
                            case ST_GEOMFROMWKB:
                            case ST_INTERIORRINGN:
                            case ST_INTERSECTION:
                            case ST_INTERSECTS:
                            case ST_ISCLOSED:
                            case ST_ISEMPTY:
                            case ST_ISSIMPLE:
                            case ST_LINEFROMTEXT:
                            case ST_LINEFROMWKB:
                            case ST_LINESTRINGFROMTEXT:
                            case ST_LINESTRINGFROMWKB:
                            case ST_NUMGEOMETRIES:
                            case ST_NUMINTERIORRING:
                            case ST_NUMINTERIORRINGS:
                            case ST_NUMPOINTS:
                            case ST_OVERLAPS:
                            case ST_POINTFROMTEXT:
                            case ST_POINTFROMWKB:
                            case ST_POINTN:
                            case ST_POLYFROMTEXT:
                            case ST_POLYFROMWKB:
                            case ST_POLYGONFROMTEXT:
                            case ST_POLYGONFROMWKB:
                            case ST_SRID:
                            case ST_STARTPOINT:
                            case ST_SYMDIFFERENCE:
                            case ST_TOUCHES:
                            case ST_UNION:
                            case ST_WITHIN:
                            case ST_X:
                            case ST_Y:
                            case SUBDATE:
                            case SUBSTRING_INDEX:
                            case SUBTIME:
                            case SYSTEM_USER:
                            case TAN:
                            case TIMEDIFF:
                            case TIMESTAMPADD:
                            case TIMESTAMPDIFF:
                            case TIME_FORMAT:
                            case TIME_TO_SEC:
                            case TOUCHES:
                            case TO_BASE64:
                            case TO_DAYS:
                            case TO_SECONDS:
                            case UCASE:
                            case UNCOMPRESS:
                            case UNCOMPRESSED_LENGTH:
                            case UNHEX:
                            case UNIX_TIMESTAMP:
                            case UPDATEXML:
                            case UPPER:
                            case UUID:
                            case UUID_SHORT:
                            case VALIDATE_PASSWORD_STRENGTH:
                            case VERSION:
                            case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
                            case WEEKDAY:
                            case WEEKOFYEAR:
                            case WEIGHT_STRING:
                            case WITHIN:
                            case YEARWEEK:
                            case Y_FUNCTION:
                            case X_FUNCTION:
                            case CHARSET_REVERSE_QOUTE_STRING:
                            case STRING_LITERAL:
                            case ID:
                            case REVERSE_QUOTE_ID:
                                {
                                    State = 2567; uidList();
                                }
                                break;
                            case ALL:
                                {
                                    State = 2568; Match(ALL);
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }
                    break;
                case 40:
                    _localctx = new AlterByCheckPartitionContext(_localctx);
                    EnterOuterAlt(_localctx, 40);
                    {
                        State = 2571; Match(CHECK);
                        State = 2572; Match(PARTITION);
                        State = 2575;
                        ErrorHandler.Sync(this);
                        switch (TokenStream.LA(1))
                        {
                            case CURRENT:
                            case DATABASE:
                            case DIAGNOSTICS:
                            case LEFT:
                            case NUMBER:
                            case RIGHT:
                            case STACKED:
                            case DATE:
                            case TIME:
                            case TIMESTAMP:
                            case DATETIME:
                            case YEAR:
                            case TEXT:
                            case ENUM:
                            case SERIAL:
                            case COUNT:
                            case POSITION:
                            case ACCOUNT:
                            case ACTION:
                            case AFTER:
                            case AGGREGATE:
                            case ALGORITHM:
                            case ANY:
                            case AT:
                            case AUTHORS:
                            case AUTOCOMMIT:
                            case AUTOEXTEND_SIZE:
                            case AUTO_INCREMENT:
                            case AVG_ROW_LENGTH:
                            case BEGIN:
                            case BINLOG:
                            case BIT:
                            case BLOCK:
                            case BOOL:
                            case BOOLEAN:
                            case BTREE:
                            case CACHE:
                            case CASCADED:
                            case CHAIN:
                            case CHANGED:
                            case CHANNEL:
                            case CHECKSUM:
                            case PAGE_CHECKSUM:
                            case CIPHER:
                            case CLASS_ORIGIN:
                            case CLIENT:
                            case CLOSE:
                            case COALESCE:
                            case CODE:
                            case COLUMNS:
                            case COLUMN_FORMAT:
                            case COLUMN_NAME:
                            case COMMENT:
                            case COMMIT:
                            case COMPACT:
                            case COMPLETION:
                            case COMPRESSED:
                            case COMPRESSION:
                            case CONCURRENT:
                            case CONNECTION:
                            case CONSISTENT:
                            case CONSTRAINT_CATALOG:
                            case CONSTRAINT_SCHEMA:
                            case CONSTRAINT_NAME:
                            case CONTAINS:
                            case CONTEXT:
                            case CONTRIBUTORS:
                            case COPY:
                            case CPU:
                            case CURSOR_NAME:
                            case DATA:
                            case DATAFILE:
                            case DEALLOCATE:
                            case DEFAULT_AUTH:
                            case DEFINER:
                            case DELAY_KEY_WRITE:
                            case DES_KEY_FILE:
                            case DIRECTORY:
                            case DISABLE:
                            case DISCARD:
                            case DISK:
                            case DO:
                            case DUMPFILE:
                            case DUPLICATE:
                            case DYNAMIC:
                            case ENABLE:
                            case ENCRYPTION:
                            case END:
                            case ENDS:
                            case ENGINE:
                            case ENGINES:
                            case ERROR:
                            case ERRORS:
                            case ESCAPE:
                            case EVEN:
                            case EVENT:
                            case EVENTS:
                            case EVERY:
                            case EXCHANGE:
                            case EXCLUSIVE:
                            case EXPIRE:
                            case EXPORT:
                            case EXTENDED:
                            case EXTENT_SIZE:
                            case FAST:
                            case FAULTS:
                            case FIELDS:
                            case FILE_BLOCK_SIZE:
                            case FILTER:
                            case FIRST:
                            case FIXED:
                            case FLUSH:
                            case FOLLOWS:
                            case FOUND:
                            case FULL:
                            case FUNCTION:
                            case GENERAL:
                            case GLOBAL:
                            case GRANTS:
                            case GROUP_REPLICATION:
                            case HANDLER:
                            case HASH:
                            case HELP:
                            case HOST:
                            case HOSTS:
                            case IDENTIFIED:
                            case IGNORE_SERVER_IDS:
                            case IMPORT:
                            case INDEXES:
                            case INITIAL_SIZE:
                            case INPLACE:
                            case INSERT_METHOD:
                            case INSTALL:
                            case INSTANCE:
                            case INVISIBLE:
                            case INVOKER:
                            case IO:
                            case IO_THREAD:
                            case IPC:
                            case ISOLATION:
                            case ISSUER:
                            case JSON:
                            case KEY_BLOCK_SIZE:
                            case LANGUAGE:
                            case LAST:
                            case LEAVES:
                            case LESS:
                            case LEVEL:
                            case LIST:
                            case LOCAL:
                            case LOGFILE:
                            case LOGS:
                            case MASTER:
                            case MASTER_AUTO_POSITION:
                            case MASTER_CONNECT_RETRY:
                            case MASTER_DELAY:
                            case MASTER_HEARTBEAT_PERIOD:
                            case MASTER_HOST:
                            case MASTER_LOG_FILE:
                            case MASTER_LOG_POS:
                            case MASTER_PASSWORD:
                            case MASTER_PORT:
                            case MASTER_RETRY_COUNT:
                            case MASTER_SSL:
                            case MASTER_SSL_CA:
                            case MASTER_SSL_CAPATH:
                            case MASTER_SSL_CERT:
                            case MASTER_SSL_CIPHER:
                            case MASTER_SSL_CRL:
                            case MASTER_SSL_CRLPATH:
                            case MASTER_SSL_KEY:
                            case MASTER_TLS_VERSION:
                            case MASTER_USER:
                            case MAX_CONNECTIONS_PER_HOUR:
                            case MAX_QUERIES_PER_HOUR:
                            case MAX_ROWS:
                            case MAX_SIZE:
                            case MAX_UPDATES_PER_HOUR:
                            case MAX_USER_CONNECTIONS:
                            case MEDIUM:
                            case MERGE:
                            case MESSAGE_TEXT:
                            case MID:
                            case MIGRATE:
                            case MIN_ROWS:
                            case MODE:
                            case MODIFY:
                            case MUTEX:
                            case MYSQL:
                            case MYSQL_ERRNO:
                            case NAME:
                            case NAMES:
                            case NCHAR:
                            case NEVER:
                            case NEXT:
                            case NO:
                            case NODEGROUP:
                            case NONE:
                            case OFFLINE:
                            case OFFSET:
                            case OJ:
                            case OLD_PASSWORD:
                            case ONE:
                            case ONLINE:
                            case ONLY:
                            case OPEN:
                            case OPTIMIZER_COSTS:
                            case OPTIONS:
                            case OWNER:
                            case PACK_KEYS:
                            case PAGE:
                            case PARSER:
                            case PARTIAL:
                            case PARTITIONING:
                            case PARTITIONS:
                            case PASSWORD:
                            case PHASE:
                            case PLUGIN:
                            case PLUGIN_DIR:
                            case PLUGINS:
                            case PORT:
                            case PRECEDES:
                            case PREPARE:
                            case PRESERVE:
                            case PREV:
                            case PROCESSLIST:
                            case PROFILE:
                            case PROFILES:
                            case PROXY:
                            case QUERY:
                            case QUICK:
                            case REBUILD:
                            case RECOVER:
                            case REDO_BUFFER_SIZE:
                            case REDUNDANT:
                            case RELAY:
                            case RELAY_LOG_FILE:
                            case RELAY_LOG_POS:
                            case RELAYLOG:
                            case REMOVE:
                            case REORGANIZE:
                            case REPAIR:
                            case REPLICATE_DO_DB:
                            case REPLICATE_DO_TABLE:
                            case REPLICATE_IGNORE_DB:
                            case REPLICATE_IGNORE_TABLE:
                            case REPLICATE_REWRITE_DB:
                            case REPLICATE_WILD_DO_TABLE:
                            case REPLICATE_WILD_IGNORE_TABLE:
                            case REPLICATION:
                            case RESET:
                            case RESUME:
                            case RETURNED_SQLSTATE:
                            case RETURNS:
                            case ROLLBACK:
                            case ROLLUP:
                            case ROTATE:
                            case ROW:
                            case ROWS:
                            case ROW_FORMAT:
                            case SAVEPOINT:
                            case SCHEDULE:
                            case SECURITY:
                            case SERVER:
                            case SESSION:
                            case SHARE:
                            case SHARED:
                            case SIGNED:
                            case SIMPLE:
                            case SLAVE:
                            case SLOW:
                            case SNAPSHOT:
                            case SOCKET:
                            case SOME:
                            case SONAME:
                            case SOUNDS:
                            case SOURCE:
                            case SQL_AFTER_GTIDS:
                            case SQL_AFTER_MTS_GAPS:
                            case SQL_BEFORE_GTIDS:
                            case SQL_BUFFER_RESULT:
                            case SQL_CACHE:
                            case SQL_NO_CACHE:
                            case SQL_THREAD:
                            case START:
                            case STARTS:
                            case STATS_AUTO_RECALC:
                            case STATS_PERSISTENT:
                            case STATS_SAMPLE_PAGES:
                            case STATUS:
                            case STOP:
                            case STORAGE:
                            case STRING:
                            case SUBCLASS_ORIGIN:
                            case SUBJECT:
                            case SUBPARTITION:
                            case SUBPARTITIONS:
                            case SUSPEND:
                            case SWAPS:
                            case SWITCHES:
                            case TABLE_NAME:
                            case TABLESPACE:
                            case TEMPORARY:
                            case TEMPTABLE:
                            case THAN:
                            case TRADITIONAL:
                            case TRANSACTION:
                            case TRIGGERS:
                            case TRUNCATE:
                            case UNDEFINED:
                            case UNDOFILE:
                            case UNDO_BUFFER_SIZE:
                            case UNINSTALL:
                            case UNKNOWN:
                            case UNTIL:
                            case UPGRADE:
                            case USER:
                            case USE_FRM:
                            case USER_RESOURCES:
                            case VALIDATION:
                            case VALUE:
                            case VARIABLES:
                            case VIEW:
                            case VISIBLE:
                            case WAIT:
                            case WARNINGS:
                            case WITHOUT:
                            case WORK:
                            case WRAPPER:
                            case X509:
                            case XA:
                            case XML:
                            case INTERNAL:
                            case QUARTER:
                            case MONTH:
                            case DAY:
                            case HOUR:
                            case MINUTE:
                            case WEEK:
                            case SECOND:
                            case MICROSECOND:
                            case TABLES:
                            case ROUTINE:
                            case EXECUTE:
                            case FILE:
                            case PROCESS:
                            case RELOAD:
                            case SHUTDOWN:
                            case SUPER:
                            case PRIVILEGES:
                            case SESSION_VARIABLES_ADMIN:
                            case ARMSCII8:
                            case ASCII:
                            case BIG5:
                            case CP1250:
                            case CP1251:
                            case CP1256:
                            case CP1257:
                            case CP850:
                            case CP852:
                            case CP866:
                            case CP932:
                            case DEC8:
                            case EUCJPMS:
                            case EUCKR:
                            case GB2312:
                            case GBK:
                            case GEOSTD8:
                            case GREEK:
                            case HEBREW:
                            case HP8:
                            case KEYBCS2:
                            case KOI8R:
                            case KOI8U:
                            case LATIN1:
                            case LATIN2:
                            case LATIN5:
                            case LATIN7:
                            case MACCE:
                            case MACROMAN:
                            case SJIS:
                            case SWE7:
                            case TIS620:
                            case UCS2:
                            case UJIS:
                            case UTF16:
                            case UTF16LE:
                            case UTF32:
                            case UTF8:
                            case UTF8MB3:
                            case UTF8MB4:
                            case ARCHIVE:
                            case BLACKHOLE:
                            case CSV:
                            case FEDERATED:
                            case INNODB:
                            case MEMORY:
                            case MRG_MYISAM:
                            case MYISAM:
                            case NDB:
                            case NDBCLUSTER:
                            case PERFORMANCE_SCHEMA:
                            case TOKUDB:
                            case REPEATABLE:
                            case COMMITTED:
                            case UNCOMMITTED:
                            case SERIALIZABLE:
                            case GEOMETRYCOLLECTION:
                            case LINESTRING:
                            case MULTILINESTRING:
                            case MULTIPOINT:
                            case MULTIPOLYGON:
                            case POINT:
                            case POLYGON:
                            case ABS:
                            case ACOS:
                            case ADDDATE:
                            case ADDTIME:
                            case AES_DECRYPT:
                            case AES_ENCRYPT:
                            case AREA:
                            case ASBINARY:
                            case ASIN:
                            case ASTEXT:
                            case ASWKB:
                            case ASWKT:
                            case ASYMMETRIC_DECRYPT:
                            case ASYMMETRIC_DERIVE:
                            case ASYMMETRIC_ENCRYPT:
                            case ASYMMETRIC_SIGN:
                            case ASYMMETRIC_VERIFY:
                            case ATAN:
                            case ATAN2:
                            case BENCHMARK:
                            case BIN:
                            case BIT_COUNT:
                            case BIT_LENGTH:
                            case BUFFER:
                            case CATALOG_NAME:
                            case CEIL:
                            case CEILING:
                            case CENTROID:
                            case CHARACTER_LENGTH:
                            case CHARSET:
                            case CHAR_LENGTH:
                            case COERCIBILITY:
                            case COLLATION:
                            case COMPRESS:
                            case CONCAT:
                            case CONCAT_WS:
                            case CONNECTION_ID:
                            case CONV:
                            case CONVERT_TZ:
                            case COS:
                            case COT:
                            case CRC32:
                            case CREATE_ASYMMETRIC_PRIV_KEY:
                            case CREATE_ASYMMETRIC_PUB_KEY:
                            case CREATE_DH_PARAMETERS:
                            case CREATE_DIGEST:
                            case CROSSES:
                            case DATEDIFF:
                            case DATE_FORMAT:
                            case DAYNAME:
                            case DAYOFMONTH:
                            case DAYOFWEEK:
                            case DAYOFYEAR:
                            case DECODE:
                            case DEGREES:
                            case DES_DECRYPT:
                            case DES_ENCRYPT:
                            case DIMENSION:
                            case DISJOINT:
                            case ELT:
                            case ENCODE:
                            case ENCRYPT:
                            case ENDPOINT:
                            case ENVELOPE:
                            case EQUALS:
                            case EXP:
                            case EXPORT_SET:
                            case EXTERIORRING:
                            case EXTRACTVALUE:
                            case FIELD:
                            case FIND_IN_SET:
                            case FLOOR:
                            case FORMAT:
                            case FOUND_ROWS:
                            case FROM_BASE64:
                            case FROM_DAYS:
                            case FROM_UNIXTIME:
                            case GEOMCOLLFROMTEXT:
                            case GEOMCOLLFROMWKB:
                            case GEOMETRYCOLLECTIONFROMTEXT:
                            case GEOMETRYCOLLECTIONFROMWKB:
                            case GEOMETRYFROMTEXT:
                            case GEOMETRYFROMWKB:
                            case GEOMETRYN:
                            case GEOMETRYTYPE:
                            case GEOMFROMTEXT:
                            case GEOMFROMWKB:
                            case GET_FORMAT:
                            case GET_LOCK:
                            case GLENGTH:
                            case GREATEST:
                            case GTID_SUBSET:
                            case GTID_SUBTRACT:
                            case HEX:
                            case IFNULL:
                            case INET6_ATON:
                            case INET6_NTOA:
                            case INET_ATON:
                            case INET_NTOA:
                            case INSTR:
                            case INTERIORRINGN:
                            case INTERSECTS:
                            case ISCLOSED:
                            case ISEMPTY:
                            case ISNULL:
                            case ISSIMPLE:
                            case IS_FREE_LOCK:
                            case IS_IPV4:
                            case IS_IPV4_COMPAT:
                            case IS_IPV4_MAPPED:
                            case IS_IPV6:
                            case IS_USED_LOCK:
                            case LAST_INSERT_ID:
                            case LCASE:
                            case LEAST:
                            case LENGTH:
                            case LINEFROMTEXT:
                            case LINEFROMWKB:
                            case LINESTRINGFROMTEXT:
                            case LINESTRINGFROMWKB:
                            case LN:
                            case LOAD_FILE:
                            case LOCATE:
                            case LOG:
                            case LOG10:
                            case LOG2:
                            case LOWER:
                            case LPAD:
                            case LTRIM:
                            case MAKEDATE:
                            case MAKETIME:
                            case MAKE_SET:
                            case MASTER_POS_WAIT:
                            case MBRCONTAINS:
                            case MBRDISJOINT:
                            case MBREQUAL:
                            case MBRINTERSECTS:
                            case MBROVERLAPS:
                            case MBRTOUCHES:
                            case MBRWITHIN:
                            case MD5:
                            case MLINEFROMTEXT:
                            case MLINEFROMWKB:
                            case MONTHNAME:
                            case MPOINTFROMTEXT:
                            case MPOINTFROMWKB:
                            case MPOLYFROMTEXT:
                            case MPOLYFROMWKB:
                            case MULTILINESTRINGFROMTEXT:
                            case MULTILINESTRINGFROMWKB:
                            case MULTIPOINTFROMTEXT:
                            case MULTIPOINTFROMWKB:
                            case MULTIPOLYGONFROMTEXT:
                            case MULTIPOLYGONFROMWKB:
                            case NAME_CONST:
                            case NULLIF:
                            case NUMGEOMETRIES:
                            case NUMINTERIORRINGS:
                            case NUMPOINTS:
                            case OCT:
                            case OCTET_LENGTH:
                            case ORD:
                            case OVERLAPS:
                            case PERIOD_ADD:
                            case PERIOD_DIFF:
                            case PI:
                            case POINTFROMTEXT:
                            case POINTFROMWKB:
                            case POINTN:
                            case POLYFROMTEXT:
                            case POLYFROMWKB:
                            case POLYGONFROMTEXT:
                            case POLYGONFROMWKB:
                            case POW:
                            case POWER:
                            case QUOTE:
                            case RADIANS:
                            case RAND:
                            case RANDOM_BYTES:
                            case RELEASE_LOCK:
                            case REVERSE:
                            case ROUND:
                            case ROW_COUNT:
                            case RPAD:
                            case RTRIM:
                            case SEC_TO_TIME:
                            case SESSION_USER:
                            case SHA:
                            case SHA1:
                            case SHA2:
                            case SCHEMA_NAME:
                            case SIGN:
                            case SIN:
                            case SLEEP:
                            case SOUNDEX:
                            case SQL_THREAD_WAIT_AFTER_GTIDS:
                            case SQRT:
                            case SRID:
                            case STARTPOINT:
                            case STRCMP:
                            case STR_TO_DATE:
                            case ST_AREA:
                            case ST_ASBINARY:
                            case ST_ASTEXT:
                            case ST_ASWKB:
                            case ST_ASWKT:
                            case ST_BUFFER:
                            case ST_CENTROID:
                            case ST_CONTAINS:
                            case ST_CROSSES:
                            case ST_DIFFERENCE:
                            case ST_DIMENSION:
                            case ST_DISJOINT:
                            case ST_DISTANCE:
                            case ST_ENDPOINT:
                            case ST_ENVELOPE:
                            case ST_EQUALS:
                            case ST_EXTERIORRING:
                            case ST_GEOMCOLLFROMTEXT:
                            case ST_GEOMCOLLFROMTXT:
                            case ST_GEOMCOLLFROMWKB:
                            case ST_GEOMETRYCOLLECTIONFROMTEXT:
                            case ST_GEOMETRYCOLLECTIONFROMWKB:
                            case ST_GEOMETRYFROMTEXT:
                            case ST_GEOMETRYFROMWKB:
                            case ST_GEOMETRYN:
                            case ST_GEOMETRYTYPE:
                            case ST_GEOMFROMTEXT:
                            case ST_GEOMFROMWKB:
                            case ST_INTERIORRINGN:
                            case ST_INTERSECTION:
                            case ST_INTERSECTS:
                            case ST_ISCLOSED:
                            case ST_ISEMPTY:
                            case ST_ISSIMPLE:
                            case ST_LINEFROMTEXT:
                            case ST_LINEFROMWKB:
                            case ST_LINESTRINGFROMTEXT:
                            case ST_LINESTRINGFROMWKB:
                            case ST_NUMGEOMETRIES:
                            case ST_NUMINTERIORRING:
                            case ST_NUMINTERIORRINGS:
                            case ST_NUMPOINTS:
                            case ST_OVERLAPS:
                            case ST_POINTFROMTEXT:
                            case ST_POINTFROMWKB:
                            case ST_POINTN:
                            case ST_POLYFROMTEXT:
                            case ST_POLYFROMWKB:
                            case ST_POLYGONFROMTEXT:
                            case ST_POLYGONFROMWKB:
                            case ST_SRID:
                            case ST_STARTPOINT:
                            case ST_SYMDIFFERENCE:
                            case ST_TOUCHES:
                            case ST_UNION:
                            case ST_WITHIN:
                            case ST_X:
                            case ST_Y:
                            case SUBDATE:
                            case SUBSTRING_INDEX:
                            case SUBTIME:
                            case SYSTEM_USER:
                            case TAN:
                            case TIMEDIFF:
                            case TIMESTAMPADD:
                            case TIMESTAMPDIFF:
                            case TIME_FORMAT:
                            case TIME_TO_SEC:
                            case TOUCHES:
                            case TO_BASE64:
                            case TO_DAYS:
                            case TO_SECONDS:
                            case UCASE:
                            case UNCOMPRESS:
                            case UNCOMPRESSED_LENGTH:
                            case UNHEX:
                            case UNIX_TIMESTAMP:
                            case UPDATEXML:
                            case UPPER:
                            case UUID:
                            case UUID_SHORT:
                            case VALIDATE_PASSWORD_STRENGTH:
                            case VERSION:
                            case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
                            case WEEKDAY:
                            case WEEKOFYEAR:
                            case WEIGHT_STRING:
                            case WITHIN:
                            case YEARWEEK:
                            case Y_FUNCTION:
                            case X_FUNCTION:
                            case CHARSET_REVERSE_QOUTE_STRING:
                            case STRING_LITERAL:
                            case ID:
                            case REVERSE_QUOTE_ID:
                                {
                                    State = 2573; uidList();
                                }
                                break;
                            case ALL:
                                {
                                    State = 2574; Match(ALL);
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }
                    break;
                case 41:
                    _localctx = new AlterByOptimizePartitionContext(_localctx);
                    EnterOuterAlt(_localctx, 41);
                    {
                        State = 2577; Match(OPTIMIZE);
                        State = 2578; Match(PARTITION);
                        State = 2581;
                        ErrorHandler.Sync(this);
                        switch (TokenStream.LA(1))
                        {
                            case CURRENT:
                            case DATABASE:
                            case DIAGNOSTICS:
                            case LEFT:
                            case NUMBER:
                            case RIGHT:
                            case STACKED:
                            case DATE:
                            case TIME:
                            case TIMESTAMP:
                            case DATETIME:
                            case YEAR:
                            case TEXT:
                            case ENUM:
                            case SERIAL:
                            case COUNT:
                            case POSITION:
                            case ACCOUNT:
                            case ACTION:
                            case AFTER:
                            case AGGREGATE:
                            case ALGORITHM:
                            case ANY:
                            case AT:
                            case AUTHORS:
                            case AUTOCOMMIT:
                            case AUTOEXTEND_SIZE:
                            case AUTO_INCREMENT:
                            case AVG_ROW_LENGTH:
                            case BEGIN:
                            case BINLOG:
                            case BIT:
                            case BLOCK:
                            case BOOL:
                            case BOOLEAN:
                            case BTREE:
                            case CACHE:
                            case CASCADED:
                            case CHAIN:
                            case CHANGED:
                            case CHANNEL:
                            case CHECKSUM:
                            case PAGE_CHECKSUM:
                            case CIPHER:
                            case CLASS_ORIGIN:
                            case CLIENT:
                            case CLOSE:
                            case COALESCE:
                            case CODE:
                            case COLUMNS:
                            case COLUMN_FORMAT:
                            case COLUMN_NAME:
                            case COMMENT:
                            case COMMIT:
                            case COMPACT:
                            case COMPLETION:
                            case COMPRESSED:
                            case COMPRESSION:
                            case CONCURRENT:
                            case CONNECTION:
                            case CONSISTENT:
                            case CONSTRAINT_CATALOG:
                            case CONSTRAINT_SCHEMA:
                            case CONSTRAINT_NAME:
                            case CONTAINS:
                            case CONTEXT:
                            case CONTRIBUTORS:
                            case COPY:
                            case CPU:
                            case CURSOR_NAME:
                            case DATA:
                            case DATAFILE:
                            case DEALLOCATE:
                            case DEFAULT_AUTH:
                            case DEFINER:
                            case DELAY_KEY_WRITE:
                            case DES_KEY_FILE:
                            case DIRECTORY:
                            case DISABLE:
                            case DISCARD:
                            case DISK:
                            case DO:
                            case DUMPFILE:
                            case DUPLICATE:
                            case DYNAMIC:
                            case ENABLE:
                            case ENCRYPTION:
                            case END:
                            case ENDS:
                            case ENGINE:
                            case ENGINES:
                            case ERROR:
                            case ERRORS:
                            case ESCAPE:
                            case EVEN:
                            case EVENT:
                            case EVENTS:
                            case EVERY:
                            case EXCHANGE:
                            case EXCLUSIVE:
                            case EXPIRE:
                            case EXPORT:
                            case EXTENDED:
                            case EXTENT_SIZE:
                            case FAST:
                            case FAULTS:
                            case FIELDS:
                            case FILE_BLOCK_SIZE:
                            case FILTER:
                            case FIRST:
                            case FIXED:
                            case FLUSH:
                            case FOLLOWS:
                            case FOUND:
                            case FULL:
                            case FUNCTION:
                            case GENERAL:
                            case GLOBAL:
                            case GRANTS:
                            case GROUP_REPLICATION:
                            case HANDLER:
                            case HASH:
                            case HELP:
                            case HOST:
                            case HOSTS:
                            case IDENTIFIED:
                            case IGNORE_SERVER_IDS:
                            case IMPORT:
                            case INDEXES:
                            case INITIAL_SIZE:
                            case INPLACE:
                            case INSERT_METHOD:
                            case INSTALL:
                            case INSTANCE:
                            case INVISIBLE:
                            case INVOKER:
                            case IO:
                            case IO_THREAD:
                            case IPC:
                            case ISOLATION:
                            case ISSUER:
                            case JSON:
                            case KEY_BLOCK_SIZE:
                            case LANGUAGE:
                            case LAST:
                            case LEAVES:
                            case LESS:
                            case LEVEL:
                            case LIST:
                            case LOCAL:
                            case LOGFILE:
                            case LOGS:
                            case MASTER:
                            case MASTER_AUTO_POSITION:
                            case MASTER_CONNECT_RETRY:
                            case MASTER_DELAY:
                            case MASTER_HEARTBEAT_PERIOD:
                            case MASTER_HOST:
                            case MASTER_LOG_FILE:
                            case MASTER_LOG_POS:
                            case MASTER_PASSWORD:
                            case MASTER_PORT:
                            case MASTER_RETRY_COUNT:
                            case MASTER_SSL:
                            case MASTER_SSL_CA:
                            case MASTER_SSL_CAPATH:
                            case MASTER_SSL_CERT:
                            case MASTER_SSL_CIPHER:
                            case MASTER_SSL_CRL:
                            case MASTER_SSL_CRLPATH:
                            case MASTER_SSL_KEY:
                            case MASTER_TLS_VERSION:
                            case MASTER_USER:
                            case MAX_CONNECTIONS_PER_HOUR:
                            case MAX_QUERIES_PER_HOUR:
                            case MAX_ROWS:
                            case MAX_SIZE:
                            case MAX_UPDATES_PER_HOUR:
                            case MAX_USER_CONNECTIONS:
                            case MEDIUM:
                            case MERGE:
                            case MESSAGE_TEXT:
                            case MID:
                            case MIGRATE:
                            case MIN_ROWS:
                            case MODE:
                            case MODIFY:
                            case MUTEX:
                            case MYSQL:
                            case MYSQL_ERRNO:
                            case NAME:
                            case NAMES:
                            case NCHAR:
                            case NEVER:
                            case NEXT:
                            case NO:
                            case NODEGROUP:
                            case NONE:
                            case OFFLINE:
                            case OFFSET:
                            case OJ:
                            case OLD_PASSWORD:
                            case ONE:
                            case ONLINE:
                            case ONLY:
                            case OPEN:
                            case OPTIMIZER_COSTS:
                            case OPTIONS:
                            case OWNER:
                            case PACK_KEYS:
                            case PAGE:
                            case PARSER:
                            case PARTIAL:
                            case PARTITIONING:
                            case PARTITIONS:
                            case PASSWORD:
                            case PHASE:
                            case PLUGIN:
                            case PLUGIN_DIR:
                            case PLUGINS:
                            case PORT:
                            case PRECEDES:
                            case PREPARE:
                            case PRESERVE:
                            case PREV:
                            case PROCESSLIST:
                            case PROFILE:
                            case PROFILES:
                            case PROXY:
                            case QUERY:
                            case QUICK:
                            case REBUILD:
                            case RECOVER:
                            case REDO_BUFFER_SIZE:
                            case REDUNDANT:
                            case RELAY:
                            case RELAY_LOG_FILE:
                            case RELAY_LOG_POS:
                            case RELAYLOG:
                            case REMOVE:
                            case REORGANIZE:
                            case REPAIR:
                            case REPLICATE_DO_DB:
                            case REPLICATE_DO_TABLE:
                            case REPLICATE_IGNORE_DB:
                            case REPLICATE_IGNORE_TABLE:
                            case REPLICATE_REWRITE_DB:
                            case REPLICATE_WILD_DO_TABLE:
                            case REPLICATE_WILD_IGNORE_TABLE:
                            case REPLICATION:
                            case RESET:
                            case RESUME:
                            case RETURNED_SQLSTATE:
                            case RETURNS:
                            case ROLLBACK:
                            case ROLLUP:
                            case ROTATE:
                            case ROW:
                            case ROWS:
                            case ROW_FORMAT:
                            case SAVEPOINT:
                            case SCHEDULE:
                            case SECURITY:
                            case SERVER:
                            case SESSION:
                            case SHARE:
                            case SHARED:
                            case SIGNED:
                            case SIMPLE:
                            case SLAVE:
                            case SLOW:
                            case SNAPSHOT:
                            case SOCKET:
                            case SOME:
                            case SONAME:
                            case SOUNDS:
                            case SOURCE:
                            case SQL_AFTER_GTIDS:
                            case SQL_AFTER_MTS_GAPS:
                            case SQL_BEFORE_GTIDS:
                            case SQL_BUFFER_RESULT:
                            case SQL_CACHE:
                            case SQL_NO_CACHE:
                            case SQL_THREAD:
                            case START:
                            case STARTS:
                            case STATS_AUTO_RECALC:
                            case STATS_PERSISTENT:
                            case STATS_SAMPLE_PAGES:
                            case STATUS:
                            case STOP:
                            case STORAGE:
                            case STRING:
                            case SUBCLASS_ORIGIN:
                            case SUBJECT:
                            case SUBPARTITION:
                            case SUBPARTITIONS:
                            case SUSPEND:
                            case SWAPS:
                            case SWITCHES:
                            case TABLE_NAME:
                            case TABLESPACE:
                            case TEMPORARY:
                            case TEMPTABLE:
                            case THAN:
                            case TRADITIONAL:
                            case TRANSACTION:
                            case TRIGGERS:
                            case TRUNCATE:
                            case UNDEFINED:
                            case UNDOFILE:
                            case UNDO_BUFFER_SIZE:
                            case UNINSTALL:
                            case UNKNOWN:
                            case UNTIL:
                            case UPGRADE:
                            case USER:
                            case USE_FRM:
                            case USER_RESOURCES:
                            case VALIDATION:
                            case VALUE:
                            case VARIABLES:
                            case VIEW:
                            case VISIBLE:
                            case WAIT:
                            case WARNINGS:
                            case WITHOUT:
                            case WORK:
                            case WRAPPER:
                            case X509:
                            case XA:
                            case XML:
                            case INTERNAL:
                            case QUARTER:
                            case MONTH:
                            case DAY:
                            case HOUR:
                            case MINUTE:
                            case WEEK:
                            case SECOND:
                            case MICROSECOND:
                            case TABLES:
                            case ROUTINE:
                            case EXECUTE:
                            case FILE:
                            case PROCESS:
                            case RELOAD:
                            case SHUTDOWN:
                            case SUPER:
                            case PRIVILEGES:
                            case SESSION_VARIABLES_ADMIN:
                            case ARMSCII8:
                            case ASCII:
                            case BIG5:
                            case CP1250:
                            case CP1251:
                            case CP1256:
                            case CP1257:
                            case CP850:
                            case CP852:
                            case CP866:
                            case CP932:
                            case DEC8:
                            case EUCJPMS:
                            case EUCKR:
                            case GB2312:
                            case GBK:
                            case GEOSTD8:
                            case GREEK:
                            case HEBREW:
                            case HP8:
                            case KEYBCS2:
                            case KOI8R:
                            case KOI8U:
                            case LATIN1:
                            case LATIN2:
                            case LATIN5:
                            case LATIN7:
                            case MACCE:
                            case MACROMAN:
                            case SJIS:
                            case SWE7:
                            case TIS620:
                            case UCS2:
                            case UJIS:
                            case UTF16:
                            case UTF16LE:
                            case UTF32:
                            case UTF8:
                            case UTF8MB3:
                            case UTF8MB4:
                            case ARCHIVE:
                            case BLACKHOLE:
                            case CSV:
                            case FEDERATED:
                            case INNODB:
                            case MEMORY:
                            case MRG_MYISAM:
                            case MYISAM:
                            case NDB:
                            case NDBCLUSTER:
                            case PERFORMANCE_SCHEMA:
                            case TOKUDB:
                            case REPEATABLE:
                            case COMMITTED:
                            case UNCOMMITTED:
                            case SERIALIZABLE:
                            case GEOMETRYCOLLECTION:
                            case LINESTRING:
                            case MULTILINESTRING:
                            case MULTIPOINT:
                            case MULTIPOLYGON:
                            case POINT:
                            case POLYGON:
                            case ABS:
                            case ACOS:
                            case ADDDATE:
                            case ADDTIME:
                            case AES_DECRYPT:
                            case AES_ENCRYPT:
                            case AREA:
                            case ASBINARY:
                            case ASIN:
                            case ASTEXT:
                            case ASWKB:
                            case ASWKT:
                            case ASYMMETRIC_DECRYPT:
                            case ASYMMETRIC_DERIVE:
                            case ASYMMETRIC_ENCRYPT:
                            case ASYMMETRIC_SIGN:
                            case ASYMMETRIC_VERIFY:
                            case ATAN:
                            case ATAN2:
                            case BENCHMARK:
                            case BIN:
                            case BIT_COUNT:
                            case BIT_LENGTH:
                            case BUFFER:
                            case CATALOG_NAME:
                            case CEIL:
                            case CEILING:
                            case CENTROID:
                            case CHARACTER_LENGTH:
                            case CHARSET:
                            case CHAR_LENGTH:
                            case COERCIBILITY:
                            case COLLATION:
                            case COMPRESS:
                            case CONCAT:
                            case CONCAT_WS:
                            case CONNECTION_ID:
                            case CONV:
                            case CONVERT_TZ:
                            case COS:
                            case COT:
                            case CRC32:
                            case CREATE_ASYMMETRIC_PRIV_KEY:
                            case CREATE_ASYMMETRIC_PUB_KEY:
                            case CREATE_DH_PARAMETERS:
                            case CREATE_DIGEST:
                            case CROSSES:
                            case DATEDIFF:
                            case DATE_FORMAT:
                            case DAYNAME:
                            case DAYOFMONTH:
                            case DAYOFWEEK:
                            case DAYOFYEAR:
                            case DECODE:
                            case DEGREES:
                            case DES_DECRYPT:
                            case DES_ENCRYPT:
                            case DIMENSION:
                            case DISJOINT:
                            case ELT:
                            case ENCODE:
                            case ENCRYPT:
                            case ENDPOINT:
                            case ENVELOPE:
                            case EQUALS:
                            case EXP:
                            case EXPORT_SET:
                            case EXTERIORRING:
                            case EXTRACTVALUE:
                            case FIELD:
                            case FIND_IN_SET:
                            case FLOOR:
                            case FORMAT:
                            case FOUND_ROWS:
                            case FROM_BASE64:
                            case FROM_DAYS:
                            case FROM_UNIXTIME:
                            case GEOMCOLLFROMTEXT:
                            case GEOMCOLLFROMWKB:
                            case GEOMETRYCOLLECTIONFROMTEXT:
                            case GEOMETRYCOLLECTIONFROMWKB:
                            case GEOMETRYFROMTEXT:
                            case GEOMETRYFROMWKB:
                            case GEOMETRYN:
                            case GEOMETRYTYPE:
                            case GEOMFROMTEXT:
                            case GEOMFROMWKB:
                            case GET_FORMAT:
                            case GET_LOCK:
                            case GLENGTH:
                            case GREATEST:
                            case GTID_SUBSET:
                            case GTID_SUBTRACT:
                            case HEX:
                            case IFNULL:
                            case INET6_ATON:
                            case INET6_NTOA:
                            case INET_ATON:
                            case INET_NTOA:
                            case INSTR:
                            case INTERIORRINGN:
                            case INTERSECTS:
                            case ISCLOSED:
                            case ISEMPTY:
                            case ISNULL:
                            case ISSIMPLE:
                            case IS_FREE_LOCK:
                            case IS_IPV4:
                            case IS_IPV4_COMPAT:
                            case IS_IPV4_MAPPED:
                            case IS_IPV6:
                            case IS_USED_LOCK:
                            case LAST_INSERT_ID:
                            case LCASE:
                            case LEAST:
                            case LENGTH:
                            case LINEFROMTEXT:
                            case LINEFROMWKB:
                            case LINESTRINGFROMTEXT:
                            case LINESTRINGFROMWKB:
                            case LN:
                            case LOAD_FILE:
                            case LOCATE:
                            case LOG:
                            case LOG10:
                            case LOG2:
                            case LOWER:
                            case LPAD:
                            case LTRIM:
                            case MAKEDATE:
                            case MAKETIME:
                            case MAKE_SET:
                            case MASTER_POS_WAIT:
                            case MBRCONTAINS:
                            case MBRDISJOINT:
                            case MBREQUAL:
                            case MBRINTERSECTS:
                            case MBROVERLAPS:
                            case MBRTOUCHES:
                            case MBRWITHIN:
                            case MD5:
                            case MLINEFROMTEXT:
                            case MLINEFROMWKB:
                            case MONTHNAME:
                            case MPOINTFROMTEXT:
                            case MPOINTFROMWKB:
                            case MPOLYFROMTEXT:
                            case MPOLYFROMWKB:
                            case MULTILINESTRINGFROMTEXT:
                            case MULTILINESTRINGFROMWKB:
                            case MULTIPOINTFROMTEXT:
                            case MULTIPOINTFROMWKB:
                            case MULTIPOLYGONFROMTEXT:
                            case MULTIPOLYGONFROMWKB:
                            case NAME_CONST:
                            case NULLIF:
                            case NUMGEOMETRIES:
                            case NUMINTERIORRINGS:
                            case NUMPOINTS:
                            case OCT:
                            case OCTET_LENGTH:
                            case ORD:
                            case OVERLAPS:
                            case PERIOD_ADD:
                            case PERIOD_DIFF:
                            case PI:
                            case POINTFROMTEXT:
                            case POINTFROMWKB:
                            case POINTN:
                            case POLYFROMTEXT:
                            case POLYFROMWKB:
                            case POLYGONFROMTEXT:
                            case POLYGONFROMWKB:
                            case POW:
                            case POWER:
                            case QUOTE:
                            case RADIANS:
                            case RAND:
                            case RANDOM_BYTES:
                            case RELEASE_LOCK:
                            case REVERSE:
                            case ROUND:
                            case ROW_COUNT:
                            case RPAD:
                            case RTRIM:
                            case SEC_TO_TIME:
                            case SESSION_USER:
                            case SHA:
                            case SHA1:
                            case SHA2:
                            case SCHEMA_NAME:
                            case SIGN:
                            case SIN:
                            case SLEEP:
                            case SOUNDEX:
                            case SQL_THREAD_WAIT_AFTER_GTIDS:
                            case SQRT:
                            case SRID:
                            case STARTPOINT:
                            case STRCMP:
                            case STR_TO_DATE:
                            case ST_AREA:
                            case ST_ASBINARY:
                            case ST_ASTEXT:
                            case ST_ASWKB:
                            case ST_ASWKT:
                            case ST_BUFFER:
                            case ST_CENTROID:
                            case ST_CONTAINS:
                            case ST_CROSSES:
                            case ST_DIFFERENCE:
                            case ST_DIMENSION:
                            case ST_DISJOINT:
                            case ST_DISTANCE:
                            case ST_ENDPOINT:
                            case ST_ENVELOPE:
                            case ST_EQUALS:
                            case ST_EXTERIORRING:
                            case ST_GEOMCOLLFROMTEXT:
                            case ST_GEOMCOLLFROMTXT:
                            case ST_GEOMCOLLFROMWKB:
                            case ST_GEOMETRYCOLLECTIONFROMTEXT:
                            case ST_GEOMETRYCOLLECTIONFROMWKB:
                            case ST_GEOMETRYFROMTEXT:
                            case ST_GEOMETRYFROMWKB:
                            case ST_GEOMETRYN:
                            case ST_GEOMETRYTYPE:
                            case ST_GEOMFROMTEXT:
                            case ST_GEOMFROMWKB:
                            case ST_INTERIORRINGN:
                            case ST_INTERSECTION:
                            case ST_INTERSECTS:
                            case ST_ISCLOSED:
                            case ST_ISEMPTY:
                            case ST_ISSIMPLE:
                            case ST_LINEFROMTEXT:
                            case ST_LINEFROMWKB:
                            case ST_LINESTRINGFROMTEXT:
                            case ST_LINESTRINGFROMWKB:
                            case ST_NUMGEOMETRIES:
                            case ST_NUMINTERIORRING:
                            case ST_NUMINTERIORRINGS:
                            case ST_NUMPOINTS:
                            case ST_OVERLAPS:
                            case ST_POINTFROMTEXT:
                            case ST_POINTFROMWKB:
                            case ST_POINTN:
                            case ST_POLYFROMTEXT:
                            case ST_POLYFROMWKB:
                            case ST_POLYGONFROMTEXT:
                            case ST_POLYGONFROMWKB:
                            case ST_SRID:
                            case ST_STARTPOINT:
                            case ST_SYMDIFFERENCE:
                            case ST_TOUCHES:
                            case ST_UNION:
                            case ST_WITHIN:
                            case ST_X:
                            case ST_Y:
                            case SUBDATE:
                            case SUBSTRING_INDEX:
                            case SUBTIME:
                            case SYSTEM_USER:
                            case TAN:
                            case TIMEDIFF:
                            case TIMESTAMPADD:
                            case TIMESTAMPDIFF:
                            case TIME_FORMAT:
                            case TIME_TO_SEC:
                            case TOUCHES:
                            case TO_BASE64:
                            case TO_DAYS:
                            case TO_SECONDS:
                            case UCASE:
                            case UNCOMPRESS:
                            case UNCOMPRESSED_LENGTH:
                            case UNHEX:
                            case UNIX_TIMESTAMP:
                            case UPDATEXML:
                            case UPPER:
                            case UUID:
                            case UUID_SHORT:
                            case VALIDATE_PASSWORD_STRENGTH:
                            case VERSION:
                            case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
                            case WEEKDAY:
                            case WEEKOFYEAR:
                            case WEIGHT_STRING:
                            case WITHIN:
                            case YEARWEEK:
                            case Y_FUNCTION:
                            case X_FUNCTION:
                            case CHARSET_REVERSE_QOUTE_STRING:
                            case STRING_LITERAL:
                            case ID:
                            case REVERSE_QUOTE_ID:
                                {
                                    State = 2579; uidList();
                                }
                                break;
                            case ALL:
                                {
                                    State = 2580; Match(ALL);
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }
                    break;
                case 42:
                    _localctx = new AlterByRebuildPartitionContext(_localctx);
                    EnterOuterAlt(_localctx, 42);
                    {
                        State = 2583; Match(REBUILD);
                        State = 2584; Match(PARTITION);
                        State = 2587;
                        ErrorHandler.Sync(this);
                        switch (TokenStream.LA(1))
                        {
                            case CURRENT:
                            case DATABASE:
                            case DIAGNOSTICS:
                            case LEFT:
                            case NUMBER:
                            case RIGHT:
                            case STACKED:
                            case DATE:
                            case TIME:
                            case TIMESTAMP:
                            case DATETIME:
                            case YEAR:
                            case TEXT:
                            case ENUM:
                            case SERIAL:
                            case COUNT:
                            case POSITION:
                            case ACCOUNT:
                            case ACTION:
                            case AFTER:
                            case AGGREGATE:
                            case ALGORITHM:
                            case ANY:
                            case AT:
                            case AUTHORS:
                            case AUTOCOMMIT:
                            case AUTOEXTEND_SIZE:
                            case AUTO_INCREMENT:
                            case AVG_ROW_LENGTH:
                            case BEGIN:
                            case BINLOG:
                            case BIT:
                            case BLOCK:
                            case BOOL:
                            case BOOLEAN:
                            case BTREE:
                            case CACHE:
                            case CASCADED:
                            case CHAIN:
                            case CHANGED:
                            case CHANNEL:
                            case CHECKSUM:
                            case PAGE_CHECKSUM:
                            case CIPHER:
                            case CLASS_ORIGIN:
                            case CLIENT:
                            case CLOSE:
                            case COALESCE:
                            case CODE:
                            case COLUMNS:
                            case COLUMN_FORMAT:
                            case COLUMN_NAME:
                            case COMMENT:
                            case COMMIT:
                            case COMPACT:
                            case COMPLETION:
                            case COMPRESSED:
                            case COMPRESSION:
                            case CONCURRENT:
                            case CONNECTION:
                            case CONSISTENT:
                            case CONSTRAINT_CATALOG:
                            case CONSTRAINT_SCHEMA:
                            case CONSTRAINT_NAME:
                            case CONTAINS:
                            case CONTEXT:
                            case CONTRIBUTORS:
                            case COPY:
                            case CPU:
                            case CURSOR_NAME:
                            case DATA:
                            case DATAFILE:
                            case DEALLOCATE:
                            case DEFAULT_AUTH:
                            case DEFINER:
                            case DELAY_KEY_WRITE:
                            case DES_KEY_FILE:
                            case DIRECTORY:
                            case DISABLE:
                            case DISCARD:
                            case DISK:
                            case DO:
                            case DUMPFILE:
                            case DUPLICATE:
                            case DYNAMIC:
                            case ENABLE:
                            case ENCRYPTION:
                            case END:
                            case ENDS:
                            case ENGINE:
                            case ENGINES:
                            case ERROR:
                            case ERRORS:
                            case ESCAPE:
                            case EVEN:
                            case EVENT:
                            case EVENTS:
                            case EVERY:
                            case EXCHANGE:
                            case EXCLUSIVE:
                            case EXPIRE:
                            case EXPORT:
                            case EXTENDED:
                            case EXTENT_SIZE:
                            case FAST:
                            case FAULTS:
                            case FIELDS:
                            case FILE_BLOCK_SIZE:
                            case FILTER:
                            case FIRST:
                            case FIXED:
                            case FLUSH:
                            case FOLLOWS:
                            case FOUND:
                            case FULL:
                            case FUNCTION:
                            case GENERAL:
                            case GLOBAL:
                            case GRANTS:
                            case GROUP_REPLICATION:
                            case HANDLER:
                            case HASH:
                            case HELP:
                            case HOST:
                            case HOSTS:
                            case IDENTIFIED:
                            case IGNORE_SERVER_IDS:
                            case IMPORT:
                            case INDEXES:
                            case INITIAL_SIZE:
                            case INPLACE:
                            case INSERT_METHOD:
                            case INSTALL:
                            case INSTANCE:
                            case INVISIBLE:
                            case INVOKER:
                            case IO:
                            case IO_THREAD:
                            case IPC:
                            case ISOLATION:
                            case ISSUER:
                            case JSON:
                            case KEY_BLOCK_SIZE:
                            case LANGUAGE:
                            case LAST:
                            case LEAVES:
                            case LESS:
                            case LEVEL:
                            case LIST:
                            case LOCAL:
                            case LOGFILE:
                            case LOGS:
                            case MASTER:
                            case MASTER_AUTO_POSITION:
                            case MASTER_CONNECT_RETRY:
                            case MASTER_DELAY:
                            case MASTER_HEARTBEAT_PERIOD:
                            case MASTER_HOST:
                            case MASTER_LOG_FILE:
                            case MASTER_LOG_POS:
                            case MASTER_PASSWORD:
                            case MASTER_PORT:
                            case MASTER_RETRY_COUNT:
                            case MASTER_SSL:
                            case MASTER_SSL_CA:
                            case MASTER_SSL_CAPATH:
                            case MASTER_SSL_CERT:
                            case MASTER_SSL_CIPHER:
                            case MASTER_SSL_CRL:
                            case MASTER_SSL_CRLPATH:
                            case MASTER_SSL_KEY:
                            case MASTER_TLS_VERSION:
                            case MASTER_USER:
                            case MAX_CONNECTIONS_PER_HOUR:
                            case MAX_QUERIES_PER_HOUR:
                            case MAX_ROWS:
                            case MAX_SIZE:
                            case MAX_UPDATES_PER_HOUR:
                            case MAX_USER_CONNECTIONS:
                            case MEDIUM:
                            case MERGE:
                            case MESSAGE_TEXT:
                            case MID:
                            case MIGRATE:
                            case MIN_ROWS:
                            case MODE:
                            case MODIFY:
                            case MUTEX:
                            case MYSQL:
                            case MYSQL_ERRNO:
                            case NAME:
                            case NAMES:
                            case NCHAR:
                            case NEVER:
                            case NEXT:
                            case NO:
                            case NODEGROUP:
                            case NONE:
                            case OFFLINE:
                            case OFFSET:
                            case OJ:
                            case OLD_PASSWORD:
                            case ONE:
                            case ONLINE:
                            case ONLY:
                            case OPEN:
                            case OPTIMIZER_COSTS:
                            case OPTIONS:
                            case OWNER:
                            case PACK_KEYS:
                            case PAGE:
                            case PARSER:
                            case PARTIAL:
                            case PARTITIONING:
                            case PARTITIONS:
                            case PASSWORD:
                            case PHASE:
                            case PLUGIN:
                            case PLUGIN_DIR:
                            case PLUGINS:
                            case PORT:
                            case PRECEDES:
                            case PREPARE:
                            case PRESERVE:
                            case PREV:
                            case PROCESSLIST:
                            case PROFILE:
                            case PROFILES:
                            case PROXY:
                            case QUERY:
                            case QUICK:
                            case REBUILD:
                            case RECOVER:
                            case REDO_BUFFER_SIZE:
                            case REDUNDANT:
                            case RELAY:
                            case RELAY_LOG_FILE:
                            case RELAY_LOG_POS:
                            case RELAYLOG:
                            case REMOVE:
                            case REORGANIZE:
                            case REPAIR:
                            case REPLICATE_DO_DB:
                            case REPLICATE_DO_TABLE:
                            case REPLICATE_IGNORE_DB:
                            case REPLICATE_IGNORE_TABLE:
                            case REPLICATE_REWRITE_DB:
                            case REPLICATE_WILD_DO_TABLE:
                            case REPLICATE_WILD_IGNORE_TABLE:
                            case REPLICATION:
                            case RESET:
                            case RESUME:
                            case RETURNED_SQLSTATE:
                            case RETURNS:
                            case ROLLBACK:
                            case ROLLUP:
                            case ROTATE:
                            case ROW:
                            case ROWS:
                            case ROW_FORMAT:
                            case SAVEPOINT:
                            case SCHEDULE:
                            case SECURITY:
                            case SERVER:
                            case SESSION:
                            case SHARE:
                            case SHARED:
                            case SIGNED:
                            case SIMPLE:
                            case SLAVE:
                            case SLOW:
                            case SNAPSHOT:
                            case SOCKET:
                            case SOME:
                            case SONAME:
                            case SOUNDS:
                            case SOURCE:
                            case SQL_AFTER_GTIDS:
                            case SQL_AFTER_MTS_GAPS:
                            case SQL_BEFORE_GTIDS:
                            case SQL_BUFFER_RESULT:
                            case SQL_CACHE:
                            case SQL_NO_CACHE:
                            case SQL_THREAD:
                            case START:
                            case STARTS:
                            case STATS_AUTO_RECALC:
                            case STATS_PERSISTENT:
                            case STATS_SAMPLE_PAGES:
                            case STATUS:
                            case STOP:
                            case STORAGE:
                            case STRING:
                            case SUBCLASS_ORIGIN:
                            case SUBJECT:
                            case SUBPARTITION:
                            case SUBPARTITIONS:
                            case SUSPEND:
                            case SWAPS:
                            case SWITCHES:
                            case TABLE_NAME:
                            case TABLESPACE:
                            case TEMPORARY:
                            case TEMPTABLE:
                            case THAN:
                            case TRADITIONAL:
                            case TRANSACTION:
                            case TRIGGERS:
                            case TRUNCATE:
                            case UNDEFINED:
                            case UNDOFILE:
                            case UNDO_BUFFER_SIZE:
                            case UNINSTALL:
                            case UNKNOWN:
                            case UNTIL:
                            case UPGRADE:
                            case USER:
                            case USE_FRM:
                            case USER_RESOURCES:
                            case VALIDATION:
                            case VALUE:
                            case VARIABLES:
                            case VIEW:
                            case VISIBLE:
                            case WAIT:
                            case WARNINGS:
                            case WITHOUT:
                            case WORK:
                            case WRAPPER:
                            case X509:
                            case XA:
                            case XML:
                            case INTERNAL:
                            case QUARTER:
                            case MONTH:
                            case DAY:
                            case HOUR:
                            case MINUTE:
                            case WEEK:
                            case SECOND:
                            case MICROSECOND:
                            case TABLES:
                            case ROUTINE:
                            case EXECUTE:
                            case FILE:
                            case PROCESS:
                            case RELOAD:
                            case SHUTDOWN:
                            case SUPER:
                            case PRIVILEGES:
                            case SESSION_VARIABLES_ADMIN:
                            case ARMSCII8:
                            case ASCII:
                            case BIG5:
                            case CP1250:
                            case CP1251:
                            case CP1256:
                            case CP1257:
                            case CP850:
                            case CP852:
                            case CP866:
                            case CP932:
                            case DEC8:
                            case EUCJPMS:
                            case EUCKR:
                            case GB2312:
                            case GBK:
                            case GEOSTD8:
                            case GREEK:
                            case HEBREW:
                            case HP8:
                            case KEYBCS2:
                            case KOI8R:
                            case KOI8U:
                            case LATIN1:
                            case LATIN2:
                            case LATIN5:
                            case LATIN7:
                            case MACCE:
                            case MACROMAN:
                            case SJIS:
                            case SWE7:
                            case TIS620:
                            case UCS2:
                            case UJIS:
                            case UTF16:
                            case UTF16LE:
                            case UTF32:
                            case UTF8:
                            case UTF8MB3:
                            case UTF8MB4:
                            case ARCHIVE:
                            case BLACKHOLE:
                            case CSV:
                            case FEDERATED:
                            case INNODB:
                            case MEMORY:
                            case MRG_MYISAM:
                            case MYISAM:
                            case NDB:
                            case NDBCLUSTER:
                            case PERFORMANCE_SCHEMA:
                            case TOKUDB:
                            case REPEATABLE:
                            case COMMITTED:
                            case UNCOMMITTED:
                            case SERIALIZABLE:
                            case GEOMETRYCOLLECTION:
                            case LINESTRING:
                            case MULTILINESTRING:
                            case MULTIPOINT:
                            case MULTIPOLYGON:
                            case POINT:
                            case POLYGON:
                            case ABS:
                            case ACOS:
                            case ADDDATE:
                            case ADDTIME:
                            case AES_DECRYPT:
                            case AES_ENCRYPT:
                            case AREA:
                            case ASBINARY:
                            case ASIN:
                            case ASTEXT:
                            case ASWKB:
                            case ASWKT:
                            case ASYMMETRIC_DECRYPT:
                            case ASYMMETRIC_DERIVE:
                            case ASYMMETRIC_ENCRYPT:
                            case ASYMMETRIC_SIGN:
                            case ASYMMETRIC_VERIFY:
                            case ATAN:
                            case ATAN2:
                            case BENCHMARK:
                            case BIN:
                            case BIT_COUNT:
                            case BIT_LENGTH:
                            case BUFFER:
                            case CATALOG_NAME:
                            case CEIL:
                            case CEILING:
                            case CENTROID:
                            case CHARACTER_LENGTH:
                            case CHARSET:
                            case CHAR_LENGTH:
                            case COERCIBILITY:
                            case COLLATION:
                            case COMPRESS:
                            case CONCAT:
                            case CONCAT_WS:
                            case CONNECTION_ID:
                            case CONV:
                            case CONVERT_TZ:
                            case COS:
                            case COT:
                            case CRC32:
                            case CREATE_ASYMMETRIC_PRIV_KEY:
                            case CREATE_ASYMMETRIC_PUB_KEY:
                            case CREATE_DH_PARAMETERS:
                            case CREATE_DIGEST:
                            case CROSSES:
                            case DATEDIFF:
                            case DATE_FORMAT:
                            case DAYNAME:
                            case DAYOFMONTH:
                            case DAYOFWEEK:
                            case DAYOFYEAR:
                            case DECODE:
                            case DEGREES:
                            case DES_DECRYPT:
                            case DES_ENCRYPT:
                            case DIMENSION:
                            case DISJOINT:
                            case ELT:
                            case ENCODE:
                            case ENCRYPT:
                            case ENDPOINT:
                            case ENVELOPE:
                            case EQUALS:
                            case EXP:
                            case EXPORT_SET:
                            case EXTERIORRING:
                            case EXTRACTVALUE:
                            case FIELD:
                            case FIND_IN_SET:
                            case FLOOR:
                            case FORMAT:
                            case FOUND_ROWS:
                            case FROM_BASE64:
                            case FROM_DAYS:
                            case FROM_UNIXTIME:
                            case GEOMCOLLFROMTEXT:
                            case GEOMCOLLFROMWKB:
                            case GEOMETRYCOLLECTIONFROMTEXT:
                            case GEOMETRYCOLLECTIONFROMWKB:
                            case GEOMETRYFROMTEXT:
                            case GEOMETRYFROMWKB:
                            case GEOMETRYN:
                            case GEOMETRYTYPE:
                            case GEOMFROMTEXT:
                            case GEOMFROMWKB:
                            case GET_FORMAT:
                            case GET_LOCK:
                            case GLENGTH:
                            case GREATEST:
                            case GTID_SUBSET:
                            case GTID_SUBTRACT:
                            case HEX:
                            case IFNULL:
                            case INET6_ATON:
                            case INET6_NTOA:
                            case INET_ATON:
                            case INET_NTOA:
                            case INSTR:
                            case INTERIORRINGN:
                            case INTERSECTS:
                            case ISCLOSED:
                            case ISEMPTY:
                            case ISNULL:
                            case ISSIMPLE:
                            case IS_FREE_LOCK:
                            case IS_IPV4:
                            case IS_IPV4_COMPAT:
                            case IS_IPV4_MAPPED:
                            case IS_IPV6:
                            case IS_USED_LOCK:
                            case LAST_INSERT_ID:
                            case LCASE:
                            case LEAST:
                            case LENGTH:
                            case LINEFROMTEXT:
                            case LINEFROMWKB:
                            case LINESTRINGFROMTEXT:
                            case LINESTRINGFROMWKB:
                            case LN:
                            case LOAD_FILE:
                            case LOCATE:
                            case LOG:
                            case LOG10:
                            case LOG2:
                            case LOWER:
                            case LPAD:
                            case LTRIM:
                            case MAKEDATE:
                            case MAKETIME:
                            case MAKE_SET:
                            case MASTER_POS_WAIT:
                            case MBRCONTAINS:
                            case MBRDISJOINT:
                            case MBREQUAL:
                            case MBRINTERSECTS:
                            case MBROVERLAPS:
                            case MBRTOUCHES:
                            case MBRWITHIN:
                            case MD5:
                            case MLINEFROMTEXT:
                            case MLINEFROMWKB:
                            case MONTHNAME:
                            case MPOINTFROMTEXT:
                            case MPOINTFROMWKB:
                            case MPOLYFROMTEXT:
                            case MPOLYFROMWKB:
                            case MULTILINESTRINGFROMTEXT:
                            case MULTILINESTRINGFROMWKB:
                            case MULTIPOINTFROMTEXT:
                            case MULTIPOINTFROMWKB:
                            case MULTIPOLYGONFROMTEXT:
                            case MULTIPOLYGONFROMWKB:
                            case NAME_CONST:
                            case NULLIF:
                            case NUMGEOMETRIES:
                            case NUMINTERIORRINGS:
                            case NUMPOINTS:
                            case OCT:
                            case OCTET_LENGTH:
                            case ORD:
                            case OVERLAPS:
                            case PERIOD_ADD:
                            case PERIOD_DIFF:
                            case PI:
                            case POINTFROMTEXT:
                            case POINTFROMWKB:
                            case POINTN:
                            case POLYFROMTEXT:
                            case POLYFROMWKB:
                            case POLYGONFROMTEXT:
                            case POLYGONFROMWKB:
                            case POW:
                            case POWER:
                            case QUOTE:
                            case RADIANS:
                            case RAND:
                            case RANDOM_BYTES:
                            case RELEASE_LOCK:
                            case REVERSE:
                            case ROUND:
                            case ROW_COUNT:
                            case RPAD:
                            case RTRIM:
                            case SEC_TO_TIME:
                            case SESSION_USER:
                            case SHA:
                            case SHA1:
                            case SHA2:
                            case SCHEMA_NAME:
                            case SIGN:
                            case SIN:
                            case SLEEP:
                            case SOUNDEX:
                            case SQL_THREAD_WAIT_AFTER_GTIDS:
                            case SQRT:
                            case SRID:
                            case STARTPOINT:
                            case STRCMP:
                            case STR_TO_DATE:
                            case ST_AREA:
                            case ST_ASBINARY:
                            case ST_ASTEXT:
                            case ST_ASWKB:
                            case ST_ASWKT:
                            case ST_BUFFER:
                            case ST_CENTROID:
                            case ST_CONTAINS:
                            case ST_CROSSES:
                            case ST_DIFFERENCE:
                            case ST_DIMENSION:
                            case ST_DISJOINT:
                            case ST_DISTANCE:
                            case ST_ENDPOINT:
                            case ST_ENVELOPE:
                            case ST_EQUALS:
                            case ST_EXTERIORRING:
                            case ST_GEOMCOLLFROMTEXT:
                            case ST_GEOMCOLLFROMTXT:
                            case ST_GEOMCOLLFROMWKB:
                            case ST_GEOMETRYCOLLECTIONFROMTEXT:
                            case ST_GEOMETRYCOLLECTIONFROMWKB:
                            case ST_GEOMETRYFROMTEXT:
                            case ST_GEOMETRYFROMWKB:
                            case ST_GEOMETRYN:
                            case ST_GEOMETRYTYPE:
                            case ST_GEOMFROMTEXT:
                            case ST_GEOMFROMWKB:
                            case ST_INTERIORRINGN:
                            case ST_INTERSECTION:
                            case ST_INTERSECTS:
                            case ST_ISCLOSED:
                            case ST_ISEMPTY:
                            case ST_ISSIMPLE:
                            case ST_LINEFROMTEXT:
                            case ST_LINEFROMWKB:
                            case ST_LINESTRINGFROMTEXT:
                            case ST_LINESTRINGFROMWKB:
                            case ST_NUMGEOMETRIES:
                            case ST_NUMINTERIORRING:
                            case ST_NUMINTERIORRINGS:
                            case ST_NUMPOINTS:
                            case ST_OVERLAPS:
                            case ST_POINTFROMTEXT:
                            case ST_POINTFROMWKB:
                            case ST_POINTN:
                            case ST_POLYFROMTEXT:
                            case ST_POLYFROMWKB:
                            case ST_POLYGONFROMTEXT:
                            case ST_POLYGONFROMWKB:
                            case ST_SRID:
                            case ST_STARTPOINT:
                            case ST_SYMDIFFERENCE:
                            case ST_TOUCHES:
                            case ST_UNION:
                            case ST_WITHIN:
                            case ST_X:
                            case ST_Y:
                            case SUBDATE:
                            case SUBSTRING_INDEX:
                            case SUBTIME:
                            case SYSTEM_USER:
                            case TAN:
                            case TIMEDIFF:
                            case TIMESTAMPADD:
                            case TIMESTAMPDIFF:
                            case TIME_FORMAT:
                            case TIME_TO_SEC:
                            case TOUCHES:
                            case TO_BASE64:
                            case TO_DAYS:
                            case TO_SECONDS:
                            case UCASE:
                            case UNCOMPRESS:
                            case UNCOMPRESSED_LENGTH:
                            case UNHEX:
                            case UNIX_TIMESTAMP:
                            case UPDATEXML:
                            case UPPER:
                            case UUID:
                            case UUID_SHORT:
                            case VALIDATE_PASSWORD_STRENGTH:
                            case VERSION:
                            case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
                            case WEEKDAY:
                            case WEEKOFYEAR:
                            case WEIGHT_STRING:
                            case WITHIN:
                            case YEARWEEK:
                            case Y_FUNCTION:
                            case X_FUNCTION:
                            case CHARSET_REVERSE_QOUTE_STRING:
                            case STRING_LITERAL:
                            case ID:
                            case REVERSE_QUOTE_ID:
                                {
                                    State = 2585; uidList();
                                }
                                break;
                            case ALL:
                                {
                                    State = 2586; Match(ALL);
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }
                    break;
                case 43:
                    _localctx = new AlterByRepairPartitionContext(_localctx);
                    EnterOuterAlt(_localctx, 43);
                    {
                        State = 2589; Match(REPAIR);
                        State = 2590; Match(PARTITION);
                        State = 2593;
                        ErrorHandler.Sync(this);
                        switch (TokenStream.LA(1))
                        {
                            case CURRENT:
                            case DATABASE:
                            case DIAGNOSTICS:
                            case LEFT:
                            case NUMBER:
                            case RIGHT:
                            case STACKED:
                            case DATE:
                            case TIME:
                            case TIMESTAMP:
                            case DATETIME:
                            case YEAR:
                            case TEXT:
                            case ENUM:
                            case SERIAL:
                            case COUNT:
                            case POSITION:
                            case ACCOUNT:
                            case ACTION:
                            case AFTER:
                            case AGGREGATE:
                            case ALGORITHM:
                            case ANY:
                            case AT:
                            case AUTHORS:
                            case AUTOCOMMIT:
                            case AUTOEXTEND_SIZE:
                            case AUTO_INCREMENT:
                            case AVG_ROW_LENGTH:
                            case BEGIN:
                            case BINLOG:
                            case BIT:
                            case BLOCK:
                            case BOOL:
                            case BOOLEAN:
                            case BTREE:
                            case CACHE:
                            case CASCADED:
                            case CHAIN:
                            case CHANGED:
                            case CHANNEL:
                            case CHECKSUM:
                            case PAGE_CHECKSUM:
                            case CIPHER:
                            case CLASS_ORIGIN:
                            case CLIENT:
                            case CLOSE:
                            case COALESCE:
                            case CODE:
                            case COLUMNS:
                            case COLUMN_FORMAT:
                            case COLUMN_NAME:
                            case COMMENT:
                            case COMMIT:
                            case COMPACT:
                            case COMPLETION:
                            case COMPRESSED:
                            case COMPRESSION:
                            case CONCURRENT:
                            case CONNECTION:
                            case CONSISTENT:
                            case CONSTRAINT_CATALOG:
                            case CONSTRAINT_SCHEMA:
                            case CONSTRAINT_NAME:
                            case CONTAINS:
                            case CONTEXT:
                            case CONTRIBUTORS:
                            case COPY:
                            case CPU:
                            case CURSOR_NAME:
                            case DATA:
                            case DATAFILE:
                            case DEALLOCATE:
                            case DEFAULT_AUTH:
                            case DEFINER:
                            case DELAY_KEY_WRITE:
                            case DES_KEY_FILE:
                            case DIRECTORY:
                            case DISABLE:
                            case DISCARD:
                            case DISK:
                            case DO:
                            case DUMPFILE:
                            case DUPLICATE:
                            case DYNAMIC:
                            case ENABLE:
                            case ENCRYPTION:
                            case END:
                            case ENDS:
                            case ENGINE:
                            case ENGINES:
                            case ERROR:
                            case ERRORS:
                            case ESCAPE:
                            case EVEN:
                            case EVENT:
                            case EVENTS:
                            case EVERY:
                            case EXCHANGE:
                            case EXCLUSIVE:
                            case EXPIRE:
                            case EXPORT:
                            case EXTENDED:
                            case EXTENT_SIZE:
                            case FAST:
                            case FAULTS:
                            case FIELDS:
                            case FILE_BLOCK_SIZE:
                            case FILTER:
                            case FIRST:
                            case FIXED:
                            case FLUSH:
                            case FOLLOWS:
                            case FOUND:
                            case FULL:
                            case FUNCTION:
                            case GENERAL:
                            case GLOBAL:
                            case GRANTS:
                            case GROUP_REPLICATION:
                            case HANDLER:
                            case HASH:
                            case HELP:
                            case HOST:
                            case HOSTS:
                            case IDENTIFIED:
                            case IGNORE_SERVER_IDS:
                            case IMPORT:
                            case INDEXES:
                            case INITIAL_SIZE:
                            case INPLACE:
                            case INSERT_METHOD:
                            case INSTALL:
                            case INSTANCE:
                            case INVISIBLE:
                            case INVOKER:
                            case IO:
                            case IO_THREAD:
                            case IPC:
                            case ISOLATION:
                            case ISSUER:
                            case JSON:
                            case KEY_BLOCK_SIZE:
                            case LANGUAGE:
                            case LAST:
                            case LEAVES:
                            case LESS:
                            case LEVEL:
                            case LIST:
                            case LOCAL:
                            case LOGFILE:
                            case LOGS:
                            case MASTER:
                            case MASTER_AUTO_POSITION:
                            case MASTER_CONNECT_RETRY:
                            case MASTER_DELAY:
                            case MASTER_HEARTBEAT_PERIOD:
                            case MASTER_HOST:
                            case MASTER_LOG_FILE:
                            case MASTER_LOG_POS:
                            case MASTER_PASSWORD:
                            case MASTER_PORT:
                            case MASTER_RETRY_COUNT:
                            case MASTER_SSL:
                            case MASTER_SSL_CA:
                            case MASTER_SSL_CAPATH:
                            case MASTER_SSL_CERT:
                            case MASTER_SSL_CIPHER:
                            case MASTER_SSL_CRL:
                            case MASTER_SSL_CRLPATH:
                            case MASTER_SSL_KEY:
                            case MASTER_TLS_VERSION:
                            case MASTER_USER:
                            case MAX_CONNECTIONS_PER_HOUR:
                            case MAX_QUERIES_PER_HOUR:
                            case MAX_ROWS:
                            case MAX_SIZE:
                            case MAX_UPDATES_PER_HOUR:
                            case MAX_USER_CONNECTIONS:
                            case MEDIUM:
                            case MERGE:
                            case MESSAGE_TEXT:
                            case MID:
                            case MIGRATE:
                            case MIN_ROWS:
                            case MODE:
                            case MODIFY:
                            case MUTEX:
                            case MYSQL:
                            case MYSQL_ERRNO:
                            case NAME:
                            case NAMES:
                            case NCHAR:
                            case NEVER:
                            case NEXT:
                            case NO:
                            case NODEGROUP:
                            case NONE:
                            case OFFLINE:
                            case OFFSET:
                            case OJ:
                            case OLD_PASSWORD:
                            case ONE:
                            case ONLINE:
                            case ONLY:
                            case OPEN:
                            case OPTIMIZER_COSTS:
                            case OPTIONS:
                            case OWNER:
                            case PACK_KEYS:
                            case PAGE:
                            case PARSER:
                            case PARTIAL:
                            case PARTITIONING:
                            case PARTITIONS:
                            case PASSWORD:
                            case PHASE:
                            case PLUGIN:
                            case PLUGIN_DIR:
                            case PLUGINS:
                            case PORT:
                            case PRECEDES:
                            case PREPARE:
                            case PRESERVE:
                            case PREV:
                            case PROCESSLIST:
                            case PROFILE:
                            case PROFILES:
                            case PROXY:
                            case QUERY:
                            case QUICK:
                            case REBUILD:
                            case RECOVER:
                            case REDO_BUFFER_SIZE:
                            case REDUNDANT:
                            case RELAY:
                            case RELAY_LOG_FILE:
                            case RELAY_LOG_POS:
                            case RELAYLOG:
                            case REMOVE:
                            case REORGANIZE:
                            case REPAIR:
                            case REPLICATE_DO_DB:
                            case REPLICATE_DO_TABLE:
                            case REPLICATE_IGNORE_DB:
                            case REPLICATE_IGNORE_TABLE:
                            case REPLICATE_REWRITE_DB:
                            case REPLICATE_WILD_DO_TABLE:
                            case REPLICATE_WILD_IGNORE_TABLE:
                            case REPLICATION:
                            case RESET:
                            case RESUME:
                            case RETURNED_SQLSTATE:
                            case RETURNS:
                            case ROLLBACK:
                            case ROLLUP:
                            case ROTATE:
                            case ROW:
                            case ROWS:
                            case ROW_FORMAT:
                            case SAVEPOINT:
                            case SCHEDULE:
                            case SECURITY:
                            case SERVER:
                            case SESSION:
                            case SHARE:
                            case SHARED:
                            case SIGNED:
                            case SIMPLE:
                            case SLAVE:
                            case SLOW:
                            case SNAPSHOT:
                            case SOCKET:
                            case SOME:
                            case SONAME:
                            case SOUNDS:
                            case SOURCE:
                            case SQL_AFTER_GTIDS:
                            case SQL_AFTER_MTS_GAPS:
                            case SQL_BEFORE_GTIDS:
                            case SQL_BUFFER_RESULT:
                            case SQL_CACHE:
                            case SQL_NO_CACHE:
                            case SQL_THREAD:
                            case START:
                            case STARTS:
                            case STATS_AUTO_RECALC:
                            case STATS_PERSISTENT:
                            case STATS_SAMPLE_PAGES:
                            case STATUS:
                            case STOP:
                            case STORAGE:
                            case STRING:
                            case SUBCLASS_ORIGIN:
                            case SUBJECT:
                            case SUBPARTITION:
                            case SUBPARTITIONS:
                            case SUSPEND:
                            case SWAPS:
                            case SWITCHES:
                            case TABLE_NAME:
                            case TABLESPACE:
                            case TEMPORARY:
                            case TEMPTABLE:
                            case THAN:
                            case TRADITIONAL:
                            case TRANSACTION:
                            case TRIGGERS:
                            case TRUNCATE:
                            case UNDEFINED:
                            case UNDOFILE:
                            case UNDO_BUFFER_SIZE:
                            case UNINSTALL:
                            case UNKNOWN:
                            case UNTIL:
                            case UPGRADE:
                            case USER:
                            case USE_FRM:
                            case USER_RESOURCES:
                            case VALIDATION:
                            case VALUE:
                            case VARIABLES:
                            case VIEW:
                            case VISIBLE:
                            case WAIT:
                            case WARNINGS:
                            case WITHOUT:
                            case WORK:
                            case WRAPPER:
                            case X509:
                            case XA:
                            case XML:
                            case INTERNAL:
                            case QUARTER:
                            case MONTH:
                            case DAY:
                            case HOUR:
                            case MINUTE:
                            case WEEK:
                            case SECOND:
                            case MICROSECOND:
                            case TABLES:
                            case ROUTINE:
                            case EXECUTE:
                            case FILE:
                            case PROCESS:
                            case RELOAD:
                            case SHUTDOWN:
                            case SUPER:
                            case PRIVILEGES:
                            case SESSION_VARIABLES_ADMIN:
                            case ARMSCII8:
                            case ASCII:
                            case BIG5:
                            case CP1250:
                            case CP1251:
                            case CP1256:
                            case CP1257:
                            case CP850:
                            case CP852:
                            case CP866:
                            case CP932:
                            case DEC8:
                            case EUCJPMS:
                            case EUCKR:
                            case GB2312:
                            case GBK:
                            case GEOSTD8:
                            case GREEK:
                            case HEBREW:
                            case HP8:
                            case KEYBCS2:
                            case KOI8R:
                            case KOI8U:
                            case LATIN1:
                            case LATIN2:
                            case LATIN5:
                            case LATIN7:
                            case MACCE:
                            case MACROMAN:
                            case SJIS:
                            case SWE7:
                            case TIS620:
                            case UCS2:
                            case UJIS:
                            case UTF16:
                            case UTF16LE:
                            case UTF32:
                            case UTF8:
                            case UTF8MB3:
                            case UTF8MB4:
                            case ARCHIVE:
                            case BLACKHOLE:
                            case CSV:
                            case FEDERATED:
                            case INNODB:
                            case MEMORY:
                            case MRG_MYISAM:
                            case MYISAM:
                            case NDB:
                            case NDBCLUSTER:
                            case PERFORMANCE_SCHEMA:
                            case TOKUDB:
                            case REPEATABLE:
                            case COMMITTED:
                            case UNCOMMITTED:
                            case SERIALIZABLE:
                            case GEOMETRYCOLLECTION:
                            case LINESTRING:
                            case MULTILINESTRING:
                            case MULTIPOINT:
                            case MULTIPOLYGON:
                            case POINT:
                            case POLYGON:
                            case ABS:
                            case ACOS:
                            case ADDDATE:
                            case ADDTIME:
                            case AES_DECRYPT:
                            case AES_ENCRYPT:
                            case AREA:
                            case ASBINARY:
                            case ASIN:
                            case ASTEXT:
                            case ASWKB:
                            case ASWKT:
                            case ASYMMETRIC_DECRYPT:
                            case ASYMMETRIC_DERIVE:
                            case ASYMMETRIC_ENCRYPT:
                            case ASYMMETRIC_SIGN:
                            case ASYMMETRIC_VERIFY:
                            case ATAN:
                            case ATAN2:
                            case BENCHMARK:
                            case BIN:
                            case BIT_COUNT:
                            case BIT_LENGTH:
                            case BUFFER:
                            case CATALOG_NAME:
                            case CEIL:
                            case CEILING:
                            case CENTROID:
                            case CHARACTER_LENGTH:
                            case CHARSET:
                            case CHAR_LENGTH:
                            case COERCIBILITY:
                            case COLLATION:
                            case COMPRESS:
                            case CONCAT:
                            case CONCAT_WS:
                            case CONNECTION_ID:
                            case CONV:
                            case CONVERT_TZ:
                            case COS:
                            case COT:
                            case CRC32:
                            case CREATE_ASYMMETRIC_PRIV_KEY:
                            case CREATE_ASYMMETRIC_PUB_KEY:
                            case CREATE_DH_PARAMETERS:
                            case CREATE_DIGEST:
                            case CROSSES:
                            case DATEDIFF:
                            case DATE_FORMAT:
                            case DAYNAME:
                            case DAYOFMONTH:
                            case DAYOFWEEK:
                            case DAYOFYEAR:
                            case DECODE:
                            case DEGREES:
                            case DES_DECRYPT:
                            case DES_ENCRYPT:
                            case DIMENSION:
                            case DISJOINT:
                            case ELT:
                            case ENCODE:
                            case ENCRYPT:
                            case ENDPOINT:
                            case ENVELOPE:
                            case EQUALS:
                            case EXP:
                            case EXPORT_SET:
                            case EXTERIORRING:
                            case EXTRACTVALUE:
                            case FIELD:
                            case FIND_IN_SET:
                            case FLOOR:
                            case FORMAT:
                            case FOUND_ROWS:
                            case FROM_BASE64:
                            case FROM_DAYS:
                            case FROM_UNIXTIME:
                            case GEOMCOLLFROMTEXT:
                            case GEOMCOLLFROMWKB:
                            case GEOMETRYCOLLECTIONFROMTEXT:
                            case GEOMETRYCOLLECTIONFROMWKB:
                            case GEOMETRYFROMTEXT:
                            case GEOMETRYFROMWKB:
                            case GEOMETRYN:
                            case GEOMETRYTYPE:
                            case GEOMFROMTEXT:
                            case GEOMFROMWKB:
                            case GET_FORMAT:
                            case GET_LOCK:
                            case GLENGTH:
                            case GREATEST:
                            case GTID_SUBSET:
                            case GTID_SUBTRACT:
                            case HEX:
                            case IFNULL:
                            case INET6_ATON:
                            case INET6_NTOA:
                            case INET_ATON:
                            case INET_NTOA:
                            case INSTR:
                            case INTERIORRINGN:
                            case INTERSECTS:
                            case ISCLOSED:
                            case ISEMPTY:
                            case ISNULL:
                            case ISSIMPLE:
                            case IS_FREE_LOCK:
                            case IS_IPV4:
                            case IS_IPV4_COMPAT:
                            case IS_IPV4_MAPPED:
                            case IS_IPV6:
                            case IS_USED_LOCK:
                            case LAST_INSERT_ID:
                            case LCASE:
                            case LEAST:
                            case LENGTH:
                            case LINEFROMTEXT:
                            case LINEFROMWKB:
                            case LINESTRINGFROMTEXT:
                            case LINESTRINGFROMWKB:
                            case LN:
                            case LOAD_FILE:
                            case LOCATE:
                            case LOG:
                            case LOG10:
                            case LOG2:
                            case LOWER:
                            case LPAD:
                            case LTRIM:
                            case MAKEDATE:
                            case MAKETIME:
                            case MAKE_SET:
                            case MASTER_POS_WAIT:
                            case MBRCONTAINS:
                            case MBRDISJOINT:
                            case MBREQUAL:
                            case MBRINTERSECTS:
                            case MBROVERLAPS:
                            case MBRTOUCHES:
                            case MBRWITHIN:
                            case MD5:
                            case MLINEFROMTEXT:
                            case MLINEFROMWKB:
                            case MONTHNAME:
                            case MPOINTFROMTEXT:
                            case MPOINTFROMWKB:
                            case MPOLYFROMTEXT:
                            case MPOLYFROMWKB:
                            case MULTILINESTRINGFROMTEXT:
                            case MULTILINESTRINGFROMWKB:
                            case MULTIPOINTFROMTEXT:
                            case MULTIPOINTFROMWKB:
                            case MULTIPOLYGONFROMTEXT:
                            case MULTIPOLYGONFROMWKB:
                            case NAME_CONST:
                            case NULLIF:
                            case NUMGEOMETRIES:
                            case NUMINTERIORRINGS:
                            case NUMPOINTS:
                            case OCT:
                            case OCTET_LENGTH:
                            case ORD:
                            case OVERLAPS:
                            case PERIOD_ADD:
                            case PERIOD_DIFF:
                            case PI:
                            case POINTFROMTEXT:
                            case POINTFROMWKB:
                            case POINTN:
                            case POLYFROMTEXT:
                            case POLYFROMWKB:
                            case POLYGONFROMTEXT:
                            case POLYGONFROMWKB:
                            case POW:
                            case POWER:
                            case QUOTE:
                            case RADIANS:
                            case RAND:
                            case RANDOM_BYTES:
                            case RELEASE_LOCK:
                            case REVERSE:
                            case ROUND:
                            case ROW_COUNT:
                            case RPAD:
                            case RTRIM:
                            case SEC_TO_TIME:
                            case SESSION_USER:
                            case SHA:
                            case SHA1:
                            case SHA2:
                            case SCHEMA_NAME:
                            case SIGN:
                            case SIN:
                            case SLEEP:
                            case SOUNDEX:
                            case SQL_THREAD_WAIT_AFTER_GTIDS:
                            case SQRT:
                            case SRID:
                            case STARTPOINT:
                            case STRCMP:
                            case STR_TO_DATE:
                            case ST_AREA:
                            case ST_ASBINARY:
                            case ST_ASTEXT:
                            case ST_ASWKB:
                            case ST_ASWKT:
                            case ST_BUFFER:
                            case ST_CENTROID:
                            case ST_CONTAINS:
                            case ST_CROSSES:
                            case ST_DIFFERENCE:
                            case ST_DIMENSION:
                            case ST_DISJOINT:
                            case ST_DISTANCE:
                            case ST_ENDPOINT:
                            case ST_ENVELOPE:
                            case ST_EQUALS:
                            case ST_EXTERIORRING:
                            case ST_GEOMCOLLFROMTEXT:
                            case ST_GEOMCOLLFROMTXT:
                            case ST_GEOMCOLLFROMWKB:
                            case ST_GEOMETRYCOLLECTIONFROMTEXT:
                            case ST_GEOMETRYCOLLECTIONFROMWKB:
                            case ST_GEOMETRYFROMTEXT:
                            case ST_GEOMETRYFROMWKB:
                            case ST_GEOMETRYN:
                            case ST_GEOMETRYTYPE:
                            case ST_GEOMFROMTEXT:
                            case ST_GEOMFROMWKB:
                            case ST_INTERIORRINGN:
                            case ST_INTERSECTION:
                            case ST_INTERSECTS:
                            case ST_ISCLOSED:
                            case ST_ISEMPTY:
                            case ST_ISSIMPLE:
                            case ST_LINEFROMTEXT:
                            case ST_LINEFROMWKB:
                            case ST_LINESTRINGFROMTEXT:
                            case ST_LINESTRINGFROMWKB:
                            case ST_NUMGEOMETRIES:
                            case ST_NUMINTERIORRING:
                            case ST_NUMINTERIORRINGS:
                            case ST_NUMPOINTS:
                            case ST_OVERLAPS:
                            case ST_POINTFROMTEXT:
                            case ST_POINTFROMWKB:
                            case ST_POINTN:
                            case ST_POLYFROMTEXT:
                            case ST_POLYFROMWKB:
                            case ST_POLYGONFROMTEXT:
                            case ST_POLYGONFROMWKB:
                            case ST_SRID:
                            case ST_STARTPOINT:
                            case ST_SYMDIFFERENCE:
                            case ST_TOUCHES:
                            case ST_UNION:
                            case ST_WITHIN:
                            case ST_X:
                            case ST_Y:
                            case SUBDATE:
                            case SUBSTRING_INDEX:
                            case SUBTIME:
                            case SYSTEM_USER:
                            case TAN:
                            case TIMEDIFF:
                            case TIMESTAMPADD:
                            case TIMESTAMPDIFF:
                            case TIME_FORMAT:
                            case TIME_TO_SEC:
                            case TOUCHES:
                            case TO_BASE64:
                            case TO_DAYS:
                            case TO_SECONDS:
                            case UCASE:
                            case UNCOMPRESS:
                            case UNCOMPRESSED_LENGTH:
                            case UNHEX:
                            case UNIX_TIMESTAMP:
                            case UPDATEXML:
                            case UPPER:
                            case UUID:
                            case UUID_SHORT:
                            case VALIDATE_PASSWORD_STRENGTH:
                            case VERSION:
                            case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
                            case WEEKDAY:
                            case WEEKOFYEAR:
                            case WEIGHT_STRING:
                            case WITHIN:
                            case YEARWEEK:
                            case Y_FUNCTION:
                            case X_FUNCTION:
                            case CHARSET_REVERSE_QOUTE_STRING:
                            case STRING_LITERAL:
                            case ID:
                            case REVERSE_QUOTE_ID:
                                {
                                    State = 2591; uidList();
                                }
                                break;
                            case ALL:
                                {
                                    State = 2592; Match(ALL);
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }
                    break;
                case 44:
                    _localctx = new AlterByRemovePartitioningContext(_localctx);
                    EnterOuterAlt(_localctx, 44);
                    {
                        State = 2595; Match(REMOVE);
                        State = 2596; Match(PARTITIONING);
                    }
                    break;
                case 45:
                    _localctx = new AlterByUpgradePartitioningContext(_localctx);
                    EnterOuterAlt(_localctx, 45);
                    {
                        State = 2597; Match(UPGRADE);
                        State = 2598; Match(PARTITIONING);
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class DropDatabaseContext : ParserRuleContext
    {
        public IToken dbFormat;
        public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public ITerminalNode DATABASE() { return GetToken(MySqlParser.DATABASE, 0); }
        public ITerminalNode SCHEMA() { return GetToken(MySqlParser.SCHEMA, 0); }
        public IfExistsContext ifExists()
        {
            return GetRuleContext<IfExistsContext>(0);
        }
        public DropDatabaseContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_dropDatabase; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterDropDatabase(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitDropDatabase(this);
        }
    }

    [RuleVersion(0)]
    public DropDatabaseContext dropDatabase()
    {
        DropDatabaseContext _localctx = new DropDatabaseContext(Context, State);
        EnterRule(_localctx, 134, RULE_dropDatabase);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 2601; Match(DROP);
                State = 2602;
                _localctx.dbFormat = TokenStream.LT(1);
                _la = TokenStream.LA(1);
                if (!(_la == DATABASE || _la == SCHEMA))
                {
                    _localctx.dbFormat = ErrorHandler.RecoverInline(this);
                }
                else
                {
                    ErrorHandler.ReportMatch(this);
                    Consume();
                }
                State = 2604;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == IF)
                {
                    {
                        State = 2603; ifExists();
                    }
                }

                State = 2606; uid();
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class DropEventContext : ParserRuleContext
    {
        public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
        public ITerminalNode EVENT() { return GetToken(MySqlParser.EVENT, 0); }
        public FullIdContext fullId()
        {
            return GetRuleContext<FullIdContext>(0);
        }
        public IfExistsContext ifExists()
        {
            return GetRuleContext<IfExistsContext>(0);
        }
        public DropEventContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_dropEvent; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterDropEvent(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitDropEvent(this);
        }
    }

    [RuleVersion(0)]
    public DropEventContext dropEvent()
    {
        DropEventContext _localctx = new DropEventContext(Context, State);
        EnterRule(_localctx, 136, RULE_dropEvent);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 2608; Match(DROP);
                State = 2609; Match(EVENT);
                State = 2611;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == IF)
                {
                    {
                        State = 2610; ifExists();
                    }
                }

                State = 2613; fullId();
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class DropIndexContext : ParserRuleContext
    {
        public IToken intimeAction;
        public IToken algType;
        public IToken lockType;
        public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
        public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
        public TableNameContext tableName()
        {
            return GetRuleContext<TableNameContext>(0);
        }
        public ITerminalNode[] ALGORITHM() { return GetTokens(MySqlParser.ALGORITHM); }
        public ITerminalNode ALGORITHM(int i)
        {
            return GetToken(MySqlParser.ALGORITHM, i);
        }
        public ITerminalNode[] LOCK() { return GetTokens(MySqlParser.LOCK); }
        public ITerminalNode LOCK(int i)
        {
            return GetToken(MySqlParser.LOCK, i);
        }
        public ITerminalNode ONLINE() { return GetToken(MySqlParser.ONLINE, 0); }
        public ITerminalNode OFFLINE() { return GetToken(MySqlParser.OFFLINE, 0); }
        public ITerminalNode[] DEFAULT() { return GetTokens(MySqlParser.DEFAULT); }
        public ITerminalNode DEFAULT(int i)
        {
            return GetToken(MySqlParser.DEFAULT, i);
        }
        public ITerminalNode[] INPLACE() { return GetTokens(MySqlParser.INPLACE); }
        public ITerminalNode INPLACE(int i)
        {
            return GetToken(MySqlParser.INPLACE, i);
        }
        public ITerminalNode[] COPY() { return GetTokens(MySqlParser.COPY); }
        public ITerminalNode COPY(int i)
        {
            return GetToken(MySqlParser.COPY, i);
        }
        public ITerminalNode[] NONE() { return GetTokens(MySqlParser.NONE); }
        public ITerminalNode NONE(int i)
        {
            return GetToken(MySqlParser.NONE, i);
        }
        public ITerminalNode[] SHARED() { return GetTokens(MySqlParser.SHARED); }
        public ITerminalNode SHARED(int i)
        {
            return GetToken(MySqlParser.SHARED, i);
        }
        public ITerminalNode[] EXCLUSIVE() { return GetTokens(MySqlParser.EXCLUSIVE); }
        public ITerminalNode EXCLUSIVE(int i)
        {
            return GetToken(MySqlParser.EXCLUSIVE, i);
        }
        public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
        public ITerminalNode EQUAL_SYMBOL(int i)
        {
            return GetToken(MySqlParser.EQUAL_SYMBOL, i);
        }
        public DropIndexContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_dropIndex; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterDropIndex(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitDropIndex(this);
        }
    }

    [RuleVersion(0)]
    public DropIndexContext dropIndex()
    {
        DropIndexContext _localctx = new DropIndexContext(Context, State);
        EnterRule(_localctx, 138, RULE_dropIndex);
        int _la;
        try
        {
            int _alt;
            EnterOuterAlt(_localctx, 1);
            {
                State = 2615; Match(DROP);
                State = 2616; Match(INDEX);
                State = 2618;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 333, Context))
                {
                    case 1:
                        {
                            State = 2617;
                            _localctx.intimeAction = TokenStream.LT(1);
                            _la = TokenStream.LA(1);
                            if (!(_la == OFFLINE || _la == ONLINE))
                            {
                                _localctx.intimeAction = ErrorHandler.RecoverInline(this);
                            }
                            else
                            {
                                ErrorHandler.ReportMatch(this);
                                Consume();
                            }
                        }
                        break;
                }
                State = 2620; uid();
                State = 2621; Match(ON);
                State = 2622; tableName();
                State = 2635;
                ErrorHandler.Sync(this);
                _alt = Interpreter.AdaptivePredict(TokenStream, 337, Context);
                while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                {
                    if (_alt == 1)
                    {
                        {
                            State = 2633;
                            ErrorHandler.Sync(this);
                            switch (TokenStream.LA(1))
                            {
                                case ALGORITHM:
                                    {
                                        State = 2623; Match(ALGORITHM);
                                        State = 2625;
                                        ErrorHandler.Sync(this);
                                        _la = TokenStream.LA(1);
                                        if (_la == EQUAL_SYMBOL)
                                        {
                                            {
                                                State = 2624; Match(EQUAL_SYMBOL);
                                            }
                                        }

                                        State = 2627;
                                        _localctx.algType = TokenStream.LT(1);
                                        _la = TokenStream.LA(1);
                                        if (!(_la == DEFAULT || _la == COPY || _la == INPLACE))
                                        {
                                            _localctx.algType = ErrorHandler.RecoverInline(this);
                                        }
                                        else
                                        {
                                            ErrorHandler.ReportMatch(this);
                                            Consume();
                                        }
                                    }
                                    break;
                                case LOCK:
                                    {
                                        State = 2628; Match(LOCK);
                                        State = 2630;
                                        ErrorHandler.Sync(this);
                                        _la = TokenStream.LA(1);
                                        if (_la == EQUAL_SYMBOL)
                                        {
                                            {
                                                State = 2629; Match(EQUAL_SYMBOL);
                                            }
                                        }

                                        State = 2632;
                                        _localctx.lockType = TokenStream.LT(1);
                                        _la = TokenStream.LA(1);
                                        if (!(_la == DEFAULT || _la == EXCLUSIVE || _la == NONE || _la == SHARED))
                                        {
                                            _localctx.lockType = ErrorHandler.RecoverInline(this);
                                        }
                                        else
                                        {
                                            ErrorHandler.ReportMatch(this);
                                            Consume();
                                        }
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException(this);
                            }
                        }
                    }
                    State = 2637;
                    ErrorHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(TokenStream, 337, Context);
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class DropLogfileGroupContext : ParserRuleContext
    {
        public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
        public ITerminalNode LOGFILE() { return GetToken(MySqlParser.LOGFILE, 0); }
        public ITerminalNode GROUP() { return GetToken(MySqlParser.GROUP, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public EngineNameContext engineName()
        {
            return GetRuleContext<EngineNameContext>(0);
        }
        public DropLogfileGroupContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_dropLogfileGroup; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterDropLogfileGroup(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitDropLogfileGroup(this);
        }
    }

    [RuleVersion(0)]
    public DropLogfileGroupContext dropLogfileGroup()
    {
        DropLogfileGroupContext _localctx = new DropLogfileGroupContext(Context, State);
        EnterRule(_localctx, 140, RULE_dropLogfileGroup);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 2638; Match(DROP);
                State = 2639; Match(LOGFILE);
                State = 2640; Match(GROUP);
                State = 2641; uid();
                State = 2642; Match(ENGINE);
                State = 2643; Match(EQUAL_SYMBOL);
                State = 2644; engineName();
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class DropProcedureContext : ParserRuleContext
    {
        public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
        public ITerminalNode PROCEDURE() { return GetToken(MySqlParser.PROCEDURE, 0); }
        public FullIdContext fullId()
        {
            return GetRuleContext<FullIdContext>(0);
        }
        public IfExistsContext ifExists()
        {
            return GetRuleContext<IfExistsContext>(0);
        }
        public DropProcedureContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_dropProcedure; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterDropProcedure(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitDropProcedure(this);
        }
    }

    [RuleVersion(0)]
    public DropProcedureContext dropProcedure()
    {
        DropProcedureContext _localctx = new DropProcedureContext(Context, State);
        EnterRule(_localctx, 142, RULE_dropProcedure);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 2646; Match(DROP);
                State = 2647; Match(PROCEDURE);
                State = 2649;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == IF)
                {
                    {
                        State = 2648; ifExists();
                    }
                }

                State = 2651; fullId();
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class DropFunctionContext : ParserRuleContext
    {
        public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
        public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
        public FullIdContext fullId()
        {
            return GetRuleContext<FullIdContext>(0);
        }
        public IfExistsContext ifExists()
        {
            return GetRuleContext<IfExistsContext>(0);
        }
        public DropFunctionContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_dropFunction; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterDropFunction(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitDropFunction(this);
        }
    }

    [RuleVersion(0)]
    public DropFunctionContext dropFunction()
    {
        DropFunctionContext _localctx = new DropFunctionContext(Context, State);
        EnterRule(_localctx, 144, RULE_dropFunction);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 2653; Match(DROP);
                State = 2654; Match(FUNCTION);
                State = 2656;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == IF)
                {
                    {
                        State = 2655; ifExists();
                    }
                }

                State = 2658; fullId();
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class DropServerContext : ParserRuleContext
    {
        public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
        public ITerminalNode SERVER() { return GetToken(MySqlParser.SERVER, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public IfExistsContext ifExists()
        {
            return GetRuleContext<IfExistsContext>(0);
        }
        public DropServerContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_dropServer; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterDropServer(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitDropServer(this);
        }
    }

    [RuleVersion(0)]
    public DropServerContext dropServer()
    {
        DropServerContext _localctx = new DropServerContext(Context, State);
        EnterRule(_localctx, 146, RULE_dropServer);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 2660; Match(DROP);
                State = 2661; Match(SERVER);
                State = 2663;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == IF)
                {
                    {
                        State = 2662; ifExists();
                    }
                }

                State = 2665; uid();
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class DropTableContext : ParserRuleContext
    {
        public IToken dropType;
        public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
        public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
        public TablesContext tables()
        {
            return GetRuleContext<TablesContext>(0);
        }
        public ITerminalNode TEMPORARY() { return GetToken(MySqlParser.TEMPORARY, 0); }
        public IfExistsContext ifExists()
        {
            return GetRuleContext<IfExistsContext>(0);
        }
        public ITerminalNode RESTRICT() { return GetToken(MySqlParser.RESTRICT, 0); }
        public ITerminalNode CASCADE() { return GetToken(MySqlParser.CASCADE, 0); }
        public DropTableContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_dropTable; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterDropTable(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitDropTable(this);
        }
    }

    [RuleVersion(0)]
    public DropTableContext dropTable()
    {
        DropTableContext _localctx = new DropTableContext(Context, State);
        EnterRule(_localctx, 148, RULE_dropTable);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 2667; Match(DROP);
                State = 2669;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == TEMPORARY)
                {
                    {
                        State = 2668; Match(TEMPORARY);
                    }
                }

                State = 2671; Match(TABLE);
                State = 2673;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == IF)
                {
                    {
                        State = 2672; ifExists();
                    }
                }

                State = 2675; tables();
                State = 2677;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == CASCADE || _la == RESTRICT)
                {
                    {
                        State = 2676;
                        _localctx.dropType = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == CASCADE || _la == RESTRICT))
                        {
                            _localctx.dropType = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                }

            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class DropTablespaceContext : ParserRuleContext
    {
        public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
        public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
        public EngineNameContext engineName()
        {
            return GetRuleContext<EngineNameContext>(0);
        }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public DropTablespaceContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_dropTablespace; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterDropTablespace(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitDropTablespace(this);
        }
    }

    [RuleVersion(0)]
    public DropTablespaceContext dropTablespace()
    {
        DropTablespaceContext _localctx = new DropTablespaceContext(Context, State);
        EnterRule(_localctx, 150, RULE_dropTablespace);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 2679; Match(DROP);
                State = 2680; Match(TABLESPACE);
                State = 2681; uid();
                State = 2687;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == ENGINE)
                {
                    {
                        State = 2682; Match(ENGINE);
                        State = 2684;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == EQUAL_SYMBOL)
                        {
                            {
                                State = 2683; Match(EQUAL_SYMBOL);
                            }
                        }

                        State = 2686; engineName();
                    }
                }

            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class DropTriggerContext : ParserRuleContext
    {
        public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
        public ITerminalNode TRIGGER() { return GetToken(MySqlParser.TRIGGER, 0); }
        public FullIdContext fullId()
        {
            return GetRuleContext<FullIdContext>(0);
        }
        public IfExistsContext ifExists()
        {
            return GetRuleContext<IfExistsContext>(0);
        }
        public DropTriggerContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_dropTrigger; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterDropTrigger(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitDropTrigger(this);
        }
    }

    [RuleVersion(0)]
    public DropTriggerContext dropTrigger()
    {
        DropTriggerContext _localctx = new DropTriggerContext(Context, State);
        EnterRule(_localctx, 152, RULE_dropTrigger);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 2689; Match(DROP);
                State = 2690; Match(TRIGGER);
                State = 2692;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == IF)
                {
                    {
                        State = 2691; ifExists();
                    }
                }

                State = 2694; fullId();
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class DropViewContext : ParserRuleContext
    {
        public IToken dropType;
        public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
        public ITerminalNode VIEW() { return GetToken(MySqlParser.VIEW, 0); }
        public FullIdContext[] fullId()
        {
            return GetRuleContexts<FullIdContext>();
        }
        public FullIdContext fullId(int i)
        {
            return GetRuleContext<FullIdContext>(i);
        }
        public IfExistsContext ifExists()
        {
            return GetRuleContext<IfExistsContext>(0);
        }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public ITerminalNode RESTRICT() { return GetToken(MySqlParser.RESTRICT, 0); }
        public ITerminalNode CASCADE() { return GetToken(MySqlParser.CASCADE, 0); }
        public DropViewContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_dropView; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterDropView(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitDropView(this);
        }
    }

    [RuleVersion(0)]
    public DropViewContext dropView()
    {
        DropViewContext _localctx = new DropViewContext(Context, State);
        EnterRule(_localctx, 154, RULE_dropView);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 2696; Match(DROP);
                State = 2697; Match(VIEW);
                State = 2699;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == IF)
                {
                    {
                        State = 2698; ifExists();
                    }
                }

                State = 2701; fullId();
                State = 2706;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while (_la == COMMA)
                {
                    {
                        {
                            State = 2702; Match(COMMA);
                            State = 2703; fullId();
                        }
                    }
                    State = 2708;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
                State = 2710;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == CASCADE || _la == RESTRICT)
                {
                    {
                        State = 2709;
                        _localctx.dropType = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == CASCADE || _la == RESTRICT))
                        {
                            _localctx.dropType = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                }

            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class RenameTableContext : ParserRuleContext
    {
        public ITerminalNode RENAME() { return GetToken(MySqlParser.RENAME, 0); }
        public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
        public RenameTableClauseContext[] renameTableClause()
        {
            return GetRuleContexts<RenameTableClauseContext>();
        }
        public RenameTableClauseContext renameTableClause(int i)
        {
            return GetRuleContext<RenameTableClauseContext>(i);
        }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public RenameTableContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_renameTable; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterRenameTable(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitRenameTable(this);
        }
    }

    [RuleVersion(0)]
    public RenameTableContext renameTable()
    {
        RenameTableContext _localctx = new RenameTableContext(Context, State);
        EnterRule(_localctx, 156, RULE_renameTable);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 2712; Match(RENAME);
                State = 2713; Match(TABLE);
                State = 2714; renameTableClause();
                State = 2719;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while (_la == COMMA)
                {
                    {
                        {
                            State = 2715; Match(COMMA);
                            State = 2716; renameTableClause();
                        }
                    }
                    State = 2721;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class RenameTableClauseContext : ParserRuleContext
    {
        public TableNameContext[] tableName()
        {
            return GetRuleContexts<TableNameContext>();
        }
        public TableNameContext tableName(int i)
        {
            return GetRuleContext<TableNameContext>(i);
        }
        public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
        public RenameTableClauseContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_renameTableClause; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterRenameTableClause(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitRenameTableClause(this);
        }
    }

    [RuleVersion(0)]
    public RenameTableClauseContext renameTableClause()
    {
        RenameTableClauseContext _localctx = new RenameTableClauseContext(Context, State);
        EnterRule(_localctx, 158, RULE_renameTableClause);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 2722; tableName();
                State = 2723; Match(TO);
                State = 2724; tableName();
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class TruncateTableContext : ParserRuleContext
    {
        public ITerminalNode TRUNCATE() { return GetToken(MySqlParser.TRUNCATE, 0); }
        public TableNameContext tableName()
        {
            return GetRuleContext<TableNameContext>(0);
        }
        public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
        public TruncateTableContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_truncateTable; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterTruncateTable(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitTruncateTable(this);
        }
    }

    [RuleVersion(0)]
    public TruncateTableContext truncateTable()
    {
        TruncateTableContext _localctx = new TruncateTableContext(Context, State);
        EnterRule(_localctx, 160, RULE_truncateTable);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 2726; Match(TRUNCATE);
                State = 2728;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == TABLE)
                {
                    {
                        State = 2727; Match(TABLE);
                    }
                }

                State = 2730; tableName();
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class CallStatementContext : ParserRuleContext
    {
        public ITerminalNode CALL() { return GetToken(MySqlParser.CALL, 0); }
        public FullIdContext fullId()
        {
            return GetRuleContext<FullIdContext>(0);
        }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public ConstantsContext constants()
        {
            return GetRuleContext<ConstantsContext>(0);
        }
        public ExpressionsContext expressions()
        {
            return GetRuleContext<ExpressionsContext>(0);
        }
        public CallStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_callStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterCallStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitCallStatement(this);
        }
    }

    [RuleVersion(0)]
    public CallStatementContext callStatement()
    {
        CallStatementContext _localctx = new CallStatementContext(Context, State);
        EnterRule(_localctx, 162, RULE_callStatement);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 2732; Match(CALL);
                State = 2733; fullId();
                State = 2740;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 353, Context))
                {
                    case 1:
                        {
                            State = 2734; Match(LR_BRACKET);
                            State = 2737;
                            ErrorHandler.Sync(this);
                            switch (Interpreter.AdaptivePredict(TokenStream, 352, Context))
                            {
                                case 1:
                                    {
                                        State = 2735; constants();
                                    }
                                    break;
                                case 2:
                                    {
                                        State = 2736; expressions();
                                    }
                                    break;
                            }
                            State = 2739; Match(RR_BRACKET);
                        }
                        break;
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class DeleteStatementContext : ParserRuleContext
    {
        public SingleDeleteStatementContext singleDeleteStatement()
        {
            return GetRuleContext<SingleDeleteStatementContext>(0);
        }
        public MultipleDeleteStatementContext multipleDeleteStatement()
        {
            return GetRuleContext<MultipleDeleteStatementContext>(0);
        }
        public DeleteStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_deleteStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterDeleteStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitDeleteStatement(this);
        }
    }

    [RuleVersion(0)]
    public DeleteStatementContext deleteStatement()
    {
        DeleteStatementContext _localctx = new DeleteStatementContext(Context, State);
        EnterRule(_localctx, 164, RULE_deleteStatement);
        try
        {
            State = 2744;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 354, Context))
            {
                case 1:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 2742; singleDeleteStatement();
                    }
                    break;
                case 2:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 2743; multipleDeleteStatement();
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class DoStatementContext : ParserRuleContext
    {
        public ITerminalNode DO() { return GetToken(MySqlParser.DO, 0); }
        public ExpressionsContext expressions()
        {
            return GetRuleContext<ExpressionsContext>(0);
        }
        public DoStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_doStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterDoStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitDoStatement(this);
        }
    }

    [RuleVersion(0)]
    public DoStatementContext doStatement()
    {
        DoStatementContext _localctx = new DoStatementContext(Context, State);
        EnterRule(_localctx, 166, RULE_doStatement);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 2746; Match(DO);
                State = 2747; expressions();
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class HandlerStatementContext : ParserRuleContext
    {
        public HandlerOpenStatementContext handlerOpenStatement()
        {
            return GetRuleContext<HandlerOpenStatementContext>(0);
        }
        public HandlerReadIndexStatementContext handlerReadIndexStatement()
        {
            return GetRuleContext<HandlerReadIndexStatementContext>(0);
        }
        public HandlerReadStatementContext handlerReadStatement()
        {
            return GetRuleContext<HandlerReadStatementContext>(0);
        }
        public HandlerCloseStatementContext handlerCloseStatement()
        {
            return GetRuleContext<HandlerCloseStatementContext>(0);
        }
        public HandlerStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_handlerStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterHandlerStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitHandlerStatement(this);
        }
    }

    [RuleVersion(0)]
    public HandlerStatementContext handlerStatement()
    {
        HandlerStatementContext _localctx = new HandlerStatementContext(Context, State);
        EnterRule(_localctx, 168, RULE_handlerStatement);
        try
        {
            State = 2753;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 355, Context))
            {
                case 1:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 2749; handlerOpenStatement();
                    }
                    break;
                case 2:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 2750; handlerReadIndexStatement();
                    }
                    break;
                case 3:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 2751; handlerReadStatement();
                    }
                    break;
                case 4:
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 2752; handlerCloseStatement();
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class InsertStatementContext : ParserRuleContext
    {
        public IToken priority;
        public UidListContext partitions;
        public UidListContext columns;
        public UpdatedElementContext setFirst;
        public UpdatedElementContext _updatedElement;
        public IList<UpdatedElementContext> _setElements = new List<UpdatedElementContext>();
        public UpdatedElementContext duplicatedFirst;
        public IList<UpdatedElementContext> _duplicatedElements = new List<UpdatedElementContext>();
        public ITerminalNode INSERT() { return GetToken(MySqlParser.INSERT, 0); }
        public TableNameContext tableName()
        {
            return GetRuleContext<TableNameContext>(0);
        }
        public InsertStatementValueContext insertStatementValue()
        {
            return GetRuleContext<InsertStatementValueContext>(0);
        }
        public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
        public ITerminalNode IGNORE() { return GetToken(MySqlParser.IGNORE, 0); }
        public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
        public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
        public ITerminalNode[] LR_BRACKET() { return GetTokens(MySqlParser.LR_BRACKET); }
        public ITerminalNode LR_BRACKET(int i)
        {
            return GetToken(MySqlParser.LR_BRACKET, i);
        }
        public ITerminalNode[] RR_BRACKET() { return GetTokens(MySqlParser.RR_BRACKET); }
        public ITerminalNode RR_BRACKET(int i)
        {
            return GetToken(MySqlParser.RR_BRACKET, i);
        }
        public UpdatedElementContext[] updatedElement()
        {
            return GetRuleContexts<UpdatedElementContext>();
        }
        public UpdatedElementContext updatedElement(int i)
        {
            return GetRuleContext<UpdatedElementContext>(i);
        }
        public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
        public ITerminalNode DUPLICATE() { return GetToken(MySqlParser.DUPLICATE, 0); }
        public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
        public ITerminalNode UPDATE() { return GetToken(MySqlParser.UPDATE, 0); }
        public UidListContext[] uidList()
        {
            return GetRuleContexts<UidListContext>();
        }
        public UidListContext uidList(int i)
        {
            return GetRuleContext<UidListContext>(i);
        }
        public ITerminalNode LOW_PRIORITY() { return GetToken(MySqlParser.LOW_PRIORITY, 0); }
        public ITerminalNode DELAYED() { return GetToken(MySqlParser.DELAYED, 0); }
        public ITerminalNode HIGH_PRIORITY() { return GetToken(MySqlParser.HIGH_PRIORITY, 0); }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public InsertStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_insertStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterInsertStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitInsertStatement(this);
        }
    }

    [RuleVersion(0)]
    public InsertStatementContext insertStatement()
    {
        InsertStatementContext _localctx = new InsertStatementContext(Context, State);
        EnterRule(_localctx, 170, RULE_insertStatement);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 2755; Match(INSERT);
                State = 2757;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (((((_la - 39)) & ~0x3f) == 0 && ((1L << (_la - 39)) & ((1L << (DELAYED - 39)) | (1L << (HIGH_PRIORITY - 39)) | (1L << (LOW_PRIORITY - 39)))) != 0))
                {
                    {
                        State = 2756;
                        _localctx.priority = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(((((_la - 39)) & ~0x3f) == 0 && ((1L << (_la - 39)) & ((1L << (DELAYED - 39)) | (1L << (HIGH_PRIORITY - 39)) | (1L << (LOW_PRIORITY - 39)))) != 0)))
                        {
                            _localctx.priority = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                }

                State = 2760;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == IGNORE)
                {
                    {
                        State = 2759; Match(IGNORE);
                    }
                }

                State = 2763;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == INTO)
                {
                    {
                        State = 2762; Match(INTO);
                    }
                }

                State = 2765; tableName();
                State = 2771;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == PARTITION)
                {
                    {
                        State = 2766; Match(PARTITION);
                        State = 2767; Match(LR_BRACKET);
                        State = 2768; _localctx.partitions = uidList();
                        State = 2769; Match(RR_BRACKET);
                    }
                }

                State = 2789;
                ErrorHandler.Sync(this);
                switch (TokenStream.LA(1))
                {
                    case SELECT:
                    case VALUES:
                    case VALUE:
                    case LR_BRACKET:
                        {
                            State = 2777;
                            ErrorHandler.Sync(this);
                            switch (Interpreter.AdaptivePredict(TokenStream, 360, Context))
                            {
                                case 1:
                                    {
                                        State = 2773; Match(LR_BRACKET);
                                        State = 2774; _localctx.columns = uidList();
                                        State = 2775; Match(RR_BRACKET);
                                    }
                                    break;
                            }
                            State = 2779; insertStatementValue();
                        }
                        break;
                    case SET:
                        {
                            State = 2780; Match(SET);
                            State = 2781; _localctx.setFirst = updatedElement();
                            State = 2786;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            while (_la == COMMA)
                            {
                                {
                                    {
                                        State = 2782; Match(COMMA);
                                        State = 2783; _localctx._updatedElement = updatedElement();
                                        _localctx._setElements.Add(_localctx._updatedElement);
                                    }
                                }
                                State = 2788;
                                ErrorHandler.Sync(this);
                                _la = TokenStream.LA(1);
                            }
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
                State = 2803;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == ON)
                {
                    {
                        State = 2791; Match(ON);
                        State = 2792; Match(DUPLICATE);
                        State = 2793; Match(KEY);
                        State = 2794; Match(UPDATE);
                        State = 2795; _localctx.duplicatedFirst = updatedElement();
                        State = 2800;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        while (_la == COMMA)
                        {
                            {
                                {
                                    State = 2796; Match(COMMA);
                                    State = 2797; _localctx._updatedElement = updatedElement();
                                    _localctx._duplicatedElements.Add(_localctx._updatedElement);
                                }
                            }
                            State = 2802;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                        }
                    }
                }

            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class LoadDataStatementContext : ParserRuleContext
    {
        public IToken priority;
        public IToken filename;
        public IToken violation;
        public CharsetNameContext charset;
        public IToken fieldsFormat;
        public IToken linesFormat;
        public ITerminalNode LOAD() { return GetToken(MySqlParser.LOAD, 0); }
        public ITerminalNode DATA() { return GetToken(MySqlParser.DATA, 0); }
        public ITerminalNode INFILE() { return GetToken(MySqlParser.INFILE, 0); }
        public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
        public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
        public TableNameContext tableName()
        {
            return GetRuleContext<TableNameContext>(0);
        }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
        public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
        public ITerminalNode[] LR_BRACKET() { return GetTokens(MySqlParser.LR_BRACKET); }
        public ITerminalNode LR_BRACKET(int i)
        {
            return GetToken(MySqlParser.LR_BRACKET, i);
        }
        public UidListContext uidList()
        {
            return GetRuleContext<UidListContext>(0);
        }
        public ITerminalNode[] RR_BRACKET() { return GetTokens(MySqlParser.RR_BRACKET); }
        public ITerminalNode RR_BRACKET(int i)
        {
            return GetToken(MySqlParser.RR_BRACKET, i);
        }
        public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
        public ITerminalNode[] SET() { return GetTokens(MySqlParser.SET); }
        public ITerminalNode SET(int i)
        {
            return GetToken(MySqlParser.SET, i);
        }
        public ITerminalNode[] LINES() { return GetTokens(MySqlParser.LINES); }
        public ITerminalNode LINES(int i)
        {
            return GetToken(MySqlParser.LINES, i);
        }
        public ITerminalNode[] IGNORE() { return GetTokens(MySqlParser.IGNORE); }
        public ITerminalNode IGNORE(int i)
        {
            return GetToken(MySqlParser.IGNORE, i);
        }
        public DecimalLiteralContext decimalLiteral()
        {
            return GetRuleContext<DecimalLiteralContext>(0);
        }
        public AssignmentFieldContext[] assignmentField()
        {
            return GetRuleContexts<AssignmentFieldContext>();
        }
        public AssignmentFieldContext assignmentField(int i)
        {
            return GetRuleContext<AssignmentFieldContext>(i);
        }
        public UpdatedElementContext[] updatedElement()
        {
            return GetRuleContexts<UpdatedElementContext>();
        }
        public UpdatedElementContext updatedElement(int i)
        {
            return GetRuleContext<UpdatedElementContext>(i);
        }
        public CharsetNameContext charsetName()
        {
            return GetRuleContext<CharsetNameContext>(0);
        }
        public ITerminalNode LOW_PRIORITY() { return GetToken(MySqlParser.LOW_PRIORITY, 0); }
        public ITerminalNode CONCURRENT() { return GetToken(MySqlParser.CONCURRENT, 0); }
        public ITerminalNode REPLACE() { return GetToken(MySqlParser.REPLACE, 0); }
        public ITerminalNode FIELDS() { return GetToken(MySqlParser.FIELDS, 0); }
        public ITerminalNode COLUMNS() { return GetToken(MySqlParser.COLUMNS, 0); }
        public ITerminalNode ROWS() { return GetToken(MySqlParser.ROWS, 0); }
        public SelectFieldsIntoContext[] selectFieldsInto()
        {
            return GetRuleContexts<SelectFieldsIntoContext>();
        }
        public SelectFieldsIntoContext selectFieldsInto(int i)
        {
            return GetRuleContext<SelectFieldsIntoContext>(i);
        }
        public SelectLinesIntoContext[] selectLinesInto()
        {
            return GetRuleContexts<SelectLinesIntoContext>();
        }
        public SelectLinesIntoContext selectLinesInto(int i)
        {
            return GetRuleContext<SelectLinesIntoContext>(i);
        }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public LoadDataStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_loadDataStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterLoadDataStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitLoadDataStatement(this);
        }
    }

    [RuleVersion(0)]
    public LoadDataStatementContext loadDataStatement()
    {
        LoadDataStatementContext _localctx = new LoadDataStatementContext(Context, State);
        EnterRule(_localctx, 172, RULE_loadDataStatement);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 2805; Match(LOAD);
                State = 2806; Match(DATA);
                State = 2808;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == LOW_PRIORITY || _la == CONCURRENT)
                {
                    {
                        State = 2807;
                        _localctx.priority = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == LOW_PRIORITY || _la == CONCURRENT))
                        {
                            _localctx.priority = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                }

                State = 2811;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == LOCAL)
                {
                    {
                        State = 2810; Match(LOCAL);
                    }
                }

                State = 2813; Match(INFILE);
                State = 2814; _localctx.filename = Match(STRING_LITERAL);
                State = 2816;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == IGNORE || _la == REPLACE)
                {
                    {
                        State = 2815;
                        _localctx.violation = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == IGNORE || _la == REPLACE))
                        {
                            _localctx.violation = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                }

                State = 2818; Match(INTO);
                State = 2819; Match(TABLE);
                State = 2820; tableName();
                State = 2826;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == PARTITION)
                {
                    {
                        State = 2821; Match(PARTITION);
                        State = 2822; Match(LR_BRACKET);
                        State = 2823; uidList();
                        State = 2824; Match(RR_BRACKET);
                    }
                }

                State = 2831;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == CHARACTER)
                {
                    {
                        State = 2828; Match(CHARACTER);
                        State = 2829; Match(SET);
                        State = 2830; _localctx.charset = charsetName();
                    }
                }

                State = 2839;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == COLUMNS || _la == FIELDS)
                {
                    {
                        State = 2833;
                        _localctx.fieldsFormat = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == COLUMNS || _la == FIELDS))
                        {
                            _localctx.fieldsFormat = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                        State = 2835;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        do
                        {
                            {
                                {
                                    State = 2834; selectFieldsInto();
                                }
                            }
                            State = 2837;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                        } while (_la == ENCLOSED || _la == ESCAPED || _la == OPTIONALLY || _la == TERMINATED);
                    }
                }

                State = 2847;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == LINES)
                {
                    {
                        State = 2841; Match(LINES);
                        State = 2843;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        do
                        {
                            {
                                {
                                    State = 2842; selectLinesInto();
                                }
                            }
                            State = 2845;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                        } while (_la == STARTING || _la == TERMINATED);
                    }
                }

                State = 2853;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == IGNORE)
                {
                    {
                        State = 2849; Match(IGNORE);
                        State = 2850; decimalLiteral();
                        State = 2851;
                        _localctx.linesFormat = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == LINES || _la == ROWS))
                        {
                            _localctx.linesFormat = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                }

                State = 2866;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 376, Context))
                {
                    case 1:
                        {
                            State = 2855; Match(LR_BRACKET);
                            State = 2856; assignmentField();
                            State = 2861;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            while (_la == COMMA)
                            {
                                {
                                    {
                                        State = 2857; Match(COMMA);
                                        State = 2858; assignmentField();
                                    }
                                }
                                State = 2863;
                                ErrorHandler.Sync(this);
                                _la = TokenStream.LA(1);
                            }
                            State = 2864; Match(RR_BRACKET);
                        }
                        break;
                }
                State = 2877;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 378, Context))
                {
                    case 1:
                        {
                            State = 2868; Match(SET);
                            State = 2869; updatedElement();
                            State = 2874;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            while (_la == COMMA)
                            {
                                {
                                    {
                                        State = 2870; Match(COMMA);
                                        State = 2871; updatedElement();
                                    }
                                }
                                State = 2876;
                                ErrorHandler.Sync(this);
                                _la = TokenStream.LA(1);
                            }
                        }
                        break;
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class LoadXmlStatementContext : ParserRuleContext
    {
        public IToken priority;
        public IToken filename;
        public IToken violation;
        public CharsetNameContext charset;
        public IToken tag;
        public IToken linesFormat;
        public ITerminalNode LOAD() { return GetToken(MySqlParser.LOAD, 0); }
        public ITerminalNode XML() { return GetToken(MySqlParser.XML, 0); }
        public ITerminalNode INFILE() { return GetToken(MySqlParser.INFILE, 0); }
        public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
        public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
        public TableNameContext tableName()
        {
            return GetRuleContext<TableNameContext>(0);
        }
        public ITerminalNode[] STRING_LITERAL() { return GetTokens(MySqlParser.STRING_LITERAL); }
        public ITerminalNode STRING_LITERAL(int i)
        {
            return GetToken(MySqlParser.STRING_LITERAL, i);
        }
        public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
        public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
        public ITerminalNode[] SET() { return GetTokens(MySqlParser.SET); }
        public ITerminalNode SET(int i)
        {
            return GetToken(MySqlParser.SET, i);
        }
        public ITerminalNode[] ROWS() { return GetTokens(MySqlParser.ROWS); }
        public ITerminalNode ROWS(int i)
        {
            return GetToken(MySqlParser.ROWS, i);
        }
        public ITerminalNode IDENTIFIED() { return GetToken(MySqlParser.IDENTIFIED, 0); }
        public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
        public ITerminalNode LESS_SYMBOL() { return GetToken(MySqlParser.LESS_SYMBOL, 0); }
        public ITerminalNode GREATER_SYMBOL() { return GetToken(MySqlParser.GREATER_SYMBOL, 0); }
        public ITerminalNode[] IGNORE() { return GetTokens(MySqlParser.IGNORE); }
        public ITerminalNode IGNORE(int i)
        {
            return GetToken(MySqlParser.IGNORE, i);
        }
        public DecimalLiteralContext decimalLiteral()
        {
            return GetRuleContext<DecimalLiteralContext>(0);
        }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public AssignmentFieldContext[] assignmentField()
        {
            return GetRuleContexts<AssignmentFieldContext>();
        }
        public AssignmentFieldContext assignmentField(int i)
        {
            return GetRuleContext<AssignmentFieldContext>(i);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public UpdatedElementContext[] updatedElement()
        {
            return GetRuleContexts<UpdatedElementContext>();
        }
        public UpdatedElementContext updatedElement(int i)
        {
            return GetRuleContext<UpdatedElementContext>(i);
        }
        public CharsetNameContext charsetName()
        {
            return GetRuleContext<CharsetNameContext>(0);
        }
        public ITerminalNode LOW_PRIORITY() { return GetToken(MySqlParser.LOW_PRIORITY, 0); }
        public ITerminalNode CONCURRENT() { return GetToken(MySqlParser.CONCURRENT, 0); }
        public ITerminalNode REPLACE() { return GetToken(MySqlParser.REPLACE, 0); }
        public ITerminalNode LINES() { return GetToken(MySqlParser.LINES, 0); }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public LoadXmlStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_loadXmlStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterLoadXmlStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitLoadXmlStatement(this);
        }
    }

    [RuleVersion(0)]
    public LoadXmlStatementContext loadXmlStatement()
    {
        LoadXmlStatementContext _localctx = new LoadXmlStatementContext(Context, State);
        EnterRule(_localctx, 174, RULE_loadXmlStatement);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 2879; Match(LOAD);
                State = 2880; Match(XML);
                State = 2882;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == LOW_PRIORITY || _la == CONCURRENT)
                {
                    {
                        State = 2881;
                        _localctx.priority = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == LOW_PRIORITY || _la == CONCURRENT))
                        {
                            _localctx.priority = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                }

                State = 2885;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == LOCAL)
                {
                    {
                        State = 2884; Match(LOCAL);
                    }
                }

                State = 2887; Match(INFILE);
                State = 2888; _localctx.filename = Match(STRING_LITERAL);
                State = 2890;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == IGNORE || _la == REPLACE)
                {
                    {
                        State = 2889;
                        _localctx.violation = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == IGNORE || _la == REPLACE))
                        {
                            _localctx.violation = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                }

                State = 2892; Match(INTO);
                State = 2893; Match(TABLE);
                State = 2894; tableName();
                State = 2898;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == CHARACTER)
                {
                    {
                        State = 2895; Match(CHARACTER);
                        State = 2896; Match(SET);
                        State = 2897; _localctx.charset = charsetName();
                    }
                }

                State = 2906;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == ROWS)
                {
                    {
                        State = 2900; Match(ROWS);
                        State = 2901; Match(IDENTIFIED);
                        State = 2902; Match(BY);
                        State = 2903; Match(LESS_SYMBOL);
                        State = 2904; _localctx.tag = Match(STRING_LITERAL);
                        State = 2905; Match(GREATER_SYMBOL);
                    }
                }

                State = 2912;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == IGNORE)
                {
                    {
                        State = 2908; Match(IGNORE);
                        State = 2909; decimalLiteral();
                        State = 2910;
                        _localctx.linesFormat = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == LINES || _la == ROWS))
                        {
                            _localctx.linesFormat = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                }

                State = 2925;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 386, Context))
                {
                    case 1:
                        {
                            State = 2914; Match(LR_BRACKET);
                            State = 2915; assignmentField();
                            State = 2920;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            while (_la == COMMA)
                            {
                                {
                                    {
                                        State = 2916; Match(COMMA);
                                        State = 2917; assignmentField();
                                    }
                                }
                                State = 2922;
                                ErrorHandler.Sync(this);
                                _la = TokenStream.LA(1);
                            }
                            State = 2923; Match(RR_BRACKET);
                        }
                        break;
                }
                State = 2936;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 388, Context))
                {
                    case 1:
                        {
                            State = 2927; Match(SET);
                            State = 2928; updatedElement();
                            State = 2933;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            while (_la == COMMA)
                            {
                                {
                                    {
                                        State = 2929; Match(COMMA);
                                        State = 2930; updatedElement();
                                    }
                                }
                                State = 2935;
                                ErrorHandler.Sync(this);
                                _la = TokenStream.LA(1);
                            }
                        }
                        break;
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ReplaceStatementContext : ParserRuleContext
    {
        public IToken priority;
        public UidListContext partitions;
        public UidListContext columns;
        public UpdatedElementContext setFirst;
        public UpdatedElementContext _updatedElement;
        public IList<UpdatedElementContext> _setElements = new List<UpdatedElementContext>();
        public ITerminalNode REPLACE() { return GetToken(MySqlParser.REPLACE, 0); }
        public TableNameContext tableName()
        {
            return GetRuleContext<TableNameContext>(0);
        }
        public InsertStatementValueContext insertStatementValue()
        {
            return GetRuleContext<InsertStatementValueContext>(0);
        }
        public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
        public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
        public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
        public ITerminalNode[] LR_BRACKET() { return GetTokens(MySqlParser.LR_BRACKET); }
        public ITerminalNode LR_BRACKET(int i)
        {
            return GetToken(MySqlParser.LR_BRACKET, i);
        }
        public ITerminalNode[] RR_BRACKET() { return GetTokens(MySqlParser.RR_BRACKET); }
        public ITerminalNode RR_BRACKET(int i)
        {
            return GetToken(MySqlParser.RR_BRACKET, i);
        }
        public UpdatedElementContext[] updatedElement()
        {
            return GetRuleContexts<UpdatedElementContext>();
        }
        public UpdatedElementContext updatedElement(int i)
        {
            return GetRuleContext<UpdatedElementContext>(i);
        }
        public UidListContext[] uidList()
        {
            return GetRuleContexts<UidListContext>();
        }
        public UidListContext uidList(int i)
        {
            return GetRuleContext<UidListContext>(i);
        }
        public ITerminalNode LOW_PRIORITY() { return GetToken(MySqlParser.LOW_PRIORITY, 0); }
        public ITerminalNode DELAYED() { return GetToken(MySqlParser.DELAYED, 0); }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public ReplaceStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_replaceStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterReplaceStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitReplaceStatement(this);
        }
    }

    [RuleVersion(0)]
    public ReplaceStatementContext replaceStatement()
    {
        ReplaceStatementContext _localctx = new ReplaceStatementContext(Context, State);
        EnterRule(_localctx, 176, RULE_replaceStatement);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 2938; Match(REPLACE);
                State = 2940;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == DELAYED || _la == LOW_PRIORITY)
                {
                    {
                        State = 2939;
                        _localctx.priority = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == DELAYED || _la == LOW_PRIORITY))
                        {
                            _localctx.priority = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                }

                State = 2943;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == INTO)
                {
                    {
                        State = 2942; Match(INTO);
                    }
                }

                State = 2945; tableName();
                State = 2951;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == PARTITION)
                {
                    {
                        State = 2946; Match(PARTITION);
                        State = 2947; Match(LR_BRACKET);
                        State = 2948; _localctx.partitions = uidList();
                        State = 2949; Match(RR_BRACKET);
                    }
                }

                State = 2969;
                ErrorHandler.Sync(this);
                switch (TokenStream.LA(1))
                {
                    case SELECT:
                    case VALUES:
                    case VALUE:
                    case LR_BRACKET:
                        {
                            State = 2957;
                            ErrorHandler.Sync(this);
                            switch (Interpreter.AdaptivePredict(TokenStream, 392, Context))
                            {
                                case 1:
                                    {
                                        State = 2953; Match(LR_BRACKET);
                                        State = 2954; _localctx.columns = uidList();
                                        State = 2955; Match(RR_BRACKET);
                                    }
                                    break;
                            }
                            State = 2959; insertStatementValue();
                        }
                        break;
                    case SET:
                        {
                            State = 2960; Match(SET);
                            State = 2961; _localctx.setFirst = updatedElement();
                            State = 2966;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            while (_la == COMMA)
                            {
                                {
                                    {
                                        State = 2962; Match(COMMA);
                                        State = 2963; _localctx._updatedElement = updatedElement();
                                        _localctx._setElements.Add(_localctx._updatedElement);
                                    }
                                }
                                State = 2968;
                                ErrorHandler.Sync(this);
                                _la = TokenStream.LA(1);
                            }
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class SelectStatementContext : ParserRuleContext
    {
        public SelectStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_selectStatement; } }

        public SelectStatementContext() { }
        public virtual void CopyFrom(SelectStatementContext context)
        {
            base.CopyFrom(context);
        }
    }
    public partial class UnionSelectContext : SelectStatementContext
    {
        public IToken unionType;
        public QuerySpecificationNointoContext querySpecificationNointo()
        {
            return GetRuleContext<QuerySpecificationNointoContext>(0);
        }
        public UnionStatementContext[] unionStatement()
        {
            return GetRuleContexts<UnionStatementContext>();
        }
        public UnionStatementContext unionStatement(int i)
        {
            return GetRuleContext<UnionStatementContext>(i);
        }
        public ITerminalNode UNION() { return GetToken(MySqlParser.UNION, 0); }
        public OrderByClauseContext orderByClause()
        {
            return GetRuleContext<OrderByClauseContext>(0);
        }
        public LimitClauseContext limitClause()
        {
            return GetRuleContext<LimitClauseContext>(0);
        }
        public LockClauseContext lockClause()
        {
            return GetRuleContext<LockClauseContext>(0);
        }
        public QuerySpecificationContext querySpecification()
        {
            return GetRuleContext<QuerySpecificationContext>(0);
        }
        public QueryExpressionContext queryExpression()
        {
            return GetRuleContext<QueryExpressionContext>(0);
        }
        public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
        public ITerminalNode DISTINCT() { return GetToken(MySqlParser.DISTINCT, 0); }
        public UnionSelectContext(SelectStatementContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterUnionSelect(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitUnionSelect(this);
        }
    }
    public partial class UnionParenthesisSelectContext : SelectStatementContext
    {
        public IToken unionType;
        public QueryExpressionNointoContext queryExpressionNointo()
        {
            return GetRuleContext<QueryExpressionNointoContext>(0);
        }
        public UnionParenthesisContext[] unionParenthesis()
        {
            return GetRuleContexts<UnionParenthesisContext>();
        }
        public UnionParenthesisContext unionParenthesis(int i)
        {
            return GetRuleContext<UnionParenthesisContext>(i);
        }
        public ITerminalNode UNION() { return GetToken(MySqlParser.UNION, 0); }
        public QueryExpressionContext queryExpression()
        {
            return GetRuleContext<QueryExpressionContext>(0);
        }
        public OrderByClauseContext orderByClause()
        {
            return GetRuleContext<OrderByClauseContext>(0);
        }
        public LimitClauseContext limitClause()
        {
            return GetRuleContext<LimitClauseContext>(0);
        }
        public LockClauseContext lockClause()
        {
            return GetRuleContext<LockClauseContext>(0);
        }
        public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
        public ITerminalNode DISTINCT() { return GetToken(MySqlParser.DISTINCT, 0); }
        public UnionParenthesisSelectContext(SelectStatementContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterUnionParenthesisSelect(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitUnionParenthesisSelect(this);
        }
    }
    public partial class SimpleSelectContext : SelectStatementContext
    {
        public QuerySpecificationContext querySpecification()
        {
            return GetRuleContext<QuerySpecificationContext>(0);
        }
        public LockClauseContext lockClause()
        {
            return GetRuleContext<LockClauseContext>(0);
        }
        public SimpleSelectContext(SelectStatementContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterSimpleSelect(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitSimpleSelect(this);
        }
    }
    public partial class ParenthesisSelectContext : SelectStatementContext
    {
        public QueryExpressionContext queryExpression()
        {
            return GetRuleContext<QueryExpressionContext>(0);
        }
        public LockClauseContext lockClause()
        {
            return GetRuleContext<LockClauseContext>(0);
        }
        public ParenthesisSelectContext(SelectStatementContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterParenthesisSelect(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitParenthesisSelect(this);
        }
    }

    [RuleVersion(0)]
    public SelectStatementContext selectStatement()
    {
        SelectStatementContext _localctx = new SelectStatementContext(Context, State);
        EnterRule(_localctx, 178, RULE_selectStatement);
        int _la;
        try
        {
            int _alt;
            State = 3026;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 410, Context))
            {
                case 1:
                    _localctx = new SimpleSelectContext(_localctx);
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 2971; querySpecification();
                        State = 2973;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 395, Context))
                        {
                            case 1:
                                {
                                    State = 2972; lockClause();
                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    _localctx = new ParenthesisSelectContext(_localctx);
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 2975; queryExpression();
                        State = 2977;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 396, Context))
                        {
                            case 1:
                                {
                                    State = 2976; lockClause();
                                }
                                break;
                        }
                    }
                    break;
                case 3:
                    _localctx = new UnionSelectContext(_localctx);
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 2979; querySpecificationNointo();
                        State = 2981;
                        ErrorHandler.Sync(this);
                        _alt = 1;
                        do
                        {
                            switch (_alt)
                            {
                                case 1:
                                    {
                                        {
                                            State = 2980; unionStatement();
                                        }
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException(this);
                            }
                            State = 2983;
                            ErrorHandler.Sync(this);
                            _alt = Interpreter.AdaptivePredict(TokenStream, 397, Context);
                        } while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER);
                        State = 2993;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == UNION)
                        {
                            {
                                State = 2985; Match(UNION);
                                State = 2987;
                                ErrorHandler.Sync(this);
                                _la = TokenStream.LA(1);
                                if (_la == ALL || _la == DISTINCT)
                                {
                                    {
                                        State = 2986;
                                        ((UnionSelectContext)_localctx).unionType = TokenStream.LT(1);
                                        _la = TokenStream.LA(1);
                                        if (!(_la == ALL || _la == DISTINCT))
                                        {
                                            ((UnionSelectContext)_localctx).unionType = ErrorHandler.RecoverInline(this);
                                        }
                                        else
                                        {
                                            ErrorHandler.ReportMatch(this);
                                            Consume();
                                        }
                                    }
                                }

                                State = 2991;
                                ErrorHandler.Sync(this);
                                switch (TokenStream.LA(1))
                                {
                                    case SELECT:
                                        {
                                            State = 2989; querySpecification();
                                        }
                                        break;
                                    case LR_BRACKET:
                                        {
                                            State = 2990; queryExpression();
                                        }
                                        break;
                                    default:
                                        throw new NoViableAltException(this);
                                }
                            }
                        }

                        State = 2996;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == ORDER)
                        {
                            {
                                State = 2995; orderByClause();
                            }
                        }

                        State = 2999;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == LIMIT)
                        {
                            {
                                State = 2998; limitClause();
                            }
                        }

                        State = 3002;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 403, Context))
                        {
                            case 1:
                                {
                                    State = 3001; lockClause();
                                }
                                break;
                        }
                    }
                    break;
                case 4:
                    _localctx = new UnionParenthesisSelectContext(_localctx);
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 3004; queryExpressionNointo();
                        State = 3006;
                        ErrorHandler.Sync(this);
                        _alt = 1;
                        do
                        {
                            switch (_alt)
                            {
                                case 1:
                                    {
                                        {
                                            State = 3005; unionParenthesis();
                                        }
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException(this);
                            }
                            State = 3008;
                            ErrorHandler.Sync(this);
                            _alt = Interpreter.AdaptivePredict(TokenStream, 404, Context);
                        } while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER);
                        State = 3015;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == UNION)
                        {
                            {
                                State = 3010; Match(UNION);
                                State = 3012;
                                ErrorHandler.Sync(this);
                                _la = TokenStream.LA(1);
                                if (_la == ALL || _la == DISTINCT)
                                {
                                    {
                                        State = 3011;
                                        ((UnionParenthesisSelectContext)_localctx).unionType = TokenStream.LT(1);
                                        _la = TokenStream.LA(1);
                                        if (!(_la == ALL || _la == DISTINCT))
                                        {
                                            ((UnionParenthesisSelectContext)_localctx).unionType = ErrorHandler.RecoverInline(this);
                                        }
                                        else
                                        {
                                            ErrorHandler.ReportMatch(this);
                                            Consume();
                                        }
                                    }
                                }

                                State = 3014; queryExpression();
                            }
                        }

                        State = 3018;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == ORDER)
                        {
                            {
                                State = 3017; orderByClause();
                            }
                        }

                        State = 3021;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == LIMIT)
                        {
                            {
                                State = 3020; limitClause();
                            }
                        }

                        State = 3024;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 409, Context))
                        {
                            case 1:
                                {
                                    State = 3023; lockClause();
                                }
                                break;
                        }
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class UpdateStatementContext : ParserRuleContext
    {
        public SingleUpdateStatementContext singleUpdateStatement()
        {
            return GetRuleContext<SingleUpdateStatementContext>(0);
        }
        public MultipleUpdateStatementContext multipleUpdateStatement()
        {
            return GetRuleContext<MultipleUpdateStatementContext>(0);
        }
        public UpdateStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_updateStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterUpdateStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitUpdateStatement(this);
        }
    }

    [RuleVersion(0)]
    public UpdateStatementContext updateStatement()
    {
        UpdateStatementContext _localctx = new UpdateStatementContext(Context, State);
        EnterRule(_localctx, 180, RULE_updateStatement);
        try
        {
            State = 3030;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 411, Context))
            {
                case 1:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 3028; singleUpdateStatement();
                    }
                    break;
                case 2:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 3029; multipleUpdateStatement();
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class InsertStatementValueContext : ParserRuleContext
    {
        public IToken insertFormat;
        public SelectStatementContext selectStatement()
        {
            return GetRuleContext<SelectStatementContext>(0);
        }
        public ITerminalNode[] LR_BRACKET() { return GetTokens(MySqlParser.LR_BRACKET); }
        public ITerminalNode LR_BRACKET(int i)
        {
            return GetToken(MySqlParser.LR_BRACKET, i);
        }
        public ExpressionsWithDefaultsContext[] expressionsWithDefaults()
        {
            return GetRuleContexts<ExpressionsWithDefaultsContext>();
        }
        public ExpressionsWithDefaultsContext expressionsWithDefaults(int i)
        {
            return GetRuleContext<ExpressionsWithDefaultsContext>(i);
        }
        public ITerminalNode[] RR_BRACKET() { return GetTokens(MySqlParser.RR_BRACKET); }
        public ITerminalNode RR_BRACKET(int i)
        {
            return GetToken(MySqlParser.RR_BRACKET, i);
        }
        public ITerminalNode VALUES() { return GetToken(MySqlParser.VALUES, 0); }
        public ITerminalNode VALUE() { return GetToken(MySqlParser.VALUE, 0); }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public InsertStatementValueContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_insertStatementValue; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterInsertStatementValue(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitInsertStatementValue(this);
        }
    }

    [RuleVersion(0)]
    public InsertStatementValueContext insertStatementValue()
    {
        InsertStatementValueContext _localctx = new InsertStatementValueContext(Context, State);
        EnterRule(_localctx, 182, RULE_insertStatementValue);
        int _la;
        try
        {
            State = 3047;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case SELECT:
                case LR_BRACKET:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 3032; selectStatement();
                    }
                    break;
                case VALUES:
                case VALUE:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 3033;
                        _localctx.insertFormat = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == VALUES || _la == VALUE))
                        {
                            _localctx.insertFormat = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                        State = 3034; Match(LR_BRACKET);
                        State = 3035; expressionsWithDefaults();
                        State = 3036; Match(RR_BRACKET);
                        State = 3044;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        while (_la == COMMA)
                        {
                            {
                                {
                                    State = 3037; Match(COMMA);
                                    State = 3038; Match(LR_BRACKET);
                                    State = 3039; expressionsWithDefaults();
                                    State = 3040; Match(RR_BRACKET);
                                }
                            }
                            State = 3046;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class UpdatedElementContext : ParserRuleContext
    {
        public FullColumnNameContext fullColumnName()
        {
            return GetRuleContext<FullColumnNameContext>(0);
        }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public ExpressionContext expression()
        {
            return GetRuleContext<ExpressionContext>(0);
        }
        public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
        public UpdatedElementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_updatedElement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterUpdatedElement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitUpdatedElement(this);
        }
    }

    [RuleVersion(0)]
    public UpdatedElementContext updatedElement()
    {
        UpdatedElementContext _localctx = new UpdatedElementContext(Context, State);
        EnterRule(_localctx, 184, RULE_updatedElement);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 3049; fullColumnName();
                State = 3050; Match(EQUAL_SYMBOL);
                State = 3053;
                ErrorHandler.Sync(this);
                switch (TokenStream.LA(1))
                {
                    case CASE:
                    case CAST:
                    case CONVERT:
                    case CURRENT:
                    case CURRENT_USER:
                    case DATABASE:
                    case DIAGNOSTICS:
                    case EXISTS:
                    case FALSE:
                    case IF:
                    case INSERT:
                    case INTERVAL:
                    case LEFT:
                    case NOT:
                    case NULL_LITERAL:
                    case NUMBER:
                    case REPLACE:
                    case RIGHT:
                    case STACKED:
                    case TRUE:
                    case VALUES:
                    case DATE:
                    case TIME:
                    case TIMESTAMP:
                    case DATETIME:
                    case YEAR:
                    case CHAR:
                    case BINARY:
                    case TEXT:
                    case ENUM:
                    case SERIAL:
                    case AVG:
                    case BIT_AND:
                    case BIT_OR:
                    case BIT_XOR:
                    case COUNT:
                    case GROUP_CONCAT:
                    case MAX:
                    case MIN:
                    case STD:
                    case STDDEV:
                    case STDDEV_POP:
                    case STDDEV_SAMP:
                    case SUM:
                    case VAR_POP:
                    case VAR_SAMP:
                    case VARIANCE:
                    case CURRENT_DATE:
                    case CURRENT_TIME:
                    case CURRENT_TIMESTAMP:
                    case LOCALTIME:
                    case CURDATE:
                    case CURTIME:
                    case DATE_ADD:
                    case DATE_SUB:
                    case EXTRACT:
                    case LOCALTIMESTAMP:
                    case NOW:
                    case POSITION:
                    case SUBSTR:
                    case SUBSTRING:
                    case SYSDATE:
                    case TRIM:
                    case UTC_DATE:
                    case UTC_TIME:
                    case UTC_TIMESTAMP:
                    case ACCOUNT:
                    case ACTION:
                    case AFTER:
                    case AGGREGATE:
                    case ALGORITHM:
                    case ANY:
                    case AT:
                    case AUTHORS:
                    case AUTOCOMMIT:
                    case AUTOEXTEND_SIZE:
                    case AUTO_INCREMENT:
                    case AVG_ROW_LENGTH:
                    case BEGIN:
                    case BINLOG:
                    case BIT:
                    case BLOCK:
                    case BOOL:
                    case BOOLEAN:
                    case BTREE:
                    case CACHE:
                    case CASCADED:
                    case CHAIN:
                    case CHANGED:
                    case CHANNEL:
                    case CHECKSUM:
                    case PAGE_CHECKSUM:
                    case CIPHER:
                    case CLASS_ORIGIN:
                    case CLIENT:
                    case CLOSE:
                    case COALESCE:
                    case CODE:
                    case COLUMNS:
                    case COLUMN_FORMAT:
                    case COLUMN_NAME:
                    case COMMENT:
                    case COMMIT:
                    case COMPACT:
                    case COMPLETION:
                    case COMPRESSED:
                    case COMPRESSION:
                    case CONCURRENT:
                    case CONNECTION:
                    case CONSISTENT:
                    case CONSTRAINT_CATALOG:
                    case CONSTRAINT_SCHEMA:
                    case CONSTRAINT_NAME:
                    case CONTAINS:
                    case CONTEXT:
                    case CONTRIBUTORS:
                    case COPY:
                    case CPU:
                    case CURSOR_NAME:
                    case DATA:
                    case DATAFILE:
                    case DEALLOCATE:
                    case DEFAULT_AUTH:
                    case DEFINER:
                    case DELAY_KEY_WRITE:
                    case DES_KEY_FILE:
                    case DIRECTORY:
                    case DISABLE:
                    case DISCARD:
                    case DISK:
                    case DO:
                    case DUMPFILE:
                    case DUPLICATE:
                    case DYNAMIC:
                    case ENABLE:
                    case ENCRYPTION:
                    case END:
                    case ENDS:
                    case ENGINE:
                    case ENGINES:
                    case ERROR:
                    case ERRORS:
                    case ESCAPE:
                    case EVEN:
                    case EVENT:
                    case EVENTS:
                    case EVERY:
                    case EXCHANGE:
                    case EXCLUSIVE:
                    case EXPIRE:
                    case EXPORT:
                    case EXTENDED:
                    case EXTENT_SIZE:
                    case FAST:
                    case FAULTS:
                    case FIELDS:
                    case FILE_BLOCK_SIZE:
                    case FILTER:
                    case FIRST:
                    case FIXED:
                    case FLUSH:
                    case FOLLOWS:
                    case FOUND:
                    case FULL:
                    case FUNCTION:
                    case GENERAL:
                    case GLOBAL:
                    case GRANTS:
                    case GROUP_REPLICATION:
                    case HANDLER:
                    case HASH:
                    case HELP:
                    case HOST:
                    case HOSTS:
                    case IDENTIFIED:
                    case IGNORE_SERVER_IDS:
                    case IMPORT:
                    case INDEXES:
                    case INITIAL_SIZE:
                    case INPLACE:
                    case INSERT_METHOD:
                    case INSTALL:
                    case INSTANCE:
                    case INVISIBLE:
                    case INVOKER:
                    case IO:
                    case IO_THREAD:
                    case IPC:
                    case ISOLATION:
                    case ISSUER:
                    case JSON:
                    case KEY_BLOCK_SIZE:
                    case LANGUAGE:
                    case LAST:
                    case LEAVES:
                    case LESS:
                    case LEVEL:
                    case LIST:
                    case LOCAL:
                    case LOGFILE:
                    case LOGS:
                    case MASTER:
                    case MASTER_AUTO_POSITION:
                    case MASTER_CONNECT_RETRY:
                    case MASTER_DELAY:
                    case MASTER_HEARTBEAT_PERIOD:
                    case MASTER_HOST:
                    case MASTER_LOG_FILE:
                    case MASTER_LOG_POS:
                    case MASTER_PASSWORD:
                    case MASTER_PORT:
                    case MASTER_RETRY_COUNT:
                    case MASTER_SSL:
                    case MASTER_SSL_CA:
                    case MASTER_SSL_CAPATH:
                    case MASTER_SSL_CERT:
                    case MASTER_SSL_CIPHER:
                    case MASTER_SSL_CRL:
                    case MASTER_SSL_CRLPATH:
                    case MASTER_SSL_KEY:
                    case MASTER_TLS_VERSION:
                    case MASTER_USER:
                    case MAX_CONNECTIONS_PER_HOUR:
                    case MAX_QUERIES_PER_HOUR:
                    case MAX_ROWS:
                    case MAX_SIZE:
                    case MAX_UPDATES_PER_HOUR:
                    case MAX_USER_CONNECTIONS:
                    case MEDIUM:
                    case MERGE:
                    case MESSAGE_TEXT:
                    case MID:
                    case MIGRATE:
                    case MIN_ROWS:
                    case MODE:
                    case MODIFY:
                    case MUTEX:
                    case MYSQL:
                    case MYSQL_ERRNO:
                    case NAME:
                    case NAMES:
                    case NCHAR:
                    case NEVER:
                    case NEXT:
                    case NO:
                    case NODEGROUP:
                    case NONE:
                    case OFFLINE:
                    case OFFSET:
                    case OJ:
                    case OLD_PASSWORD:
                    case ONE:
                    case ONLINE:
                    case ONLY:
                    case OPEN:
                    case OPTIMIZER_COSTS:
                    case OPTIONS:
                    case OWNER:
                    case PACK_KEYS:
                    case PAGE:
                    case PARSER:
                    case PARTIAL:
                    case PARTITIONING:
                    case PARTITIONS:
                    case PASSWORD:
                    case PHASE:
                    case PLUGIN:
                    case PLUGIN_DIR:
                    case PLUGINS:
                    case PORT:
                    case PRECEDES:
                    case PREPARE:
                    case PRESERVE:
                    case PREV:
                    case PROCESSLIST:
                    case PROFILE:
                    case PROFILES:
                    case PROXY:
                    case QUERY:
                    case QUICK:
                    case REBUILD:
                    case RECOVER:
                    case REDO_BUFFER_SIZE:
                    case REDUNDANT:
                    case RELAY:
                    case RELAY_LOG_FILE:
                    case RELAY_LOG_POS:
                    case RELAYLOG:
                    case REMOVE:
                    case REORGANIZE:
                    case REPAIR:
                    case REPLICATE_DO_DB:
                    case REPLICATE_DO_TABLE:
                    case REPLICATE_IGNORE_DB:
                    case REPLICATE_IGNORE_TABLE:
                    case REPLICATE_REWRITE_DB:
                    case REPLICATE_WILD_DO_TABLE:
                    case REPLICATE_WILD_IGNORE_TABLE:
                    case REPLICATION:
                    case RESET:
                    case RESUME:
                    case RETURNED_SQLSTATE:
                    case RETURNS:
                    case ROLLBACK:
                    case ROLLUP:
                    case ROTATE:
                    case ROW:
                    case ROWS:
                    case ROW_FORMAT:
                    case SAVEPOINT:
                    case SCHEDULE:
                    case SECURITY:
                    case SERVER:
                    case SESSION:
                    case SHARE:
                    case SHARED:
                    case SIGNED:
                    case SIMPLE:
                    case SLAVE:
                    case SLOW:
                    case SNAPSHOT:
                    case SOCKET:
                    case SOME:
                    case SONAME:
                    case SOUNDS:
                    case SOURCE:
                    case SQL_AFTER_GTIDS:
                    case SQL_AFTER_MTS_GAPS:
                    case SQL_BEFORE_GTIDS:
                    case SQL_BUFFER_RESULT:
                    case SQL_CACHE:
                    case SQL_NO_CACHE:
                    case SQL_THREAD:
                    case START:
                    case STARTS:
                    case STATS_AUTO_RECALC:
                    case STATS_PERSISTENT:
                    case STATS_SAMPLE_PAGES:
                    case STATUS:
                    case STOP:
                    case STORAGE:
                    case STRING:
                    case SUBCLASS_ORIGIN:
                    case SUBJECT:
                    case SUBPARTITION:
                    case SUBPARTITIONS:
                    case SUSPEND:
                    case SWAPS:
                    case SWITCHES:
                    case TABLE_NAME:
                    case TABLESPACE:
                    case TEMPORARY:
                    case TEMPTABLE:
                    case THAN:
                    case TRADITIONAL:
                    case TRANSACTION:
                    case TRIGGERS:
                    case TRUNCATE:
                    case UNDEFINED:
                    case UNDOFILE:
                    case UNDO_BUFFER_SIZE:
                    case UNINSTALL:
                    case UNKNOWN:
                    case UNTIL:
                    case UPGRADE:
                    case USER:
                    case USE_FRM:
                    case USER_RESOURCES:
                    case VALIDATION:
                    case VALUE:
                    case VARIABLES:
                    case VIEW:
                    case VISIBLE:
                    case WAIT:
                    case WARNINGS:
                    case WITHOUT:
                    case WORK:
                    case WRAPPER:
                    case X509:
                    case XA:
                    case XML:
                    case INTERNAL:
                    case QUARTER:
                    case MONTH:
                    case DAY:
                    case HOUR:
                    case MINUTE:
                    case WEEK:
                    case SECOND:
                    case MICROSECOND:
                    case TABLES:
                    case ROUTINE:
                    case EXECUTE:
                    case FILE:
                    case PROCESS:
                    case RELOAD:
                    case SHUTDOWN:
                    case SUPER:
                    case PRIVILEGES:
                    case SESSION_VARIABLES_ADMIN:
                    case ARMSCII8:
                    case ASCII:
                    case BIG5:
                    case CP1250:
                    case CP1251:
                    case CP1256:
                    case CP1257:
                    case CP850:
                    case CP852:
                    case CP866:
                    case CP932:
                    case DEC8:
                    case EUCJPMS:
                    case EUCKR:
                    case GB2312:
                    case GBK:
                    case GEOSTD8:
                    case GREEK:
                    case HEBREW:
                    case HP8:
                    case KEYBCS2:
                    case KOI8R:
                    case KOI8U:
                    case LATIN1:
                    case LATIN2:
                    case LATIN5:
                    case LATIN7:
                    case MACCE:
                    case MACROMAN:
                    case SJIS:
                    case SWE7:
                    case TIS620:
                    case UCS2:
                    case UJIS:
                    case UTF16:
                    case UTF16LE:
                    case UTF32:
                    case UTF8:
                    case UTF8MB3:
                    case UTF8MB4:
                    case ARCHIVE:
                    case BLACKHOLE:
                    case CSV:
                    case FEDERATED:
                    case INNODB:
                    case MEMORY:
                    case MRG_MYISAM:
                    case MYISAM:
                    case NDB:
                    case NDBCLUSTER:
                    case PERFORMANCE_SCHEMA:
                    case TOKUDB:
                    case REPEATABLE:
                    case COMMITTED:
                    case UNCOMMITTED:
                    case SERIALIZABLE:
                    case GEOMETRYCOLLECTION:
                    case LINESTRING:
                    case MULTILINESTRING:
                    case MULTIPOINT:
                    case MULTIPOLYGON:
                    case POINT:
                    case POLYGON:
                    case ABS:
                    case ACOS:
                    case ADDDATE:
                    case ADDTIME:
                    case AES_DECRYPT:
                    case AES_ENCRYPT:
                    case AREA:
                    case ASBINARY:
                    case ASIN:
                    case ASTEXT:
                    case ASWKB:
                    case ASWKT:
                    case ASYMMETRIC_DECRYPT:
                    case ASYMMETRIC_DERIVE:
                    case ASYMMETRIC_ENCRYPT:
                    case ASYMMETRIC_SIGN:
                    case ASYMMETRIC_VERIFY:
                    case ATAN:
                    case ATAN2:
                    case BENCHMARK:
                    case BIN:
                    case BIT_COUNT:
                    case BIT_LENGTH:
                    case BUFFER:
                    case CATALOG_NAME:
                    case CEIL:
                    case CEILING:
                    case CENTROID:
                    case CHARACTER_LENGTH:
                    case CHARSET:
                    case CHAR_LENGTH:
                    case COERCIBILITY:
                    case COLLATION:
                    case COMPRESS:
                    case CONCAT:
                    case CONCAT_WS:
                    case CONNECTION_ID:
                    case CONV:
                    case CONVERT_TZ:
                    case COS:
                    case COT:
                    case CRC32:
                    case CREATE_ASYMMETRIC_PRIV_KEY:
                    case CREATE_ASYMMETRIC_PUB_KEY:
                    case CREATE_DH_PARAMETERS:
                    case CREATE_DIGEST:
                    case CROSSES:
                    case DATEDIFF:
                    case DATE_FORMAT:
                    case DAYNAME:
                    case DAYOFMONTH:
                    case DAYOFWEEK:
                    case DAYOFYEAR:
                    case DECODE:
                    case DEGREES:
                    case DES_DECRYPT:
                    case DES_ENCRYPT:
                    case DIMENSION:
                    case DISJOINT:
                    case ELT:
                    case ENCODE:
                    case ENCRYPT:
                    case ENDPOINT:
                    case ENVELOPE:
                    case EQUALS:
                    case EXP:
                    case EXPORT_SET:
                    case EXTERIORRING:
                    case EXTRACTVALUE:
                    case FIELD:
                    case FIND_IN_SET:
                    case FLOOR:
                    case FORMAT:
                    case FOUND_ROWS:
                    case FROM_BASE64:
                    case FROM_DAYS:
                    case FROM_UNIXTIME:
                    case GEOMCOLLFROMTEXT:
                    case GEOMCOLLFROMWKB:
                    case GEOMETRYCOLLECTIONFROMTEXT:
                    case GEOMETRYCOLLECTIONFROMWKB:
                    case GEOMETRYFROMTEXT:
                    case GEOMETRYFROMWKB:
                    case GEOMETRYN:
                    case GEOMETRYTYPE:
                    case GEOMFROMTEXT:
                    case GEOMFROMWKB:
                    case GET_FORMAT:
                    case GET_LOCK:
                    case GLENGTH:
                    case GREATEST:
                    case GTID_SUBSET:
                    case GTID_SUBTRACT:
                    case HEX:
                    case IFNULL:
                    case INET6_ATON:
                    case INET6_NTOA:
                    case INET_ATON:
                    case INET_NTOA:
                    case INSTR:
                    case INTERIORRINGN:
                    case INTERSECTS:
                    case ISCLOSED:
                    case ISEMPTY:
                    case ISNULL:
                    case ISSIMPLE:
                    case IS_FREE_LOCK:
                    case IS_IPV4:
                    case IS_IPV4_COMPAT:
                    case IS_IPV4_MAPPED:
                    case IS_IPV6:
                    case IS_USED_LOCK:
                    case LAST_INSERT_ID:
                    case LCASE:
                    case LEAST:
                    case LENGTH:
                    case LINEFROMTEXT:
                    case LINEFROMWKB:
                    case LINESTRINGFROMTEXT:
                    case LINESTRINGFROMWKB:
                    case LN:
                    case LOAD_FILE:
                    case LOCATE:
                    case LOG:
                    case LOG10:
                    case LOG2:
                    case LOWER:
                    case LPAD:
                    case LTRIM:
                    case MAKEDATE:
                    case MAKETIME:
                    case MAKE_SET:
                    case MASTER_POS_WAIT:
                    case MBRCONTAINS:
                    case MBRDISJOINT:
                    case MBREQUAL:
                    case MBRINTERSECTS:
                    case MBROVERLAPS:
                    case MBRTOUCHES:
                    case MBRWITHIN:
                    case MD5:
                    case MLINEFROMTEXT:
                    case MLINEFROMWKB:
                    case MONTHNAME:
                    case MPOINTFROMTEXT:
                    case MPOINTFROMWKB:
                    case MPOLYFROMTEXT:
                    case MPOLYFROMWKB:
                    case MULTILINESTRINGFROMTEXT:
                    case MULTILINESTRINGFROMWKB:
                    case MULTIPOINTFROMTEXT:
                    case MULTIPOINTFROMWKB:
                    case MULTIPOLYGONFROMTEXT:
                    case MULTIPOLYGONFROMWKB:
                    case NAME_CONST:
                    case NULLIF:
                    case NUMGEOMETRIES:
                    case NUMINTERIORRINGS:
                    case NUMPOINTS:
                    case OCT:
                    case OCTET_LENGTH:
                    case ORD:
                    case OVERLAPS:
                    case PERIOD_ADD:
                    case PERIOD_DIFF:
                    case PI:
                    case POINTFROMTEXT:
                    case POINTFROMWKB:
                    case POINTN:
                    case POLYFROMTEXT:
                    case POLYFROMWKB:
                    case POLYGONFROMTEXT:
                    case POLYGONFROMWKB:
                    case POW:
                    case POWER:
                    case QUOTE:
                    case RADIANS:
                    case RAND:
                    case RANDOM_BYTES:
                    case RELEASE_LOCK:
                    case REVERSE:
                    case ROUND:
                    case ROW_COUNT:
                    case RPAD:
                    case RTRIM:
                    case SEC_TO_TIME:
                    case SESSION_USER:
                    case SHA:
                    case SHA1:
                    case SHA2:
                    case SCHEMA_NAME:
                    case SIGN:
                    case SIN:
                    case SLEEP:
                    case SOUNDEX:
                    case SQL_THREAD_WAIT_AFTER_GTIDS:
                    case SQRT:
                    case SRID:
                    case STARTPOINT:
                    case STRCMP:
                    case STR_TO_DATE:
                    case ST_AREA:
                    case ST_ASBINARY:
                    case ST_ASTEXT:
                    case ST_ASWKB:
                    case ST_ASWKT:
                    case ST_BUFFER:
                    case ST_CENTROID:
                    case ST_CONTAINS:
                    case ST_CROSSES:
                    case ST_DIFFERENCE:
                    case ST_DIMENSION:
                    case ST_DISJOINT:
                    case ST_DISTANCE:
                    case ST_ENDPOINT:
                    case ST_ENVELOPE:
                    case ST_EQUALS:
                    case ST_EXTERIORRING:
                    case ST_GEOMCOLLFROMTEXT:
                    case ST_GEOMCOLLFROMTXT:
                    case ST_GEOMCOLLFROMWKB:
                    case ST_GEOMETRYCOLLECTIONFROMTEXT:
                    case ST_GEOMETRYCOLLECTIONFROMWKB:
                    case ST_GEOMETRYFROMTEXT:
                    case ST_GEOMETRYFROMWKB:
                    case ST_GEOMETRYN:
                    case ST_GEOMETRYTYPE:
                    case ST_GEOMFROMTEXT:
                    case ST_GEOMFROMWKB:
                    case ST_INTERIORRINGN:
                    case ST_INTERSECTION:
                    case ST_INTERSECTS:
                    case ST_ISCLOSED:
                    case ST_ISEMPTY:
                    case ST_ISSIMPLE:
                    case ST_LINEFROMTEXT:
                    case ST_LINEFROMWKB:
                    case ST_LINESTRINGFROMTEXT:
                    case ST_LINESTRINGFROMWKB:
                    case ST_NUMGEOMETRIES:
                    case ST_NUMINTERIORRING:
                    case ST_NUMINTERIORRINGS:
                    case ST_NUMPOINTS:
                    case ST_OVERLAPS:
                    case ST_POINTFROMTEXT:
                    case ST_POINTFROMWKB:
                    case ST_POINTN:
                    case ST_POLYFROMTEXT:
                    case ST_POLYFROMWKB:
                    case ST_POLYGONFROMTEXT:
                    case ST_POLYGONFROMWKB:
                    case ST_SRID:
                    case ST_STARTPOINT:
                    case ST_SYMDIFFERENCE:
                    case ST_TOUCHES:
                    case ST_UNION:
                    case ST_WITHIN:
                    case ST_X:
                    case ST_Y:
                    case SUBDATE:
                    case SUBSTRING_INDEX:
                    case SUBTIME:
                    case SYSTEM_USER:
                    case TAN:
                    case TIMEDIFF:
                    case TIMESTAMPADD:
                    case TIMESTAMPDIFF:
                    case TIME_FORMAT:
                    case TIME_TO_SEC:
                    case TOUCHES:
                    case TO_BASE64:
                    case TO_DAYS:
                    case TO_SECONDS:
                    case UCASE:
                    case UNCOMPRESS:
                    case UNCOMPRESSED_LENGTH:
                    case UNHEX:
                    case UNIX_TIMESTAMP:
                    case UPDATEXML:
                    case UPPER:
                    case UUID:
                    case UUID_SHORT:
                    case VALIDATE_PASSWORD_STRENGTH:
                    case VERSION:
                    case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
                    case WEEKDAY:
                    case WEEKOFYEAR:
                    case WEIGHT_STRING:
                    case WITHIN:
                    case YEARWEEK:
                    case Y_FUNCTION:
                    case X_FUNCTION:
                    case PLUS:
                    case MINUS:
                    case EXCLAMATION_SYMBOL:
                    case BIT_NOT_OP:
                    case LR_BRACKET:
                    case ZERO_DECIMAL:
                    case ONE_DECIMAL:
                    case TWO_DECIMAL:
                    case CHARSET_REVERSE_QOUTE_STRING:
                    case START_NATIONAL_STRING_LITERAL:
                    case STRING_LITERAL:
                    case DECIMAL_LITERAL:
                    case HEXADECIMAL_LITERAL:
                    case REAL_LITERAL:
                    case NULL_SPEC_LITERAL:
                    case BIT_STRING:
                    case STRING_CHARSET_NAME:
                    case ID:
                    case REVERSE_QUOTE_ID:
                    case LOCAL_ID:
                    case GLOBAL_ID:
                        {
                            State = 3051; expression(0);
                        }
                        break;
                    case DEFAULT:
                        {
                            State = 3052; Match(DEFAULT);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class AssignmentFieldContext : ParserRuleContext
    {
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public ITerminalNode LOCAL_ID() { return GetToken(MySqlParser.LOCAL_ID, 0); }
        public AssignmentFieldContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_assignmentField; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAssignmentField(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAssignmentField(this);
        }
    }

    [RuleVersion(0)]
    public AssignmentFieldContext assignmentField()
    {
        AssignmentFieldContext _localctx = new AssignmentFieldContext(Context, State);
        EnterRule(_localctx, 186, RULE_assignmentField);
        try
        {
            State = 3057;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case CURRENT:
                case DATABASE:
                case DIAGNOSTICS:
                case LEFT:
                case NUMBER:
                case RIGHT:
                case STACKED:
                case DATE:
                case TIME:
                case TIMESTAMP:
                case DATETIME:
                case YEAR:
                case TEXT:
                case ENUM:
                case SERIAL:
                case COUNT:
                case POSITION:
                case ACCOUNT:
                case ACTION:
                case AFTER:
                case AGGREGATE:
                case ALGORITHM:
                case ANY:
                case AT:
                case AUTHORS:
                case AUTOCOMMIT:
                case AUTOEXTEND_SIZE:
                case AUTO_INCREMENT:
                case AVG_ROW_LENGTH:
                case BEGIN:
                case BINLOG:
                case BIT:
                case BLOCK:
                case BOOL:
                case BOOLEAN:
                case BTREE:
                case CACHE:
                case CASCADED:
                case CHAIN:
                case CHANGED:
                case CHANNEL:
                case CHECKSUM:
                case PAGE_CHECKSUM:
                case CIPHER:
                case CLASS_ORIGIN:
                case CLIENT:
                case CLOSE:
                case COALESCE:
                case CODE:
                case COLUMNS:
                case COLUMN_FORMAT:
                case COLUMN_NAME:
                case COMMENT:
                case COMMIT:
                case COMPACT:
                case COMPLETION:
                case COMPRESSED:
                case COMPRESSION:
                case CONCURRENT:
                case CONNECTION:
                case CONSISTENT:
                case CONSTRAINT_CATALOG:
                case CONSTRAINT_SCHEMA:
                case CONSTRAINT_NAME:
                case CONTAINS:
                case CONTEXT:
                case CONTRIBUTORS:
                case COPY:
                case CPU:
                case CURSOR_NAME:
                case DATA:
                case DATAFILE:
                case DEALLOCATE:
                case DEFAULT_AUTH:
                case DEFINER:
                case DELAY_KEY_WRITE:
                case DES_KEY_FILE:
                case DIRECTORY:
                case DISABLE:
                case DISCARD:
                case DISK:
                case DO:
                case DUMPFILE:
                case DUPLICATE:
                case DYNAMIC:
                case ENABLE:
                case ENCRYPTION:
                case END:
                case ENDS:
                case ENGINE:
                case ENGINES:
                case ERROR:
                case ERRORS:
                case ESCAPE:
                case EVEN:
                case EVENT:
                case EVENTS:
                case EVERY:
                case EXCHANGE:
                case EXCLUSIVE:
                case EXPIRE:
                case EXPORT:
                case EXTENDED:
                case EXTENT_SIZE:
                case FAST:
                case FAULTS:
                case FIELDS:
                case FILE_BLOCK_SIZE:
                case FILTER:
                case FIRST:
                case FIXED:
                case FLUSH:
                case FOLLOWS:
                case FOUND:
                case FULL:
                case FUNCTION:
                case GENERAL:
                case GLOBAL:
                case GRANTS:
                case GROUP_REPLICATION:
                case HANDLER:
                case HASH:
                case HELP:
                case HOST:
                case HOSTS:
                case IDENTIFIED:
                case IGNORE_SERVER_IDS:
                case IMPORT:
                case INDEXES:
                case INITIAL_SIZE:
                case INPLACE:
                case INSERT_METHOD:
                case INSTALL:
                case INSTANCE:
                case INVISIBLE:
                case INVOKER:
                case IO:
                case IO_THREAD:
                case IPC:
                case ISOLATION:
                case ISSUER:
                case JSON:
                case KEY_BLOCK_SIZE:
                case LANGUAGE:
                case LAST:
                case LEAVES:
                case LESS:
                case LEVEL:
                case LIST:
                case LOCAL:
                case LOGFILE:
                case LOGS:
                case MASTER:
                case MASTER_AUTO_POSITION:
                case MASTER_CONNECT_RETRY:
                case MASTER_DELAY:
                case MASTER_HEARTBEAT_PERIOD:
                case MASTER_HOST:
                case MASTER_LOG_FILE:
                case MASTER_LOG_POS:
                case MASTER_PASSWORD:
                case MASTER_PORT:
                case MASTER_RETRY_COUNT:
                case MASTER_SSL:
                case MASTER_SSL_CA:
                case MASTER_SSL_CAPATH:
                case MASTER_SSL_CERT:
                case MASTER_SSL_CIPHER:
                case MASTER_SSL_CRL:
                case MASTER_SSL_CRLPATH:
                case MASTER_SSL_KEY:
                case MASTER_TLS_VERSION:
                case MASTER_USER:
                case MAX_CONNECTIONS_PER_HOUR:
                case MAX_QUERIES_PER_HOUR:
                case MAX_ROWS:
                case MAX_SIZE:
                case MAX_UPDATES_PER_HOUR:
                case MAX_USER_CONNECTIONS:
                case MEDIUM:
                case MERGE:
                case MESSAGE_TEXT:
                case MID:
                case MIGRATE:
                case MIN_ROWS:
                case MODE:
                case MODIFY:
                case MUTEX:
                case MYSQL:
                case MYSQL_ERRNO:
                case NAME:
                case NAMES:
                case NCHAR:
                case NEVER:
                case NEXT:
                case NO:
                case NODEGROUP:
                case NONE:
                case OFFLINE:
                case OFFSET:
                case OJ:
                case OLD_PASSWORD:
                case ONE:
                case ONLINE:
                case ONLY:
                case OPEN:
                case OPTIMIZER_COSTS:
                case OPTIONS:
                case OWNER:
                case PACK_KEYS:
                case PAGE:
                case PARSER:
                case PARTIAL:
                case PARTITIONING:
                case PARTITIONS:
                case PASSWORD:
                case PHASE:
                case PLUGIN:
                case PLUGIN_DIR:
                case PLUGINS:
                case PORT:
                case PRECEDES:
                case PREPARE:
                case PRESERVE:
                case PREV:
                case PROCESSLIST:
                case PROFILE:
                case PROFILES:
                case PROXY:
                case QUERY:
                case QUICK:
                case REBUILD:
                case RECOVER:
                case REDO_BUFFER_SIZE:
                case REDUNDANT:
                case RELAY:
                case RELAY_LOG_FILE:
                case RELAY_LOG_POS:
                case RELAYLOG:
                case REMOVE:
                case REORGANIZE:
                case REPAIR:
                case REPLICATE_DO_DB:
                case REPLICATE_DO_TABLE:
                case REPLICATE_IGNORE_DB:
                case REPLICATE_IGNORE_TABLE:
                case REPLICATE_REWRITE_DB:
                case REPLICATE_WILD_DO_TABLE:
                case REPLICATE_WILD_IGNORE_TABLE:
                case REPLICATION:
                case RESET:
                case RESUME:
                case RETURNED_SQLSTATE:
                case RETURNS:
                case ROLLBACK:
                case ROLLUP:
                case ROTATE:
                case ROW:
                case ROWS:
                case ROW_FORMAT:
                case SAVEPOINT:
                case SCHEDULE:
                case SECURITY:
                case SERVER:
                case SESSION:
                case SHARE:
                case SHARED:
                case SIGNED:
                case SIMPLE:
                case SLAVE:
                case SLOW:
                case SNAPSHOT:
                case SOCKET:
                case SOME:
                case SONAME:
                case SOUNDS:
                case SOURCE:
                case SQL_AFTER_GTIDS:
                case SQL_AFTER_MTS_GAPS:
                case SQL_BEFORE_GTIDS:
                case SQL_BUFFER_RESULT:
                case SQL_CACHE:
                case SQL_NO_CACHE:
                case SQL_THREAD:
                case START:
                case STARTS:
                case STATS_AUTO_RECALC:
                case STATS_PERSISTENT:
                case STATS_SAMPLE_PAGES:
                case STATUS:
                case STOP:
                case STORAGE:
                case STRING:
                case SUBCLASS_ORIGIN:
                case SUBJECT:
                case SUBPARTITION:
                case SUBPARTITIONS:
                case SUSPEND:
                case SWAPS:
                case SWITCHES:
                case TABLE_NAME:
                case TABLESPACE:
                case TEMPORARY:
                case TEMPTABLE:
                case THAN:
                case TRADITIONAL:
                case TRANSACTION:
                case TRIGGERS:
                case TRUNCATE:
                case UNDEFINED:
                case UNDOFILE:
                case UNDO_BUFFER_SIZE:
                case UNINSTALL:
                case UNKNOWN:
                case UNTIL:
                case UPGRADE:
                case USER:
                case USE_FRM:
                case USER_RESOURCES:
                case VALIDATION:
                case VALUE:
                case VARIABLES:
                case VIEW:
                case VISIBLE:
                case WAIT:
                case WARNINGS:
                case WITHOUT:
                case WORK:
                case WRAPPER:
                case X509:
                case XA:
                case XML:
                case INTERNAL:
                case QUARTER:
                case MONTH:
                case DAY:
                case HOUR:
                case MINUTE:
                case WEEK:
                case SECOND:
                case MICROSECOND:
                case TABLES:
                case ROUTINE:
                case EXECUTE:
                case FILE:
                case PROCESS:
                case RELOAD:
                case SHUTDOWN:
                case SUPER:
                case PRIVILEGES:
                case SESSION_VARIABLES_ADMIN:
                case ARMSCII8:
                case ASCII:
                case BIG5:
                case CP1250:
                case CP1251:
                case CP1256:
                case CP1257:
                case CP850:
                case CP852:
                case CP866:
                case CP932:
                case DEC8:
                case EUCJPMS:
                case EUCKR:
                case GB2312:
                case GBK:
                case GEOSTD8:
                case GREEK:
                case HEBREW:
                case HP8:
                case KEYBCS2:
                case KOI8R:
                case KOI8U:
                case LATIN1:
                case LATIN2:
                case LATIN5:
                case LATIN7:
                case MACCE:
                case MACROMAN:
                case SJIS:
                case SWE7:
                case TIS620:
                case UCS2:
                case UJIS:
                case UTF16:
                case UTF16LE:
                case UTF32:
                case UTF8:
                case UTF8MB3:
                case UTF8MB4:
                case ARCHIVE:
                case BLACKHOLE:
                case CSV:
                case FEDERATED:
                case INNODB:
                case MEMORY:
                case MRG_MYISAM:
                case MYISAM:
                case NDB:
                case NDBCLUSTER:
                case PERFORMANCE_SCHEMA:
                case TOKUDB:
                case REPEATABLE:
                case COMMITTED:
                case UNCOMMITTED:
                case SERIALIZABLE:
                case GEOMETRYCOLLECTION:
                case LINESTRING:
                case MULTILINESTRING:
                case MULTIPOINT:
                case MULTIPOLYGON:
                case POINT:
                case POLYGON:
                case ABS:
                case ACOS:
                case ADDDATE:
                case ADDTIME:
                case AES_DECRYPT:
                case AES_ENCRYPT:
                case AREA:
                case ASBINARY:
                case ASIN:
                case ASTEXT:
                case ASWKB:
                case ASWKT:
                case ASYMMETRIC_DECRYPT:
                case ASYMMETRIC_DERIVE:
                case ASYMMETRIC_ENCRYPT:
                case ASYMMETRIC_SIGN:
                case ASYMMETRIC_VERIFY:
                case ATAN:
                case ATAN2:
                case BENCHMARK:
                case BIN:
                case BIT_COUNT:
                case BIT_LENGTH:
                case BUFFER:
                case CATALOG_NAME:
                case CEIL:
                case CEILING:
                case CENTROID:
                case CHARACTER_LENGTH:
                case CHARSET:
                case CHAR_LENGTH:
                case COERCIBILITY:
                case COLLATION:
                case COMPRESS:
                case CONCAT:
                case CONCAT_WS:
                case CONNECTION_ID:
                case CONV:
                case CONVERT_TZ:
                case COS:
                case COT:
                case CRC32:
                case CREATE_ASYMMETRIC_PRIV_KEY:
                case CREATE_ASYMMETRIC_PUB_KEY:
                case CREATE_DH_PARAMETERS:
                case CREATE_DIGEST:
                case CROSSES:
                case DATEDIFF:
                case DATE_FORMAT:
                case DAYNAME:
                case DAYOFMONTH:
                case DAYOFWEEK:
                case DAYOFYEAR:
                case DECODE:
                case DEGREES:
                case DES_DECRYPT:
                case DES_ENCRYPT:
                case DIMENSION:
                case DISJOINT:
                case ELT:
                case ENCODE:
                case ENCRYPT:
                case ENDPOINT:
                case ENVELOPE:
                case EQUALS:
                case EXP:
                case EXPORT_SET:
                case EXTERIORRING:
                case EXTRACTVALUE:
                case FIELD:
                case FIND_IN_SET:
                case FLOOR:
                case FORMAT:
                case FOUND_ROWS:
                case FROM_BASE64:
                case FROM_DAYS:
                case FROM_UNIXTIME:
                case GEOMCOLLFROMTEXT:
                case GEOMCOLLFROMWKB:
                case GEOMETRYCOLLECTIONFROMTEXT:
                case GEOMETRYCOLLECTIONFROMWKB:
                case GEOMETRYFROMTEXT:
                case GEOMETRYFROMWKB:
                case GEOMETRYN:
                case GEOMETRYTYPE:
                case GEOMFROMTEXT:
                case GEOMFROMWKB:
                case GET_FORMAT:
                case GET_LOCK:
                case GLENGTH:
                case GREATEST:
                case GTID_SUBSET:
                case GTID_SUBTRACT:
                case HEX:
                case IFNULL:
                case INET6_ATON:
                case INET6_NTOA:
                case INET_ATON:
                case INET_NTOA:
                case INSTR:
                case INTERIORRINGN:
                case INTERSECTS:
                case ISCLOSED:
                case ISEMPTY:
                case ISNULL:
                case ISSIMPLE:
                case IS_FREE_LOCK:
                case IS_IPV4:
                case IS_IPV4_COMPAT:
                case IS_IPV4_MAPPED:
                case IS_IPV6:
                case IS_USED_LOCK:
                case LAST_INSERT_ID:
                case LCASE:
                case LEAST:
                case LENGTH:
                case LINEFROMTEXT:
                case LINEFROMWKB:
                case LINESTRINGFROMTEXT:
                case LINESTRINGFROMWKB:
                case LN:
                case LOAD_FILE:
                case LOCATE:
                case LOG:
                case LOG10:
                case LOG2:
                case LOWER:
                case LPAD:
                case LTRIM:
                case MAKEDATE:
                case MAKETIME:
                case MAKE_SET:
                case MASTER_POS_WAIT:
                case MBRCONTAINS:
                case MBRDISJOINT:
                case MBREQUAL:
                case MBRINTERSECTS:
                case MBROVERLAPS:
                case MBRTOUCHES:
                case MBRWITHIN:
                case MD5:
                case MLINEFROMTEXT:
                case MLINEFROMWKB:
                case MONTHNAME:
                case MPOINTFROMTEXT:
                case MPOINTFROMWKB:
                case MPOLYFROMTEXT:
                case MPOLYFROMWKB:
                case MULTILINESTRINGFROMTEXT:
                case MULTILINESTRINGFROMWKB:
                case MULTIPOINTFROMTEXT:
                case MULTIPOINTFROMWKB:
                case MULTIPOLYGONFROMTEXT:
                case MULTIPOLYGONFROMWKB:
                case NAME_CONST:
                case NULLIF:
                case NUMGEOMETRIES:
                case NUMINTERIORRINGS:
                case NUMPOINTS:
                case OCT:
                case OCTET_LENGTH:
                case ORD:
                case OVERLAPS:
                case PERIOD_ADD:
                case PERIOD_DIFF:
                case PI:
                case POINTFROMTEXT:
                case POINTFROMWKB:
                case POINTN:
                case POLYFROMTEXT:
                case POLYFROMWKB:
                case POLYGONFROMTEXT:
                case POLYGONFROMWKB:
                case POW:
                case POWER:
                case QUOTE:
                case RADIANS:
                case RAND:
                case RANDOM_BYTES:
                case RELEASE_LOCK:
                case REVERSE:
                case ROUND:
                case ROW_COUNT:
                case RPAD:
                case RTRIM:
                case SEC_TO_TIME:
                case SESSION_USER:
                case SHA:
                case SHA1:
                case SHA2:
                case SCHEMA_NAME:
                case SIGN:
                case SIN:
                case SLEEP:
                case SOUNDEX:
                case SQL_THREAD_WAIT_AFTER_GTIDS:
                case SQRT:
                case SRID:
                case STARTPOINT:
                case STRCMP:
                case STR_TO_DATE:
                case ST_AREA:
                case ST_ASBINARY:
                case ST_ASTEXT:
                case ST_ASWKB:
                case ST_ASWKT:
                case ST_BUFFER:
                case ST_CENTROID:
                case ST_CONTAINS:
                case ST_CROSSES:
                case ST_DIFFERENCE:
                case ST_DIMENSION:
                case ST_DISJOINT:
                case ST_DISTANCE:
                case ST_ENDPOINT:
                case ST_ENVELOPE:
                case ST_EQUALS:
                case ST_EXTERIORRING:
                case ST_GEOMCOLLFROMTEXT:
                case ST_GEOMCOLLFROMTXT:
                case ST_GEOMCOLLFROMWKB:
                case ST_GEOMETRYCOLLECTIONFROMTEXT:
                case ST_GEOMETRYCOLLECTIONFROMWKB:
                case ST_GEOMETRYFROMTEXT:
                case ST_GEOMETRYFROMWKB:
                case ST_GEOMETRYN:
                case ST_GEOMETRYTYPE:
                case ST_GEOMFROMTEXT:
                case ST_GEOMFROMWKB:
                case ST_INTERIORRINGN:
                case ST_INTERSECTION:
                case ST_INTERSECTS:
                case ST_ISCLOSED:
                case ST_ISEMPTY:
                case ST_ISSIMPLE:
                case ST_LINEFROMTEXT:
                case ST_LINEFROMWKB:
                case ST_LINESTRINGFROMTEXT:
                case ST_LINESTRINGFROMWKB:
                case ST_NUMGEOMETRIES:
                case ST_NUMINTERIORRING:
                case ST_NUMINTERIORRINGS:
                case ST_NUMPOINTS:
                case ST_OVERLAPS:
                case ST_POINTFROMTEXT:
                case ST_POINTFROMWKB:
                case ST_POINTN:
                case ST_POLYFROMTEXT:
                case ST_POLYFROMWKB:
                case ST_POLYGONFROMTEXT:
                case ST_POLYGONFROMWKB:
                case ST_SRID:
                case ST_STARTPOINT:
                case ST_SYMDIFFERENCE:
                case ST_TOUCHES:
                case ST_UNION:
                case ST_WITHIN:
                case ST_X:
                case ST_Y:
                case SUBDATE:
                case SUBSTRING_INDEX:
                case SUBTIME:
                case SYSTEM_USER:
                case TAN:
                case TIMEDIFF:
                case TIMESTAMPADD:
                case TIMESTAMPDIFF:
                case TIME_FORMAT:
                case TIME_TO_SEC:
                case TOUCHES:
                case TO_BASE64:
                case TO_DAYS:
                case TO_SECONDS:
                case UCASE:
                case UNCOMPRESS:
                case UNCOMPRESSED_LENGTH:
                case UNHEX:
                case UNIX_TIMESTAMP:
                case UPDATEXML:
                case UPPER:
                case UUID:
                case UUID_SHORT:
                case VALIDATE_PASSWORD_STRENGTH:
                case VERSION:
                case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
                case WEEKDAY:
                case WEEKOFYEAR:
                case WEIGHT_STRING:
                case WITHIN:
                case YEARWEEK:
                case Y_FUNCTION:
                case X_FUNCTION:
                case CHARSET_REVERSE_QOUTE_STRING:
                case STRING_LITERAL:
                case ID:
                case REVERSE_QUOTE_ID:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 3055; uid();
                    }
                    break;
                case LOCAL_ID:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 3056; Match(LOCAL_ID);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class LockClauseContext : ParserRuleContext
    {
        public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
        public ITerminalNode UPDATE() { return GetToken(MySqlParser.UPDATE, 0); }
        public ITerminalNode LOCK() { return GetToken(MySqlParser.LOCK, 0); }
        public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
        public ITerminalNode SHARE() { return GetToken(MySqlParser.SHARE, 0); }
        public ITerminalNode MODE() { return GetToken(MySqlParser.MODE, 0); }
        public LockClauseContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_lockClause; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterLockClause(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitLockClause(this);
        }
    }

    [RuleVersion(0)]
    public LockClauseContext lockClause()
    {
        LockClauseContext _localctx = new LockClauseContext(Context, State);
        EnterRule(_localctx, 188, RULE_lockClause);
        try
        {
            State = 3065;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case FOR:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 3059; Match(FOR);
                        State = 3060; Match(UPDATE);
                    }
                    break;
                case LOCK:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 3061; Match(LOCK);
                        State = 3062; Match(IN);
                        State = 3063; Match(SHARE);
                        State = 3064; Match(MODE);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class SingleDeleteStatementContext : ParserRuleContext
    {
        public IToken priority;
        public ITerminalNode DELETE() { return GetToken(MySqlParser.DELETE, 0); }
        public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
        public TableNameContext tableName()
        {
            return GetRuleContext<TableNameContext>(0);
        }
        public ITerminalNode QUICK() { return GetToken(MySqlParser.QUICK, 0); }
        public ITerminalNode IGNORE() { return GetToken(MySqlParser.IGNORE, 0); }
        public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public UidListContext uidList()
        {
            return GetRuleContext<UidListContext>(0);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public ITerminalNode WHERE() { return GetToken(MySqlParser.WHERE, 0); }
        public ExpressionContext expression()
        {
            return GetRuleContext<ExpressionContext>(0);
        }
        public OrderByClauseContext orderByClause()
        {
            return GetRuleContext<OrderByClauseContext>(0);
        }
        public ITerminalNode LIMIT() { return GetToken(MySqlParser.LIMIT, 0); }
        public LimitClauseAtomContext limitClauseAtom()
        {
            return GetRuleContext<LimitClauseAtomContext>(0);
        }
        public ITerminalNode LOW_PRIORITY() { return GetToken(MySqlParser.LOW_PRIORITY, 0); }
        public SingleDeleteStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_singleDeleteStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterSingleDeleteStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitSingleDeleteStatement(this);
        }
    }

    [RuleVersion(0)]
    public SingleDeleteStatementContext singleDeleteStatement()
    {
        SingleDeleteStatementContext _localctx = new SingleDeleteStatementContext(Context, State);
        EnterRule(_localctx, 190, RULE_singleDeleteStatement);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 3067; Match(DELETE);
                State = 3069;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == LOW_PRIORITY)
                {
                    {
                        State = 3068; _localctx.priority = Match(LOW_PRIORITY);
                    }
                }

                State = 3072;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == QUICK)
                {
                    {
                        State = 3071; Match(QUICK);
                    }
                }

                State = 3075;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == IGNORE)
                {
                    {
                        State = 3074; Match(IGNORE);
                    }
                }

                State = 3077; Match(FROM);
                State = 3078; tableName();
                State = 3084;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == PARTITION)
                {
                    {
                        State = 3079; Match(PARTITION);
                        State = 3080; Match(LR_BRACKET);
                        State = 3081; uidList();
                        State = 3082; Match(RR_BRACKET);
                    }
                }

                State = 3088;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == WHERE)
                {
                    {
                        State = 3086; Match(WHERE);
                        State = 3087; expression(0);
                    }
                }

                State = 3091;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == ORDER)
                {
                    {
                        State = 3090; orderByClause();
                    }
                }

                State = 3095;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == LIMIT)
                {
                    {
                        State = 3093; Match(LIMIT);
                        State = 3094; limitClauseAtom();
                    }
                }

            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class MultipleDeleteStatementContext : ParserRuleContext
    {
        public IToken priority;
        public ITerminalNode DELETE() { return GetToken(MySqlParser.DELETE, 0); }
        public TableNameContext[] tableName()
        {
            return GetRuleContexts<TableNameContext>();
        }
        public TableNameContext tableName(int i)
        {
            return GetRuleContext<TableNameContext>(i);
        }
        public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
        public TableSourcesContext tableSources()
        {
            return GetRuleContext<TableSourcesContext>(0);
        }
        public ITerminalNode USING() { return GetToken(MySqlParser.USING, 0); }
        public ITerminalNode QUICK() { return GetToken(MySqlParser.QUICK, 0); }
        public ITerminalNode IGNORE() { return GetToken(MySqlParser.IGNORE, 0); }
        public ITerminalNode WHERE() { return GetToken(MySqlParser.WHERE, 0); }
        public ExpressionContext expression()
        {
            return GetRuleContext<ExpressionContext>(0);
        }
        public ITerminalNode LOW_PRIORITY() { return GetToken(MySqlParser.LOW_PRIORITY, 0); }
        public ITerminalNode[] DOT() { return GetTokens(MySqlParser.DOT); }
        public ITerminalNode DOT(int i)
        {
            return GetToken(MySqlParser.DOT, i);
        }
        public ITerminalNode[] STAR() { return GetTokens(MySqlParser.STAR); }
        public ITerminalNode STAR(int i)
        {
            return GetToken(MySqlParser.STAR, i);
        }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public MultipleDeleteStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_multipleDeleteStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterMultipleDeleteStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitMultipleDeleteStatement(this);
        }
    }

    [RuleVersion(0)]
    public MultipleDeleteStatementContext multipleDeleteStatement()
    {
        MultipleDeleteStatementContext _localctx = new MultipleDeleteStatementContext(Context, State);
        EnterRule(_localctx, 192, RULE_multipleDeleteStatement);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 3097; Match(DELETE);
                State = 3099;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == LOW_PRIORITY)
                {
                    {
                        State = 3098; _localctx.priority = Match(LOW_PRIORITY);
                    }
                }

                State = 3102;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 425, Context))
                {
                    case 1:
                        {
                            State = 3101; Match(QUICK);
                        }
                        break;
                }
                State = 3105;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == IGNORE)
                {
                    {
                        State = 3104; Match(IGNORE);
                    }
                }

                State = 3146;
                ErrorHandler.Sync(this);
                switch (TokenStream.LA(1))
                {
                    case CURRENT:
                    case DATABASE:
                    case DIAGNOSTICS:
                    case LEFT:
                    case NUMBER:
                    case RIGHT:
                    case STACKED:
                    case DATE:
                    case TIME:
                    case TIMESTAMP:
                    case DATETIME:
                    case YEAR:
                    case TEXT:
                    case ENUM:
                    case SERIAL:
                    case COUNT:
                    case POSITION:
                    case ACCOUNT:
                    case ACTION:
                    case AFTER:
                    case AGGREGATE:
                    case ALGORITHM:
                    case ANY:
                    case AT:
                    case AUTHORS:
                    case AUTOCOMMIT:
                    case AUTOEXTEND_SIZE:
                    case AUTO_INCREMENT:
                    case AVG_ROW_LENGTH:
                    case BEGIN:
                    case BINLOG:
                    case BIT:
                    case BLOCK:
                    case BOOL:
                    case BOOLEAN:
                    case BTREE:
                    case CACHE:
                    case CASCADED:
                    case CHAIN:
                    case CHANGED:
                    case CHANNEL:
                    case CHECKSUM:
                    case PAGE_CHECKSUM:
                    case CIPHER:
                    case CLASS_ORIGIN:
                    case CLIENT:
                    case CLOSE:
                    case COALESCE:
                    case CODE:
                    case COLUMNS:
                    case COLUMN_FORMAT:
                    case COLUMN_NAME:
                    case COMMENT:
                    case COMMIT:
                    case COMPACT:
                    case COMPLETION:
                    case COMPRESSED:
                    case COMPRESSION:
                    case CONCURRENT:
                    case CONNECTION:
                    case CONSISTENT:
                    case CONSTRAINT_CATALOG:
                    case CONSTRAINT_SCHEMA:
                    case CONSTRAINT_NAME:
                    case CONTAINS:
                    case CONTEXT:
                    case CONTRIBUTORS:
                    case COPY:
                    case CPU:
                    case CURSOR_NAME:
                    case DATA:
                    case DATAFILE:
                    case DEALLOCATE:
                    case DEFAULT_AUTH:
                    case DEFINER:
                    case DELAY_KEY_WRITE:
                    case DES_KEY_FILE:
                    case DIRECTORY:
                    case DISABLE:
                    case DISCARD:
                    case DISK:
                    case DO:
                    case DUMPFILE:
                    case DUPLICATE:
                    case DYNAMIC:
                    case ENABLE:
                    case ENCRYPTION:
                    case END:
                    case ENDS:
                    case ENGINE:
                    case ENGINES:
                    case ERROR:
                    case ERRORS:
                    case ESCAPE:
                    case EVEN:
                    case EVENT:
                    case EVENTS:
                    case EVERY:
                    case EXCHANGE:
                    case EXCLUSIVE:
                    case EXPIRE:
                    case EXPORT:
                    case EXTENDED:
                    case EXTENT_SIZE:
                    case FAST:
                    case FAULTS:
                    case FIELDS:
                    case FILE_BLOCK_SIZE:
                    case FILTER:
                    case FIRST:
                    case FIXED:
                    case FLUSH:
                    case FOLLOWS:
                    case FOUND:
                    case FULL:
                    case FUNCTION:
                    case GENERAL:
                    case GLOBAL:
                    case GRANTS:
                    case GROUP_REPLICATION:
                    case HANDLER:
                    case HASH:
                    case HELP:
                    case HOST:
                    case HOSTS:
                    case IDENTIFIED:
                    case IGNORE_SERVER_IDS:
                    case IMPORT:
                    case INDEXES:
                    case INITIAL_SIZE:
                    case INPLACE:
                    case INSERT_METHOD:
                    case INSTALL:
                    case INSTANCE:
                    case INVISIBLE:
                    case INVOKER:
                    case IO:
                    case IO_THREAD:
                    case IPC:
                    case ISOLATION:
                    case ISSUER:
                    case JSON:
                    case KEY_BLOCK_SIZE:
                    case LANGUAGE:
                    case LAST:
                    case LEAVES:
                    case LESS:
                    case LEVEL:
                    case LIST:
                    case LOCAL:
                    case LOGFILE:
                    case LOGS:
                    case MASTER:
                    case MASTER_AUTO_POSITION:
                    case MASTER_CONNECT_RETRY:
                    case MASTER_DELAY:
                    case MASTER_HEARTBEAT_PERIOD:
                    case MASTER_HOST:
                    case MASTER_LOG_FILE:
                    case MASTER_LOG_POS:
                    case MASTER_PASSWORD:
                    case MASTER_PORT:
                    case MASTER_RETRY_COUNT:
                    case MASTER_SSL:
                    case MASTER_SSL_CA:
                    case MASTER_SSL_CAPATH:
                    case MASTER_SSL_CERT:
                    case MASTER_SSL_CIPHER:
                    case MASTER_SSL_CRL:
                    case MASTER_SSL_CRLPATH:
                    case MASTER_SSL_KEY:
                    case MASTER_TLS_VERSION:
                    case MASTER_USER:
                    case MAX_CONNECTIONS_PER_HOUR:
                    case MAX_QUERIES_PER_HOUR:
                    case MAX_ROWS:
                    case MAX_SIZE:
                    case MAX_UPDATES_PER_HOUR:
                    case MAX_USER_CONNECTIONS:
                    case MEDIUM:
                    case MERGE:
                    case MESSAGE_TEXT:
                    case MID:
                    case MIGRATE:
                    case MIN_ROWS:
                    case MODE:
                    case MODIFY:
                    case MUTEX:
                    case MYSQL:
                    case MYSQL_ERRNO:
                    case NAME:
                    case NAMES:
                    case NCHAR:
                    case NEVER:
                    case NEXT:
                    case NO:
                    case NODEGROUP:
                    case NONE:
                    case OFFLINE:
                    case OFFSET:
                    case OJ:
                    case OLD_PASSWORD:
                    case ONE:
                    case ONLINE:
                    case ONLY:
                    case OPEN:
                    case OPTIMIZER_COSTS:
                    case OPTIONS:
                    case OWNER:
                    case PACK_KEYS:
                    case PAGE:
                    case PARSER:
                    case PARTIAL:
                    case PARTITIONING:
                    case PARTITIONS:
                    case PASSWORD:
                    case PHASE:
                    case PLUGIN:
                    case PLUGIN_DIR:
                    case PLUGINS:
                    case PORT:
                    case PRECEDES:
                    case PREPARE:
                    case PRESERVE:
                    case PREV:
                    case PROCESSLIST:
                    case PROFILE:
                    case PROFILES:
                    case PROXY:
                    case QUERY:
                    case QUICK:
                    case REBUILD:
                    case RECOVER:
                    case REDO_BUFFER_SIZE:
                    case REDUNDANT:
                    case RELAY:
                    case RELAY_LOG_FILE:
                    case RELAY_LOG_POS:
                    case RELAYLOG:
                    case REMOVE:
                    case REORGANIZE:
                    case REPAIR:
                    case REPLICATE_DO_DB:
                    case REPLICATE_DO_TABLE:
                    case REPLICATE_IGNORE_DB:
                    case REPLICATE_IGNORE_TABLE:
                    case REPLICATE_REWRITE_DB:
                    case REPLICATE_WILD_DO_TABLE:
                    case REPLICATE_WILD_IGNORE_TABLE:
                    case REPLICATION:
                    case RESET:
                    case RESUME:
                    case RETURNED_SQLSTATE:
                    case RETURNS:
                    case ROLLBACK:
                    case ROLLUP:
                    case ROTATE:
                    case ROW:
                    case ROWS:
                    case ROW_FORMAT:
                    case SAVEPOINT:
                    case SCHEDULE:
                    case SECURITY:
                    case SERVER:
                    case SESSION:
                    case SHARE:
                    case SHARED:
                    case SIGNED:
                    case SIMPLE:
                    case SLAVE:
                    case SLOW:
                    case SNAPSHOT:
                    case SOCKET:
                    case SOME:
                    case SONAME:
                    case SOUNDS:
                    case SOURCE:
                    case SQL_AFTER_GTIDS:
                    case SQL_AFTER_MTS_GAPS:
                    case SQL_BEFORE_GTIDS:
                    case SQL_BUFFER_RESULT:
                    case SQL_CACHE:
                    case SQL_NO_CACHE:
                    case SQL_THREAD:
                    case START:
                    case STARTS:
                    case STATS_AUTO_RECALC:
                    case STATS_PERSISTENT:
                    case STATS_SAMPLE_PAGES:
                    case STATUS:
                    case STOP:
                    case STORAGE:
                    case STRING:
                    case SUBCLASS_ORIGIN:
                    case SUBJECT:
                    case SUBPARTITION:
                    case SUBPARTITIONS:
                    case SUSPEND:
                    case SWAPS:
                    case SWITCHES:
                    case TABLE_NAME:
                    case TABLESPACE:
                    case TEMPORARY:
                    case TEMPTABLE:
                    case THAN:
                    case TRADITIONAL:
                    case TRANSACTION:
                    case TRIGGERS:
                    case TRUNCATE:
                    case UNDEFINED:
                    case UNDOFILE:
                    case UNDO_BUFFER_SIZE:
                    case UNINSTALL:
                    case UNKNOWN:
                    case UNTIL:
                    case UPGRADE:
                    case USER:
                    case USE_FRM:
                    case USER_RESOURCES:
                    case VALIDATION:
                    case VALUE:
                    case VARIABLES:
                    case VIEW:
                    case VISIBLE:
                    case WAIT:
                    case WARNINGS:
                    case WITHOUT:
                    case WORK:
                    case WRAPPER:
                    case X509:
                    case XA:
                    case XML:
                    case INTERNAL:
                    case QUARTER:
                    case MONTH:
                    case DAY:
                    case HOUR:
                    case MINUTE:
                    case WEEK:
                    case SECOND:
                    case MICROSECOND:
                    case TABLES:
                    case ROUTINE:
                    case EXECUTE:
                    case FILE:
                    case PROCESS:
                    case RELOAD:
                    case SHUTDOWN:
                    case SUPER:
                    case PRIVILEGES:
                    case SESSION_VARIABLES_ADMIN:
                    case ARMSCII8:
                    case ASCII:
                    case BIG5:
                    case CP1250:
                    case CP1251:
                    case CP1256:
                    case CP1257:
                    case CP850:
                    case CP852:
                    case CP866:
                    case CP932:
                    case DEC8:
                    case EUCJPMS:
                    case EUCKR:
                    case GB2312:
                    case GBK:
                    case GEOSTD8:
                    case GREEK:
                    case HEBREW:
                    case HP8:
                    case KEYBCS2:
                    case KOI8R:
                    case KOI8U:
                    case LATIN1:
                    case LATIN2:
                    case LATIN5:
                    case LATIN7:
                    case MACCE:
                    case MACROMAN:
                    case SJIS:
                    case SWE7:
                    case TIS620:
                    case UCS2:
                    case UJIS:
                    case UTF16:
                    case UTF16LE:
                    case UTF32:
                    case UTF8:
                    case UTF8MB3:
                    case UTF8MB4:
                    case ARCHIVE:
                    case BLACKHOLE:
                    case CSV:
                    case FEDERATED:
                    case INNODB:
                    case MEMORY:
                    case MRG_MYISAM:
                    case MYISAM:
                    case NDB:
                    case NDBCLUSTER:
                    case PERFORMANCE_SCHEMA:
                    case TOKUDB:
                    case REPEATABLE:
                    case COMMITTED:
                    case UNCOMMITTED:
                    case SERIALIZABLE:
                    case GEOMETRYCOLLECTION:
                    case LINESTRING:
                    case MULTILINESTRING:
                    case MULTIPOINT:
                    case MULTIPOLYGON:
                    case POINT:
                    case POLYGON:
                    case ABS:
                    case ACOS:
                    case ADDDATE:
                    case ADDTIME:
                    case AES_DECRYPT:
                    case AES_ENCRYPT:
                    case AREA:
                    case ASBINARY:
                    case ASIN:
                    case ASTEXT:
                    case ASWKB:
                    case ASWKT:
                    case ASYMMETRIC_DECRYPT:
                    case ASYMMETRIC_DERIVE:
                    case ASYMMETRIC_ENCRYPT:
                    case ASYMMETRIC_SIGN:
                    case ASYMMETRIC_VERIFY:
                    case ATAN:
                    case ATAN2:
                    case BENCHMARK:
                    case BIN:
                    case BIT_COUNT:
                    case BIT_LENGTH:
                    case BUFFER:
                    case CATALOG_NAME:
                    case CEIL:
                    case CEILING:
                    case CENTROID:
                    case CHARACTER_LENGTH:
                    case CHARSET:
                    case CHAR_LENGTH:
                    case COERCIBILITY:
                    case COLLATION:
                    case COMPRESS:
                    case CONCAT:
                    case CONCAT_WS:
                    case CONNECTION_ID:
                    case CONV:
                    case CONVERT_TZ:
                    case COS:
                    case COT:
                    case CRC32:
                    case CREATE_ASYMMETRIC_PRIV_KEY:
                    case CREATE_ASYMMETRIC_PUB_KEY:
                    case CREATE_DH_PARAMETERS:
                    case CREATE_DIGEST:
                    case CROSSES:
                    case DATEDIFF:
                    case DATE_FORMAT:
                    case DAYNAME:
                    case DAYOFMONTH:
                    case DAYOFWEEK:
                    case DAYOFYEAR:
                    case DECODE:
                    case DEGREES:
                    case DES_DECRYPT:
                    case DES_ENCRYPT:
                    case DIMENSION:
                    case DISJOINT:
                    case ELT:
                    case ENCODE:
                    case ENCRYPT:
                    case ENDPOINT:
                    case ENVELOPE:
                    case EQUALS:
                    case EXP:
                    case EXPORT_SET:
                    case EXTERIORRING:
                    case EXTRACTVALUE:
                    case FIELD:
                    case FIND_IN_SET:
                    case FLOOR:
                    case FORMAT:
                    case FOUND_ROWS:
                    case FROM_BASE64:
                    case FROM_DAYS:
                    case FROM_UNIXTIME:
                    case GEOMCOLLFROMTEXT:
                    case GEOMCOLLFROMWKB:
                    case GEOMETRYCOLLECTIONFROMTEXT:
                    case GEOMETRYCOLLECTIONFROMWKB:
                    case GEOMETRYFROMTEXT:
                    case GEOMETRYFROMWKB:
                    case GEOMETRYN:
                    case GEOMETRYTYPE:
                    case GEOMFROMTEXT:
                    case GEOMFROMWKB:
                    case GET_FORMAT:
                    case GET_LOCK:
                    case GLENGTH:
                    case GREATEST:
                    case GTID_SUBSET:
                    case GTID_SUBTRACT:
                    case HEX:
                    case IFNULL:
                    case INET6_ATON:
                    case INET6_NTOA:
                    case INET_ATON:
                    case INET_NTOA:
                    case INSTR:
                    case INTERIORRINGN:
                    case INTERSECTS:
                    case ISCLOSED:
                    case ISEMPTY:
                    case ISNULL:
                    case ISSIMPLE:
                    case IS_FREE_LOCK:
                    case IS_IPV4:
                    case IS_IPV4_COMPAT:
                    case IS_IPV4_MAPPED:
                    case IS_IPV6:
                    case IS_USED_LOCK:
                    case LAST_INSERT_ID:
                    case LCASE:
                    case LEAST:
                    case LENGTH:
                    case LINEFROMTEXT:
                    case LINEFROMWKB:
                    case LINESTRINGFROMTEXT:
                    case LINESTRINGFROMWKB:
                    case LN:
                    case LOAD_FILE:
                    case LOCATE:
                    case LOG:
                    case LOG10:
                    case LOG2:
                    case LOWER:
                    case LPAD:
                    case LTRIM:
                    case MAKEDATE:
                    case MAKETIME:
                    case MAKE_SET:
                    case MASTER_POS_WAIT:
                    case MBRCONTAINS:
                    case MBRDISJOINT:
                    case MBREQUAL:
                    case MBRINTERSECTS:
                    case MBROVERLAPS:
                    case MBRTOUCHES:
                    case MBRWITHIN:
                    case MD5:
                    case MLINEFROMTEXT:
                    case MLINEFROMWKB:
                    case MONTHNAME:
                    case MPOINTFROMTEXT:
                    case MPOINTFROMWKB:
                    case MPOLYFROMTEXT:
                    case MPOLYFROMWKB:
                    case MULTILINESTRINGFROMTEXT:
                    case MULTILINESTRINGFROMWKB:
                    case MULTIPOINTFROMTEXT:
                    case MULTIPOINTFROMWKB:
                    case MULTIPOLYGONFROMTEXT:
                    case MULTIPOLYGONFROMWKB:
                    case NAME_CONST:
                    case NULLIF:
                    case NUMGEOMETRIES:
                    case NUMINTERIORRINGS:
                    case NUMPOINTS:
                    case OCT:
                    case OCTET_LENGTH:
                    case ORD:
                    case OVERLAPS:
                    case PERIOD_ADD:
                    case PERIOD_DIFF:
                    case PI:
                    case POINTFROMTEXT:
                    case POINTFROMWKB:
                    case POINTN:
                    case POLYFROMTEXT:
                    case POLYFROMWKB:
                    case POLYGONFROMTEXT:
                    case POLYGONFROMWKB:
                    case POW:
                    case POWER:
                    case QUOTE:
                    case RADIANS:
                    case RAND:
                    case RANDOM_BYTES:
                    case RELEASE_LOCK:
                    case REVERSE:
                    case ROUND:
                    case ROW_COUNT:
                    case RPAD:
                    case RTRIM:
                    case SEC_TO_TIME:
                    case SESSION_USER:
                    case SHA:
                    case SHA1:
                    case SHA2:
                    case SCHEMA_NAME:
                    case SIGN:
                    case SIN:
                    case SLEEP:
                    case SOUNDEX:
                    case SQL_THREAD_WAIT_AFTER_GTIDS:
                    case SQRT:
                    case SRID:
                    case STARTPOINT:
                    case STRCMP:
                    case STR_TO_DATE:
                    case ST_AREA:
                    case ST_ASBINARY:
                    case ST_ASTEXT:
                    case ST_ASWKB:
                    case ST_ASWKT:
                    case ST_BUFFER:
                    case ST_CENTROID:
                    case ST_CONTAINS:
                    case ST_CROSSES:
                    case ST_DIFFERENCE:
                    case ST_DIMENSION:
                    case ST_DISJOINT:
                    case ST_DISTANCE:
                    case ST_ENDPOINT:
                    case ST_ENVELOPE:
                    case ST_EQUALS:
                    case ST_EXTERIORRING:
                    case ST_GEOMCOLLFROMTEXT:
                    case ST_GEOMCOLLFROMTXT:
                    case ST_GEOMCOLLFROMWKB:
                    case ST_GEOMETRYCOLLECTIONFROMTEXT:
                    case ST_GEOMETRYCOLLECTIONFROMWKB:
                    case ST_GEOMETRYFROMTEXT:
                    case ST_GEOMETRYFROMWKB:
                    case ST_GEOMETRYN:
                    case ST_GEOMETRYTYPE:
                    case ST_GEOMFROMTEXT:
                    case ST_GEOMFROMWKB:
                    case ST_INTERIORRINGN:
                    case ST_INTERSECTION:
                    case ST_INTERSECTS:
                    case ST_ISCLOSED:
                    case ST_ISEMPTY:
                    case ST_ISSIMPLE:
                    case ST_LINEFROMTEXT:
                    case ST_LINEFROMWKB:
                    case ST_LINESTRINGFROMTEXT:
                    case ST_LINESTRINGFROMWKB:
                    case ST_NUMGEOMETRIES:
                    case ST_NUMINTERIORRING:
                    case ST_NUMINTERIORRINGS:
                    case ST_NUMPOINTS:
                    case ST_OVERLAPS:
                    case ST_POINTFROMTEXT:
                    case ST_POINTFROMWKB:
                    case ST_POINTN:
                    case ST_POLYFROMTEXT:
                    case ST_POLYFROMWKB:
                    case ST_POLYGONFROMTEXT:
                    case ST_POLYGONFROMWKB:
                    case ST_SRID:
                    case ST_STARTPOINT:
                    case ST_SYMDIFFERENCE:
                    case ST_TOUCHES:
                    case ST_UNION:
                    case ST_WITHIN:
                    case ST_X:
                    case ST_Y:
                    case SUBDATE:
                    case SUBSTRING_INDEX:
                    case SUBTIME:
                    case SYSTEM_USER:
                    case TAN:
                    case TIMEDIFF:
                    case TIMESTAMPADD:
                    case TIMESTAMPDIFF:
                    case TIME_FORMAT:
                    case TIME_TO_SEC:
                    case TOUCHES:
                    case TO_BASE64:
                    case TO_DAYS:
                    case TO_SECONDS:
                    case UCASE:
                    case UNCOMPRESS:
                    case UNCOMPRESSED_LENGTH:
                    case UNHEX:
                    case UNIX_TIMESTAMP:
                    case UPDATEXML:
                    case UPPER:
                    case UUID:
                    case UUID_SHORT:
                    case VALIDATE_PASSWORD_STRENGTH:
                    case VERSION:
                    case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
                    case WEEKDAY:
                    case WEEKOFYEAR:
                    case WEIGHT_STRING:
                    case WITHIN:
                    case YEARWEEK:
                    case Y_FUNCTION:
                    case X_FUNCTION:
                    case CHARSET_REVERSE_QOUTE_STRING:
                    case STRING_LITERAL:
                    case ID:
                    case REVERSE_QUOTE_ID:
                        {
                            State = 3107; tableName();
                            State = 3110;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            if (_la == DOT)
                            {
                                {
                                    State = 3108; Match(DOT);
                                    State = 3109; Match(STAR);
                                }
                            }

                            State = 3120;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            while (_la == COMMA)
                            {
                                {
                                    {
                                        State = 3112; Match(COMMA);
                                        State = 3113; tableName();
                                        State = 3116;
                                        ErrorHandler.Sync(this);
                                        _la = TokenStream.LA(1);
                                        if (_la == DOT)
                                        {
                                            {
                                                State = 3114; Match(DOT);
                                                State = 3115; Match(STAR);
                                            }
                                        }

                                    }
                                }
                                State = 3122;
                                ErrorHandler.Sync(this);
                                _la = TokenStream.LA(1);
                            }
                            State = 3123; Match(FROM);
                            State = 3124; tableSources();
                        }
                        break;
                    case FROM:
                        {
                            State = 3126; Match(FROM);
                            State = 3127; tableName();
                            State = 3130;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            if (_la == DOT)
                            {
                                {
                                    State = 3128; Match(DOT);
                                    State = 3129; Match(STAR);
                                }
                            }

                            State = 3140;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            while (_la == COMMA)
                            {
                                {
                                    {
                                        State = 3132; Match(COMMA);
                                        State = 3133; tableName();
                                        State = 3136;
                                        ErrorHandler.Sync(this);
                                        _la = TokenStream.LA(1);
                                        if (_la == DOT)
                                        {
                                            {
                                                State = 3134; Match(DOT);
                                                State = 3135; Match(STAR);
                                            }
                                        }

                                    }
                                }
                                State = 3142;
                                ErrorHandler.Sync(this);
                                _la = TokenStream.LA(1);
                            }
                            State = 3143; Match(USING);
                            State = 3144; tableSources();
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
                State = 3150;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == WHERE)
                {
                    {
                        State = 3148; Match(WHERE);
                        State = 3149; expression(0);
                    }
                }

            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class HandlerOpenStatementContext : ParserRuleContext
    {
        public ITerminalNode HANDLER() { return GetToken(MySqlParser.HANDLER, 0); }
        public TableNameContext tableName()
        {
            return GetRuleContext<TableNameContext>(0);
        }
        public ITerminalNode OPEN() { return GetToken(MySqlParser.OPEN, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
        public HandlerOpenStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_handlerOpenStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterHandlerOpenStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitHandlerOpenStatement(this);
        }
    }

    [RuleVersion(0)]
    public HandlerOpenStatementContext handlerOpenStatement()
    {
        HandlerOpenStatementContext _localctx = new HandlerOpenStatementContext(Context, State);
        EnterRule(_localctx, 194, RULE_handlerOpenStatement);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 3152; Match(HANDLER);
                State = 3153; tableName();
                State = 3154; Match(OPEN);
                State = 3159;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 436, Context))
                {
                    case 1:
                        {
                            State = 3156;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            if (_la == AS)
                            {
                                {
                                    State = 3155; Match(AS);
                                }
                            }

                            State = 3158; uid();
                        }
                        break;
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class HandlerReadIndexStatementContext : ParserRuleContext
    {
        public UidContext index;
        public IToken moveOrder;
        public ITerminalNode HANDLER() { return GetToken(MySqlParser.HANDLER, 0); }
        public TableNameContext tableName()
        {
            return GetRuleContext<TableNameContext>(0);
        }
        public ITerminalNode READ() { return GetToken(MySqlParser.READ, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public ComparisonOperatorContext comparisonOperator()
        {
            return GetRuleContext<ComparisonOperatorContext>(0);
        }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public ConstantsContext constants()
        {
            return GetRuleContext<ConstantsContext>(0);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public ITerminalNode WHERE() { return GetToken(MySqlParser.WHERE, 0); }
        public ExpressionContext expression()
        {
            return GetRuleContext<ExpressionContext>(0);
        }
        public ITerminalNode LIMIT() { return GetToken(MySqlParser.LIMIT, 0); }
        public LimitClauseAtomContext limitClauseAtom()
        {
            return GetRuleContext<LimitClauseAtomContext>(0);
        }
        public ITerminalNode FIRST() { return GetToken(MySqlParser.FIRST, 0); }
        public ITerminalNode NEXT() { return GetToken(MySqlParser.NEXT, 0); }
        public ITerminalNode PREV() { return GetToken(MySqlParser.PREV, 0); }
        public ITerminalNode LAST() { return GetToken(MySqlParser.LAST, 0); }
        public HandlerReadIndexStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_handlerReadIndexStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterHandlerReadIndexStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitHandlerReadIndexStatement(this);
        }
    }

    [RuleVersion(0)]
    public HandlerReadIndexStatementContext handlerReadIndexStatement()
    {
        HandlerReadIndexStatementContext _localctx = new HandlerReadIndexStatementContext(Context, State);
        EnterRule(_localctx, 196, RULE_handlerReadIndexStatement);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 3161; Match(HANDLER);
                State = 3162; tableName();
                State = 3163; Match(READ);
                State = 3164; _localctx.index = uid();
                State = 3171;
                ErrorHandler.Sync(this);
                switch (TokenStream.LA(1))
                {
                    case EQUAL_SYMBOL:
                    case GREATER_SYMBOL:
                    case LESS_SYMBOL:
                    case EXCLAMATION_SYMBOL:
                        {
                            State = 3165; comparisonOperator();
                            State = 3166; Match(LR_BRACKET);
                            State = 3167; constants();
                            State = 3168; Match(RR_BRACKET);
                        }
                        break;
                    case FIRST:
                    case LAST:
                    case NEXT:
                    case PREV:
                        {
                            State = 3170;
                            _localctx.moveOrder = TokenStream.LT(1);
                            _la = TokenStream.LA(1);
                            if (!(_la == FIRST || _la == LAST || _la == NEXT || _la == PREV))
                            {
                                _localctx.moveOrder = ErrorHandler.RecoverInline(this);
                            }
                            else
                            {
                                ErrorHandler.ReportMatch(this);
                                Consume();
                            }
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
                State = 3175;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == WHERE)
                {
                    {
                        State = 3173; Match(WHERE);
                        State = 3174; expression(0);
                    }
                }

                State = 3179;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == LIMIT)
                {
                    {
                        State = 3177; Match(LIMIT);
                        State = 3178; limitClauseAtom();
                    }
                }

            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class HandlerReadStatementContext : ParserRuleContext
    {
        public IToken moveOrder;
        public ITerminalNode HANDLER() { return GetToken(MySqlParser.HANDLER, 0); }
        public TableNameContext tableName()
        {
            return GetRuleContext<TableNameContext>(0);
        }
        public ITerminalNode READ() { return GetToken(MySqlParser.READ, 0); }
        public ITerminalNode FIRST() { return GetToken(MySqlParser.FIRST, 0); }
        public ITerminalNode NEXT() { return GetToken(MySqlParser.NEXT, 0); }
        public ITerminalNode WHERE() { return GetToken(MySqlParser.WHERE, 0); }
        public ExpressionContext expression()
        {
            return GetRuleContext<ExpressionContext>(0);
        }
        public ITerminalNode LIMIT() { return GetToken(MySqlParser.LIMIT, 0); }
        public LimitClauseAtomContext limitClauseAtom()
        {
            return GetRuleContext<LimitClauseAtomContext>(0);
        }
        public HandlerReadStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_handlerReadStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterHandlerReadStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitHandlerReadStatement(this);
        }
    }

    [RuleVersion(0)]
    public HandlerReadStatementContext handlerReadStatement()
    {
        HandlerReadStatementContext _localctx = new HandlerReadStatementContext(Context, State);
        EnterRule(_localctx, 198, RULE_handlerReadStatement);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 3181; Match(HANDLER);
                State = 3182; tableName();
                State = 3183; Match(READ);
                State = 3184;
                _localctx.moveOrder = TokenStream.LT(1);
                _la = TokenStream.LA(1);
                if (!(_la == FIRST || _la == NEXT))
                {
                    _localctx.moveOrder = ErrorHandler.RecoverInline(this);
                }
                else
                {
                    ErrorHandler.ReportMatch(this);
                    Consume();
                }
                State = 3187;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == WHERE)
                {
                    {
                        State = 3185; Match(WHERE);
                        State = 3186; expression(0);
                    }
                }

                State = 3191;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == LIMIT)
                {
                    {
                        State = 3189; Match(LIMIT);
                        State = 3190; limitClauseAtom();
                    }
                }

            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class HandlerCloseStatementContext : ParserRuleContext
    {
        public ITerminalNode HANDLER() { return GetToken(MySqlParser.HANDLER, 0); }
        public TableNameContext tableName()
        {
            return GetRuleContext<TableNameContext>(0);
        }
        public ITerminalNode CLOSE() { return GetToken(MySqlParser.CLOSE, 0); }
        public HandlerCloseStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_handlerCloseStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterHandlerCloseStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitHandlerCloseStatement(this);
        }
    }

    [RuleVersion(0)]
    public HandlerCloseStatementContext handlerCloseStatement()
    {
        HandlerCloseStatementContext _localctx = new HandlerCloseStatementContext(Context, State);
        EnterRule(_localctx, 200, RULE_handlerCloseStatement);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 3193; Match(HANDLER);
                State = 3194; tableName();
                State = 3195; Match(CLOSE);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class SingleUpdateStatementContext : ParserRuleContext
    {
        public IToken priority;
        public ITerminalNode UPDATE() { return GetToken(MySqlParser.UPDATE, 0); }
        public TableNameContext tableName()
        {
            return GetRuleContext<TableNameContext>(0);
        }
        public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
        public UpdatedElementContext[] updatedElement()
        {
            return GetRuleContexts<UpdatedElementContext>();
        }
        public UpdatedElementContext updatedElement(int i)
        {
            return GetRuleContext<UpdatedElementContext>(i);
        }
        public ITerminalNode IGNORE() { return GetToken(MySqlParser.IGNORE, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public ITerminalNode WHERE() { return GetToken(MySqlParser.WHERE, 0); }
        public ExpressionContext expression()
        {
            return GetRuleContext<ExpressionContext>(0);
        }
        public OrderByClauseContext orderByClause()
        {
            return GetRuleContext<OrderByClauseContext>(0);
        }
        public LimitClauseContext limitClause()
        {
            return GetRuleContext<LimitClauseContext>(0);
        }
        public ITerminalNode LOW_PRIORITY() { return GetToken(MySqlParser.LOW_PRIORITY, 0); }
        public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
        public SingleUpdateStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_singleUpdateStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterSingleUpdateStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitSingleUpdateStatement(this);
        }
    }

    [RuleVersion(0)]
    public SingleUpdateStatementContext singleUpdateStatement()
    {
        SingleUpdateStatementContext _localctx = new SingleUpdateStatementContext(Context, State);
        EnterRule(_localctx, 202, RULE_singleUpdateStatement);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 3197; Match(UPDATE);
                State = 3199;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == LOW_PRIORITY)
                {
                    {
                        State = 3198; _localctx.priority = Match(LOW_PRIORITY);
                    }
                }

                State = 3202;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == IGNORE)
                {
                    {
                        State = 3201; Match(IGNORE);
                    }
                }

                State = 3204; tableName();
                State = 3209;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS))) != 0) || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (LEFT - 87)) | (1L << (NUMBER - 87)) | (1L << (RIGHT - 87)))) != 0) || ((((_la - 151)) & ~0x3f) == 0 && ((1L << (_la - 151)) & ((1L << (STACKED - 151)) | (1L << (DATE - 151)) | (1L << (TIME - 151)) | (1L << (TIMESTAMP - 151)) | (1L << (DATETIME - 151)) | (1L << (YEAR - 151)) | (1L << (TEXT - 151)) | (1L << (ENUM - 151)) | (1L << (SERIAL - 151)))) != 0) || ((((_la - 228)) & ~0x3f) == 0 && ((1L << (_la - 228)) & ((1L << (COUNT - 228)) | (1L << (POSITION - 228)) | (1L << (ACCOUNT - 228)) | (1L << (ACTION - 228)) | (1L << (AFTER - 228)) | (1L << (AGGREGATE - 228)) | (1L << (ALGORITHM - 228)) | (1L << (ANY - 228)) | (1L << (AT - 228)) | (1L << (AUTHORS - 228)) | (1L << (AUTOCOMMIT - 228)) | (1L << (AUTOEXTEND_SIZE - 228)) | (1L << (AUTO_INCREMENT - 228)) | (1L << (AVG_ROW_LENGTH - 228)) | (1L << (BEGIN - 228)) | (1L << (BINLOG - 228)) | (1L << (BIT - 228)) | (1L << (BLOCK - 228)) | (1L << (BOOL - 228)) | (1L << (BOOLEAN - 228)) | (1L << (BTREE - 228)) | (1L << (CACHE - 228)) | (1L << (CASCADED - 228)) | (1L << (CHAIN - 228)) | (1L << (CHANGED - 228)) | (1L << (CHANNEL - 228)) | (1L << (CHECKSUM - 228)) | (1L << (PAGE_CHECKSUM - 228)) | (1L << (CIPHER - 228)) | (1L << (CLASS_ORIGIN - 228)) | (1L << (CLIENT - 228)) | (1L << (CLOSE - 228)) | (1L << (COALESCE - 228)) | (1L << (CODE - 228)) | (1L << (COLUMNS - 228)))) != 0) || ((((_la - 292)) & ~0x3f) == 0 && ((1L << (_la - 292)) & ((1L << (COLUMN_FORMAT - 292)) | (1L << (COLUMN_NAME - 292)) | (1L << (COMMENT - 292)) | (1L << (COMMIT - 292)) | (1L << (COMPACT - 292)) | (1L << (COMPLETION - 292)) | (1L << (COMPRESSED - 292)) | (1L << (COMPRESSION - 292)) | (1L << (CONCURRENT - 292)) | (1L << (CONNECTION - 292)) | (1L << (CONSISTENT - 292)) | (1L << (CONSTRAINT_CATALOG - 292)) | (1L << (CONSTRAINT_SCHEMA - 292)) | (1L << (CONSTRAINT_NAME - 292)) | (1L << (CONTAINS - 292)) | (1L << (CONTEXT - 292)) | (1L << (CONTRIBUTORS - 292)) | (1L << (COPY - 292)) | (1L << (CPU - 292)) | (1L << (CURSOR_NAME - 292)) | (1L << (DATA - 292)) | (1L << (DATAFILE - 292)) | (1L << (DEALLOCATE - 292)) | (1L << (DEFAULT_AUTH - 292)) | (1L << (DEFINER - 292)) | (1L << (DELAY_KEY_WRITE - 292)) | (1L << (DES_KEY_FILE - 292)) | (1L << (DIRECTORY - 292)) | (1L << (DISABLE - 292)) | (1L << (DISCARD - 292)) | (1L << (DISK - 292)) | (1L << (DO - 292)) | (1L << (DUMPFILE - 292)) | (1L << (DUPLICATE - 292)) | (1L << (DYNAMIC - 292)) | (1L << (ENABLE - 292)) | (1L << (ENCRYPTION - 292)) | (1L << (END - 292)) | (1L << (ENDS - 292)) | (1L << (ENGINE - 292)) | (1L << (ENGINES - 292)) | (1L << (ERROR - 292)) | (1L << (ERRORS - 292)) | (1L << (ESCAPE - 292)) | (1L << (EVEN - 292)) | (1L << (EVENT - 292)) | (1L << (EVENTS - 292)) | (1L << (EVERY - 292)) | (1L << (EXCHANGE - 292)) | (1L << (EXCLUSIVE - 292)) | (1L << (EXPIRE - 292)) | (1L << (EXPORT - 292)) | (1L << (EXTENDED - 292)) | (1L << (EXTENT_SIZE - 292)) | (1L << (FAST - 292)) | (1L << (FAULTS - 292)) | (1L << (FIELDS - 292)) | (1L << (FILE_BLOCK_SIZE - 292)) | (1L << (FILTER - 292)) | (1L << (FIRST - 292)) | (1L << (FIXED - 292)) | (1L << (FLUSH - 292)) | (1L << (FOLLOWS - 292)) | (1L << (FOUND - 292)))) != 0) || ((((_la - 356)) & ~0x3f) == 0 && ((1L << (_la - 356)) & ((1L << (FULL - 356)) | (1L << (FUNCTION - 356)) | (1L << (GENERAL - 356)) | (1L << (GLOBAL - 356)) | (1L << (GRANTS - 356)) | (1L << (GROUP_REPLICATION - 356)) | (1L << (HANDLER - 356)) | (1L << (HASH - 356)) | (1L << (HELP - 356)) | (1L << (HOST - 356)) | (1L << (HOSTS - 356)) | (1L << (IDENTIFIED - 356)) | (1L << (IGNORE_SERVER_IDS - 356)) | (1L << (IMPORT - 356)) | (1L << (INDEXES - 356)) | (1L << (INITIAL_SIZE - 356)) | (1L << (INPLACE - 356)) | (1L << (INSERT_METHOD - 356)) | (1L << (INSTALL - 356)) | (1L << (INSTANCE - 356)) | (1L << (INVISIBLE - 356)) | (1L << (INVOKER - 356)) | (1L << (IO - 356)) | (1L << (IO_THREAD - 356)) | (1L << (IPC - 356)) | (1L << (ISOLATION - 356)) | (1L << (ISSUER - 356)) | (1L << (JSON - 356)) | (1L << (KEY_BLOCK_SIZE - 356)) | (1L << (LANGUAGE - 356)) | (1L << (LAST - 356)) | (1L << (LEAVES - 356)) | (1L << (LESS - 356)) | (1L << (LEVEL - 356)) | (1L << (LIST - 356)) | (1L << (LOCAL - 356)) | (1L << (LOGFILE - 356)) | (1L << (LOGS - 356)) | (1L << (MASTER - 356)) | (1L << (MASTER_AUTO_POSITION - 356)) | (1L << (MASTER_CONNECT_RETRY - 356)) | (1L << (MASTER_DELAY - 356)) | (1L << (MASTER_HEARTBEAT_PERIOD - 356)) | (1L << (MASTER_HOST - 356)) | (1L << (MASTER_LOG_FILE - 356)) | (1L << (MASTER_LOG_POS - 356)) | (1L << (MASTER_PASSWORD - 356)) | (1L << (MASTER_PORT - 356)) | (1L << (MASTER_RETRY_COUNT - 356)) | (1L << (MASTER_SSL - 356)) | (1L << (MASTER_SSL_CA - 356)) | (1L << (MASTER_SSL_CAPATH - 356)) | (1L << (MASTER_SSL_CERT - 356)) | (1L << (MASTER_SSL_CIPHER - 356)) | (1L << (MASTER_SSL_CRL - 356)) | (1L << (MASTER_SSL_CRLPATH - 356)) | (1L << (MASTER_SSL_KEY - 356)) | (1L << (MASTER_TLS_VERSION - 356)) | (1L << (MASTER_USER - 356)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 356)) | (1L << (MAX_QUERIES_PER_HOUR - 356)) | (1L << (MAX_ROWS - 356)) | (1L << (MAX_SIZE - 356)) | (1L << (MAX_UPDATES_PER_HOUR - 356)))) != 0) || ((((_la - 420)) & ~0x3f) == 0 && ((1L << (_la - 420)) & ((1L << (MAX_USER_CONNECTIONS - 420)) | (1L << (MEDIUM - 420)) | (1L << (MERGE - 420)) | (1L << (MESSAGE_TEXT - 420)) | (1L << (MID - 420)) | (1L << (MIGRATE - 420)) | (1L << (MIN_ROWS - 420)) | (1L << (MODE - 420)) | (1L << (MODIFY - 420)) | (1L << (MUTEX - 420)) | (1L << (MYSQL - 420)) | (1L << (MYSQL_ERRNO - 420)) | (1L << (NAME - 420)) | (1L << (NAMES - 420)) | (1L << (NCHAR - 420)) | (1L << (NEVER - 420)) | (1L << (NEXT - 420)) | (1L << (NO - 420)) | (1L << (NODEGROUP - 420)) | (1L << (NONE - 420)) | (1L << (OFFLINE - 420)) | (1L << (OFFSET - 420)) | (1L << (OJ - 420)) | (1L << (OLD_PASSWORD - 420)) | (1L << (ONE - 420)) | (1L << (ONLINE - 420)) | (1L << (ONLY - 420)) | (1L << (OPEN - 420)) | (1L << (OPTIMIZER_COSTS - 420)) | (1L << (OPTIONS - 420)) | (1L << (OWNER - 420)) | (1L << (PACK_KEYS - 420)) | (1L << (PAGE - 420)) | (1L << (PARSER - 420)) | (1L << (PARTIAL - 420)) | (1L << (PARTITIONING - 420)) | (1L << (PARTITIONS - 420)) | (1L << (PASSWORD - 420)) | (1L << (PHASE - 420)) | (1L << (PLUGIN - 420)) | (1L << (PLUGIN_DIR - 420)) | (1L << (PLUGINS - 420)) | (1L << (PORT - 420)) | (1L << (PRECEDES - 420)) | (1L << (PREPARE - 420)) | (1L << (PRESERVE - 420)) | (1L << (PREV - 420)) | (1L << (PROCESSLIST - 420)) | (1L << (PROFILE - 420)) | (1L << (PROFILES - 420)) | (1L << (PROXY - 420)) | (1L << (QUERY - 420)) | (1L << (QUICK - 420)) | (1L << (REBUILD - 420)) | (1L << (RECOVER - 420)) | (1L << (REDO_BUFFER_SIZE - 420)) | (1L << (REDUNDANT - 420)) | (1L << (RELAY - 420)) | (1L << (RELAY_LOG_FILE - 420)) | (1L << (RELAY_LOG_POS - 420)) | (1L << (RELAYLOG - 420)) | (1L << (REMOVE - 420)) | (1L << (REORGANIZE - 420)) | (1L << (REPAIR - 420)))) != 0) || ((((_la - 484)) & ~0x3f) == 0 && ((1L << (_la - 484)) & ((1L << (REPLICATE_DO_DB - 484)) | (1L << (REPLICATE_DO_TABLE - 484)) | (1L << (REPLICATE_IGNORE_DB - 484)) | (1L << (REPLICATE_IGNORE_TABLE - 484)) | (1L << (REPLICATE_REWRITE_DB - 484)) | (1L << (REPLICATE_WILD_DO_TABLE - 484)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 484)) | (1L << (REPLICATION - 484)) | (1L << (RESET - 484)) | (1L << (RESUME - 484)) | (1L << (RETURNED_SQLSTATE - 484)) | (1L << (RETURNS - 484)) | (1L << (ROLLBACK - 484)) | (1L << (ROLLUP - 484)) | (1L << (ROTATE - 484)) | (1L << (ROW - 484)) | (1L << (ROWS - 484)) | (1L << (ROW_FORMAT - 484)) | (1L << (SAVEPOINT - 484)) | (1L << (SCHEDULE - 484)) | (1L << (SECURITY - 484)) | (1L << (SERVER - 484)) | (1L << (SESSION - 484)) | (1L << (SHARE - 484)) | (1L << (SHARED - 484)) | (1L << (SIGNED - 484)) | (1L << (SIMPLE - 484)) | (1L << (SLAVE - 484)) | (1L << (SLOW - 484)) | (1L << (SNAPSHOT - 484)) | (1L << (SOCKET - 484)) | (1L << (SOME - 484)) | (1L << (SONAME - 484)) | (1L << (SOUNDS - 484)) | (1L << (SOURCE - 484)) | (1L << (SQL_AFTER_GTIDS - 484)) | (1L << (SQL_AFTER_MTS_GAPS - 484)) | (1L << (SQL_BEFORE_GTIDS - 484)) | (1L << (SQL_BUFFER_RESULT - 484)) | (1L << (SQL_CACHE - 484)) | (1L << (SQL_NO_CACHE - 484)) | (1L << (SQL_THREAD - 484)) | (1L << (START - 484)) | (1L << (STARTS - 484)) | (1L << (STATS_AUTO_RECALC - 484)) | (1L << (STATS_PERSISTENT - 484)) | (1L << (STATS_SAMPLE_PAGES - 484)) | (1L << (STATUS - 484)) | (1L << (STOP - 484)) | (1L << (STORAGE - 484)) | (1L << (STRING - 484)) | (1L << (SUBCLASS_ORIGIN - 484)) | (1L << (SUBJECT - 484)) | (1L << (SUBPARTITION - 484)) | (1L << (SUBPARTITIONS - 484)) | (1L << (SUSPEND - 484)) | (1L << (SWAPS - 484)) | (1L << (SWITCHES - 484)) | (1L << (TABLE_NAME - 484)) | (1L << (TABLESPACE - 484)) | (1L << (TEMPORARY - 484)) | (1L << (TEMPTABLE - 484)) | (1L << (THAN - 484)))) != 0) || ((((_la - 548)) & ~0x3f) == 0 && ((1L << (_la - 548)) & ((1L << (TRADITIONAL - 548)) | (1L << (TRANSACTION - 548)) | (1L << (TRIGGERS - 548)) | (1L << (TRUNCATE - 548)) | (1L << (UNDEFINED - 548)) | (1L << (UNDOFILE - 548)) | (1L << (UNDO_BUFFER_SIZE - 548)) | (1L << (UNINSTALL - 548)) | (1L << (UNKNOWN - 548)) | (1L << (UNTIL - 548)) | (1L << (UPGRADE - 548)) | (1L << (USER - 548)) | (1L << (USE_FRM - 548)) | (1L << (USER_RESOURCES - 548)) | (1L << (VALIDATION - 548)) | (1L << (VALUE - 548)) | (1L << (VARIABLES - 548)) | (1L << (VIEW - 548)) | (1L << (VISIBLE - 548)) | (1L << (WAIT - 548)) | (1L << (WARNINGS - 548)) | (1L << (WITHOUT - 548)) | (1L << (WORK - 548)) | (1L << (WRAPPER - 548)) | (1L << (X509 - 548)) | (1L << (XA - 548)) | (1L << (XML - 548)) | (1L << (INTERNAL - 548)) | (1L << (QUARTER - 548)) | (1L << (MONTH - 548)) | (1L << (DAY - 548)) | (1L << (HOUR - 548)) | (1L << (MINUTE - 548)) | (1L << (WEEK - 548)) | (1L << (SECOND - 548)) | (1L << (MICROSECOND - 548)) | (1L << (TABLES - 548)) | (1L << (ROUTINE - 548)) | (1L << (EXECUTE - 548)) | (1L << (FILE - 548)) | (1L << (PROCESS - 548)) | (1L << (RELOAD - 548)) | (1L << (SHUTDOWN - 548)) | (1L << (SUPER - 548)) | (1L << (PRIVILEGES - 548)) | (1L << (SESSION_VARIABLES_ADMIN - 548)) | (1L << (ARMSCII8 - 548)) | (1L << (ASCII - 548)) | (1L << (BIG5 - 548)) | (1L << (CP1250 - 548)) | (1L << (CP1251 - 548)) | (1L << (CP1256 - 548)) | (1L << (CP1257 - 548)) | (1L << (CP850 - 548)) | (1L << (CP852 - 548)) | (1L << (CP866 - 548)) | (1L << (CP932 - 548)) | (1L << (DEC8 - 548)) | (1L << (EUCJPMS - 548)))) != 0) || ((((_la - 612)) & ~0x3f) == 0 && ((1L << (_la - 612)) & ((1L << (EUCKR - 612)) | (1L << (GB2312 - 612)) | (1L << (GBK - 612)) | (1L << (GEOSTD8 - 612)) | (1L << (GREEK - 612)) | (1L << (HEBREW - 612)) | (1L << (HP8 - 612)) | (1L << (KEYBCS2 - 612)) | (1L << (KOI8R - 612)) | (1L << (KOI8U - 612)) | (1L << (LATIN1 - 612)) | (1L << (LATIN2 - 612)) | (1L << (LATIN5 - 612)) | (1L << (LATIN7 - 612)) | (1L << (MACCE - 612)) | (1L << (MACROMAN - 612)) | (1L << (SJIS - 612)) | (1L << (SWE7 - 612)) | (1L << (TIS620 - 612)) | (1L << (UCS2 - 612)) | (1L << (UJIS - 612)) | (1L << (UTF16 - 612)) | (1L << (UTF16LE - 612)) | (1L << (UTF32 - 612)) | (1L << (UTF8 - 612)) | (1L << (UTF8MB3 - 612)) | (1L << (UTF8MB4 - 612)) | (1L << (ARCHIVE - 612)) | (1L << (BLACKHOLE - 612)) | (1L << (CSV - 612)) | (1L << (FEDERATED - 612)) | (1L << (INNODB - 612)) | (1L << (MEMORY - 612)) | (1L << (MRG_MYISAM - 612)) | (1L << (MYISAM - 612)) | (1L << (NDB - 612)) | (1L << (NDBCLUSTER - 612)) | (1L << (PERFORMANCE_SCHEMA - 612)) | (1L << (TOKUDB - 612)) | (1L << (REPEATABLE - 612)) | (1L << (COMMITTED - 612)) | (1L << (UNCOMMITTED - 612)) | (1L << (SERIALIZABLE - 612)) | (1L << (GEOMETRYCOLLECTION - 612)) | (1L << (LINESTRING - 612)) | (1L << (MULTILINESTRING - 612)) | (1L << (MULTIPOINT - 612)) | (1L << (MULTIPOLYGON - 612)) | (1L << (POINT - 612)) | (1L << (POLYGON - 612)) | (1L << (ABS - 612)) | (1L << (ACOS - 612)) | (1L << (ADDDATE - 612)) | (1L << (ADDTIME - 612)) | (1L << (AES_DECRYPT - 612)) | (1L << (AES_ENCRYPT - 612)) | (1L << (AREA - 612)) | (1L << (ASBINARY - 612)) | (1L << (ASIN - 612)) | (1L << (ASTEXT - 612)) | (1L << (ASWKB - 612)) | (1L << (ASWKT - 612)))) != 0) || ((((_la - 676)) & ~0x3f) == 0 && ((1L << (_la - 676)) & ((1L << (ASYMMETRIC_DECRYPT - 676)) | (1L << (ASYMMETRIC_DERIVE - 676)) | (1L << (ASYMMETRIC_ENCRYPT - 676)) | (1L << (ASYMMETRIC_SIGN - 676)) | (1L << (ASYMMETRIC_VERIFY - 676)) | (1L << (ATAN - 676)) | (1L << (ATAN2 - 676)) | (1L << (BENCHMARK - 676)) | (1L << (BIN - 676)) | (1L << (BIT_COUNT - 676)) | (1L << (BIT_LENGTH - 676)) | (1L << (BUFFER - 676)) | (1L << (CATALOG_NAME - 676)) | (1L << (CEIL - 676)) | (1L << (CEILING - 676)) | (1L << (CENTROID - 676)) | (1L << (CHARACTER_LENGTH - 676)) | (1L << (CHARSET - 676)) | (1L << (CHAR_LENGTH - 676)) | (1L << (COERCIBILITY - 676)) | (1L << (COLLATION - 676)) | (1L << (COMPRESS - 676)) | (1L << (CONCAT - 676)) | (1L << (CONCAT_WS - 676)) | (1L << (CONNECTION_ID - 676)) | (1L << (CONV - 676)) | (1L << (CONVERT_TZ - 676)) | (1L << (COS - 676)) | (1L << (COT - 676)) | (1L << (CRC32 - 676)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 676)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 676)) | (1L << (CREATE_DH_PARAMETERS - 676)) | (1L << (CREATE_DIGEST - 676)) | (1L << (CROSSES - 676)) | (1L << (DATEDIFF - 676)) | (1L << (DATE_FORMAT - 676)) | (1L << (DAYNAME - 676)) | (1L << (DAYOFMONTH - 676)) | (1L << (DAYOFWEEK - 676)) | (1L << (DAYOFYEAR - 676)) | (1L << (DECODE - 676)) | (1L << (DEGREES - 676)) | (1L << (DES_DECRYPT - 676)) | (1L << (DES_ENCRYPT - 676)) | (1L << (DIMENSION - 676)) | (1L << (DISJOINT - 676)) | (1L << (ELT - 676)) | (1L << (ENCODE - 676)) | (1L << (ENCRYPT - 676)) | (1L << (ENDPOINT - 676)) | (1L << (ENVELOPE - 676)) | (1L << (EQUALS - 676)) | (1L << (EXP - 676)) | (1L << (EXPORT_SET - 676)) | (1L << (EXTERIORRING - 676)) | (1L << (EXTRACTVALUE - 676)) | (1L << (FIELD - 676)) | (1L << (FIND_IN_SET - 676)) | (1L << (FLOOR - 676)) | (1L << (FORMAT - 676)) | (1L << (FOUND_ROWS - 676)) | (1L << (FROM_BASE64 - 676)) | (1L << (FROM_DAYS - 676)))) != 0) || ((((_la - 740)) & ~0x3f) == 0 && ((1L << (_la - 740)) & ((1L << (FROM_UNIXTIME - 740)) | (1L << (GEOMCOLLFROMTEXT - 740)) | (1L << (GEOMCOLLFROMWKB - 740)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 740)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 740)) | (1L << (GEOMETRYFROMTEXT - 740)) | (1L << (GEOMETRYFROMWKB - 740)) | (1L << (GEOMETRYN - 740)) | (1L << (GEOMETRYTYPE - 740)) | (1L << (GEOMFROMTEXT - 740)) | (1L << (GEOMFROMWKB - 740)) | (1L << (GET_FORMAT - 740)) | (1L << (GET_LOCK - 740)) | (1L << (GLENGTH - 740)) | (1L << (GREATEST - 740)) | (1L << (GTID_SUBSET - 740)) | (1L << (GTID_SUBTRACT - 740)) | (1L << (HEX - 740)) | (1L << (IFNULL - 740)) | (1L << (INET6_ATON - 740)) | (1L << (INET6_NTOA - 740)) | (1L << (INET_ATON - 740)) | (1L << (INET_NTOA - 740)) | (1L << (INSTR - 740)) | (1L << (INTERIORRINGN - 740)) | (1L << (INTERSECTS - 740)) | (1L << (ISCLOSED - 740)) | (1L << (ISEMPTY - 740)) | (1L << (ISNULL - 740)) | (1L << (ISSIMPLE - 740)) | (1L << (IS_FREE_LOCK - 740)) | (1L << (IS_IPV4 - 740)) | (1L << (IS_IPV4_COMPAT - 740)) | (1L << (IS_IPV4_MAPPED - 740)) | (1L << (IS_IPV6 - 740)) | (1L << (IS_USED_LOCK - 740)) | (1L << (LAST_INSERT_ID - 740)) | (1L << (LCASE - 740)) | (1L << (LEAST - 740)) | (1L << (LENGTH - 740)) | (1L << (LINEFROMTEXT - 740)) | (1L << (LINEFROMWKB - 740)) | (1L << (LINESTRINGFROMTEXT - 740)) | (1L << (LINESTRINGFROMWKB - 740)) | (1L << (LN - 740)) | (1L << (LOAD_FILE - 740)) | (1L << (LOCATE - 740)) | (1L << (LOG - 740)) | (1L << (LOG10 - 740)) | (1L << (LOG2 - 740)) | (1L << (LOWER - 740)) | (1L << (LPAD - 740)) | (1L << (LTRIM - 740)) | (1L << (MAKEDATE - 740)) | (1L << (MAKETIME - 740)) | (1L << (MAKE_SET - 740)) | (1L << (MASTER_POS_WAIT - 740)) | (1L << (MBRCONTAINS - 740)) | (1L << (MBRDISJOINT - 740)) | (1L << (MBREQUAL - 740)) | (1L << (MBRINTERSECTS - 740)) | (1L << (MBROVERLAPS - 740)) | (1L << (MBRTOUCHES - 740)) | (1L << (MBRWITHIN - 740)))) != 0) || ((((_la - 804)) & ~0x3f) == 0 && ((1L << (_la - 804)) & ((1L << (MD5 - 804)) | (1L << (MLINEFROMTEXT - 804)) | (1L << (MLINEFROMWKB - 804)) | (1L << (MONTHNAME - 804)) | (1L << (MPOINTFROMTEXT - 804)) | (1L << (MPOINTFROMWKB - 804)) | (1L << (MPOLYFROMTEXT - 804)) | (1L << (MPOLYFROMWKB - 804)) | (1L << (MULTILINESTRINGFROMTEXT - 804)) | (1L << (MULTILINESTRINGFROMWKB - 804)) | (1L << (MULTIPOINTFROMTEXT - 804)) | (1L << (MULTIPOINTFROMWKB - 804)) | (1L << (MULTIPOLYGONFROMTEXT - 804)) | (1L << (MULTIPOLYGONFROMWKB - 804)) | (1L << (NAME_CONST - 804)) | (1L << (NULLIF - 804)) | (1L << (NUMGEOMETRIES - 804)) | (1L << (NUMINTERIORRINGS - 804)) | (1L << (NUMPOINTS - 804)) | (1L << (OCT - 804)) | (1L << (OCTET_LENGTH - 804)) | (1L << (ORD - 804)) | (1L << (OVERLAPS - 804)) | (1L << (PERIOD_ADD - 804)) | (1L << (PERIOD_DIFF - 804)) | (1L << (PI - 804)) | (1L << (POINTFROMTEXT - 804)) | (1L << (POINTFROMWKB - 804)) | (1L << (POINTN - 804)) | (1L << (POLYFROMTEXT - 804)) | (1L << (POLYFROMWKB - 804)) | (1L << (POLYGONFROMTEXT - 804)) | (1L << (POLYGONFROMWKB - 804)) | (1L << (POW - 804)) | (1L << (POWER - 804)) | (1L << (QUOTE - 804)) | (1L << (RADIANS - 804)) | (1L << (RAND - 804)) | (1L << (RANDOM_BYTES - 804)) | (1L << (RELEASE_LOCK - 804)) | (1L << (REVERSE - 804)) | (1L << (ROUND - 804)) | (1L << (ROW_COUNT - 804)) | (1L << (RPAD - 804)) | (1L << (RTRIM - 804)) | (1L << (SEC_TO_TIME - 804)) | (1L << (SESSION_USER - 804)) | (1L << (SHA - 804)) | (1L << (SHA1 - 804)) | (1L << (SHA2 - 804)) | (1L << (SCHEMA_NAME - 804)) | (1L << (SIGN - 804)) | (1L << (SIN - 804)) | (1L << (SLEEP - 804)) | (1L << (SOUNDEX - 804)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 804)) | (1L << (SQRT - 804)) | (1L << (SRID - 804)) | (1L << (STARTPOINT - 804)) | (1L << (STRCMP - 804)) | (1L << (STR_TO_DATE - 804)) | (1L << (ST_AREA - 804)) | (1L << (ST_ASBINARY - 804)) | (1L << (ST_ASTEXT - 804)))) != 0) || ((((_la - 868)) & ~0x3f) == 0 && ((1L << (_la - 868)) & ((1L << (ST_ASWKB - 868)) | (1L << (ST_ASWKT - 868)) | (1L << (ST_BUFFER - 868)) | (1L << (ST_CENTROID - 868)) | (1L << (ST_CONTAINS - 868)) | (1L << (ST_CROSSES - 868)) | (1L << (ST_DIFFERENCE - 868)) | (1L << (ST_DIMENSION - 868)) | (1L << (ST_DISJOINT - 868)) | (1L << (ST_DISTANCE - 868)) | (1L << (ST_ENDPOINT - 868)) | (1L << (ST_ENVELOPE - 868)) | (1L << (ST_EQUALS - 868)) | (1L << (ST_EXTERIORRING - 868)) | (1L << (ST_GEOMCOLLFROMTEXT - 868)) | (1L << (ST_GEOMCOLLFROMTXT - 868)) | (1L << (ST_GEOMCOLLFROMWKB - 868)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 868)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 868)) | (1L << (ST_GEOMETRYFROMTEXT - 868)) | (1L << (ST_GEOMETRYFROMWKB - 868)) | (1L << (ST_GEOMETRYN - 868)) | (1L << (ST_GEOMETRYTYPE - 868)) | (1L << (ST_GEOMFROMTEXT - 868)) | (1L << (ST_GEOMFROMWKB - 868)) | (1L << (ST_INTERIORRINGN - 868)) | (1L << (ST_INTERSECTION - 868)) | (1L << (ST_INTERSECTS - 868)) | (1L << (ST_ISCLOSED - 868)) | (1L << (ST_ISEMPTY - 868)) | (1L << (ST_ISSIMPLE - 868)) | (1L << (ST_LINEFROMTEXT - 868)) | (1L << (ST_LINEFROMWKB - 868)) | (1L << (ST_LINESTRINGFROMTEXT - 868)) | (1L << (ST_LINESTRINGFROMWKB - 868)) | (1L << (ST_NUMGEOMETRIES - 868)) | (1L << (ST_NUMINTERIORRING - 868)) | (1L << (ST_NUMINTERIORRINGS - 868)) | (1L << (ST_NUMPOINTS - 868)) | (1L << (ST_OVERLAPS - 868)) | (1L << (ST_POINTFROMTEXT - 868)) | (1L << (ST_POINTFROMWKB - 868)) | (1L << (ST_POINTN - 868)) | (1L << (ST_POLYFROMTEXT - 868)) | (1L << (ST_POLYFROMWKB - 868)) | (1L << (ST_POLYGONFROMTEXT - 868)) | (1L << (ST_POLYGONFROMWKB - 868)) | (1L << (ST_SRID - 868)) | (1L << (ST_STARTPOINT - 868)) | (1L << (ST_SYMDIFFERENCE - 868)) | (1L << (ST_TOUCHES - 868)) | (1L << (ST_UNION - 868)) | (1L << (ST_WITHIN - 868)) | (1L << (ST_X - 868)) | (1L << (ST_Y - 868)) | (1L << (SUBDATE - 868)) | (1L << (SUBSTRING_INDEX - 868)) | (1L << (SUBTIME - 868)) | (1L << (SYSTEM_USER - 868)) | (1L << (TAN - 868)) | (1L << (TIMEDIFF - 868)) | (1L << (TIMESTAMPADD - 868)) | (1L << (TIMESTAMPDIFF - 868)) | (1L << (TIME_FORMAT - 868)))) != 0) || ((((_la - 932)) & ~0x3f) == 0 && ((1L << (_la - 932)) & ((1L << (TIME_TO_SEC - 932)) | (1L << (TOUCHES - 932)) | (1L << (TO_BASE64 - 932)) | (1L << (TO_DAYS - 932)) | (1L << (TO_SECONDS - 932)) | (1L << (UCASE - 932)) | (1L << (UNCOMPRESS - 932)) | (1L << (UNCOMPRESSED_LENGTH - 932)) | (1L << (UNHEX - 932)) | (1L << (UNIX_TIMESTAMP - 932)) | (1L << (UPDATEXML - 932)) | (1L << (UPPER - 932)) | (1L << (UUID - 932)) | (1L << (UUID_SHORT - 932)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 932)) | (1L << (VERSION - 932)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 932)) | (1L << (WEEKDAY - 932)) | (1L << (WEEKOFYEAR - 932)) | (1L << (WEIGHT_STRING - 932)) | (1L << (WITHIN - 932)) | (1L << (YEARWEEK - 932)) | (1L << (Y_FUNCTION - 932)) | (1L << (X_FUNCTION - 932)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 932)))) != 0) || ((((_la - 997)) & ~0x3f) == 0 && ((1L << (_la - 997)) & ((1L << (STRING_LITERAL - 997)) | (1L << (ID - 997)) | (1L << (REVERSE_QUOTE_ID - 997)))) != 0))
                {
                    {
                        State = 3206;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == AS)
                        {
                            {
                                State = 3205; Match(AS);
                            }
                        }

                        State = 3208; uid();
                    }
                }

                State = 3211; Match(SET);
                State = 3212; updatedElement();
                State = 3217;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while (_la == COMMA)
                {
                    {
                        {
                            State = 3213; Match(COMMA);
                            State = 3214; updatedElement();
                        }
                    }
                    State = 3219;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
                State = 3222;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == WHERE)
                {
                    {
                        State = 3220; Match(WHERE);
                        State = 3221; expression(0);
                    }
                }

                State = 3225;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == ORDER)
                {
                    {
                        State = 3224; orderByClause();
                    }
                }

                State = 3228;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == LIMIT)
                {
                    {
                        State = 3227; limitClause();
                    }
                }

            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class MultipleUpdateStatementContext : ParserRuleContext
    {
        public IToken priority;
        public ITerminalNode UPDATE() { return GetToken(MySqlParser.UPDATE, 0); }
        public TableSourcesContext tableSources()
        {
            return GetRuleContext<TableSourcesContext>(0);
        }
        public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
        public UpdatedElementContext[] updatedElement()
        {
            return GetRuleContexts<UpdatedElementContext>();
        }
        public UpdatedElementContext updatedElement(int i)
        {
            return GetRuleContext<UpdatedElementContext>(i);
        }
        public ITerminalNode IGNORE() { return GetToken(MySqlParser.IGNORE, 0); }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public ITerminalNode WHERE() { return GetToken(MySqlParser.WHERE, 0); }
        public ExpressionContext expression()
        {
            return GetRuleContext<ExpressionContext>(0);
        }
        public ITerminalNode LOW_PRIORITY() { return GetToken(MySqlParser.LOW_PRIORITY, 0); }
        public MultipleUpdateStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_multipleUpdateStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterMultipleUpdateStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitMultipleUpdateStatement(this);
        }
    }

    [RuleVersion(0)]
    public MultipleUpdateStatementContext multipleUpdateStatement()
    {
        MultipleUpdateStatementContext _localctx = new MultipleUpdateStatementContext(Context, State);
        EnterRule(_localctx, 204, RULE_multipleUpdateStatement);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 3230; Match(UPDATE);
                State = 3232;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == LOW_PRIORITY)
                {
                    {
                        State = 3231; _localctx.priority = Match(LOW_PRIORITY);
                    }
                }

                State = 3235;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == IGNORE)
                {
                    {
                        State = 3234; Match(IGNORE);
                    }
                }

                State = 3237; tableSources();
                State = 3238; Match(SET);
                State = 3239; updatedElement();
                State = 3244;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while (_la == COMMA)
                {
                    {
                        {
                            State = 3240; Match(COMMA);
                            State = 3241; updatedElement();
                        }
                    }
                    State = 3246;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
                State = 3249;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == WHERE)
                {
                    {
                        State = 3247; Match(WHERE);
                        State = 3248; expression(0);
                    }
                }

            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class OrderByClauseContext : ParserRuleContext
    {
        public ITerminalNode ORDER() { return GetToken(MySqlParser.ORDER, 0); }
        public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
        public OrderByExpressionContext[] orderByExpression()
        {
            return GetRuleContexts<OrderByExpressionContext>();
        }
        public OrderByExpressionContext orderByExpression(int i)
        {
            return GetRuleContext<OrderByExpressionContext>(i);
        }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public OrderByClauseContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_orderByClause; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterOrderByClause(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitOrderByClause(this);
        }
    }

    [RuleVersion(0)]
    public OrderByClauseContext orderByClause()
    {
        OrderByClauseContext _localctx = new OrderByClauseContext(Context, State);
        EnterRule(_localctx, 206, RULE_orderByClause);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 3251; Match(ORDER);
                State = 3252; Match(BY);
                State = 3253; orderByExpression();
                State = 3258;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while (_la == COMMA)
                {
                    {
                        {
                            State = 3254; Match(COMMA);
                            State = 3255; orderByExpression();
                        }
                    }
                    State = 3260;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class OrderByExpressionContext : ParserRuleContext
    {
        public IToken order;
        public ExpressionContext expression()
        {
            return GetRuleContext<ExpressionContext>(0);
        }
        public ITerminalNode ASC() { return GetToken(MySqlParser.ASC, 0); }
        public ITerminalNode DESC() { return GetToken(MySqlParser.DESC, 0); }
        public OrderByExpressionContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_orderByExpression; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterOrderByExpression(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitOrderByExpression(this);
        }
    }

    [RuleVersion(0)]
    public OrderByExpressionContext orderByExpression()
    {
        OrderByExpressionContext _localctx = new OrderByExpressionContext(Context, State);
        EnterRule(_localctx, 208, RULE_orderByExpression);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 3261; expression(0);
                State = 3263;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 455, Context))
                {
                    case 1:
                        {
                            State = 3262;
                            _localctx.order = TokenStream.LT(1);
                            _la = TokenStream.LA(1);
                            if (!(_la == ASC || _la == DESC))
                            {
                                _localctx.order = ErrorHandler.RecoverInline(this);
                            }
                            else
                            {
                                ErrorHandler.ReportMatch(this);
                                Consume();
                            }
                        }
                        break;
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class TableSourcesContext : ParserRuleContext
    {
        public TableSourceContext[] tableSource()
        {
            return GetRuleContexts<TableSourceContext>();
        }
        public TableSourceContext tableSource(int i)
        {
            return GetRuleContext<TableSourceContext>(i);
        }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public TableSourcesContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_tableSources; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterTableSources(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitTableSources(this);
        }
    }

    [RuleVersion(0)]
    public TableSourcesContext tableSources()
    {
        TableSourcesContext _localctx = new TableSourcesContext(Context, State);
        EnterRule(_localctx, 210, RULE_tableSources);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 3265; tableSource();
                State = 3270;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while (_la == COMMA)
                {
                    {
                        {
                            State = 3266; Match(COMMA);
                            State = 3267; tableSource();
                        }
                    }
                    State = 3272;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class TableSourceContext : ParserRuleContext
    {
        public TableSourceContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_tableSource; } }

        public TableSourceContext() { }
        public virtual void CopyFrom(TableSourceContext context)
        {
            base.CopyFrom(context);
        }
    }
    public partial class TableSourceNestedContext : TableSourceContext
    {
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public TableSourceItemContext tableSourceItem()
        {
            return GetRuleContext<TableSourceItemContext>(0);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public JoinPartContext[] joinPart()
        {
            return GetRuleContexts<JoinPartContext>();
        }
        public JoinPartContext joinPart(int i)
        {
            return GetRuleContext<JoinPartContext>(i);
        }
        public TableSourceNestedContext(TableSourceContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterTableSourceNested(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitTableSourceNested(this);
        }
    }
    public partial class TableSourceBaseContext : TableSourceContext
    {
        public TableSourceItemContext tableSourceItem()
        {
            return GetRuleContext<TableSourceItemContext>(0);
        }
        public JoinPartContext[] joinPart()
        {
            return GetRuleContexts<JoinPartContext>();
        }
        public JoinPartContext joinPart(int i)
        {
            return GetRuleContext<JoinPartContext>(i);
        }
        public TableSourceBaseContext(TableSourceContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterTableSourceBase(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitTableSourceBase(this);
        }
    }

    [RuleVersion(0)]
    public TableSourceContext tableSource()
    {
        TableSourceContext _localctx = new TableSourceContext(Context, State);
        EnterRule(_localctx, 212, RULE_tableSource);
        int _la;
        try
        {
            int _alt;
            State = 3290;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 459, Context))
            {
                case 1:
                    _localctx = new TableSourceBaseContext(_localctx);
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 3273; tableSourceItem();
                        State = 3277;
                        ErrorHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(TokenStream, 457, Context);
                        while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                        {
                            if (_alt == 1)
                            {
                                {
                                    {
                                        State = 3274; joinPart();
                                    }
                                }
                            }
                            State = 3279;
                            ErrorHandler.Sync(this);
                            _alt = Interpreter.AdaptivePredict(TokenStream, 457, Context);
                        }
                    }
                    break;
                case 2:
                    _localctx = new TableSourceNestedContext(_localctx);
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 3280; Match(LR_BRACKET);
                        State = 3281; tableSourceItem();
                        State = 3285;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        while (((((_la - 31)) & ~0x3f) == 0 && ((1L << (_la - 31)) & ((1L << (CROSS - 31)) | (1L << (INNER - 31)) | (1L << (JOIN - 31)) | (1L << (LEFT - 31)))) != 0) || ((((_la - 101)) & ~0x3f) == 0 && ((1L << (_la - 101)) & ((1L << (NATURAL - 101)) | (1L << (RIGHT - 101)) | (1L << (STRAIGHT_JOIN - 101)))) != 0))
                        {
                            {
                                {
                                    State = 3282; joinPart();
                                }
                            }
                            State = 3287;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                        }
                        State = 3288; Match(RR_BRACKET);
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class TableSourceItemContext : ParserRuleContext
    {
        public TableSourceItemContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_tableSourceItem; } }

        public TableSourceItemContext() { }
        public virtual void CopyFrom(TableSourceItemContext context)
        {
            base.CopyFrom(context);
        }
    }
    public partial class SubqueryTableItemContext : TableSourceItemContext
    {
        public SelectStatementContext parenthesisSubquery;
        public UidContext alias;
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public SelectStatementContext selectStatement()
        {
            return GetRuleContext<SelectStatementContext>(0);
        }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
        public SubqueryTableItemContext(TableSourceItemContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterSubqueryTableItem(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitSubqueryTableItem(this);
        }
    }
    public partial class AtomTableItemContext : TableSourceItemContext
    {
        public UidContext alias;
        public TableNameContext tableName()
        {
            return GetRuleContext<TableNameContext>(0);
        }
        public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public UidListContext uidList()
        {
            return GetRuleContext<UidListContext>(0);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public IndexHintContext[] indexHint()
        {
            return GetRuleContexts<IndexHintContext>();
        }
        public IndexHintContext indexHint(int i)
        {
            return GetRuleContext<IndexHintContext>(i);
        }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public AtomTableItemContext(TableSourceItemContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAtomTableItem(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAtomTableItem(this);
        }
    }
    public partial class TableSourcesItemContext : TableSourceItemContext
    {
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public TableSourcesContext tableSources()
        {
            return GetRuleContext<TableSourcesContext>(0);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public TableSourcesItemContext(TableSourceItemContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterTableSourcesItem(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitTableSourcesItem(this);
        }
    }

    [RuleVersion(0)]
    public TableSourceItemContext tableSourceItem()
    {
        TableSourceItemContext _localctx = new TableSourceItemContext(Context, State);
        EnterRule(_localctx, 214, RULE_tableSourceItem);
        int _la;
        try
        {
            int _alt;
            State = 3332;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 467, Context))
            {
                case 1:
                    _localctx = new AtomTableItemContext(_localctx);
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 3292; tableName();
                        State = 3298;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == PARTITION)
                        {
                            {
                                State = 3293; Match(PARTITION);
                                State = 3294; Match(LR_BRACKET);
                                State = 3295; uidList();
                                State = 3296; Match(RR_BRACKET);
                            }
                        }

                        State = 3304;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 462, Context))
                        {
                            case 1:
                                {
                                    State = 3301;
                                    ErrorHandler.Sync(this);
                                    _la = TokenStream.LA(1);
                                    if (_la == AS)
                                    {
                                        {
                                            State = 3300; Match(AS);
                                        }
                                    }

                                    State = 3303; ((AtomTableItemContext)_localctx).alias = uid();
                                }
                                break;
                        }
                        State = 3314;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 464, Context))
                        {
                            case 1:
                                {
                                    State = 3306; indexHint();
                                    State = 3311;
                                    ErrorHandler.Sync(this);
                                    _alt = Interpreter.AdaptivePredict(TokenStream, 463, Context);
                                    while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                                    {
                                        if (_alt == 1)
                                        {
                                            {
                                                {
                                                    State = 3307; Match(COMMA);
                                                    State = 3308; indexHint();
                                                }
                                            }
                                        }
                                        State = 3313;
                                        ErrorHandler.Sync(this);
                                        _alt = Interpreter.AdaptivePredict(TokenStream, 463, Context);
                                    }
                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    _localctx = new SubqueryTableItemContext(_localctx);
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 3321;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 465, Context))
                        {
                            case 1:
                                {
                                    State = 3316; selectStatement();
                                }
                                break;
                            case 2:
                                {
                                    State = 3317; Match(LR_BRACKET);
                                    State = 3318; ((SubqueryTableItemContext)_localctx).parenthesisSubquery = selectStatement();
                                    State = 3319; Match(RR_BRACKET);
                                }
                                break;
                        }
                        State = 3324;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == AS)
                        {
                            {
                                State = 3323; Match(AS);
                            }
                        }

                        State = 3326; ((SubqueryTableItemContext)_localctx).alias = uid();
                    }
                    break;
                case 3:
                    _localctx = new TableSourcesItemContext(_localctx);
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 3328; Match(LR_BRACKET);
                        State = 3329; tableSources();
                        State = 3330; Match(RR_BRACKET);
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class IndexHintContext : ParserRuleContext
    {
        public IToken indexHintAction;
        public IToken keyFormat;
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public UidListContext uidList()
        {
            return GetRuleContext<UidListContext>(0);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public ITerminalNode USE() { return GetToken(MySqlParser.USE, 0); }
        public ITerminalNode IGNORE() { return GetToken(MySqlParser.IGNORE, 0); }
        public ITerminalNode FORCE() { return GetToken(MySqlParser.FORCE, 0); }
        public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
        public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
        public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
        public IndexHintTypeContext indexHintType()
        {
            return GetRuleContext<IndexHintTypeContext>(0);
        }
        public IndexHintContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_indexHint; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterIndexHint(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitIndexHint(this);
        }
    }

    [RuleVersion(0)]
    public IndexHintContext indexHint()
    {
        IndexHintContext _localctx = new IndexHintContext(Context, State);
        EnterRule(_localctx, 216, RULE_indexHint);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 3334;
                _localctx.indexHintAction = TokenStream.LT(1);
                _la = TokenStream.LA(1);
                if (!(_la == FORCE || _la == IGNORE || _la == USE))
                {
                    _localctx.indexHintAction = ErrorHandler.RecoverInline(this);
                }
                else
                {
                    ErrorHandler.ReportMatch(this);
                    Consume();
                }
                State = 3335;
                _localctx.keyFormat = TokenStream.LT(1);
                _la = TokenStream.LA(1);
                if (!(_la == INDEX || _la == KEY))
                {
                    _localctx.keyFormat = ErrorHandler.RecoverInline(this);
                }
                else
                {
                    ErrorHandler.ReportMatch(this);
                    Consume();
                }
                State = 3338;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == FOR)
                {
                    {
                        State = 3336; Match(FOR);
                        State = 3337; indexHintType();
                    }
                }

                State = 3340; Match(LR_BRACKET);
                State = 3341; uidList();
                State = 3342; Match(RR_BRACKET);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class IndexHintTypeContext : ParserRuleContext
    {
        public ITerminalNode JOIN() { return GetToken(MySqlParser.JOIN, 0); }
        public ITerminalNode ORDER() { return GetToken(MySqlParser.ORDER, 0); }
        public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
        public ITerminalNode GROUP() { return GetToken(MySqlParser.GROUP, 0); }
        public IndexHintTypeContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_indexHintType; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterIndexHintType(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitIndexHintType(this);
        }
    }

    [RuleVersion(0)]
    public IndexHintTypeContext indexHintType()
    {
        IndexHintTypeContext _localctx = new IndexHintTypeContext(Context, State);
        EnterRule(_localctx, 218, RULE_indexHintType);
        try
        {
            State = 3349;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case JOIN:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 3344; Match(JOIN);
                    }
                    break;
                case ORDER:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 3345; Match(ORDER);
                        State = 3346; Match(BY);
                    }
                    break;
                case GROUP:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 3347; Match(GROUP);
                        State = 3348; Match(BY);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class JoinPartContext : ParserRuleContext
    {
        public JoinPartContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_joinPart; } }

        public JoinPartContext() { }
        public virtual void CopyFrom(JoinPartContext context)
        {
            base.CopyFrom(context);
        }
    }
    public partial class InnerJoinContext : JoinPartContext
    {
        public ITerminalNode JOIN() { return GetToken(MySqlParser.JOIN, 0); }
        public TableSourceItemContext tableSourceItem()
        {
            return GetRuleContext<TableSourceItemContext>(0);
        }
        public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
        public ExpressionContext expression()
        {
            return GetRuleContext<ExpressionContext>(0);
        }
        public ITerminalNode USING() { return GetToken(MySqlParser.USING, 0); }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public UidListContext uidList()
        {
            return GetRuleContext<UidListContext>(0);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public ITerminalNode INNER() { return GetToken(MySqlParser.INNER, 0); }
        public ITerminalNode CROSS() { return GetToken(MySqlParser.CROSS, 0); }
        public InnerJoinContext(JoinPartContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterInnerJoin(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitInnerJoin(this);
        }
    }
    public partial class NaturalJoinContext : JoinPartContext
    {
        public ITerminalNode NATURAL() { return GetToken(MySqlParser.NATURAL, 0); }
        public ITerminalNode JOIN() { return GetToken(MySqlParser.JOIN, 0); }
        public TableSourceItemContext tableSourceItem()
        {
            return GetRuleContext<TableSourceItemContext>(0);
        }
        public ITerminalNode LEFT() { return GetToken(MySqlParser.LEFT, 0); }
        public ITerminalNode RIGHT() { return GetToken(MySqlParser.RIGHT, 0); }
        public ITerminalNode OUTER() { return GetToken(MySqlParser.OUTER, 0); }
        public NaturalJoinContext(JoinPartContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterNaturalJoin(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitNaturalJoin(this);
        }
    }
    public partial class OuterJoinContext : JoinPartContext
    {
        public ITerminalNode JOIN() { return GetToken(MySqlParser.JOIN, 0); }
        public TableSourceItemContext tableSourceItem()
        {
            return GetRuleContext<TableSourceItemContext>(0);
        }
        public ITerminalNode LEFT() { return GetToken(MySqlParser.LEFT, 0); }
        public ITerminalNode RIGHT() { return GetToken(MySqlParser.RIGHT, 0); }
        public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
        public ExpressionContext expression()
        {
            return GetRuleContext<ExpressionContext>(0);
        }
        public ITerminalNode USING() { return GetToken(MySqlParser.USING, 0); }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public UidListContext uidList()
        {
            return GetRuleContext<UidListContext>(0);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public ITerminalNode OUTER() { return GetToken(MySqlParser.OUTER, 0); }
        public OuterJoinContext(JoinPartContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterOuterJoin(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitOuterJoin(this);
        }
    }
    public partial class StraightJoinContext : JoinPartContext
    {
        public ITerminalNode STRAIGHT_JOIN() { return GetToken(MySqlParser.STRAIGHT_JOIN, 0); }
        public TableSourceItemContext tableSourceItem()
        {
            return GetRuleContext<TableSourceItemContext>(0);
        }
        public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
        public ExpressionContext expression()
        {
            return GetRuleContext<ExpressionContext>(0);
        }
        public StraightJoinContext(JoinPartContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterStraightJoin(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitStraightJoin(this);
        }
    }

    [RuleVersion(0)]
    public JoinPartContext joinPart()
    {
        JoinPartContext _localctx = new JoinPartContext(Context, State);
        EnterRule(_localctx, 220, RULE_joinPart);
        int _la;
        try
        {
            State = 3395;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case CROSS:
                case INNER:
                case JOIN:
                    _localctx = new InnerJoinContext(_localctx);
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 3352;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == CROSS || _la == INNER)
                        {
                            {
                                State = 3351;
                                _la = TokenStream.LA(1);
                                if (!(_la == CROSS || _la == INNER))
                                {
                                    ErrorHandler.RecoverInline(this);
                                }
                                else
                                {
                                    ErrorHandler.ReportMatch(this);
                                    Consume();
                                }
                            }
                        }

                        State = 3354; Match(JOIN);
                        State = 3355; tableSourceItem();
                        State = 3363;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 471, Context))
                        {
                            case 1:
                                {
                                    State = 3356; Match(ON);
                                    State = 3357; expression(0);
                                }
                                break;
                            case 2:
                                {
                                    State = 3358; Match(USING);
                                    State = 3359; Match(LR_BRACKET);
                                    State = 3360; uidList();
                                    State = 3361; Match(RR_BRACKET);
                                }
                                break;
                        }
                    }
                    break;
                case STRAIGHT_JOIN:
                    _localctx = new StraightJoinContext(_localctx);
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 3365; Match(STRAIGHT_JOIN);
                        State = 3366; tableSourceItem();
                        State = 3369;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 472, Context))
                        {
                            case 1:
                                {
                                    State = 3367; Match(ON);
                                    State = 3368; expression(0);
                                }
                                break;
                        }
                    }
                    break;
                case LEFT:
                case RIGHT:
                    _localctx = new OuterJoinContext(_localctx);
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 3371;
                        _la = TokenStream.LA(1);
                        if (!(_la == LEFT || _la == RIGHT))
                        {
                            ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                        State = 3373;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == OUTER)
                        {
                            {
                                State = 3372; Match(OUTER);
                            }
                        }

                        State = 3375; Match(JOIN);
                        State = 3376; tableSourceItem();
                        State = 3384;
                        ErrorHandler.Sync(this);
                        switch (TokenStream.LA(1))
                        {
                            case ON:
                                {
                                    State = 3377; Match(ON);
                                    State = 3378; expression(0);
                                }
                                break;
                            case USING:
                                {
                                    State = 3379; Match(USING);
                                    State = 3380; Match(LR_BRACKET);
                                    State = 3381; uidList();
                                    State = 3382; Match(RR_BRACKET);
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }
                    break;
                case NATURAL:
                    _localctx = new NaturalJoinContext(_localctx);
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 3386; Match(NATURAL);
                        State = 3391;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == LEFT || _la == RIGHT)
                        {
                            {
                                State = 3387;
                                _la = TokenStream.LA(1);
                                if (!(_la == LEFT || _la == RIGHT))
                                {
                                    ErrorHandler.RecoverInline(this);
                                }
                                else
                                {
                                    ErrorHandler.ReportMatch(this);
                                    Consume();
                                }
                                State = 3389;
                                ErrorHandler.Sync(this);
                                _la = TokenStream.LA(1);
                                if (_la == OUTER)
                                {
                                    {
                                        State = 3388; Match(OUTER);
                                    }
                                }

                            }
                        }

                        State = 3393; Match(JOIN);
                        State = 3394; tableSourceItem();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class QueryExpressionContext : ParserRuleContext
    {
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public QuerySpecificationContext querySpecification()
        {
            return GetRuleContext<QuerySpecificationContext>(0);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public QueryExpressionContext queryExpression()
        {
            return GetRuleContext<QueryExpressionContext>(0);
        }
        public QueryExpressionContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_queryExpression; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterQueryExpression(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitQueryExpression(this);
        }
    }

    [RuleVersion(0)]
    public QueryExpressionContext queryExpression()
    {
        QueryExpressionContext _localctx = new QueryExpressionContext(Context, State);
        EnterRule(_localctx, 222, RULE_queryExpression);
        try
        {
            State = 3405;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 478, Context))
            {
                case 1:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 3397; Match(LR_BRACKET);
                        State = 3398; querySpecification();
                        State = 3399; Match(RR_BRACKET);
                    }
                    break;
                case 2:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 3401; Match(LR_BRACKET);
                        State = 3402; queryExpression();
                        State = 3403; Match(RR_BRACKET);
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class QueryExpressionNointoContext : ParserRuleContext
    {
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public QuerySpecificationNointoContext querySpecificationNointo()
        {
            return GetRuleContext<QuerySpecificationNointoContext>(0);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public QueryExpressionNointoContext queryExpressionNointo()
        {
            return GetRuleContext<QueryExpressionNointoContext>(0);
        }
        public QueryExpressionNointoContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_queryExpressionNointo; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterQueryExpressionNointo(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitQueryExpressionNointo(this);
        }
    }

    [RuleVersion(0)]
    public QueryExpressionNointoContext queryExpressionNointo()
    {
        QueryExpressionNointoContext _localctx = new QueryExpressionNointoContext(Context, State);
        EnterRule(_localctx, 224, RULE_queryExpressionNointo);
        try
        {
            State = 3415;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 479, Context))
            {
                case 1:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 3407; Match(LR_BRACKET);
                        State = 3408; querySpecificationNointo();
                        State = 3409; Match(RR_BRACKET);
                    }
                    break;
                case 2:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 3411; Match(LR_BRACKET);
                        State = 3412; queryExpressionNointo();
                        State = 3413; Match(RR_BRACKET);
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class QuerySpecificationContext : ParserRuleContext
    {
        public ITerminalNode SELECT() { return GetToken(MySqlParser.SELECT, 0); }
        public SelectElementsContext selectElements()
        {
            return GetRuleContext<SelectElementsContext>(0);
        }
        public SelectSpecContext[] selectSpec()
        {
            return GetRuleContexts<SelectSpecContext>();
        }
        public SelectSpecContext selectSpec(int i)
        {
            return GetRuleContext<SelectSpecContext>(i);
        }
        public SelectIntoExpressionContext selectIntoExpression()
        {
            return GetRuleContext<SelectIntoExpressionContext>(0);
        }
        public FromClauseContext fromClause()
        {
            return GetRuleContext<FromClauseContext>(0);
        }
        public OrderByClauseContext orderByClause()
        {
            return GetRuleContext<OrderByClauseContext>(0);
        }
        public LimitClauseContext limitClause()
        {
            return GetRuleContext<LimitClauseContext>(0);
        }
        public QuerySpecificationContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_querySpecification; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterQuerySpecification(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitQuerySpecification(this);
        }
    }

    [RuleVersion(0)]
    public QuerySpecificationContext querySpecification()
    {
        QuerySpecificationContext _localctx = new QuerySpecificationContext(Context, State);
        EnterRule(_localctx, 226, RULE_querySpecification);
        int _la;
        try
        {
            int _alt;
            State = 3457;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 490, Context))
            {
                case 1:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 3417; Match(SELECT);
                        State = 3421;
                        ErrorHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(TokenStream, 480, Context);
                        while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                        {
                            if (_alt == 1)
                            {
                                {
                                    {
                                        State = 3418; selectSpec();
                                    }
                                }
                            }
                            State = 3423;
                            ErrorHandler.Sync(this);
                            _alt = Interpreter.AdaptivePredict(TokenStream, 480, Context);
                        }
                        State = 3424; selectElements();
                        State = 3426;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == INTO)
                        {
                            {
                                State = 3425; selectIntoExpression();
                            }
                        }

                        State = 3429;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == FROM)
                        {
                            {
                                State = 3428; fromClause();
                            }
                        }

                        State = 3432;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 483, Context))
                        {
                            case 1:
                                {
                                    State = 3431; orderByClause();
                                }
                                break;
                        }
                        State = 3435;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 484, Context))
                        {
                            case 1:
                                {
                                    State = 3434; limitClause();
                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 3437; Match(SELECT);
                        State = 3441;
                        ErrorHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(TokenStream, 485, Context);
                        while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                        {
                            if (_alt == 1)
                            {
                                {
                                    {
                                        State = 3438; selectSpec();
                                    }
                                }
                            }
                            State = 3443;
                            ErrorHandler.Sync(this);
                            _alt = Interpreter.AdaptivePredict(TokenStream, 485, Context);
                        }
                        State = 3444; selectElements();
                        State = 3446;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == FROM)
                        {
                            {
                                State = 3445; fromClause();
                            }
                        }

                        State = 3449;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 487, Context))
                        {
                            case 1:
                                {
                                    State = 3448; orderByClause();
                                }
                                break;
                        }
                        State = 3452;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 488, Context))
                        {
                            case 1:
                                {
                                    State = 3451; limitClause();
                                }
                                break;
                        }
                        State = 3455;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == INTO)
                        {
                            {
                                State = 3454; selectIntoExpression();
                            }
                        }

                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class QuerySpecificationNointoContext : ParserRuleContext
    {
        public ITerminalNode SELECT() { return GetToken(MySqlParser.SELECT, 0); }
        public SelectElementsContext selectElements()
        {
            return GetRuleContext<SelectElementsContext>(0);
        }
        public SelectSpecContext[] selectSpec()
        {
            return GetRuleContexts<SelectSpecContext>();
        }
        public SelectSpecContext selectSpec(int i)
        {
            return GetRuleContext<SelectSpecContext>(i);
        }
        public FromClauseContext fromClause()
        {
            return GetRuleContext<FromClauseContext>(0);
        }
        public OrderByClauseContext orderByClause()
        {
            return GetRuleContext<OrderByClauseContext>(0);
        }
        public LimitClauseContext limitClause()
        {
            return GetRuleContext<LimitClauseContext>(0);
        }
        public QuerySpecificationNointoContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_querySpecificationNointo; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterQuerySpecificationNointo(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitQuerySpecificationNointo(this);
        }
    }

    [RuleVersion(0)]
    public QuerySpecificationNointoContext querySpecificationNointo()
    {
        QuerySpecificationNointoContext _localctx = new QuerySpecificationNointoContext(Context, State);
        EnterRule(_localctx, 228, RULE_querySpecificationNointo);
        int _la;
        try
        {
            int _alt;
            EnterOuterAlt(_localctx, 1);
            {
                State = 3459; Match(SELECT);
                State = 3463;
                ErrorHandler.Sync(this);
                _alt = Interpreter.AdaptivePredict(TokenStream, 491, Context);
                while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                {
                    if (_alt == 1)
                    {
                        {
                            {
                                State = 3460; selectSpec();
                            }
                        }
                    }
                    State = 3465;
                    ErrorHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(TokenStream, 491, Context);
                }
                State = 3466; selectElements();
                State = 3468;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == FROM)
                {
                    {
                        State = 3467; fromClause();
                    }
                }

                State = 3471;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 493, Context))
                {
                    case 1:
                        {
                            State = 3470; orderByClause();
                        }
                        break;
                }
                State = 3474;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 494, Context))
                {
                    case 1:
                        {
                            State = 3473; limitClause();
                        }
                        break;
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class UnionParenthesisContext : ParserRuleContext
    {
        public IToken unionType;
        public ITerminalNode UNION() { return GetToken(MySqlParser.UNION, 0); }
        public QueryExpressionNointoContext queryExpressionNointo()
        {
            return GetRuleContext<QueryExpressionNointoContext>(0);
        }
        public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
        public ITerminalNode DISTINCT() { return GetToken(MySqlParser.DISTINCT, 0); }
        public UnionParenthesisContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_unionParenthesis; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterUnionParenthesis(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitUnionParenthesis(this);
        }
    }

    [RuleVersion(0)]
    public UnionParenthesisContext unionParenthesis()
    {
        UnionParenthesisContext _localctx = new UnionParenthesisContext(Context, State);
        EnterRule(_localctx, 230, RULE_unionParenthesis);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 3476; Match(UNION);
                State = 3478;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == ALL || _la == DISTINCT)
                {
                    {
                        State = 3477;
                        _localctx.unionType = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == ALL || _la == DISTINCT))
                        {
                            _localctx.unionType = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                }

                State = 3480; queryExpressionNointo();
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class UnionStatementContext : ParserRuleContext
    {
        public IToken unionType;
        public ITerminalNode UNION() { return GetToken(MySqlParser.UNION, 0); }
        public QuerySpecificationNointoContext querySpecificationNointo()
        {
            return GetRuleContext<QuerySpecificationNointoContext>(0);
        }
        public QueryExpressionNointoContext queryExpressionNointo()
        {
            return GetRuleContext<QueryExpressionNointoContext>(0);
        }
        public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
        public ITerminalNode DISTINCT() { return GetToken(MySqlParser.DISTINCT, 0); }
        public UnionStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_unionStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterUnionStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitUnionStatement(this);
        }
    }

    [RuleVersion(0)]
    public UnionStatementContext unionStatement()
    {
        UnionStatementContext _localctx = new UnionStatementContext(Context, State);
        EnterRule(_localctx, 232, RULE_unionStatement);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 3482; Match(UNION);
                State = 3484;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == ALL || _la == DISTINCT)
                {
                    {
                        State = 3483;
                        _localctx.unionType = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == ALL || _la == DISTINCT))
                        {
                            _localctx.unionType = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                }

                State = 3488;
                ErrorHandler.Sync(this);
                switch (TokenStream.LA(1))
                {
                    case SELECT:
                        {
                            State = 3486; querySpecificationNointo();
                        }
                        break;
                    case LR_BRACKET:
                        {
                            State = 3487; queryExpressionNointo();
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class SelectSpecContext : ParserRuleContext
    {
        public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
        public ITerminalNode DISTINCT() { return GetToken(MySqlParser.DISTINCT, 0); }
        public ITerminalNode DISTINCTROW() { return GetToken(MySqlParser.DISTINCTROW, 0); }
        public ITerminalNode HIGH_PRIORITY() { return GetToken(MySqlParser.HIGH_PRIORITY, 0); }
        public ITerminalNode STRAIGHT_JOIN() { return GetToken(MySqlParser.STRAIGHT_JOIN, 0); }
        public ITerminalNode SQL_SMALL_RESULT() { return GetToken(MySqlParser.SQL_SMALL_RESULT, 0); }
        public ITerminalNode SQL_BIG_RESULT() { return GetToken(MySqlParser.SQL_BIG_RESULT, 0); }
        public ITerminalNode SQL_BUFFER_RESULT() { return GetToken(MySqlParser.SQL_BUFFER_RESULT, 0); }
        public ITerminalNode SQL_CACHE() { return GetToken(MySqlParser.SQL_CACHE, 0); }
        public ITerminalNode SQL_NO_CACHE() { return GetToken(MySqlParser.SQL_NO_CACHE, 0); }
        public ITerminalNode SQL_CALC_FOUND_ROWS() { return GetToken(MySqlParser.SQL_CALC_FOUND_ROWS, 0); }
        public SelectSpecContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_selectSpec; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterSelectSpec(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitSelectSpec(this);
        }
    }

    [RuleVersion(0)]
    public SelectSpecContext selectSpec()
    {
        SelectSpecContext _localctx = new SelectSpecContext(Context, State);
        EnterRule(_localctx, 234, RULE_selectSpec);
        int _la;
        try
        {
            State = 3498;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case ALL:
                case DISTINCT:
                case DISTINCTROW:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 3490;
                        _la = TokenStream.LA(1);
                        if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALL) | (1L << DISTINCT) | (1L << DISTINCTROW))) != 0)))
                        {
                            ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                    break;
                case HIGH_PRIORITY:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 3491; Match(HIGH_PRIORITY);
                    }
                    break;
                case STRAIGHT_JOIN:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 3492; Match(STRAIGHT_JOIN);
                    }
                    break;
                case SQL_SMALL_RESULT:
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 3493; Match(SQL_SMALL_RESULT);
                    }
                    break;
                case SQL_BIG_RESULT:
                    EnterOuterAlt(_localctx, 5);
                    {
                        State = 3494; Match(SQL_BIG_RESULT);
                    }
                    break;
                case SQL_BUFFER_RESULT:
                    EnterOuterAlt(_localctx, 6);
                    {
                        State = 3495; Match(SQL_BUFFER_RESULT);
                    }
                    break;
                case SQL_CACHE:
                case SQL_NO_CACHE:
                    EnterOuterAlt(_localctx, 7);
                    {
                        State = 3496;
                        _la = TokenStream.LA(1);
                        if (!(_la == SQL_CACHE || _la == SQL_NO_CACHE))
                        {
                            ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                    break;
                case SQL_CALC_FOUND_ROWS:
                    EnterOuterAlt(_localctx, 8);
                    {
                        State = 3497; Match(SQL_CALC_FOUND_ROWS);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class SelectElementsContext : ParserRuleContext
    {
        public IToken star;
        public SelectElementContext[] selectElement()
        {
            return GetRuleContexts<SelectElementContext>();
        }
        public SelectElementContext selectElement(int i)
        {
            return GetRuleContext<SelectElementContext>(i);
        }
        public ITerminalNode STAR() { return GetToken(MySqlParser.STAR, 0); }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public SelectElementsContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_selectElements; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterSelectElements(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitSelectElements(this);
        }
    }

    [RuleVersion(0)]
    public SelectElementsContext selectElements()
    {
        SelectElementsContext _localctx = new SelectElementsContext(Context, State);
        EnterRule(_localctx, 236, RULE_selectElements);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 3502;
                ErrorHandler.Sync(this);
                switch (TokenStream.LA(1))
                {
                    case STAR:
                        {
                            State = 3500; _localctx.star = Match(STAR);
                        }
                        break;
                    case CASE:
                    case CAST:
                    case CONVERT:
                    case CURRENT:
                    case CURRENT_USER:
                    case DATABASE:
                    case DIAGNOSTICS:
                    case EXISTS:
                    case FALSE:
                    case IF:
                    case INSERT:
                    case INTERVAL:
                    case LEFT:
                    case NOT:
                    case NULL_LITERAL:
                    case NUMBER:
                    case REPLACE:
                    case RIGHT:
                    case STACKED:
                    case TRUE:
                    case VALUES:
                    case DATE:
                    case TIME:
                    case TIMESTAMP:
                    case DATETIME:
                    case YEAR:
                    case CHAR:
                    case BINARY:
                    case TEXT:
                    case ENUM:
                    case SERIAL:
                    case AVG:
                    case BIT_AND:
                    case BIT_OR:
                    case BIT_XOR:
                    case COUNT:
                    case GROUP_CONCAT:
                    case MAX:
                    case MIN:
                    case STD:
                    case STDDEV:
                    case STDDEV_POP:
                    case STDDEV_SAMP:
                    case SUM:
                    case VAR_POP:
                    case VAR_SAMP:
                    case VARIANCE:
                    case CURRENT_DATE:
                    case CURRENT_TIME:
                    case CURRENT_TIMESTAMP:
                    case LOCALTIME:
                    case CURDATE:
                    case CURTIME:
                    case DATE_ADD:
                    case DATE_SUB:
                    case EXTRACT:
                    case LOCALTIMESTAMP:
                    case NOW:
                    case POSITION:
                    case SUBSTR:
                    case SUBSTRING:
                    case SYSDATE:
                    case TRIM:
                    case UTC_DATE:
                    case UTC_TIME:
                    case UTC_TIMESTAMP:
                    case ACCOUNT:
                    case ACTION:
                    case AFTER:
                    case AGGREGATE:
                    case ALGORITHM:
                    case ANY:
                    case AT:
                    case AUTHORS:
                    case AUTOCOMMIT:
                    case AUTOEXTEND_SIZE:
                    case AUTO_INCREMENT:
                    case AVG_ROW_LENGTH:
                    case BEGIN:
                    case BINLOG:
                    case BIT:
                    case BLOCK:
                    case BOOL:
                    case BOOLEAN:
                    case BTREE:
                    case CACHE:
                    case CASCADED:
                    case CHAIN:
                    case CHANGED:
                    case CHANNEL:
                    case CHECKSUM:
                    case PAGE_CHECKSUM:
                    case CIPHER:
                    case CLASS_ORIGIN:
                    case CLIENT:
                    case CLOSE:
                    case COALESCE:
                    case CODE:
                    case COLUMNS:
                    case COLUMN_FORMAT:
                    case COLUMN_NAME:
                    case COMMENT:
                    case COMMIT:
                    case COMPACT:
                    case COMPLETION:
                    case COMPRESSED:
                    case COMPRESSION:
                    case CONCURRENT:
                    case CONNECTION:
                    case CONSISTENT:
                    case CONSTRAINT_CATALOG:
                    case CONSTRAINT_SCHEMA:
                    case CONSTRAINT_NAME:
                    case CONTAINS:
                    case CONTEXT:
                    case CONTRIBUTORS:
                    case COPY:
                    case CPU:
                    case CURSOR_NAME:
                    case DATA:
                    case DATAFILE:
                    case DEALLOCATE:
                    case DEFAULT_AUTH:
                    case DEFINER:
                    case DELAY_KEY_WRITE:
                    case DES_KEY_FILE:
                    case DIRECTORY:
                    case DISABLE:
                    case DISCARD:
                    case DISK:
                    case DO:
                    case DUMPFILE:
                    case DUPLICATE:
                    case DYNAMIC:
                    case ENABLE:
                    case ENCRYPTION:
                    case END:
                    case ENDS:
                    case ENGINE:
                    case ENGINES:
                    case ERROR:
                    case ERRORS:
                    case ESCAPE:
                    case EVEN:
                    case EVENT:
                    case EVENTS:
                    case EVERY:
                    case EXCHANGE:
                    case EXCLUSIVE:
                    case EXPIRE:
                    case EXPORT:
                    case EXTENDED:
                    case EXTENT_SIZE:
                    case FAST:
                    case FAULTS:
                    case FIELDS:
                    case FILE_BLOCK_SIZE:
                    case FILTER:
                    case FIRST:
                    case FIXED:
                    case FLUSH:
                    case FOLLOWS:
                    case FOUND:
                    case FULL:
                    case FUNCTION:
                    case GENERAL:
                    case GLOBAL:
                    case GRANTS:
                    case GROUP_REPLICATION:
                    case HANDLER:
                    case HASH:
                    case HELP:
                    case HOST:
                    case HOSTS:
                    case IDENTIFIED:
                    case IGNORE_SERVER_IDS:
                    case IMPORT:
                    case INDEXES:
                    case INITIAL_SIZE:
                    case INPLACE:
                    case INSERT_METHOD:
                    case INSTALL:
                    case INSTANCE:
                    case INVISIBLE:
                    case INVOKER:
                    case IO:
                    case IO_THREAD:
                    case IPC:
                    case ISOLATION:
                    case ISSUER:
                    case JSON:
                    case KEY_BLOCK_SIZE:
                    case LANGUAGE:
                    case LAST:
                    case LEAVES:
                    case LESS:
                    case LEVEL:
                    case LIST:
                    case LOCAL:
                    case LOGFILE:
                    case LOGS:
                    case MASTER:
                    case MASTER_AUTO_POSITION:
                    case MASTER_CONNECT_RETRY:
                    case MASTER_DELAY:
                    case MASTER_HEARTBEAT_PERIOD:
                    case MASTER_HOST:
                    case MASTER_LOG_FILE:
                    case MASTER_LOG_POS:
                    case MASTER_PASSWORD:
                    case MASTER_PORT:
                    case MASTER_RETRY_COUNT:
                    case MASTER_SSL:
                    case MASTER_SSL_CA:
                    case MASTER_SSL_CAPATH:
                    case MASTER_SSL_CERT:
                    case MASTER_SSL_CIPHER:
                    case MASTER_SSL_CRL:
                    case MASTER_SSL_CRLPATH:
                    case MASTER_SSL_KEY:
                    case MASTER_TLS_VERSION:
                    case MASTER_USER:
                    case MAX_CONNECTIONS_PER_HOUR:
                    case MAX_QUERIES_PER_HOUR:
                    case MAX_ROWS:
                    case MAX_SIZE:
                    case MAX_UPDATES_PER_HOUR:
                    case MAX_USER_CONNECTIONS:
                    case MEDIUM:
                    case MERGE:
                    case MESSAGE_TEXT:
                    case MID:
                    case MIGRATE:
                    case MIN_ROWS:
                    case MODE:
                    case MODIFY:
                    case MUTEX:
                    case MYSQL:
                    case MYSQL_ERRNO:
                    case NAME:
                    case NAMES:
                    case NCHAR:
                    case NEVER:
                    case NEXT:
                    case NO:
                    case NODEGROUP:
                    case NONE:
                    case OFFLINE:
                    case OFFSET:
                    case OJ:
                    case OLD_PASSWORD:
                    case ONE:
                    case ONLINE:
                    case ONLY:
                    case OPEN:
                    case OPTIMIZER_COSTS:
                    case OPTIONS:
                    case OWNER:
                    case PACK_KEYS:
                    case PAGE:
                    case PARSER:
                    case PARTIAL:
                    case PARTITIONING:
                    case PARTITIONS:
                    case PASSWORD:
                    case PHASE:
                    case PLUGIN:
                    case PLUGIN_DIR:
                    case PLUGINS:
                    case PORT:
                    case PRECEDES:
                    case PREPARE:
                    case PRESERVE:
                    case PREV:
                    case PROCESSLIST:
                    case PROFILE:
                    case PROFILES:
                    case PROXY:
                    case QUERY:
                    case QUICK:
                    case REBUILD:
                    case RECOVER:
                    case REDO_BUFFER_SIZE:
                    case REDUNDANT:
                    case RELAY:
                    case RELAY_LOG_FILE:
                    case RELAY_LOG_POS:
                    case RELAYLOG:
                    case REMOVE:
                    case REORGANIZE:
                    case REPAIR:
                    case REPLICATE_DO_DB:
                    case REPLICATE_DO_TABLE:
                    case REPLICATE_IGNORE_DB:
                    case REPLICATE_IGNORE_TABLE:
                    case REPLICATE_REWRITE_DB:
                    case REPLICATE_WILD_DO_TABLE:
                    case REPLICATE_WILD_IGNORE_TABLE:
                    case REPLICATION:
                    case RESET:
                    case RESUME:
                    case RETURNED_SQLSTATE:
                    case RETURNS:
                    case ROLLBACK:
                    case ROLLUP:
                    case ROTATE:
                    case ROW:
                    case ROWS:
                    case ROW_FORMAT:
                    case SAVEPOINT:
                    case SCHEDULE:
                    case SECURITY:
                    case SERVER:
                    case SESSION:
                    case SHARE:
                    case SHARED:
                    case SIGNED:
                    case SIMPLE:
                    case SLAVE:
                    case SLOW:
                    case SNAPSHOT:
                    case SOCKET:
                    case SOME:
                    case SONAME:
                    case SOUNDS:
                    case SOURCE:
                    case SQL_AFTER_GTIDS:
                    case SQL_AFTER_MTS_GAPS:
                    case SQL_BEFORE_GTIDS:
                    case SQL_BUFFER_RESULT:
                    case SQL_CACHE:
                    case SQL_NO_CACHE:
                    case SQL_THREAD:
                    case START:
                    case STARTS:
                    case STATS_AUTO_RECALC:
                    case STATS_PERSISTENT:
                    case STATS_SAMPLE_PAGES:
                    case STATUS:
                    case STOP:
                    case STORAGE:
                    case STRING:
                    case SUBCLASS_ORIGIN:
                    case SUBJECT:
                    case SUBPARTITION:
                    case SUBPARTITIONS:
                    case SUSPEND:
                    case SWAPS:
                    case SWITCHES:
                    case TABLE_NAME:
                    case TABLESPACE:
                    case TEMPORARY:
                    case TEMPTABLE:
                    case THAN:
                    case TRADITIONAL:
                    case TRANSACTION:
                    case TRIGGERS:
                    case TRUNCATE:
                    case UNDEFINED:
                    case UNDOFILE:
                    case UNDO_BUFFER_SIZE:
                    case UNINSTALL:
                    case UNKNOWN:
                    case UNTIL:
                    case UPGRADE:
                    case USER:
                    case USE_FRM:
                    case USER_RESOURCES:
                    case VALIDATION:
                    case VALUE:
                    case VARIABLES:
                    case VIEW:
                    case VISIBLE:
                    case WAIT:
                    case WARNINGS:
                    case WITHOUT:
                    case WORK:
                    case WRAPPER:
                    case X509:
                    case XA:
                    case XML:
                    case INTERNAL:
                    case QUARTER:
                    case MONTH:
                    case DAY:
                    case HOUR:
                    case MINUTE:
                    case WEEK:
                    case SECOND:
                    case MICROSECOND:
                    case TABLES:
                    case ROUTINE:
                    case EXECUTE:
                    case FILE:
                    case PROCESS:
                    case RELOAD:
                    case SHUTDOWN:
                    case SUPER:
                    case PRIVILEGES:
                    case SESSION_VARIABLES_ADMIN:
                    case ARMSCII8:
                    case ASCII:
                    case BIG5:
                    case CP1250:
                    case CP1251:
                    case CP1256:
                    case CP1257:
                    case CP850:
                    case CP852:
                    case CP866:
                    case CP932:
                    case DEC8:
                    case EUCJPMS:
                    case EUCKR:
                    case GB2312:
                    case GBK:
                    case GEOSTD8:
                    case GREEK:
                    case HEBREW:
                    case HP8:
                    case KEYBCS2:
                    case KOI8R:
                    case KOI8U:
                    case LATIN1:
                    case LATIN2:
                    case LATIN5:
                    case LATIN7:
                    case MACCE:
                    case MACROMAN:
                    case SJIS:
                    case SWE7:
                    case TIS620:
                    case UCS2:
                    case UJIS:
                    case UTF16:
                    case UTF16LE:
                    case UTF32:
                    case UTF8:
                    case UTF8MB3:
                    case UTF8MB4:
                    case ARCHIVE:
                    case BLACKHOLE:
                    case CSV:
                    case FEDERATED:
                    case INNODB:
                    case MEMORY:
                    case MRG_MYISAM:
                    case MYISAM:
                    case NDB:
                    case NDBCLUSTER:
                    case PERFORMANCE_SCHEMA:
                    case TOKUDB:
                    case REPEATABLE:
                    case COMMITTED:
                    case UNCOMMITTED:
                    case SERIALIZABLE:
                    case GEOMETRYCOLLECTION:
                    case LINESTRING:
                    case MULTILINESTRING:
                    case MULTIPOINT:
                    case MULTIPOLYGON:
                    case POINT:
                    case POLYGON:
                    case ABS:
                    case ACOS:
                    case ADDDATE:
                    case ADDTIME:
                    case AES_DECRYPT:
                    case AES_ENCRYPT:
                    case AREA:
                    case ASBINARY:
                    case ASIN:
                    case ASTEXT:
                    case ASWKB:
                    case ASWKT:
                    case ASYMMETRIC_DECRYPT:
                    case ASYMMETRIC_DERIVE:
                    case ASYMMETRIC_ENCRYPT:
                    case ASYMMETRIC_SIGN:
                    case ASYMMETRIC_VERIFY:
                    case ATAN:
                    case ATAN2:
                    case BENCHMARK:
                    case BIN:
                    case BIT_COUNT:
                    case BIT_LENGTH:
                    case BUFFER:
                    case CATALOG_NAME:
                    case CEIL:
                    case CEILING:
                    case CENTROID:
                    case CHARACTER_LENGTH:
                    case CHARSET:
                    case CHAR_LENGTH:
                    case COERCIBILITY:
                    case COLLATION:
                    case COMPRESS:
                    case CONCAT:
                    case CONCAT_WS:
                    case CONNECTION_ID:
                    case CONV:
                    case CONVERT_TZ:
                    case COS:
                    case COT:
                    case CRC32:
                    case CREATE_ASYMMETRIC_PRIV_KEY:
                    case CREATE_ASYMMETRIC_PUB_KEY:
                    case CREATE_DH_PARAMETERS:
                    case CREATE_DIGEST:
                    case CROSSES:
                    case DATEDIFF:
                    case DATE_FORMAT:
                    case DAYNAME:
                    case DAYOFMONTH:
                    case DAYOFWEEK:
                    case DAYOFYEAR:
                    case DECODE:
                    case DEGREES:
                    case DES_DECRYPT:
                    case DES_ENCRYPT:
                    case DIMENSION:
                    case DISJOINT:
                    case ELT:
                    case ENCODE:
                    case ENCRYPT:
                    case ENDPOINT:
                    case ENVELOPE:
                    case EQUALS:
                    case EXP:
                    case EXPORT_SET:
                    case EXTERIORRING:
                    case EXTRACTVALUE:
                    case FIELD:
                    case FIND_IN_SET:
                    case FLOOR:
                    case FORMAT:
                    case FOUND_ROWS:
                    case FROM_BASE64:
                    case FROM_DAYS:
                    case FROM_UNIXTIME:
                    case GEOMCOLLFROMTEXT:
                    case GEOMCOLLFROMWKB:
                    case GEOMETRYCOLLECTIONFROMTEXT:
                    case GEOMETRYCOLLECTIONFROMWKB:
                    case GEOMETRYFROMTEXT:
                    case GEOMETRYFROMWKB:
                    case GEOMETRYN:
                    case GEOMETRYTYPE:
                    case GEOMFROMTEXT:
                    case GEOMFROMWKB:
                    case GET_FORMAT:
                    case GET_LOCK:
                    case GLENGTH:
                    case GREATEST:
                    case GTID_SUBSET:
                    case GTID_SUBTRACT:
                    case HEX:
                    case IFNULL:
                    case INET6_ATON:
                    case INET6_NTOA:
                    case INET_ATON:
                    case INET_NTOA:
                    case INSTR:
                    case INTERIORRINGN:
                    case INTERSECTS:
                    case ISCLOSED:
                    case ISEMPTY:
                    case ISNULL:
                    case ISSIMPLE:
                    case IS_FREE_LOCK:
                    case IS_IPV4:
                    case IS_IPV4_COMPAT:
                    case IS_IPV4_MAPPED:
                    case IS_IPV6:
                    case IS_USED_LOCK:
                    case LAST_INSERT_ID:
                    case LCASE:
                    case LEAST:
                    case LENGTH:
                    case LINEFROMTEXT:
                    case LINEFROMWKB:
                    case LINESTRINGFROMTEXT:
                    case LINESTRINGFROMWKB:
                    case LN:
                    case LOAD_FILE:
                    case LOCATE:
                    case LOG:
                    case LOG10:
                    case LOG2:
                    case LOWER:
                    case LPAD:
                    case LTRIM:
                    case MAKEDATE:
                    case MAKETIME:
                    case MAKE_SET:
                    case MASTER_POS_WAIT:
                    case MBRCONTAINS:
                    case MBRDISJOINT:
                    case MBREQUAL:
                    case MBRINTERSECTS:
                    case MBROVERLAPS:
                    case MBRTOUCHES:
                    case MBRWITHIN:
                    case MD5:
                    case MLINEFROMTEXT:
                    case MLINEFROMWKB:
                    case MONTHNAME:
                    case MPOINTFROMTEXT:
                    case MPOINTFROMWKB:
                    case MPOLYFROMTEXT:
                    case MPOLYFROMWKB:
                    case MULTILINESTRINGFROMTEXT:
                    case MULTILINESTRINGFROMWKB:
                    case MULTIPOINTFROMTEXT:
                    case MULTIPOINTFROMWKB:
                    case MULTIPOLYGONFROMTEXT:
                    case MULTIPOLYGONFROMWKB:
                    case NAME_CONST:
                    case NULLIF:
                    case NUMGEOMETRIES:
                    case NUMINTERIORRINGS:
                    case NUMPOINTS:
                    case OCT:
                    case OCTET_LENGTH:
                    case ORD:
                    case OVERLAPS:
                    case PERIOD_ADD:
                    case PERIOD_DIFF:
                    case PI:
                    case POINTFROMTEXT:
                    case POINTFROMWKB:
                    case POINTN:
                    case POLYFROMTEXT:
                    case POLYFROMWKB:
                    case POLYGONFROMTEXT:
                    case POLYGONFROMWKB:
                    case POW:
                    case POWER:
                    case QUOTE:
                    case RADIANS:
                    case RAND:
                    case RANDOM_BYTES:
                    case RELEASE_LOCK:
                    case REVERSE:
                    case ROUND:
                    case ROW_COUNT:
                    case RPAD:
                    case RTRIM:
                    case SEC_TO_TIME:
                    case SESSION_USER:
                    case SHA:
                    case SHA1:
                    case SHA2:
                    case SCHEMA_NAME:
                    case SIGN:
                    case SIN:
                    case SLEEP:
                    case SOUNDEX:
                    case SQL_THREAD_WAIT_AFTER_GTIDS:
                    case SQRT:
                    case SRID:
                    case STARTPOINT:
                    case STRCMP:
                    case STR_TO_DATE:
                    case ST_AREA:
                    case ST_ASBINARY:
                    case ST_ASTEXT:
                    case ST_ASWKB:
                    case ST_ASWKT:
                    case ST_BUFFER:
                    case ST_CENTROID:
                    case ST_CONTAINS:
                    case ST_CROSSES:
                    case ST_DIFFERENCE:
                    case ST_DIMENSION:
                    case ST_DISJOINT:
                    case ST_DISTANCE:
                    case ST_ENDPOINT:
                    case ST_ENVELOPE:
                    case ST_EQUALS:
                    case ST_EXTERIORRING:
                    case ST_GEOMCOLLFROMTEXT:
                    case ST_GEOMCOLLFROMTXT:
                    case ST_GEOMCOLLFROMWKB:
                    case ST_GEOMETRYCOLLECTIONFROMTEXT:
                    case ST_GEOMETRYCOLLECTIONFROMWKB:
                    case ST_GEOMETRYFROMTEXT:
                    case ST_GEOMETRYFROMWKB:
                    case ST_GEOMETRYN:
                    case ST_GEOMETRYTYPE:
                    case ST_GEOMFROMTEXT:
                    case ST_GEOMFROMWKB:
                    case ST_INTERIORRINGN:
                    case ST_INTERSECTION:
                    case ST_INTERSECTS:
                    case ST_ISCLOSED:
                    case ST_ISEMPTY:
                    case ST_ISSIMPLE:
                    case ST_LINEFROMTEXT:
                    case ST_LINEFROMWKB:
                    case ST_LINESTRINGFROMTEXT:
                    case ST_LINESTRINGFROMWKB:
                    case ST_NUMGEOMETRIES:
                    case ST_NUMINTERIORRING:
                    case ST_NUMINTERIORRINGS:
                    case ST_NUMPOINTS:
                    case ST_OVERLAPS:
                    case ST_POINTFROMTEXT:
                    case ST_POINTFROMWKB:
                    case ST_POINTN:
                    case ST_POLYFROMTEXT:
                    case ST_POLYFROMWKB:
                    case ST_POLYGONFROMTEXT:
                    case ST_POLYGONFROMWKB:
                    case ST_SRID:
                    case ST_STARTPOINT:
                    case ST_SYMDIFFERENCE:
                    case ST_TOUCHES:
                    case ST_UNION:
                    case ST_WITHIN:
                    case ST_X:
                    case ST_Y:
                    case SUBDATE:
                    case SUBSTRING_INDEX:
                    case SUBTIME:
                    case SYSTEM_USER:
                    case TAN:
                    case TIMEDIFF:
                    case TIMESTAMPADD:
                    case TIMESTAMPDIFF:
                    case TIME_FORMAT:
                    case TIME_TO_SEC:
                    case TOUCHES:
                    case TO_BASE64:
                    case TO_DAYS:
                    case TO_SECONDS:
                    case UCASE:
                    case UNCOMPRESS:
                    case UNCOMPRESSED_LENGTH:
                    case UNHEX:
                    case UNIX_TIMESTAMP:
                    case UPDATEXML:
                    case UPPER:
                    case UUID:
                    case UUID_SHORT:
                    case VALIDATE_PASSWORD_STRENGTH:
                    case VERSION:
                    case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
                    case WEEKDAY:
                    case WEEKOFYEAR:
                    case WEIGHT_STRING:
                    case WITHIN:
                    case YEARWEEK:
                    case Y_FUNCTION:
                    case X_FUNCTION:
                    case PLUS:
                    case MINUS:
                    case EXCLAMATION_SYMBOL:
                    case BIT_NOT_OP:
                    case LR_BRACKET:
                    case ZERO_DECIMAL:
                    case ONE_DECIMAL:
                    case TWO_DECIMAL:
                    case CHARSET_REVERSE_QOUTE_STRING:
                    case START_NATIONAL_STRING_LITERAL:
                    case STRING_LITERAL:
                    case DECIMAL_LITERAL:
                    case HEXADECIMAL_LITERAL:
                    case REAL_LITERAL:
                    case NULL_SPEC_LITERAL:
                    case BIT_STRING:
                    case STRING_CHARSET_NAME:
                    case ID:
                    case REVERSE_QUOTE_ID:
                    case LOCAL_ID:
                    case GLOBAL_ID:
                        {
                            State = 3501; selectElement();
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
                State = 3508;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while (_la == COMMA)
                {
                    {
                        {
                            State = 3504; Match(COMMA);
                            State = 3505; selectElement();
                        }
                    }
                    State = 3510;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class SelectElementContext : ParserRuleContext
    {
        public SelectElementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_selectElement; } }

        public SelectElementContext() { }
        public virtual void CopyFrom(SelectElementContext context)
        {
            base.CopyFrom(context);
        }
    }
    public partial class SelectExpressionElementContext : SelectElementContext
    {
        public ExpressionContext expression()
        {
            return GetRuleContext<ExpressionContext>(0);
        }
        public ITerminalNode LOCAL_ID() { return GetToken(MySqlParser.LOCAL_ID, 0); }
        public ITerminalNode VAR_ASSIGN() { return GetToken(MySqlParser.VAR_ASSIGN, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
        public SelectExpressionElementContext(SelectElementContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterSelectExpressionElement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitSelectExpressionElement(this);
        }
    }
    public partial class SelectFunctionElementContext : SelectElementContext
    {
        public FunctionCallContext functionCall()
        {
            return GetRuleContext<FunctionCallContext>(0);
        }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
        public SelectFunctionElementContext(SelectElementContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterSelectFunctionElement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitSelectFunctionElement(this);
        }
    }
    public partial class SelectStarElementContext : SelectElementContext
    {
        public FullIdContext fullId()
        {
            return GetRuleContext<FullIdContext>(0);
        }
        public ITerminalNode DOT() { return GetToken(MySqlParser.DOT, 0); }
        public ITerminalNode STAR() { return GetToken(MySqlParser.STAR, 0); }
        public SelectStarElementContext(SelectElementContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterSelectStarElement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitSelectStarElement(this);
        }
    }
    public partial class SelectColumnElementContext : SelectElementContext
    {
        public FullColumnNameContext fullColumnName()
        {
            return GetRuleContext<FullColumnNameContext>(0);
        }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
        public SelectColumnElementContext(SelectElementContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterSelectColumnElement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitSelectColumnElement(this);
        }
    }

    [RuleVersion(0)]
    public SelectElementContext selectElement()
    {
        SelectElementContext _localctx = new SelectElementContext(Context, State);
        EnterRule(_localctx, 238, RULE_selectElement);
        int _la;
        try
        {
            State = 3540;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 508, Context))
            {
                case 1:
                    _localctx = new SelectStarElementContext(_localctx);
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 3511; fullId();
                        State = 3512; Match(DOT);
                        State = 3513; Match(STAR);
                    }
                    break;
                case 2:
                    _localctx = new SelectColumnElementContext(_localctx);
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 3515; fullColumnName();
                        State = 3520;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 502, Context))
                        {
                            case 1:
                                {
                                    State = 3517;
                                    ErrorHandler.Sync(this);
                                    _la = TokenStream.LA(1);
                                    if (_la == AS)
                                    {
                                        {
                                            State = 3516; Match(AS);
                                        }
                                    }

                                    State = 3519; uid();
                                }
                                break;
                        }
                    }
                    break;
                case 3:
                    _localctx = new SelectFunctionElementContext(_localctx);
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 3522; functionCall();
                        State = 3527;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 504, Context))
                        {
                            case 1:
                                {
                                    State = 3524;
                                    ErrorHandler.Sync(this);
                                    _la = TokenStream.LA(1);
                                    if (_la == AS)
                                    {
                                        {
                                            State = 3523; Match(AS);
                                        }
                                    }

                                    State = 3526; uid();
                                }
                                break;
                        }
                    }
                    break;
                case 4:
                    _localctx = new SelectExpressionElementContext(_localctx);
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 3531;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 505, Context))
                        {
                            case 1:
                                {
                                    State = 3529; Match(LOCAL_ID);
                                    State = 3530; Match(VAR_ASSIGN);
                                }
                                break;
                        }
                        State = 3533; expression(0);
                        State = 3538;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 507, Context))
                        {
                            case 1:
                                {
                                    State = 3535;
                                    ErrorHandler.Sync(this);
                                    _la = TokenStream.LA(1);
                                    if (_la == AS)
                                    {
                                        {
                                            State = 3534; Match(AS);
                                        }
                                    }

                                    State = 3537; uid();
                                }
                                break;
                        }
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class SelectIntoExpressionContext : ParserRuleContext
    {
        public SelectIntoExpressionContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_selectIntoExpression; } }

        public SelectIntoExpressionContext() { }
        public virtual void CopyFrom(SelectIntoExpressionContext context)
        {
            base.CopyFrom(context);
        }
    }
    public partial class SelectIntoVariablesContext : SelectIntoExpressionContext
    {
        public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
        public AssignmentFieldContext[] assignmentField()
        {
            return GetRuleContexts<AssignmentFieldContext>();
        }
        public AssignmentFieldContext assignmentField(int i)
        {
            return GetRuleContext<AssignmentFieldContext>(i);
        }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public SelectIntoVariablesContext(SelectIntoExpressionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterSelectIntoVariables(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitSelectIntoVariables(this);
        }
    }
    public partial class SelectIntoTextFileContext : SelectIntoExpressionContext
    {
        public IToken filename;
        public CharsetNameContext charset;
        public IToken fieldsFormat;
        public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
        public ITerminalNode OUTFILE() { return GetToken(MySqlParser.OUTFILE, 0); }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
        public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
        public ITerminalNode LINES() { return GetToken(MySqlParser.LINES, 0); }
        public CharsetNameContext charsetName()
        {
            return GetRuleContext<CharsetNameContext>(0);
        }
        public ITerminalNode FIELDS() { return GetToken(MySqlParser.FIELDS, 0); }
        public ITerminalNode COLUMNS() { return GetToken(MySqlParser.COLUMNS, 0); }
        public SelectFieldsIntoContext[] selectFieldsInto()
        {
            return GetRuleContexts<SelectFieldsIntoContext>();
        }
        public SelectFieldsIntoContext selectFieldsInto(int i)
        {
            return GetRuleContext<SelectFieldsIntoContext>(i);
        }
        public SelectLinesIntoContext[] selectLinesInto()
        {
            return GetRuleContexts<SelectLinesIntoContext>();
        }
        public SelectLinesIntoContext selectLinesInto(int i)
        {
            return GetRuleContext<SelectLinesIntoContext>(i);
        }
        public SelectIntoTextFileContext(SelectIntoExpressionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterSelectIntoTextFile(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitSelectIntoTextFile(this);
        }
    }
    public partial class SelectIntoDumpFileContext : SelectIntoExpressionContext
    {
        public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
        public ITerminalNode DUMPFILE() { return GetToken(MySqlParser.DUMPFILE, 0); }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public SelectIntoDumpFileContext(SelectIntoExpressionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterSelectIntoDumpFile(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitSelectIntoDumpFile(this);
        }
    }

    [RuleVersion(0)]
    public SelectIntoExpressionContext selectIntoExpression()
    {
        SelectIntoExpressionContext _localctx = new SelectIntoExpressionContext(Context, State);
        EnterRule(_localctx, 240, RULE_selectIntoExpression);
        int _la;
        try
        {
            State = 3578;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 515, Context))
            {
                case 1:
                    _localctx = new SelectIntoVariablesContext(_localctx);
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 3542; Match(INTO);
                        State = 3543; assignmentField();
                        State = 3548;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        while (_la == COMMA)
                        {
                            {
                                {
                                    State = 3544; Match(COMMA);
                                    State = 3545; assignmentField();
                                }
                            }
                            State = 3550;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                        }
                    }
                    break;
                case 2:
                    _localctx = new SelectIntoDumpFileContext(_localctx);
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 3551; Match(INTO);
                        State = 3552; Match(DUMPFILE);
                        State = 3553; Match(STRING_LITERAL);
                    }
                    break;
                case 3:
                    _localctx = new SelectIntoTextFileContext(_localctx);
                    EnterOuterAlt(_localctx, 3);
                    {
                        {
                            State = 3554; Match(INTO);
                            State = 3555; Match(OUTFILE);
                            State = 3556; ((SelectIntoTextFileContext)_localctx).filename = Match(STRING_LITERAL);
                            State = 3560;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            if (_la == CHARACTER)
                            {
                                {
                                    State = 3557; Match(CHARACTER);
                                    State = 3558; Match(SET);
                                    State = 3559; ((SelectIntoTextFileContext)_localctx).charset = charsetName();
                                }
                            }

                            State = 3568;
                            ErrorHandler.Sync(this);
                            switch (Interpreter.AdaptivePredict(TokenStream, 512, Context))
                            {
                                case 1:
                                    {
                                        State = 3562;
                                        ((SelectIntoTextFileContext)_localctx).fieldsFormat = TokenStream.LT(1);
                                        _la = TokenStream.LA(1);
                                        if (!(_la == COLUMNS || _la == FIELDS))
                                        {
                                            ((SelectIntoTextFileContext)_localctx).fieldsFormat = ErrorHandler.RecoverInline(this);
                                        }
                                        else
                                        {
                                            ErrorHandler.ReportMatch(this);
                                            Consume();
                                        }
                                        State = 3564;
                                        ErrorHandler.Sync(this);
                                        _la = TokenStream.LA(1);
                                        do
                                        {
                                            {
                                                {
                                                    State = 3563; selectFieldsInto();
                                                }
                                            }
                                            State = 3566;
                                            ErrorHandler.Sync(this);
                                            _la = TokenStream.LA(1);
                                        } while (_la == ENCLOSED || _la == ESCAPED || _la == OPTIONALLY || _la == TERMINATED);
                                    }
                                    break;
                            }
                            State = 3576;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            if (_la == LINES)
                            {
                                {
                                    State = 3570; Match(LINES);
                                    State = 3572;
                                    ErrorHandler.Sync(this);
                                    _la = TokenStream.LA(1);
                                    do
                                    {
                                        {
                                            {
                                                State = 3571; selectLinesInto();
                                            }
                                        }
                                        State = 3574;
                                        ErrorHandler.Sync(this);
                                        _la = TokenStream.LA(1);
                                    } while (_la == STARTING || _la == TERMINATED);
                                }
                            }

                        }
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class SelectFieldsIntoContext : ParserRuleContext
    {
        public IToken terminationField;
        public IToken enclosion;
        public IToken escaping;
        public ITerminalNode TERMINATED() { return GetToken(MySqlParser.TERMINATED, 0); }
        public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public ITerminalNode ENCLOSED() { return GetToken(MySqlParser.ENCLOSED, 0); }
        public ITerminalNode OPTIONALLY() { return GetToken(MySqlParser.OPTIONALLY, 0); }
        public ITerminalNode ESCAPED() { return GetToken(MySqlParser.ESCAPED, 0); }
        public SelectFieldsIntoContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_selectFieldsInto; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterSelectFieldsInto(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitSelectFieldsInto(this);
        }
    }

    [RuleVersion(0)]
    public SelectFieldsIntoContext selectFieldsInto()
    {
        SelectFieldsIntoContext _localctx = new SelectFieldsIntoContext(Context, State);
        EnterRule(_localctx, 242, RULE_selectFieldsInto);
        int _la;
        try
        {
            State = 3592;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case TERMINATED:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 3580; Match(TERMINATED);
                        State = 3581; Match(BY);
                        State = 3582; _localctx.terminationField = Match(STRING_LITERAL);
                    }
                    break;
                case ENCLOSED:
                case OPTIONALLY:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 3584;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == OPTIONALLY)
                        {
                            {
                                State = 3583; Match(OPTIONALLY);
                            }
                        }

                        State = 3586; Match(ENCLOSED);
                        State = 3587; Match(BY);
                        State = 3588; _localctx.enclosion = Match(STRING_LITERAL);
                    }
                    break;
                case ESCAPED:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 3589; Match(ESCAPED);
                        State = 3590; Match(BY);
                        State = 3591; _localctx.escaping = Match(STRING_LITERAL);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class SelectLinesIntoContext : ParserRuleContext
    {
        public IToken starting;
        public IToken terminationLine;
        public ITerminalNode STARTING() { return GetToken(MySqlParser.STARTING, 0); }
        public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public ITerminalNode TERMINATED() { return GetToken(MySqlParser.TERMINATED, 0); }
        public SelectLinesIntoContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_selectLinesInto; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterSelectLinesInto(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitSelectLinesInto(this);
        }
    }

    [RuleVersion(0)]
    public SelectLinesIntoContext selectLinesInto()
    {
        SelectLinesIntoContext _localctx = new SelectLinesIntoContext(Context, State);
        EnterRule(_localctx, 244, RULE_selectLinesInto);
        try
        {
            State = 3600;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case STARTING:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 3594; Match(STARTING);
                        State = 3595; Match(BY);
                        State = 3596; _localctx.starting = Match(STRING_LITERAL);
                    }
                    break;
                case TERMINATED:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 3597; Match(TERMINATED);
                        State = 3598; Match(BY);
                        State = 3599; _localctx.terminationLine = Match(STRING_LITERAL);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class FromClauseContext : ParserRuleContext
    {
        public ExpressionContext whereExpr;
        public ExpressionContext havingExpr;
        public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
        public TableSourcesContext tableSources()
        {
            return GetRuleContext<TableSourcesContext>(0);
        }
        public ITerminalNode WHERE() { return GetToken(MySqlParser.WHERE, 0); }
        public ITerminalNode GROUP() { return GetToken(MySqlParser.GROUP, 0); }
        public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
        public GroupByItemContext[] groupByItem()
        {
            return GetRuleContexts<GroupByItemContext>();
        }
        public GroupByItemContext groupByItem(int i)
        {
            return GetRuleContext<GroupByItemContext>(i);
        }
        public ITerminalNode HAVING() { return GetToken(MySqlParser.HAVING, 0); }
        public ExpressionContext[] expression()
        {
            return GetRuleContexts<ExpressionContext>();
        }
        public ExpressionContext expression(int i)
        {
            return GetRuleContext<ExpressionContext>(i);
        }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
        public ITerminalNode ROLLUP() { return GetToken(MySqlParser.ROLLUP, 0); }
        public FromClauseContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_fromClause; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterFromClause(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitFromClause(this);
        }
    }

    [RuleVersion(0)]
    public FromClauseContext fromClause()
    {
        FromClauseContext _localctx = new FromClauseContext(Context, State);
        EnterRule(_localctx, 246, RULE_fromClause);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 3602; Match(FROM);
                State = 3603; tableSources();
                State = 3606;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == WHERE)
                {
                    {
                        State = 3604; Match(WHERE);
                        State = 3605; _localctx.whereExpr = expression(0);
                    }
                }

                State = 3622;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == GROUP)
                {
                    {
                        State = 3608; Match(GROUP);
                        State = 3609; Match(BY);
                        State = 3610; groupByItem();
                        State = 3615;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        while (_la == COMMA)
                        {
                            {
                                {
                                    State = 3611; Match(COMMA);
                                    State = 3612; groupByItem();
                                }
                            }
                            State = 3617;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                        }
                        State = 3620;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 521, Context))
                        {
                            case 1:
                                {
                                    State = 3618; Match(WITH);
                                    State = 3619; Match(ROLLUP);
                                }
                                break;
                        }
                    }
                }

                State = 3626;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == HAVING)
                {
                    {
                        State = 3624; Match(HAVING);
                        State = 3625; _localctx.havingExpr = expression(0);
                    }
                }

            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class GroupByItemContext : ParserRuleContext
    {
        public IToken order;
        public ExpressionContext expression()
        {
            return GetRuleContext<ExpressionContext>(0);
        }
        public ITerminalNode ASC() { return GetToken(MySqlParser.ASC, 0); }
        public ITerminalNode DESC() { return GetToken(MySqlParser.DESC, 0); }
        public GroupByItemContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_groupByItem; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterGroupByItem(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitGroupByItem(this);
        }
    }

    [RuleVersion(0)]
    public GroupByItemContext groupByItem()
    {
        GroupByItemContext _localctx = new GroupByItemContext(Context, State);
        EnterRule(_localctx, 248, RULE_groupByItem);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 3628; expression(0);
                State = 3630;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 524, Context))
                {
                    case 1:
                        {
                            State = 3629;
                            _localctx.order = TokenStream.LT(1);
                            _la = TokenStream.LA(1);
                            if (!(_la == ASC || _la == DESC))
                            {
                                _localctx.order = ErrorHandler.RecoverInline(this);
                            }
                            else
                            {
                                ErrorHandler.ReportMatch(this);
                                Consume();
                            }
                        }
                        break;
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class LimitClauseContext : ParserRuleContext
    {
        public LimitClauseAtomContext offset;
        public LimitClauseAtomContext limit;
        public ITerminalNode LIMIT() { return GetToken(MySqlParser.LIMIT, 0); }
        public ITerminalNode OFFSET() { return GetToken(MySqlParser.OFFSET, 0); }
        public LimitClauseAtomContext[] limitClauseAtom()
        {
            return GetRuleContexts<LimitClauseAtomContext>();
        }
        public LimitClauseAtomContext limitClauseAtom(int i)
        {
            return GetRuleContext<LimitClauseAtomContext>(i);
        }
        public ITerminalNode COMMA() { return GetToken(MySqlParser.COMMA, 0); }
        public LimitClauseContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_limitClause; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterLimitClause(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitLimitClause(this);
        }
    }

    [RuleVersion(0)]
    public LimitClauseContext limitClause()
    {
        LimitClauseContext _localctx = new LimitClauseContext(Context, State);
        EnterRule(_localctx, 250, RULE_limitClause);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 3632; Match(LIMIT);
                State = 3643;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 526, Context))
                {
                    case 1:
                        {
                            State = 3636;
                            ErrorHandler.Sync(this);
                            switch (Interpreter.AdaptivePredict(TokenStream, 525, Context))
                            {
                                case 1:
                                    {
                                        State = 3633; _localctx.offset = limitClauseAtom();
                                        State = 3634; Match(COMMA);
                                    }
                                    break;
                            }
                            State = 3638; _localctx.limit = limitClauseAtom();
                        }
                        break;
                    case 2:
                        {
                            State = 3639; _localctx.limit = limitClauseAtom();
                            State = 3640; Match(OFFSET);
                            State = 3641; _localctx.offset = limitClauseAtom();
                        }
                        break;
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class LimitClauseAtomContext : ParserRuleContext
    {
        public DecimalLiteralContext decimalLiteral()
        {
            return GetRuleContext<DecimalLiteralContext>(0);
        }
        public MysqlVariableContext mysqlVariable()
        {
            return GetRuleContext<MysqlVariableContext>(0);
        }
        public LimitClauseAtomContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_limitClauseAtom; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterLimitClauseAtom(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitLimitClauseAtom(this);
        }
    }

    [RuleVersion(0)]
    public LimitClauseAtomContext limitClauseAtom()
    {
        LimitClauseAtomContext _localctx = new LimitClauseAtomContext(Context, State);
        EnterRule(_localctx, 252, RULE_limitClauseAtom);
        try
        {
            State = 3647;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case ZERO_DECIMAL:
                case ONE_DECIMAL:
                case TWO_DECIMAL:
                case DECIMAL_LITERAL:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 3645; decimalLiteral();
                    }
                    break;
                case LOCAL_ID:
                case GLOBAL_ID:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 3646; mysqlVariable();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class StartTransactionContext : ParserRuleContext
    {
        public ITerminalNode START() { return GetToken(MySqlParser.START, 0); }
        public ITerminalNode TRANSACTION() { return GetToken(MySqlParser.TRANSACTION, 0); }
        public TransactionModeContext[] transactionMode()
        {
            return GetRuleContexts<TransactionModeContext>();
        }
        public TransactionModeContext transactionMode(int i)
        {
            return GetRuleContext<TransactionModeContext>(i);
        }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public StartTransactionContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_startTransaction; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterStartTransaction(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitStartTransaction(this);
        }
    }

    [RuleVersion(0)]
    public StartTransactionContext startTransaction()
    {
        StartTransactionContext _localctx = new StartTransactionContext(Context, State);
        EnterRule(_localctx, 254, RULE_startTransaction);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 3649; Match(START);
                State = 3650; Match(TRANSACTION);
                State = 3659;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == READ || _la == WITH)
                {
                    {
                        State = 3651; transactionMode();
                        State = 3656;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        while (_la == COMMA)
                        {
                            {
                                {
                                    State = 3652; Match(COMMA);
                                    State = 3653; transactionMode();
                                }
                            }
                            State = 3658;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                        }
                    }
                }

            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class BeginWorkContext : ParserRuleContext
    {
        public ITerminalNode BEGIN() { return GetToken(MySqlParser.BEGIN, 0); }
        public ITerminalNode WORK() { return GetToken(MySqlParser.WORK, 0); }
        public BeginWorkContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_beginWork; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterBeginWork(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitBeginWork(this);
        }
    }

    [RuleVersion(0)]
    public BeginWorkContext beginWork()
    {
        BeginWorkContext _localctx = new BeginWorkContext(Context, State);
        EnterRule(_localctx, 256, RULE_beginWork);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 3661; Match(BEGIN);
                State = 3663;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == WORK)
                {
                    {
                        State = 3662; Match(WORK);
                    }
                }

            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class CommitWorkContext : ParserRuleContext
    {
        public IToken nochain;
        public IToken norelease;
        public ITerminalNode COMMIT() { return GetToken(MySqlParser.COMMIT, 0); }
        public ITerminalNode WORK() { return GetToken(MySqlParser.WORK, 0); }
        public ITerminalNode AND() { return GetToken(MySqlParser.AND, 0); }
        public ITerminalNode CHAIN() { return GetToken(MySqlParser.CHAIN, 0); }
        public ITerminalNode RELEASE() { return GetToken(MySqlParser.RELEASE, 0); }
        public ITerminalNode[] NO() { return GetTokens(MySqlParser.NO); }
        public ITerminalNode NO(int i)
        {
            return GetToken(MySqlParser.NO, i);
        }
        public CommitWorkContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_commitWork; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterCommitWork(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitCommitWork(this);
        }
    }

    [RuleVersion(0)]
    public CommitWorkContext commitWork()
    {
        CommitWorkContext _localctx = new CommitWorkContext(Context, State);
        EnterRule(_localctx, 258, RULE_commitWork);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 3665; Match(COMMIT);
                State = 3667;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == WORK)
                {
                    {
                        State = 3666; Match(WORK);
                    }
                }

                State = 3674;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == AND)
                {
                    {
                        State = 3669; Match(AND);
                        State = 3671;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == NO)
                        {
                            {
                                State = 3670; _localctx.nochain = Match(NO);
                            }
                        }

                        State = 3673; Match(CHAIN);
                    }
                }

                State = 3680;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 535, Context))
                {
                    case 1:
                        {
                            State = 3677;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            if (_la == NO)
                            {
                                {
                                    State = 3676; _localctx.norelease = Match(NO);
                                }
                            }

                            State = 3679; Match(RELEASE);
                        }
                        break;
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class RollbackWorkContext : ParserRuleContext
    {
        public IToken nochain;
        public IToken norelease;
        public ITerminalNode ROLLBACK() { return GetToken(MySqlParser.ROLLBACK, 0); }
        public ITerminalNode WORK() { return GetToken(MySqlParser.WORK, 0); }
        public ITerminalNode AND() { return GetToken(MySqlParser.AND, 0); }
        public ITerminalNode CHAIN() { return GetToken(MySqlParser.CHAIN, 0); }
        public ITerminalNode RELEASE() { return GetToken(MySqlParser.RELEASE, 0); }
        public ITerminalNode[] NO() { return GetTokens(MySqlParser.NO); }
        public ITerminalNode NO(int i)
        {
            return GetToken(MySqlParser.NO, i);
        }
        public RollbackWorkContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_rollbackWork; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterRollbackWork(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitRollbackWork(this);
        }
    }

    [RuleVersion(0)]
    public RollbackWorkContext rollbackWork()
    {
        RollbackWorkContext _localctx = new RollbackWorkContext(Context, State);
        EnterRule(_localctx, 260, RULE_rollbackWork);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 3682; Match(ROLLBACK);
                State = 3684;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == WORK)
                {
                    {
                        State = 3683; Match(WORK);
                    }
                }

                State = 3691;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == AND)
                {
                    {
                        State = 3686; Match(AND);
                        State = 3688;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == NO)
                        {
                            {
                                State = 3687; _localctx.nochain = Match(NO);
                            }
                        }

                        State = 3690; Match(CHAIN);
                    }
                }

                State = 3697;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 540, Context))
                {
                    case 1:
                        {
                            State = 3694;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            if (_la == NO)
                            {
                                {
                                    State = 3693; _localctx.norelease = Match(NO);
                                }
                            }

                            State = 3696; Match(RELEASE);
                        }
                        break;
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class SavepointStatementContext : ParserRuleContext
    {
        public ITerminalNode SAVEPOINT() { return GetToken(MySqlParser.SAVEPOINT, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public SavepointStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_savepointStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterSavepointStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitSavepointStatement(this);
        }
    }

    [RuleVersion(0)]
    public SavepointStatementContext savepointStatement()
    {
        SavepointStatementContext _localctx = new SavepointStatementContext(Context, State);
        EnterRule(_localctx, 262, RULE_savepointStatement);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 3699; Match(SAVEPOINT);
                State = 3700; uid();
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class RollbackStatementContext : ParserRuleContext
    {
        public ITerminalNode ROLLBACK() { return GetToken(MySqlParser.ROLLBACK, 0); }
        public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public ITerminalNode WORK() { return GetToken(MySqlParser.WORK, 0); }
        public ITerminalNode SAVEPOINT() { return GetToken(MySqlParser.SAVEPOINT, 0); }
        public RollbackStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_rollbackStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterRollbackStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitRollbackStatement(this);
        }
    }

    [RuleVersion(0)]
    public RollbackStatementContext rollbackStatement()
    {
        RollbackStatementContext _localctx = new RollbackStatementContext(Context, State);
        EnterRule(_localctx, 264, RULE_rollbackStatement);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 3702; Match(ROLLBACK);
                State = 3704;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == WORK)
                {
                    {
                        State = 3703; Match(WORK);
                    }
                }

                State = 3706; Match(TO);
                State = 3708;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 542, Context))
                {
                    case 1:
                        {
                            State = 3707; Match(SAVEPOINT);
                        }
                        break;
                }
                State = 3710; uid();
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ReleaseStatementContext : ParserRuleContext
    {
        public ITerminalNode RELEASE() { return GetToken(MySqlParser.RELEASE, 0); }
        public ITerminalNode SAVEPOINT() { return GetToken(MySqlParser.SAVEPOINT, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public ReleaseStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_releaseStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterReleaseStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitReleaseStatement(this);
        }
    }

    [RuleVersion(0)]
    public ReleaseStatementContext releaseStatement()
    {
        ReleaseStatementContext _localctx = new ReleaseStatementContext(Context, State);
        EnterRule(_localctx, 266, RULE_releaseStatement);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 3712; Match(RELEASE);
                State = 3713; Match(SAVEPOINT);
                State = 3714; uid();
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class LockTablesContext : ParserRuleContext
    {
        public ITerminalNode LOCK() { return GetToken(MySqlParser.LOCK, 0); }
        public ITerminalNode TABLES() { return GetToken(MySqlParser.TABLES, 0); }
        public LockTableElementContext[] lockTableElement()
        {
            return GetRuleContexts<LockTableElementContext>();
        }
        public LockTableElementContext lockTableElement(int i)
        {
            return GetRuleContext<LockTableElementContext>(i);
        }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public LockTablesContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_lockTables; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterLockTables(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitLockTables(this);
        }
    }

    [RuleVersion(0)]
    public LockTablesContext lockTables()
    {
        LockTablesContext _localctx = new LockTablesContext(Context, State);
        EnterRule(_localctx, 268, RULE_lockTables);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 3716; Match(LOCK);
                State = 3717; Match(TABLES);
                State = 3718; lockTableElement();
                State = 3723;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while (_la == COMMA)
                {
                    {
                        {
                            State = 3719; Match(COMMA);
                            State = 3720; lockTableElement();
                        }
                    }
                    State = 3725;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class UnlockTablesContext : ParserRuleContext
    {
        public ITerminalNode UNLOCK() { return GetToken(MySqlParser.UNLOCK, 0); }
        public ITerminalNode TABLES() { return GetToken(MySqlParser.TABLES, 0); }
        public UnlockTablesContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_unlockTables; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterUnlockTables(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitUnlockTables(this);
        }
    }

    [RuleVersion(0)]
    public UnlockTablesContext unlockTables()
    {
        UnlockTablesContext _localctx = new UnlockTablesContext(Context, State);
        EnterRule(_localctx, 270, RULE_unlockTables);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 3726; Match(UNLOCK);
                State = 3727; Match(TABLES);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class SetAutocommitStatementContext : ParserRuleContext
    {
        public IToken autocommitValue;
        public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
        public ITerminalNode AUTOCOMMIT() { return GetToken(MySqlParser.AUTOCOMMIT, 0); }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public ITerminalNode ZERO_DECIMAL() { return GetToken(MySqlParser.ZERO_DECIMAL, 0); }
        public ITerminalNode ONE_DECIMAL() { return GetToken(MySqlParser.ONE_DECIMAL, 0); }
        public SetAutocommitStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_setAutocommitStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterSetAutocommitStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitSetAutocommitStatement(this);
        }
    }

    [RuleVersion(0)]
    public SetAutocommitStatementContext setAutocommitStatement()
    {
        SetAutocommitStatementContext _localctx = new SetAutocommitStatementContext(Context, State);
        EnterRule(_localctx, 272, RULE_setAutocommitStatement);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 3729; Match(SET);
                State = 3730; Match(AUTOCOMMIT);
                State = 3731; Match(EQUAL_SYMBOL);
                State = 3732;
                _localctx.autocommitValue = TokenStream.LT(1);
                _la = TokenStream.LA(1);
                if (!(_la == ZERO_DECIMAL || _la == ONE_DECIMAL))
                {
                    _localctx.autocommitValue = ErrorHandler.RecoverInline(this);
                }
                else
                {
                    ErrorHandler.ReportMatch(this);
                    Consume();
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class SetTransactionStatementContext : ParserRuleContext
    {
        public IToken transactionContext;
        public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
        public ITerminalNode TRANSACTION() { return GetToken(MySqlParser.TRANSACTION, 0); }
        public TransactionOptionContext[] transactionOption()
        {
            return GetRuleContexts<TransactionOptionContext>();
        }
        public TransactionOptionContext transactionOption(int i)
        {
            return GetRuleContext<TransactionOptionContext>(i);
        }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public ITerminalNode GLOBAL() { return GetToken(MySqlParser.GLOBAL, 0); }
        public ITerminalNode SESSION() { return GetToken(MySqlParser.SESSION, 0); }
        public SetTransactionStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_setTransactionStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterSetTransactionStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitSetTransactionStatement(this);
        }
    }

    [RuleVersion(0)]
    public SetTransactionStatementContext setTransactionStatement()
    {
        SetTransactionStatementContext _localctx = new SetTransactionStatementContext(Context, State);
        EnterRule(_localctx, 274, RULE_setTransactionStatement);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 3734; Match(SET);
                State = 3736;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == GLOBAL || _la == SESSION)
                {
                    {
                        State = 3735;
                        _localctx.transactionContext = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == GLOBAL || _la == SESSION))
                        {
                            _localctx.transactionContext = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                }

                State = 3738; Match(TRANSACTION);
                State = 3739; transactionOption();
                State = 3744;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while (_la == COMMA)
                {
                    {
                        {
                            State = 3740; Match(COMMA);
                            State = 3741; transactionOption();
                        }
                    }
                    State = 3746;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class TransactionModeContext : ParserRuleContext
    {
        public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
        public ITerminalNode CONSISTENT() { return GetToken(MySqlParser.CONSISTENT, 0); }
        public ITerminalNode SNAPSHOT() { return GetToken(MySqlParser.SNAPSHOT, 0); }
        public ITerminalNode READ() { return GetToken(MySqlParser.READ, 0); }
        public ITerminalNode WRITE() { return GetToken(MySqlParser.WRITE, 0); }
        public ITerminalNode ONLY() { return GetToken(MySqlParser.ONLY, 0); }
        public TransactionModeContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_transactionMode; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterTransactionMode(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitTransactionMode(this);
        }
    }

    [RuleVersion(0)]
    public TransactionModeContext transactionMode()
    {
        TransactionModeContext _localctx = new TransactionModeContext(Context, State);
        EnterRule(_localctx, 276, RULE_transactionMode);
        try
        {
            State = 3754;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 546, Context))
            {
                case 1:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 3747; Match(WITH);
                        State = 3748; Match(CONSISTENT);
                        State = 3749; Match(SNAPSHOT);
                    }
                    break;
                case 2:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 3750; Match(READ);
                        State = 3751; Match(WRITE);
                    }
                    break;
                case 3:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 3752; Match(READ);
                        State = 3753; Match(ONLY);
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class LockTableElementContext : ParserRuleContext
    {
        public TableNameContext tableName()
        {
            return GetRuleContext<TableNameContext>(0);
        }
        public LockActionContext lockAction()
        {
            return GetRuleContext<LockActionContext>(0);
        }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
        public LockTableElementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_lockTableElement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterLockTableElement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitLockTableElement(this);
        }
    }

    [RuleVersion(0)]
    public LockTableElementContext lockTableElement()
    {
        LockTableElementContext _localctx = new LockTableElementContext(Context, State);
        EnterRule(_localctx, 278, RULE_lockTableElement);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 3756; tableName();
                State = 3761;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DIAGNOSTICS))) != 0) || ((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (LEFT - 87)) | (1L << (NUMBER - 87)) | (1L << (RIGHT - 87)))) != 0) || ((((_la - 151)) & ~0x3f) == 0 && ((1L << (_la - 151)) & ((1L << (STACKED - 151)) | (1L << (DATE - 151)) | (1L << (TIME - 151)) | (1L << (TIMESTAMP - 151)) | (1L << (DATETIME - 151)) | (1L << (YEAR - 151)) | (1L << (TEXT - 151)) | (1L << (ENUM - 151)) | (1L << (SERIAL - 151)))) != 0) || ((((_la - 228)) & ~0x3f) == 0 && ((1L << (_la - 228)) & ((1L << (COUNT - 228)) | (1L << (POSITION - 228)) | (1L << (ACCOUNT - 228)) | (1L << (ACTION - 228)) | (1L << (AFTER - 228)) | (1L << (AGGREGATE - 228)) | (1L << (ALGORITHM - 228)) | (1L << (ANY - 228)) | (1L << (AT - 228)) | (1L << (AUTHORS - 228)) | (1L << (AUTOCOMMIT - 228)) | (1L << (AUTOEXTEND_SIZE - 228)) | (1L << (AUTO_INCREMENT - 228)) | (1L << (AVG_ROW_LENGTH - 228)) | (1L << (BEGIN - 228)) | (1L << (BINLOG - 228)) | (1L << (BIT - 228)) | (1L << (BLOCK - 228)) | (1L << (BOOL - 228)) | (1L << (BOOLEAN - 228)) | (1L << (BTREE - 228)) | (1L << (CACHE - 228)) | (1L << (CASCADED - 228)) | (1L << (CHAIN - 228)) | (1L << (CHANGED - 228)) | (1L << (CHANNEL - 228)) | (1L << (CHECKSUM - 228)) | (1L << (PAGE_CHECKSUM - 228)) | (1L << (CIPHER - 228)) | (1L << (CLASS_ORIGIN - 228)) | (1L << (CLIENT - 228)) | (1L << (CLOSE - 228)) | (1L << (COALESCE - 228)) | (1L << (CODE - 228)) | (1L << (COLUMNS - 228)))) != 0) || ((((_la - 292)) & ~0x3f) == 0 && ((1L << (_la - 292)) & ((1L << (COLUMN_FORMAT - 292)) | (1L << (COLUMN_NAME - 292)) | (1L << (COMMENT - 292)) | (1L << (COMMIT - 292)) | (1L << (COMPACT - 292)) | (1L << (COMPLETION - 292)) | (1L << (COMPRESSED - 292)) | (1L << (COMPRESSION - 292)) | (1L << (CONCURRENT - 292)) | (1L << (CONNECTION - 292)) | (1L << (CONSISTENT - 292)) | (1L << (CONSTRAINT_CATALOG - 292)) | (1L << (CONSTRAINT_SCHEMA - 292)) | (1L << (CONSTRAINT_NAME - 292)) | (1L << (CONTAINS - 292)) | (1L << (CONTEXT - 292)) | (1L << (CONTRIBUTORS - 292)) | (1L << (COPY - 292)) | (1L << (CPU - 292)) | (1L << (CURSOR_NAME - 292)) | (1L << (DATA - 292)) | (1L << (DATAFILE - 292)) | (1L << (DEALLOCATE - 292)) | (1L << (DEFAULT_AUTH - 292)) | (1L << (DEFINER - 292)) | (1L << (DELAY_KEY_WRITE - 292)) | (1L << (DES_KEY_FILE - 292)) | (1L << (DIRECTORY - 292)) | (1L << (DISABLE - 292)) | (1L << (DISCARD - 292)) | (1L << (DISK - 292)) | (1L << (DO - 292)) | (1L << (DUMPFILE - 292)) | (1L << (DUPLICATE - 292)) | (1L << (DYNAMIC - 292)) | (1L << (ENABLE - 292)) | (1L << (ENCRYPTION - 292)) | (1L << (END - 292)) | (1L << (ENDS - 292)) | (1L << (ENGINE - 292)) | (1L << (ENGINES - 292)) | (1L << (ERROR - 292)) | (1L << (ERRORS - 292)) | (1L << (ESCAPE - 292)) | (1L << (EVEN - 292)) | (1L << (EVENT - 292)) | (1L << (EVENTS - 292)) | (1L << (EVERY - 292)) | (1L << (EXCHANGE - 292)) | (1L << (EXCLUSIVE - 292)) | (1L << (EXPIRE - 292)) | (1L << (EXPORT - 292)) | (1L << (EXTENDED - 292)) | (1L << (EXTENT_SIZE - 292)) | (1L << (FAST - 292)) | (1L << (FAULTS - 292)) | (1L << (FIELDS - 292)) | (1L << (FILE_BLOCK_SIZE - 292)) | (1L << (FILTER - 292)) | (1L << (FIRST - 292)) | (1L << (FIXED - 292)) | (1L << (FLUSH - 292)) | (1L << (FOLLOWS - 292)) | (1L << (FOUND - 292)))) != 0) || ((((_la - 356)) & ~0x3f) == 0 && ((1L << (_la - 356)) & ((1L << (FULL - 356)) | (1L << (FUNCTION - 356)) | (1L << (GENERAL - 356)) | (1L << (GLOBAL - 356)) | (1L << (GRANTS - 356)) | (1L << (GROUP_REPLICATION - 356)) | (1L << (HANDLER - 356)) | (1L << (HASH - 356)) | (1L << (HELP - 356)) | (1L << (HOST - 356)) | (1L << (HOSTS - 356)) | (1L << (IDENTIFIED - 356)) | (1L << (IGNORE_SERVER_IDS - 356)) | (1L << (IMPORT - 356)) | (1L << (INDEXES - 356)) | (1L << (INITIAL_SIZE - 356)) | (1L << (INPLACE - 356)) | (1L << (INSERT_METHOD - 356)) | (1L << (INSTALL - 356)) | (1L << (INSTANCE - 356)) | (1L << (INVISIBLE - 356)) | (1L << (INVOKER - 356)) | (1L << (IO - 356)) | (1L << (IO_THREAD - 356)) | (1L << (IPC - 356)) | (1L << (ISOLATION - 356)) | (1L << (ISSUER - 356)) | (1L << (JSON - 356)) | (1L << (KEY_BLOCK_SIZE - 356)) | (1L << (LANGUAGE - 356)) | (1L << (LAST - 356)) | (1L << (LEAVES - 356)) | (1L << (LESS - 356)) | (1L << (LEVEL - 356)) | (1L << (LIST - 356)) | (1L << (LOCAL - 356)) | (1L << (LOGFILE - 356)) | (1L << (LOGS - 356)) | (1L << (MASTER - 356)) | (1L << (MASTER_AUTO_POSITION - 356)) | (1L << (MASTER_CONNECT_RETRY - 356)) | (1L << (MASTER_DELAY - 356)) | (1L << (MASTER_HEARTBEAT_PERIOD - 356)) | (1L << (MASTER_HOST - 356)) | (1L << (MASTER_LOG_FILE - 356)) | (1L << (MASTER_LOG_POS - 356)) | (1L << (MASTER_PASSWORD - 356)) | (1L << (MASTER_PORT - 356)) | (1L << (MASTER_RETRY_COUNT - 356)) | (1L << (MASTER_SSL - 356)) | (1L << (MASTER_SSL_CA - 356)) | (1L << (MASTER_SSL_CAPATH - 356)) | (1L << (MASTER_SSL_CERT - 356)) | (1L << (MASTER_SSL_CIPHER - 356)) | (1L << (MASTER_SSL_CRL - 356)) | (1L << (MASTER_SSL_CRLPATH - 356)) | (1L << (MASTER_SSL_KEY - 356)) | (1L << (MASTER_TLS_VERSION - 356)) | (1L << (MASTER_USER - 356)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 356)) | (1L << (MAX_QUERIES_PER_HOUR - 356)) | (1L << (MAX_ROWS - 356)) | (1L << (MAX_SIZE - 356)) | (1L << (MAX_UPDATES_PER_HOUR - 356)))) != 0) || ((((_la - 420)) & ~0x3f) == 0 && ((1L << (_la - 420)) & ((1L << (MAX_USER_CONNECTIONS - 420)) | (1L << (MEDIUM - 420)) | (1L << (MERGE - 420)) | (1L << (MESSAGE_TEXT - 420)) | (1L << (MID - 420)) | (1L << (MIGRATE - 420)) | (1L << (MIN_ROWS - 420)) | (1L << (MODE - 420)) | (1L << (MODIFY - 420)) | (1L << (MUTEX - 420)) | (1L << (MYSQL - 420)) | (1L << (MYSQL_ERRNO - 420)) | (1L << (NAME - 420)) | (1L << (NAMES - 420)) | (1L << (NCHAR - 420)) | (1L << (NEVER - 420)) | (1L << (NEXT - 420)) | (1L << (NO - 420)) | (1L << (NODEGROUP - 420)) | (1L << (NONE - 420)) | (1L << (OFFLINE - 420)) | (1L << (OFFSET - 420)) | (1L << (OJ - 420)) | (1L << (OLD_PASSWORD - 420)) | (1L << (ONE - 420)) | (1L << (ONLINE - 420)) | (1L << (ONLY - 420)) | (1L << (OPEN - 420)) | (1L << (OPTIMIZER_COSTS - 420)) | (1L << (OPTIONS - 420)) | (1L << (OWNER - 420)) | (1L << (PACK_KEYS - 420)) | (1L << (PAGE - 420)) | (1L << (PARSER - 420)) | (1L << (PARTIAL - 420)) | (1L << (PARTITIONING - 420)) | (1L << (PARTITIONS - 420)) | (1L << (PASSWORD - 420)) | (1L << (PHASE - 420)) | (1L << (PLUGIN - 420)) | (1L << (PLUGIN_DIR - 420)) | (1L << (PLUGINS - 420)) | (1L << (PORT - 420)) | (1L << (PRECEDES - 420)) | (1L << (PREPARE - 420)) | (1L << (PRESERVE - 420)) | (1L << (PREV - 420)) | (1L << (PROCESSLIST - 420)) | (1L << (PROFILE - 420)) | (1L << (PROFILES - 420)) | (1L << (PROXY - 420)) | (1L << (QUERY - 420)) | (1L << (QUICK - 420)) | (1L << (REBUILD - 420)) | (1L << (RECOVER - 420)) | (1L << (REDO_BUFFER_SIZE - 420)) | (1L << (REDUNDANT - 420)) | (1L << (RELAY - 420)) | (1L << (RELAY_LOG_FILE - 420)) | (1L << (RELAY_LOG_POS - 420)) | (1L << (RELAYLOG - 420)) | (1L << (REMOVE - 420)) | (1L << (REORGANIZE - 420)) | (1L << (REPAIR - 420)))) != 0) || ((((_la - 484)) & ~0x3f) == 0 && ((1L << (_la - 484)) & ((1L << (REPLICATE_DO_DB - 484)) | (1L << (REPLICATE_DO_TABLE - 484)) | (1L << (REPLICATE_IGNORE_DB - 484)) | (1L << (REPLICATE_IGNORE_TABLE - 484)) | (1L << (REPLICATE_REWRITE_DB - 484)) | (1L << (REPLICATE_WILD_DO_TABLE - 484)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 484)) | (1L << (REPLICATION - 484)) | (1L << (RESET - 484)) | (1L << (RESUME - 484)) | (1L << (RETURNED_SQLSTATE - 484)) | (1L << (RETURNS - 484)) | (1L << (ROLLBACK - 484)) | (1L << (ROLLUP - 484)) | (1L << (ROTATE - 484)) | (1L << (ROW - 484)) | (1L << (ROWS - 484)) | (1L << (ROW_FORMAT - 484)) | (1L << (SAVEPOINT - 484)) | (1L << (SCHEDULE - 484)) | (1L << (SECURITY - 484)) | (1L << (SERVER - 484)) | (1L << (SESSION - 484)) | (1L << (SHARE - 484)) | (1L << (SHARED - 484)) | (1L << (SIGNED - 484)) | (1L << (SIMPLE - 484)) | (1L << (SLAVE - 484)) | (1L << (SLOW - 484)) | (1L << (SNAPSHOT - 484)) | (1L << (SOCKET - 484)) | (1L << (SOME - 484)) | (1L << (SONAME - 484)) | (1L << (SOUNDS - 484)) | (1L << (SOURCE - 484)) | (1L << (SQL_AFTER_GTIDS - 484)) | (1L << (SQL_AFTER_MTS_GAPS - 484)) | (1L << (SQL_BEFORE_GTIDS - 484)) | (1L << (SQL_BUFFER_RESULT - 484)) | (1L << (SQL_CACHE - 484)) | (1L << (SQL_NO_CACHE - 484)) | (1L << (SQL_THREAD - 484)) | (1L << (START - 484)) | (1L << (STARTS - 484)) | (1L << (STATS_AUTO_RECALC - 484)) | (1L << (STATS_PERSISTENT - 484)) | (1L << (STATS_SAMPLE_PAGES - 484)) | (1L << (STATUS - 484)) | (1L << (STOP - 484)) | (1L << (STORAGE - 484)) | (1L << (STRING - 484)) | (1L << (SUBCLASS_ORIGIN - 484)) | (1L << (SUBJECT - 484)) | (1L << (SUBPARTITION - 484)) | (1L << (SUBPARTITIONS - 484)) | (1L << (SUSPEND - 484)) | (1L << (SWAPS - 484)) | (1L << (SWITCHES - 484)) | (1L << (TABLE_NAME - 484)) | (1L << (TABLESPACE - 484)) | (1L << (TEMPORARY - 484)) | (1L << (TEMPTABLE - 484)) | (1L << (THAN - 484)))) != 0) || ((((_la - 548)) & ~0x3f) == 0 && ((1L << (_la - 548)) & ((1L << (TRADITIONAL - 548)) | (1L << (TRANSACTION - 548)) | (1L << (TRIGGERS - 548)) | (1L << (TRUNCATE - 548)) | (1L << (UNDEFINED - 548)) | (1L << (UNDOFILE - 548)) | (1L << (UNDO_BUFFER_SIZE - 548)) | (1L << (UNINSTALL - 548)) | (1L << (UNKNOWN - 548)) | (1L << (UNTIL - 548)) | (1L << (UPGRADE - 548)) | (1L << (USER - 548)) | (1L << (USE_FRM - 548)) | (1L << (USER_RESOURCES - 548)) | (1L << (VALIDATION - 548)) | (1L << (VALUE - 548)) | (1L << (VARIABLES - 548)) | (1L << (VIEW - 548)) | (1L << (VISIBLE - 548)) | (1L << (WAIT - 548)) | (1L << (WARNINGS - 548)) | (1L << (WITHOUT - 548)) | (1L << (WORK - 548)) | (1L << (WRAPPER - 548)) | (1L << (X509 - 548)) | (1L << (XA - 548)) | (1L << (XML - 548)) | (1L << (INTERNAL - 548)) | (1L << (QUARTER - 548)) | (1L << (MONTH - 548)) | (1L << (DAY - 548)) | (1L << (HOUR - 548)) | (1L << (MINUTE - 548)) | (1L << (WEEK - 548)) | (1L << (SECOND - 548)) | (1L << (MICROSECOND - 548)) | (1L << (TABLES - 548)) | (1L << (ROUTINE - 548)) | (1L << (EXECUTE - 548)) | (1L << (FILE - 548)) | (1L << (PROCESS - 548)) | (1L << (RELOAD - 548)) | (1L << (SHUTDOWN - 548)) | (1L << (SUPER - 548)) | (1L << (PRIVILEGES - 548)) | (1L << (SESSION_VARIABLES_ADMIN - 548)) | (1L << (ARMSCII8 - 548)) | (1L << (ASCII - 548)) | (1L << (BIG5 - 548)) | (1L << (CP1250 - 548)) | (1L << (CP1251 - 548)) | (1L << (CP1256 - 548)) | (1L << (CP1257 - 548)) | (1L << (CP850 - 548)) | (1L << (CP852 - 548)) | (1L << (CP866 - 548)) | (1L << (CP932 - 548)) | (1L << (DEC8 - 548)) | (1L << (EUCJPMS - 548)))) != 0) || ((((_la - 612)) & ~0x3f) == 0 && ((1L << (_la - 612)) & ((1L << (EUCKR - 612)) | (1L << (GB2312 - 612)) | (1L << (GBK - 612)) | (1L << (GEOSTD8 - 612)) | (1L << (GREEK - 612)) | (1L << (HEBREW - 612)) | (1L << (HP8 - 612)) | (1L << (KEYBCS2 - 612)) | (1L << (KOI8R - 612)) | (1L << (KOI8U - 612)) | (1L << (LATIN1 - 612)) | (1L << (LATIN2 - 612)) | (1L << (LATIN5 - 612)) | (1L << (LATIN7 - 612)) | (1L << (MACCE - 612)) | (1L << (MACROMAN - 612)) | (1L << (SJIS - 612)) | (1L << (SWE7 - 612)) | (1L << (TIS620 - 612)) | (1L << (UCS2 - 612)) | (1L << (UJIS - 612)) | (1L << (UTF16 - 612)) | (1L << (UTF16LE - 612)) | (1L << (UTF32 - 612)) | (1L << (UTF8 - 612)) | (1L << (UTF8MB3 - 612)) | (1L << (UTF8MB4 - 612)) | (1L << (ARCHIVE - 612)) | (1L << (BLACKHOLE - 612)) | (1L << (CSV - 612)) | (1L << (FEDERATED - 612)) | (1L << (INNODB - 612)) | (1L << (MEMORY - 612)) | (1L << (MRG_MYISAM - 612)) | (1L << (MYISAM - 612)) | (1L << (NDB - 612)) | (1L << (NDBCLUSTER - 612)) | (1L << (PERFORMANCE_SCHEMA - 612)) | (1L << (TOKUDB - 612)) | (1L << (REPEATABLE - 612)) | (1L << (COMMITTED - 612)) | (1L << (UNCOMMITTED - 612)) | (1L << (SERIALIZABLE - 612)) | (1L << (GEOMETRYCOLLECTION - 612)) | (1L << (LINESTRING - 612)) | (1L << (MULTILINESTRING - 612)) | (1L << (MULTIPOINT - 612)) | (1L << (MULTIPOLYGON - 612)) | (1L << (POINT - 612)) | (1L << (POLYGON - 612)) | (1L << (ABS - 612)) | (1L << (ACOS - 612)) | (1L << (ADDDATE - 612)) | (1L << (ADDTIME - 612)) | (1L << (AES_DECRYPT - 612)) | (1L << (AES_ENCRYPT - 612)) | (1L << (AREA - 612)) | (1L << (ASBINARY - 612)) | (1L << (ASIN - 612)) | (1L << (ASTEXT - 612)) | (1L << (ASWKB - 612)) | (1L << (ASWKT - 612)))) != 0) || ((((_la - 676)) & ~0x3f) == 0 && ((1L << (_la - 676)) & ((1L << (ASYMMETRIC_DECRYPT - 676)) | (1L << (ASYMMETRIC_DERIVE - 676)) | (1L << (ASYMMETRIC_ENCRYPT - 676)) | (1L << (ASYMMETRIC_SIGN - 676)) | (1L << (ASYMMETRIC_VERIFY - 676)) | (1L << (ATAN - 676)) | (1L << (ATAN2 - 676)) | (1L << (BENCHMARK - 676)) | (1L << (BIN - 676)) | (1L << (BIT_COUNT - 676)) | (1L << (BIT_LENGTH - 676)) | (1L << (BUFFER - 676)) | (1L << (CATALOG_NAME - 676)) | (1L << (CEIL - 676)) | (1L << (CEILING - 676)) | (1L << (CENTROID - 676)) | (1L << (CHARACTER_LENGTH - 676)) | (1L << (CHARSET - 676)) | (1L << (CHAR_LENGTH - 676)) | (1L << (COERCIBILITY - 676)) | (1L << (COLLATION - 676)) | (1L << (COMPRESS - 676)) | (1L << (CONCAT - 676)) | (1L << (CONCAT_WS - 676)) | (1L << (CONNECTION_ID - 676)) | (1L << (CONV - 676)) | (1L << (CONVERT_TZ - 676)) | (1L << (COS - 676)) | (1L << (COT - 676)) | (1L << (CRC32 - 676)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 676)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 676)) | (1L << (CREATE_DH_PARAMETERS - 676)) | (1L << (CREATE_DIGEST - 676)) | (1L << (CROSSES - 676)) | (1L << (DATEDIFF - 676)) | (1L << (DATE_FORMAT - 676)) | (1L << (DAYNAME - 676)) | (1L << (DAYOFMONTH - 676)) | (1L << (DAYOFWEEK - 676)) | (1L << (DAYOFYEAR - 676)) | (1L << (DECODE - 676)) | (1L << (DEGREES - 676)) | (1L << (DES_DECRYPT - 676)) | (1L << (DES_ENCRYPT - 676)) | (1L << (DIMENSION - 676)) | (1L << (DISJOINT - 676)) | (1L << (ELT - 676)) | (1L << (ENCODE - 676)) | (1L << (ENCRYPT - 676)) | (1L << (ENDPOINT - 676)) | (1L << (ENVELOPE - 676)) | (1L << (EQUALS - 676)) | (1L << (EXP - 676)) | (1L << (EXPORT_SET - 676)) | (1L << (EXTERIORRING - 676)) | (1L << (EXTRACTVALUE - 676)) | (1L << (FIELD - 676)) | (1L << (FIND_IN_SET - 676)) | (1L << (FLOOR - 676)) | (1L << (FORMAT - 676)) | (1L << (FOUND_ROWS - 676)) | (1L << (FROM_BASE64 - 676)) | (1L << (FROM_DAYS - 676)))) != 0) || ((((_la - 740)) & ~0x3f) == 0 && ((1L << (_la - 740)) & ((1L << (FROM_UNIXTIME - 740)) | (1L << (GEOMCOLLFROMTEXT - 740)) | (1L << (GEOMCOLLFROMWKB - 740)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 740)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 740)) | (1L << (GEOMETRYFROMTEXT - 740)) | (1L << (GEOMETRYFROMWKB - 740)) | (1L << (GEOMETRYN - 740)) | (1L << (GEOMETRYTYPE - 740)) | (1L << (GEOMFROMTEXT - 740)) | (1L << (GEOMFROMWKB - 740)) | (1L << (GET_FORMAT - 740)) | (1L << (GET_LOCK - 740)) | (1L << (GLENGTH - 740)) | (1L << (GREATEST - 740)) | (1L << (GTID_SUBSET - 740)) | (1L << (GTID_SUBTRACT - 740)) | (1L << (HEX - 740)) | (1L << (IFNULL - 740)) | (1L << (INET6_ATON - 740)) | (1L << (INET6_NTOA - 740)) | (1L << (INET_ATON - 740)) | (1L << (INET_NTOA - 740)) | (1L << (INSTR - 740)) | (1L << (INTERIORRINGN - 740)) | (1L << (INTERSECTS - 740)) | (1L << (ISCLOSED - 740)) | (1L << (ISEMPTY - 740)) | (1L << (ISNULL - 740)) | (1L << (ISSIMPLE - 740)) | (1L << (IS_FREE_LOCK - 740)) | (1L << (IS_IPV4 - 740)) | (1L << (IS_IPV4_COMPAT - 740)) | (1L << (IS_IPV4_MAPPED - 740)) | (1L << (IS_IPV6 - 740)) | (1L << (IS_USED_LOCK - 740)) | (1L << (LAST_INSERT_ID - 740)) | (1L << (LCASE - 740)) | (1L << (LEAST - 740)) | (1L << (LENGTH - 740)) | (1L << (LINEFROMTEXT - 740)) | (1L << (LINEFROMWKB - 740)) | (1L << (LINESTRINGFROMTEXT - 740)) | (1L << (LINESTRINGFROMWKB - 740)) | (1L << (LN - 740)) | (1L << (LOAD_FILE - 740)) | (1L << (LOCATE - 740)) | (1L << (LOG - 740)) | (1L << (LOG10 - 740)) | (1L << (LOG2 - 740)) | (1L << (LOWER - 740)) | (1L << (LPAD - 740)) | (1L << (LTRIM - 740)) | (1L << (MAKEDATE - 740)) | (1L << (MAKETIME - 740)) | (1L << (MAKE_SET - 740)) | (1L << (MASTER_POS_WAIT - 740)) | (1L << (MBRCONTAINS - 740)) | (1L << (MBRDISJOINT - 740)) | (1L << (MBREQUAL - 740)) | (1L << (MBRINTERSECTS - 740)) | (1L << (MBROVERLAPS - 740)) | (1L << (MBRTOUCHES - 740)) | (1L << (MBRWITHIN - 740)))) != 0) || ((((_la - 804)) & ~0x3f) == 0 && ((1L << (_la - 804)) & ((1L << (MD5 - 804)) | (1L << (MLINEFROMTEXT - 804)) | (1L << (MLINEFROMWKB - 804)) | (1L << (MONTHNAME - 804)) | (1L << (MPOINTFROMTEXT - 804)) | (1L << (MPOINTFROMWKB - 804)) | (1L << (MPOLYFROMTEXT - 804)) | (1L << (MPOLYFROMWKB - 804)) | (1L << (MULTILINESTRINGFROMTEXT - 804)) | (1L << (MULTILINESTRINGFROMWKB - 804)) | (1L << (MULTIPOINTFROMTEXT - 804)) | (1L << (MULTIPOINTFROMWKB - 804)) | (1L << (MULTIPOLYGONFROMTEXT - 804)) | (1L << (MULTIPOLYGONFROMWKB - 804)) | (1L << (NAME_CONST - 804)) | (1L << (NULLIF - 804)) | (1L << (NUMGEOMETRIES - 804)) | (1L << (NUMINTERIORRINGS - 804)) | (1L << (NUMPOINTS - 804)) | (1L << (OCT - 804)) | (1L << (OCTET_LENGTH - 804)) | (1L << (ORD - 804)) | (1L << (OVERLAPS - 804)) | (1L << (PERIOD_ADD - 804)) | (1L << (PERIOD_DIFF - 804)) | (1L << (PI - 804)) | (1L << (POINTFROMTEXT - 804)) | (1L << (POINTFROMWKB - 804)) | (1L << (POINTN - 804)) | (1L << (POLYFROMTEXT - 804)) | (1L << (POLYFROMWKB - 804)) | (1L << (POLYGONFROMTEXT - 804)) | (1L << (POLYGONFROMWKB - 804)) | (1L << (POW - 804)) | (1L << (POWER - 804)) | (1L << (QUOTE - 804)) | (1L << (RADIANS - 804)) | (1L << (RAND - 804)) | (1L << (RANDOM_BYTES - 804)) | (1L << (RELEASE_LOCK - 804)) | (1L << (REVERSE - 804)) | (1L << (ROUND - 804)) | (1L << (ROW_COUNT - 804)) | (1L << (RPAD - 804)) | (1L << (RTRIM - 804)) | (1L << (SEC_TO_TIME - 804)) | (1L << (SESSION_USER - 804)) | (1L << (SHA - 804)) | (1L << (SHA1 - 804)) | (1L << (SHA2 - 804)) | (1L << (SCHEMA_NAME - 804)) | (1L << (SIGN - 804)) | (1L << (SIN - 804)) | (1L << (SLEEP - 804)) | (1L << (SOUNDEX - 804)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 804)) | (1L << (SQRT - 804)) | (1L << (SRID - 804)) | (1L << (STARTPOINT - 804)) | (1L << (STRCMP - 804)) | (1L << (STR_TO_DATE - 804)) | (1L << (ST_AREA - 804)) | (1L << (ST_ASBINARY - 804)) | (1L << (ST_ASTEXT - 804)))) != 0) || ((((_la - 868)) & ~0x3f) == 0 && ((1L << (_la - 868)) & ((1L << (ST_ASWKB - 868)) | (1L << (ST_ASWKT - 868)) | (1L << (ST_BUFFER - 868)) | (1L << (ST_CENTROID - 868)) | (1L << (ST_CONTAINS - 868)) | (1L << (ST_CROSSES - 868)) | (1L << (ST_DIFFERENCE - 868)) | (1L << (ST_DIMENSION - 868)) | (1L << (ST_DISJOINT - 868)) | (1L << (ST_DISTANCE - 868)) | (1L << (ST_ENDPOINT - 868)) | (1L << (ST_ENVELOPE - 868)) | (1L << (ST_EQUALS - 868)) | (1L << (ST_EXTERIORRING - 868)) | (1L << (ST_GEOMCOLLFROMTEXT - 868)) | (1L << (ST_GEOMCOLLFROMTXT - 868)) | (1L << (ST_GEOMCOLLFROMWKB - 868)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 868)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 868)) | (1L << (ST_GEOMETRYFROMTEXT - 868)) | (1L << (ST_GEOMETRYFROMWKB - 868)) | (1L << (ST_GEOMETRYN - 868)) | (1L << (ST_GEOMETRYTYPE - 868)) | (1L << (ST_GEOMFROMTEXT - 868)) | (1L << (ST_GEOMFROMWKB - 868)) | (1L << (ST_INTERIORRINGN - 868)) | (1L << (ST_INTERSECTION - 868)) | (1L << (ST_INTERSECTS - 868)) | (1L << (ST_ISCLOSED - 868)) | (1L << (ST_ISEMPTY - 868)) | (1L << (ST_ISSIMPLE - 868)) | (1L << (ST_LINEFROMTEXT - 868)) | (1L << (ST_LINEFROMWKB - 868)) | (1L << (ST_LINESTRINGFROMTEXT - 868)) | (1L << (ST_LINESTRINGFROMWKB - 868)) | (1L << (ST_NUMGEOMETRIES - 868)) | (1L << (ST_NUMINTERIORRING - 868)) | (1L << (ST_NUMINTERIORRINGS - 868)) | (1L << (ST_NUMPOINTS - 868)) | (1L << (ST_OVERLAPS - 868)) | (1L << (ST_POINTFROMTEXT - 868)) | (1L << (ST_POINTFROMWKB - 868)) | (1L << (ST_POINTN - 868)) | (1L << (ST_POLYFROMTEXT - 868)) | (1L << (ST_POLYFROMWKB - 868)) | (1L << (ST_POLYGONFROMTEXT - 868)) | (1L << (ST_POLYGONFROMWKB - 868)) | (1L << (ST_SRID - 868)) | (1L << (ST_STARTPOINT - 868)) | (1L << (ST_SYMDIFFERENCE - 868)) | (1L << (ST_TOUCHES - 868)) | (1L << (ST_UNION - 868)) | (1L << (ST_WITHIN - 868)) | (1L << (ST_X - 868)) | (1L << (ST_Y - 868)) | (1L << (SUBDATE - 868)) | (1L << (SUBSTRING_INDEX - 868)) | (1L << (SUBTIME - 868)) | (1L << (SYSTEM_USER - 868)) | (1L << (TAN - 868)) | (1L << (TIMEDIFF - 868)) | (1L << (TIMESTAMPADD - 868)) | (1L << (TIMESTAMPDIFF - 868)) | (1L << (TIME_FORMAT - 868)))) != 0) || ((((_la - 932)) & ~0x3f) == 0 && ((1L << (_la - 932)) & ((1L << (TIME_TO_SEC - 932)) | (1L << (TOUCHES - 932)) | (1L << (TO_BASE64 - 932)) | (1L << (TO_DAYS - 932)) | (1L << (TO_SECONDS - 932)) | (1L << (UCASE - 932)) | (1L << (UNCOMPRESS - 932)) | (1L << (UNCOMPRESSED_LENGTH - 932)) | (1L << (UNHEX - 932)) | (1L << (UNIX_TIMESTAMP - 932)) | (1L << (UPDATEXML - 932)) | (1L << (UPPER - 932)) | (1L << (UUID - 932)) | (1L << (UUID_SHORT - 932)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 932)) | (1L << (VERSION - 932)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 932)) | (1L << (WEEKDAY - 932)) | (1L << (WEEKOFYEAR - 932)) | (1L << (WEIGHT_STRING - 932)) | (1L << (WITHIN - 932)) | (1L << (YEARWEEK - 932)) | (1L << (Y_FUNCTION - 932)) | (1L << (X_FUNCTION - 932)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 932)))) != 0) || ((((_la - 997)) & ~0x3f) == 0 && ((1L << (_la - 997)) & ((1L << (STRING_LITERAL - 997)) | (1L << (ID - 997)) | (1L << (REVERSE_QUOTE_ID - 997)))) != 0))
                {
                    {
                        State = 3758;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == AS)
                        {
                            {
                                State = 3757; Match(AS);
                            }
                        }

                        State = 3760; uid();
                    }
                }

                State = 3763; lockAction();
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class LockActionContext : ParserRuleContext
    {
        public ITerminalNode READ() { return GetToken(MySqlParser.READ, 0); }
        public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
        public ITerminalNode WRITE() { return GetToken(MySqlParser.WRITE, 0); }
        public ITerminalNode LOW_PRIORITY() { return GetToken(MySqlParser.LOW_PRIORITY, 0); }
        public LockActionContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_lockAction; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterLockAction(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitLockAction(this);
        }
    }

    [RuleVersion(0)]
    public LockActionContext lockAction()
    {
        LockActionContext _localctx = new LockActionContext(Context, State);
        EnterRule(_localctx, 280, RULE_lockAction);
        int _la;
        try
        {
            State = 3773;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case READ:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 3765; Match(READ);
                        State = 3767;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == LOCAL)
                        {
                            {
                                State = 3766; Match(LOCAL);
                            }
                        }

                    }
                    break;
                case LOW_PRIORITY:
                case WRITE:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 3770;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == LOW_PRIORITY)
                        {
                            {
                                State = 3769; Match(LOW_PRIORITY);
                            }
                        }

                        State = 3772; Match(WRITE);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class TransactionOptionContext : ParserRuleContext
    {
        public ITerminalNode ISOLATION() { return GetToken(MySqlParser.ISOLATION, 0); }
        public ITerminalNode LEVEL() { return GetToken(MySqlParser.LEVEL, 0); }
        public TransactionLevelContext transactionLevel()
        {
            return GetRuleContext<TransactionLevelContext>(0);
        }
        public ITerminalNode READ() { return GetToken(MySqlParser.READ, 0); }
        public ITerminalNode WRITE() { return GetToken(MySqlParser.WRITE, 0); }
        public ITerminalNode ONLY() { return GetToken(MySqlParser.ONLY, 0); }
        public TransactionOptionContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_transactionOption; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterTransactionOption(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitTransactionOption(this);
        }
    }

    [RuleVersion(0)]
    public TransactionOptionContext transactionOption()
    {
        TransactionOptionContext _localctx = new TransactionOptionContext(Context, State);
        EnterRule(_localctx, 282, RULE_transactionOption);
        try
        {
            State = 3782;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 552, Context))
            {
                case 1:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 3775; Match(ISOLATION);
                        State = 3776; Match(LEVEL);
                        State = 3777; transactionLevel();
                    }
                    break;
                case 2:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 3778; Match(READ);
                        State = 3779; Match(WRITE);
                    }
                    break;
                case 3:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 3780; Match(READ);
                        State = 3781; Match(ONLY);
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class TransactionLevelContext : ParserRuleContext
    {
        public ITerminalNode REPEATABLE() { return GetToken(MySqlParser.REPEATABLE, 0); }
        public ITerminalNode READ() { return GetToken(MySqlParser.READ, 0); }
        public ITerminalNode COMMITTED() { return GetToken(MySqlParser.COMMITTED, 0); }
        public ITerminalNode UNCOMMITTED() { return GetToken(MySqlParser.UNCOMMITTED, 0); }
        public ITerminalNode SERIALIZABLE() { return GetToken(MySqlParser.SERIALIZABLE, 0); }
        public TransactionLevelContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_transactionLevel; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterTransactionLevel(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitTransactionLevel(this);
        }
    }

    [RuleVersion(0)]
    public TransactionLevelContext transactionLevel()
    {
        TransactionLevelContext _localctx = new TransactionLevelContext(Context, State);
        EnterRule(_localctx, 284, RULE_transactionLevel);
        try
        {
            State = 3791;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 553, Context))
            {
                case 1:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 3784; Match(REPEATABLE);
                        State = 3785; Match(READ);
                    }
                    break;
                case 2:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 3786; Match(READ);
                        State = 3787; Match(COMMITTED);
                    }
                    break;
                case 3:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 3788; Match(READ);
                        State = 3789; Match(UNCOMMITTED);
                    }
                    break;
                case 4:
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 3790; Match(SERIALIZABLE);
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ChangeMasterContext : ParserRuleContext
    {
        public ITerminalNode CHANGE() { return GetToken(MySqlParser.CHANGE, 0); }
        public ITerminalNode MASTER() { return GetToken(MySqlParser.MASTER, 0); }
        public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
        public MasterOptionContext[] masterOption()
        {
            return GetRuleContexts<MasterOptionContext>();
        }
        public MasterOptionContext masterOption(int i)
        {
            return GetRuleContext<MasterOptionContext>(i);
        }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public ChannelOptionContext channelOption()
        {
            return GetRuleContext<ChannelOptionContext>(0);
        }
        public ChangeMasterContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_changeMaster; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterChangeMaster(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitChangeMaster(this);
        }
    }

    [RuleVersion(0)]
    public ChangeMasterContext changeMaster()
    {
        ChangeMasterContext _localctx = new ChangeMasterContext(Context, State);
        EnterRule(_localctx, 286, RULE_changeMaster);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 3793; Match(CHANGE);
                State = 3794; Match(MASTER);
                State = 3795; Match(TO);
                State = 3796; masterOption();
                State = 3801;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while (_la == COMMA)
                {
                    {
                        {
                            State = 3797; Match(COMMA);
                            State = 3798; masterOption();
                        }
                    }
                    State = 3803;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
                State = 3805;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == FOR)
                {
                    {
                        State = 3804; channelOption();
                    }
                }

            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ChangeReplicationFilterContext : ParserRuleContext
    {
        public ITerminalNode CHANGE() { return GetToken(MySqlParser.CHANGE, 0); }
        public ITerminalNode REPLICATION() { return GetToken(MySqlParser.REPLICATION, 0); }
        public ITerminalNode FILTER() { return GetToken(MySqlParser.FILTER, 0); }
        public ReplicationFilterContext[] replicationFilter()
        {
            return GetRuleContexts<ReplicationFilterContext>();
        }
        public ReplicationFilterContext replicationFilter(int i)
        {
            return GetRuleContext<ReplicationFilterContext>(i);
        }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public ChangeReplicationFilterContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_changeReplicationFilter; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterChangeReplicationFilter(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitChangeReplicationFilter(this);
        }
    }

    [RuleVersion(0)]
    public ChangeReplicationFilterContext changeReplicationFilter()
    {
        ChangeReplicationFilterContext _localctx = new ChangeReplicationFilterContext(Context, State);
        EnterRule(_localctx, 288, RULE_changeReplicationFilter);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 3807; Match(CHANGE);
                State = 3808; Match(REPLICATION);
                State = 3809; Match(FILTER);
                State = 3810; replicationFilter();
                State = 3815;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while (_la == COMMA)
                {
                    {
                        {
                            State = 3811; Match(COMMA);
                            State = 3812; replicationFilter();
                        }
                    }
                    State = 3817;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class PurgeBinaryLogsContext : ParserRuleContext
    {
        public IToken purgeFormat;
        public IToken fileName;
        public IToken timeValue;
        public ITerminalNode PURGE() { return GetToken(MySqlParser.PURGE, 0); }
        public ITerminalNode LOGS() { return GetToken(MySqlParser.LOGS, 0); }
        public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
        public ITerminalNode MASTER() { return GetToken(MySqlParser.MASTER, 0); }
        public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
        public ITerminalNode BEFORE() { return GetToken(MySqlParser.BEFORE, 0); }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public PurgeBinaryLogsContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_purgeBinaryLogs; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterPurgeBinaryLogs(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitPurgeBinaryLogs(this);
        }
    }

    [RuleVersion(0)]
    public PurgeBinaryLogsContext purgeBinaryLogs()
    {
        PurgeBinaryLogsContext _localctx = new PurgeBinaryLogsContext(Context, State);
        EnterRule(_localctx, 290, RULE_purgeBinaryLogs);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 3818; Match(PURGE);
                State = 3819;
                _localctx.purgeFormat = TokenStream.LT(1);
                _la = TokenStream.LA(1);
                if (!(_la == BINARY || _la == MASTER))
                {
                    _localctx.purgeFormat = ErrorHandler.RecoverInline(this);
                }
                else
                {
                    ErrorHandler.ReportMatch(this);
                    Consume();
                }
                State = 3820; Match(LOGS);
                State = 3825;
                ErrorHandler.Sync(this);
                switch (TokenStream.LA(1))
                {
                    case TO:
                        {
                            State = 3821; Match(TO);
                            State = 3822; _localctx.fileName = Match(STRING_LITERAL);
                        }
                        break;
                    case BEFORE:
                        {
                            State = 3823; Match(BEFORE);
                            State = 3824; _localctx.timeValue = Match(STRING_LITERAL);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ResetMasterContext : ParserRuleContext
    {
        public ITerminalNode RESET() { return GetToken(MySqlParser.RESET, 0); }
        public ITerminalNode MASTER() { return GetToken(MySqlParser.MASTER, 0); }
        public ResetMasterContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_resetMaster; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterResetMaster(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitResetMaster(this);
        }
    }

    [RuleVersion(0)]
    public ResetMasterContext resetMaster()
    {
        ResetMasterContext _localctx = new ResetMasterContext(Context, State);
        EnterRule(_localctx, 292, RULE_resetMaster);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 3827; Match(RESET);
                State = 3828; Match(MASTER);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ResetSlaveContext : ParserRuleContext
    {
        public ITerminalNode RESET() { return GetToken(MySqlParser.RESET, 0); }
        public ITerminalNode SLAVE() { return GetToken(MySqlParser.SLAVE, 0); }
        public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
        public ChannelOptionContext channelOption()
        {
            return GetRuleContext<ChannelOptionContext>(0);
        }
        public ResetSlaveContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_resetSlave; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterResetSlave(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitResetSlave(this);
        }
    }

    [RuleVersion(0)]
    public ResetSlaveContext resetSlave()
    {
        ResetSlaveContext _localctx = new ResetSlaveContext(Context, State);
        EnterRule(_localctx, 294, RULE_resetSlave);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 3830; Match(RESET);
                State = 3831; Match(SLAVE);
                State = 3833;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == ALL)
                {
                    {
                        State = 3832; Match(ALL);
                    }
                }

                State = 3836;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == FOR)
                {
                    {
                        State = 3835; channelOption();
                    }
                }

            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class StartSlaveContext : ParserRuleContext
    {
        public ITerminalNode START() { return GetToken(MySqlParser.START, 0); }
        public ITerminalNode SLAVE() { return GetToken(MySqlParser.SLAVE, 0); }
        public ThreadTypeContext[] threadType()
        {
            return GetRuleContexts<ThreadTypeContext>();
        }
        public ThreadTypeContext threadType(int i)
        {
            return GetRuleContext<ThreadTypeContext>(i);
        }
        public ITerminalNode UNTIL() { return GetToken(MySqlParser.UNTIL, 0); }
        public UntilOptionContext untilOption()
        {
            return GetRuleContext<UntilOptionContext>(0);
        }
        public ConnectionOptionContext[] connectionOption()
        {
            return GetRuleContexts<ConnectionOptionContext>();
        }
        public ConnectionOptionContext connectionOption(int i)
        {
            return GetRuleContext<ConnectionOptionContext>(i);
        }
        public ChannelOptionContext channelOption()
        {
            return GetRuleContext<ChannelOptionContext>(0);
        }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public StartSlaveContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_startSlave; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterStartSlave(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitStartSlave(this);
        }
    }

    [RuleVersion(0)]
    public StartSlaveContext startSlave()
    {
        StartSlaveContext _localctx = new StartSlaveContext(Context, State);
        EnterRule(_localctx, 296, RULE_startSlave);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 3838; Match(START);
                State = 3839; Match(SLAVE);
                State = 3848;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == IO_THREAD || _la == SQL_THREAD)
                {
                    {
                        State = 3840; threadType();
                        State = 3845;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        while (_la == COMMA)
                        {
                            {
                                {
                                    State = 3841; Match(COMMA);
                                    State = 3842; threadType();
                                }
                            }
                            State = 3847;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                        }
                    }
                }

                State = 3852;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == UNTIL)
                {
                    {
                        State = 3850; Match(UNTIL);
                        State = 3851; untilOption();
                    }
                }

                State = 3857;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while (_la == DEFAULT_AUTH || _la == PASSWORD || _la == PLUGIN_DIR || _la == USER)
                {
                    {
                        {
                            State = 3854; connectionOption();
                        }
                    }
                    State = 3859;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
                State = 3861;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == FOR)
                {
                    {
                        State = 3860; channelOption();
                    }
                }

            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class StopSlaveContext : ParserRuleContext
    {
        public ITerminalNode STOP() { return GetToken(MySqlParser.STOP, 0); }
        public ITerminalNode SLAVE() { return GetToken(MySqlParser.SLAVE, 0); }
        public ThreadTypeContext[] threadType()
        {
            return GetRuleContexts<ThreadTypeContext>();
        }
        public ThreadTypeContext threadType(int i)
        {
            return GetRuleContext<ThreadTypeContext>(i);
        }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public StopSlaveContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_stopSlave; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterStopSlave(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitStopSlave(this);
        }
    }

    [RuleVersion(0)]
    public StopSlaveContext stopSlave()
    {
        StopSlaveContext _localctx = new StopSlaveContext(Context, State);
        EnterRule(_localctx, 298, RULE_stopSlave);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 3863; Match(STOP);
                State = 3864; Match(SLAVE);
                State = 3873;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == IO_THREAD || _la == SQL_THREAD)
                {
                    {
                        State = 3865; threadType();
                        State = 3870;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        while (_la == COMMA)
                        {
                            {
                                {
                                    State = 3866; Match(COMMA);
                                    State = 3867; threadType();
                                }
                            }
                            State = 3872;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                        }
                    }
                }

            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class StartGroupReplicationContext : ParserRuleContext
    {
        public ITerminalNode START() { return GetToken(MySqlParser.START, 0); }
        public ITerminalNode GROUP_REPLICATION() { return GetToken(MySqlParser.GROUP_REPLICATION, 0); }
        public StartGroupReplicationContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_startGroupReplication; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterStartGroupReplication(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitStartGroupReplication(this);
        }
    }

    [RuleVersion(0)]
    public StartGroupReplicationContext startGroupReplication()
    {
        StartGroupReplicationContext _localctx = new StartGroupReplicationContext(Context, State);
        EnterRule(_localctx, 300, RULE_startGroupReplication);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 3875; Match(START);
                State = 3876; Match(GROUP_REPLICATION);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class StopGroupReplicationContext : ParserRuleContext
    {
        public ITerminalNode STOP() { return GetToken(MySqlParser.STOP, 0); }
        public ITerminalNode GROUP_REPLICATION() { return GetToken(MySqlParser.GROUP_REPLICATION, 0); }
        public StopGroupReplicationContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_stopGroupReplication; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterStopGroupReplication(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitStopGroupReplication(this);
        }
    }

    [RuleVersion(0)]
    public StopGroupReplicationContext stopGroupReplication()
    {
        StopGroupReplicationContext _localctx = new StopGroupReplicationContext(Context, State);
        EnterRule(_localctx, 302, RULE_stopGroupReplication);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 3878; Match(STOP);
                State = 3879; Match(GROUP_REPLICATION);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class MasterOptionContext : ParserRuleContext
    {
        public MasterOptionContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_masterOption; } }

        public MasterOptionContext() { }
        public virtual void CopyFrom(MasterOptionContext context)
        {
            base.CopyFrom(context);
        }
    }
    public partial class MasterStringOptionContext : MasterOptionContext
    {
        public StringMasterOptionContext stringMasterOption()
        {
            return GetRuleContext<StringMasterOptionContext>(0);
        }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public MasterStringOptionContext(MasterOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterMasterStringOption(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitMasterStringOption(this);
        }
    }
    public partial class MasterRealOptionContext : MasterOptionContext
    {
        public ITerminalNode MASTER_HEARTBEAT_PERIOD() { return GetToken(MySqlParser.MASTER_HEARTBEAT_PERIOD, 0); }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public ITerminalNode REAL_LITERAL() { return GetToken(MySqlParser.REAL_LITERAL, 0); }
        public MasterRealOptionContext(MasterOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterMasterRealOption(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitMasterRealOption(this);
        }
    }
    public partial class MasterBoolOptionContext : MasterOptionContext
    {
        public IToken boolVal;
        public BoolMasterOptionContext boolMasterOption()
        {
            return GetRuleContext<BoolMasterOptionContext>(0);
        }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public ITerminalNode ZERO_DECIMAL() { return GetToken(MySqlParser.ZERO_DECIMAL, 0); }
        public ITerminalNode ONE_DECIMAL() { return GetToken(MySqlParser.ONE_DECIMAL, 0); }
        public MasterBoolOptionContext(MasterOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterMasterBoolOption(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitMasterBoolOption(this);
        }
    }
    public partial class MasterUidListOptionContext : MasterOptionContext
    {
        public ITerminalNode IGNORE_SERVER_IDS() { return GetToken(MySqlParser.IGNORE_SERVER_IDS, 0); }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public UidContext[] uid()
        {
            return GetRuleContexts<UidContext>();
        }
        public UidContext uid(int i)
        {
            return GetRuleContext<UidContext>(i);
        }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public MasterUidListOptionContext(MasterOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterMasterUidListOption(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitMasterUidListOption(this);
        }
    }
    public partial class MasterDecimalOptionContext : MasterOptionContext
    {
        public DecimalMasterOptionContext decimalMasterOption()
        {
            return GetRuleContext<DecimalMasterOptionContext>(0);
        }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public DecimalLiteralContext decimalLiteral()
        {
            return GetRuleContext<DecimalLiteralContext>(0);
        }
        public MasterDecimalOptionContext(MasterOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterMasterDecimalOption(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitMasterDecimalOption(this);
        }
    }

    [RuleVersion(0)]
    public MasterOptionContext masterOption()
    {
        MasterOptionContext _localctx = new MasterOptionContext(Context, State);
        EnterRule(_localctx, 304, RULE_masterOption);
        int _la;
        try
        {
            State = 3910;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case MASTER_BIND:
                case MASTER_HOST:
                case MASTER_LOG_FILE:
                case MASTER_PASSWORD:
                case MASTER_SSL_CA:
                case MASTER_SSL_CAPATH:
                case MASTER_SSL_CERT:
                case MASTER_SSL_CIPHER:
                case MASTER_SSL_CRL:
                case MASTER_SSL_CRLPATH:
                case MASTER_SSL_KEY:
                case MASTER_TLS_VERSION:
                case MASTER_USER:
                case RELAY_LOG_FILE:
                    _localctx = new MasterStringOptionContext(_localctx);
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 3881; stringMasterOption();
                        State = 3882; Match(EQUAL_SYMBOL);
                        State = 3883; Match(STRING_LITERAL);
                    }
                    break;
                case MASTER_CONNECT_RETRY:
                case MASTER_DELAY:
                case MASTER_LOG_POS:
                case MASTER_PORT:
                case MASTER_RETRY_COUNT:
                case RELAY_LOG_POS:
                    _localctx = new MasterDecimalOptionContext(_localctx);
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 3885; decimalMasterOption();
                        State = 3886; Match(EQUAL_SYMBOL);
                        State = 3887; decimalLiteral();
                    }
                    break;
                case MASTER_SSL_VERIFY_SERVER_CERT:
                case MASTER_AUTO_POSITION:
                case MASTER_SSL:
                    _localctx = new MasterBoolOptionContext(_localctx);
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 3889; boolMasterOption();
                        State = 3890; Match(EQUAL_SYMBOL);
                        State = 3891;
                        ((MasterBoolOptionContext)_localctx).boolVal = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == ZERO_DECIMAL || _la == ONE_DECIMAL))
                        {
                            ((MasterBoolOptionContext)_localctx).boolVal = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                    break;
                case MASTER_HEARTBEAT_PERIOD:
                    _localctx = new MasterRealOptionContext(_localctx);
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 3893; Match(MASTER_HEARTBEAT_PERIOD);
                        State = 3894; Match(EQUAL_SYMBOL);
                        State = 3895; Match(REAL_LITERAL);
                    }
                    break;
                case IGNORE_SERVER_IDS:
                    _localctx = new MasterUidListOptionContext(_localctx);
                    EnterOuterAlt(_localctx, 5);
                    {
                        State = 3896; Match(IGNORE_SERVER_IDS);
                        State = 3897; Match(EQUAL_SYMBOL);
                        State = 3898; Match(LR_BRACKET);
                        State = 3907;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)) | (1L << (POSITION - 191)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ACCOUNT - 259)) | (1L << (ACTION - 259)) | (1L << (AFTER - 259)) | (1L << (AGGREGATE - 259)) | (1L << (ALGORITHM - 259)) | (1L << (ANY - 259)) | (1L << (AT - 259)) | (1L << (AUTHORS - 259)) | (1L << (AUTOCOMMIT - 259)) | (1L << (AUTOEXTEND_SIZE - 259)) | (1L << (AUTO_INCREMENT - 259)) | (1L << (AVG_ROW_LENGTH - 259)) | (1L << (BEGIN - 259)) | (1L << (BINLOG - 259)) | (1L << (BIT - 259)) | (1L << (BLOCK - 259)) | (1L << (BOOL - 259)) | (1L << (BOOLEAN - 259)) | (1L << (BTREE - 259)) | (1L << (CACHE - 259)) | (1L << (CASCADED - 259)) | (1L << (CHAIN - 259)) | (1L << (CHANGED - 259)) | (1L << (CHANNEL - 259)) | (1L << (CHECKSUM - 259)) | (1L << (PAGE_CHECKSUM - 259)) | (1L << (CIPHER - 259)) | (1L << (CLASS_ORIGIN - 259)) | (1L << (CLIENT - 259)) | (1L << (CLOSE - 259)) | (1L << (COALESCE - 259)) | (1L << (CODE - 259)) | (1L << (COLUMNS - 259)) | (1L << (COLUMN_FORMAT - 259)) | (1L << (COLUMN_NAME - 259)) | (1L << (COMMENT - 259)) | (1L << (COMMIT - 259)) | (1L << (COMPACT - 259)) | (1L << (COMPLETION - 259)) | (1L << (COMPRESSED - 259)) | (1L << (COMPRESSION - 259)) | (1L << (CONCURRENT - 259)) | (1L << (CONNECTION - 259)) | (1L << (CONSISTENT - 259)) | (1L << (CONSTRAINT_CATALOG - 259)) | (1L << (CONSTRAINT_SCHEMA - 259)) | (1L << (CONSTRAINT_NAME - 259)) | (1L << (CONTAINS - 259)) | (1L << (CONTEXT - 259)) | (1L << (CONTRIBUTORS - 259)) | (1L << (COPY - 259)) | (1L << (CPU - 259)) | (1L << (CURSOR_NAME - 259)) | (1L << (DATA - 259)) | (1L << (DATAFILE - 259)) | (1L << (DEALLOCATE - 259)) | (1L << (DEFAULT_AUTH - 259)) | (1L << (DEFINER - 259)) | (1L << (DELAY_KEY_WRITE - 259)) | (1L << (DES_KEY_FILE - 259)) | (1L << (DIRECTORY - 259)) | (1L << (DISABLE - 259)) | (1L << (DISCARD - 259)) | (1L << (DISK - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (DO - 323)) | (1L << (DUMPFILE - 323)) | (1L << (DUPLICATE - 323)) | (1L << (DYNAMIC - 323)) | (1L << (ENABLE - 323)) | (1L << (ENCRYPTION - 323)) | (1L << (END - 323)) | (1L << (ENDS - 323)) | (1L << (ENGINE - 323)) | (1L << (ENGINES - 323)) | (1L << (ERROR - 323)) | (1L << (ERRORS - 323)) | (1L << (ESCAPE - 323)) | (1L << (EVEN - 323)) | (1L << (EVENT - 323)) | (1L << (EVENTS - 323)) | (1L << (EVERY - 323)) | (1L << (EXCHANGE - 323)) | (1L << (EXCLUSIVE - 323)) | (1L << (EXPIRE - 323)) | (1L << (EXPORT - 323)) | (1L << (EXTENDED - 323)) | (1L << (EXTENT_SIZE - 323)) | (1L << (FAST - 323)) | (1L << (FAULTS - 323)) | (1L << (FIELDS - 323)) | (1L << (FILE_BLOCK_SIZE - 323)) | (1L << (FILTER - 323)) | (1L << (FIRST - 323)) | (1L << (FIXED - 323)) | (1L << (FLUSH - 323)) | (1L << (FOLLOWS - 323)) | (1L << (FOUND - 323)) | (1L << (FULL - 323)) | (1L << (FUNCTION - 323)) | (1L << (GENERAL - 323)) | (1L << (GLOBAL - 323)) | (1L << (GRANTS - 323)) | (1L << (GROUP_REPLICATION - 323)) | (1L << (HANDLER - 323)) | (1L << (HASH - 323)) | (1L << (HELP - 323)) | (1L << (HOST - 323)) | (1L << (HOSTS - 323)) | (1L << (IDENTIFIED - 323)) | (1L << (IGNORE_SERVER_IDS - 323)) | (1L << (IMPORT - 323)) | (1L << (INDEXES - 323)) | (1L << (INITIAL_SIZE - 323)) | (1L << (INPLACE - 323)) | (1L << (INSERT_METHOD - 323)) | (1L << (INSTALL - 323)) | (1L << (INSTANCE - 323)) | (1L << (INVISIBLE - 323)) | (1L << (INVOKER - 323)) | (1L << (IO - 323)) | (1L << (IO_THREAD - 323)) | (1L << (IPC - 323)) | (1L << (ISOLATION - 323)) | (1L << (ISSUER - 323)) | (1L << (JSON - 323)) | (1L << (KEY_BLOCK_SIZE - 323)) | (1L << (LANGUAGE - 323)) | (1L << (LAST - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (LEAVES - 387)) | (1L << (LESS - 387)) | (1L << (LEVEL - 387)) | (1L << (LIST - 387)) | (1L << (LOCAL - 387)) | (1L << (LOGFILE - 387)) | (1L << (LOGS - 387)) | (1L << (MASTER - 387)) | (1L << (MASTER_AUTO_POSITION - 387)) | (1L << (MASTER_CONNECT_RETRY - 387)) | (1L << (MASTER_DELAY - 387)) | (1L << (MASTER_HEARTBEAT_PERIOD - 387)) | (1L << (MASTER_HOST - 387)) | (1L << (MASTER_LOG_FILE - 387)) | (1L << (MASTER_LOG_POS - 387)) | (1L << (MASTER_PASSWORD - 387)) | (1L << (MASTER_PORT - 387)) | (1L << (MASTER_RETRY_COUNT - 387)) | (1L << (MASTER_SSL - 387)) | (1L << (MASTER_SSL_CA - 387)) | (1L << (MASTER_SSL_CAPATH - 387)) | (1L << (MASTER_SSL_CERT - 387)) | (1L << (MASTER_SSL_CIPHER - 387)) | (1L << (MASTER_SSL_CRL - 387)) | (1L << (MASTER_SSL_CRLPATH - 387)) | (1L << (MASTER_SSL_KEY - 387)) | (1L << (MASTER_TLS_VERSION - 387)) | (1L << (MASTER_USER - 387)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 387)) | (1L << (MAX_QUERIES_PER_HOUR - 387)) | (1L << (MAX_ROWS - 387)) | (1L << (MAX_SIZE - 387)) | (1L << (MAX_UPDATES_PER_HOUR - 387)) | (1L << (MAX_USER_CONNECTIONS - 387)) | (1L << (MEDIUM - 387)) | (1L << (MERGE - 387)) | (1L << (MESSAGE_TEXT - 387)) | (1L << (MID - 387)) | (1L << (MIGRATE - 387)) | (1L << (MIN_ROWS - 387)) | (1L << (MODE - 387)) | (1L << (MODIFY - 387)) | (1L << (MUTEX - 387)) | (1L << (MYSQL - 387)) | (1L << (MYSQL_ERRNO - 387)) | (1L << (NAME - 387)) | (1L << (NAMES - 387)) | (1L << (NCHAR - 387)) | (1L << (NEVER - 387)) | (1L << (NEXT - 387)) | (1L << (NO - 387)) | (1L << (NODEGROUP - 387)) | (1L << (NONE - 387)) | (1L << (OFFLINE - 387)) | (1L << (OFFSET - 387)) | (1L << (OJ - 387)) | (1L << (OLD_PASSWORD - 387)) | (1L << (ONE - 387)) | (1L << (ONLINE - 387)) | (1L << (ONLY - 387)) | (1L << (OPEN - 387)) | (1L << (OPTIMIZER_COSTS - 387)) | (1L << (OPTIONS - 387)) | (1L << (OWNER - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PAGE - 451)) | (1L << (PARSER - 451)) | (1L << (PARTIAL - 451)) | (1L << (PARTITIONING - 451)) | (1L << (PARTITIONS - 451)) | (1L << (PASSWORD - 451)) | (1L << (PHASE - 451)) | (1L << (PLUGIN - 451)) | (1L << (PLUGIN_DIR - 451)) | (1L << (PLUGINS - 451)) | (1L << (PORT - 451)) | (1L << (PRECEDES - 451)) | (1L << (PREPARE - 451)) | (1L << (PRESERVE - 451)) | (1L << (PREV - 451)) | (1L << (PROCESSLIST - 451)) | (1L << (PROFILE - 451)) | (1L << (PROFILES - 451)) | (1L << (PROXY - 451)) | (1L << (QUERY - 451)) | (1L << (QUICK - 451)) | (1L << (REBUILD - 451)) | (1L << (RECOVER - 451)) | (1L << (REDO_BUFFER_SIZE - 451)) | (1L << (REDUNDANT - 451)) | (1L << (RELAY - 451)) | (1L << (RELAY_LOG_FILE - 451)) | (1L << (RELAY_LOG_POS - 451)) | (1L << (RELAYLOG - 451)) | (1L << (REMOVE - 451)) | (1L << (REORGANIZE - 451)) | (1L << (REPAIR - 451)) | (1L << (REPLICATE_DO_DB - 451)) | (1L << (REPLICATE_DO_TABLE - 451)) | (1L << (REPLICATE_IGNORE_DB - 451)) | (1L << (REPLICATE_IGNORE_TABLE - 451)) | (1L << (REPLICATE_REWRITE_DB - 451)) | (1L << (REPLICATE_WILD_DO_TABLE - 451)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 451)) | (1L << (REPLICATION - 451)) | (1L << (RESET - 451)) | (1L << (RESUME - 451)) | (1L << (RETURNED_SQLSTATE - 451)) | (1L << (RETURNS - 451)) | (1L << (ROLLBACK - 451)) | (1L << (ROLLUP - 451)) | (1L << (ROTATE - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (ROW_FORMAT - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SCHEDULE - 451)) | (1L << (SECURITY - 451)) | (1L << (SERVER - 451)) | (1L << (SESSION - 451)) | (1L << (SHARE - 451)) | (1L << (SHARED - 451)) | (1L << (SIGNED - 451)) | (1L << (SIMPLE - 451)) | (1L << (SLAVE - 451)) | (1L << (SLOW - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOCKET - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SOME - 515)) | (1L << (SONAME - 515)) | (1L << (SOUNDS - 515)) | (1L << (SOURCE - 515)) | (1L << (SQL_AFTER_GTIDS - 515)) | (1L << (SQL_AFTER_MTS_GAPS - 515)) | (1L << (SQL_BEFORE_GTIDS - 515)) | (1L << (SQL_BUFFER_RESULT - 515)) | (1L << (SQL_CACHE - 515)) | (1L << (SQL_NO_CACHE - 515)) | (1L << (SQL_THREAD - 515)) | (1L << (START - 515)) | (1L << (STARTS - 515)) | (1L << (STATS_AUTO_RECALC - 515)) | (1L << (STATS_PERSISTENT - 515)) | (1L << (STATS_SAMPLE_PAGES - 515)) | (1L << (STATUS - 515)) | (1L << (STOP - 515)) | (1L << (STORAGE - 515)) | (1L << (STRING - 515)) | (1L << (SUBCLASS_ORIGIN - 515)) | (1L << (SUBJECT - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBPARTITIONS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SWAPS - 515)) | (1L << (SWITCHES - 515)) | (1L << (TABLE_NAME - 515)) | (1L << (TABLESPACE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TEMPTABLE - 515)) | (1L << (THAN - 515)) | (1L << (TRADITIONAL - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRIGGERS - 515)) | (1L << (TRUNCATE - 515)) | (1L << (UNDEFINED - 515)) | (1L << (UNDOFILE - 515)) | (1L << (UNDO_BUFFER_SIZE - 515)) | (1L << (UNINSTALL - 515)) | (1L << (UNKNOWN - 515)) | (1L << (UNTIL - 515)) | (1L << (UPGRADE - 515)) | (1L << (USER - 515)) | (1L << (USE_FRM - 515)) | (1L << (USER_RESOURCES - 515)) | (1L << (VALIDATION - 515)) | (1L << (VALUE - 515)) | (1L << (VARIABLES - 515)) | (1L << (VIEW - 515)) | (1L << (VISIBLE - 515)) | (1L << (WAIT - 515)) | (1L << (WARNINGS - 515)) | (1L << (WITHOUT - 515)) | (1L << (WORK - 515)) | (1L << (WRAPPER - 515)) | (1L << (X509 - 515)) | (1L << (XA - 515)) | (1L << (XML - 515)))) != 0) || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (INTERNAL - 580)) | (1L << (QUARTER - 580)) | (1L << (MONTH - 580)) | (1L << (DAY - 580)) | (1L << (HOUR - 580)) | (1L << (MINUTE - 580)) | (1L << (WEEK - 580)) | (1L << (SECOND - 580)) | (1L << (MICROSECOND - 580)) | (1L << (TABLES - 580)) | (1L << (ROUTINE - 580)) | (1L << (EXECUTE - 580)) | (1L << (FILE - 580)) | (1L << (PROCESS - 580)) | (1L << (RELOAD - 580)) | (1L << (SHUTDOWN - 580)) | (1L << (SUPER - 580)) | (1L << (PRIVILEGES - 580)) | (1L << (SESSION_VARIABLES_ADMIN - 580)) | (1L << (ARMSCII8 - 580)) | (1L << (ASCII - 580)) | (1L << (BIG5 - 580)) | (1L << (CP1250 - 580)) | (1L << (CP1251 - 580)) | (1L << (CP1256 - 580)) | (1L << (CP1257 - 580)) | (1L << (CP850 - 580)) | (1L << (CP852 - 580)) | (1L << (CP866 - 580)) | (1L << (CP932 - 580)) | (1L << (DEC8 - 580)) | (1L << (EUCJPMS - 580)) | (1L << (EUCKR - 580)) | (1L << (GB2312 - 580)) | (1L << (GBK - 580)) | (1L << (GEOSTD8 - 580)) | (1L << (GREEK - 580)) | (1L << (HEBREW - 580)) | (1L << (HP8 - 580)) | (1L << (KEYBCS2 - 580)) | (1L << (KOI8R - 580)) | (1L << (KOI8U - 580)) | (1L << (LATIN1 - 580)) | (1L << (LATIN2 - 580)) | (1L << (LATIN5 - 580)) | (1L << (LATIN7 - 580)) | (1L << (MACCE - 580)) | (1L << (MACROMAN - 580)) | (1L << (SJIS - 580)) | (1L << (SWE7 - 580)) | (1L << (TIS620 - 580)) | (1L << (UCS2 - 580)) | (1L << (UJIS - 580)) | (1L << (UTF16 - 580)) | (1L << (UTF16LE - 580)) | (1L << (UTF32 - 580)) | (1L << (UTF8 - 580)) | (1L << (UTF8MB3 - 580)) | (1L << (UTF8MB4 - 580)) | (1L << (ARCHIVE - 580)) | (1L << (BLACKHOLE - 580)) | (1L << (CSV - 580)) | (1L << (FEDERATED - 580)) | (1L << (INNODB - 580)))) != 0) || ((((_la - 644)) & ~0x3f) == 0 && ((1L << (_la - 644)) & ((1L << (MEMORY - 644)) | (1L << (MRG_MYISAM - 644)) | (1L << (MYISAM - 644)) | (1L << (NDB - 644)) | (1L << (NDBCLUSTER - 644)) | (1L << (PERFORMANCE_SCHEMA - 644)) | (1L << (TOKUDB - 644)) | (1L << (REPEATABLE - 644)) | (1L << (COMMITTED - 644)) | (1L << (UNCOMMITTED - 644)) | (1L << (SERIALIZABLE - 644)) | (1L << (GEOMETRYCOLLECTION - 644)) | (1L << (LINESTRING - 644)) | (1L << (MULTILINESTRING - 644)) | (1L << (MULTIPOINT - 644)) | (1L << (MULTIPOLYGON - 644)) | (1L << (POINT - 644)) | (1L << (POLYGON - 644)) | (1L << (ABS - 644)) | (1L << (ACOS - 644)) | (1L << (ADDDATE - 644)) | (1L << (ADDTIME - 644)) | (1L << (AES_DECRYPT - 644)) | (1L << (AES_ENCRYPT - 644)) | (1L << (AREA - 644)) | (1L << (ASBINARY - 644)) | (1L << (ASIN - 644)) | (1L << (ASTEXT - 644)) | (1L << (ASWKB - 644)) | (1L << (ASWKT - 644)) | (1L << (ASYMMETRIC_DECRYPT - 644)) | (1L << (ASYMMETRIC_DERIVE - 644)) | (1L << (ASYMMETRIC_ENCRYPT - 644)) | (1L << (ASYMMETRIC_SIGN - 644)) | (1L << (ASYMMETRIC_VERIFY - 644)) | (1L << (ATAN - 644)) | (1L << (ATAN2 - 644)) | (1L << (BENCHMARK - 644)) | (1L << (BIN - 644)) | (1L << (BIT_COUNT - 644)) | (1L << (BIT_LENGTH - 644)) | (1L << (BUFFER - 644)) | (1L << (CATALOG_NAME - 644)) | (1L << (CEIL - 644)) | (1L << (CEILING - 644)) | (1L << (CENTROID - 644)) | (1L << (CHARACTER_LENGTH - 644)) | (1L << (CHARSET - 644)) | (1L << (CHAR_LENGTH - 644)) | (1L << (COERCIBILITY - 644)) | (1L << (COLLATION - 644)) | (1L << (COMPRESS - 644)) | (1L << (CONCAT - 644)) | (1L << (CONCAT_WS - 644)) | (1L << (CONNECTION_ID - 644)) | (1L << (CONV - 644)) | (1L << (CONVERT_TZ - 644)) | (1L << (COS - 644)) | (1L << (COT - 644)) | (1L << (CRC32 - 644)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 644)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 644)))) != 0) || ((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (CREATE_DH_PARAMETERS - 708)) | (1L << (CREATE_DIGEST - 708)) | (1L << (CROSSES - 708)) | (1L << (DATEDIFF - 708)) | (1L << (DATE_FORMAT - 708)) | (1L << (DAYNAME - 708)) | (1L << (DAYOFMONTH - 708)) | (1L << (DAYOFWEEK - 708)) | (1L << (DAYOFYEAR - 708)) | (1L << (DECODE - 708)) | (1L << (DEGREES - 708)) | (1L << (DES_DECRYPT - 708)) | (1L << (DES_ENCRYPT - 708)) | (1L << (DIMENSION - 708)) | (1L << (DISJOINT - 708)) | (1L << (ELT - 708)) | (1L << (ENCODE - 708)) | (1L << (ENCRYPT - 708)) | (1L << (ENDPOINT - 708)) | (1L << (ENVELOPE - 708)) | (1L << (EQUALS - 708)) | (1L << (EXP - 708)) | (1L << (EXPORT_SET - 708)) | (1L << (EXTERIORRING - 708)) | (1L << (EXTRACTVALUE - 708)) | (1L << (FIELD - 708)) | (1L << (FIND_IN_SET - 708)) | (1L << (FLOOR - 708)) | (1L << (FORMAT - 708)) | (1L << (FOUND_ROWS - 708)) | (1L << (FROM_BASE64 - 708)) | (1L << (FROM_DAYS - 708)) | (1L << (FROM_UNIXTIME - 708)) | (1L << (GEOMCOLLFROMTEXT - 708)) | (1L << (GEOMCOLLFROMWKB - 708)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 708)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 708)) | (1L << (GEOMETRYFROMTEXT - 708)) | (1L << (GEOMETRYFROMWKB - 708)) | (1L << (GEOMETRYN - 708)) | (1L << (GEOMETRYTYPE - 708)) | (1L << (GEOMFROMTEXT - 708)) | (1L << (GEOMFROMWKB - 708)) | (1L << (GET_FORMAT - 708)) | (1L << (GET_LOCK - 708)) | (1L << (GLENGTH - 708)) | (1L << (GREATEST - 708)) | (1L << (GTID_SUBSET - 708)) | (1L << (GTID_SUBTRACT - 708)) | (1L << (HEX - 708)) | (1L << (IFNULL - 708)) | (1L << (INET6_ATON - 708)) | (1L << (INET6_NTOA - 708)) | (1L << (INET_ATON - 708)) | (1L << (INET_NTOA - 708)) | (1L << (INSTR - 708)) | (1L << (INTERIORRINGN - 708)) | (1L << (INTERSECTS - 708)) | (1L << (ISCLOSED - 708)) | (1L << (ISEMPTY - 708)) | (1L << (ISNULL - 708)) | (1L << (ISSIMPLE - 708)) | (1L << (IS_FREE_LOCK - 708)) | (1L << (IS_IPV4 - 708)))) != 0) || ((((_la - 772)) & ~0x3f) == 0 && ((1L << (_la - 772)) & ((1L << (IS_IPV4_COMPAT - 772)) | (1L << (IS_IPV4_MAPPED - 772)) | (1L << (IS_IPV6 - 772)) | (1L << (IS_USED_LOCK - 772)) | (1L << (LAST_INSERT_ID - 772)) | (1L << (LCASE - 772)) | (1L << (LEAST - 772)) | (1L << (LENGTH - 772)) | (1L << (LINEFROMTEXT - 772)) | (1L << (LINEFROMWKB - 772)) | (1L << (LINESTRINGFROMTEXT - 772)) | (1L << (LINESTRINGFROMWKB - 772)) | (1L << (LN - 772)) | (1L << (LOAD_FILE - 772)) | (1L << (LOCATE - 772)) | (1L << (LOG - 772)) | (1L << (LOG10 - 772)) | (1L << (LOG2 - 772)) | (1L << (LOWER - 772)) | (1L << (LPAD - 772)) | (1L << (LTRIM - 772)) | (1L << (MAKEDATE - 772)) | (1L << (MAKETIME - 772)) | (1L << (MAKE_SET - 772)) | (1L << (MASTER_POS_WAIT - 772)) | (1L << (MBRCONTAINS - 772)) | (1L << (MBRDISJOINT - 772)) | (1L << (MBREQUAL - 772)) | (1L << (MBRINTERSECTS - 772)) | (1L << (MBROVERLAPS - 772)) | (1L << (MBRTOUCHES - 772)) | (1L << (MBRWITHIN - 772)) | (1L << (MD5 - 772)) | (1L << (MLINEFROMTEXT - 772)) | (1L << (MLINEFROMWKB - 772)) | (1L << (MONTHNAME - 772)) | (1L << (MPOINTFROMTEXT - 772)) | (1L << (MPOINTFROMWKB - 772)) | (1L << (MPOLYFROMTEXT - 772)) | (1L << (MPOLYFROMWKB - 772)) | (1L << (MULTILINESTRINGFROMTEXT - 772)) | (1L << (MULTILINESTRINGFROMWKB - 772)) | (1L << (MULTIPOINTFROMTEXT - 772)) | (1L << (MULTIPOINTFROMWKB - 772)) | (1L << (MULTIPOLYGONFROMTEXT - 772)) | (1L << (MULTIPOLYGONFROMWKB - 772)) | (1L << (NAME_CONST - 772)) | (1L << (NULLIF - 772)) | (1L << (NUMGEOMETRIES - 772)) | (1L << (NUMINTERIORRINGS - 772)) | (1L << (NUMPOINTS - 772)) | (1L << (OCT - 772)) | (1L << (OCTET_LENGTH - 772)) | (1L << (ORD - 772)) | (1L << (OVERLAPS - 772)) | (1L << (PERIOD_ADD - 772)) | (1L << (PERIOD_DIFF - 772)) | (1L << (PI - 772)) | (1L << (POINTFROMTEXT - 772)) | (1L << (POINTFROMWKB - 772)) | (1L << (POINTN - 772)) | (1L << (POLYFROMTEXT - 772)) | (1L << (POLYFROMWKB - 772)) | (1L << (POLYGONFROMTEXT - 772)))) != 0) || ((((_la - 836)) & ~0x3f) == 0 && ((1L << (_la - 836)) & ((1L << (POLYGONFROMWKB - 836)) | (1L << (POW - 836)) | (1L << (POWER - 836)) | (1L << (QUOTE - 836)) | (1L << (RADIANS - 836)) | (1L << (RAND - 836)) | (1L << (RANDOM_BYTES - 836)) | (1L << (RELEASE_LOCK - 836)) | (1L << (REVERSE - 836)) | (1L << (ROUND - 836)) | (1L << (ROW_COUNT - 836)) | (1L << (RPAD - 836)) | (1L << (RTRIM - 836)) | (1L << (SEC_TO_TIME - 836)) | (1L << (SESSION_USER - 836)) | (1L << (SHA - 836)) | (1L << (SHA1 - 836)) | (1L << (SHA2 - 836)) | (1L << (SCHEMA_NAME - 836)) | (1L << (SIGN - 836)) | (1L << (SIN - 836)) | (1L << (SLEEP - 836)) | (1L << (SOUNDEX - 836)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 836)) | (1L << (SQRT - 836)) | (1L << (SRID - 836)) | (1L << (STARTPOINT - 836)) | (1L << (STRCMP - 836)) | (1L << (STR_TO_DATE - 836)) | (1L << (ST_AREA - 836)) | (1L << (ST_ASBINARY - 836)) | (1L << (ST_ASTEXT - 836)) | (1L << (ST_ASWKB - 836)) | (1L << (ST_ASWKT - 836)) | (1L << (ST_BUFFER - 836)) | (1L << (ST_CENTROID - 836)) | (1L << (ST_CONTAINS - 836)) | (1L << (ST_CROSSES - 836)) | (1L << (ST_DIFFERENCE - 836)) | (1L << (ST_DIMENSION - 836)) | (1L << (ST_DISJOINT - 836)) | (1L << (ST_DISTANCE - 836)) | (1L << (ST_ENDPOINT - 836)) | (1L << (ST_ENVELOPE - 836)) | (1L << (ST_EQUALS - 836)) | (1L << (ST_EXTERIORRING - 836)) | (1L << (ST_GEOMCOLLFROMTEXT - 836)) | (1L << (ST_GEOMCOLLFROMTXT - 836)) | (1L << (ST_GEOMCOLLFROMWKB - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 836)) | (1L << (ST_GEOMETRYFROMTEXT - 836)) | (1L << (ST_GEOMETRYFROMWKB - 836)) | (1L << (ST_GEOMETRYN - 836)) | (1L << (ST_GEOMETRYTYPE - 836)) | (1L << (ST_GEOMFROMTEXT - 836)) | (1L << (ST_GEOMFROMWKB - 836)) | (1L << (ST_INTERIORRINGN - 836)) | (1L << (ST_INTERSECTION - 836)) | (1L << (ST_INTERSECTS - 836)) | (1L << (ST_ISCLOSED - 836)) | (1L << (ST_ISEMPTY - 836)) | (1L << (ST_ISSIMPLE - 836)) | (1L << (ST_LINEFROMTEXT - 836)))) != 0) || ((((_la - 900)) & ~0x3f) == 0 && ((1L << (_la - 900)) & ((1L << (ST_LINEFROMWKB - 900)) | (1L << (ST_LINESTRINGFROMTEXT - 900)) | (1L << (ST_LINESTRINGFROMWKB - 900)) | (1L << (ST_NUMGEOMETRIES - 900)) | (1L << (ST_NUMINTERIORRING - 900)) | (1L << (ST_NUMINTERIORRINGS - 900)) | (1L << (ST_NUMPOINTS - 900)) | (1L << (ST_OVERLAPS - 900)) | (1L << (ST_POINTFROMTEXT - 900)) | (1L << (ST_POINTFROMWKB - 900)) | (1L << (ST_POINTN - 900)) | (1L << (ST_POLYFROMTEXT - 900)) | (1L << (ST_POLYFROMWKB - 900)) | (1L << (ST_POLYGONFROMTEXT - 900)) | (1L << (ST_POLYGONFROMWKB - 900)) | (1L << (ST_SRID - 900)) | (1L << (ST_STARTPOINT - 900)) | (1L << (ST_SYMDIFFERENCE - 900)) | (1L << (ST_TOUCHES - 900)) | (1L << (ST_UNION - 900)) | (1L << (ST_WITHIN - 900)) | (1L << (ST_X - 900)) | (1L << (ST_Y - 900)) | (1L << (SUBDATE - 900)) | (1L << (SUBSTRING_INDEX - 900)) | (1L << (SUBTIME - 900)) | (1L << (SYSTEM_USER - 900)) | (1L << (TAN - 900)) | (1L << (TIMEDIFF - 900)) | (1L << (TIMESTAMPADD - 900)) | (1L << (TIMESTAMPDIFF - 900)) | (1L << (TIME_FORMAT - 900)) | (1L << (TIME_TO_SEC - 900)) | (1L << (TOUCHES - 900)) | (1L << (TO_BASE64 - 900)) | (1L << (TO_DAYS - 900)) | (1L << (TO_SECONDS - 900)) | (1L << (UCASE - 900)) | (1L << (UNCOMPRESS - 900)) | (1L << (UNCOMPRESSED_LENGTH - 900)) | (1L << (UNHEX - 900)) | (1L << (UNIX_TIMESTAMP - 900)) | (1L << (UPDATEXML - 900)) | (1L << (UPPER - 900)) | (1L << (UUID - 900)) | (1L << (UUID_SHORT - 900)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 900)) | (1L << (VERSION - 900)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 900)) | (1L << (WEEKDAY - 900)) | (1L << (WEEKOFYEAR - 900)) | (1L << (WEIGHT_STRING - 900)) | (1L << (WITHIN - 900)) | (1L << (YEARWEEK - 900)) | (1L << (Y_FUNCTION - 900)) | (1L << (X_FUNCTION - 900)))) != 0) || ((((_la - 994)) & ~0x3f) == 0 && ((1L << (_la - 994)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 994)) | (1L << (STRING_LITERAL - 994)) | (1L << (ID - 994)) | (1L << (REVERSE_QUOTE_ID - 994)))) != 0))
                        {
                            {
                                State = 3899; uid();
                                State = 3904;
                                ErrorHandler.Sync(this);
                                _la = TokenStream.LA(1);
                                while (_la == COMMA)
                                {
                                    {
                                        {
                                            State = 3900; Match(COMMA);
                                            State = 3901; uid();
                                        }
                                    }
                                    State = 3906;
                                    ErrorHandler.Sync(this);
                                    _la = TokenStream.LA(1);
                                }
                            }
                        }

                        State = 3909; Match(RR_BRACKET);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class StringMasterOptionContext : ParserRuleContext
    {
        public ITerminalNode MASTER_BIND() { return GetToken(MySqlParser.MASTER_BIND, 0); }
        public ITerminalNode MASTER_HOST() { return GetToken(MySqlParser.MASTER_HOST, 0); }
        public ITerminalNode MASTER_USER() { return GetToken(MySqlParser.MASTER_USER, 0); }
        public ITerminalNode MASTER_PASSWORD() { return GetToken(MySqlParser.MASTER_PASSWORD, 0); }
        public ITerminalNode MASTER_LOG_FILE() { return GetToken(MySqlParser.MASTER_LOG_FILE, 0); }
        public ITerminalNode RELAY_LOG_FILE() { return GetToken(MySqlParser.RELAY_LOG_FILE, 0); }
        public ITerminalNode MASTER_SSL_CA() { return GetToken(MySqlParser.MASTER_SSL_CA, 0); }
        public ITerminalNode MASTER_SSL_CAPATH() { return GetToken(MySqlParser.MASTER_SSL_CAPATH, 0); }
        public ITerminalNode MASTER_SSL_CERT() { return GetToken(MySqlParser.MASTER_SSL_CERT, 0); }
        public ITerminalNode MASTER_SSL_CRL() { return GetToken(MySqlParser.MASTER_SSL_CRL, 0); }
        public ITerminalNode MASTER_SSL_CRLPATH() { return GetToken(MySqlParser.MASTER_SSL_CRLPATH, 0); }
        public ITerminalNode MASTER_SSL_KEY() { return GetToken(MySqlParser.MASTER_SSL_KEY, 0); }
        public ITerminalNode MASTER_SSL_CIPHER() { return GetToken(MySqlParser.MASTER_SSL_CIPHER, 0); }
        public ITerminalNode MASTER_TLS_VERSION() { return GetToken(MySqlParser.MASTER_TLS_VERSION, 0); }
        public StringMasterOptionContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_stringMasterOption; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterStringMasterOption(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitStringMasterOption(this);
        }
    }

    [RuleVersion(0)]
    public StringMasterOptionContext stringMasterOption()
    {
        StringMasterOptionContext _localctx = new StringMasterOptionContext(Context, State);
        EnterRule(_localctx, 306, RULE_stringMasterOption);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 3912;
                _la = TokenStream.LA(1);
                if (!(_la == MASTER_BIND || ((((_la - 399)) & ~0x3f) == 0 && ((1L << (_la - 399)) & ((1L << (MASTER_HOST - 399)) | (1L << (MASTER_LOG_FILE - 399)) | (1L << (MASTER_PASSWORD - 399)) | (1L << (MASTER_SSL_CA - 399)) | (1L << (MASTER_SSL_CAPATH - 399)) | (1L << (MASTER_SSL_CERT - 399)) | (1L << (MASTER_SSL_CIPHER - 399)) | (1L << (MASTER_SSL_CRL - 399)) | (1L << (MASTER_SSL_CRLPATH - 399)) | (1L << (MASTER_SSL_KEY - 399)) | (1L << (MASTER_TLS_VERSION - 399)) | (1L << (MASTER_USER - 399)))) != 0) || _la == RELAY_LOG_FILE))
                {
                    ErrorHandler.RecoverInline(this);
                }
                else
                {
                    ErrorHandler.ReportMatch(this);
                    Consume();
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class DecimalMasterOptionContext : ParserRuleContext
    {
        public ITerminalNode MASTER_PORT() { return GetToken(MySqlParser.MASTER_PORT, 0); }
        public ITerminalNode MASTER_CONNECT_RETRY() { return GetToken(MySqlParser.MASTER_CONNECT_RETRY, 0); }
        public ITerminalNode MASTER_RETRY_COUNT() { return GetToken(MySqlParser.MASTER_RETRY_COUNT, 0); }
        public ITerminalNode MASTER_DELAY() { return GetToken(MySqlParser.MASTER_DELAY, 0); }
        public ITerminalNode MASTER_LOG_POS() { return GetToken(MySqlParser.MASTER_LOG_POS, 0); }
        public ITerminalNode RELAY_LOG_POS() { return GetToken(MySqlParser.RELAY_LOG_POS, 0); }
        public DecimalMasterOptionContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_decimalMasterOption; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterDecimalMasterOption(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitDecimalMasterOption(this);
        }
    }

    [RuleVersion(0)]
    public DecimalMasterOptionContext decimalMasterOption()
    {
        DecimalMasterOptionContext _localctx = new DecimalMasterOptionContext(Context, State);
        EnterRule(_localctx, 308, RULE_decimalMasterOption);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 3914;
                _la = TokenStream.LA(1);
                if (!(((((_la - 396)) & ~0x3f) == 0 && ((1L << (_la - 396)) & ((1L << (MASTER_CONNECT_RETRY - 396)) | (1L << (MASTER_DELAY - 396)) | (1L << (MASTER_LOG_POS - 396)) | (1L << (MASTER_PORT - 396)) | (1L << (MASTER_RETRY_COUNT - 396)))) != 0) || _la == RELAY_LOG_POS))
                {
                    ErrorHandler.RecoverInline(this);
                }
                else
                {
                    ErrorHandler.ReportMatch(this);
                    Consume();
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class BoolMasterOptionContext : ParserRuleContext
    {
        public ITerminalNode MASTER_AUTO_POSITION() { return GetToken(MySqlParser.MASTER_AUTO_POSITION, 0); }
        public ITerminalNode MASTER_SSL() { return GetToken(MySqlParser.MASTER_SSL, 0); }
        public ITerminalNode MASTER_SSL_VERIFY_SERVER_CERT() { return GetToken(MySqlParser.MASTER_SSL_VERIFY_SERVER_CERT, 0); }
        public BoolMasterOptionContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_boolMasterOption; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterBoolMasterOption(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitBoolMasterOption(this);
        }
    }

    [RuleVersion(0)]
    public BoolMasterOptionContext boolMasterOption()
    {
        BoolMasterOptionContext _localctx = new BoolMasterOptionContext(Context, State);
        EnterRule(_localctx, 310, RULE_boolMasterOption);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 3916;
                _la = TokenStream.LA(1);
                if (!(_la == MASTER_SSL_VERIFY_SERVER_CERT || _la == MASTER_AUTO_POSITION || _la == MASTER_SSL))
                {
                    ErrorHandler.RecoverInline(this);
                }
                else
                {
                    ErrorHandler.ReportMatch(this);
                    Consume();
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ChannelOptionContext : ParserRuleContext
    {
        public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
        public ITerminalNode CHANNEL() { return GetToken(MySqlParser.CHANNEL, 0); }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public ChannelOptionContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_channelOption; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterChannelOption(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitChannelOption(this);
        }
    }

    [RuleVersion(0)]
    public ChannelOptionContext channelOption()
    {
        ChannelOptionContext _localctx = new ChannelOptionContext(Context, State);
        EnterRule(_localctx, 312, RULE_channelOption);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 3918; Match(FOR);
                State = 3919; Match(CHANNEL);
                State = 3920; Match(STRING_LITERAL);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ReplicationFilterContext : ParserRuleContext
    {
        public ReplicationFilterContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_replicationFilter; } }

        public ReplicationFilterContext() { }
        public virtual void CopyFrom(ReplicationFilterContext context)
        {
            base.CopyFrom(context);
        }
    }
    public partial class WildIgnoreTableReplicationContext : ReplicationFilterContext
    {
        public ITerminalNode REPLICATE_WILD_IGNORE_TABLE() { return GetToken(MySqlParser.REPLICATE_WILD_IGNORE_TABLE, 0); }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public SimpleStringsContext simpleStrings()
        {
            return GetRuleContext<SimpleStringsContext>(0);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public WildIgnoreTableReplicationContext(ReplicationFilterContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterWildIgnoreTableReplication(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitWildIgnoreTableReplication(this);
        }
    }
    public partial class DoTableReplicationContext : ReplicationFilterContext
    {
        public ITerminalNode REPLICATE_DO_TABLE() { return GetToken(MySqlParser.REPLICATE_DO_TABLE, 0); }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public TablesContext tables()
        {
            return GetRuleContext<TablesContext>(0);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public DoTableReplicationContext(ReplicationFilterContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterDoTableReplication(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitDoTableReplication(this);
        }
    }
    public partial class IgnoreTableReplicationContext : ReplicationFilterContext
    {
        public ITerminalNode REPLICATE_IGNORE_TABLE() { return GetToken(MySqlParser.REPLICATE_IGNORE_TABLE, 0); }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public TablesContext tables()
        {
            return GetRuleContext<TablesContext>(0);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public IgnoreTableReplicationContext(ReplicationFilterContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterIgnoreTableReplication(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitIgnoreTableReplication(this);
        }
    }
    public partial class RewriteDbReplicationContext : ReplicationFilterContext
    {
        public ITerminalNode REPLICATE_REWRITE_DB() { return GetToken(MySqlParser.REPLICATE_REWRITE_DB, 0); }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public TablePairContext[] tablePair()
        {
            return GetRuleContexts<TablePairContext>();
        }
        public TablePairContext tablePair(int i)
        {
            return GetRuleContext<TablePairContext>(i);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public RewriteDbReplicationContext(ReplicationFilterContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterRewriteDbReplication(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitRewriteDbReplication(this);
        }
    }
    public partial class DoDbReplicationContext : ReplicationFilterContext
    {
        public ITerminalNode REPLICATE_DO_DB() { return GetToken(MySqlParser.REPLICATE_DO_DB, 0); }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public UidListContext uidList()
        {
            return GetRuleContext<UidListContext>(0);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public DoDbReplicationContext(ReplicationFilterContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterDoDbReplication(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitDoDbReplication(this);
        }
    }
    public partial class IgnoreDbReplicationContext : ReplicationFilterContext
    {
        public ITerminalNode REPLICATE_IGNORE_DB() { return GetToken(MySqlParser.REPLICATE_IGNORE_DB, 0); }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public UidListContext uidList()
        {
            return GetRuleContext<UidListContext>(0);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public IgnoreDbReplicationContext(ReplicationFilterContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterIgnoreDbReplication(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitIgnoreDbReplication(this);
        }
    }
    public partial class WildDoTableReplicationContext : ReplicationFilterContext
    {
        public ITerminalNode REPLICATE_WILD_DO_TABLE() { return GetToken(MySqlParser.REPLICATE_WILD_DO_TABLE, 0); }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public SimpleStringsContext simpleStrings()
        {
            return GetRuleContext<SimpleStringsContext>(0);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public WildDoTableReplicationContext(ReplicationFilterContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterWildDoTableReplication(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitWildDoTableReplication(this);
        }
    }

    [RuleVersion(0)]
    public ReplicationFilterContext replicationFilter()
    {
        ReplicationFilterContext _localctx = new ReplicationFilterContext(Context, State);
        EnterRule(_localctx, 314, RULE_replicationFilter);
        int _la;
        try
        {
            State = 3971;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case REPLICATE_DO_DB:
                    _localctx = new DoDbReplicationContext(_localctx);
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 3922; Match(REPLICATE_DO_DB);
                        State = 3923; Match(EQUAL_SYMBOL);
                        State = 3924; Match(LR_BRACKET);
                        State = 3925; uidList();
                        State = 3926; Match(RR_BRACKET);
                    }
                    break;
                case REPLICATE_IGNORE_DB:
                    _localctx = new IgnoreDbReplicationContext(_localctx);
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 3928; Match(REPLICATE_IGNORE_DB);
                        State = 3929; Match(EQUAL_SYMBOL);
                        State = 3930; Match(LR_BRACKET);
                        State = 3931; uidList();
                        State = 3932; Match(RR_BRACKET);
                    }
                    break;
                case REPLICATE_DO_TABLE:
                    _localctx = new DoTableReplicationContext(_localctx);
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 3934; Match(REPLICATE_DO_TABLE);
                        State = 3935; Match(EQUAL_SYMBOL);
                        State = 3936; Match(LR_BRACKET);
                        State = 3937; tables();
                        State = 3938; Match(RR_BRACKET);
                    }
                    break;
                case REPLICATE_IGNORE_TABLE:
                    _localctx = new IgnoreTableReplicationContext(_localctx);
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 3940; Match(REPLICATE_IGNORE_TABLE);
                        State = 3941; Match(EQUAL_SYMBOL);
                        State = 3942; Match(LR_BRACKET);
                        State = 3943; tables();
                        State = 3944; Match(RR_BRACKET);
                    }
                    break;
                case REPLICATE_WILD_DO_TABLE:
                    _localctx = new WildDoTableReplicationContext(_localctx);
                    EnterOuterAlt(_localctx, 5);
                    {
                        State = 3946; Match(REPLICATE_WILD_DO_TABLE);
                        State = 3947; Match(EQUAL_SYMBOL);
                        State = 3948; Match(LR_BRACKET);
                        State = 3949; simpleStrings();
                        State = 3950; Match(RR_BRACKET);
                    }
                    break;
                case REPLICATE_WILD_IGNORE_TABLE:
                    _localctx = new WildIgnoreTableReplicationContext(_localctx);
                    EnterOuterAlt(_localctx, 6);
                    {
                        State = 3952; Match(REPLICATE_WILD_IGNORE_TABLE);
                        State = 3953; Match(EQUAL_SYMBOL);
                        State = 3954; Match(LR_BRACKET);
                        State = 3955; simpleStrings();
                        State = 3956; Match(RR_BRACKET);
                    }
                    break;
                case REPLICATE_REWRITE_DB:
                    _localctx = new RewriteDbReplicationContext(_localctx);
                    EnterOuterAlt(_localctx, 7);
                    {
                        State = 3958; Match(REPLICATE_REWRITE_DB);
                        State = 3959; Match(EQUAL_SYMBOL);
                        State = 3960; Match(LR_BRACKET);
                        State = 3961; tablePair();
                        State = 3966;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        while (_la == COMMA)
                        {
                            {
                                {
                                    State = 3962; Match(COMMA);
                                    State = 3963; tablePair();
                                }
                            }
                            State = 3968;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                        }
                        State = 3969; Match(RR_BRACKET);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class TablePairContext : ParserRuleContext
    {
        public TableNameContext firstTable;
        public TableNameContext secondTable;
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public ITerminalNode COMMA() { return GetToken(MySqlParser.COMMA, 0); }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public TableNameContext[] tableName()
        {
            return GetRuleContexts<TableNameContext>();
        }
        public TableNameContext tableName(int i)
        {
            return GetRuleContext<TableNameContext>(i);
        }
        public TablePairContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_tablePair; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterTablePair(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitTablePair(this);
        }
    }

    [RuleVersion(0)]
    public TablePairContext tablePair()
    {
        TablePairContext _localctx = new TablePairContext(Context, State);
        EnterRule(_localctx, 316, RULE_tablePair);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 3973; Match(LR_BRACKET);
                State = 3974; _localctx.firstTable = tableName();
                State = 3975; Match(COMMA);
                State = 3976; _localctx.secondTable = tableName();
                State = 3977; Match(RR_BRACKET);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ThreadTypeContext : ParserRuleContext
    {
        public ITerminalNode IO_THREAD() { return GetToken(MySqlParser.IO_THREAD, 0); }
        public ITerminalNode SQL_THREAD() { return GetToken(MySqlParser.SQL_THREAD, 0); }
        public ThreadTypeContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_threadType; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterThreadType(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitThreadType(this);
        }
    }

    [RuleVersion(0)]
    public ThreadTypeContext threadType()
    {
        ThreadTypeContext _localctx = new ThreadTypeContext(Context, State);
        EnterRule(_localctx, 318, RULE_threadType);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 3979;
                _la = TokenStream.LA(1);
                if (!(_la == IO_THREAD || _la == SQL_THREAD))
                {
                    ErrorHandler.RecoverInline(this);
                }
                else
                {
                    ErrorHandler.ReportMatch(this);
                    Consume();
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class UntilOptionContext : ParserRuleContext
    {
        public UntilOptionContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_untilOption; } }

        public UntilOptionContext() { }
        public virtual void CopyFrom(UntilOptionContext context)
        {
            base.CopyFrom(context);
        }
    }
    public partial class GtidsUntilOptionContext : UntilOptionContext
    {
        public IToken gtids;
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public GtuidSetContext gtuidSet()
        {
            return GetRuleContext<GtuidSetContext>(0);
        }
        public ITerminalNode SQL_BEFORE_GTIDS() { return GetToken(MySqlParser.SQL_BEFORE_GTIDS, 0); }
        public ITerminalNode SQL_AFTER_GTIDS() { return GetToken(MySqlParser.SQL_AFTER_GTIDS, 0); }
        public GtidsUntilOptionContext(UntilOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterGtidsUntilOption(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitGtidsUntilOption(this);
        }
    }
    public partial class SqlGapsUntilOptionContext : UntilOptionContext
    {
        public ITerminalNode SQL_AFTER_MTS_GAPS() { return GetToken(MySqlParser.SQL_AFTER_MTS_GAPS, 0); }
        public SqlGapsUntilOptionContext(UntilOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterSqlGapsUntilOption(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitSqlGapsUntilOption(this);
        }
    }
    public partial class MasterLogUntilOptionContext : UntilOptionContext
    {
        public ITerminalNode MASTER_LOG_FILE() { return GetToken(MySqlParser.MASTER_LOG_FILE, 0); }
        public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
        public ITerminalNode EQUAL_SYMBOL(int i)
        {
            return GetToken(MySqlParser.EQUAL_SYMBOL, i);
        }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public ITerminalNode COMMA() { return GetToken(MySqlParser.COMMA, 0); }
        public ITerminalNode MASTER_LOG_POS() { return GetToken(MySqlParser.MASTER_LOG_POS, 0); }
        public DecimalLiteralContext decimalLiteral()
        {
            return GetRuleContext<DecimalLiteralContext>(0);
        }
        public MasterLogUntilOptionContext(UntilOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterMasterLogUntilOption(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitMasterLogUntilOption(this);
        }
    }
    public partial class RelayLogUntilOptionContext : UntilOptionContext
    {
        public ITerminalNode RELAY_LOG_FILE() { return GetToken(MySqlParser.RELAY_LOG_FILE, 0); }
        public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
        public ITerminalNode EQUAL_SYMBOL(int i)
        {
            return GetToken(MySqlParser.EQUAL_SYMBOL, i);
        }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public ITerminalNode COMMA() { return GetToken(MySqlParser.COMMA, 0); }
        public ITerminalNode RELAY_LOG_POS() { return GetToken(MySqlParser.RELAY_LOG_POS, 0); }
        public DecimalLiteralContext decimalLiteral()
        {
            return GetRuleContext<DecimalLiteralContext>(0);
        }
        public RelayLogUntilOptionContext(UntilOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterRelayLogUntilOption(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitRelayLogUntilOption(this);
        }
    }

    [RuleVersion(0)]
    public UntilOptionContext untilOption()
    {
        UntilOptionContext _localctx = new UntilOptionContext(Context, State);
        EnterRule(_localctx, 320, RULE_untilOption);
        int _la;
        try
        {
            State = 3999;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case SQL_AFTER_GTIDS:
                case SQL_BEFORE_GTIDS:
                    _localctx = new GtidsUntilOptionContext(_localctx);
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 3981;
                        ((GtidsUntilOptionContext)_localctx).gtids = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == SQL_AFTER_GTIDS || _la == SQL_BEFORE_GTIDS))
                        {
                            ((GtidsUntilOptionContext)_localctx).gtids = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                        State = 3982; Match(EQUAL_SYMBOL);
                        State = 3983; gtuidSet();
                    }
                    break;
                case MASTER_LOG_FILE:
                    _localctx = new MasterLogUntilOptionContext(_localctx);
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 3984; Match(MASTER_LOG_FILE);
                        State = 3985; Match(EQUAL_SYMBOL);
                        State = 3986; Match(STRING_LITERAL);
                        State = 3987; Match(COMMA);
                        State = 3988; Match(MASTER_LOG_POS);
                        State = 3989; Match(EQUAL_SYMBOL);
                        State = 3990; decimalLiteral();
                    }
                    break;
                case RELAY_LOG_FILE:
                    _localctx = new RelayLogUntilOptionContext(_localctx);
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 3991; Match(RELAY_LOG_FILE);
                        State = 3992; Match(EQUAL_SYMBOL);
                        State = 3993; Match(STRING_LITERAL);
                        State = 3994; Match(COMMA);
                        State = 3995; Match(RELAY_LOG_POS);
                        State = 3996; Match(EQUAL_SYMBOL);
                        State = 3997; decimalLiteral();
                    }
                    break;
                case SQL_AFTER_MTS_GAPS:
                    _localctx = new SqlGapsUntilOptionContext(_localctx);
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 3998; Match(SQL_AFTER_MTS_GAPS);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ConnectionOptionContext : ParserRuleContext
    {
        public ConnectionOptionContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_connectionOption; } }

        public ConnectionOptionContext() { }
        public virtual void CopyFrom(ConnectionOptionContext context)
        {
            base.CopyFrom(context);
        }
    }
    public partial class PluginDirConnectionOptionContext : ConnectionOptionContext
    {
        public IToken conOptPluginDir;
        public ITerminalNode PLUGIN_DIR() { return GetToken(MySqlParser.PLUGIN_DIR, 0); }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public PluginDirConnectionOptionContext(ConnectionOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterPluginDirConnectionOption(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitPluginDirConnectionOption(this);
        }
    }
    public partial class UserConnectionOptionContext : ConnectionOptionContext
    {
        public IToken conOptUser;
        public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public UserConnectionOptionContext(ConnectionOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterUserConnectionOption(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitUserConnectionOption(this);
        }
    }
    public partial class DefaultAuthConnectionOptionContext : ConnectionOptionContext
    {
        public IToken conOptDefAuth;
        public ITerminalNode DEFAULT_AUTH() { return GetToken(MySqlParser.DEFAULT_AUTH, 0); }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public DefaultAuthConnectionOptionContext(ConnectionOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterDefaultAuthConnectionOption(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitDefaultAuthConnectionOption(this);
        }
    }
    public partial class PasswordConnectionOptionContext : ConnectionOptionContext
    {
        public IToken conOptPassword;
        public ITerminalNode PASSWORD() { return GetToken(MySqlParser.PASSWORD, 0); }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public PasswordConnectionOptionContext(ConnectionOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterPasswordConnectionOption(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitPasswordConnectionOption(this);
        }
    }

    [RuleVersion(0)]
    public ConnectionOptionContext connectionOption()
    {
        ConnectionOptionContext _localctx = new ConnectionOptionContext(Context, State);
        EnterRule(_localctx, 322, RULE_connectionOption);
        try
        {
            State = 4013;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case USER:
                    _localctx = new UserConnectionOptionContext(_localctx);
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 4001; Match(USER);
                        State = 4002; Match(EQUAL_SYMBOL);
                        State = 4003; ((UserConnectionOptionContext)_localctx).conOptUser = Match(STRING_LITERAL);
                    }
                    break;
                case PASSWORD:
                    _localctx = new PasswordConnectionOptionContext(_localctx);
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 4004; Match(PASSWORD);
                        State = 4005; Match(EQUAL_SYMBOL);
                        State = 4006; ((PasswordConnectionOptionContext)_localctx).conOptPassword = Match(STRING_LITERAL);
                    }
                    break;
                case DEFAULT_AUTH:
                    _localctx = new DefaultAuthConnectionOptionContext(_localctx);
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 4007; Match(DEFAULT_AUTH);
                        State = 4008; Match(EQUAL_SYMBOL);
                        State = 4009; ((DefaultAuthConnectionOptionContext)_localctx).conOptDefAuth = Match(STRING_LITERAL);
                    }
                    break;
                case PLUGIN_DIR:
                    _localctx = new PluginDirConnectionOptionContext(_localctx);
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 4010; Match(PLUGIN_DIR);
                        State = 4011; Match(EQUAL_SYMBOL);
                        State = 4012; ((PluginDirConnectionOptionContext)_localctx).conOptPluginDir = Match(STRING_LITERAL);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class GtuidSetContext : ParserRuleContext
    {
        public UuidSetContext[] uuidSet()
        {
            return GetRuleContexts<UuidSetContext>();
        }
        public UuidSetContext uuidSet(int i)
        {
            return GetRuleContext<UuidSetContext>(i);
        }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public GtuidSetContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_gtuidSet; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterGtuidSet(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitGtuidSet(this);
        }
    }

    [RuleVersion(0)]
    public GtuidSetContext gtuidSet()
    {
        GtuidSetContext _localctx = new GtuidSetContext(Context, State);
        EnterRule(_localctx, 324, RULE_gtuidSet);
        int _la;
        try
        {
            State = 4024;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case ZERO_DECIMAL:
                case ONE_DECIMAL:
                case TWO_DECIMAL:
                case DECIMAL_LITERAL:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 4015; uuidSet();
                        State = 4020;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        while (_la == COMMA)
                        {
                            {
                                {
                                    State = 4016; Match(COMMA);
                                    State = 4017; uuidSet();
                                }
                            }
                            State = 4022;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                        }
                    }
                    break;
                case STRING_LITERAL:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 4023; Match(STRING_LITERAL);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class XaStartTransactionContext : ParserRuleContext
    {
        public IToken xaStart;
        public IToken xaAction;
        public ITerminalNode XA() { return GetToken(MySqlParser.XA, 0); }
        public XidContext xid()
        {
            return GetRuleContext<XidContext>(0);
        }
        public ITerminalNode START() { return GetToken(MySqlParser.START, 0); }
        public ITerminalNode BEGIN() { return GetToken(MySqlParser.BEGIN, 0); }
        public ITerminalNode JOIN() { return GetToken(MySqlParser.JOIN, 0); }
        public ITerminalNode RESUME() { return GetToken(MySqlParser.RESUME, 0); }
        public XaStartTransactionContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_xaStartTransaction; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterXaStartTransaction(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitXaStartTransaction(this);
        }
    }

    [RuleVersion(0)]
    public XaStartTransactionContext xaStartTransaction()
    {
        XaStartTransactionContext _localctx = new XaStartTransactionContext(Context, State);
        EnterRule(_localctx, 326, RULE_xaStartTransaction);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 4026; Match(XA);
                State = 4027;
                _localctx.xaStart = TokenStream.LT(1);
                _la = TokenStream.LA(1);
                if (!(_la == BEGIN || _la == START))
                {
                    _localctx.xaStart = ErrorHandler.RecoverInline(this);
                }
                else
                {
                    ErrorHandler.ReportMatch(this);
                    Consume();
                }
                State = 4028; xid();
                State = 4030;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == JOIN || _la == RESUME)
                {
                    {
                        State = 4029;
                        _localctx.xaAction = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == JOIN || _la == RESUME))
                        {
                            _localctx.xaAction = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                }

            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class XaEndTransactionContext : ParserRuleContext
    {
        public ITerminalNode XA() { return GetToken(MySqlParser.XA, 0); }
        public ITerminalNode END() { return GetToken(MySqlParser.END, 0); }
        public XidContext xid()
        {
            return GetRuleContext<XidContext>(0);
        }
        public ITerminalNode SUSPEND() { return GetToken(MySqlParser.SUSPEND, 0); }
        public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
        public ITerminalNode MIGRATE() { return GetToken(MySqlParser.MIGRATE, 0); }
        public XaEndTransactionContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_xaEndTransaction; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterXaEndTransaction(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitXaEndTransaction(this);
        }
    }

    [RuleVersion(0)]
    public XaEndTransactionContext xaEndTransaction()
    {
        XaEndTransactionContext _localctx = new XaEndTransactionContext(Context, State);
        EnterRule(_localctx, 328, RULE_xaEndTransaction);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 4032; Match(XA);
                State = 4033; Match(END);
                State = 4034; xid();
                State = 4040;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == SUSPEND)
                {
                    {
                        State = 4035; Match(SUSPEND);
                        State = 4038;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == FOR)
                        {
                            {
                                State = 4036; Match(FOR);
                                State = 4037; Match(MIGRATE);
                            }
                        }

                    }
                }

            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class XaPrepareStatementContext : ParserRuleContext
    {
        public ITerminalNode XA() { return GetToken(MySqlParser.XA, 0); }
        public ITerminalNode PREPARE() { return GetToken(MySqlParser.PREPARE, 0); }
        public XidContext xid()
        {
            return GetRuleContext<XidContext>(0);
        }
        public XaPrepareStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_xaPrepareStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterXaPrepareStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitXaPrepareStatement(this);
        }
    }

    [RuleVersion(0)]
    public XaPrepareStatementContext xaPrepareStatement()
    {
        XaPrepareStatementContext _localctx = new XaPrepareStatementContext(Context, State);
        EnterRule(_localctx, 330, RULE_xaPrepareStatement);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 4042; Match(XA);
                State = 4043; Match(PREPARE);
                State = 4044; xid();
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class XaCommitWorkContext : ParserRuleContext
    {
        public ITerminalNode XA() { return GetToken(MySqlParser.XA, 0); }
        public ITerminalNode COMMIT() { return GetToken(MySqlParser.COMMIT, 0); }
        public XidContext xid()
        {
            return GetRuleContext<XidContext>(0);
        }
        public ITerminalNode ONE() { return GetToken(MySqlParser.ONE, 0); }
        public ITerminalNode PHASE() { return GetToken(MySqlParser.PHASE, 0); }
        public XaCommitWorkContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_xaCommitWork; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterXaCommitWork(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitXaCommitWork(this);
        }
    }

    [RuleVersion(0)]
    public XaCommitWorkContext xaCommitWork()
    {
        XaCommitWorkContext _localctx = new XaCommitWorkContext(Context, State);
        EnterRule(_localctx, 332, RULE_xaCommitWork);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 4046; Match(XA);
                State = 4047; Match(COMMIT);
                State = 4048; xid();
                State = 4051;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == ONE)
                {
                    {
                        State = 4049; Match(ONE);
                        State = 4050; Match(PHASE);
                    }
                }

            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class XaRollbackWorkContext : ParserRuleContext
    {
        public ITerminalNode XA() { return GetToken(MySqlParser.XA, 0); }
        public ITerminalNode ROLLBACK() { return GetToken(MySqlParser.ROLLBACK, 0); }
        public XidContext xid()
        {
            return GetRuleContext<XidContext>(0);
        }
        public XaRollbackWorkContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_xaRollbackWork; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterXaRollbackWork(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitXaRollbackWork(this);
        }
    }

    [RuleVersion(0)]
    public XaRollbackWorkContext xaRollbackWork()
    {
        XaRollbackWorkContext _localctx = new XaRollbackWorkContext(Context, State);
        EnterRule(_localctx, 334, RULE_xaRollbackWork);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 4053; Match(XA);
                State = 4054; Match(ROLLBACK);
                State = 4055; xid();
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class XaRecoverWorkContext : ParserRuleContext
    {
        public ITerminalNode XA() { return GetToken(MySqlParser.XA, 0); }
        public ITerminalNode RECOVER() { return GetToken(MySqlParser.RECOVER, 0); }
        public ITerminalNode CONVERT() { return GetToken(MySqlParser.CONVERT, 0); }
        public XidContext xid()
        {
            return GetRuleContext<XidContext>(0);
        }
        public XaRecoverWorkContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_xaRecoverWork; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterXaRecoverWork(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitXaRecoverWork(this);
        }
    }

    [RuleVersion(0)]
    public XaRecoverWorkContext xaRecoverWork()
    {
        XaRecoverWorkContext _localctx = new XaRecoverWorkContext(Context, State);
        EnterRule(_localctx, 336, RULE_xaRecoverWork);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 4057; Match(XA);
                State = 4058; Match(RECOVER);
                State = 4061;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == CONVERT)
                {
                    {
                        State = 4059; Match(CONVERT);
                        State = 4060; xid();
                    }
                }

            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class PrepareStatementContext : ParserRuleContext
    {
        public IToken query;
        public IToken variable;
        public ITerminalNode PREPARE() { return GetToken(MySqlParser.PREPARE, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public ITerminalNode LOCAL_ID() { return GetToken(MySqlParser.LOCAL_ID, 0); }
        public PrepareStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_prepareStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterPrepareStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitPrepareStatement(this);
        }
    }

    [RuleVersion(0)]
    public PrepareStatementContext prepareStatement()
    {
        PrepareStatementContext _localctx = new PrepareStatementContext(Context, State);
        EnterRule(_localctx, 338, RULE_prepareStatement);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 4063; Match(PREPARE);
                State = 4064; uid();
                State = 4065; Match(FROM);
                State = 4068;
                ErrorHandler.Sync(this);
                switch (TokenStream.LA(1))
                {
                    case STRING_LITERAL:
                        {
                            State = 4066; _localctx.query = Match(STRING_LITERAL);
                        }
                        break;
                    case LOCAL_ID:
                        {
                            State = 4067; _localctx.variable = Match(LOCAL_ID);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ExecuteStatementContext : ParserRuleContext
    {
        public ITerminalNode EXECUTE() { return GetToken(MySqlParser.EXECUTE, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public ITerminalNode USING() { return GetToken(MySqlParser.USING, 0); }
        public UserVariablesContext userVariables()
        {
            return GetRuleContext<UserVariablesContext>(0);
        }
        public ExecuteStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_executeStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterExecuteStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitExecuteStatement(this);
        }
    }

    [RuleVersion(0)]
    public ExecuteStatementContext executeStatement()
    {
        ExecuteStatementContext _localctx = new ExecuteStatementContext(Context, State);
        EnterRule(_localctx, 340, RULE_executeStatement);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 4070; Match(EXECUTE);
                State = 4071; uid();
                State = 4074;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == USING)
                {
                    {
                        State = 4072; Match(USING);
                        State = 4073; userVariables();
                    }
                }

            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class DeallocatePrepareContext : ParserRuleContext
    {
        public IToken dropFormat;
        public ITerminalNode PREPARE() { return GetToken(MySqlParser.PREPARE, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public ITerminalNode DEALLOCATE() { return GetToken(MySqlParser.DEALLOCATE, 0); }
        public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
        public DeallocatePrepareContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_deallocatePrepare; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterDeallocatePrepare(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitDeallocatePrepare(this);
        }
    }

    [RuleVersion(0)]
    public DeallocatePrepareContext deallocatePrepare()
    {
        DeallocatePrepareContext _localctx = new DeallocatePrepareContext(Context, State);
        EnterRule(_localctx, 342, RULE_deallocatePrepare);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 4076;
                _localctx.dropFormat = TokenStream.LT(1);
                _la = TokenStream.LA(1);
                if (!(_la == DROP || _la == DEALLOCATE))
                {
                    _localctx.dropFormat = ErrorHandler.RecoverInline(this);
                }
                else
                {
                    ErrorHandler.ReportMatch(this);
                    Consume();
                }
                State = 4077; Match(PREPARE);
                State = 4078; uid();
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class RoutineBodyContext : ParserRuleContext
    {
        public BlockStatementContext blockStatement()
        {
            return GetRuleContext<BlockStatementContext>(0);
        }
        public SqlStatementContext sqlStatement()
        {
            return GetRuleContext<SqlStatementContext>(0);
        }
        public RoutineBodyContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_routineBody; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterRoutineBody(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitRoutineBody(this);
        }
    }

    [RuleVersion(0)]
    public RoutineBodyContext routineBody()
    {
        RoutineBodyContext _localctx = new RoutineBodyContext(Context, State);
        EnterRule(_localctx, 344, RULE_routineBody);
        try
        {
            State = 4082;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 583, Context))
            {
                case 1:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 4080; blockStatement();
                    }
                    break;
                case 2:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 4081; sqlStatement();
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class BlockStatementContext : ParserRuleContext
    {
        public ITerminalNode BEGIN() { return GetToken(MySqlParser.BEGIN, 0); }
        public ITerminalNode END() { return GetToken(MySqlParser.END, 0); }
        public UidContext[] uid()
        {
            return GetRuleContexts<UidContext>();
        }
        public UidContext uid(int i)
        {
            return GetRuleContext<UidContext>(i);
        }
        public ITerminalNode COLON_SYMB() { return GetToken(MySqlParser.COLON_SYMB, 0); }
        public DeclareVariableContext[] declareVariable()
        {
            return GetRuleContexts<DeclareVariableContext>();
        }
        public DeclareVariableContext declareVariable(int i)
        {
            return GetRuleContext<DeclareVariableContext>(i);
        }
        public ITerminalNode[] SEMI() { return GetTokens(MySqlParser.SEMI); }
        public ITerminalNode SEMI(int i)
        {
            return GetToken(MySqlParser.SEMI, i);
        }
        public DeclareConditionContext[] declareCondition()
        {
            return GetRuleContexts<DeclareConditionContext>();
        }
        public DeclareConditionContext declareCondition(int i)
        {
            return GetRuleContext<DeclareConditionContext>(i);
        }
        public DeclareCursorContext[] declareCursor()
        {
            return GetRuleContexts<DeclareCursorContext>();
        }
        public DeclareCursorContext declareCursor(int i)
        {
            return GetRuleContext<DeclareCursorContext>(i);
        }
        public DeclareHandlerContext[] declareHandler()
        {
            return GetRuleContexts<DeclareHandlerContext>();
        }
        public DeclareHandlerContext declareHandler(int i)
        {
            return GetRuleContext<DeclareHandlerContext>(i);
        }
        public ProcedureSqlStatementContext[] procedureSqlStatement()
        {
            return GetRuleContexts<ProcedureSqlStatementContext>();
        }
        public ProcedureSqlStatementContext procedureSqlStatement(int i)
        {
            return GetRuleContext<ProcedureSqlStatementContext>(i);
        }
        public BlockStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_blockStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterBlockStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitBlockStatement(this);
        }
    }

    [RuleVersion(0)]
    public BlockStatementContext blockStatement()
    {
        BlockStatementContext _localctx = new BlockStatementContext(Context, State);
        EnterRule(_localctx, 346, RULE_blockStatement);
        int _la;
        try
        {
            int _alt;
            EnterOuterAlt(_localctx, 1);
            {
                State = 4087;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 584, Context))
                {
                    case 1:
                        {
                            State = 4084; uid();
                            State = 4085; Match(COLON_SYMB);
                        }
                        break;
                }
                State = 4089; Match(BEGIN);
                State = 4128;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 590, Context))
                {
                    case 1:
                        {
                            State = 4095;
                            ErrorHandler.Sync(this);
                            _alt = Interpreter.AdaptivePredict(TokenStream, 585, Context);
                            while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                            {
                                if (_alt == 1)
                                {
                                    {
                                        {
                                            State = 4090; declareVariable();
                                            State = 4091; Match(SEMI);
                                        }
                                    }
                                }
                                State = 4097;
                                ErrorHandler.Sync(this);
                                _alt = Interpreter.AdaptivePredict(TokenStream, 585, Context);
                            }
                            State = 4103;
                            ErrorHandler.Sync(this);
                            _alt = Interpreter.AdaptivePredict(TokenStream, 586, Context);
                            while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                            {
                                if (_alt == 1)
                                {
                                    {
                                        {
                                            State = 4098; declareCondition();
                                            State = 4099; Match(SEMI);
                                        }
                                    }
                                }
                                State = 4105;
                                ErrorHandler.Sync(this);
                                _alt = Interpreter.AdaptivePredict(TokenStream, 586, Context);
                            }
                            State = 4111;
                            ErrorHandler.Sync(this);
                            _alt = Interpreter.AdaptivePredict(TokenStream, 587, Context);
                            while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                            {
                                if (_alt == 1)
                                {
                                    {
                                        {
                                            State = 4106; declareCursor();
                                            State = 4107; Match(SEMI);
                                        }
                                    }
                                }
                                State = 4113;
                                ErrorHandler.Sync(this);
                                _alt = Interpreter.AdaptivePredict(TokenStream, 587, Context);
                            }
                            State = 4119;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            while (_la == DECLARE)
                            {
                                {
                                    {
                                        State = 4114; declareHandler();
                                        State = 4115; Match(SEMI);
                                    }
                                }
                                State = 4121;
                                ErrorHandler.Sync(this);
                                _la = TokenStream.LA(1);
                            }
                            State = 4125;
                            ErrorHandler.Sync(this);
                            _alt = Interpreter.AdaptivePredict(TokenStream, 589, Context);
                            while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                            {
                                if (_alt == 1)
                                {
                                    {
                                        {
                                            State = 4122; procedureSqlStatement();
                                        }
                                    }
                                }
                                State = 4127;
                                ErrorHandler.Sync(this);
                                _alt = Interpreter.AdaptivePredict(TokenStream, 589, Context);
                            }
                        }
                        break;
                }
                State = 4130; Match(END);
                State = 4132;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 591, Context))
                {
                    case 1:
                        {
                            State = 4131; uid();
                        }
                        break;
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class CaseStatementContext : ParserRuleContext
    {
        public ITerminalNode[] CASE() { return GetTokens(MySqlParser.CASE); }
        public ITerminalNode CASE(int i)
        {
            return GetToken(MySqlParser.CASE, i);
        }
        public ITerminalNode END() { return GetToken(MySqlParser.END, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public ExpressionContext expression()
        {
            return GetRuleContext<ExpressionContext>(0);
        }
        public CaseAlternativeContext[] caseAlternative()
        {
            return GetRuleContexts<CaseAlternativeContext>();
        }
        public CaseAlternativeContext caseAlternative(int i)
        {
            return GetRuleContext<CaseAlternativeContext>(i);
        }
        public ITerminalNode ELSE() { return GetToken(MySqlParser.ELSE, 0); }
        public ProcedureSqlStatementContext[] procedureSqlStatement()
        {
            return GetRuleContexts<ProcedureSqlStatementContext>();
        }
        public ProcedureSqlStatementContext procedureSqlStatement(int i)
        {
            return GetRuleContext<ProcedureSqlStatementContext>(i);
        }
        public CaseStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_caseStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterCaseStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitCaseStatement(this);
        }
    }

    [RuleVersion(0)]
    public CaseStatementContext caseStatement()
    {
        CaseStatementContext _localctx = new CaseStatementContext(Context, State);
        EnterRule(_localctx, 348, RULE_caseStatement);
        int _la;
        try
        {
            int _alt;
            EnterOuterAlt(_localctx, 1);
            {
                State = 4134; Match(CASE);
                State = 4137;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 592, Context))
                {
                    case 1:
                        {
                            State = 4135; uid();
                        }
                        break;
                    case 2:
                        {
                            State = 4136; expression(0);
                        }
                        break;
                }
                State = 4140;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                do
                {
                    {
                        {
                            State = 4139; caseAlternative();
                        }
                    }
                    State = 4142;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                } while (_la == WHEN);
                State = 4150;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == ELSE)
                {
                    {
                        State = 4144; Match(ELSE);
                        State = 4146;
                        ErrorHandler.Sync(this);
                        _alt = 1;
                        do
                        {
                            switch (_alt)
                            {
                                case 1:
                                    {
                                        {
                                            State = 4145; procedureSqlStatement();
                                        }
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException(this);
                            }
                            State = 4148;
                            ErrorHandler.Sync(this);
                            _alt = Interpreter.AdaptivePredict(TokenStream, 594, Context);
                        } while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER);
                    }
                }

                State = 4152; Match(END);
                State = 4153; Match(CASE);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class IfStatementContext : ParserRuleContext
    {
        public ProcedureSqlStatementContext _procedureSqlStatement;
        public IList<ProcedureSqlStatementContext> _thenStatements = new List<ProcedureSqlStatementContext>();
        public IList<ProcedureSqlStatementContext> _elseStatements = new List<ProcedureSqlStatementContext>();
        public ITerminalNode[] IF() { return GetTokens(MySqlParser.IF); }
        public ITerminalNode IF(int i)
        {
            return GetToken(MySqlParser.IF, i);
        }
        public ExpressionContext expression()
        {
            return GetRuleContext<ExpressionContext>(0);
        }
        public ITerminalNode THEN() { return GetToken(MySqlParser.THEN, 0); }
        public ITerminalNode END() { return GetToken(MySqlParser.END, 0); }
        public ElifAlternativeContext[] elifAlternative()
        {
            return GetRuleContexts<ElifAlternativeContext>();
        }
        public ElifAlternativeContext elifAlternative(int i)
        {
            return GetRuleContext<ElifAlternativeContext>(i);
        }
        public ITerminalNode ELSE() { return GetToken(MySqlParser.ELSE, 0); }
        public ProcedureSqlStatementContext[] procedureSqlStatement()
        {
            return GetRuleContexts<ProcedureSqlStatementContext>();
        }
        public ProcedureSqlStatementContext procedureSqlStatement(int i)
        {
            return GetRuleContext<ProcedureSqlStatementContext>(i);
        }
        public IfStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_ifStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterIfStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitIfStatement(this);
        }
    }

    [RuleVersion(0)]
    public IfStatementContext ifStatement()
    {
        IfStatementContext _localctx = new IfStatementContext(Context, State);
        EnterRule(_localctx, 350, RULE_ifStatement);
        int _la;
        try
        {
            int _alt;
            EnterOuterAlt(_localctx, 1);
            {
                State = 4155; Match(IF);
                State = 4156; expression(0);
                State = 4157; Match(THEN);
                State = 4159;
                ErrorHandler.Sync(this);
                _alt = 1;
                do
                {
                    switch (_alt)
                    {
                        case 1:
                            {
                                {
                                    State = 4158; _localctx._procedureSqlStatement = procedureSqlStatement();
                                    _localctx._thenStatements.Add(_localctx._procedureSqlStatement);
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    State = 4161;
                    ErrorHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(TokenStream, 596, Context);
                } while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER);
                State = 4166;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while (_la == ELSEIF)
                {
                    {
                        {
                            State = 4163; elifAlternative();
                        }
                    }
                    State = 4168;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
                State = 4175;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == ELSE)
                {
                    {
                        State = 4169; Match(ELSE);
                        State = 4171;
                        ErrorHandler.Sync(this);
                        _alt = 1;
                        do
                        {
                            switch (_alt)
                            {
                                case 1:
                                    {
                                        {
                                            State = 4170; _localctx._procedureSqlStatement = procedureSqlStatement();
                                            _localctx._elseStatements.Add(_localctx._procedureSqlStatement);
                                        }
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException(this);
                            }
                            State = 4173;
                            ErrorHandler.Sync(this);
                            _alt = Interpreter.AdaptivePredict(TokenStream, 598, Context);
                        } while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER);
                    }
                }

                State = 4177; Match(END);
                State = 4178; Match(IF);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class IterateStatementContext : ParserRuleContext
    {
        public ITerminalNode ITERATE() { return GetToken(MySqlParser.ITERATE, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public IterateStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_iterateStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterIterateStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitIterateStatement(this);
        }
    }

    [RuleVersion(0)]
    public IterateStatementContext iterateStatement()
    {
        IterateStatementContext _localctx = new IterateStatementContext(Context, State);
        EnterRule(_localctx, 352, RULE_iterateStatement);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 4180; Match(ITERATE);
                State = 4181; uid();
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class LeaveStatementContext : ParserRuleContext
    {
        public ITerminalNode LEAVE() { return GetToken(MySqlParser.LEAVE, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public LeaveStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_leaveStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterLeaveStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitLeaveStatement(this);
        }
    }

    [RuleVersion(0)]
    public LeaveStatementContext leaveStatement()
    {
        LeaveStatementContext _localctx = new LeaveStatementContext(Context, State);
        EnterRule(_localctx, 354, RULE_leaveStatement);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 4183; Match(LEAVE);
                State = 4184; uid();
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class LoopStatementContext : ParserRuleContext
    {
        public ITerminalNode[] LOOP() { return GetTokens(MySqlParser.LOOP); }
        public ITerminalNode LOOP(int i)
        {
            return GetToken(MySqlParser.LOOP, i);
        }
        public ITerminalNode END() { return GetToken(MySqlParser.END, 0); }
        public UidContext[] uid()
        {
            return GetRuleContexts<UidContext>();
        }
        public UidContext uid(int i)
        {
            return GetRuleContext<UidContext>(i);
        }
        public ITerminalNode COLON_SYMB() { return GetToken(MySqlParser.COLON_SYMB, 0); }
        public ProcedureSqlStatementContext[] procedureSqlStatement()
        {
            return GetRuleContexts<ProcedureSqlStatementContext>();
        }
        public ProcedureSqlStatementContext procedureSqlStatement(int i)
        {
            return GetRuleContext<ProcedureSqlStatementContext>(i);
        }
        public LoopStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_loopStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterLoopStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitLoopStatement(this);
        }
    }

    [RuleVersion(0)]
    public LoopStatementContext loopStatement()
    {
        LoopStatementContext _localctx = new LoopStatementContext(Context, State);
        EnterRule(_localctx, 356, RULE_loopStatement);
        int _la;
        try
        {
            int _alt;
            EnterOuterAlt(_localctx, 1);
            {
                State = 4189;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)) | (1L << (POSITION - 191)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ACCOUNT - 259)) | (1L << (ACTION - 259)) | (1L << (AFTER - 259)) | (1L << (AGGREGATE - 259)) | (1L << (ALGORITHM - 259)) | (1L << (ANY - 259)) | (1L << (AT - 259)) | (1L << (AUTHORS - 259)) | (1L << (AUTOCOMMIT - 259)) | (1L << (AUTOEXTEND_SIZE - 259)) | (1L << (AUTO_INCREMENT - 259)) | (1L << (AVG_ROW_LENGTH - 259)) | (1L << (BEGIN - 259)) | (1L << (BINLOG - 259)) | (1L << (BIT - 259)) | (1L << (BLOCK - 259)) | (1L << (BOOL - 259)) | (1L << (BOOLEAN - 259)) | (1L << (BTREE - 259)) | (1L << (CACHE - 259)) | (1L << (CASCADED - 259)) | (1L << (CHAIN - 259)) | (1L << (CHANGED - 259)) | (1L << (CHANNEL - 259)) | (1L << (CHECKSUM - 259)) | (1L << (PAGE_CHECKSUM - 259)) | (1L << (CIPHER - 259)) | (1L << (CLASS_ORIGIN - 259)) | (1L << (CLIENT - 259)) | (1L << (CLOSE - 259)) | (1L << (COALESCE - 259)) | (1L << (CODE - 259)) | (1L << (COLUMNS - 259)) | (1L << (COLUMN_FORMAT - 259)) | (1L << (COLUMN_NAME - 259)) | (1L << (COMMENT - 259)) | (1L << (COMMIT - 259)) | (1L << (COMPACT - 259)) | (1L << (COMPLETION - 259)) | (1L << (COMPRESSED - 259)) | (1L << (COMPRESSION - 259)) | (1L << (CONCURRENT - 259)) | (1L << (CONNECTION - 259)) | (1L << (CONSISTENT - 259)) | (1L << (CONSTRAINT_CATALOG - 259)) | (1L << (CONSTRAINT_SCHEMA - 259)) | (1L << (CONSTRAINT_NAME - 259)) | (1L << (CONTAINS - 259)) | (1L << (CONTEXT - 259)) | (1L << (CONTRIBUTORS - 259)) | (1L << (COPY - 259)) | (1L << (CPU - 259)) | (1L << (CURSOR_NAME - 259)) | (1L << (DATA - 259)) | (1L << (DATAFILE - 259)) | (1L << (DEALLOCATE - 259)) | (1L << (DEFAULT_AUTH - 259)) | (1L << (DEFINER - 259)) | (1L << (DELAY_KEY_WRITE - 259)) | (1L << (DES_KEY_FILE - 259)) | (1L << (DIRECTORY - 259)) | (1L << (DISABLE - 259)) | (1L << (DISCARD - 259)) | (1L << (DISK - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (DO - 323)) | (1L << (DUMPFILE - 323)) | (1L << (DUPLICATE - 323)) | (1L << (DYNAMIC - 323)) | (1L << (ENABLE - 323)) | (1L << (ENCRYPTION - 323)) | (1L << (END - 323)) | (1L << (ENDS - 323)) | (1L << (ENGINE - 323)) | (1L << (ENGINES - 323)) | (1L << (ERROR - 323)) | (1L << (ERRORS - 323)) | (1L << (ESCAPE - 323)) | (1L << (EVEN - 323)) | (1L << (EVENT - 323)) | (1L << (EVENTS - 323)) | (1L << (EVERY - 323)) | (1L << (EXCHANGE - 323)) | (1L << (EXCLUSIVE - 323)) | (1L << (EXPIRE - 323)) | (1L << (EXPORT - 323)) | (1L << (EXTENDED - 323)) | (1L << (EXTENT_SIZE - 323)) | (1L << (FAST - 323)) | (1L << (FAULTS - 323)) | (1L << (FIELDS - 323)) | (1L << (FILE_BLOCK_SIZE - 323)) | (1L << (FILTER - 323)) | (1L << (FIRST - 323)) | (1L << (FIXED - 323)) | (1L << (FLUSH - 323)) | (1L << (FOLLOWS - 323)) | (1L << (FOUND - 323)) | (1L << (FULL - 323)) | (1L << (FUNCTION - 323)) | (1L << (GENERAL - 323)) | (1L << (GLOBAL - 323)) | (1L << (GRANTS - 323)) | (1L << (GROUP_REPLICATION - 323)) | (1L << (HANDLER - 323)) | (1L << (HASH - 323)) | (1L << (HELP - 323)) | (1L << (HOST - 323)) | (1L << (HOSTS - 323)) | (1L << (IDENTIFIED - 323)) | (1L << (IGNORE_SERVER_IDS - 323)) | (1L << (IMPORT - 323)) | (1L << (INDEXES - 323)) | (1L << (INITIAL_SIZE - 323)) | (1L << (INPLACE - 323)) | (1L << (INSERT_METHOD - 323)) | (1L << (INSTALL - 323)) | (1L << (INSTANCE - 323)) | (1L << (INVISIBLE - 323)) | (1L << (INVOKER - 323)) | (1L << (IO - 323)) | (1L << (IO_THREAD - 323)) | (1L << (IPC - 323)) | (1L << (ISOLATION - 323)) | (1L << (ISSUER - 323)) | (1L << (JSON - 323)) | (1L << (KEY_BLOCK_SIZE - 323)) | (1L << (LANGUAGE - 323)) | (1L << (LAST - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (LEAVES - 387)) | (1L << (LESS - 387)) | (1L << (LEVEL - 387)) | (1L << (LIST - 387)) | (1L << (LOCAL - 387)) | (1L << (LOGFILE - 387)) | (1L << (LOGS - 387)) | (1L << (MASTER - 387)) | (1L << (MASTER_AUTO_POSITION - 387)) | (1L << (MASTER_CONNECT_RETRY - 387)) | (1L << (MASTER_DELAY - 387)) | (1L << (MASTER_HEARTBEAT_PERIOD - 387)) | (1L << (MASTER_HOST - 387)) | (1L << (MASTER_LOG_FILE - 387)) | (1L << (MASTER_LOG_POS - 387)) | (1L << (MASTER_PASSWORD - 387)) | (1L << (MASTER_PORT - 387)) | (1L << (MASTER_RETRY_COUNT - 387)) | (1L << (MASTER_SSL - 387)) | (1L << (MASTER_SSL_CA - 387)) | (1L << (MASTER_SSL_CAPATH - 387)) | (1L << (MASTER_SSL_CERT - 387)) | (1L << (MASTER_SSL_CIPHER - 387)) | (1L << (MASTER_SSL_CRL - 387)) | (1L << (MASTER_SSL_CRLPATH - 387)) | (1L << (MASTER_SSL_KEY - 387)) | (1L << (MASTER_TLS_VERSION - 387)) | (1L << (MASTER_USER - 387)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 387)) | (1L << (MAX_QUERIES_PER_HOUR - 387)) | (1L << (MAX_ROWS - 387)) | (1L << (MAX_SIZE - 387)) | (1L << (MAX_UPDATES_PER_HOUR - 387)) | (1L << (MAX_USER_CONNECTIONS - 387)) | (1L << (MEDIUM - 387)) | (1L << (MERGE - 387)) | (1L << (MESSAGE_TEXT - 387)) | (1L << (MID - 387)) | (1L << (MIGRATE - 387)) | (1L << (MIN_ROWS - 387)) | (1L << (MODE - 387)) | (1L << (MODIFY - 387)) | (1L << (MUTEX - 387)) | (1L << (MYSQL - 387)) | (1L << (MYSQL_ERRNO - 387)) | (1L << (NAME - 387)) | (1L << (NAMES - 387)) | (1L << (NCHAR - 387)) | (1L << (NEVER - 387)) | (1L << (NEXT - 387)) | (1L << (NO - 387)) | (1L << (NODEGROUP - 387)) | (1L << (NONE - 387)) | (1L << (OFFLINE - 387)) | (1L << (OFFSET - 387)) | (1L << (OJ - 387)) | (1L << (OLD_PASSWORD - 387)) | (1L << (ONE - 387)) | (1L << (ONLINE - 387)) | (1L << (ONLY - 387)) | (1L << (OPEN - 387)) | (1L << (OPTIMIZER_COSTS - 387)) | (1L << (OPTIONS - 387)) | (1L << (OWNER - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PAGE - 451)) | (1L << (PARSER - 451)) | (1L << (PARTIAL - 451)) | (1L << (PARTITIONING - 451)) | (1L << (PARTITIONS - 451)) | (1L << (PASSWORD - 451)) | (1L << (PHASE - 451)) | (1L << (PLUGIN - 451)) | (1L << (PLUGIN_DIR - 451)) | (1L << (PLUGINS - 451)) | (1L << (PORT - 451)) | (1L << (PRECEDES - 451)) | (1L << (PREPARE - 451)) | (1L << (PRESERVE - 451)) | (1L << (PREV - 451)) | (1L << (PROCESSLIST - 451)) | (1L << (PROFILE - 451)) | (1L << (PROFILES - 451)) | (1L << (PROXY - 451)) | (1L << (QUERY - 451)) | (1L << (QUICK - 451)) | (1L << (REBUILD - 451)) | (1L << (RECOVER - 451)) | (1L << (REDO_BUFFER_SIZE - 451)) | (1L << (REDUNDANT - 451)) | (1L << (RELAY - 451)) | (1L << (RELAY_LOG_FILE - 451)) | (1L << (RELAY_LOG_POS - 451)) | (1L << (RELAYLOG - 451)) | (1L << (REMOVE - 451)) | (1L << (REORGANIZE - 451)) | (1L << (REPAIR - 451)) | (1L << (REPLICATE_DO_DB - 451)) | (1L << (REPLICATE_DO_TABLE - 451)) | (1L << (REPLICATE_IGNORE_DB - 451)) | (1L << (REPLICATE_IGNORE_TABLE - 451)) | (1L << (REPLICATE_REWRITE_DB - 451)) | (1L << (REPLICATE_WILD_DO_TABLE - 451)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 451)) | (1L << (REPLICATION - 451)) | (1L << (RESET - 451)) | (1L << (RESUME - 451)) | (1L << (RETURNED_SQLSTATE - 451)) | (1L << (RETURNS - 451)) | (1L << (ROLLBACK - 451)) | (1L << (ROLLUP - 451)) | (1L << (ROTATE - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (ROW_FORMAT - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SCHEDULE - 451)) | (1L << (SECURITY - 451)) | (1L << (SERVER - 451)) | (1L << (SESSION - 451)) | (1L << (SHARE - 451)) | (1L << (SHARED - 451)) | (1L << (SIGNED - 451)) | (1L << (SIMPLE - 451)) | (1L << (SLAVE - 451)) | (1L << (SLOW - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOCKET - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SOME - 515)) | (1L << (SONAME - 515)) | (1L << (SOUNDS - 515)) | (1L << (SOURCE - 515)) | (1L << (SQL_AFTER_GTIDS - 515)) | (1L << (SQL_AFTER_MTS_GAPS - 515)) | (1L << (SQL_BEFORE_GTIDS - 515)) | (1L << (SQL_BUFFER_RESULT - 515)) | (1L << (SQL_CACHE - 515)) | (1L << (SQL_NO_CACHE - 515)) | (1L << (SQL_THREAD - 515)) | (1L << (START - 515)) | (1L << (STARTS - 515)) | (1L << (STATS_AUTO_RECALC - 515)) | (1L << (STATS_PERSISTENT - 515)) | (1L << (STATS_SAMPLE_PAGES - 515)) | (1L << (STATUS - 515)) | (1L << (STOP - 515)) | (1L << (STORAGE - 515)) | (1L << (STRING - 515)) | (1L << (SUBCLASS_ORIGIN - 515)) | (1L << (SUBJECT - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBPARTITIONS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SWAPS - 515)) | (1L << (SWITCHES - 515)) | (1L << (TABLE_NAME - 515)) | (1L << (TABLESPACE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TEMPTABLE - 515)) | (1L << (THAN - 515)) | (1L << (TRADITIONAL - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRIGGERS - 515)) | (1L << (TRUNCATE - 515)) | (1L << (UNDEFINED - 515)) | (1L << (UNDOFILE - 515)) | (1L << (UNDO_BUFFER_SIZE - 515)) | (1L << (UNINSTALL - 515)) | (1L << (UNKNOWN - 515)) | (1L << (UNTIL - 515)) | (1L << (UPGRADE - 515)) | (1L << (USER - 515)) | (1L << (USE_FRM - 515)) | (1L << (USER_RESOURCES - 515)) | (1L << (VALIDATION - 515)) | (1L << (VALUE - 515)) | (1L << (VARIABLES - 515)) | (1L << (VIEW - 515)) | (1L << (VISIBLE - 515)) | (1L << (WAIT - 515)) | (1L << (WARNINGS - 515)) | (1L << (WITHOUT - 515)) | (1L << (WORK - 515)) | (1L << (WRAPPER - 515)) | (1L << (X509 - 515)) | (1L << (XA - 515)) | (1L << (XML - 515)))) != 0) || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (INTERNAL - 580)) | (1L << (QUARTER - 580)) | (1L << (MONTH - 580)) | (1L << (DAY - 580)) | (1L << (HOUR - 580)) | (1L << (MINUTE - 580)) | (1L << (WEEK - 580)) | (1L << (SECOND - 580)) | (1L << (MICROSECOND - 580)) | (1L << (TABLES - 580)) | (1L << (ROUTINE - 580)) | (1L << (EXECUTE - 580)) | (1L << (FILE - 580)) | (1L << (PROCESS - 580)) | (1L << (RELOAD - 580)) | (1L << (SHUTDOWN - 580)) | (1L << (SUPER - 580)) | (1L << (PRIVILEGES - 580)) | (1L << (SESSION_VARIABLES_ADMIN - 580)) | (1L << (ARMSCII8 - 580)) | (1L << (ASCII - 580)) | (1L << (BIG5 - 580)) | (1L << (CP1250 - 580)) | (1L << (CP1251 - 580)) | (1L << (CP1256 - 580)) | (1L << (CP1257 - 580)) | (1L << (CP850 - 580)) | (1L << (CP852 - 580)) | (1L << (CP866 - 580)) | (1L << (CP932 - 580)) | (1L << (DEC8 - 580)) | (1L << (EUCJPMS - 580)) | (1L << (EUCKR - 580)) | (1L << (GB2312 - 580)) | (1L << (GBK - 580)) | (1L << (GEOSTD8 - 580)) | (1L << (GREEK - 580)) | (1L << (HEBREW - 580)) | (1L << (HP8 - 580)) | (1L << (KEYBCS2 - 580)) | (1L << (KOI8R - 580)) | (1L << (KOI8U - 580)) | (1L << (LATIN1 - 580)) | (1L << (LATIN2 - 580)) | (1L << (LATIN5 - 580)) | (1L << (LATIN7 - 580)) | (1L << (MACCE - 580)) | (1L << (MACROMAN - 580)) | (1L << (SJIS - 580)) | (1L << (SWE7 - 580)) | (1L << (TIS620 - 580)) | (1L << (UCS2 - 580)) | (1L << (UJIS - 580)) | (1L << (UTF16 - 580)) | (1L << (UTF16LE - 580)) | (1L << (UTF32 - 580)) | (1L << (UTF8 - 580)) | (1L << (UTF8MB3 - 580)) | (1L << (UTF8MB4 - 580)) | (1L << (ARCHIVE - 580)) | (1L << (BLACKHOLE - 580)) | (1L << (CSV - 580)) | (1L << (FEDERATED - 580)) | (1L << (INNODB - 580)))) != 0) || ((((_la - 644)) & ~0x3f) == 0 && ((1L << (_la - 644)) & ((1L << (MEMORY - 644)) | (1L << (MRG_MYISAM - 644)) | (1L << (MYISAM - 644)) | (1L << (NDB - 644)) | (1L << (NDBCLUSTER - 644)) | (1L << (PERFORMANCE_SCHEMA - 644)) | (1L << (TOKUDB - 644)) | (1L << (REPEATABLE - 644)) | (1L << (COMMITTED - 644)) | (1L << (UNCOMMITTED - 644)) | (1L << (SERIALIZABLE - 644)) | (1L << (GEOMETRYCOLLECTION - 644)) | (1L << (LINESTRING - 644)) | (1L << (MULTILINESTRING - 644)) | (1L << (MULTIPOINT - 644)) | (1L << (MULTIPOLYGON - 644)) | (1L << (POINT - 644)) | (1L << (POLYGON - 644)) | (1L << (ABS - 644)) | (1L << (ACOS - 644)) | (1L << (ADDDATE - 644)) | (1L << (ADDTIME - 644)) | (1L << (AES_DECRYPT - 644)) | (1L << (AES_ENCRYPT - 644)) | (1L << (AREA - 644)) | (1L << (ASBINARY - 644)) | (1L << (ASIN - 644)) | (1L << (ASTEXT - 644)) | (1L << (ASWKB - 644)) | (1L << (ASWKT - 644)) | (1L << (ASYMMETRIC_DECRYPT - 644)) | (1L << (ASYMMETRIC_DERIVE - 644)) | (1L << (ASYMMETRIC_ENCRYPT - 644)) | (1L << (ASYMMETRIC_SIGN - 644)) | (1L << (ASYMMETRIC_VERIFY - 644)) | (1L << (ATAN - 644)) | (1L << (ATAN2 - 644)) | (1L << (BENCHMARK - 644)) | (1L << (BIN - 644)) | (1L << (BIT_COUNT - 644)) | (1L << (BIT_LENGTH - 644)) | (1L << (BUFFER - 644)) | (1L << (CATALOG_NAME - 644)) | (1L << (CEIL - 644)) | (1L << (CEILING - 644)) | (1L << (CENTROID - 644)) | (1L << (CHARACTER_LENGTH - 644)) | (1L << (CHARSET - 644)) | (1L << (CHAR_LENGTH - 644)) | (1L << (COERCIBILITY - 644)) | (1L << (COLLATION - 644)) | (1L << (COMPRESS - 644)) | (1L << (CONCAT - 644)) | (1L << (CONCAT_WS - 644)) | (1L << (CONNECTION_ID - 644)) | (1L << (CONV - 644)) | (1L << (CONVERT_TZ - 644)) | (1L << (COS - 644)) | (1L << (COT - 644)) | (1L << (CRC32 - 644)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 644)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 644)))) != 0) || ((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (CREATE_DH_PARAMETERS - 708)) | (1L << (CREATE_DIGEST - 708)) | (1L << (CROSSES - 708)) | (1L << (DATEDIFF - 708)) | (1L << (DATE_FORMAT - 708)) | (1L << (DAYNAME - 708)) | (1L << (DAYOFMONTH - 708)) | (1L << (DAYOFWEEK - 708)) | (1L << (DAYOFYEAR - 708)) | (1L << (DECODE - 708)) | (1L << (DEGREES - 708)) | (1L << (DES_DECRYPT - 708)) | (1L << (DES_ENCRYPT - 708)) | (1L << (DIMENSION - 708)) | (1L << (DISJOINT - 708)) | (1L << (ELT - 708)) | (1L << (ENCODE - 708)) | (1L << (ENCRYPT - 708)) | (1L << (ENDPOINT - 708)) | (1L << (ENVELOPE - 708)) | (1L << (EQUALS - 708)) | (1L << (EXP - 708)) | (1L << (EXPORT_SET - 708)) | (1L << (EXTERIORRING - 708)) | (1L << (EXTRACTVALUE - 708)) | (1L << (FIELD - 708)) | (1L << (FIND_IN_SET - 708)) | (1L << (FLOOR - 708)) | (1L << (FORMAT - 708)) | (1L << (FOUND_ROWS - 708)) | (1L << (FROM_BASE64 - 708)) | (1L << (FROM_DAYS - 708)) | (1L << (FROM_UNIXTIME - 708)) | (1L << (GEOMCOLLFROMTEXT - 708)) | (1L << (GEOMCOLLFROMWKB - 708)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 708)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 708)) | (1L << (GEOMETRYFROMTEXT - 708)) | (1L << (GEOMETRYFROMWKB - 708)) | (1L << (GEOMETRYN - 708)) | (1L << (GEOMETRYTYPE - 708)) | (1L << (GEOMFROMTEXT - 708)) | (1L << (GEOMFROMWKB - 708)) | (1L << (GET_FORMAT - 708)) | (1L << (GET_LOCK - 708)) | (1L << (GLENGTH - 708)) | (1L << (GREATEST - 708)) | (1L << (GTID_SUBSET - 708)) | (1L << (GTID_SUBTRACT - 708)) | (1L << (HEX - 708)) | (1L << (IFNULL - 708)) | (1L << (INET6_ATON - 708)) | (1L << (INET6_NTOA - 708)) | (1L << (INET_ATON - 708)) | (1L << (INET_NTOA - 708)) | (1L << (INSTR - 708)) | (1L << (INTERIORRINGN - 708)) | (1L << (INTERSECTS - 708)) | (1L << (ISCLOSED - 708)) | (1L << (ISEMPTY - 708)) | (1L << (ISNULL - 708)) | (1L << (ISSIMPLE - 708)) | (1L << (IS_FREE_LOCK - 708)) | (1L << (IS_IPV4 - 708)))) != 0) || ((((_la - 772)) & ~0x3f) == 0 && ((1L << (_la - 772)) & ((1L << (IS_IPV4_COMPAT - 772)) | (1L << (IS_IPV4_MAPPED - 772)) | (1L << (IS_IPV6 - 772)) | (1L << (IS_USED_LOCK - 772)) | (1L << (LAST_INSERT_ID - 772)) | (1L << (LCASE - 772)) | (1L << (LEAST - 772)) | (1L << (LENGTH - 772)) | (1L << (LINEFROMTEXT - 772)) | (1L << (LINEFROMWKB - 772)) | (1L << (LINESTRINGFROMTEXT - 772)) | (1L << (LINESTRINGFROMWKB - 772)) | (1L << (LN - 772)) | (1L << (LOAD_FILE - 772)) | (1L << (LOCATE - 772)) | (1L << (LOG - 772)) | (1L << (LOG10 - 772)) | (1L << (LOG2 - 772)) | (1L << (LOWER - 772)) | (1L << (LPAD - 772)) | (1L << (LTRIM - 772)) | (1L << (MAKEDATE - 772)) | (1L << (MAKETIME - 772)) | (1L << (MAKE_SET - 772)) | (1L << (MASTER_POS_WAIT - 772)) | (1L << (MBRCONTAINS - 772)) | (1L << (MBRDISJOINT - 772)) | (1L << (MBREQUAL - 772)) | (1L << (MBRINTERSECTS - 772)) | (1L << (MBROVERLAPS - 772)) | (1L << (MBRTOUCHES - 772)) | (1L << (MBRWITHIN - 772)) | (1L << (MD5 - 772)) | (1L << (MLINEFROMTEXT - 772)) | (1L << (MLINEFROMWKB - 772)) | (1L << (MONTHNAME - 772)) | (1L << (MPOINTFROMTEXT - 772)) | (1L << (MPOINTFROMWKB - 772)) | (1L << (MPOLYFROMTEXT - 772)) | (1L << (MPOLYFROMWKB - 772)) | (1L << (MULTILINESTRINGFROMTEXT - 772)) | (1L << (MULTILINESTRINGFROMWKB - 772)) | (1L << (MULTIPOINTFROMTEXT - 772)) | (1L << (MULTIPOINTFROMWKB - 772)) | (1L << (MULTIPOLYGONFROMTEXT - 772)) | (1L << (MULTIPOLYGONFROMWKB - 772)) | (1L << (NAME_CONST - 772)) | (1L << (NULLIF - 772)) | (1L << (NUMGEOMETRIES - 772)) | (1L << (NUMINTERIORRINGS - 772)) | (1L << (NUMPOINTS - 772)) | (1L << (OCT - 772)) | (1L << (OCTET_LENGTH - 772)) | (1L << (ORD - 772)) | (1L << (OVERLAPS - 772)) | (1L << (PERIOD_ADD - 772)) | (1L << (PERIOD_DIFF - 772)) | (1L << (PI - 772)) | (1L << (POINTFROMTEXT - 772)) | (1L << (POINTFROMWKB - 772)) | (1L << (POINTN - 772)) | (1L << (POLYFROMTEXT - 772)) | (1L << (POLYFROMWKB - 772)) | (1L << (POLYGONFROMTEXT - 772)))) != 0) || ((((_la - 836)) & ~0x3f) == 0 && ((1L << (_la - 836)) & ((1L << (POLYGONFROMWKB - 836)) | (1L << (POW - 836)) | (1L << (POWER - 836)) | (1L << (QUOTE - 836)) | (1L << (RADIANS - 836)) | (1L << (RAND - 836)) | (1L << (RANDOM_BYTES - 836)) | (1L << (RELEASE_LOCK - 836)) | (1L << (REVERSE - 836)) | (1L << (ROUND - 836)) | (1L << (ROW_COUNT - 836)) | (1L << (RPAD - 836)) | (1L << (RTRIM - 836)) | (1L << (SEC_TO_TIME - 836)) | (1L << (SESSION_USER - 836)) | (1L << (SHA - 836)) | (1L << (SHA1 - 836)) | (1L << (SHA2 - 836)) | (1L << (SCHEMA_NAME - 836)) | (1L << (SIGN - 836)) | (1L << (SIN - 836)) | (1L << (SLEEP - 836)) | (1L << (SOUNDEX - 836)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 836)) | (1L << (SQRT - 836)) | (1L << (SRID - 836)) | (1L << (STARTPOINT - 836)) | (1L << (STRCMP - 836)) | (1L << (STR_TO_DATE - 836)) | (1L << (ST_AREA - 836)) | (1L << (ST_ASBINARY - 836)) | (1L << (ST_ASTEXT - 836)) | (1L << (ST_ASWKB - 836)) | (1L << (ST_ASWKT - 836)) | (1L << (ST_BUFFER - 836)) | (1L << (ST_CENTROID - 836)) | (1L << (ST_CONTAINS - 836)) | (1L << (ST_CROSSES - 836)) | (1L << (ST_DIFFERENCE - 836)) | (1L << (ST_DIMENSION - 836)) | (1L << (ST_DISJOINT - 836)) | (1L << (ST_DISTANCE - 836)) | (1L << (ST_ENDPOINT - 836)) | (1L << (ST_ENVELOPE - 836)) | (1L << (ST_EQUALS - 836)) | (1L << (ST_EXTERIORRING - 836)) | (1L << (ST_GEOMCOLLFROMTEXT - 836)) | (1L << (ST_GEOMCOLLFROMTXT - 836)) | (1L << (ST_GEOMCOLLFROMWKB - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 836)) | (1L << (ST_GEOMETRYFROMTEXT - 836)) | (1L << (ST_GEOMETRYFROMWKB - 836)) | (1L << (ST_GEOMETRYN - 836)) | (1L << (ST_GEOMETRYTYPE - 836)) | (1L << (ST_GEOMFROMTEXT - 836)) | (1L << (ST_GEOMFROMWKB - 836)) | (1L << (ST_INTERIORRINGN - 836)) | (1L << (ST_INTERSECTION - 836)) | (1L << (ST_INTERSECTS - 836)) | (1L << (ST_ISCLOSED - 836)) | (1L << (ST_ISEMPTY - 836)) | (1L << (ST_ISSIMPLE - 836)) | (1L << (ST_LINEFROMTEXT - 836)))) != 0) || ((((_la - 900)) & ~0x3f) == 0 && ((1L << (_la - 900)) & ((1L << (ST_LINEFROMWKB - 900)) | (1L << (ST_LINESTRINGFROMTEXT - 900)) | (1L << (ST_LINESTRINGFROMWKB - 900)) | (1L << (ST_NUMGEOMETRIES - 900)) | (1L << (ST_NUMINTERIORRING - 900)) | (1L << (ST_NUMINTERIORRINGS - 900)) | (1L << (ST_NUMPOINTS - 900)) | (1L << (ST_OVERLAPS - 900)) | (1L << (ST_POINTFROMTEXT - 900)) | (1L << (ST_POINTFROMWKB - 900)) | (1L << (ST_POINTN - 900)) | (1L << (ST_POLYFROMTEXT - 900)) | (1L << (ST_POLYFROMWKB - 900)) | (1L << (ST_POLYGONFROMTEXT - 900)) | (1L << (ST_POLYGONFROMWKB - 900)) | (1L << (ST_SRID - 900)) | (1L << (ST_STARTPOINT - 900)) | (1L << (ST_SYMDIFFERENCE - 900)) | (1L << (ST_TOUCHES - 900)) | (1L << (ST_UNION - 900)) | (1L << (ST_WITHIN - 900)) | (1L << (ST_X - 900)) | (1L << (ST_Y - 900)) | (1L << (SUBDATE - 900)) | (1L << (SUBSTRING_INDEX - 900)) | (1L << (SUBTIME - 900)) | (1L << (SYSTEM_USER - 900)) | (1L << (TAN - 900)) | (1L << (TIMEDIFF - 900)) | (1L << (TIMESTAMPADD - 900)) | (1L << (TIMESTAMPDIFF - 900)) | (1L << (TIME_FORMAT - 900)) | (1L << (TIME_TO_SEC - 900)) | (1L << (TOUCHES - 900)) | (1L << (TO_BASE64 - 900)) | (1L << (TO_DAYS - 900)) | (1L << (TO_SECONDS - 900)) | (1L << (UCASE - 900)) | (1L << (UNCOMPRESS - 900)) | (1L << (UNCOMPRESSED_LENGTH - 900)) | (1L << (UNHEX - 900)) | (1L << (UNIX_TIMESTAMP - 900)) | (1L << (UPDATEXML - 900)) | (1L << (UPPER - 900)) | (1L << (UUID - 900)) | (1L << (UUID_SHORT - 900)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 900)) | (1L << (VERSION - 900)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 900)) | (1L << (WEEKDAY - 900)) | (1L << (WEEKOFYEAR - 900)) | (1L << (WEIGHT_STRING - 900)) | (1L << (WITHIN - 900)) | (1L << (YEARWEEK - 900)) | (1L << (Y_FUNCTION - 900)) | (1L << (X_FUNCTION - 900)))) != 0) || ((((_la - 994)) & ~0x3f) == 0 && ((1L << (_la - 994)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 994)) | (1L << (STRING_LITERAL - 994)) | (1L << (ID - 994)) | (1L << (REVERSE_QUOTE_ID - 994)))) != 0))
                {
                    {
                        State = 4186; uid();
                        State = 4187; Match(COLON_SYMB);
                    }
                }

                State = 4191; Match(LOOP);
                State = 4193;
                ErrorHandler.Sync(this);
                _alt = 1;
                do
                {
                    switch (_alt)
                    {
                        case 1:
                            {
                                {
                                    State = 4192; procedureSqlStatement();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    State = 4195;
                    ErrorHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(TokenStream, 601, Context);
                } while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER);
                State = 4197; Match(END);
                State = 4198; Match(LOOP);
                State = 4200;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)) | (1L << (POSITION - 191)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ACCOUNT - 259)) | (1L << (ACTION - 259)) | (1L << (AFTER - 259)) | (1L << (AGGREGATE - 259)) | (1L << (ALGORITHM - 259)) | (1L << (ANY - 259)) | (1L << (AT - 259)) | (1L << (AUTHORS - 259)) | (1L << (AUTOCOMMIT - 259)) | (1L << (AUTOEXTEND_SIZE - 259)) | (1L << (AUTO_INCREMENT - 259)) | (1L << (AVG_ROW_LENGTH - 259)) | (1L << (BEGIN - 259)) | (1L << (BINLOG - 259)) | (1L << (BIT - 259)) | (1L << (BLOCK - 259)) | (1L << (BOOL - 259)) | (1L << (BOOLEAN - 259)) | (1L << (BTREE - 259)) | (1L << (CACHE - 259)) | (1L << (CASCADED - 259)) | (1L << (CHAIN - 259)) | (1L << (CHANGED - 259)) | (1L << (CHANNEL - 259)) | (1L << (CHECKSUM - 259)) | (1L << (PAGE_CHECKSUM - 259)) | (1L << (CIPHER - 259)) | (1L << (CLASS_ORIGIN - 259)) | (1L << (CLIENT - 259)) | (1L << (CLOSE - 259)) | (1L << (COALESCE - 259)) | (1L << (CODE - 259)) | (1L << (COLUMNS - 259)) | (1L << (COLUMN_FORMAT - 259)) | (1L << (COLUMN_NAME - 259)) | (1L << (COMMENT - 259)) | (1L << (COMMIT - 259)) | (1L << (COMPACT - 259)) | (1L << (COMPLETION - 259)) | (1L << (COMPRESSED - 259)) | (1L << (COMPRESSION - 259)) | (1L << (CONCURRENT - 259)) | (1L << (CONNECTION - 259)) | (1L << (CONSISTENT - 259)) | (1L << (CONSTRAINT_CATALOG - 259)) | (1L << (CONSTRAINT_SCHEMA - 259)) | (1L << (CONSTRAINT_NAME - 259)) | (1L << (CONTAINS - 259)) | (1L << (CONTEXT - 259)) | (1L << (CONTRIBUTORS - 259)) | (1L << (COPY - 259)) | (1L << (CPU - 259)) | (1L << (CURSOR_NAME - 259)) | (1L << (DATA - 259)) | (1L << (DATAFILE - 259)) | (1L << (DEALLOCATE - 259)) | (1L << (DEFAULT_AUTH - 259)) | (1L << (DEFINER - 259)) | (1L << (DELAY_KEY_WRITE - 259)) | (1L << (DES_KEY_FILE - 259)) | (1L << (DIRECTORY - 259)) | (1L << (DISABLE - 259)) | (1L << (DISCARD - 259)) | (1L << (DISK - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (DO - 323)) | (1L << (DUMPFILE - 323)) | (1L << (DUPLICATE - 323)) | (1L << (DYNAMIC - 323)) | (1L << (ENABLE - 323)) | (1L << (ENCRYPTION - 323)) | (1L << (END - 323)) | (1L << (ENDS - 323)) | (1L << (ENGINE - 323)) | (1L << (ENGINES - 323)) | (1L << (ERROR - 323)) | (1L << (ERRORS - 323)) | (1L << (ESCAPE - 323)) | (1L << (EVEN - 323)) | (1L << (EVENT - 323)) | (1L << (EVENTS - 323)) | (1L << (EVERY - 323)) | (1L << (EXCHANGE - 323)) | (1L << (EXCLUSIVE - 323)) | (1L << (EXPIRE - 323)) | (1L << (EXPORT - 323)) | (1L << (EXTENDED - 323)) | (1L << (EXTENT_SIZE - 323)) | (1L << (FAST - 323)) | (1L << (FAULTS - 323)) | (1L << (FIELDS - 323)) | (1L << (FILE_BLOCK_SIZE - 323)) | (1L << (FILTER - 323)) | (1L << (FIRST - 323)) | (1L << (FIXED - 323)) | (1L << (FLUSH - 323)) | (1L << (FOLLOWS - 323)) | (1L << (FOUND - 323)) | (1L << (FULL - 323)) | (1L << (FUNCTION - 323)) | (1L << (GENERAL - 323)) | (1L << (GLOBAL - 323)) | (1L << (GRANTS - 323)) | (1L << (GROUP_REPLICATION - 323)) | (1L << (HANDLER - 323)) | (1L << (HASH - 323)) | (1L << (HELP - 323)) | (1L << (HOST - 323)) | (1L << (HOSTS - 323)) | (1L << (IDENTIFIED - 323)) | (1L << (IGNORE_SERVER_IDS - 323)) | (1L << (IMPORT - 323)) | (1L << (INDEXES - 323)) | (1L << (INITIAL_SIZE - 323)) | (1L << (INPLACE - 323)) | (1L << (INSERT_METHOD - 323)) | (1L << (INSTALL - 323)) | (1L << (INSTANCE - 323)) | (1L << (INVISIBLE - 323)) | (1L << (INVOKER - 323)) | (1L << (IO - 323)) | (1L << (IO_THREAD - 323)) | (1L << (IPC - 323)) | (1L << (ISOLATION - 323)) | (1L << (ISSUER - 323)) | (1L << (JSON - 323)) | (1L << (KEY_BLOCK_SIZE - 323)) | (1L << (LANGUAGE - 323)) | (1L << (LAST - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (LEAVES - 387)) | (1L << (LESS - 387)) | (1L << (LEVEL - 387)) | (1L << (LIST - 387)) | (1L << (LOCAL - 387)) | (1L << (LOGFILE - 387)) | (1L << (LOGS - 387)) | (1L << (MASTER - 387)) | (1L << (MASTER_AUTO_POSITION - 387)) | (1L << (MASTER_CONNECT_RETRY - 387)) | (1L << (MASTER_DELAY - 387)) | (1L << (MASTER_HEARTBEAT_PERIOD - 387)) | (1L << (MASTER_HOST - 387)) | (1L << (MASTER_LOG_FILE - 387)) | (1L << (MASTER_LOG_POS - 387)) | (1L << (MASTER_PASSWORD - 387)) | (1L << (MASTER_PORT - 387)) | (1L << (MASTER_RETRY_COUNT - 387)) | (1L << (MASTER_SSL - 387)) | (1L << (MASTER_SSL_CA - 387)) | (1L << (MASTER_SSL_CAPATH - 387)) | (1L << (MASTER_SSL_CERT - 387)) | (1L << (MASTER_SSL_CIPHER - 387)) | (1L << (MASTER_SSL_CRL - 387)) | (1L << (MASTER_SSL_CRLPATH - 387)) | (1L << (MASTER_SSL_KEY - 387)) | (1L << (MASTER_TLS_VERSION - 387)) | (1L << (MASTER_USER - 387)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 387)) | (1L << (MAX_QUERIES_PER_HOUR - 387)) | (1L << (MAX_ROWS - 387)) | (1L << (MAX_SIZE - 387)) | (1L << (MAX_UPDATES_PER_HOUR - 387)) | (1L << (MAX_USER_CONNECTIONS - 387)) | (1L << (MEDIUM - 387)) | (1L << (MERGE - 387)) | (1L << (MESSAGE_TEXT - 387)) | (1L << (MID - 387)) | (1L << (MIGRATE - 387)) | (1L << (MIN_ROWS - 387)) | (1L << (MODE - 387)) | (1L << (MODIFY - 387)) | (1L << (MUTEX - 387)) | (1L << (MYSQL - 387)) | (1L << (MYSQL_ERRNO - 387)) | (1L << (NAME - 387)) | (1L << (NAMES - 387)) | (1L << (NCHAR - 387)) | (1L << (NEVER - 387)) | (1L << (NEXT - 387)) | (1L << (NO - 387)) | (1L << (NODEGROUP - 387)) | (1L << (NONE - 387)) | (1L << (OFFLINE - 387)) | (1L << (OFFSET - 387)) | (1L << (OJ - 387)) | (1L << (OLD_PASSWORD - 387)) | (1L << (ONE - 387)) | (1L << (ONLINE - 387)) | (1L << (ONLY - 387)) | (1L << (OPEN - 387)) | (1L << (OPTIMIZER_COSTS - 387)) | (1L << (OPTIONS - 387)) | (1L << (OWNER - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PAGE - 451)) | (1L << (PARSER - 451)) | (1L << (PARTIAL - 451)) | (1L << (PARTITIONING - 451)) | (1L << (PARTITIONS - 451)) | (1L << (PASSWORD - 451)) | (1L << (PHASE - 451)) | (1L << (PLUGIN - 451)) | (1L << (PLUGIN_DIR - 451)) | (1L << (PLUGINS - 451)) | (1L << (PORT - 451)) | (1L << (PRECEDES - 451)) | (1L << (PREPARE - 451)) | (1L << (PRESERVE - 451)) | (1L << (PREV - 451)) | (1L << (PROCESSLIST - 451)) | (1L << (PROFILE - 451)) | (1L << (PROFILES - 451)) | (1L << (PROXY - 451)) | (1L << (QUERY - 451)) | (1L << (QUICK - 451)) | (1L << (REBUILD - 451)) | (1L << (RECOVER - 451)) | (1L << (REDO_BUFFER_SIZE - 451)) | (1L << (REDUNDANT - 451)) | (1L << (RELAY - 451)) | (1L << (RELAY_LOG_FILE - 451)) | (1L << (RELAY_LOG_POS - 451)) | (1L << (RELAYLOG - 451)) | (1L << (REMOVE - 451)) | (1L << (REORGANIZE - 451)) | (1L << (REPAIR - 451)) | (1L << (REPLICATE_DO_DB - 451)) | (1L << (REPLICATE_DO_TABLE - 451)) | (1L << (REPLICATE_IGNORE_DB - 451)) | (1L << (REPLICATE_IGNORE_TABLE - 451)) | (1L << (REPLICATE_REWRITE_DB - 451)) | (1L << (REPLICATE_WILD_DO_TABLE - 451)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 451)) | (1L << (REPLICATION - 451)) | (1L << (RESET - 451)) | (1L << (RESUME - 451)) | (1L << (RETURNED_SQLSTATE - 451)) | (1L << (RETURNS - 451)) | (1L << (ROLLBACK - 451)) | (1L << (ROLLUP - 451)) | (1L << (ROTATE - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (ROW_FORMAT - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SCHEDULE - 451)) | (1L << (SECURITY - 451)) | (1L << (SERVER - 451)) | (1L << (SESSION - 451)) | (1L << (SHARE - 451)) | (1L << (SHARED - 451)) | (1L << (SIGNED - 451)) | (1L << (SIMPLE - 451)) | (1L << (SLAVE - 451)) | (1L << (SLOW - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOCKET - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SOME - 515)) | (1L << (SONAME - 515)) | (1L << (SOUNDS - 515)) | (1L << (SOURCE - 515)) | (1L << (SQL_AFTER_GTIDS - 515)) | (1L << (SQL_AFTER_MTS_GAPS - 515)) | (1L << (SQL_BEFORE_GTIDS - 515)) | (1L << (SQL_BUFFER_RESULT - 515)) | (1L << (SQL_CACHE - 515)) | (1L << (SQL_NO_CACHE - 515)) | (1L << (SQL_THREAD - 515)) | (1L << (START - 515)) | (1L << (STARTS - 515)) | (1L << (STATS_AUTO_RECALC - 515)) | (1L << (STATS_PERSISTENT - 515)) | (1L << (STATS_SAMPLE_PAGES - 515)) | (1L << (STATUS - 515)) | (1L << (STOP - 515)) | (1L << (STORAGE - 515)) | (1L << (STRING - 515)) | (1L << (SUBCLASS_ORIGIN - 515)) | (1L << (SUBJECT - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBPARTITIONS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SWAPS - 515)) | (1L << (SWITCHES - 515)) | (1L << (TABLE_NAME - 515)) | (1L << (TABLESPACE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TEMPTABLE - 515)) | (1L << (THAN - 515)) | (1L << (TRADITIONAL - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRIGGERS - 515)) | (1L << (TRUNCATE - 515)) | (1L << (UNDEFINED - 515)) | (1L << (UNDOFILE - 515)) | (1L << (UNDO_BUFFER_SIZE - 515)) | (1L << (UNINSTALL - 515)) | (1L << (UNKNOWN - 515)) | (1L << (UNTIL - 515)) | (1L << (UPGRADE - 515)) | (1L << (USER - 515)) | (1L << (USE_FRM - 515)) | (1L << (USER_RESOURCES - 515)) | (1L << (VALIDATION - 515)) | (1L << (VALUE - 515)) | (1L << (VARIABLES - 515)) | (1L << (VIEW - 515)) | (1L << (VISIBLE - 515)) | (1L << (WAIT - 515)) | (1L << (WARNINGS - 515)) | (1L << (WITHOUT - 515)) | (1L << (WORK - 515)) | (1L << (WRAPPER - 515)) | (1L << (X509 - 515)) | (1L << (XA - 515)) | (1L << (XML - 515)))) != 0) || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (INTERNAL - 580)) | (1L << (QUARTER - 580)) | (1L << (MONTH - 580)) | (1L << (DAY - 580)) | (1L << (HOUR - 580)) | (1L << (MINUTE - 580)) | (1L << (WEEK - 580)) | (1L << (SECOND - 580)) | (1L << (MICROSECOND - 580)) | (1L << (TABLES - 580)) | (1L << (ROUTINE - 580)) | (1L << (EXECUTE - 580)) | (1L << (FILE - 580)) | (1L << (PROCESS - 580)) | (1L << (RELOAD - 580)) | (1L << (SHUTDOWN - 580)) | (1L << (SUPER - 580)) | (1L << (PRIVILEGES - 580)) | (1L << (SESSION_VARIABLES_ADMIN - 580)) | (1L << (ARMSCII8 - 580)) | (1L << (ASCII - 580)) | (1L << (BIG5 - 580)) | (1L << (CP1250 - 580)) | (1L << (CP1251 - 580)) | (1L << (CP1256 - 580)) | (1L << (CP1257 - 580)) | (1L << (CP850 - 580)) | (1L << (CP852 - 580)) | (1L << (CP866 - 580)) | (1L << (CP932 - 580)) | (1L << (DEC8 - 580)) | (1L << (EUCJPMS - 580)) | (1L << (EUCKR - 580)) | (1L << (GB2312 - 580)) | (1L << (GBK - 580)) | (1L << (GEOSTD8 - 580)) | (1L << (GREEK - 580)) | (1L << (HEBREW - 580)) | (1L << (HP8 - 580)) | (1L << (KEYBCS2 - 580)) | (1L << (KOI8R - 580)) | (1L << (KOI8U - 580)) | (1L << (LATIN1 - 580)) | (1L << (LATIN2 - 580)) | (1L << (LATIN5 - 580)) | (1L << (LATIN7 - 580)) | (1L << (MACCE - 580)) | (1L << (MACROMAN - 580)) | (1L << (SJIS - 580)) | (1L << (SWE7 - 580)) | (1L << (TIS620 - 580)) | (1L << (UCS2 - 580)) | (1L << (UJIS - 580)) | (1L << (UTF16 - 580)) | (1L << (UTF16LE - 580)) | (1L << (UTF32 - 580)) | (1L << (UTF8 - 580)) | (1L << (UTF8MB3 - 580)) | (1L << (UTF8MB4 - 580)) | (1L << (ARCHIVE - 580)) | (1L << (BLACKHOLE - 580)) | (1L << (CSV - 580)) | (1L << (FEDERATED - 580)) | (1L << (INNODB - 580)))) != 0) || ((((_la - 644)) & ~0x3f) == 0 && ((1L << (_la - 644)) & ((1L << (MEMORY - 644)) | (1L << (MRG_MYISAM - 644)) | (1L << (MYISAM - 644)) | (1L << (NDB - 644)) | (1L << (NDBCLUSTER - 644)) | (1L << (PERFORMANCE_SCHEMA - 644)) | (1L << (TOKUDB - 644)) | (1L << (REPEATABLE - 644)) | (1L << (COMMITTED - 644)) | (1L << (UNCOMMITTED - 644)) | (1L << (SERIALIZABLE - 644)) | (1L << (GEOMETRYCOLLECTION - 644)) | (1L << (LINESTRING - 644)) | (1L << (MULTILINESTRING - 644)) | (1L << (MULTIPOINT - 644)) | (1L << (MULTIPOLYGON - 644)) | (1L << (POINT - 644)) | (1L << (POLYGON - 644)) | (1L << (ABS - 644)) | (1L << (ACOS - 644)) | (1L << (ADDDATE - 644)) | (1L << (ADDTIME - 644)) | (1L << (AES_DECRYPT - 644)) | (1L << (AES_ENCRYPT - 644)) | (1L << (AREA - 644)) | (1L << (ASBINARY - 644)) | (1L << (ASIN - 644)) | (1L << (ASTEXT - 644)) | (1L << (ASWKB - 644)) | (1L << (ASWKT - 644)) | (1L << (ASYMMETRIC_DECRYPT - 644)) | (1L << (ASYMMETRIC_DERIVE - 644)) | (1L << (ASYMMETRIC_ENCRYPT - 644)) | (1L << (ASYMMETRIC_SIGN - 644)) | (1L << (ASYMMETRIC_VERIFY - 644)) | (1L << (ATAN - 644)) | (1L << (ATAN2 - 644)) | (1L << (BENCHMARK - 644)) | (1L << (BIN - 644)) | (1L << (BIT_COUNT - 644)) | (1L << (BIT_LENGTH - 644)) | (1L << (BUFFER - 644)) | (1L << (CATALOG_NAME - 644)) | (1L << (CEIL - 644)) | (1L << (CEILING - 644)) | (1L << (CENTROID - 644)) | (1L << (CHARACTER_LENGTH - 644)) | (1L << (CHARSET - 644)) | (1L << (CHAR_LENGTH - 644)) | (1L << (COERCIBILITY - 644)) | (1L << (COLLATION - 644)) | (1L << (COMPRESS - 644)) | (1L << (CONCAT - 644)) | (1L << (CONCAT_WS - 644)) | (1L << (CONNECTION_ID - 644)) | (1L << (CONV - 644)) | (1L << (CONVERT_TZ - 644)) | (1L << (COS - 644)) | (1L << (COT - 644)) | (1L << (CRC32 - 644)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 644)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 644)))) != 0) || ((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (CREATE_DH_PARAMETERS - 708)) | (1L << (CREATE_DIGEST - 708)) | (1L << (CROSSES - 708)) | (1L << (DATEDIFF - 708)) | (1L << (DATE_FORMAT - 708)) | (1L << (DAYNAME - 708)) | (1L << (DAYOFMONTH - 708)) | (1L << (DAYOFWEEK - 708)) | (1L << (DAYOFYEAR - 708)) | (1L << (DECODE - 708)) | (1L << (DEGREES - 708)) | (1L << (DES_DECRYPT - 708)) | (1L << (DES_ENCRYPT - 708)) | (1L << (DIMENSION - 708)) | (1L << (DISJOINT - 708)) | (1L << (ELT - 708)) | (1L << (ENCODE - 708)) | (1L << (ENCRYPT - 708)) | (1L << (ENDPOINT - 708)) | (1L << (ENVELOPE - 708)) | (1L << (EQUALS - 708)) | (1L << (EXP - 708)) | (1L << (EXPORT_SET - 708)) | (1L << (EXTERIORRING - 708)) | (1L << (EXTRACTVALUE - 708)) | (1L << (FIELD - 708)) | (1L << (FIND_IN_SET - 708)) | (1L << (FLOOR - 708)) | (1L << (FORMAT - 708)) | (1L << (FOUND_ROWS - 708)) | (1L << (FROM_BASE64 - 708)) | (1L << (FROM_DAYS - 708)) | (1L << (FROM_UNIXTIME - 708)) | (1L << (GEOMCOLLFROMTEXT - 708)) | (1L << (GEOMCOLLFROMWKB - 708)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 708)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 708)) | (1L << (GEOMETRYFROMTEXT - 708)) | (1L << (GEOMETRYFROMWKB - 708)) | (1L << (GEOMETRYN - 708)) | (1L << (GEOMETRYTYPE - 708)) | (1L << (GEOMFROMTEXT - 708)) | (1L << (GEOMFROMWKB - 708)) | (1L << (GET_FORMAT - 708)) | (1L << (GET_LOCK - 708)) | (1L << (GLENGTH - 708)) | (1L << (GREATEST - 708)) | (1L << (GTID_SUBSET - 708)) | (1L << (GTID_SUBTRACT - 708)) | (1L << (HEX - 708)) | (1L << (IFNULL - 708)) | (1L << (INET6_ATON - 708)) | (1L << (INET6_NTOA - 708)) | (1L << (INET_ATON - 708)) | (1L << (INET_NTOA - 708)) | (1L << (INSTR - 708)) | (1L << (INTERIORRINGN - 708)) | (1L << (INTERSECTS - 708)) | (1L << (ISCLOSED - 708)) | (1L << (ISEMPTY - 708)) | (1L << (ISNULL - 708)) | (1L << (ISSIMPLE - 708)) | (1L << (IS_FREE_LOCK - 708)) | (1L << (IS_IPV4 - 708)))) != 0) || ((((_la - 772)) & ~0x3f) == 0 && ((1L << (_la - 772)) & ((1L << (IS_IPV4_COMPAT - 772)) | (1L << (IS_IPV4_MAPPED - 772)) | (1L << (IS_IPV6 - 772)) | (1L << (IS_USED_LOCK - 772)) | (1L << (LAST_INSERT_ID - 772)) | (1L << (LCASE - 772)) | (1L << (LEAST - 772)) | (1L << (LENGTH - 772)) | (1L << (LINEFROMTEXT - 772)) | (1L << (LINEFROMWKB - 772)) | (1L << (LINESTRINGFROMTEXT - 772)) | (1L << (LINESTRINGFROMWKB - 772)) | (1L << (LN - 772)) | (1L << (LOAD_FILE - 772)) | (1L << (LOCATE - 772)) | (1L << (LOG - 772)) | (1L << (LOG10 - 772)) | (1L << (LOG2 - 772)) | (1L << (LOWER - 772)) | (1L << (LPAD - 772)) | (1L << (LTRIM - 772)) | (1L << (MAKEDATE - 772)) | (1L << (MAKETIME - 772)) | (1L << (MAKE_SET - 772)) | (1L << (MASTER_POS_WAIT - 772)) | (1L << (MBRCONTAINS - 772)) | (1L << (MBRDISJOINT - 772)) | (1L << (MBREQUAL - 772)) | (1L << (MBRINTERSECTS - 772)) | (1L << (MBROVERLAPS - 772)) | (1L << (MBRTOUCHES - 772)) | (1L << (MBRWITHIN - 772)) | (1L << (MD5 - 772)) | (1L << (MLINEFROMTEXT - 772)) | (1L << (MLINEFROMWKB - 772)) | (1L << (MONTHNAME - 772)) | (1L << (MPOINTFROMTEXT - 772)) | (1L << (MPOINTFROMWKB - 772)) | (1L << (MPOLYFROMTEXT - 772)) | (1L << (MPOLYFROMWKB - 772)) | (1L << (MULTILINESTRINGFROMTEXT - 772)) | (1L << (MULTILINESTRINGFROMWKB - 772)) | (1L << (MULTIPOINTFROMTEXT - 772)) | (1L << (MULTIPOINTFROMWKB - 772)) | (1L << (MULTIPOLYGONFROMTEXT - 772)) | (1L << (MULTIPOLYGONFROMWKB - 772)) | (1L << (NAME_CONST - 772)) | (1L << (NULLIF - 772)) | (1L << (NUMGEOMETRIES - 772)) | (1L << (NUMINTERIORRINGS - 772)) | (1L << (NUMPOINTS - 772)) | (1L << (OCT - 772)) | (1L << (OCTET_LENGTH - 772)) | (1L << (ORD - 772)) | (1L << (OVERLAPS - 772)) | (1L << (PERIOD_ADD - 772)) | (1L << (PERIOD_DIFF - 772)) | (1L << (PI - 772)) | (1L << (POINTFROMTEXT - 772)) | (1L << (POINTFROMWKB - 772)) | (1L << (POINTN - 772)) | (1L << (POLYFROMTEXT - 772)) | (1L << (POLYFROMWKB - 772)) | (1L << (POLYGONFROMTEXT - 772)))) != 0) || ((((_la - 836)) & ~0x3f) == 0 && ((1L << (_la - 836)) & ((1L << (POLYGONFROMWKB - 836)) | (1L << (POW - 836)) | (1L << (POWER - 836)) | (1L << (QUOTE - 836)) | (1L << (RADIANS - 836)) | (1L << (RAND - 836)) | (1L << (RANDOM_BYTES - 836)) | (1L << (RELEASE_LOCK - 836)) | (1L << (REVERSE - 836)) | (1L << (ROUND - 836)) | (1L << (ROW_COUNT - 836)) | (1L << (RPAD - 836)) | (1L << (RTRIM - 836)) | (1L << (SEC_TO_TIME - 836)) | (1L << (SESSION_USER - 836)) | (1L << (SHA - 836)) | (1L << (SHA1 - 836)) | (1L << (SHA2 - 836)) | (1L << (SCHEMA_NAME - 836)) | (1L << (SIGN - 836)) | (1L << (SIN - 836)) | (1L << (SLEEP - 836)) | (1L << (SOUNDEX - 836)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 836)) | (1L << (SQRT - 836)) | (1L << (SRID - 836)) | (1L << (STARTPOINT - 836)) | (1L << (STRCMP - 836)) | (1L << (STR_TO_DATE - 836)) | (1L << (ST_AREA - 836)) | (1L << (ST_ASBINARY - 836)) | (1L << (ST_ASTEXT - 836)) | (1L << (ST_ASWKB - 836)) | (1L << (ST_ASWKT - 836)) | (1L << (ST_BUFFER - 836)) | (1L << (ST_CENTROID - 836)) | (1L << (ST_CONTAINS - 836)) | (1L << (ST_CROSSES - 836)) | (1L << (ST_DIFFERENCE - 836)) | (1L << (ST_DIMENSION - 836)) | (1L << (ST_DISJOINT - 836)) | (1L << (ST_DISTANCE - 836)) | (1L << (ST_ENDPOINT - 836)) | (1L << (ST_ENVELOPE - 836)) | (1L << (ST_EQUALS - 836)) | (1L << (ST_EXTERIORRING - 836)) | (1L << (ST_GEOMCOLLFROMTEXT - 836)) | (1L << (ST_GEOMCOLLFROMTXT - 836)) | (1L << (ST_GEOMCOLLFROMWKB - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 836)) | (1L << (ST_GEOMETRYFROMTEXT - 836)) | (1L << (ST_GEOMETRYFROMWKB - 836)) | (1L << (ST_GEOMETRYN - 836)) | (1L << (ST_GEOMETRYTYPE - 836)) | (1L << (ST_GEOMFROMTEXT - 836)) | (1L << (ST_GEOMFROMWKB - 836)) | (1L << (ST_INTERIORRINGN - 836)) | (1L << (ST_INTERSECTION - 836)) | (1L << (ST_INTERSECTS - 836)) | (1L << (ST_ISCLOSED - 836)) | (1L << (ST_ISEMPTY - 836)) | (1L << (ST_ISSIMPLE - 836)) | (1L << (ST_LINEFROMTEXT - 836)))) != 0) || ((((_la - 900)) & ~0x3f) == 0 && ((1L << (_la - 900)) & ((1L << (ST_LINEFROMWKB - 900)) | (1L << (ST_LINESTRINGFROMTEXT - 900)) | (1L << (ST_LINESTRINGFROMWKB - 900)) | (1L << (ST_NUMGEOMETRIES - 900)) | (1L << (ST_NUMINTERIORRING - 900)) | (1L << (ST_NUMINTERIORRINGS - 900)) | (1L << (ST_NUMPOINTS - 900)) | (1L << (ST_OVERLAPS - 900)) | (1L << (ST_POINTFROMTEXT - 900)) | (1L << (ST_POINTFROMWKB - 900)) | (1L << (ST_POINTN - 900)) | (1L << (ST_POLYFROMTEXT - 900)) | (1L << (ST_POLYFROMWKB - 900)) | (1L << (ST_POLYGONFROMTEXT - 900)) | (1L << (ST_POLYGONFROMWKB - 900)) | (1L << (ST_SRID - 900)) | (1L << (ST_STARTPOINT - 900)) | (1L << (ST_SYMDIFFERENCE - 900)) | (1L << (ST_TOUCHES - 900)) | (1L << (ST_UNION - 900)) | (1L << (ST_WITHIN - 900)) | (1L << (ST_X - 900)) | (1L << (ST_Y - 900)) | (1L << (SUBDATE - 900)) | (1L << (SUBSTRING_INDEX - 900)) | (1L << (SUBTIME - 900)) | (1L << (SYSTEM_USER - 900)) | (1L << (TAN - 900)) | (1L << (TIMEDIFF - 900)) | (1L << (TIMESTAMPADD - 900)) | (1L << (TIMESTAMPDIFF - 900)) | (1L << (TIME_FORMAT - 900)) | (1L << (TIME_TO_SEC - 900)) | (1L << (TOUCHES - 900)) | (1L << (TO_BASE64 - 900)) | (1L << (TO_DAYS - 900)) | (1L << (TO_SECONDS - 900)) | (1L << (UCASE - 900)) | (1L << (UNCOMPRESS - 900)) | (1L << (UNCOMPRESSED_LENGTH - 900)) | (1L << (UNHEX - 900)) | (1L << (UNIX_TIMESTAMP - 900)) | (1L << (UPDATEXML - 900)) | (1L << (UPPER - 900)) | (1L << (UUID - 900)) | (1L << (UUID_SHORT - 900)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 900)) | (1L << (VERSION - 900)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 900)) | (1L << (WEEKDAY - 900)) | (1L << (WEEKOFYEAR - 900)) | (1L << (WEIGHT_STRING - 900)) | (1L << (WITHIN - 900)) | (1L << (YEARWEEK - 900)) | (1L << (Y_FUNCTION - 900)) | (1L << (X_FUNCTION - 900)))) != 0) || ((((_la - 994)) & ~0x3f) == 0 && ((1L << (_la - 994)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 994)) | (1L << (STRING_LITERAL - 994)) | (1L << (ID - 994)) | (1L << (REVERSE_QUOTE_ID - 994)))) != 0))
                {
                    {
                        State = 4199; uid();
                    }
                }

            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class RepeatStatementContext : ParserRuleContext
    {
        public ITerminalNode[] REPEAT() { return GetTokens(MySqlParser.REPEAT); }
        public ITerminalNode REPEAT(int i)
        {
            return GetToken(MySqlParser.REPEAT, i);
        }
        public ITerminalNode UNTIL() { return GetToken(MySqlParser.UNTIL, 0); }
        public ExpressionContext expression()
        {
            return GetRuleContext<ExpressionContext>(0);
        }
        public ITerminalNode END() { return GetToken(MySqlParser.END, 0); }
        public UidContext[] uid()
        {
            return GetRuleContexts<UidContext>();
        }
        public UidContext uid(int i)
        {
            return GetRuleContext<UidContext>(i);
        }
        public ITerminalNode COLON_SYMB() { return GetToken(MySqlParser.COLON_SYMB, 0); }
        public ProcedureSqlStatementContext[] procedureSqlStatement()
        {
            return GetRuleContexts<ProcedureSqlStatementContext>();
        }
        public ProcedureSqlStatementContext procedureSqlStatement(int i)
        {
            return GetRuleContext<ProcedureSqlStatementContext>(i);
        }
        public RepeatStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_repeatStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterRepeatStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitRepeatStatement(this);
        }
    }

    [RuleVersion(0)]
    public RepeatStatementContext repeatStatement()
    {
        RepeatStatementContext _localctx = new RepeatStatementContext(Context, State);
        EnterRule(_localctx, 358, RULE_repeatStatement);
        int _la;
        try
        {
            int _alt;
            EnterOuterAlt(_localctx, 1);
            {
                State = 4205;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)) | (1L << (POSITION - 191)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ACCOUNT - 259)) | (1L << (ACTION - 259)) | (1L << (AFTER - 259)) | (1L << (AGGREGATE - 259)) | (1L << (ALGORITHM - 259)) | (1L << (ANY - 259)) | (1L << (AT - 259)) | (1L << (AUTHORS - 259)) | (1L << (AUTOCOMMIT - 259)) | (1L << (AUTOEXTEND_SIZE - 259)) | (1L << (AUTO_INCREMENT - 259)) | (1L << (AVG_ROW_LENGTH - 259)) | (1L << (BEGIN - 259)) | (1L << (BINLOG - 259)) | (1L << (BIT - 259)) | (1L << (BLOCK - 259)) | (1L << (BOOL - 259)) | (1L << (BOOLEAN - 259)) | (1L << (BTREE - 259)) | (1L << (CACHE - 259)) | (1L << (CASCADED - 259)) | (1L << (CHAIN - 259)) | (1L << (CHANGED - 259)) | (1L << (CHANNEL - 259)) | (1L << (CHECKSUM - 259)) | (1L << (PAGE_CHECKSUM - 259)) | (1L << (CIPHER - 259)) | (1L << (CLASS_ORIGIN - 259)) | (1L << (CLIENT - 259)) | (1L << (CLOSE - 259)) | (1L << (COALESCE - 259)) | (1L << (CODE - 259)) | (1L << (COLUMNS - 259)) | (1L << (COLUMN_FORMAT - 259)) | (1L << (COLUMN_NAME - 259)) | (1L << (COMMENT - 259)) | (1L << (COMMIT - 259)) | (1L << (COMPACT - 259)) | (1L << (COMPLETION - 259)) | (1L << (COMPRESSED - 259)) | (1L << (COMPRESSION - 259)) | (1L << (CONCURRENT - 259)) | (1L << (CONNECTION - 259)) | (1L << (CONSISTENT - 259)) | (1L << (CONSTRAINT_CATALOG - 259)) | (1L << (CONSTRAINT_SCHEMA - 259)) | (1L << (CONSTRAINT_NAME - 259)) | (1L << (CONTAINS - 259)) | (1L << (CONTEXT - 259)) | (1L << (CONTRIBUTORS - 259)) | (1L << (COPY - 259)) | (1L << (CPU - 259)) | (1L << (CURSOR_NAME - 259)) | (1L << (DATA - 259)) | (1L << (DATAFILE - 259)) | (1L << (DEALLOCATE - 259)) | (1L << (DEFAULT_AUTH - 259)) | (1L << (DEFINER - 259)) | (1L << (DELAY_KEY_WRITE - 259)) | (1L << (DES_KEY_FILE - 259)) | (1L << (DIRECTORY - 259)) | (1L << (DISABLE - 259)) | (1L << (DISCARD - 259)) | (1L << (DISK - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (DO - 323)) | (1L << (DUMPFILE - 323)) | (1L << (DUPLICATE - 323)) | (1L << (DYNAMIC - 323)) | (1L << (ENABLE - 323)) | (1L << (ENCRYPTION - 323)) | (1L << (END - 323)) | (1L << (ENDS - 323)) | (1L << (ENGINE - 323)) | (1L << (ENGINES - 323)) | (1L << (ERROR - 323)) | (1L << (ERRORS - 323)) | (1L << (ESCAPE - 323)) | (1L << (EVEN - 323)) | (1L << (EVENT - 323)) | (1L << (EVENTS - 323)) | (1L << (EVERY - 323)) | (1L << (EXCHANGE - 323)) | (1L << (EXCLUSIVE - 323)) | (1L << (EXPIRE - 323)) | (1L << (EXPORT - 323)) | (1L << (EXTENDED - 323)) | (1L << (EXTENT_SIZE - 323)) | (1L << (FAST - 323)) | (1L << (FAULTS - 323)) | (1L << (FIELDS - 323)) | (1L << (FILE_BLOCK_SIZE - 323)) | (1L << (FILTER - 323)) | (1L << (FIRST - 323)) | (1L << (FIXED - 323)) | (1L << (FLUSH - 323)) | (1L << (FOLLOWS - 323)) | (1L << (FOUND - 323)) | (1L << (FULL - 323)) | (1L << (FUNCTION - 323)) | (1L << (GENERAL - 323)) | (1L << (GLOBAL - 323)) | (1L << (GRANTS - 323)) | (1L << (GROUP_REPLICATION - 323)) | (1L << (HANDLER - 323)) | (1L << (HASH - 323)) | (1L << (HELP - 323)) | (1L << (HOST - 323)) | (1L << (HOSTS - 323)) | (1L << (IDENTIFIED - 323)) | (1L << (IGNORE_SERVER_IDS - 323)) | (1L << (IMPORT - 323)) | (1L << (INDEXES - 323)) | (1L << (INITIAL_SIZE - 323)) | (1L << (INPLACE - 323)) | (1L << (INSERT_METHOD - 323)) | (1L << (INSTALL - 323)) | (1L << (INSTANCE - 323)) | (1L << (INVISIBLE - 323)) | (1L << (INVOKER - 323)) | (1L << (IO - 323)) | (1L << (IO_THREAD - 323)) | (1L << (IPC - 323)) | (1L << (ISOLATION - 323)) | (1L << (ISSUER - 323)) | (1L << (JSON - 323)) | (1L << (KEY_BLOCK_SIZE - 323)) | (1L << (LANGUAGE - 323)) | (1L << (LAST - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (LEAVES - 387)) | (1L << (LESS - 387)) | (1L << (LEVEL - 387)) | (1L << (LIST - 387)) | (1L << (LOCAL - 387)) | (1L << (LOGFILE - 387)) | (1L << (LOGS - 387)) | (1L << (MASTER - 387)) | (1L << (MASTER_AUTO_POSITION - 387)) | (1L << (MASTER_CONNECT_RETRY - 387)) | (1L << (MASTER_DELAY - 387)) | (1L << (MASTER_HEARTBEAT_PERIOD - 387)) | (1L << (MASTER_HOST - 387)) | (1L << (MASTER_LOG_FILE - 387)) | (1L << (MASTER_LOG_POS - 387)) | (1L << (MASTER_PASSWORD - 387)) | (1L << (MASTER_PORT - 387)) | (1L << (MASTER_RETRY_COUNT - 387)) | (1L << (MASTER_SSL - 387)) | (1L << (MASTER_SSL_CA - 387)) | (1L << (MASTER_SSL_CAPATH - 387)) | (1L << (MASTER_SSL_CERT - 387)) | (1L << (MASTER_SSL_CIPHER - 387)) | (1L << (MASTER_SSL_CRL - 387)) | (1L << (MASTER_SSL_CRLPATH - 387)) | (1L << (MASTER_SSL_KEY - 387)) | (1L << (MASTER_TLS_VERSION - 387)) | (1L << (MASTER_USER - 387)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 387)) | (1L << (MAX_QUERIES_PER_HOUR - 387)) | (1L << (MAX_ROWS - 387)) | (1L << (MAX_SIZE - 387)) | (1L << (MAX_UPDATES_PER_HOUR - 387)) | (1L << (MAX_USER_CONNECTIONS - 387)) | (1L << (MEDIUM - 387)) | (1L << (MERGE - 387)) | (1L << (MESSAGE_TEXT - 387)) | (1L << (MID - 387)) | (1L << (MIGRATE - 387)) | (1L << (MIN_ROWS - 387)) | (1L << (MODE - 387)) | (1L << (MODIFY - 387)) | (1L << (MUTEX - 387)) | (1L << (MYSQL - 387)) | (1L << (MYSQL_ERRNO - 387)) | (1L << (NAME - 387)) | (1L << (NAMES - 387)) | (1L << (NCHAR - 387)) | (1L << (NEVER - 387)) | (1L << (NEXT - 387)) | (1L << (NO - 387)) | (1L << (NODEGROUP - 387)) | (1L << (NONE - 387)) | (1L << (OFFLINE - 387)) | (1L << (OFFSET - 387)) | (1L << (OJ - 387)) | (1L << (OLD_PASSWORD - 387)) | (1L << (ONE - 387)) | (1L << (ONLINE - 387)) | (1L << (ONLY - 387)) | (1L << (OPEN - 387)) | (1L << (OPTIMIZER_COSTS - 387)) | (1L << (OPTIONS - 387)) | (1L << (OWNER - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PAGE - 451)) | (1L << (PARSER - 451)) | (1L << (PARTIAL - 451)) | (1L << (PARTITIONING - 451)) | (1L << (PARTITIONS - 451)) | (1L << (PASSWORD - 451)) | (1L << (PHASE - 451)) | (1L << (PLUGIN - 451)) | (1L << (PLUGIN_DIR - 451)) | (1L << (PLUGINS - 451)) | (1L << (PORT - 451)) | (1L << (PRECEDES - 451)) | (1L << (PREPARE - 451)) | (1L << (PRESERVE - 451)) | (1L << (PREV - 451)) | (1L << (PROCESSLIST - 451)) | (1L << (PROFILE - 451)) | (1L << (PROFILES - 451)) | (1L << (PROXY - 451)) | (1L << (QUERY - 451)) | (1L << (QUICK - 451)) | (1L << (REBUILD - 451)) | (1L << (RECOVER - 451)) | (1L << (REDO_BUFFER_SIZE - 451)) | (1L << (REDUNDANT - 451)) | (1L << (RELAY - 451)) | (1L << (RELAY_LOG_FILE - 451)) | (1L << (RELAY_LOG_POS - 451)) | (1L << (RELAYLOG - 451)) | (1L << (REMOVE - 451)) | (1L << (REORGANIZE - 451)) | (1L << (REPAIR - 451)) | (1L << (REPLICATE_DO_DB - 451)) | (1L << (REPLICATE_DO_TABLE - 451)) | (1L << (REPLICATE_IGNORE_DB - 451)) | (1L << (REPLICATE_IGNORE_TABLE - 451)) | (1L << (REPLICATE_REWRITE_DB - 451)) | (1L << (REPLICATE_WILD_DO_TABLE - 451)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 451)) | (1L << (REPLICATION - 451)) | (1L << (RESET - 451)) | (1L << (RESUME - 451)) | (1L << (RETURNED_SQLSTATE - 451)) | (1L << (RETURNS - 451)) | (1L << (ROLLBACK - 451)) | (1L << (ROLLUP - 451)) | (1L << (ROTATE - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (ROW_FORMAT - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SCHEDULE - 451)) | (1L << (SECURITY - 451)) | (1L << (SERVER - 451)) | (1L << (SESSION - 451)) | (1L << (SHARE - 451)) | (1L << (SHARED - 451)) | (1L << (SIGNED - 451)) | (1L << (SIMPLE - 451)) | (1L << (SLAVE - 451)) | (1L << (SLOW - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOCKET - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SOME - 515)) | (1L << (SONAME - 515)) | (1L << (SOUNDS - 515)) | (1L << (SOURCE - 515)) | (1L << (SQL_AFTER_GTIDS - 515)) | (1L << (SQL_AFTER_MTS_GAPS - 515)) | (1L << (SQL_BEFORE_GTIDS - 515)) | (1L << (SQL_BUFFER_RESULT - 515)) | (1L << (SQL_CACHE - 515)) | (1L << (SQL_NO_CACHE - 515)) | (1L << (SQL_THREAD - 515)) | (1L << (START - 515)) | (1L << (STARTS - 515)) | (1L << (STATS_AUTO_RECALC - 515)) | (1L << (STATS_PERSISTENT - 515)) | (1L << (STATS_SAMPLE_PAGES - 515)) | (1L << (STATUS - 515)) | (1L << (STOP - 515)) | (1L << (STORAGE - 515)) | (1L << (STRING - 515)) | (1L << (SUBCLASS_ORIGIN - 515)) | (1L << (SUBJECT - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBPARTITIONS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SWAPS - 515)) | (1L << (SWITCHES - 515)) | (1L << (TABLE_NAME - 515)) | (1L << (TABLESPACE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TEMPTABLE - 515)) | (1L << (THAN - 515)) | (1L << (TRADITIONAL - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRIGGERS - 515)) | (1L << (TRUNCATE - 515)) | (1L << (UNDEFINED - 515)) | (1L << (UNDOFILE - 515)) | (1L << (UNDO_BUFFER_SIZE - 515)) | (1L << (UNINSTALL - 515)) | (1L << (UNKNOWN - 515)) | (1L << (UNTIL - 515)) | (1L << (UPGRADE - 515)) | (1L << (USER - 515)) | (1L << (USE_FRM - 515)) | (1L << (USER_RESOURCES - 515)) | (1L << (VALIDATION - 515)) | (1L << (VALUE - 515)) | (1L << (VARIABLES - 515)) | (1L << (VIEW - 515)) | (1L << (VISIBLE - 515)) | (1L << (WAIT - 515)) | (1L << (WARNINGS - 515)) | (1L << (WITHOUT - 515)) | (1L << (WORK - 515)) | (1L << (WRAPPER - 515)) | (1L << (X509 - 515)) | (1L << (XA - 515)) | (1L << (XML - 515)))) != 0) || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (INTERNAL - 580)) | (1L << (QUARTER - 580)) | (1L << (MONTH - 580)) | (1L << (DAY - 580)) | (1L << (HOUR - 580)) | (1L << (MINUTE - 580)) | (1L << (WEEK - 580)) | (1L << (SECOND - 580)) | (1L << (MICROSECOND - 580)) | (1L << (TABLES - 580)) | (1L << (ROUTINE - 580)) | (1L << (EXECUTE - 580)) | (1L << (FILE - 580)) | (1L << (PROCESS - 580)) | (1L << (RELOAD - 580)) | (1L << (SHUTDOWN - 580)) | (1L << (SUPER - 580)) | (1L << (PRIVILEGES - 580)) | (1L << (SESSION_VARIABLES_ADMIN - 580)) | (1L << (ARMSCII8 - 580)) | (1L << (ASCII - 580)) | (1L << (BIG5 - 580)) | (1L << (CP1250 - 580)) | (1L << (CP1251 - 580)) | (1L << (CP1256 - 580)) | (1L << (CP1257 - 580)) | (1L << (CP850 - 580)) | (1L << (CP852 - 580)) | (1L << (CP866 - 580)) | (1L << (CP932 - 580)) | (1L << (DEC8 - 580)) | (1L << (EUCJPMS - 580)) | (1L << (EUCKR - 580)) | (1L << (GB2312 - 580)) | (1L << (GBK - 580)) | (1L << (GEOSTD8 - 580)) | (1L << (GREEK - 580)) | (1L << (HEBREW - 580)) | (1L << (HP8 - 580)) | (1L << (KEYBCS2 - 580)) | (1L << (KOI8R - 580)) | (1L << (KOI8U - 580)) | (1L << (LATIN1 - 580)) | (1L << (LATIN2 - 580)) | (1L << (LATIN5 - 580)) | (1L << (LATIN7 - 580)) | (1L << (MACCE - 580)) | (1L << (MACROMAN - 580)) | (1L << (SJIS - 580)) | (1L << (SWE7 - 580)) | (1L << (TIS620 - 580)) | (1L << (UCS2 - 580)) | (1L << (UJIS - 580)) | (1L << (UTF16 - 580)) | (1L << (UTF16LE - 580)) | (1L << (UTF32 - 580)) | (1L << (UTF8 - 580)) | (1L << (UTF8MB3 - 580)) | (1L << (UTF8MB4 - 580)) | (1L << (ARCHIVE - 580)) | (1L << (BLACKHOLE - 580)) | (1L << (CSV - 580)) | (1L << (FEDERATED - 580)) | (1L << (INNODB - 580)))) != 0) || ((((_la - 644)) & ~0x3f) == 0 && ((1L << (_la - 644)) & ((1L << (MEMORY - 644)) | (1L << (MRG_MYISAM - 644)) | (1L << (MYISAM - 644)) | (1L << (NDB - 644)) | (1L << (NDBCLUSTER - 644)) | (1L << (PERFORMANCE_SCHEMA - 644)) | (1L << (TOKUDB - 644)) | (1L << (REPEATABLE - 644)) | (1L << (COMMITTED - 644)) | (1L << (UNCOMMITTED - 644)) | (1L << (SERIALIZABLE - 644)) | (1L << (GEOMETRYCOLLECTION - 644)) | (1L << (LINESTRING - 644)) | (1L << (MULTILINESTRING - 644)) | (1L << (MULTIPOINT - 644)) | (1L << (MULTIPOLYGON - 644)) | (1L << (POINT - 644)) | (1L << (POLYGON - 644)) | (1L << (ABS - 644)) | (1L << (ACOS - 644)) | (1L << (ADDDATE - 644)) | (1L << (ADDTIME - 644)) | (1L << (AES_DECRYPT - 644)) | (1L << (AES_ENCRYPT - 644)) | (1L << (AREA - 644)) | (1L << (ASBINARY - 644)) | (1L << (ASIN - 644)) | (1L << (ASTEXT - 644)) | (1L << (ASWKB - 644)) | (1L << (ASWKT - 644)) | (1L << (ASYMMETRIC_DECRYPT - 644)) | (1L << (ASYMMETRIC_DERIVE - 644)) | (1L << (ASYMMETRIC_ENCRYPT - 644)) | (1L << (ASYMMETRIC_SIGN - 644)) | (1L << (ASYMMETRIC_VERIFY - 644)) | (1L << (ATAN - 644)) | (1L << (ATAN2 - 644)) | (1L << (BENCHMARK - 644)) | (1L << (BIN - 644)) | (1L << (BIT_COUNT - 644)) | (1L << (BIT_LENGTH - 644)) | (1L << (BUFFER - 644)) | (1L << (CATALOG_NAME - 644)) | (1L << (CEIL - 644)) | (1L << (CEILING - 644)) | (1L << (CENTROID - 644)) | (1L << (CHARACTER_LENGTH - 644)) | (1L << (CHARSET - 644)) | (1L << (CHAR_LENGTH - 644)) | (1L << (COERCIBILITY - 644)) | (1L << (COLLATION - 644)) | (1L << (COMPRESS - 644)) | (1L << (CONCAT - 644)) | (1L << (CONCAT_WS - 644)) | (1L << (CONNECTION_ID - 644)) | (1L << (CONV - 644)) | (1L << (CONVERT_TZ - 644)) | (1L << (COS - 644)) | (1L << (COT - 644)) | (1L << (CRC32 - 644)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 644)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 644)))) != 0) || ((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (CREATE_DH_PARAMETERS - 708)) | (1L << (CREATE_DIGEST - 708)) | (1L << (CROSSES - 708)) | (1L << (DATEDIFF - 708)) | (1L << (DATE_FORMAT - 708)) | (1L << (DAYNAME - 708)) | (1L << (DAYOFMONTH - 708)) | (1L << (DAYOFWEEK - 708)) | (1L << (DAYOFYEAR - 708)) | (1L << (DECODE - 708)) | (1L << (DEGREES - 708)) | (1L << (DES_DECRYPT - 708)) | (1L << (DES_ENCRYPT - 708)) | (1L << (DIMENSION - 708)) | (1L << (DISJOINT - 708)) | (1L << (ELT - 708)) | (1L << (ENCODE - 708)) | (1L << (ENCRYPT - 708)) | (1L << (ENDPOINT - 708)) | (1L << (ENVELOPE - 708)) | (1L << (EQUALS - 708)) | (1L << (EXP - 708)) | (1L << (EXPORT_SET - 708)) | (1L << (EXTERIORRING - 708)) | (1L << (EXTRACTVALUE - 708)) | (1L << (FIELD - 708)) | (1L << (FIND_IN_SET - 708)) | (1L << (FLOOR - 708)) | (1L << (FORMAT - 708)) | (1L << (FOUND_ROWS - 708)) | (1L << (FROM_BASE64 - 708)) | (1L << (FROM_DAYS - 708)) | (1L << (FROM_UNIXTIME - 708)) | (1L << (GEOMCOLLFROMTEXT - 708)) | (1L << (GEOMCOLLFROMWKB - 708)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 708)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 708)) | (1L << (GEOMETRYFROMTEXT - 708)) | (1L << (GEOMETRYFROMWKB - 708)) | (1L << (GEOMETRYN - 708)) | (1L << (GEOMETRYTYPE - 708)) | (1L << (GEOMFROMTEXT - 708)) | (1L << (GEOMFROMWKB - 708)) | (1L << (GET_FORMAT - 708)) | (1L << (GET_LOCK - 708)) | (1L << (GLENGTH - 708)) | (1L << (GREATEST - 708)) | (1L << (GTID_SUBSET - 708)) | (1L << (GTID_SUBTRACT - 708)) | (1L << (HEX - 708)) | (1L << (IFNULL - 708)) | (1L << (INET6_ATON - 708)) | (1L << (INET6_NTOA - 708)) | (1L << (INET_ATON - 708)) | (1L << (INET_NTOA - 708)) | (1L << (INSTR - 708)) | (1L << (INTERIORRINGN - 708)) | (1L << (INTERSECTS - 708)) | (1L << (ISCLOSED - 708)) | (1L << (ISEMPTY - 708)) | (1L << (ISNULL - 708)) | (1L << (ISSIMPLE - 708)) | (1L << (IS_FREE_LOCK - 708)) | (1L << (IS_IPV4 - 708)))) != 0) || ((((_la - 772)) & ~0x3f) == 0 && ((1L << (_la - 772)) & ((1L << (IS_IPV4_COMPAT - 772)) | (1L << (IS_IPV4_MAPPED - 772)) | (1L << (IS_IPV6 - 772)) | (1L << (IS_USED_LOCK - 772)) | (1L << (LAST_INSERT_ID - 772)) | (1L << (LCASE - 772)) | (1L << (LEAST - 772)) | (1L << (LENGTH - 772)) | (1L << (LINEFROMTEXT - 772)) | (1L << (LINEFROMWKB - 772)) | (1L << (LINESTRINGFROMTEXT - 772)) | (1L << (LINESTRINGFROMWKB - 772)) | (1L << (LN - 772)) | (1L << (LOAD_FILE - 772)) | (1L << (LOCATE - 772)) | (1L << (LOG - 772)) | (1L << (LOG10 - 772)) | (1L << (LOG2 - 772)) | (1L << (LOWER - 772)) | (1L << (LPAD - 772)) | (1L << (LTRIM - 772)) | (1L << (MAKEDATE - 772)) | (1L << (MAKETIME - 772)) | (1L << (MAKE_SET - 772)) | (1L << (MASTER_POS_WAIT - 772)) | (1L << (MBRCONTAINS - 772)) | (1L << (MBRDISJOINT - 772)) | (1L << (MBREQUAL - 772)) | (1L << (MBRINTERSECTS - 772)) | (1L << (MBROVERLAPS - 772)) | (1L << (MBRTOUCHES - 772)) | (1L << (MBRWITHIN - 772)) | (1L << (MD5 - 772)) | (1L << (MLINEFROMTEXT - 772)) | (1L << (MLINEFROMWKB - 772)) | (1L << (MONTHNAME - 772)) | (1L << (MPOINTFROMTEXT - 772)) | (1L << (MPOINTFROMWKB - 772)) | (1L << (MPOLYFROMTEXT - 772)) | (1L << (MPOLYFROMWKB - 772)) | (1L << (MULTILINESTRINGFROMTEXT - 772)) | (1L << (MULTILINESTRINGFROMWKB - 772)) | (1L << (MULTIPOINTFROMTEXT - 772)) | (1L << (MULTIPOINTFROMWKB - 772)) | (1L << (MULTIPOLYGONFROMTEXT - 772)) | (1L << (MULTIPOLYGONFROMWKB - 772)) | (1L << (NAME_CONST - 772)) | (1L << (NULLIF - 772)) | (1L << (NUMGEOMETRIES - 772)) | (1L << (NUMINTERIORRINGS - 772)) | (1L << (NUMPOINTS - 772)) | (1L << (OCT - 772)) | (1L << (OCTET_LENGTH - 772)) | (1L << (ORD - 772)) | (1L << (OVERLAPS - 772)) | (1L << (PERIOD_ADD - 772)) | (1L << (PERIOD_DIFF - 772)) | (1L << (PI - 772)) | (1L << (POINTFROMTEXT - 772)) | (1L << (POINTFROMWKB - 772)) | (1L << (POINTN - 772)) | (1L << (POLYFROMTEXT - 772)) | (1L << (POLYFROMWKB - 772)) | (1L << (POLYGONFROMTEXT - 772)))) != 0) || ((((_la - 836)) & ~0x3f) == 0 && ((1L << (_la - 836)) & ((1L << (POLYGONFROMWKB - 836)) | (1L << (POW - 836)) | (1L << (POWER - 836)) | (1L << (QUOTE - 836)) | (1L << (RADIANS - 836)) | (1L << (RAND - 836)) | (1L << (RANDOM_BYTES - 836)) | (1L << (RELEASE_LOCK - 836)) | (1L << (REVERSE - 836)) | (1L << (ROUND - 836)) | (1L << (ROW_COUNT - 836)) | (1L << (RPAD - 836)) | (1L << (RTRIM - 836)) | (1L << (SEC_TO_TIME - 836)) | (1L << (SESSION_USER - 836)) | (1L << (SHA - 836)) | (1L << (SHA1 - 836)) | (1L << (SHA2 - 836)) | (1L << (SCHEMA_NAME - 836)) | (1L << (SIGN - 836)) | (1L << (SIN - 836)) | (1L << (SLEEP - 836)) | (1L << (SOUNDEX - 836)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 836)) | (1L << (SQRT - 836)) | (1L << (SRID - 836)) | (1L << (STARTPOINT - 836)) | (1L << (STRCMP - 836)) | (1L << (STR_TO_DATE - 836)) | (1L << (ST_AREA - 836)) | (1L << (ST_ASBINARY - 836)) | (1L << (ST_ASTEXT - 836)) | (1L << (ST_ASWKB - 836)) | (1L << (ST_ASWKT - 836)) | (1L << (ST_BUFFER - 836)) | (1L << (ST_CENTROID - 836)) | (1L << (ST_CONTAINS - 836)) | (1L << (ST_CROSSES - 836)) | (1L << (ST_DIFFERENCE - 836)) | (1L << (ST_DIMENSION - 836)) | (1L << (ST_DISJOINT - 836)) | (1L << (ST_DISTANCE - 836)) | (1L << (ST_ENDPOINT - 836)) | (1L << (ST_ENVELOPE - 836)) | (1L << (ST_EQUALS - 836)) | (1L << (ST_EXTERIORRING - 836)) | (1L << (ST_GEOMCOLLFROMTEXT - 836)) | (1L << (ST_GEOMCOLLFROMTXT - 836)) | (1L << (ST_GEOMCOLLFROMWKB - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 836)) | (1L << (ST_GEOMETRYFROMTEXT - 836)) | (1L << (ST_GEOMETRYFROMWKB - 836)) | (1L << (ST_GEOMETRYN - 836)) | (1L << (ST_GEOMETRYTYPE - 836)) | (1L << (ST_GEOMFROMTEXT - 836)) | (1L << (ST_GEOMFROMWKB - 836)) | (1L << (ST_INTERIORRINGN - 836)) | (1L << (ST_INTERSECTION - 836)) | (1L << (ST_INTERSECTS - 836)) | (1L << (ST_ISCLOSED - 836)) | (1L << (ST_ISEMPTY - 836)) | (1L << (ST_ISSIMPLE - 836)) | (1L << (ST_LINEFROMTEXT - 836)))) != 0) || ((((_la - 900)) & ~0x3f) == 0 && ((1L << (_la - 900)) & ((1L << (ST_LINEFROMWKB - 900)) | (1L << (ST_LINESTRINGFROMTEXT - 900)) | (1L << (ST_LINESTRINGFROMWKB - 900)) | (1L << (ST_NUMGEOMETRIES - 900)) | (1L << (ST_NUMINTERIORRING - 900)) | (1L << (ST_NUMINTERIORRINGS - 900)) | (1L << (ST_NUMPOINTS - 900)) | (1L << (ST_OVERLAPS - 900)) | (1L << (ST_POINTFROMTEXT - 900)) | (1L << (ST_POINTFROMWKB - 900)) | (1L << (ST_POINTN - 900)) | (1L << (ST_POLYFROMTEXT - 900)) | (1L << (ST_POLYFROMWKB - 900)) | (1L << (ST_POLYGONFROMTEXT - 900)) | (1L << (ST_POLYGONFROMWKB - 900)) | (1L << (ST_SRID - 900)) | (1L << (ST_STARTPOINT - 900)) | (1L << (ST_SYMDIFFERENCE - 900)) | (1L << (ST_TOUCHES - 900)) | (1L << (ST_UNION - 900)) | (1L << (ST_WITHIN - 900)) | (1L << (ST_X - 900)) | (1L << (ST_Y - 900)) | (1L << (SUBDATE - 900)) | (1L << (SUBSTRING_INDEX - 900)) | (1L << (SUBTIME - 900)) | (1L << (SYSTEM_USER - 900)) | (1L << (TAN - 900)) | (1L << (TIMEDIFF - 900)) | (1L << (TIMESTAMPADD - 900)) | (1L << (TIMESTAMPDIFF - 900)) | (1L << (TIME_FORMAT - 900)) | (1L << (TIME_TO_SEC - 900)) | (1L << (TOUCHES - 900)) | (1L << (TO_BASE64 - 900)) | (1L << (TO_DAYS - 900)) | (1L << (TO_SECONDS - 900)) | (1L << (UCASE - 900)) | (1L << (UNCOMPRESS - 900)) | (1L << (UNCOMPRESSED_LENGTH - 900)) | (1L << (UNHEX - 900)) | (1L << (UNIX_TIMESTAMP - 900)) | (1L << (UPDATEXML - 900)) | (1L << (UPPER - 900)) | (1L << (UUID - 900)) | (1L << (UUID_SHORT - 900)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 900)) | (1L << (VERSION - 900)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 900)) | (1L << (WEEKDAY - 900)) | (1L << (WEEKOFYEAR - 900)) | (1L << (WEIGHT_STRING - 900)) | (1L << (WITHIN - 900)) | (1L << (YEARWEEK - 900)) | (1L << (Y_FUNCTION - 900)) | (1L << (X_FUNCTION - 900)))) != 0) || ((((_la - 994)) & ~0x3f) == 0 && ((1L << (_la - 994)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 994)) | (1L << (STRING_LITERAL - 994)) | (1L << (ID - 994)) | (1L << (REVERSE_QUOTE_ID - 994)))) != 0))
                {
                    {
                        State = 4202; uid();
                        State = 4203; Match(COLON_SYMB);
                    }
                }

                State = 4207; Match(REPEAT);
                State = 4209;
                ErrorHandler.Sync(this);
                _alt = 1;
                do
                {
                    switch (_alt)
                    {
                        case 1:
                            {
                                {
                                    State = 4208; procedureSqlStatement();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    State = 4211;
                    ErrorHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(TokenStream, 604, Context);
                } while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER);
                State = 4213; Match(UNTIL);
                State = 4214; expression(0);
                State = 4215; Match(END);
                State = 4216; Match(REPEAT);
                State = 4218;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)) | (1L << (POSITION - 191)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ACCOUNT - 259)) | (1L << (ACTION - 259)) | (1L << (AFTER - 259)) | (1L << (AGGREGATE - 259)) | (1L << (ALGORITHM - 259)) | (1L << (ANY - 259)) | (1L << (AT - 259)) | (1L << (AUTHORS - 259)) | (1L << (AUTOCOMMIT - 259)) | (1L << (AUTOEXTEND_SIZE - 259)) | (1L << (AUTO_INCREMENT - 259)) | (1L << (AVG_ROW_LENGTH - 259)) | (1L << (BEGIN - 259)) | (1L << (BINLOG - 259)) | (1L << (BIT - 259)) | (1L << (BLOCK - 259)) | (1L << (BOOL - 259)) | (1L << (BOOLEAN - 259)) | (1L << (BTREE - 259)) | (1L << (CACHE - 259)) | (1L << (CASCADED - 259)) | (1L << (CHAIN - 259)) | (1L << (CHANGED - 259)) | (1L << (CHANNEL - 259)) | (1L << (CHECKSUM - 259)) | (1L << (PAGE_CHECKSUM - 259)) | (1L << (CIPHER - 259)) | (1L << (CLASS_ORIGIN - 259)) | (1L << (CLIENT - 259)) | (1L << (CLOSE - 259)) | (1L << (COALESCE - 259)) | (1L << (CODE - 259)) | (1L << (COLUMNS - 259)) | (1L << (COLUMN_FORMAT - 259)) | (1L << (COLUMN_NAME - 259)) | (1L << (COMMENT - 259)) | (1L << (COMMIT - 259)) | (1L << (COMPACT - 259)) | (1L << (COMPLETION - 259)) | (1L << (COMPRESSED - 259)) | (1L << (COMPRESSION - 259)) | (1L << (CONCURRENT - 259)) | (1L << (CONNECTION - 259)) | (1L << (CONSISTENT - 259)) | (1L << (CONSTRAINT_CATALOG - 259)) | (1L << (CONSTRAINT_SCHEMA - 259)) | (1L << (CONSTRAINT_NAME - 259)) | (1L << (CONTAINS - 259)) | (1L << (CONTEXT - 259)) | (1L << (CONTRIBUTORS - 259)) | (1L << (COPY - 259)) | (1L << (CPU - 259)) | (1L << (CURSOR_NAME - 259)) | (1L << (DATA - 259)) | (1L << (DATAFILE - 259)) | (1L << (DEALLOCATE - 259)) | (1L << (DEFAULT_AUTH - 259)) | (1L << (DEFINER - 259)) | (1L << (DELAY_KEY_WRITE - 259)) | (1L << (DES_KEY_FILE - 259)) | (1L << (DIRECTORY - 259)) | (1L << (DISABLE - 259)) | (1L << (DISCARD - 259)) | (1L << (DISK - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (DO - 323)) | (1L << (DUMPFILE - 323)) | (1L << (DUPLICATE - 323)) | (1L << (DYNAMIC - 323)) | (1L << (ENABLE - 323)) | (1L << (ENCRYPTION - 323)) | (1L << (END - 323)) | (1L << (ENDS - 323)) | (1L << (ENGINE - 323)) | (1L << (ENGINES - 323)) | (1L << (ERROR - 323)) | (1L << (ERRORS - 323)) | (1L << (ESCAPE - 323)) | (1L << (EVEN - 323)) | (1L << (EVENT - 323)) | (1L << (EVENTS - 323)) | (1L << (EVERY - 323)) | (1L << (EXCHANGE - 323)) | (1L << (EXCLUSIVE - 323)) | (1L << (EXPIRE - 323)) | (1L << (EXPORT - 323)) | (1L << (EXTENDED - 323)) | (1L << (EXTENT_SIZE - 323)) | (1L << (FAST - 323)) | (1L << (FAULTS - 323)) | (1L << (FIELDS - 323)) | (1L << (FILE_BLOCK_SIZE - 323)) | (1L << (FILTER - 323)) | (1L << (FIRST - 323)) | (1L << (FIXED - 323)) | (1L << (FLUSH - 323)) | (1L << (FOLLOWS - 323)) | (1L << (FOUND - 323)) | (1L << (FULL - 323)) | (1L << (FUNCTION - 323)) | (1L << (GENERAL - 323)) | (1L << (GLOBAL - 323)) | (1L << (GRANTS - 323)) | (1L << (GROUP_REPLICATION - 323)) | (1L << (HANDLER - 323)) | (1L << (HASH - 323)) | (1L << (HELP - 323)) | (1L << (HOST - 323)) | (1L << (HOSTS - 323)) | (1L << (IDENTIFIED - 323)) | (1L << (IGNORE_SERVER_IDS - 323)) | (1L << (IMPORT - 323)) | (1L << (INDEXES - 323)) | (1L << (INITIAL_SIZE - 323)) | (1L << (INPLACE - 323)) | (1L << (INSERT_METHOD - 323)) | (1L << (INSTALL - 323)) | (1L << (INSTANCE - 323)) | (1L << (INVISIBLE - 323)) | (1L << (INVOKER - 323)) | (1L << (IO - 323)) | (1L << (IO_THREAD - 323)) | (1L << (IPC - 323)) | (1L << (ISOLATION - 323)) | (1L << (ISSUER - 323)) | (1L << (JSON - 323)) | (1L << (KEY_BLOCK_SIZE - 323)) | (1L << (LANGUAGE - 323)) | (1L << (LAST - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (LEAVES - 387)) | (1L << (LESS - 387)) | (1L << (LEVEL - 387)) | (1L << (LIST - 387)) | (1L << (LOCAL - 387)) | (1L << (LOGFILE - 387)) | (1L << (LOGS - 387)) | (1L << (MASTER - 387)) | (1L << (MASTER_AUTO_POSITION - 387)) | (1L << (MASTER_CONNECT_RETRY - 387)) | (1L << (MASTER_DELAY - 387)) | (1L << (MASTER_HEARTBEAT_PERIOD - 387)) | (1L << (MASTER_HOST - 387)) | (1L << (MASTER_LOG_FILE - 387)) | (1L << (MASTER_LOG_POS - 387)) | (1L << (MASTER_PASSWORD - 387)) | (1L << (MASTER_PORT - 387)) | (1L << (MASTER_RETRY_COUNT - 387)) | (1L << (MASTER_SSL - 387)) | (1L << (MASTER_SSL_CA - 387)) | (1L << (MASTER_SSL_CAPATH - 387)) | (1L << (MASTER_SSL_CERT - 387)) | (1L << (MASTER_SSL_CIPHER - 387)) | (1L << (MASTER_SSL_CRL - 387)) | (1L << (MASTER_SSL_CRLPATH - 387)) | (1L << (MASTER_SSL_KEY - 387)) | (1L << (MASTER_TLS_VERSION - 387)) | (1L << (MASTER_USER - 387)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 387)) | (1L << (MAX_QUERIES_PER_HOUR - 387)) | (1L << (MAX_ROWS - 387)) | (1L << (MAX_SIZE - 387)) | (1L << (MAX_UPDATES_PER_HOUR - 387)) | (1L << (MAX_USER_CONNECTIONS - 387)) | (1L << (MEDIUM - 387)) | (1L << (MERGE - 387)) | (1L << (MESSAGE_TEXT - 387)) | (1L << (MID - 387)) | (1L << (MIGRATE - 387)) | (1L << (MIN_ROWS - 387)) | (1L << (MODE - 387)) | (1L << (MODIFY - 387)) | (1L << (MUTEX - 387)) | (1L << (MYSQL - 387)) | (1L << (MYSQL_ERRNO - 387)) | (1L << (NAME - 387)) | (1L << (NAMES - 387)) | (1L << (NCHAR - 387)) | (1L << (NEVER - 387)) | (1L << (NEXT - 387)) | (1L << (NO - 387)) | (1L << (NODEGROUP - 387)) | (1L << (NONE - 387)) | (1L << (OFFLINE - 387)) | (1L << (OFFSET - 387)) | (1L << (OJ - 387)) | (1L << (OLD_PASSWORD - 387)) | (1L << (ONE - 387)) | (1L << (ONLINE - 387)) | (1L << (ONLY - 387)) | (1L << (OPEN - 387)) | (1L << (OPTIMIZER_COSTS - 387)) | (1L << (OPTIONS - 387)) | (1L << (OWNER - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PAGE - 451)) | (1L << (PARSER - 451)) | (1L << (PARTIAL - 451)) | (1L << (PARTITIONING - 451)) | (1L << (PARTITIONS - 451)) | (1L << (PASSWORD - 451)) | (1L << (PHASE - 451)) | (1L << (PLUGIN - 451)) | (1L << (PLUGIN_DIR - 451)) | (1L << (PLUGINS - 451)) | (1L << (PORT - 451)) | (1L << (PRECEDES - 451)) | (1L << (PREPARE - 451)) | (1L << (PRESERVE - 451)) | (1L << (PREV - 451)) | (1L << (PROCESSLIST - 451)) | (1L << (PROFILE - 451)) | (1L << (PROFILES - 451)) | (1L << (PROXY - 451)) | (1L << (QUERY - 451)) | (1L << (QUICK - 451)) | (1L << (REBUILD - 451)) | (1L << (RECOVER - 451)) | (1L << (REDO_BUFFER_SIZE - 451)) | (1L << (REDUNDANT - 451)) | (1L << (RELAY - 451)) | (1L << (RELAY_LOG_FILE - 451)) | (1L << (RELAY_LOG_POS - 451)) | (1L << (RELAYLOG - 451)) | (1L << (REMOVE - 451)) | (1L << (REORGANIZE - 451)) | (1L << (REPAIR - 451)) | (1L << (REPLICATE_DO_DB - 451)) | (1L << (REPLICATE_DO_TABLE - 451)) | (1L << (REPLICATE_IGNORE_DB - 451)) | (1L << (REPLICATE_IGNORE_TABLE - 451)) | (1L << (REPLICATE_REWRITE_DB - 451)) | (1L << (REPLICATE_WILD_DO_TABLE - 451)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 451)) | (1L << (REPLICATION - 451)) | (1L << (RESET - 451)) | (1L << (RESUME - 451)) | (1L << (RETURNED_SQLSTATE - 451)) | (1L << (RETURNS - 451)) | (1L << (ROLLBACK - 451)) | (1L << (ROLLUP - 451)) | (1L << (ROTATE - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (ROW_FORMAT - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SCHEDULE - 451)) | (1L << (SECURITY - 451)) | (1L << (SERVER - 451)) | (1L << (SESSION - 451)) | (1L << (SHARE - 451)) | (1L << (SHARED - 451)) | (1L << (SIGNED - 451)) | (1L << (SIMPLE - 451)) | (1L << (SLAVE - 451)) | (1L << (SLOW - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOCKET - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SOME - 515)) | (1L << (SONAME - 515)) | (1L << (SOUNDS - 515)) | (1L << (SOURCE - 515)) | (1L << (SQL_AFTER_GTIDS - 515)) | (1L << (SQL_AFTER_MTS_GAPS - 515)) | (1L << (SQL_BEFORE_GTIDS - 515)) | (1L << (SQL_BUFFER_RESULT - 515)) | (1L << (SQL_CACHE - 515)) | (1L << (SQL_NO_CACHE - 515)) | (1L << (SQL_THREAD - 515)) | (1L << (START - 515)) | (1L << (STARTS - 515)) | (1L << (STATS_AUTO_RECALC - 515)) | (1L << (STATS_PERSISTENT - 515)) | (1L << (STATS_SAMPLE_PAGES - 515)) | (1L << (STATUS - 515)) | (1L << (STOP - 515)) | (1L << (STORAGE - 515)) | (1L << (STRING - 515)) | (1L << (SUBCLASS_ORIGIN - 515)) | (1L << (SUBJECT - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBPARTITIONS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SWAPS - 515)) | (1L << (SWITCHES - 515)) | (1L << (TABLE_NAME - 515)) | (1L << (TABLESPACE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TEMPTABLE - 515)) | (1L << (THAN - 515)) | (1L << (TRADITIONAL - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRIGGERS - 515)) | (1L << (TRUNCATE - 515)) | (1L << (UNDEFINED - 515)) | (1L << (UNDOFILE - 515)) | (1L << (UNDO_BUFFER_SIZE - 515)) | (1L << (UNINSTALL - 515)) | (1L << (UNKNOWN - 515)) | (1L << (UNTIL - 515)) | (1L << (UPGRADE - 515)) | (1L << (USER - 515)) | (1L << (USE_FRM - 515)) | (1L << (USER_RESOURCES - 515)) | (1L << (VALIDATION - 515)) | (1L << (VALUE - 515)) | (1L << (VARIABLES - 515)) | (1L << (VIEW - 515)) | (1L << (VISIBLE - 515)) | (1L << (WAIT - 515)) | (1L << (WARNINGS - 515)) | (1L << (WITHOUT - 515)) | (1L << (WORK - 515)) | (1L << (WRAPPER - 515)) | (1L << (X509 - 515)) | (1L << (XA - 515)) | (1L << (XML - 515)))) != 0) || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (INTERNAL - 580)) | (1L << (QUARTER - 580)) | (1L << (MONTH - 580)) | (1L << (DAY - 580)) | (1L << (HOUR - 580)) | (1L << (MINUTE - 580)) | (1L << (WEEK - 580)) | (1L << (SECOND - 580)) | (1L << (MICROSECOND - 580)) | (1L << (TABLES - 580)) | (1L << (ROUTINE - 580)) | (1L << (EXECUTE - 580)) | (1L << (FILE - 580)) | (1L << (PROCESS - 580)) | (1L << (RELOAD - 580)) | (1L << (SHUTDOWN - 580)) | (1L << (SUPER - 580)) | (1L << (PRIVILEGES - 580)) | (1L << (SESSION_VARIABLES_ADMIN - 580)) | (1L << (ARMSCII8 - 580)) | (1L << (ASCII - 580)) | (1L << (BIG5 - 580)) | (1L << (CP1250 - 580)) | (1L << (CP1251 - 580)) | (1L << (CP1256 - 580)) | (1L << (CP1257 - 580)) | (1L << (CP850 - 580)) | (1L << (CP852 - 580)) | (1L << (CP866 - 580)) | (1L << (CP932 - 580)) | (1L << (DEC8 - 580)) | (1L << (EUCJPMS - 580)) | (1L << (EUCKR - 580)) | (1L << (GB2312 - 580)) | (1L << (GBK - 580)) | (1L << (GEOSTD8 - 580)) | (1L << (GREEK - 580)) | (1L << (HEBREW - 580)) | (1L << (HP8 - 580)) | (1L << (KEYBCS2 - 580)) | (1L << (KOI8R - 580)) | (1L << (KOI8U - 580)) | (1L << (LATIN1 - 580)) | (1L << (LATIN2 - 580)) | (1L << (LATIN5 - 580)) | (1L << (LATIN7 - 580)) | (1L << (MACCE - 580)) | (1L << (MACROMAN - 580)) | (1L << (SJIS - 580)) | (1L << (SWE7 - 580)) | (1L << (TIS620 - 580)) | (1L << (UCS2 - 580)) | (1L << (UJIS - 580)) | (1L << (UTF16 - 580)) | (1L << (UTF16LE - 580)) | (1L << (UTF32 - 580)) | (1L << (UTF8 - 580)) | (1L << (UTF8MB3 - 580)) | (1L << (UTF8MB4 - 580)) | (1L << (ARCHIVE - 580)) | (1L << (BLACKHOLE - 580)) | (1L << (CSV - 580)) | (1L << (FEDERATED - 580)) | (1L << (INNODB - 580)))) != 0) || ((((_la - 644)) & ~0x3f) == 0 && ((1L << (_la - 644)) & ((1L << (MEMORY - 644)) | (1L << (MRG_MYISAM - 644)) | (1L << (MYISAM - 644)) | (1L << (NDB - 644)) | (1L << (NDBCLUSTER - 644)) | (1L << (PERFORMANCE_SCHEMA - 644)) | (1L << (TOKUDB - 644)) | (1L << (REPEATABLE - 644)) | (1L << (COMMITTED - 644)) | (1L << (UNCOMMITTED - 644)) | (1L << (SERIALIZABLE - 644)) | (1L << (GEOMETRYCOLLECTION - 644)) | (1L << (LINESTRING - 644)) | (1L << (MULTILINESTRING - 644)) | (1L << (MULTIPOINT - 644)) | (1L << (MULTIPOLYGON - 644)) | (1L << (POINT - 644)) | (1L << (POLYGON - 644)) | (1L << (ABS - 644)) | (1L << (ACOS - 644)) | (1L << (ADDDATE - 644)) | (1L << (ADDTIME - 644)) | (1L << (AES_DECRYPT - 644)) | (1L << (AES_ENCRYPT - 644)) | (1L << (AREA - 644)) | (1L << (ASBINARY - 644)) | (1L << (ASIN - 644)) | (1L << (ASTEXT - 644)) | (1L << (ASWKB - 644)) | (1L << (ASWKT - 644)) | (1L << (ASYMMETRIC_DECRYPT - 644)) | (1L << (ASYMMETRIC_DERIVE - 644)) | (1L << (ASYMMETRIC_ENCRYPT - 644)) | (1L << (ASYMMETRIC_SIGN - 644)) | (1L << (ASYMMETRIC_VERIFY - 644)) | (1L << (ATAN - 644)) | (1L << (ATAN2 - 644)) | (1L << (BENCHMARK - 644)) | (1L << (BIN - 644)) | (1L << (BIT_COUNT - 644)) | (1L << (BIT_LENGTH - 644)) | (1L << (BUFFER - 644)) | (1L << (CATALOG_NAME - 644)) | (1L << (CEIL - 644)) | (1L << (CEILING - 644)) | (1L << (CENTROID - 644)) | (1L << (CHARACTER_LENGTH - 644)) | (1L << (CHARSET - 644)) | (1L << (CHAR_LENGTH - 644)) | (1L << (COERCIBILITY - 644)) | (1L << (COLLATION - 644)) | (1L << (COMPRESS - 644)) | (1L << (CONCAT - 644)) | (1L << (CONCAT_WS - 644)) | (1L << (CONNECTION_ID - 644)) | (1L << (CONV - 644)) | (1L << (CONVERT_TZ - 644)) | (1L << (COS - 644)) | (1L << (COT - 644)) | (1L << (CRC32 - 644)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 644)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 644)))) != 0) || ((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (CREATE_DH_PARAMETERS - 708)) | (1L << (CREATE_DIGEST - 708)) | (1L << (CROSSES - 708)) | (1L << (DATEDIFF - 708)) | (1L << (DATE_FORMAT - 708)) | (1L << (DAYNAME - 708)) | (1L << (DAYOFMONTH - 708)) | (1L << (DAYOFWEEK - 708)) | (1L << (DAYOFYEAR - 708)) | (1L << (DECODE - 708)) | (1L << (DEGREES - 708)) | (1L << (DES_DECRYPT - 708)) | (1L << (DES_ENCRYPT - 708)) | (1L << (DIMENSION - 708)) | (1L << (DISJOINT - 708)) | (1L << (ELT - 708)) | (1L << (ENCODE - 708)) | (1L << (ENCRYPT - 708)) | (1L << (ENDPOINT - 708)) | (1L << (ENVELOPE - 708)) | (1L << (EQUALS - 708)) | (1L << (EXP - 708)) | (1L << (EXPORT_SET - 708)) | (1L << (EXTERIORRING - 708)) | (1L << (EXTRACTVALUE - 708)) | (1L << (FIELD - 708)) | (1L << (FIND_IN_SET - 708)) | (1L << (FLOOR - 708)) | (1L << (FORMAT - 708)) | (1L << (FOUND_ROWS - 708)) | (1L << (FROM_BASE64 - 708)) | (1L << (FROM_DAYS - 708)) | (1L << (FROM_UNIXTIME - 708)) | (1L << (GEOMCOLLFROMTEXT - 708)) | (1L << (GEOMCOLLFROMWKB - 708)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 708)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 708)) | (1L << (GEOMETRYFROMTEXT - 708)) | (1L << (GEOMETRYFROMWKB - 708)) | (1L << (GEOMETRYN - 708)) | (1L << (GEOMETRYTYPE - 708)) | (1L << (GEOMFROMTEXT - 708)) | (1L << (GEOMFROMWKB - 708)) | (1L << (GET_FORMAT - 708)) | (1L << (GET_LOCK - 708)) | (1L << (GLENGTH - 708)) | (1L << (GREATEST - 708)) | (1L << (GTID_SUBSET - 708)) | (1L << (GTID_SUBTRACT - 708)) | (1L << (HEX - 708)) | (1L << (IFNULL - 708)) | (1L << (INET6_ATON - 708)) | (1L << (INET6_NTOA - 708)) | (1L << (INET_ATON - 708)) | (1L << (INET_NTOA - 708)) | (1L << (INSTR - 708)) | (1L << (INTERIORRINGN - 708)) | (1L << (INTERSECTS - 708)) | (1L << (ISCLOSED - 708)) | (1L << (ISEMPTY - 708)) | (1L << (ISNULL - 708)) | (1L << (ISSIMPLE - 708)) | (1L << (IS_FREE_LOCK - 708)) | (1L << (IS_IPV4 - 708)))) != 0) || ((((_la - 772)) & ~0x3f) == 0 && ((1L << (_la - 772)) & ((1L << (IS_IPV4_COMPAT - 772)) | (1L << (IS_IPV4_MAPPED - 772)) | (1L << (IS_IPV6 - 772)) | (1L << (IS_USED_LOCK - 772)) | (1L << (LAST_INSERT_ID - 772)) | (1L << (LCASE - 772)) | (1L << (LEAST - 772)) | (1L << (LENGTH - 772)) | (1L << (LINEFROMTEXT - 772)) | (1L << (LINEFROMWKB - 772)) | (1L << (LINESTRINGFROMTEXT - 772)) | (1L << (LINESTRINGFROMWKB - 772)) | (1L << (LN - 772)) | (1L << (LOAD_FILE - 772)) | (1L << (LOCATE - 772)) | (1L << (LOG - 772)) | (1L << (LOG10 - 772)) | (1L << (LOG2 - 772)) | (1L << (LOWER - 772)) | (1L << (LPAD - 772)) | (1L << (LTRIM - 772)) | (1L << (MAKEDATE - 772)) | (1L << (MAKETIME - 772)) | (1L << (MAKE_SET - 772)) | (1L << (MASTER_POS_WAIT - 772)) | (1L << (MBRCONTAINS - 772)) | (1L << (MBRDISJOINT - 772)) | (1L << (MBREQUAL - 772)) | (1L << (MBRINTERSECTS - 772)) | (1L << (MBROVERLAPS - 772)) | (1L << (MBRTOUCHES - 772)) | (1L << (MBRWITHIN - 772)) | (1L << (MD5 - 772)) | (1L << (MLINEFROMTEXT - 772)) | (1L << (MLINEFROMWKB - 772)) | (1L << (MONTHNAME - 772)) | (1L << (MPOINTFROMTEXT - 772)) | (1L << (MPOINTFROMWKB - 772)) | (1L << (MPOLYFROMTEXT - 772)) | (1L << (MPOLYFROMWKB - 772)) | (1L << (MULTILINESTRINGFROMTEXT - 772)) | (1L << (MULTILINESTRINGFROMWKB - 772)) | (1L << (MULTIPOINTFROMTEXT - 772)) | (1L << (MULTIPOINTFROMWKB - 772)) | (1L << (MULTIPOLYGONFROMTEXT - 772)) | (1L << (MULTIPOLYGONFROMWKB - 772)) | (1L << (NAME_CONST - 772)) | (1L << (NULLIF - 772)) | (1L << (NUMGEOMETRIES - 772)) | (1L << (NUMINTERIORRINGS - 772)) | (1L << (NUMPOINTS - 772)) | (1L << (OCT - 772)) | (1L << (OCTET_LENGTH - 772)) | (1L << (ORD - 772)) | (1L << (OVERLAPS - 772)) | (1L << (PERIOD_ADD - 772)) | (1L << (PERIOD_DIFF - 772)) | (1L << (PI - 772)) | (1L << (POINTFROMTEXT - 772)) | (1L << (POINTFROMWKB - 772)) | (1L << (POINTN - 772)) | (1L << (POLYFROMTEXT - 772)) | (1L << (POLYFROMWKB - 772)) | (1L << (POLYGONFROMTEXT - 772)))) != 0) || ((((_la - 836)) & ~0x3f) == 0 && ((1L << (_la - 836)) & ((1L << (POLYGONFROMWKB - 836)) | (1L << (POW - 836)) | (1L << (POWER - 836)) | (1L << (QUOTE - 836)) | (1L << (RADIANS - 836)) | (1L << (RAND - 836)) | (1L << (RANDOM_BYTES - 836)) | (1L << (RELEASE_LOCK - 836)) | (1L << (REVERSE - 836)) | (1L << (ROUND - 836)) | (1L << (ROW_COUNT - 836)) | (1L << (RPAD - 836)) | (1L << (RTRIM - 836)) | (1L << (SEC_TO_TIME - 836)) | (1L << (SESSION_USER - 836)) | (1L << (SHA - 836)) | (1L << (SHA1 - 836)) | (1L << (SHA2 - 836)) | (1L << (SCHEMA_NAME - 836)) | (1L << (SIGN - 836)) | (1L << (SIN - 836)) | (1L << (SLEEP - 836)) | (1L << (SOUNDEX - 836)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 836)) | (1L << (SQRT - 836)) | (1L << (SRID - 836)) | (1L << (STARTPOINT - 836)) | (1L << (STRCMP - 836)) | (1L << (STR_TO_DATE - 836)) | (1L << (ST_AREA - 836)) | (1L << (ST_ASBINARY - 836)) | (1L << (ST_ASTEXT - 836)) | (1L << (ST_ASWKB - 836)) | (1L << (ST_ASWKT - 836)) | (1L << (ST_BUFFER - 836)) | (1L << (ST_CENTROID - 836)) | (1L << (ST_CONTAINS - 836)) | (1L << (ST_CROSSES - 836)) | (1L << (ST_DIFFERENCE - 836)) | (1L << (ST_DIMENSION - 836)) | (1L << (ST_DISJOINT - 836)) | (1L << (ST_DISTANCE - 836)) | (1L << (ST_ENDPOINT - 836)) | (1L << (ST_ENVELOPE - 836)) | (1L << (ST_EQUALS - 836)) | (1L << (ST_EXTERIORRING - 836)) | (1L << (ST_GEOMCOLLFROMTEXT - 836)) | (1L << (ST_GEOMCOLLFROMTXT - 836)) | (1L << (ST_GEOMCOLLFROMWKB - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 836)) | (1L << (ST_GEOMETRYFROMTEXT - 836)) | (1L << (ST_GEOMETRYFROMWKB - 836)) | (1L << (ST_GEOMETRYN - 836)) | (1L << (ST_GEOMETRYTYPE - 836)) | (1L << (ST_GEOMFROMTEXT - 836)) | (1L << (ST_GEOMFROMWKB - 836)) | (1L << (ST_INTERIORRINGN - 836)) | (1L << (ST_INTERSECTION - 836)) | (1L << (ST_INTERSECTS - 836)) | (1L << (ST_ISCLOSED - 836)) | (1L << (ST_ISEMPTY - 836)) | (1L << (ST_ISSIMPLE - 836)) | (1L << (ST_LINEFROMTEXT - 836)))) != 0) || ((((_la - 900)) & ~0x3f) == 0 && ((1L << (_la - 900)) & ((1L << (ST_LINEFROMWKB - 900)) | (1L << (ST_LINESTRINGFROMTEXT - 900)) | (1L << (ST_LINESTRINGFROMWKB - 900)) | (1L << (ST_NUMGEOMETRIES - 900)) | (1L << (ST_NUMINTERIORRING - 900)) | (1L << (ST_NUMINTERIORRINGS - 900)) | (1L << (ST_NUMPOINTS - 900)) | (1L << (ST_OVERLAPS - 900)) | (1L << (ST_POINTFROMTEXT - 900)) | (1L << (ST_POINTFROMWKB - 900)) | (1L << (ST_POINTN - 900)) | (1L << (ST_POLYFROMTEXT - 900)) | (1L << (ST_POLYFROMWKB - 900)) | (1L << (ST_POLYGONFROMTEXT - 900)) | (1L << (ST_POLYGONFROMWKB - 900)) | (1L << (ST_SRID - 900)) | (1L << (ST_STARTPOINT - 900)) | (1L << (ST_SYMDIFFERENCE - 900)) | (1L << (ST_TOUCHES - 900)) | (1L << (ST_UNION - 900)) | (1L << (ST_WITHIN - 900)) | (1L << (ST_X - 900)) | (1L << (ST_Y - 900)) | (1L << (SUBDATE - 900)) | (1L << (SUBSTRING_INDEX - 900)) | (1L << (SUBTIME - 900)) | (1L << (SYSTEM_USER - 900)) | (1L << (TAN - 900)) | (1L << (TIMEDIFF - 900)) | (1L << (TIMESTAMPADD - 900)) | (1L << (TIMESTAMPDIFF - 900)) | (1L << (TIME_FORMAT - 900)) | (1L << (TIME_TO_SEC - 900)) | (1L << (TOUCHES - 900)) | (1L << (TO_BASE64 - 900)) | (1L << (TO_DAYS - 900)) | (1L << (TO_SECONDS - 900)) | (1L << (UCASE - 900)) | (1L << (UNCOMPRESS - 900)) | (1L << (UNCOMPRESSED_LENGTH - 900)) | (1L << (UNHEX - 900)) | (1L << (UNIX_TIMESTAMP - 900)) | (1L << (UPDATEXML - 900)) | (1L << (UPPER - 900)) | (1L << (UUID - 900)) | (1L << (UUID_SHORT - 900)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 900)) | (1L << (VERSION - 900)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 900)) | (1L << (WEEKDAY - 900)) | (1L << (WEEKOFYEAR - 900)) | (1L << (WEIGHT_STRING - 900)) | (1L << (WITHIN - 900)) | (1L << (YEARWEEK - 900)) | (1L << (Y_FUNCTION - 900)) | (1L << (X_FUNCTION - 900)))) != 0) || ((((_la - 994)) & ~0x3f) == 0 && ((1L << (_la - 994)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 994)) | (1L << (STRING_LITERAL - 994)) | (1L << (ID - 994)) | (1L << (REVERSE_QUOTE_ID - 994)))) != 0))
                {
                    {
                        State = 4217; uid();
                    }
                }

            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ReturnStatementContext : ParserRuleContext
    {
        public ITerminalNode RETURN() { return GetToken(MySqlParser.RETURN, 0); }
        public ExpressionContext expression()
        {
            return GetRuleContext<ExpressionContext>(0);
        }
        public ReturnStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_returnStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterReturnStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitReturnStatement(this);
        }
    }

    [RuleVersion(0)]
    public ReturnStatementContext returnStatement()
    {
        ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
        EnterRule(_localctx, 360, RULE_returnStatement);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 4220; Match(RETURN);
                State = 4221; expression(0);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class WhileStatementContext : ParserRuleContext
    {
        public ITerminalNode[] WHILE() { return GetTokens(MySqlParser.WHILE); }
        public ITerminalNode WHILE(int i)
        {
            return GetToken(MySqlParser.WHILE, i);
        }
        public ExpressionContext expression()
        {
            return GetRuleContext<ExpressionContext>(0);
        }
        public ITerminalNode DO() { return GetToken(MySqlParser.DO, 0); }
        public ITerminalNode END() { return GetToken(MySqlParser.END, 0); }
        public UidContext[] uid()
        {
            return GetRuleContexts<UidContext>();
        }
        public UidContext uid(int i)
        {
            return GetRuleContext<UidContext>(i);
        }
        public ITerminalNode COLON_SYMB() { return GetToken(MySqlParser.COLON_SYMB, 0); }
        public ProcedureSqlStatementContext[] procedureSqlStatement()
        {
            return GetRuleContexts<ProcedureSqlStatementContext>();
        }
        public ProcedureSqlStatementContext procedureSqlStatement(int i)
        {
            return GetRuleContext<ProcedureSqlStatementContext>(i);
        }
        public WhileStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_whileStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterWhileStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitWhileStatement(this);
        }
    }

    [RuleVersion(0)]
    public WhileStatementContext whileStatement()
    {
        WhileStatementContext _localctx = new WhileStatementContext(Context, State);
        EnterRule(_localctx, 362, RULE_whileStatement);
        int _la;
        try
        {
            int _alt;
            EnterOuterAlt(_localctx, 1);
            {
                State = 4226;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)) | (1L << (POSITION - 191)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ACCOUNT - 259)) | (1L << (ACTION - 259)) | (1L << (AFTER - 259)) | (1L << (AGGREGATE - 259)) | (1L << (ALGORITHM - 259)) | (1L << (ANY - 259)) | (1L << (AT - 259)) | (1L << (AUTHORS - 259)) | (1L << (AUTOCOMMIT - 259)) | (1L << (AUTOEXTEND_SIZE - 259)) | (1L << (AUTO_INCREMENT - 259)) | (1L << (AVG_ROW_LENGTH - 259)) | (1L << (BEGIN - 259)) | (1L << (BINLOG - 259)) | (1L << (BIT - 259)) | (1L << (BLOCK - 259)) | (1L << (BOOL - 259)) | (1L << (BOOLEAN - 259)) | (1L << (BTREE - 259)) | (1L << (CACHE - 259)) | (1L << (CASCADED - 259)) | (1L << (CHAIN - 259)) | (1L << (CHANGED - 259)) | (1L << (CHANNEL - 259)) | (1L << (CHECKSUM - 259)) | (1L << (PAGE_CHECKSUM - 259)) | (1L << (CIPHER - 259)) | (1L << (CLASS_ORIGIN - 259)) | (1L << (CLIENT - 259)) | (1L << (CLOSE - 259)) | (1L << (COALESCE - 259)) | (1L << (CODE - 259)) | (1L << (COLUMNS - 259)) | (1L << (COLUMN_FORMAT - 259)) | (1L << (COLUMN_NAME - 259)) | (1L << (COMMENT - 259)) | (1L << (COMMIT - 259)) | (1L << (COMPACT - 259)) | (1L << (COMPLETION - 259)) | (1L << (COMPRESSED - 259)) | (1L << (COMPRESSION - 259)) | (1L << (CONCURRENT - 259)) | (1L << (CONNECTION - 259)) | (1L << (CONSISTENT - 259)) | (1L << (CONSTRAINT_CATALOG - 259)) | (1L << (CONSTRAINT_SCHEMA - 259)) | (1L << (CONSTRAINT_NAME - 259)) | (1L << (CONTAINS - 259)) | (1L << (CONTEXT - 259)) | (1L << (CONTRIBUTORS - 259)) | (1L << (COPY - 259)) | (1L << (CPU - 259)) | (1L << (CURSOR_NAME - 259)) | (1L << (DATA - 259)) | (1L << (DATAFILE - 259)) | (1L << (DEALLOCATE - 259)) | (1L << (DEFAULT_AUTH - 259)) | (1L << (DEFINER - 259)) | (1L << (DELAY_KEY_WRITE - 259)) | (1L << (DES_KEY_FILE - 259)) | (1L << (DIRECTORY - 259)) | (1L << (DISABLE - 259)) | (1L << (DISCARD - 259)) | (1L << (DISK - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (DO - 323)) | (1L << (DUMPFILE - 323)) | (1L << (DUPLICATE - 323)) | (1L << (DYNAMIC - 323)) | (1L << (ENABLE - 323)) | (1L << (ENCRYPTION - 323)) | (1L << (END - 323)) | (1L << (ENDS - 323)) | (1L << (ENGINE - 323)) | (1L << (ENGINES - 323)) | (1L << (ERROR - 323)) | (1L << (ERRORS - 323)) | (1L << (ESCAPE - 323)) | (1L << (EVEN - 323)) | (1L << (EVENT - 323)) | (1L << (EVENTS - 323)) | (1L << (EVERY - 323)) | (1L << (EXCHANGE - 323)) | (1L << (EXCLUSIVE - 323)) | (1L << (EXPIRE - 323)) | (1L << (EXPORT - 323)) | (1L << (EXTENDED - 323)) | (1L << (EXTENT_SIZE - 323)) | (1L << (FAST - 323)) | (1L << (FAULTS - 323)) | (1L << (FIELDS - 323)) | (1L << (FILE_BLOCK_SIZE - 323)) | (1L << (FILTER - 323)) | (1L << (FIRST - 323)) | (1L << (FIXED - 323)) | (1L << (FLUSH - 323)) | (1L << (FOLLOWS - 323)) | (1L << (FOUND - 323)) | (1L << (FULL - 323)) | (1L << (FUNCTION - 323)) | (1L << (GENERAL - 323)) | (1L << (GLOBAL - 323)) | (1L << (GRANTS - 323)) | (1L << (GROUP_REPLICATION - 323)) | (1L << (HANDLER - 323)) | (1L << (HASH - 323)) | (1L << (HELP - 323)) | (1L << (HOST - 323)) | (1L << (HOSTS - 323)) | (1L << (IDENTIFIED - 323)) | (1L << (IGNORE_SERVER_IDS - 323)) | (1L << (IMPORT - 323)) | (1L << (INDEXES - 323)) | (1L << (INITIAL_SIZE - 323)) | (1L << (INPLACE - 323)) | (1L << (INSERT_METHOD - 323)) | (1L << (INSTALL - 323)) | (1L << (INSTANCE - 323)) | (1L << (INVISIBLE - 323)) | (1L << (INVOKER - 323)) | (1L << (IO - 323)) | (1L << (IO_THREAD - 323)) | (1L << (IPC - 323)) | (1L << (ISOLATION - 323)) | (1L << (ISSUER - 323)) | (1L << (JSON - 323)) | (1L << (KEY_BLOCK_SIZE - 323)) | (1L << (LANGUAGE - 323)) | (1L << (LAST - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (LEAVES - 387)) | (1L << (LESS - 387)) | (1L << (LEVEL - 387)) | (1L << (LIST - 387)) | (1L << (LOCAL - 387)) | (1L << (LOGFILE - 387)) | (1L << (LOGS - 387)) | (1L << (MASTER - 387)) | (1L << (MASTER_AUTO_POSITION - 387)) | (1L << (MASTER_CONNECT_RETRY - 387)) | (1L << (MASTER_DELAY - 387)) | (1L << (MASTER_HEARTBEAT_PERIOD - 387)) | (1L << (MASTER_HOST - 387)) | (1L << (MASTER_LOG_FILE - 387)) | (1L << (MASTER_LOG_POS - 387)) | (1L << (MASTER_PASSWORD - 387)) | (1L << (MASTER_PORT - 387)) | (1L << (MASTER_RETRY_COUNT - 387)) | (1L << (MASTER_SSL - 387)) | (1L << (MASTER_SSL_CA - 387)) | (1L << (MASTER_SSL_CAPATH - 387)) | (1L << (MASTER_SSL_CERT - 387)) | (1L << (MASTER_SSL_CIPHER - 387)) | (1L << (MASTER_SSL_CRL - 387)) | (1L << (MASTER_SSL_CRLPATH - 387)) | (1L << (MASTER_SSL_KEY - 387)) | (1L << (MASTER_TLS_VERSION - 387)) | (1L << (MASTER_USER - 387)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 387)) | (1L << (MAX_QUERIES_PER_HOUR - 387)) | (1L << (MAX_ROWS - 387)) | (1L << (MAX_SIZE - 387)) | (1L << (MAX_UPDATES_PER_HOUR - 387)) | (1L << (MAX_USER_CONNECTIONS - 387)) | (1L << (MEDIUM - 387)) | (1L << (MERGE - 387)) | (1L << (MESSAGE_TEXT - 387)) | (1L << (MID - 387)) | (1L << (MIGRATE - 387)) | (1L << (MIN_ROWS - 387)) | (1L << (MODE - 387)) | (1L << (MODIFY - 387)) | (1L << (MUTEX - 387)) | (1L << (MYSQL - 387)) | (1L << (MYSQL_ERRNO - 387)) | (1L << (NAME - 387)) | (1L << (NAMES - 387)) | (1L << (NCHAR - 387)) | (1L << (NEVER - 387)) | (1L << (NEXT - 387)) | (1L << (NO - 387)) | (1L << (NODEGROUP - 387)) | (1L << (NONE - 387)) | (1L << (OFFLINE - 387)) | (1L << (OFFSET - 387)) | (1L << (OJ - 387)) | (1L << (OLD_PASSWORD - 387)) | (1L << (ONE - 387)) | (1L << (ONLINE - 387)) | (1L << (ONLY - 387)) | (1L << (OPEN - 387)) | (1L << (OPTIMIZER_COSTS - 387)) | (1L << (OPTIONS - 387)) | (1L << (OWNER - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PAGE - 451)) | (1L << (PARSER - 451)) | (1L << (PARTIAL - 451)) | (1L << (PARTITIONING - 451)) | (1L << (PARTITIONS - 451)) | (1L << (PASSWORD - 451)) | (1L << (PHASE - 451)) | (1L << (PLUGIN - 451)) | (1L << (PLUGIN_DIR - 451)) | (1L << (PLUGINS - 451)) | (1L << (PORT - 451)) | (1L << (PRECEDES - 451)) | (1L << (PREPARE - 451)) | (1L << (PRESERVE - 451)) | (1L << (PREV - 451)) | (1L << (PROCESSLIST - 451)) | (1L << (PROFILE - 451)) | (1L << (PROFILES - 451)) | (1L << (PROXY - 451)) | (1L << (QUERY - 451)) | (1L << (QUICK - 451)) | (1L << (REBUILD - 451)) | (1L << (RECOVER - 451)) | (1L << (REDO_BUFFER_SIZE - 451)) | (1L << (REDUNDANT - 451)) | (1L << (RELAY - 451)) | (1L << (RELAY_LOG_FILE - 451)) | (1L << (RELAY_LOG_POS - 451)) | (1L << (RELAYLOG - 451)) | (1L << (REMOVE - 451)) | (1L << (REORGANIZE - 451)) | (1L << (REPAIR - 451)) | (1L << (REPLICATE_DO_DB - 451)) | (1L << (REPLICATE_DO_TABLE - 451)) | (1L << (REPLICATE_IGNORE_DB - 451)) | (1L << (REPLICATE_IGNORE_TABLE - 451)) | (1L << (REPLICATE_REWRITE_DB - 451)) | (1L << (REPLICATE_WILD_DO_TABLE - 451)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 451)) | (1L << (REPLICATION - 451)) | (1L << (RESET - 451)) | (1L << (RESUME - 451)) | (1L << (RETURNED_SQLSTATE - 451)) | (1L << (RETURNS - 451)) | (1L << (ROLLBACK - 451)) | (1L << (ROLLUP - 451)) | (1L << (ROTATE - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (ROW_FORMAT - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SCHEDULE - 451)) | (1L << (SECURITY - 451)) | (1L << (SERVER - 451)) | (1L << (SESSION - 451)) | (1L << (SHARE - 451)) | (1L << (SHARED - 451)) | (1L << (SIGNED - 451)) | (1L << (SIMPLE - 451)) | (1L << (SLAVE - 451)) | (1L << (SLOW - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOCKET - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SOME - 515)) | (1L << (SONAME - 515)) | (1L << (SOUNDS - 515)) | (1L << (SOURCE - 515)) | (1L << (SQL_AFTER_GTIDS - 515)) | (1L << (SQL_AFTER_MTS_GAPS - 515)) | (1L << (SQL_BEFORE_GTIDS - 515)) | (1L << (SQL_BUFFER_RESULT - 515)) | (1L << (SQL_CACHE - 515)) | (1L << (SQL_NO_CACHE - 515)) | (1L << (SQL_THREAD - 515)) | (1L << (START - 515)) | (1L << (STARTS - 515)) | (1L << (STATS_AUTO_RECALC - 515)) | (1L << (STATS_PERSISTENT - 515)) | (1L << (STATS_SAMPLE_PAGES - 515)) | (1L << (STATUS - 515)) | (1L << (STOP - 515)) | (1L << (STORAGE - 515)) | (1L << (STRING - 515)) | (1L << (SUBCLASS_ORIGIN - 515)) | (1L << (SUBJECT - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBPARTITIONS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SWAPS - 515)) | (1L << (SWITCHES - 515)) | (1L << (TABLE_NAME - 515)) | (1L << (TABLESPACE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TEMPTABLE - 515)) | (1L << (THAN - 515)) | (1L << (TRADITIONAL - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRIGGERS - 515)) | (1L << (TRUNCATE - 515)) | (1L << (UNDEFINED - 515)) | (1L << (UNDOFILE - 515)) | (1L << (UNDO_BUFFER_SIZE - 515)) | (1L << (UNINSTALL - 515)) | (1L << (UNKNOWN - 515)) | (1L << (UNTIL - 515)) | (1L << (UPGRADE - 515)) | (1L << (USER - 515)) | (1L << (USE_FRM - 515)) | (1L << (USER_RESOURCES - 515)) | (1L << (VALIDATION - 515)) | (1L << (VALUE - 515)) | (1L << (VARIABLES - 515)) | (1L << (VIEW - 515)) | (1L << (VISIBLE - 515)) | (1L << (WAIT - 515)) | (1L << (WARNINGS - 515)) | (1L << (WITHOUT - 515)) | (1L << (WORK - 515)) | (1L << (WRAPPER - 515)) | (1L << (X509 - 515)) | (1L << (XA - 515)) | (1L << (XML - 515)))) != 0) || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (INTERNAL - 580)) | (1L << (QUARTER - 580)) | (1L << (MONTH - 580)) | (1L << (DAY - 580)) | (1L << (HOUR - 580)) | (1L << (MINUTE - 580)) | (1L << (WEEK - 580)) | (1L << (SECOND - 580)) | (1L << (MICROSECOND - 580)) | (1L << (TABLES - 580)) | (1L << (ROUTINE - 580)) | (1L << (EXECUTE - 580)) | (1L << (FILE - 580)) | (1L << (PROCESS - 580)) | (1L << (RELOAD - 580)) | (1L << (SHUTDOWN - 580)) | (1L << (SUPER - 580)) | (1L << (PRIVILEGES - 580)) | (1L << (SESSION_VARIABLES_ADMIN - 580)) | (1L << (ARMSCII8 - 580)) | (1L << (ASCII - 580)) | (1L << (BIG5 - 580)) | (1L << (CP1250 - 580)) | (1L << (CP1251 - 580)) | (1L << (CP1256 - 580)) | (1L << (CP1257 - 580)) | (1L << (CP850 - 580)) | (1L << (CP852 - 580)) | (1L << (CP866 - 580)) | (1L << (CP932 - 580)) | (1L << (DEC8 - 580)) | (1L << (EUCJPMS - 580)) | (1L << (EUCKR - 580)) | (1L << (GB2312 - 580)) | (1L << (GBK - 580)) | (1L << (GEOSTD8 - 580)) | (1L << (GREEK - 580)) | (1L << (HEBREW - 580)) | (1L << (HP8 - 580)) | (1L << (KEYBCS2 - 580)) | (1L << (KOI8R - 580)) | (1L << (KOI8U - 580)) | (1L << (LATIN1 - 580)) | (1L << (LATIN2 - 580)) | (1L << (LATIN5 - 580)) | (1L << (LATIN7 - 580)) | (1L << (MACCE - 580)) | (1L << (MACROMAN - 580)) | (1L << (SJIS - 580)) | (1L << (SWE7 - 580)) | (1L << (TIS620 - 580)) | (1L << (UCS2 - 580)) | (1L << (UJIS - 580)) | (1L << (UTF16 - 580)) | (1L << (UTF16LE - 580)) | (1L << (UTF32 - 580)) | (1L << (UTF8 - 580)) | (1L << (UTF8MB3 - 580)) | (1L << (UTF8MB4 - 580)) | (1L << (ARCHIVE - 580)) | (1L << (BLACKHOLE - 580)) | (1L << (CSV - 580)) | (1L << (FEDERATED - 580)) | (1L << (INNODB - 580)))) != 0) || ((((_la - 644)) & ~0x3f) == 0 && ((1L << (_la - 644)) & ((1L << (MEMORY - 644)) | (1L << (MRG_MYISAM - 644)) | (1L << (MYISAM - 644)) | (1L << (NDB - 644)) | (1L << (NDBCLUSTER - 644)) | (1L << (PERFORMANCE_SCHEMA - 644)) | (1L << (TOKUDB - 644)) | (1L << (REPEATABLE - 644)) | (1L << (COMMITTED - 644)) | (1L << (UNCOMMITTED - 644)) | (1L << (SERIALIZABLE - 644)) | (1L << (GEOMETRYCOLLECTION - 644)) | (1L << (LINESTRING - 644)) | (1L << (MULTILINESTRING - 644)) | (1L << (MULTIPOINT - 644)) | (1L << (MULTIPOLYGON - 644)) | (1L << (POINT - 644)) | (1L << (POLYGON - 644)) | (1L << (ABS - 644)) | (1L << (ACOS - 644)) | (1L << (ADDDATE - 644)) | (1L << (ADDTIME - 644)) | (1L << (AES_DECRYPT - 644)) | (1L << (AES_ENCRYPT - 644)) | (1L << (AREA - 644)) | (1L << (ASBINARY - 644)) | (1L << (ASIN - 644)) | (1L << (ASTEXT - 644)) | (1L << (ASWKB - 644)) | (1L << (ASWKT - 644)) | (1L << (ASYMMETRIC_DECRYPT - 644)) | (1L << (ASYMMETRIC_DERIVE - 644)) | (1L << (ASYMMETRIC_ENCRYPT - 644)) | (1L << (ASYMMETRIC_SIGN - 644)) | (1L << (ASYMMETRIC_VERIFY - 644)) | (1L << (ATAN - 644)) | (1L << (ATAN2 - 644)) | (1L << (BENCHMARK - 644)) | (1L << (BIN - 644)) | (1L << (BIT_COUNT - 644)) | (1L << (BIT_LENGTH - 644)) | (1L << (BUFFER - 644)) | (1L << (CATALOG_NAME - 644)) | (1L << (CEIL - 644)) | (1L << (CEILING - 644)) | (1L << (CENTROID - 644)) | (1L << (CHARACTER_LENGTH - 644)) | (1L << (CHARSET - 644)) | (1L << (CHAR_LENGTH - 644)) | (1L << (COERCIBILITY - 644)) | (1L << (COLLATION - 644)) | (1L << (COMPRESS - 644)) | (1L << (CONCAT - 644)) | (1L << (CONCAT_WS - 644)) | (1L << (CONNECTION_ID - 644)) | (1L << (CONV - 644)) | (1L << (CONVERT_TZ - 644)) | (1L << (COS - 644)) | (1L << (COT - 644)) | (1L << (CRC32 - 644)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 644)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 644)))) != 0) || ((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (CREATE_DH_PARAMETERS - 708)) | (1L << (CREATE_DIGEST - 708)) | (1L << (CROSSES - 708)) | (1L << (DATEDIFF - 708)) | (1L << (DATE_FORMAT - 708)) | (1L << (DAYNAME - 708)) | (1L << (DAYOFMONTH - 708)) | (1L << (DAYOFWEEK - 708)) | (1L << (DAYOFYEAR - 708)) | (1L << (DECODE - 708)) | (1L << (DEGREES - 708)) | (1L << (DES_DECRYPT - 708)) | (1L << (DES_ENCRYPT - 708)) | (1L << (DIMENSION - 708)) | (1L << (DISJOINT - 708)) | (1L << (ELT - 708)) | (1L << (ENCODE - 708)) | (1L << (ENCRYPT - 708)) | (1L << (ENDPOINT - 708)) | (1L << (ENVELOPE - 708)) | (1L << (EQUALS - 708)) | (1L << (EXP - 708)) | (1L << (EXPORT_SET - 708)) | (1L << (EXTERIORRING - 708)) | (1L << (EXTRACTVALUE - 708)) | (1L << (FIELD - 708)) | (1L << (FIND_IN_SET - 708)) | (1L << (FLOOR - 708)) | (1L << (FORMAT - 708)) | (1L << (FOUND_ROWS - 708)) | (1L << (FROM_BASE64 - 708)) | (1L << (FROM_DAYS - 708)) | (1L << (FROM_UNIXTIME - 708)) | (1L << (GEOMCOLLFROMTEXT - 708)) | (1L << (GEOMCOLLFROMWKB - 708)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 708)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 708)) | (1L << (GEOMETRYFROMTEXT - 708)) | (1L << (GEOMETRYFROMWKB - 708)) | (1L << (GEOMETRYN - 708)) | (1L << (GEOMETRYTYPE - 708)) | (1L << (GEOMFROMTEXT - 708)) | (1L << (GEOMFROMWKB - 708)) | (1L << (GET_FORMAT - 708)) | (1L << (GET_LOCK - 708)) | (1L << (GLENGTH - 708)) | (1L << (GREATEST - 708)) | (1L << (GTID_SUBSET - 708)) | (1L << (GTID_SUBTRACT - 708)) | (1L << (HEX - 708)) | (1L << (IFNULL - 708)) | (1L << (INET6_ATON - 708)) | (1L << (INET6_NTOA - 708)) | (1L << (INET_ATON - 708)) | (1L << (INET_NTOA - 708)) | (1L << (INSTR - 708)) | (1L << (INTERIORRINGN - 708)) | (1L << (INTERSECTS - 708)) | (1L << (ISCLOSED - 708)) | (1L << (ISEMPTY - 708)) | (1L << (ISNULL - 708)) | (1L << (ISSIMPLE - 708)) | (1L << (IS_FREE_LOCK - 708)) | (1L << (IS_IPV4 - 708)))) != 0) || ((((_la - 772)) & ~0x3f) == 0 && ((1L << (_la - 772)) & ((1L << (IS_IPV4_COMPAT - 772)) | (1L << (IS_IPV4_MAPPED - 772)) | (1L << (IS_IPV6 - 772)) | (1L << (IS_USED_LOCK - 772)) | (1L << (LAST_INSERT_ID - 772)) | (1L << (LCASE - 772)) | (1L << (LEAST - 772)) | (1L << (LENGTH - 772)) | (1L << (LINEFROMTEXT - 772)) | (1L << (LINEFROMWKB - 772)) | (1L << (LINESTRINGFROMTEXT - 772)) | (1L << (LINESTRINGFROMWKB - 772)) | (1L << (LN - 772)) | (1L << (LOAD_FILE - 772)) | (1L << (LOCATE - 772)) | (1L << (LOG - 772)) | (1L << (LOG10 - 772)) | (1L << (LOG2 - 772)) | (1L << (LOWER - 772)) | (1L << (LPAD - 772)) | (1L << (LTRIM - 772)) | (1L << (MAKEDATE - 772)) | (1L << (MAKETIME - 772)) | (1L << (MAKE_SET - 772)) | (1L << (MASTER_POS_WAIT - 772)) | (1L << (MBRCONTAINS - 772)) | (1L << (MBRDISJOINT - 772)) | (1L << (MBREQUAL - 772)) | (1L << (MBRINTERSECTS - 772)) | (1L << (MBROVERLAPS - 772)) | (1L << (MBRTOUCHES - 772)) | (1L << (MBRWITHIN - 772)) | (1L << (MD5 - 772)) | (1L << (MLINEFROMTEXT - 772)) | (1L << (MLINEFROMWKB - 772)) | (1L << (MONTHNAME - 772)) | (1L << (MPOINTFROMTEXT - 772)) | (1L << (MPOINTFROMWKB - 772)) | (1L << (MPOLYFROMTEXT - 772)) | (1L << (MPOLYFROMWKB - 772)) | (1L << (MULTILINESTRINGFROMTEXT - 772)) | (1L << (MULTILINESTRINGFROMWKB - 772)) | (1L << (MULTIPOINTFROMTEXT - 772)) | (1L << (MULTIPOINTFROMWKB - 772)) | (1L << (MULTIPOLYGONFROMTEXT - 772)) | (1L << (MULTIPOLYGONFROMWKB - 772)) | (1L << (NAME_CONST - 772)) | (1L << (NULLIF - 772)) | (1L << (NUMGEOMETRIES - 772)) | (1L << (NUMINTERIORRINGS - 772)) | (1L << (NUMPOINTS - 772)) | (1L << (OCT - 772)) | (1L << (OCTET_LENGTH - 772)) | (1L << (ORD - 772)) | (1L << (OVERLAPS - 772)) | (1L << (PERIOD_ADD - 772)) | (1L << (PERIOD_DIFF - 772)) | (1L << (PI - 772)) | (1L << (POINTFROMTEXT - 772)) | (1L << (POINTFROMWKB - 772)) | (1L << (POINTN - 772)) | (1L << (POLYFROMTEXT - 772)) | (1L << (POLYFROMWKB - 772)) | (1L << (POLYGONFROMTEXT - 772)))) != 0) || ((((_la - 836)) & ~0x3f) == 0 && ((1L << (_la - 836)) & ((1L << (POLYGONFROMWKB - 836)) | (1L << (POW - 836)) | (1L << (POWER - 836)) | (1L << (QUOTE - 836)) | (1L << (RADIANS - 836)) | (1L << (RAND - 836)) | (1L << (RANDOM_BYTES - 836)) | (1L << (RELEASE_LOCK - 836)) | (1L << (REVERSE - 836)) | (1L << (ROUND - 836)) | (1L << (ROW_COUNT - 836)) | (1L << (RPAD - 836)) | (1L << (RTRIM - 836)) | (1L << (SEC_TO_TIME - 836)) | (1L << (SESSION_USER - 836)) | (1L << (SHA - 836)) | (1L << (SHA1 - 836)) | (1L << (SHA2 - 836)) | (1L << (SCHEMA_NAME - 836)) | (1L << (SIGN - 836)) | (1L << (SIN - 836)) | (1L << (SLEEP - 836)) | (1L << (SOUNDEX - 836)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 836)) | (1L << (SQRT - 836)) | (1L << (SRID - 836)) | (1L << (STARTPOINT - 836)) | (1L << (STRCMP - 836)) | (1L << (STR_TO_DATE - 836)) | (1L << (ST_AREA - 836)) | (1L << (ST_ASBINARY - 836)) | (1L << (ST_ASTEXT - 836)) | (1L << (ST_ASWKB - 836)) | (1L << (ST_ASWKT - 836)) | (1L << (ST_BUFFER - 836)) | (1L << (ST_CENTROID - 836)) | (1L << (ST_CONTAINS - 836)) | (1L << (ST_CROSSES - 836)) | (1L << (ST_DIFFERENCE - 836)) | (1L << (ST_DIMENSION - 836)) | (1L << (ST_DISJOINT - 836)) | (1L << (ST_DISTANCE - 836)) | (1L << (ST_ENDPOINT - 836)) | (1L << (ST_ENVELOPE - 836)) | (1L << (ST_EQUALS - 836)) | (1L << (ST_EXTERIORRING - 836)) | (1L << (ST_GEOMCOLLFROMTEXT - 836)) | (1L << (ST_GEOMCOLLFROMTXT - 836)) | (1L << (ST_GEOMCOLLFROMWKB - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 836)) | (1L << (ST_GEOMETRYFROMTEXT - 836)) | (1L << (ST_GEOMETRYFROMWKB - 836)) | (1L << (ST_GEOMETRYN - 836)) | (1L << (ST_GEOMETRYTYPE - 836)) | (1L << (ST_GEOMFROMTEXT - 836)) | (1L << (ST_GEOMFROMWKB - 836)) | (1L << (ST_INTERIORRINGN - 836)) | (1L << (ST_INTERSECTION - 836)) | (1L << (ST_INTERSECTS - 836)) | (1L << (ST_ISCLOSED - 836)) | (1L << (ST_ISEMPTY - 836)) | (1L << (ST_ISSIMPLE - 836)) | (1L << (ST_LINEFROMTEXT - 836)))) != 0) || ((((_la - 900)) & ~0x3f) == 0 && ((1L << (_la - 900)) & ((1L << (ST_LINEFROMWKB - 900)) | (1L << (ST_LINESTRINGFROMTEXT - 900)) | (1L << (ST_LINESTRINGFROMWKB - 900)) | (1L << (ST_NUMGEOMETRIES - 900)) | (1L << (ST_NUMINTERIORRING - 900)) | (1L << (ST_NUMINTERIORRINGS - 900)) | (1L << (ST_NUMPOINTS - 900)) | (1L << (ST_OVERLAPS - 900)) | (1L << (ST_POINTFROMTEXT - 900)) | (1L << (ST_POINTFROMWKB - 900)) | (1L << (ST_POINTN - 900)) | (1L << (ST_POLYFROMTEXT - 900)) | (1L << (ST_POLYFROMWKB - 900)) | (1L << (ST_POLYGONFROMTEXT - 900)) | (1L << (ST_POLYGONFROMWKB - 900)) | (1L << (ST_SRID - 900)) | (1L << (ST_STARTPOINT - 900)) | (1L << (ST_SYMDIFFERENCE - 900)) | (1L << (ST_TOUCHES - 900)) | (1L << (ST_UNION - 900)) | (1L << (ST_WITHIN - 900)) | (1L << (ST_X - 900)) | (1L << (ST_Y - 900)) | (1L << (SUBDATE - 900)) | (1L << (SUBSTRING_INDEX - 900)) | (1L << (SUBTIME - 900)) | (1L << (SYSTEM_USER - 900)) | (1L << (TAN - 900)) | (1L << (TIMEDIFF - 900)) | (1L << (TIMESTAMPADD - 900)) | (1L << (TIMESTAMPDIFF - 900)) | (1L << (TIME_FORMAT - 900)) | (1L << (TIME_TO_SEC - 900)) | (1L << (TOUCHES - 900)) | (1L << (TO_BASE64 - 900)) | (1L << (TO_DAYS - 900)) | (1L << (TO_SECONDS - 900)) | (1L << (UCASE - 900)) | (1L << (UNCOMPRESS - 900)) | (1L << (UNCOMPRESSED_LENGTH - 900)) | (1L << (UNHEX - 900)) | (1L << (UNIX_TIMESTAMP - 900)) | (1L << (UPDATEXML - 900)) | (1L << (UPPER - 900)) | (1L << (UUID - 900)) | (1L << (UUID_SHORT - 900)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 900)) | (1L << (VERSION - 900)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 900)) | (1L << (WEEKDAY - 900)) | (1L << (WEEKOFYEAR - 900)) | (1L << (WEIGHT_STRING - 900)) | (1L << (WITHIN - 900)) | (1L << (YEARWEEK - 900)) | (1L << (Y_FUNCTION - 900)) | (1L << (X_FUNCTION - 900)))) != 0) || ((((_la - 994)) & ~0x3f) == 0 && ((1L << (_la - 994)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 994)) | (1L << (STRING_LITERAL - 994)) | (1L << (ID - 994)) | (1L << (REVERSE_QUOTE_ID - 994)))) != 0))
                {
                    {
                        State = 4223; uid();
                        State = 4224; Match(COLON_SYMB);
                    }
                }

                State = 4228; Match(WHILE);
                State = 4229; expression(0);
                State = 4230; Match(DO);
                State = 4232;
                ErrorHandler.Sync(this);
                _alt = 1;
                do
                {
                    switch (_alt)
                    {
                        case 1:
                            {
                                {
                                    State = 4231; procedureSqlStatement();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    State = 4234;
                    ErrorHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(TokenStream, 607, Context);
                } while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER);
                State = 4236; Match(END);
                State = 4237; Match(WHILE);
                State = 4239;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (((((_la - 32)) & ~0x3f) == 0 && ((1L << (_la - 32)) & ((1L << (CURRENT - 32)) | (1L << (DATABASE - 32)) | (1L << (DIAGNOSTICS - 32)) | (1L << (LEFT - 32)))) != 0) || ((((_la - 105)) & ~0x3f) == 0 && ((1L << (_la - 105)) & ((1L << (NUMBER - 105)) | (1L << (RIGHT - 105)) | (1L << (STACKED - 105)))) != 0) || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)) | (1L << (SERIAL - 191)) | (1L << (COUNT - 191)) | (1L << (POSITION - 191)))) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (ACCOUNT - 259)) | (1L << (ACTION - 259)) | (1L << (AFTER - 259)) | (1L << (AGGREGATE - 259)) | (1L << (ALGORITHM - 259)) | (1L << (ANY - 259)) | (1L << (AT - 259)) | (1L << (AUTHORS - 259)) | (1L << (AUTOCOMMIT - 259)) | (1L << (AUTOEXTEND_SIZE - 259)) | (1L << (AUTO_INCREMENT - 259)) | (1L << (AVG_ROW_LENGTH - 259)) | (1L << (BEGIN - 259)) | (1L << (BINLOG - 259)) | (1L << (BIT - 259)) | (1L << (BLOCK - 259)) | (1L << (BOOL - 259)) | (1L << (BOOLEAN - 259)) | (1L << (BTREE - 259)) | (1L << (CACHE - 259)) | (1L << (CASCADED - 259)) | (1L << (CHAIN - 259)) | (1L << (CHANGED - 259)) | (1L << (CHANNEL - 259)) | (1L << (CHECKSUM - 259)) | (1L << (PAGE_CHECKSUM - 259)) | (1L << (CIPHER - 259)) | (1L << (CLASS_ORIGIN - 259)) | (1L << (CLIENT - 259)) | (1L << (CLOSE - 259)) | (1L << (COALESCE - 259)) | (1L << (CODE - 259)) | (1L << (COLUMNS - 259)) | (1L << (COLUMN_FORMAT - 259)) | (1L << (COLUMN_NAME - 259)) | (1L << (COMMENT - 259)) | (1L << (COMMIT - 259)) | (1L << (COMPACT - 259)) | (1L << (COMPLETION - 259)) | (1L << (COMPRESSED - 259)) | (1L << (COMPRESSION - 259)) | (1L << (CONCURRENT - 259)) | (1L << (CONNECTION - 259)) | (1L << (CONSISTENT - 259)) | (1L << (CONSTRAINT_CATALOG - 259)) | (1L << (CONSTRAINT_SCHEMA - 259)) | (1L << (CONSTRAINT_NAME - 259)) | (1L << (CONTAINS - 259)) | (1L << (CONTEXT - 259)) | (1L << (CONTRIBUTORS - 259)) | (1L << (COPY - 259)) | (1L << (CPU - 259)) | (1L << (CURSOR_NAME - 259)) | (1L << (DATA - 259)) | (1L << (DATAFILE - 259)) | (1L << (DEALLOCATE - 259)) | (1L << (DEFAULT_AUTH - 259)) | (1L << (DEFINER - 259)) | (1L << (DELAY_KEY_WRITE - 259)) | (1L << (DES_KEY_FILE - 259)) | (1L << (DIRECTORY - 259)) | (1L << (DISABLE - 259)) | (1L << (DISCARD - 259)) | (1L << (DISK - 259)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (DO - 323)) | (1L << (DUMPFILE - 323)) | (1L << (DUPLICATE - 323)) | (1L << (DYNAMIC - 323)) | (1L << (ENABLE - 323)) | (1L << (ENCRYPTION - 323)) | (1L << (END - 323)) | (1L << (ENDS - 323)) | (1L << (ENGINE - 323)) | (1L << (ENGINES - 323)) | (1L << (ERROR - 323)) | (1L << (ERRORS - 323)) | (1L << (ESCAPE - 323)) | (1L << (EVEN - 323)) | (1L << (EVENT - 323)) | (1L << (EVENTS - 323)) | (1L << (EVERY - 323)) | (1L << (EXCHANGE - 323)) | (1L << (EXCLUSIVE - 323)) | (1L << (EXPIRE - 323)) | (1L << (EXPORT - 323)) | (1L << (EXTENDED - 323)) | (1L << (EXTENT_SIZE - 323)) | (1L << (FAST - 323)) | (1L << (FAULTS - 323)) | (1L << (FIELDS - 323)) | (1L << (FILE_BLOCK_SIZE - 323)) | (1L << (FILTER - 323)) | (1L << (FIRST - 323)) | (1L << (FIXED - 323)) | (1L << (FLUSH - 323)) | (1L << (FOLLOWS - 323)) | (1L << (FOUND - 323)) | (1L << (FULL - 323)) | (1L << (FUNCTION - 323)) | (1L << (GENERAL - 323)) | (1L << (GLOBAL - 323)) | (1L << (GRANTS - 323)) | (1L << (GROUP_REPLICATION - 323)) | (1L << (HANDLER - 323)) | (1L << (HASH - 323)) | (1L << (HELP - 323)) | (1L << (HOST - 323)) | (1L << (HOSTS - 323)) | (1L << (IDENTIFIED - 323)) | (1L << (IGNORE_SERVER_IDS - 323)) | (1L << (IMPORT - 323)) | (1L << (INDEXES - 323)) | (1L << (INITIAL_SIZE - 323)) | (1L << (INPLACE - 323)) | (1L << (INSERT_METHOD - 323)) | (1L << (INSTALL - 323)) | (1L << (INSTANCE - 323)) | (1L << (INVISIBLE - 323)) | (1L << (INVOKER - 323)) | (1L << (IO - 323)) | (1L << (IO_THREAD - 323)) | (1L << (IPC - 323)) | (1L << (ISOLATION - 323)) | (1L << (ISSUER - 323)) | (1L << (JSON - 323)) | (1L << (KEY_BLOCK_SIZE - 323)) | (1L << (LANGUAGE - 323)) | (1L << (LAST - 323)))) != 0) || ((((_la - 387)) & ~0x3f) == 0 && ((1L << (_la - 387)) & ((1L << (LEAVES - 387)) | (1L << (LESS - 387)) | (1L << (LEVEL - 387)) | (1L << (LIST - 387)) | (1L << (LOCAL - 387)) | (1L << (LOGFILE - 387)) | (1L << (LOGS - 387)) | (1L << (MASTER - 387)) | (1L << (MASTER_AUTO_POSITION - 387)) | (1L << (MASTER_CONNECT_RETRY - 387)) | (1L << (MASTER_DELAY - 387)) | (1L << (MASTER_HEARTBEAT_PERIOD - 387)) | (1L << (MASTER_HOST - 387)) | (1L << (MASTER_LOG_FILE - 387)) | (1L << (MASTER_LOG_POS - 387)) | (1L << (MASTER_PASSWORD - 387)) | (1L << (MASTER_PORT - 387)) | (1L << (MASTER_RETRY_COUNT - 387)) | (1L << (MASTER_SSL - 387)) | (1L << (MASTER_SSL_CA - 387)) | (1L << (MASTER_SSL_CAPATH - 387)) | (1L << (MASTER_SSL_CERT - 387)) | (1L << (MASTER_SSL_CIPHER - 387)) | (1L << (MASTER_SSL_CRL - 387)) | (1L << (MASTER_SSL_CRLPATH - 387)) | (1L << (MASTER_SSL_KEY - 387)) | (1L << (MASTER_TLS_VERSION - 387)) | (1L << (MASTER_USER - 387)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 387)) | (1L << (MAX_QUERIES_PER_HOUR - 387)) | (1L << (MAX_ROWS - 387)) | (1L << (MAX_SIZE - 387)) | (1L << (MAX_UPDATES_PER_HOUR - 387)) | (1L << (MAX_USER_CONNECTIONS - 387)) | (1L << (MEDIUM - 387)) | (1L << (MERGE - 387)) | (1L << (MESSAGE_TEXT - 387)) | (1L << (MID - 387)) | (1L << (MIGRATE - 387)) | (1L << (MIN_ROWS - 387)) | (1L << (MODE - 387)) | (1L << (MODIFY - 387)) | (1L << (MUTEX - 387)) | (1L << (MYSQL - 387)) | (1L << (MYSQL_ERRNO - 387)) | (1L << (NAME - 387)) | (1L << (NAMES - 387)) | (1L << (NCHAR - 387)) | (1L << (NEVER - 387)) | (1L << (NEXT - 387)) | (1L << (NO - 387)) | (1L << (NODEGROUP - 387)) | (1L << (NONE - 387)) | (1L << (OFFLINE - 387)) | (1L << (OFFSET - 387)) | (1L << (OJ - 387)) | (1L << (OLD_PASSWORD - 387)) | (1L << (ONE - 387)) | (1L << (ONLINE - 387)) | (1L << (ONLY - 387)) | (1L << (OPEN - 387)) | (1L << (OPTIMIZER_COSTS - 387)) | (1L << (OPTIONS - 387)) | (1L << (OWNER - 387)))) != 0) || ((((_la - 451)) & ~0x3f) == 0 && ((1L << (_la - 451)) & ((1L << (PACK_KEYS - 451)) | (1L << (PAGE - 451)) | (1L << (PARSER - 451)) | (1L << (PARTIAL - 451)) | (1L << (PARTITIONING - 451)) | (1L << (PARTITIONS - 451)) | (1L << (PASSWORD - 451)) | (1L << (PHASE - 451)) | (1L << (PLUGIN - 451)) | (1L << (PLUGIN_DIR - 451)) | (1L << (PLUGINS - 451)) | (1L << (PORT - 451)) | (1L << (PRECEDES - 451)) | (1L << (PREPARE - 451)) | (1L << (PRESERVE - 451)) | (1L << (PREV - 451)) | (1L << (PROCESSLIST - 451)) | (1L << (PROFILE - 451)) | (1L << (PROFILES - 451)) | (1L << (PROXY - 451)) | (1L << (QUERY - 451)) | (1L << (QUICK - 451)) | (1L << (REBUILD - 451)) | (1L << (RECOVER - 451)) | (1L << (REDO_BUFFER_SIZE - 451)) | (1L << (REDUNDANT - 451)) | (1L << (RELAY - 451)) | (1L << (RELAY_LOG_FILE - 451)) | (1L << (RELAY_LOG_POS - 451)) | (1L << (RELAYLOG - 451)) | (1L << (REMOVE - 451)) | (1L << (REORGANIZE - 451)) | (1L << (REPAIR - 451)) | (1L << (REPLICATE_DO_DB - 451)) | (1L << (REPLICATE_DO_TABLE - 451)) | (1L << (REPLICATE_IGNORE_DB - 451)) | (1L << (REPLICATE_IGNORE_TABLE - 451)) | (1L << (REPLICATE_REWRITE_DB - 451)) | (1L << (REPLICATE_WILD_DO_TABLE - 451)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 451)) | (1L << (REPLICATION - 451)) | (1L << (RESET - 451)) | (1L << (RESUME - 451)) | (1L << (RETURNED_SQLSTATE - 451)) | (1L << (RETURNS - 451)) | (1L << (ROLLBACK - 451)) | (1L << (ROLLUP - 451)) | (1L << (ROTATE - 451)) | (1L << (ROW - 451)) | (1L << (ROWS - 451)) | (1L << (ROW_FORMAT - 451)) | (1L << (SAVEPOINT - 451)) | (1L << (SCHEDULE - 451)) | (1L << (SECURITY - 451)) | (1L << (SERVER - 451)) | (1L << (SESSION - 451)) | (1L << (SHARE - 451)) | (1L << (SHARED - 451)) | (1L << (SIGNED - 451)) | (1L << (SIMPLE - 451)) | (1L << (SLAVE - 451)) | (1L << (SLOW - 451)) | (1L << (SNAPSHOT - 451)) | (1L << (SOCKET - 451)))) != 0) || ((((_la - 515)) & ~0x3f) == 0 && ((1L << (_la - 515)) & ((1L << (SOME - 515)) | (1L << (SONAME - 515)) | (1L << (SOUNDS - 515)) | (1L << (SOURCE - 515)) | (1L << (SQL_AFTER_GTIDS - 515)) | (1L << (SQL_AFTER_MTS_GAPS - 515)) | (1L << (SQL_BEFORE_GTIDS - 515)) | (1L << (SQL_BUFFER_RESULT - 515)) | (1L << (SQL_CACHE - 515)) | (1L << (SQL_NO_CACHE - 515)) | (1L << (SQL_THREAD - 515)) | (1L << (START - 515)) | (1L << (STARTS - 515)) | (1L << (STATS_AUTO_RECALC - 515)) | (1L << (STATS_PERSISTENT - 515)) | (1L << (STATS_SAMPLE_PAGES - 515)) | (1L << (STATUS - 515)) | (1L << (STOP - 515)) | (1L << (STORAGE - 515)) | (1L << (STRING - 515)) | (1L << (SUBCLASS_ORIGIN - 515)) | (1L << (SUBJECT - 515)) | (1L << (SUBPARTITION - 515)) | (1L << (SUBPARTITIONS - 515)) | (1L << (SUSPEND - 515)) | (1L << (SWAPS - 515)) | (1L << (SWITCHES - 515)) | (1L << (TABLE_NAME - 515)) | (1L << (TABLESPACE - 515)) | (1L << (TEMPORARY - 515)) | (1L << (TEMPTABLE - 515)) | (1L << (THAN - 515)) | (1L << (TRADITIONAL - 515)) | (1L << (TRANSACTION - 515)) | (1L << (TRIGGERS - 515)) | (1L << (TRUNCATE - 515)) | (1L << (UNDEFINED - 515)) | (1L << (UNDOFILE - 515)) | (1L << (UNDO_BUFFER_SIZE - 515)) | (1L << (UNINSTALL - 515)) | (1L << (UNKNOWN - 515)) | (1L << (UNTIL - 515)) | (1L << (UPGRADE - 515)) | (1L << (USER - 515)) | (1L << (USE_FRM - 515)) | (1L << (USER_RESOURCES - 515)) | (1L << (VALIDATION - 515)) | (1L << (VALUE - 515)) | (1L << (VARIABLES - 515)) | (1L << (VIEW - 515)) | (1L << (VISIBLE - 515)) | (1L << (WAIT - 515)) | (1L << (WARNINGS - 515)) | (1L << (WITHOUT - 515)) | (1L << (WORK - 515)) | (1L << (WRAPPER - 515)) | (1L << (X509 - 515)) | (1L << (XA - 515)) | (1L << (XML - 515)))) != 0) || ((((_la - 580)) & ~0x3f) == 0 && ((1L << (_la - 580)) & ((1L << (INTERNAL - 580)) | (1L << (QUARTER - 580)) | (1L << (MONTH - 580)) | (1L << (DAY - 580)) | (1L << (HOUR - 580)) | (1L << (MINUTE - 580)) | (1L << (WEEK - 580)) | (1L << (SECOND - 580)) | (1L << (MICROSECOND - 580)) | (1L << (TABLES - 580)) | (1L << (ROUTINE - 580)) | (1L << (EXECUTE - 580)) | (1L << (FILE - 580)) | (1L << (PROCESS - 580)) | (1L << (RELOAD - 580)) | (1L << (SHUTDOWN - 580)) | (1L << (SUPER - 580)) | (1L << (PRIVILEGES - 580)) | (1L << (SESSION_VARIABLES_ADMIN - 580)) | (1L << (ARMSCII8 - 580)) | (1L << (ASCII - 580)) | (1L << (BIG5 - 580)) | (1L << (CP1250 - 580)) | (1L << (CP1251 - 580)) | (1L << (CP1256 - 580)) | (1L << (CP1257 - 580)) | (1L << (CP850 - 580)) | (1L << (CP852 - 580)) | (1L << (CP866 - 580)) | (1L << (CP932 - 580)) | (1L << (DEC8 - 580)) | (1L << (EUCJPMS - 580)) | (1L << (EUCKR - 580)) | (1L << (GB2312 - 580)) | (1L << (GBK - 580)) | (1L << (GEOSTD8 - 580)) | (1L << (GREEK - 580)) | (1L << (HEBREW - 580)) | (1L << (HP8 - 580)) | (1L << (KEYBCS2 - 580)) | (1L << (KOI8R - 580)) | (1L << (KOI8U - 580)) | (1L << (LATIN1 - 580)) | (1L << (LATIN2 - 580)) | (1L << (LATIN5 - 580)) | (1L << (LATIN7 - 580)) | (1L << (MACCE - 580)) | (1L << (MACROMAN - 580)) | (1L << (SJIS - 580)) | (1L << (SWE7 - 580)) | (1L << (TIS620 - 580)) | (1L << (UCS2 - 580)) | (1L << (UJIS - 580)) | (1L << (UTF16 - 580)) | (1L << (UTF16LE - 580)) | (1L << (UTF32 - 580)) | (1L << (UTF8 - 580)) | (1L << (UTF8MB3 - 580)) | (1L << (UTF8MB4 - 580)) | (1L << (ARCHIVE - 580)) | (1L << (BLACKHOLE - 580)) | (1L << (CSV - 580)) | (1L << (FEDERATED - 580)) | (1L << (INNODB - 580)))) != 0) || ((((_la - 644)) & ~0x3f) == 0 && ((1L << (_la - 644)) & ((1L << (MEMORY - 644)) | (1L << (MRG_MYISAM - 644)) | (1L << (MYISAM - 644)) | (1L << (NDB - 644)) | (1L << (NDBCLUSTER - 644)) | (1L << (PERFORMANCE_SCHEMA - 644)) | (1L << (TOKUDB - 644)) | (1L << (REPEATABLE - 644)) | (1L << (COMMITTED - 644)) | (1L << (UNCOMMITTED - 644)) | (1L << (SERIALIZABLE - 644)) | (1L << (GEOMETRYCOLLECTION - 644)) | (1L << (LINESTRING - 644)) | (1L << (MULTILINESTRING - 644)) | (1L << (MULTIPOINT - 644)) | (1L << (MULTIPOLYGON - 644)) | (1L << (POINT - 644)) | (1L << (POLYGON - 644)) | (1L << (ABS - 644)) | (1L << (ACOS - 644)) | (1L << (ADDDATE - 644)) | (1L << (ADDTIME - 644)) | (1L << (AES_DECRYPT - 644)) | (1L << (AES_ENCRYPT - 644)) | (1L << (AREA - 644)) | (1L << (ASBINARY - 644)) | (1L << (ASIN - 644)) | (1L << (ASTEXT - 644)) | (1L << (ASWKB - 644)) | (1L << (ASWKT - 644)) | (1L << (ASYMMETRIC_DECRYPT - 644)) | (1L << (ASYMMETRIC_DERIVE - 644)) | (1L << (ASYMMETRIC_ENCRYPT - 644)) | (1L << (ASYMMETRIC_SIGN - 644)) | (1L << (ASYMMETRIC_VERIFY - 644)) | (1L << (ATAN - 644)) | (1L << (ATAN2 - 644)) | (1L << (BENCHMARK - 644)) | (1L << (BIN - 644)) | (1L << (BIT_COUNT - 644)) | (1L << (BIT_LENGTH - 644)) | (1L << (BUFFER - 644)) | (1L << (CATALOG_NAME - 644)) | (1L << (CEIL - 644)) | (1L << (CEILING - 644)) | (1L << (CENTROID - 644)) | (1L << (CHARACTER_LENGTH - 644)) | (1L << (CHARSET - 644)) | (1L << (CHAR_LENGTH - 644)) | (1L << (COERCIBILITY - 644)) | (1L << (COLLATION - 644)) | (1L << (COMPRESS - 644)) | (1L << (CONCAT - 644)) | (1L << (CONCAT_WS - 644)) | (1L << (CONNECTION_ID - 644)) | (1L << (CONV - 644)) | (1L << (CONVERT_TZ - 644)) | (1L << (COS - 644)) | (1L << (COT - 644)) | (1L << (CRC32 - 644)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 644)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 644)))) != 0) || ((((_la - 708)) & ~0x3f) == 0 && ((1L << (_la - 708)) & ((1L << (CREATE_DH_PARAMETERS - 708)) | (1L << (CREATE_DIGEST - 708)) | (1L << (CROSSES - 708)) | (1L << (DATEDIFF - 708)) | (1L << (DATE_FORMAT - 708)) | (1L << (DAYNAME - 708)) | (1L << (DAYOFMONTH - 708)) | (1L << (DAYOFWEEK - 708)) | (1L << (DAYOFYEAR - 708)) | (1L << (DECODE - 708)) | (1L << (DEGREES - 708)) | (1L << (DES_DECRYPT - 708)) | (1L << (DES_ENCRYPT - 708)) | (1L << (DIMENSION - 708)) | (1L << (DISJOINT - 708)) | (1L << (ELT - 708)) | (1L << (ENCODE - 708)) | (1L << (ENCRYPT - 708)) | (1L << (ENDPOINT - 708)) | (1L << (ENVELOPE - 708)) | (1L << (EQUALS - 708)) | (1L << (EXP - 708)) | (1L << (EXPORT_SET - 708)) | (1L << (EXTERIORRING - 708)) | (1L << (EXTRACTVALUE - 708)) | (1L << (FIELD - 708)) | (1L << (FIND_IN_SET - 708)) | (1L << (FLOOR - 708)) | (1L << (FORMAT - 708)) | (1L << (FOUND_ROWS - 708)) | (1L << (FROM_BASE64 - 708)) | (1L << (FROM_DAYS - 708)) | (1L << (FROM_UNIXTIME - 708)) | (1L << (GEOMCOLLFROMTEXT - 708)) | (1L << (GEOMCOLLFROMWKB - 708)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 708)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 708)) | (1L << (GEOMETRYFROMTEXT - 708)) | (1L << (GEOMETRYFROMWKB - 708)) | (1L << (GEOMETRYN - 708)) | (1L << (GEOMETRYTYPE - 708)) | (1L << (GEOMFROMTEXT - 708)) | (1L << (GEOMFROMWKB - 708)) | (1L << (GET_FORMAT - 708)) | (1L << (GET_LOCK - 708)) | (1L << (GLENGTH - 708)) | (1L << (GREATEST - 708)) | (1L << (GTID_SUBSET - 708)) | (1L << (GTID_SUBTRACT - 708)) | (1L << (HEX - 708)) | (1L << (IFNULL - 708)) | (1L << (INET6_ATON - 708)) | (1L << (INET6_NTOA - 708)) | (1L << (INET_ATON - 708)) | (1L << (INET_NTOA - 708)) | (1L << (INSTR - 708)) | (1L << (INTERIORRINGN - 708)) | (1L << (INTERSECTS - 708)) | (1L << (ISCLOSED - 708)) | (1L << (ISEMPTY - 708)) | (1L << (ISNULL - 708)) | (1L << (ISSIMPLE - 708)) | (1L << (IS_FREE_LOCK - 708)) | (1L << (IS_IPV4 - 708)))) != 0) || ((((_la - 772)) & ~0x3f) == 0 && ((1L << (_la - 772)) & ((1L << (IS_IPV4_COMPAT - 772)) | (1L << (IS_IPV4_MAPPED - 772)) | (1L << (IS_IPV6 - 772)) | (1L << (IS_USED_LOCK - 772)) | (1L << (LAST_INSERT_ID - 772)) | (1L << (LCASE - 772)) | (1L << (LEAST - 772)) | (1L << (LENGTH - 772)) | (1L << (LINEFROMTEXT - 772)) | (1L << (LINEFROMWKB - 772)) | (1L << (LINESTRINGFROMTEXT - 772)) | (1L << (LINESTRINGFROMWKB - 772)) | (1L << (LN - 772)) | (1L << (LOAD_FILE - 772)) | (1L << (LOCATE - 772)) | (1L << (LOG - 772)) | (1L << (LOG10 - 772)) | (1L << (LOG2 - 772)) | (1L << (LOWER - 772)) | (1L << (LPAD - 772)) | (1L << (LTRIM - 772)) | (1L << (MAKEDATE - 772)) | (1L << (MAKETIME - 772)) | (1L << (MAKE_SET - 772)) | (1L << (MASTER_POS_WAIT - 772)) | (1L << (MBRCONTAINS - 772)) | (1L << (MBRDISJOINT - 772)) | (1L << (MBREQUAL - 772)) | (1L << (MBRINTERSECTS - 772)) | (1L << (MBROVERLAPS - 772)) | (1L << (MBRTOUCHES - 772)) | (1L << (MBRWITHIN - 772)) | (1L << (MD5 - 772)) | (1L << (MLINEFROMTEXT - 772)) | (1L << (MLINEFROMWKB - 772)) | (1L << (MONTHNAME - 772)) | (1L << (MPOINTFROMTEXT - 772)) | (1L << (MPOINTFROMWKB - 772)) | (1L << (MPOLYFROMTEXT - 772)) | (1L << (MPOLYFROMWKB - 772)) | (1L << (MULTILINESTRINGFROMTEXT - 772)) | (1L << (MULTILINESTRINGFROMWKB - 772)) | (1L << (MULTIPOINTFROMTEXT - 772)) | (1L << (MULTIPOINTFROMWKB - 772)) | (1L << (MULTIPOLYGONFROMTEXT - 772)) | (1L << (MULTIPOLYGONFROMWKB - 772)) | (1L << (NAME_CONST - 772)) | (1L << (NULLIF - 772)) | (1L << (NUMGEOMETRIES - 772)) | (1L << (NUMINTERIORRINGS - 772)) | (1L << (NUMPOINTS - 772)) | (1L << (OCT - 772)) | (1L << (OCTET_LENGTH - 772)) | (1L << (ORD - 772)) | (1L << (OVERLAPS - 772)) | (1L << (PERIOD_ADD - 772)) | (1L << (PERIOD_DIFF - 772)) | (1L << (PI - 772)) | (1L << (POINTFROMTEXT - 772)) | (1L << (POINTFROMWKB - 772)) | (1L << (POINTN - 772)) | (1L << (POLYFROMTEXT - 772)) | (1L << (POLYFROMWKB - 772)) | (1L << (POLYGONFROMTEXT - 772)))) != 0) || ((((_la - 836)) & ~0x3f) == 0 && ((1L << (_la - 836)) & ((1L << (POLYGONFROMWKB - 836)) | (1L << (POW - 836)) | (1L << (POWER - 836)) | (1L << (QUOTE - 836)) | (1L << (RADIANS - 836)) | (1L << (RAND - 836)) | (1L << (RANDOM_BYTES - 836)) | (1L << (RELEASE_LOCK - 836)) | (1L << (REVERSE - 836)) | (1L << (ROUND - 836)) | (1L << (ROW_COUNT - 836)) | (1L << (RPAD - 836)) | (1L << (RTRIM - 836)) | (1L << (SEC_TO_TIME - 836)) | (1L << (SESSION_USER - 836)) | (1L << (SHA - 836)) | (1L << (SHA1 - 836)) | (1L << (SHA2 - 836)) | (1L << (SCHEMA_NAME - 836)) | (1L << (SIGN - 836)) | (1L << (SIN - 836)) | (1L << (SLEEP - 836)) | (1L << (SOUNDEX - 836)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 836)) | (1L << (SQRT - 836)) | (1L << (SRID - 836)) | (1L << (STARTPOINT - 836)) | (1L << (STRCMP - 836)) | (1L << (STR_TO_DATE - 836)) | (1L << (ST_AREA - 836)) | (1L << (ST_ASBINARY - 836)) | (1L << (ST_ASTEXT - 836)) | (1L << (ST_ASWKB - 836)) | (1L << (ST_ASWKT - 836)) | (1L << (ST_BUFFER - 836)) | (1L << (ST_CENTROID - 836)) | (1L << (ST_CONTAINS - 836)) | (1L << (ST_CROSSES - 836)) | (1L << (ST_DIFFERENCE - 836)) | (1L << (ST_DIMENSION - 836)) | (1L << (ST_DISJOINT - 836)) | (1L << (ST_DISTANCE - 836)) | (1L << (ST_ENDPOINT - 836)) | (1L << (ST_ENVELOPE - 836)) | (1L << (ST_EQUALS - 836)) | (1L << (ST_EXTERIORRING - 836)) | (1L << (ST_GEOMCOLLFROMTEXT - 836)) | (1L << (ST_GEOMCOLLFROMTXT - 836)) | (1L << (ST_GEOMCOLLFROMWKB - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 836)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 836)) | (1L << (ST_GEOMETRYFROMTEXT - 836)) | (1L << (ST_GEOMETRYFROMWKB - 836)) | (1L << (ST_GEOMETRYN - 836)) | (1L << (ST_GEOMETRYTYPE - 836)) | (1L << (ST_GEOMFROMTEXT - 836)) | (1L << (ST_GEOMFROMWKB - 836)) | (1L << (ST_INTERIORRINGN - 836)) | (1L << (ST_INTERSECTION - 836)) | (1L << (ST_INTERSECTS - 836)) | (1L << (ST_ISCLOSED - 836)) | (1L << (ST_ISEMPTY - 836)) | (1L << (ST_ISSIMPLE - 836)) | (1L << (ST_LINEFROMTEXT - 836)))) != 0) || ((((_la - 900)) & ~0x3f) == 0 && ((1L << (_la - 900)) & ((1L << (ST_LINEFROMWKB - 900)) | (1L << (ST_LINESTRINGFROMTEXT - 900)) | (1L << (ST_LINESTRINGFROMWKB - 900)) | (1L << (ST_NUMGEOMETRIES - 900)) | (1L << (ST_NUMINTERIORRING - 900)) | (1L << (ST_NUMINTERIORRINGS - 900)) | (1L << (ST_NUMPOINTS - 900)) | (1L << (ST_OVERLAPS - 900)) | (1L << (ST_POINTFROMTEXT - 900)) | (1L << (ST_POINTFROMWKB - 900)) | (1L << (ST_POINTN - 900)) | (1L << (ST_POLYFROMTEXT - 900)) | (1L << (ST_POLYFROMWKB - 900)) | (1L << (ST_POLYGONFROMTEXT - 900)) | (1L << (ST_POLYGONFROMWKB - 900)) | (1L << (ST_SRID - 900)) | (1L << (ST_STARTPOINT - 900)) | (1L << (ST_SYMDIFFERENCE - 900)) | (1L << (ST_TOUCHES - 900)) | (1L << (ST_UNION - 900)) | (1L << (ST_WITHIN - 900)) | (1L << (ST_X - 900)) | (1L << (ST_Y - 900)) | (1L << (SUBDATE - 900)) | (1L << (SUBSTRING_INDEX - 900)) | (1L << (SUBTIME - 900)) | (1L << (SYSTEM_USER - 900)) | (1L << (TAN - 900)) | (1L << (TIMEDIFF - 900)) | (1L << (TIMESTAMPADD - 900)) | (1L << (TIMESTAMPDIFF - 900)) | (1L << (TIME_FORMAT - 900)) | (1L << (TIME_TO_SEC - 900)) | (1L << (TOUCHES - 900)) | (1L << (TO_BASE64 - 900)) | (1L << (TO_DAYS - 900)) | (1L << (TO_SECONDS - 900)) | (1L << (UCASE - 900)) | (1L << (UNCOMPRESS - 900)) | (1L << (UNCOMPRESSED_LENGTH - 900)) | (1L << (UNHEX - 900)) | (1L << (UNIX_TIMESTAMP - 900)) | (1L << (UPDATEXML - 900)) | (1L << (UPPER - 900)) | (1L << (UUID - 900)) | (1L << (UUID_SHORT - 900)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 900)) | (1L << (VERSION - 900)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 900)) | (1L << (WEEKDAY - 900)) | (1L << (WEEKOFYEAR - 900)) | (1L << (WEIGHT_STRING - 900)) | (1L << (WITHIN - 900)) | (1L << (YEARWEEK - 900)) | (1L << (Y_FUNCTION - 900)) | (1L << (X_FUNCTION - 900)))) != 0) || ((((_la - 994)) & ~0x3f) == 0 && ((1L << (_la - 994)) & ((1L << (CHARSET_REVERSE_QOUTE_STRING - 994)) | (1L << (STRING_LITERAL - 994)) | (1L << (ID - 994)) | (1L << (REVERSE_QUOTE_ID - 994)))) != 0))
                {
                    {
                        State = 4238; uid();
                    }
                }

            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class CursorStatementContext : ParserRuleContext
    {
        public CursorStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_cursorStatement; } }

        public CursorStatementContext() { }
        public virtual void CopyFrom(CursorStatementContext context)
        {
            base.CopyFrom(context);
        }
    }
    public partial class CloseCursorContext : CursorStatementContext
    {
        public ITerminalNode CLOSE() { return GetToken(MySqlParser.CLOSE, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public CloseCursorContext(CursorStatementContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterCloseCursor(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitCloseCursor(this);
        }
    }
    public partial class OpenCursorContext : CursorStatementContext
    {
        public ITerminalNode OPEN() { return GetToken(MySqlParser.OPEN, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public OpenCursorContext(CursorStatementContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterOpenCursor(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitOpenCursor(this);
        }
    }
    public partial class FetchCursorContext : CursorStatementContext
    {
        public ITerminalNode FETCH() { return GetToken(MySqlParser.FETCH, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
        public UidListContext uidList()
        {
            return GetRuleContext<UidListContext>(0);
        }
        public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
        public ITerminalNode NEXT() { return GetToken(MySqlParser.NEXT, 0); }
        public FetchCursorContext(CursorStatementContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterFetchCursor(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitFetchCursor(this);
        }
    }

    [RuleVersion(0)]
    public CursorStatementContext cursorStatement()
    {
        CursorStatementContext _localctx = new CursorStatementContext(Context, State);
        EnterRule(_localctx, 364, RULE_cursorStatement);
        int _la;
        try
        {
            State = 4256;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case CLOSE:
                    _localctx = new CloseCursorContext(_localctx);
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 4241; Match(CLOSE);
                        State = 4242; uid();
                    }
                    break;
                case FETCH:
                    _localctx = new FetchCursorContext(_localctx);
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 4243; Match(FETCH);
                        State = 4248;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 610, Context))
                        {
                            case 1:
                                {
                                    State = 4245;
                                    ErrorHandler.Sync(this);
                                    _la = TokenStream.LA(1);
                                    if (_la == NEXT)
                                    {
                                        {
                                            State = 4244; Match(NEXT);
                                        }
                                    }

                                    State = 4247; Match(FROM);
                                }
                                break;
                        }
                        State = 4250; uid();
                        State = 4251; Match(INTO);
                        State = 4252; uidList();
                    }
                    break;
                case OPEN:
                    _localctx = new OpenCursorContext(_localctx);
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 4254; Match(OPEN);
                        State = 4255; uid();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class DeclareVariableContext : ParserRuleContext
    {
        public ITerminalNode DECLARE() { return GetToken(MySqlParser.DECLARE, 0); }
        public UidListContext uidList()
        {
            return GetRuleContext<UidListContext>(0);
        }
        public DataTypeContext dataType()
        {
            return GetRuleContext<DataTypeContext>(0);
        }
        public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
        public DefaultValueContext defaultValue()
        {
            return GetRuleContext<DefaultValueContext>(0);
        }
        public DeclareVariableContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_declareVariable; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterDeclareVariable(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitDeclareVariable(this);
        }
    }

    [RuleVersion(0)]
    public DeclareVariableContext declareVariable()
    {
        DeclareVariableContext _localctx = new DeclareVariableContext(Context, State);
        EnterRule(_localctx, 366, RULE_declareVariable);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 4258; Match(DECLARE);
                State = 4259; uidList();
                State = 4260; dataType();
                State = 4263;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == DEFAULT)
                {
                    {
                        State = 4261; Match(DEFAULT);
                        State = 4262; defaultValue();
                    }
                }

            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class DeclareConditionContext : ParserRuleContext
    {
        public ITerminalNode DECLARE() { return GetToken(MySqlParser.DECLARE, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public ITerminalNode CONDITION() { return GetToken(MySqlParser.CONDITION, 0); }
        public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
        public DecimalLiteralContext decimalLiteral()
        {
            return GetRuleContext<DecimalLiteralContext>(0);
        }
        public ITerminalNode SQLSTATE() { return GetToken(MySqlParser.SQLSTATE, 0); }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public ITerminalNode VALUE() { return GetToken(MySqlParser.VALUE, 0); }
        public DeclareConditionContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_declareCondition; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterDeclareCondition(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitDeclareCondition(this);
        }
    }

    [RuleVersion(0)]
    public DeclareConditionContext declareCondition()
    {
        DeclareConditionContext _localctx = new DeclareConditionContext(Context, State);
        EnterRule(_localctx, 368, RULE_declareCondition);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 4265; Match(DECLARE);
                State = 4266; uid();
                State = 4267; Match(CONDITION);
                State = 4268; Match(FOR);
                State = 4275;
                ErrorHandler.Sync(this);
                switch (TokenStream.LA(1))
                {
                    case ZERO_DECIMAL:
                    case ONE_DECIMAL:
                    case TWO_DECIMAL:
                    case DECIMAL_LITERAL:
                        {
                            State = 4269; decimalLiteral();
                        }
                        break;
                    case SQLSTATE:
                        {
                            State = 4270; Match(SQLSTATE);
                            State = 4272;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            if (_la == VALUE)
                            {
                                {
                                    State = 4271; Match(VALUE);
                                }
                            }

                            State = 4274; Match(STRING_LITERAL);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class DeclareCursorContext : ParserRuleContext
    {
        public ITerminalNode DECLARE() { return GetToken(MySqlParser.DECLARE, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public ITerminalNode CURSOR() { return GetToken(MySqlParser.CURSOR, 0); }
        public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
        public SelectStatementContext selectStatement()
        {
            return GetRuleContext<SelectStatementContext>(0);
        }
        public DeclareCursorContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_declareCursor; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterDeclareCursor(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitDeclareCursor(this);
        }
    }

    [RuleVersion(0)]
    public DeclareCursorContext declareCursor()
    {
        DeclareCursorContext _localctx = new DeclareCursorContext(Context, State);
        EnterRule(_localctx, 370, RULE_declareCursor);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 4277; Match(DECLARE);
                State = 4278; uid();
                State = 4279; Match(CURSOR);
                State = 4280; Match(FOR);
                State = 4281; selectStatement();
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class DeclareHandlerContext : ParserRuleContext
    {
        public IToken handlerAction;
        public ITerminalNode DECLARE() { return GetToken(MySqlParser.DECLARE, 0); }
        public ITerminalNode HANDLER() { return GetToken(MySqlParser.HANDLER, 0); }
        public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
        public HandlerConditionValueContext[] handlerConditionValue()
        {
            return GetRuleContexts<HandlerConditionValueContext>();
        }
        public HandlerConditionValueContext handlerConditionValue(int i)
        {
            return GetRuleContext<HandlerConditionValueContext>(i);
        }
        public RoutineBodyContext routineBody()
        {
            return GetRuleContext<RoutineBodyContext>(0);
        }
        public ITerminalNode CONTINUE() { return GetToken(MySqlParser.CONTINUE, 0); }
        public ITerminalNode EXIT() { return GetToken(MySqlParser.EXIT, 0); }
        public ITerminalNode UNDO() { return GetToken(MySqlParser.UNDO, 0); }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public DeclareHandlerContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_declareHandler; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterDeclareHandler(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitDeclareHandler(this);
        }
    }

    [RuleVersion(0)]
    public DeclareHandlerContext declareHandler()
    {
        DeclareHandlerContext _localctx = new DeclareHandlerContext(Context, State);
        EnterRule(_localctx, 372, RULE_declareHandler);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 4283; Match(DECLARE);
                State = 4284;
                _localctx.handlerAction = TokenStream.LT(1);
                _la = TokenStream.LA(1);
                if (!(_la == CONTINUE || _la == EXIT || _la == UNDO))
                {
                    _localctx.handlerAction = ErrorHandler.RecoverInline(this);
                }
                else
                {
                    ErrorHandler.ReportMatch(this);
                    Consume();
                }
                State = 4285; Match(HANDLER);
                State = 4286; Match(FOR);
                State = 4287; handlerConditionValue();
                State = 4292;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while (_la == COMMA)
                {
                    {
                        {
                            State = 4288; Match(COMMA);
                            State = 4289; handlerConditionValue();
                        }
                    }
                    State = 4294;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
                State = 4295; routineBody();
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class HandlerConditionValueContext : ParserRuleContext
    {
        public HandlerConditionValueContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_handlerConditionValue; } }

        public HandlerConditionValueContext() { }
        public virtual void CopyFrom(HandlerConditionValueContext context)
        {
            base.CopyFrom(context);
        }
    }
    public partial class HandlerConditionWarningContext : HandlerConditionValueContext
    {
        public ITerminalNode SQLWARNING() { return GetToken(MySqlParser.SQLWARNING, 0); }
        public HandlerConditionWarningContext(HandlerConditionValueContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterHandlerConditionWarning(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitHandlerConditionWarning(this);
        }
    }
    public partial class HandlerConditionCodeContext : HandlerConditionValueContext
    {
        public DecimalLiteralContext decimalLiteral()
        {
            return GetRuleContext<DecimalLiteralContext>(0);
        }
        public HandlerConditionCodeContext(HandlerConditionValueContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterHandlerConditionCode(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitHandlerConditionCode(this);
        }
    }
    public partial class HandlerConditionNotfoundContext : HandlerConditionValueContext
    {
        public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
        public ITerminalNode FOUND() { return GetToken(MySqlParser.FOUND, 0); }
        public HandlerConditionNotfoundContext(HandlerConditionValueContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterHandlerConditionNotfound(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitHandlerConditionNotfound(this);
        }
    }
    public partial class HandlerConditionStateContext : HandlerConditionValueContext
    {
        public ITerminalNode SQLSTATE() { return GetToken(MySqlParser.SQLSTATE, 0); }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public ITerminalNode VALUE() { return GetToken(MySqlParser.VALUE, 0); }
        public HandlerConditionStateContext(HandlerConditionValueContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterHandlerConditionState(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitHandlerConditionState(this);
        }
    }
    public partial class HandlerConditionExceptionContext : HandlerConditionValueContext
    {
        public ITerminalNode SQLEXCEPTION() { return GetToken(MySqlParser.SQLEXCEPTION, 0); }
        public HandlerConditionExceptionContext(HandlerConditionValueContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterHandlerConditionException(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitHandlerConditionException(this);
        }
    }
    public partial class HandlerConditionNameContext : HandlerConditionValueContext
    {
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public HandlerConditionNameContext(HandlerConditionValueContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterHandlerConditionName(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitHandlerConditionName(this);
        }
    }

    [RuleVersion(0)]
    public HandlerConditionValueContext handlerConditionValue()
    {
        HandlerConditionValueContext _localctx = new HandlerConditionValueContext(Context, State);
        EnterRule(_localctx, 374, RULE_handlerConditionValue);
        int _la;
        try
        {
            State = 4308;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case ZERO_DECIMAL:
                case ONE_DECIMAL:
                case TWO_DECIMAL:
                case DECIMAL_LITERAL:
                    _localctx = new HandlerConditionCodeContext(_localctx);
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 4297; decimalLiteral();
                    }
                    break;
                case SQLSTATE:
                    _localctx = new HandlerConditionStateContext(_localctx);
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 4298; Match(SQLSTATE);
                        State = 4300;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == VALUE)
                        {
                            {
                                State = 4299; Match(VALUE);
                            }
                        }

                        State = 4302; Match(STRING_LITERAL);
                    }
                    break;
                case CURRENT:
                case DATABASE:
                case DIAGNOSTICS:
                case LEFT:
                case NUMBER:
                case RIGHT:
                case STACKED:
                case DATE:
                case TIME:
                case TIMESTAMP:
                case DATETIME:
                case YEAR:
                case TEXT:
                case ENUM:
                case SERIAL:
                case COUNT:
                case POSITION:
                case ACCOUNT:
                case ACTION:
                case AFTER:
                case AGGREGATE:
                case ALGORITHM:
                case ANY:
                case AT:
                case AUTHORS:
                case AUTOCOMMIT:
                case AUTOEXTEND_SIZE:
                case AUTO_INCREMENT:
                case AVG_ROW_LENGTH:
                case BEGIN:
                case BINLOG:
                case BIT:
                case BLOCK:
                case BOOL:
                case BOOLEAN:
                case BTREE:
                case CACHE:
                case CASCADED:
                case CHAIN:
                case CHANGED:
                case CHANNEL:
                case CHECKSUM:
                case PAGE_CHECKSUM:
                case CIPHER:
                case CLASS_ORIGIN:
                case CLIENT:
                case CLOSE:
                case COALESCE:
                case CODE:
                case COLUMNS:
                case COLUMN_FORMAT:
                case COLUMN_NAME:
                case COMMENT:
                case COMMIT:
                case COMPACT:
                case COMPLETION:
                case COMPRESSED:
                case COMPRESSION:
                case CONCURRENT:
                case CONNECTION:
                case CONSISTENT:
                case CONSTRAINT_CATALOG:
                case CONSTRAINT_SCHEMA:
                case CONSTRAINT_NAME:
                case CONTAINS:
                case CONTEXT:
                case CONTRIBUTORS:
                case COPY:
                case CPU:
                case CURSOR_NAME:
                case DATA:
                case DATAFILE:
                case DEALLOCATE:
                case DEFAULT_AUTH:
                case DEFINER:
                case DELAY_KEY_WRITE:
                case DES_KEY_FILE:
                case DIRECTORY:
                case DISABLE:
                case DISCARD:
                case DISK:
                case DO:
                case DUMPFILE:
                case DUPLICATE:
                case DYNAMIC:
                case ENABLE:
                case ENCRYPTION:
                case END:
                case ENDS:
                case ENGINE:
                case ENGINES:
                case ERROR:
                case ERRORS:
                case ESCAPE:
                case EVEN:
                case EVENT:
                case EVENTS:
                case EVERY:
                case EXCHANGE:
                case EXCLUSIVE:
                case EXPIRE:
                case EXPORT:
                case EXTENDED:
                case EXTENT_SIZE:
                case FAST:
                case FAULTS:
                case FIELDS:
                case FILE_BLOCK_SIZE:
                case FILTER:
                case FIRST:
                case FIXED:
                case FLUSH:
                case FOLLOWS:
                case FOUND:
                case FULL:
                case FUNCTION:
                case GENERAL:
                case GLOBAL:
                case GRANTS:
                case GROUP_REPLICATION:
                case HANDLER:
                case HASH:
                case HELP:
                case HOST:
                case HOSTS:
                case IDENTIFIED:
                case IGNORE_SERVER_IDS:
                case IMPORT:
                case INDEXES:
                case INITIAL_SIZE:
                case INPLACE:
                case INSERT_METHOD:
                case INSTALL:
                case INSTANCE:
                case INVISIBLE:
                case INVOKER:
                case IO:
                case IO_THREAD:
                case IPC:
                case ISOLATION:
                case ISSUER:
                case JSON:
                case KEY_BLOCK_SIZE:
                case LANGUAGE:
                case LAST:
                case LEAVES:
                case LESS:
                case LEVEL:
                case LIST:
                case LOCAL:
                case LOGFILE:
                case LOGS:
                case MASTER:
                case MASTER_AUTO_POSITION:
                case MASTER_CONNECT_RETRY:
                case MASTER_DELAY:
                case MASTER_HEARTBEAT_PERIOD:
                case MASTER_HOST:
                case MASTER_LOG_FILE:
                case MASTER_LOG_POS:
                case MASTER_PASSWORD:
                case MASTER_PORT:
                case MASTER_RETRY_COUNT:
                case MASTER_SSL:
                case MASTER_SSL_CA:
                case MASTER_SSL_CAPATH:
                case MASTER_SSL_CERT:
                case MASTER_SSL_CIPHER:
                case MASTER_SSL_CRL:
                case MASTER_SSL_CRLPATH:
                case MASTER_SSL_KEY:
                case MASTER_TLS_VERSION:
                case MASTER_USER:
                case MAX_CONNECTIONS_PER_HOUR:
                case MAX_QUERIES_PER_HOUR:
                case MAX_ROWS:
                case MAX_SIZE:
                case MAX_UPDATES_PER_HOUR:
                case MAX_USER_CONNECTIONS:
                case MEDIUM:
                case MERGE:
                case MESSAGE_TEXT:
                case MID:
                case MIGRATE:
                case MIN_ROWS:
                case MODE:
                case MODIFY:
                case MUTEX:
                case MYSQL:
                case MYSQL_ERRNO:
                case NAME:
                case NAMES:
                case NCHAR:
                case NEVER:
                case NEXT:
                case NO:
                case NODEGROUP:
                case NONE:
                case OFFLINE:
                case OFFSET:
                case OJ:
                case OLD_PASSWORD:
                case ONE:
                case ONLINE:
                case ONLY:
                case OPEN:
                case OPTIMIZER_COSTS:
                case OPTIONS:
                case OWNER:
                case PACK_KEYS:
                case PAGE:
                case PARSER:
                case PARTIAL:
                case PARTITIONING:
                case PARTITIONS:
                case PASSWORD:
                case PHASE:
                case PLUGIN:
                case PLUGIN_DIR:
                case PLUGINS:
                case PORT:
                case PRECEDES:
                case PREPARE:
                case PRESERVE:
                case PREV:
                case PROCESSLIST:
                case PROFILE:
                case PROFILES:
                case PROXY:
                case QUERY:
                case QUICK:
                case REBUILD:
                case RECOVER:
                case REDO_BUFFER_SIZE:
                case REDUNDANT:
                case RELAY:
                case RELAY_LOG_FILE:
                case RELAY_LOG_POS:
                case RELAYLOG:
                case REMOVE:
                case REORGANIZE:
                case REPAIR:
                case REPLICATE_DO_DB:
                case REPLICATE_DO_TABLE:
                case REPLICATE_IGNORE_DB:
                case REPLICATE_IGNORE_TABLE:
                case REPLICATE_REWRITE_DB:
                case REPLICATE_WILD_DO_TABLE:
                case REPLICATE_WILD_IGNORE_TABLE:
                case REPLICATION:
                case RESET:
                case RESUME:
                case RETURNED_SQLSTATE:
                case RETURNS:
                case ROLLBACK:
                case ROLLUP:
                case ROTATE:
                case ROW:
                case ROWS:
                case ROW_FORMAT:
                case SAVEPOINT:
                case SCHEDULE:
                case SECURITY:
                case SERVER:
                case SESSION:
                case SHARE:
                case SHARED:
                case SIGNED:
                case SIMPLE:
                case SLAVE:
                case SLOW:
                case SNAPSHOT:
                case SOCKET:
                case SOME:
                case SONAME:
                case SOUNDS:
                case SOURCE:
                case SQL_AFTER_GTIDS:
                case SQL_AFTER_MTS_GAPS:
                case SQL_BEFORE_GTIDS:
                case SQL_BUFFER_RESULT:
                case SQL_CACHE:
                case SQL_NO_CACHE:
                case SQL_THREAD:
                case START:
                case STARTS:
                case STATS_AUTO_RECALC:
                case STATS_PERSISTENT:
                case STATS_SAMPLE_PAGES:
                case STATUS:
                case STOP:
                case STORAGE:
                case STRING:
                case SUBCLASS_ORIGIN:
                case SUBJECT:
                case SUBPARTITION:
                case SUBPARTITIONS:
                case SUSPEND:
                case SWAPS:
                case SWITCHES:
                case TABLE_NAME:
                case TABLESPACE:
                case TEMPORARY:
                case TEMPTABLE:
                case THAN:
                case TRADITIONAL:
                case TRANSACTION:
                case TRIGGERS:
                case TRUNCATE:
                case UNDEFINED:
                case UNDOFILE:
                case UNDO_BUFFER_SIZE:
                case UNINSTALL:
                case UNKNOWN:
                case UNTIL:
                case UPGRADE:
                case USER:
                case USE_FRM:
                case USER_RESOURCES:
                case VALIDATION:
                case VALUE:
                case VARIABLES:
                case VIEW:
                case VISIBLE:
                case WAIT:
                case WARNINGS:
                case WITHOUT:
                case WORK:
                case WRAPPER:
                case X509:
                case XA:
                case XML:
                case INTERNAL:
                case QUARTER:
                case MONTH:
                case DAY:
                case HOUR:
                case MINUTE:
                case WEEK:
                case SECOND:
                case MICROSECOND:
                case TABLES:
                case ROUTINE:
                case EXECUTE:
                case FILE:
                case PROCESS:
                case RELOAD:
                case SHUTDOWN:
                case SUPER:
                case PRIVILEGES:
                case SESSION_VARIABLES_ADMIN:
                case ARMSCII8:
                case ASCII:
                case BIG5:
                case CP1250:
                case CP1251:
                case CP1256:
                case CP1257:
                case CP850:
                case CP852:
                case CP866:
                case CP932:
                case DEC8:
                case EUCJPMS:
                case EUCKR:
                case GB2312:
                case GBK:
                case GEOSTD8:
                case GREEK:
                case HEBREW:
                case HP8:
                case KEYBCS2:
                case KOI8R:
                case KOI8U:
                case LATIN1:
                case LATIN2:
                case LATIN5:
                case LATIN7:
                case MACCE:
                case MACROMAN:
                case SJIS:
                case SWE7:
                case TIS620:
                case UCS2:
                case UJIS:
                case UTF16:
                case UTF16LE:
                case UTF32:
                case UTF8:
                case UTF8MB3:
                case UTF8MB4:
                case ARCHIVE:
                case BLACKHOLE:
                case CSV:
                case FEDERATED:
                case INNODB:
                case MEMORY:
                case MRG_MYISAM:
                case MYISAM:
                case NDB:
                case NDBCLUSTER:
                case PERFORMANCE_SCHEMA:
                case TOKUDB:
                case REPEATABLE:
                case COMMITTED:
                case UNCOMMITTED:
                case SERIALIZABLE:
                case GEOMETRYCOLLECTION:
                case LINESTRING:
                case MULTILINESTRING:
                case MULTIPOINT:
                case MULTIPOLYGON:
                case POINT:
                case POLYGON:
                case ABS:
                case ACOS:
                case ADDDATE:
                case ADDTIME:
                case AES_DECRYPT:
                case AES_ENCRYPT:
                case AREA:
                case ASBINARY:
                case ASIN:
                case ASTEXT:
                case ASWKB:
                case ASWKT:
                case ASYMMETRIC_DECRYPT:
                case ASYMMETRIC_DERIVE:
                case ASYMMETRIC_ENCRYPT:
                case ASYMMETRIC_SIGN:
                case ASYMMETRIC_VERIFY:
                case ATAN:
                case ATAN2:
                case BENCHMARK:
                case BIN:
                case BIT_COUNT:
                case BIT_LENGTH:
                case BUFFER:
                case CATALOG_NAME:
                case CEIL:
                case CEILING:
                case CENTROID:
                case CHARACTER_LENGTH:
                case CHARSET:
                case CHAR_LENGTH:
                case COERCIBILITY:
                case COLLATION:
                case COMPRESS:
                case CONCAT:
                case CONCAT_WS:
                case CONNECTION_ID:
                case CONV:
                case CONVERT_TZ:
                case COS:
                case COT:
                case CRC32:
                case CREATE_ASYMMETRIC_PRIV_KEY:
                case CREATE_ASYMMETRIC_PUB_KEY:
                case CREATE_DH_PARAMETERS:
                case CREATE_DIGEST:
                case CROSSES:
                case DATEDIFF:
                case DATE_FORMAT:
                case DAYNAME:
                case DAYOFMONTH:
                case DAYOFWEEK:
                case DAYOFYEAR:
                case DECODE:
                case DEGREES:
                case DES_DECRYPT:
                case DES_ENCRYPT:
                case DIMENSION:
                case DISJOINT:
                case ELT:
                case ENCODE:
                case ENCRYPT:
                case ENDPOINT:
                case ENVELOPE:
                case EQUALS:
                case EXP:
                case EXPORT_SET:
                case EXTERIORRING:
                case EXTRACTVALUE:
                case FIELD:
                case FIND_IN_SET:
                case FLOOR:
                case FORMAT:
                case FOUND_ROWS:
                case FROM_BASE64:
                case FROM_DAYS:
                case FROM_UNIXTIME:
                case GEOMCOLLFROMTEXT:
                case GEOMCOLLFROMWKB:
                case GEOMETRYCOLLECTIONFROMTEXT:
                case GEOMETRYCOLLECTIONFROMWKB:
                case GEOMETRYFROMTEXT:
                case GEOMETRYFROMWKB:
                case GEOMETRYN:
                case GEOMETRYTYPE:
                case GEOMFROMTEXT:
                case GEOMFROMWKB:
                case GET_FORMAT:
                case GET_LOCK:
                case GLENGTH:
                case GREATEST:
                case GTID_SUBSET:
                case GTID_SUBTRACT:
                case HEX:
                case IFNULL:
                case INET6_ATON:
                case INET6_NTOA:
                case INET_ATON:
                case INET_NTOA:
                case INSTR:
                case INTERIORRINGN:
                case INTERSECTS:
                case ISCLOSED:
                case ISEMPTY:
                case ISNULL:
                case ISSIMPLE:
                case IS_FREE_LOCK:
                case IS_IPV4:
                case IS_IPV4_COMPAT:
                case IS_IPV4_MAPPED:
                case IS_IPV6:
                case IS_USED_LOCK:
                case LAST_INSERT_ID:
                case LCASE:
                case LEAST:
                case LENGTH:
                case LINEFROMTEXT:
                case LINEFROMWKB:
                case LINESTRINGFROMTEXT:
                case LINESTRINGFROMWKB:
                case LN:
                case LOAD_FILE:
                case LOCATE:
                case LOG:
                case LOG10:
                case LOG2:
                case LOWER:
                case LPAD:
                case LTRIM:
                case MAKEDATE:
                case MAKETIME:
                case MAKE_SET:
                case MASTER_POS_WAIT:
                case MBRCONTAINS:
                case MBRDISJOINT:
                case MBREQUAL:
                case MBRINTERSECTS:
                case MBROVERLAPS:
                case MBRTOUCHES:
                case MBRWITHIN:
                case MD5:
                case MLINEFROMTEXT:
                case MLINEFROMWKB:
                case MONTHNAME:
                case MPOINTFROMTEXT:
                case MPOINTFROMWKB:
                case MPOLYFROMTEXT:
                case MPOLYFROMWKB:
                case MULTILINESTRINGFROMTEXT:
                case MULTILINESTRINGFROMWKB:
                case MULTIPOINTFROMTEXT:
                case MULTIPOINTFROMWKB:
                case MULTIPOLYGONFROMTEXT:
                case MULTIPOLYGONFROMWKB:
                case NAME_CONST:
                case NULLIF:
                case NUMGEOMETRIES:
                case NUMINTERIORRINGS:
                case NUMPOINTS:
                case OCT:
                case OCTET_LENGTH:
                case ORD:
                case OVERLAPS:
                case PERIOD_ADD:
                case PERIOD_DIFF:
                case PI:
                case POINTFROMTEXT:
                case POINTFROMWKB:
                case POINTN:
                case POLYFROMTEXT:
                case POLYFROMWKB:
                case POLYGONFROMTEXT:
                case POLYGONFROMWKB:
                case POW:
                case POWER:
                case QUOTE:
                case RADIANS:
                case RAND:
                case RANDOM_BYTES:
                case RELEASE_LOCK:
                case REVERSE:
                case ROUND:
                case ROW_COUNT:
                case RPAD:
                case RTRIM:
                case SEC_TO_TIME:
                case SESSION_USER:
                case SHA:
                case SHA1:
                case SHA2:
                case SCHEMA_NAME:
                case SIGN:
                case SIN:
                case SLEEP:
                case SOUNDEX:
                case SQL_THREAD_WAIT_AFTER_GTIDS:
                case SQRT:
                case SRID:
                case STARTPOINT:
                case STRCMP:
                case STR_TO_DATE:
                case ST_AREA:
                case ST_ASBINARY:
                case ST_ASTEXT:
                case ST_ASWKB:
                case ST_ASWKT:
                case ST_BUFFER:
                case ST_CENTROID:
                case ST_CONTAINS:
                case ST_CROSSES:
                case ST_DIFFERENCE:
                case ST_DIMENSION:
                case ST_DISJOINT:
                case ST_DISTANCE:
                case ST_ENDPOINT:
                case ST_ENVELOPE:
                case ST_EQUALS:
                case ST_EXTERIORRING:
                case ST_GEOMCOLLFROMTEXT:
                case ST_GEOMCOLLFROMTXT:
                case ST_GEOMCOLLFROMWKB:
                case ST_GEOMETRYCOLLECTIONFROMTEXT:
                case ST_GEOMETRYCOLLECTIONFROMWKB:
                case ST_GEOMETRYFROMTEXT:
                case ST_GEOMETRYFROMWKB:
                case ST_GEOMETRYN:
                case ST_GEOMETRYTYPE:
                case ST_GEOMFROMTEXT:
                case ST_GEOMFROMWKB:
                case ST_INTERIORRINGN:
                case ST_INTERSECTION:
                case ST_INTERSECTS:
                case ST_ISCLOSED:
                case ST_ISEMPTY:
                case ST_ISSIMPLE:
                case ST_LINEFROMTEXT:
                case ST_LINEFROMWKB:
                case ST_LINESTRINGFROMTEXT:
                case ST_LINESTRINGFROMWKB:
                case ST_NUMGEOMETRIES:
                case ST_NUMINTERIORRING:
                case ST_NUMINTERIORRINGS:
                case ST_NUMPOINTS:
                case ST_OVERLAPS:
                case ST_POINTFROMTEXT:
                case ST_POINTFROMWKB:
                case ST_POINTN:
                case ST_POLYFROMTEXT:
                case ST_POLYFROMWKB:
                case ST_POLYGONFROMTEXT:
                case ST_POLYGONFROMWKB:
                case ST_SRID:
                case ST_STARTPOINT:
                case ST_SYMDIFFERENCE:
                case ST_TOUCHES:
                case ST_UNION:
                case ST_WITHIN:
                case ST_X:
                case ST_Y:
                case SUBDATE:
                case SUBSTRING_INDEX:
                case SUBTIME:
                case SYSTEM_USER:
                case TAN:
                case TIMEDIFF:
                case TIMESTAMPADD:
                case TIMESTAMPDIFF:
                case TIME_FORMAT:
                case TIME_TO_SEC:
                case TOUCHES:
                case TO_BASE64:
                case TO_DAYS:
                case TO_SECONDS:
                case UCASE:
                case UNCOMPRESS:
                case UNCOMPRESSED_LENGTH:
                case UNHEX:
                case UNIX_TIMESTAMP:
                case UPDATEXML:
                case UPPER:
                case UUID:
                case UUID_SHORT:
                case VALIDATE_PASSWORD_STRENGTH:
                case VERSION:
                case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
                case WEEKDAY:
                case WEEKOFYEAR:
                case WEIGHT_STRING:
                case WITHIN:
                case YEARWEEK:
                case Y_FUNCTION:
                case X_FUNCTION:
                case CHARSET_REVERSE_QOUTE_STRING:
                case STRING_LITERAL:
                case ID:
                case REVERSE_QUOTE_ID:
                    _localctx = new HandlerConditionNameContext(_localctx);
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 4303; uid();
                    }
                    break;
                case SQLWARNING:
                    _localctx = new HandlerConditionWarningContext(_localctx);
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 4304; Match(SQLWARNING);
                    }
                    break;
                case NOT:
                    _localctx = new HandlerConditionNotfoundContext(_localctx);
                    EnterOuterAlt(_localctx, 5);
                    {
                        State = 4305; Match(NOT);
                        State = 4306; Match(FOUND);
                    }
                    break;
                case SQLEXCEPTION:
                    _localctx = new HandlerConditionExceptionContext(_localctx);
                    EnterOuterAlt(_localctx, 6);
                    {
                        State = 4307; Match(SQLEXCEPTION);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ProcedureSqlStatementContext : ParserRuleContext
    {
        public ITerminalNode SEMI() { return GetToken(MySqlParser.SEMI, 0); }
        public CompoundStatementContext compoundStatement()
        {
            return GetRuleContext<CompoundStatementContext>(0);
        }
        public SqlStatementContext sqlStatement()
        {
            return GetRuleContext<SqlStatementContext>(0);
        }
        public ProcedureSqlStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_procedureSqlStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterProcedureSqlStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitProcedureSqlStatement(this);
        }
    }

    [RuleVersion(0)]
    public ProcedureSqlStatementContext procedureSqlStatement()
    {
        ProcedureSqlStatementContext _localctx = new ProcedureSqlStatementContext(Context, State);
        EnterRule(_localctx, 376, RULE_procedureSqlStatement);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 4312;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 618, Context))
                {
                    case 1:
                        {
                            State = 4310; compoundStatement();
                        }
                        break;
                    case 2:
                        {
                            State = 4311; sqlStatement();
                        }
                        break;
                }
                State = 4314; Match(SEMI);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class CaseAlternativeContext : ParserRuleContext
    {
        public ITerminalNode WHEN() { return GetToken(MySqlParser.WHEN, 0); }
        public ITerminalNode THEN() { return GetToken(MySqlParser.THEN, 0); }
        public ConstantContext constant()
        {
            return GetRuleContext<ConstantContext>(0);
        }
        public ExpressionContext expression()
        {
            return GetRuleContext<ExpressionContext>(0);
        }
        public ProcedureSqlStatementContext[] procedureSqlStatement()
        {
            return GetRuleContexts<ProcedureSqlStatementContext>();
        }
        public ProcedureSqlStatementContext procedureSqlStatement(int i)
        {
            return GetRuleContext<ProcedureSqlStatementContext>(i);
        }
        public CaseAlternativeContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_caseAlternative; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterCaseAlternative(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitCaseAlternative(this);
        }
    }

    [RuleVersion(0)]
    public CaseAlternativeContext caseAlternative()
    {
        CaseAlternativeContext _localctx = new CaseAlternativeContext(Context, State);
        EnterRule(_localctx, 378, RULE_caseAlternative);
        try
        {
            int _alt;
            EnterOuterAlt(_localctx, 1);
            {
                State = 4316; Match(WHEN);
                State = 4319;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 619, Context))
                {
                    case 1:
                        {
                            State = 4317; constant();
                        }
                        break;
                    case 2:
                        {
                            State = 4318; expression(0);
                        }
                        break;
                }
                State = 4321; Match(THEN);
                State = 4323;
                ErrorHandler.Sync(this);
                _alt = 1;
                do
                {
                    switch (_alt)
                    {
                        case 1:
                            {
                                {
                                    State = 4322; procedureSqlStatement();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    State = 4325;
                    ErrorHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(TokenStream, 620, Context);
                } while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ElifAlternativeContext : ParserRuleContext
    {
        public ITerminalNode ELSEIF() { return GetToken(MySqlParser.ELSEIF, 0); }
        public ExpressionContext expression()
        {
            return GetRuleContext<ExpressionContext>(0);
        }
        public ITerminalNode THEN() { return GetToken(MySqlParser.THEN, 0); }
        public ProcedureSqlStatementContext[] procedureSqlStatement()
        {
            return GetRuleContexts<ProcedureSqlStatementContext>();
        }
        public ProcedureSqlStatementContext procedureSqlStatement(int i)
        {
            return GetRuleContext<ProcedureSqlStatementContext>(i);
        }
        public ElifAlternativeContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_elifAlternative; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterElifAlternative(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitElifAlternative(this);
        }
    }

    [RuleVersion(0)]
    public ElifAlternativeContext elifAlternative()
    {
        ElifAlternativeContext _localctx = new ElifAlternativeContext(Context, State);
        EnterRule(_localctx, 380, RULE_elifAlternative);
        try
        {
            int _alt;
            EnterOuterAlt(_localctx, 1);
            {
                State = 4327; Match(ELSEIF);
                State = 4328; expression(0);
                State = 4329; Match(THEN);
                State = 4331;
                ErrorHandler.Sync(this);
                _alt = 1;
                do
                {
                    switch (_alt)
                    {
                        case 1:
                            {
                                {
                                    State = 4330; procedureSqlStatement();
                                }
                            }
                            break;
                        default:
                            throw new NoViableAltException(this);
                    }
                    State = 4333;
                    ErrorHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(TokenStream, 621, Context);
                } while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class AlterUserContext : ParserRuleContext
    {
        public AlterUserContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_alterUser; } }

        public AlterUserContext() { }
        public virtual void CopyFrom(AlterUserContext context)
        {
            base.CopyFrom(context);
        }
    }
    public partial class AlterUserMysqlV56Context : AlterUserContext
    {
        public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
        public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
        public UserSpecificationContext[] userSpecification()
        {
            return GetRuleContexts<UserSpecificationContext>();
        }
        public UserSpecificationContext userSpecification(int i)
        {
            return GetRuleContext<UserSpecificationContext>(i);
        }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public AlterUserMysqlV56Context(AlterUserContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterUserMysqlV56(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterUserMysqlV56(this);
        }
    }
    public partial class AlterUserMysqlV57Context : AlterUserContext
    {
        public IToken tlsNone;
        public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
        public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
        public UserAuthOptionContext[] userAuthOption()
        {
            return GetRuleContexts<UserAuthOptionContext>();
        }
        public UserAuthOptionContext userAuthOption(int i)
        {
            return GetRuleContext<UserAuthOptionContext>(i);
        }
        public IfExistsContext ifExists()
        {
            return GetRuleContext<IfExistsContext>(0);
        }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public ITerminalNode REQUIRE() { return GetToken(MySqlParser.REQUIRE, 0); }
        public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
        public UserPasswordOptionContext[] userPasswordOption()
        {
            return GetRuleContexts<UserPasswordOptionContext>();
        }
        public UserPasswordOptionContext userPasswordOption(int i)
        {
            return GetRuleContext<UserPasswordOptionContext>(i);
        }
        public UserLockOptionContext[] userLockOption()
        {
            return GetRuleContexts<UserLockOptionContext>();
        }
        public UserLockOptionContext userLockOption(int i)
        {
            return GetRuleContext<UserLockOptionContext>(i);
        }
        public TlsOptionContext[] tlsOption()
        {
            return GetRuleContexts<TlsOptionContext>();
        }
        public TlsOptionContext tlsOption(int i)
        {
            return GetRuleContext<TlsOptionContext>(i);
        }
        public ITerminalNode NONE() { return GetToken(MySqlParser.NONE, 0); }
        public UserResourceOptionContext[] userResourceOption()
        {
            return GetRuleContexts<UserResourceOptionContext>();
        }
        public UserResourceOptionContext userResourceOption(int i)
        {
            return GetRuleContext<UserResourceOptionContext>(i);
        }
        public ITerminalNode[] AND() { return GetTokens(MySqlParser.AND); }
        public ITerminalNode AND(int i)
        {
            return GetToken(MySqlParser.AND, i);
        }
        public AlterUserMysqlV57Context(AlterUserContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAlterUserMysqlV57(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAlterUserMysqlV57(this);
        }
    }

    [RuleVersion(0)]
    public AlterUserContext alterUser()
    {
        AlterUserContext _localctx = new AlterUserContext(Context, State);
        EnterRule(_localctx, 382, RULE_alterUser);
        int _la;
        try
        {
            State = 4389;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 633, Context))
            {
                case 1:
                    _localctx = new AlterUserMysqlV56Context(_localctx);
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 4335; Match(ALTER);
                        State = 4336; Match(USER);
                        State = 4337; userSpecification();
                        State = 4342;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        while (_la == COMMA)
                        {
                            {
                                {
                                    State = 4338; Match(COMMA);
                                    State = 4339; userSpecification();
                                }
                            }
                            State = 4344;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                        }
                    }
                    break;
                case 2:
                    _localctx = new AlterUserMysqlV57Context(_localctx);
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 4345; Match(ALTER);
                        State = 4346; Match(USER);
                        State = 4348;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == IF)
                        {
                            {
                                State = 4347; ifExists();
                            }
                        }

                        State = 4350; userAuthOption();
                        State = 4355;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        while (_la == COMMA)
                        {
                            {
                                {
                                    State = 4351; Match(COMMA);
                                    State = 4352; userAuthOption();
                                }
                            }
                            State = 4357;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                        }
                        State = 4372;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == REQUIRE)
                        {
                            {
                                State = 4358; Match(REQUIRE);
                                State = 4370;
                                ErrorHandler.Sync(this);
                                switch (TokenStream.LA(1))
                                {
                                    case NONE:
                                        {
                                            State = 4359; ((AlterUserMysqlV57Context)_localctx).tlsNone = Match(NONE);
                                        }
                                        break;
                                    case SSL:
                                    case CIPHER:
                                    case ISSUER:
                                    case SUBJECT:
                                    case X509:
                                        {
                                            State = 4360; tlsOption();
                                            State = 4367;
                                            ErrorHandler.Sync(this);
                                            _la = TokenStream.LA(1);
                                            while (_la == AND || _la == SSL || _la == CIPHER || _la == ISSUER || _la == SUBJECT || _la == X509)
                                            {
                                                {
                                                    {
                                                        State = 4362;
                                                        ErrorHandler.Sync(this);
                                                        _la = TokenStream.LA(1);
                                                        if (_la == AND)
                                                        {
                                                            {
                                                                State = 4361; Match(AND);
                                                            }
                                                        }

                                                        State = 4364; tlsOption();
                                                    }
                                                }
                                                State = 4369;
                                                ErrorHandler.Sync(this);
                                                _la = TokenStream.LA(1);
                                            }
                                        }
                                        break;
                                    default:
                                        throw new NoViableAltException(this);
                                }
                            }
                        }

                        State = 4380;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == WITH)
                        {
                            {
                                State = 4374; Match(WITH);
                                State = 4376;
                                ErrorHandler.Sync(this);
                                _la = TokenStream.LA(1);
                                do
                                {
                                    {
                                        {
                                            State = 4375; userResourceOption();
                                        }
                                    }
                                    State = 4378;
                                    ErrorHandler.Sync(this);
                                    _la = TokenStream.LA(1);
                                } while (((((_la - 415)) & ~0x3f) == 0 && ((1L << (_la - 415)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 415)) | (1L << (MAX_QUERIES_PER_HOUR - 415)) | (1L << (MAX_UPDATES_PER_HOUR - 415)) | (1L << (MAX_USER_CONNECTIONS - 415)))) != 0));
                            }
                        }

                        State = 4386;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        while (_la == ACCOUNT || _la == PASSWORD)
                        {
                            {
                                State = 4384;
                                ErrorHandler.Sync(this);
                                switch (TokenStream.LA(1))
                                {
                                    case PASSWORD:
                                        {
                                            State = 4382; userPasswordOption();
                                        }
                                        break;
                                    case ACCOUNT:
                                        {
                                            State = 4383; userLockOption();
                                        }
                                        break;
                                    default:
                                        throw new NoViableAltException(this);
                                }
                            }
                            State = 4388;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                        }
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class CreateUserContext : ParserRuleContext
    {
        public CreateUserContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_createUser; } }

        public CreateUserContext() { }
        public virtual void CopyFrom(CreateUserContext context)
        {
            base.CopyFrom(context);
        }
    }
    public partial class CreateUserMysqlV57Context : CreateUserContext
    {
        public IToken tlsNone;
        public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
        public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
        public UserAuthOptionContext[] userAuthOption()
        {
            return GetRuleContexts<UserAuthOptionContext>();
        }
        public UserAuthOptionContext userAuthOption(int i)
        {
            return GetRuleContext<UserAuthOptionContext>(i);
        }
        public IfNotExistsContext ifNotExists()
        {
            return GetRuleContext<IfNotExistsContext>(0);
        }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public ITerminalNode REQUIRE() { return GetToken(MySqlParser.REQUIRE, 0); }
        public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
        public UserPasswordOptionContext[] userPasswordOption()
        {
            return GetRuleContexts<UserPasswordOptionContext>();
        }
        public UserPasswordOptionContext userPasswordOption(int i)
        {
            return GetRuleContext<UserPasswordOptionContext>(i);
        }
        public UserLockOptionContext[] userLockOption()
        {
            return GetRuleContexts<UserLockOptionContext>();
        }
        public UserLockOptionContext userLockOption(int i)
        {
            return GetRuleContext<UserLockOptionContext>(i);
        }
        public TlsOptionContext[] tlsOption()
        {
            return GetRuleContexts<TlsOptionContext>();
        }
        public TlsOptionContext tlsOption(int i)
        {
            return GetRuleContext<TlsOptionContext>(i);
        }
        public ITerminalNode NONE() { return GetToken(MySqlParser.NONE, 0); }
        public UserResourceOptionContext[] userResourceOption()
        {
            return GetRuleContexts<UserResourceOptionContext>();
        }
        public UserResourceOptionContext userResourceOption(int i)
        {
            return GetRuleContext<UserResourceOptionContext>(i);
        }
        public ITerminalNode[] AND() { return GetTokens(MySqlParser.AND); }
        public ITerminalNode AND(int i)
        {
            return GetToken(MySqlParser.AND, i);
        }
        public CreateUserMysqlV57Context(CreateUserContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterCreateUserMysqlV57(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitCreateUserMysqlV57(this);
        }
    }
    public partial class CreateUserMysqlV56Context : CreateUserContext
    {
        public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
        public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
        public UserAuthOptionContext[] userAuthOption()
        {
            return GetRuleContexts<UserAuthOptionContext>();
        }
        public UserAuthOptionContext userAuthOption(int i)
        {
            return GetRuleContext<UserAuthOptionContext>(i);
        }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public CreateUserMysqlV56Context(CreateUserContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterCreateUserMysqlV56(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitCreateUserMysqlV56(this);
        }
    }

    [RuleVersion(0)]
    public CreateUserContext createUser()
    {
        CreateUserContext _localctx = new CreateUserContext(Context, State);
        EnterRule(_localctx, 384, RULE_createUser);
        int _la;
        try
        {
            State = 4445;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 645, Context))
            {
                case 1:
                    _localctx = new CreateUserMysqlV56Context(_localctx);
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 4391; Match(CREATE);
                        State = 4392; Match(USER);
                        State = 4393; userAuthOption();
                        State = 4398;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        while (_la == COMMA)
                        {
                            {
                                {
                                    State = 4394; Match(COMMA);
                                    State = 4395; userAuthOption();
                                }
                            }
                            State = 4400;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                        }
                    }
                    break;
                case 2:
                    _localctx = new CreateUserMysqlV57Context(_localctx);
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 4401; Match(CREATE);
                        State = 4402; Match(USER);
                        State = 4404;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == IF)
                        {
                            {
                                State = 4403; ifNotExists();
                            }
                        }

                        State = 4406; userAuthOption();
                        State = 4411;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        while (_la == COMMA)
                        {
                            {
                                {
                                    State = 4407; Match(COMMA);
                                    State = 4408; userAuthOption();
                                }
                            }
                            State = 4413;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                        }
                        State = 4428;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == REQUIRE)
                        {
                            {
                                State = 4414; Match(REQUIRE);
                                State = 4426;
                                ErrorHandler.Sync(this);
                                switch (TokenStream.LA(1))
                                {
                                    case NONE:
                                        {
                                            State = 4415; ((CreateUserMysqlV57Context)_localctx).tlsNone = Match(NONE);
                                        }
                                        break;
                                    case SSL:
                                    case CIPHER:
                                    case ISSUER:
                                    case SUBJECT:
                                    case X509:
                                        {
                                            State = 4416; tlsOption();
                                            State = 4423;
                                            ErrorHandler.Sync(this);
                                            _la = TokenStream.LA(1);
                                            while (_la == AND || _la == SSL || _la == CIPHER || _la == ISSUER || _la == SUBJECT || _la == X509)
                                            {
                                                {
                                                    {
                                                        State = 4418;
                                                        ErrorHandler.Sync(this);
                                                        _la = TokenStream.LA(1);
                                                        if (_la == AND)
                                                        {
                                                            {
                                                                State = 4417; Match(AND);
                                                            }
                                                        }

                                                        State = 4420; tlsOption();
                                                    }
                                                }
                                                State = 4425;
                                                ErrorHandler.Sync(this);
                                                _la = TokenStream.LA(1);
                                            }
                                        }
                                        break;
                                    default:
                                        throw new NoViableAltException(this);
                                }
                            }
                        }

                        State = 4436;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == WITH)
                        {
                            {
                                State = 4430; Match(WITH);
                                State = 4432;
                                ErrorHandler.Sync(this);
                                _la = TokenStream.LA(1);
                                do
                                {
                                    {
                                        {
                                            State = 4431; userResourceOption();
                                        }
                                    }
                                    State = 4434;
                                    ErrorHandler.Sync(this);
                                    _la = TokenStream.LA(1);
                                } while (((((_la - 415)) & ~0x3f) == 0 && ((1L << (_la - 415)) & ((1L << (MAX_CONNECTIONS_PER_HOUR - 415)) | (1L << (MAX_QUERIES_PER_HOUR - 415)) | (1L << (MAX_UPDATES_PER_HOUR - 415)) | (1L << (MAX_USER_CONNECTIONS - 415)))) != 0));
                            }
                        }

                        State = 4442;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        while (_la == ACCOUNT || _la == PASSWORD)
                        {
                            {
                                State = 4440;
                                ErrorHandler.Sync(this);
                                switch (TokenStream.LA(1))
                                {
                                    case PASSWORD:
                                        {
                                            State = 4438; userPasswordOption();
                                        }
                                        break;
                                    case ACCOUNT:
                                        {
                                            State = 4439; userLockOption();
                                        }
                                        break;
                                    default:
                                        throw new NoViableAltException(this);
                                }
                            }
                            State = 4444;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                        }
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class DropUserContext : ParserRuleContext
    {
        public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
        public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
        public UserNameContext[] userName()
        {
            return GetRuleContexts<UserNameContext>();
        }
        public UserNameContext userName(int i)
        {
            return GetRuleContext<UserNameContext>(i);
        }
        public IfExistsContext ifExists()
        {
            return GetRuleContext<IfExistsContext>(0);
        }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public DropUserContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_dropUser; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterDropUser(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitDropUser(this);
        }
    }

    [RuleVersion(0)]
    public DropUserContext dropUser()
    {
        DropUserContext _localctx = new DropUserContext(Context, State);
        EnterRule(_localctx, 386, RULE_dropUser);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 4447; Match(DROP);
                State = 4448; Match(USER);
                State = 4450;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == IF)
                {
                    {
                        State = 4449; ifExists();
                    }
                }

                State = 4452; userName();
                State = 4457;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while (_la == COMMA)
                {
                    {
                        {
                            State = 4453; Match(COMMA);
                            State = 4454; userName();
                        }
                    }
                    State = 4459;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class GrantStatementContext : ParserRuleContext
    {
        public IToken privilegeObject;
        public IToken tlsNone;
        public ITerminalNode[] GRANT() { return GetTokens(MySqlParser.GRANT); }
        public ITerminalNode GRANT(int i)
        {
            return GetToken(MySqlParser.GRANT, i);
        }
        public PrivelegeClauseContext[] privelegeClause()
        {
            return GetRuleContexts<PrivelegeClauseContext>();
        }
        public PrivelegeClauseContext privelegeClause(int i)
        {
            return GetRuleContext<PrivelegeClauseContext>(i);
        }
        public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
        public PrivilegeLevelContext privilegeLevel()
        {
            return GetRuleContext<PrivilegeLevelContext>(0);
        }
        public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
        public UserAuthOptionContext[] userAuthOption()
        {
            return GetRuleContexts<UserAuthOptionContext>();
        }
        public UserAuthOptionContext userAuthOption(int i)
        {
            return GetRuleContext<UserAuthOptionContext>(i);
        }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public ITerminalNode REQUIRE() { return GetToken(MySqlParser.REQUIRE, 0); }
        public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
        public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
        public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
        public ITerminalNode PROCEDURE() { return GetToken(MySqlParser.PROCEDURE, 0); }
        public TlsOptionContext[] tlsOption()
        {
            return GetRuleContexts<TlsOptionContext>();
        }
        public TlsOptionContext tlsOption(int i)
        {
            return GetRuleContext<TlsOptionContext>(i);
        }
        public ITerminalNode NONE() { return GetToken(MySqlParser.NONE, 0); }
        public ITerminalNode[] OPTION() { return GetTokens(MySqlParser.OPTION); }
        public ITerminalNode OPTION(int i)
        {
            return GetToken(MySqlParser.OPTION, i);
        }
        public UserResourceOptionContext[] userResourceOption()
        {
            return GetRuleContexts<UserResourceOptionContext>();
        }
        public UserResourceOptionContext userResourceOption(int i)
        {
            return GetRuleContext<UserResourceOptionContext>(i);
        }
        public ITerminalNode[] AND() { return GetTokens(MySqlParser.AND); }
        public ITerminalNode AND(int i)
        {
            return GetToken(MySqlParser.AND, i);
        }
        public GrantStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_grantStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterGrantStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitGrantStatement(this);
        }
    }

    [RuleVersion(0)]
    public GrantStatementContext grantStatement()
    {
        GrantStatementContext _localctx = new GrantStatementContext(Context, State);
        EnterRule(_localctx, 388, RULE_grantStatement);
        int _la;
        try
        {
            int _alt;
            EnterOuterAlt(_localctx, 1);
            {
                State = 4460; Match(GRANT);
                State = 4461; privelegeClause();
                State = 4466;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while (_la == COMMA)
                {
                    {
                        {
                            State = 4462; Match(COMMA);
                            State = 4463; privelegeClause();
                        }
                    }
                    State = 4468;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
                State = 4469; Match(ON);
                State = 4471;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 649, Context))
                {
                    case 1:
                        {
                            State = 4470;
                            _localctx.privilegeObject = TokenStream.LT(1);
                            _la = TokenStream.LA(1);
                            if (!(_la == PROCEDURE || _la == TABLE || _la == FUNCTION))
                            {
                                _localctx.privilegeObject = ErrorHandler.RecoverInline(this);
                            }
                            else
                            {
                                ErrorHandler.ReportMatch(this);
                                Consume();
                            }
                        }
                        break;
                }
                State = 4473; privilegeLevel();
                State = 4474; Match(TO);
                State = 4475; userAuthOption();
                State = 4480;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while (_la == COMMA)
                {
                    {
                        {
                            State = 4476; Match(COMMA);
                            State = 4477; userAuthOption();
                        }
                    }
                    State = 4482;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
                State = 4497;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == REQUIRE)
                {
                    {
                        State = 4483; Match(REQUIRE);
                        State = 4495;
                        ErrorHandler.Sync(this);
                        switch (TokenStream.LA(1))
                        {
                            case NONE:
                                {
                                    State = 4484; _localctx.tlsNone = Match(NONE);
                                }
                                break;
                            case SSL:
                            case CIPHER:
                            case ISSUER:
                            case SUBJECT:
                            case X509:
                                {
                                    State = 4485; tlsOption();
                                    State = 4492;
                                    ErrorHandler.Sync(this);
                                    _la = TokenStream.LA(1);
                                    while (_la == AND || _la == SSL || _la == CIPHER || _la == ISSUER || _la == SUBJECT || _la == X509)
                                    {
                                        {
                                            {
                                                State = 4487;
                                                ErrorHandler.Sync(this);
                                                _la = TokenStream.LA(1);
                                                if (_la == AND)
                                                {
                                                    {
                                                        State = 4486; Match(AND);
                                                    }
                                                }

                                                State = 4489; tlsOption();
                                            }
                                        }
                                        State = 4494;
                                        ErrorHandler.Sync(this);
                                        _la = TokenStream.LA(1);
                                    }
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }
                }

                State = 4508;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == WITH)
                {
                    {
                        State = 4499; Match(WITH);
                        State = 4505;
                        ErrorHandler.Sync(this);
                        _alt = Interpreter.AdaptivePredict(TokenStream, 656, Context);
                        while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                        {
                            if (_alt == 1)
                            {
                                {
                                    State = 4503;
                                    ErrorHandler.Sync(this);
                                    switch (TokenStream.LA(1))
                                    {
                                        case GRANT:
                                            {
                                                State = 4500; Match(GRANT);
                                                State = 4501; Match(OPTION);
                                            }
                                            break;
                                        case MAX_CONNECTIONS_PER_HOUR:
                                        case MAX_QUERIES_PER_HOUR:
                                        case MAX_UPDATES_PER_HOUR:
                                        case MAX_USER_CONNECTIONS:
                                            {
                                                State = 4502; userResourceOption();
                                            }
                                            break;
                                        default:
                                            throw new NoViableAltException(this);
                                    }
                                }
                            }
                            State = 4507;
                            ErrorHandler.Sync(this);
                            _alt = Interpreter.AdaptivePredict(TokenStream, 656, Context);
                        }
                    }
                }

            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class GrantProxyContext : ParserRuleContext
    {
        public UserNameContext fromFirst;
        public UserNameContext toFirst;
        public UserNameContext _userName;
        public IList<UserNameContext> _toOther = new List<UserNameContext>();
        public ITerminalNode[] GRANT() { return GetTokens(MySqlParser.GRANT); }
        public ITerminalNode GRANT(int i)
        {
            return GetToken(MySqlParser.GRANT, i);
        }
        public ITerminalNode PROXY() { return GetToken(MySqlParser.PROXY, 0); }
        public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
        public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
        public UserNameContext[] userName()
        {
            return GetRuleContexts<UserNameContext>();
        }
        public UserNameContext userName(int i)
        {
            return GetRuleContext<UserNameContext>(i);
        }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
        public ITerminalNode OPTION() { return GetToken(MySqlParser.OPTION, 0); }
        public GrantProxyContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_grantProxy; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterGrantProxy(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitGrantProxy(this);
        }
    }

    [RuleVersion(0)]
    public GrantProxyContext grantProxy()
    {
        GrantProxyContext _localctx = new GrantProxyContext(Context, State);
        EnterRule(_localctx, 390, RULE_grantProxy);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 4510; Match(GRANT);
                State = 4511; Match(PROXY);
                State = 4512; Match(ON);
                State = 4513; _localctx.fromFirst = userName();
                State = 4514; Match(TO);
                State = 4515; _localctx.toFirst = userName();
                State = 4520;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while (_la == COMMA)
                {
                    {
                        {
                            State = 4516; Match(COMMA);
                            State = 4517; _localctx._userName = userName();
                            _localctx._toOther.Add(_localctx._userName);
                        }
                    }
                    State = 4522;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
                State = 4526;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == WITH)
                {
                    {
                        State = 4523; Match(WITH);
                        State = 4524; Match(GRANT);
                        State = 4525; Match(OPTION);
                    }
                }

            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class RenameUserContext : ParserRuleContext
    {
        public ITerminalNode RENAME() { return GetToken(MySqlParser.RENAME, 0); }
        public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
        public RenameUserClauseContext[] renameUserClause()
        {
            return GetRuleContexts<RenameUserClauseContext>();
        }
        public RenameUserClauseContext renameUserClause(int i)
        {
            return GetRuleContext<RenameUserClauseContext>(i);
        }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public RenameUserContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_renameUser; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterRenameUser(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitRenameUser(this);
        }
    }

    [RuleVersion(0)]
    public RenameUserContext renameUser()
    {
        RenameUserContext _localctx = new RenameUserContext(Context, State);
        EnterRule(_localctx, 392, RULE_renameUser);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 4528; Match(RENAME);
                State = 4529; Match(USER);
                State = 4530; renameUserClause();
                State = 4535;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while (_la == COMMA)
                {
                    {
                        {
                            State = 4531; Match(COMMA);
                            State = 4532; renameUserClause();
                        }
                    }
                    State = 4537;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class RevokeStatementContext : ParserRuleContext
    {
        public RevokeStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_revokeStatement; } }

        public RevokeStatementContext() { }
        public virtual void CopyFrom(RevokeStatementContext context)
        {
            base.CopyFrom(context);
        }
    }
    public partial class DetailRevokeContext : RevokeStatementContext
    {
        public IToken privilegeObject;
        public ITerminalNode REVOKE() { return GetToken(MySqlParser.REVOKE, 0); }
        public PrivelegeClauseContext[] privelegeClause()
        {
            return GetRuleContexts<PrivelegeClauseContext>();
        }
        public PrivelegeClauseContext privelegeClause(int i)
        {
            return GetRuleContext<PrivelegeClauseContext>(i);
        }
        public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
        public PrivilegeLevelContext privilegeLevel()
        {
            return GetRuleContext<PrivilegeLevelContext>(0);
        }
        public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
        public UserNameContext[] userName()
        {
            return GetRuleContexts<UserNameContext>();
        }
        public UserNameContext userName(int i)
        {
            return GetRuleContext<UserNameContext>(i);
        }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
        public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
        public ITerminalNode PROCEDURE() { return GetToken(MySqlParser.PROCEDURE, 0); }
        public DetailRevokeContext(RevokeStatementContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterDetailRevoke(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitDetailRevoke(this);
        }
    }
    public partial class ShortRevokeContext : RevokeStatementContext
    {
        public ITerminalNode REVOKE() { return GetToken(MySqlParser.REVOKE, 0); }
        public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public ITerminalNode GRANT() { return GetToken(MySqlParser.GRANT, 0); }
        public ITerminalNode OPTION() { return GetToken(MySqlParser.OPTION, 0); }
        public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
        public UserNameContext[] userName()
        {
            return GetRuleContexts<UserNameContext>();
        }
        public UserNameContext userName(int i)
        {
            return GetRuleContext<UserNameContext>(i);
        }
        public ITerminalNode PRIVILEGES() { return GetToken(MySqlParser.PRIVILEGES, 0); }
        public ShortRevokeContext(RevokeStatementContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterShortRevoke(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitShortRevoke(this);
        }
    }

    [RuleVersion(0)]
    public RevokeStatementContext revokeStatement()
    {
        RevokeStatementContext _localctx = new RevokeStatementContext(Context, State);
        EnterRule(_localctx, 394, RULE_revokeStatement);
        int _la;
        try
        {
            State = 4578;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 666, Context))
            {
                case 1:
                    _localctx = new DetailRevokeContext(_localctx);
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 4538; Match(REVOKE);
                        State = 4539; privelegeClause();
                        State = 4544;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        while (_la == COMMA)
                        {
                            {
                                {
                                    State = 4540; Match(COMMA);
                                    State = 4541; privelegeClause();
                                }
                            }
                            State = 4546;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                        }
                        State = 4547; Match(ON);
                        State = 4549;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 662, Context))
                        {
                            case 1:
                                {
                                    State = 4548;
                                    ((DetailRevokeContext)_localctx).privilegeObject = TokenStream.LT(1);
                                    _la = TokenStream.LA(1);
                                    if (!(_la == PROCEDURE || _la == TABLE || _la == FUNCTION))
                                    {
                                        ((DetailRevokeContext)_localctx).privilegeObject = ErrorHandler.RecoverInline(this);
                                    }
                                    else
                                    {
                                        ErrorHandler.ReportMatch(this);
                                        Consume();
                                    }
                                }
                                break;
                        }
                        State = 4551; privilegeLevel();
                        State = 4552; Match(FROM);
                        State = 4553; userName();
                        State = 4558;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        while (_la == COMMA)
                        {
                            {
                                {
                                    State = 4554; Match(COMMA);
                                    State = 4555; userName();
                                }
                            }
                            State = 4560;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                        }
                    }
                    break;
                case 2:
                    _localctx = new ShortRevokeContext(_localctx);
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 4561; Match(REVOKE);
                        State = 4562; Match(ALL);
                        State = 4564;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == PRIVILEGES)
                        {
                            {
                                State = 4563; Match(PRIVILEGES);
                            }
                        }

                        State = 4566; Match(COMMA);
                        State = 4567; Match(GRANT);
                        State = 4568; Match(OPTION);
                        State = 4569; Match(FROM);
                        State = 4570; userName();
                        State = 4575;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        while (_la == COMMA)
                        {
                            {
                                {
                                    State = 4571; Match(COMMA);
                                    State = 4572; userName();
                                }
                            }
                            State = 4577;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                        }
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class RevokeProxyContext : ParserRuleContext
    {
        public UserNameContext onUser;
        public UserNameContext fromFirst;
        public UserNameContext _userName;
        public IList<UserNameContext> _fromOther = new List<UserNameContext>();
        public ITerminalNode REVOKE() { return GetToken(MySqlParser.REVOKE, 0); }
        public ITerminalNode PROXY() { return GetToken(MySqlParser.PROXY, 0); }
        public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
        public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
        public UserNameContext[] userName()
        {
            return GetRuleContexts<UserNameContext>();
        }
        public UserNameContext userName(int i)
        {
            return GetRuleContext<UserNameContext>(i);
        }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public RevokeProxyContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_revokeProxy; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterRevokeProxy(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitRevokeProxy(this);
        }
    }

    [RuleVersion(0)]
    public RevokeProxyContext revokeProxy()
    {
        RevokeProxyContext _localctx = new RevokeProxyContext(Context, State);
        EnterRule(_localctx, 396, RULE_revokeProxy);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 4580; Match(REVOKE);
                State = 4581; Match(PROXY);
                State = 4582; Match(ON);
                State = 4583; _localctx.onUser = userName();
                State = 4584; Match(FROM);
                State = 4585; _localctx.fromFirst = userName();
                State = 4590;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while (_la == COMMA)
                {
                    {
                        {
                            State = 4586; Match(COMMA);
                            State = 4587; _localctx._userName = userName();
                            _localctx._fromOther.Add(_localctx._userName);
                        }
                    }
                    State = 4592;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class SetPasswordStatementContext : ParserRuleContext
    {
        public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
        public ITerminalNode PASSWORD() { return GetToken(MySqlParser.PASSWORD, 0); }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public PasswordFunctionClauseContext passwordFunctionClause()
        {
            return GetRuleContext<PasswordFunctionClauseContext>(0);
        }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
        public UserNameContext userName()
        {
            return GetRuleContext<UserNameContext>(0);
        }
        public SetPasswordStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_setPasswordStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterSetPasswordStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitSetPasswordStatement(this);
        }
    }

    [RuleVersion(0)]
    public SetPasswordStatementContext setPasswordStatement()
    {
        SetPasswordStatementContext _localctx = new SetPasswordStatementContext(Context, State);
        EnterRule(_localctx, 398, RULE_setPasswordStatement);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 4593; Match(SET);
                State = 4594; Match(PASSWORD);
                State = 4597;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == FOR)
                {
                    {
                        State = 4595; Match(FOR);
                        State = 4596; userName();
                    }
                }

                State = 4599; Match(EQUAL_SYMBOL);
                State = 4602;
                ErrorHandler.Sync(this);
                switch (TokenStream.LA(1))
                {
                    case OLD_PASSWORD:
                    case PASSWORD:
                        {
                            State = 4600; passwordFunctionClause();
                        }
                        break;
                    case STRING_LITERAL:
                        {
                            State = 4601; Match(STRING_LITERAL);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class UserSpecificationContext : ParserRuleContext
    {
        public UserNameContext userName()
        {
            return GetRuleContext<UserNameContext>(0);
        }
        public UserPasswordOptionContext userPasswordOption()
        {
            return GetRuleContext<UserPasswordOptionContext>(0);
        }
        public UserSpecificationContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_userSpecification; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterUserSpecification(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitUserSpecification(this);
        }
    }

    [RuleVersion(0)]
    public UserSpecificationContext userSpecification()
    {
        UserSpecificationContext _localctx = new UserSpecificationContext(Context, State);
        EnterRule(_localctx, 400, RULE_userSpecification);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 4604; userName();
                State = 4605; userPasswordOption();
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class UserAuthOptionContext : ParserRuleContext
    {
        public UserAuthOptionContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_userAuthOption; } }

        public UserAuthOptionContext() { }
        public virtual void CopyFrom(UserAuthOptionContext context)
        {
            base.CopyFrom(context);
        }
    }
    public partial class SimpleAuthOptionContext : UserAuthOptionContext
    {
        public UserNameContext userName()
        {
            return GetRuleContext<UserNameContext>(0);
        }
        public SimpleAuthOptionContext(UserAuthOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterSimpleAuthOption(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitSimpleAuthOption(this);
        }
    }
    public partial class PasswordAuthOptionContext : UserAuthOptionContext
    {
        public IToken hashed;
        public UserNameContext userName()
        {
            return GetRuleContext<UserNameContext>(0);
        }
        public ITerminalNode IDENTIFIED() { return GetToken(MySqlParser.IDENTIFIED, 0); }
        public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
        public ITerminalNode PASSWORD() { return GetToken(MySqlParser.PASSWORD, 0); }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public PasswordAuthOptionContext(UserAuthOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterPasswordAuthOption(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitPasswordAuthOption(this);
        }
    }
    public partial class StringAuthOptionContext : UserAuthOptionContext
    {
        public UserNameContext userName()
        {
            return GetRuleContext<UserNameContext>(0);
        }
        public ITerminalNode IDENTIFIED() { return GetToken(MySqlParser.IDENTIFIED, 0); }
        public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
        public AuthPluginContext authPlugin()
        {
            return GetRuleContext<AuthPluginContext>(0);
        }
        public StringAuthOptionContext(UserAuthOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterStringAuthOption(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitStringAuthOption(this);
        }
    }
    public partial class HashAuthOptionContext : UserAuthOptionContext
    {
        public UserNameContext userName()
        {
            return GetRuleContext<UserNameContext>(0);
        }
        public ITerminalNode IDENTIFIED() { return GetToken(MySqlParser.IDENTIFIED, 0); }
        public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
        public AuthPluginContext authPlugin()
        {
            return GetRuleContext<AuthPluginContext>(0);
        }
        public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public HashAuthOptionContext(UserAuthOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterHashAuthOption(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitHashAuthOption(this);
        }
    }

    [RuleVersion(0)]
    public UserAuthOptionContext userAuthOption()
    {
        UserAuthOptionContext _localctx = new UserAuthOptionContext(Context, State);
        EnterRule(_localctx, 402, RULE_userAuthOption);
        int _la;
        try
        {
            State = 4631;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 672, Context))
            {
                case 1:
                    _localctx = new PasswordAuthOptionContext(_localctx);
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 4607; userName();
                        State = 4608; Match(IDENTIFIED);
                        State = 4609; Match(BY);
                        State = 4610; Match(PASSWORD);
                        State = 4611; ((PasswordAuthOptionContext)_localctx).hashed = Match(STRING_LITERAL);
                    }
                    break;
                case 2:
                    _localctx = new StringAuthOptionContext(_localctx);
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 4613; userName();
                        State = 4614; Match(IDENTIFIED);
                        State = 4617;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == WITH)
                        {
                            {
                                State = 4615; Match(WITH);
                                State = 4616; authPlugin();
                            }
                        }

                        State = 4619; Match(BY);
                        State = 4620; Match(STRING_LITERAL);
                    }
                    break;
                case 3:
                    _localctx = new HashAuthOptionContext(_localctx);
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 4622; userName();
                        State = 4623; Match(IDENTIFIED);
                        State = 4624; Match(WITH);
                        State = 4625; authPlugin();
                        State = 4628;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == AS)
                        {
                            {
                                State = 4626; Match(AS);
                                State = 4627; Match(STRING_LITERAL);
                            }
                        }

                    }
                    break;
                case 4:
                    _localctx = new SimpleAuthOptionContext(_localctx);
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 4630; userName();
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class TlsOptionContext : ParserRuleContext
    {
        public ITerminalNode SSL() { return GetToken(MySqlParser.SSL, 0); }
        public ITerminalNode X509() { return GetToken(MySqlParser.X509, 0); }
        public ITerminalNode CIPHER() { return GetToken(MySqlParser.CIPHER, 0); }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public ITerminalNode ISSUER() { return GetToken(MySqlParser.ISSUER, 0); }
        public ITerminalNode SUBJECT() { return GetToken(MySqlParser.SUBJECT, 0); }
        public TlsOptionContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_tlsOption; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterTlsOption(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitTlsOption(this);
        }
    }

    [RuleVersion(0)]
    public TlsOptionContext tlsOption()
    {
        TlsOptionContext _localctx = new TlsOptionContext(Context, State);
        EnterRule(_localctx, 404, RULE_tlsOption);
        try
        {
            State = 4641;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case SSL:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 4633; Match(SSL);
                    }
                    break;
                case X509:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 4634; Match(X509);
                    }
                    break;
                case CIPHER:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 4635; Match(CIPHER);
                        State = 4636; Match(STRING_LITERAL);
                    }
                    break;
                case ISSUER:
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 4637; Match(ISSUER);
                        State = 4638; Match(STRING_LITERAL);
                    }
                    break;
                case SUBJECT:
                    EnterOuterAlt(_localctx, 5);
                    {
                        State = 4639; Match(SUBJECT);
                        State = 4640; Match(STRING_LITERAL);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class UserResourceOptionContext : ParserRuleContext
    {
        public ITerminalNode MAX_QUERIES_PER_HOUR() { return GetToken(MySqlParser.MAX_QUERIES_PER_HOUR, 0); }
        public DecimalLiteralContext decimalLiteral()
        {
            return GetRuleContext<DecimalLiteralContext>(0);
        }
        public ITerminalNode MAX_UPDATES_PER_HOUR() { return GetToken(MySqlParser.MAX_UPDATES_PER_HOUR, 0); }
        public ITerminalNode MAX_CONNECTIONS_PER_HOUR() { return GetToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR, 0); }
        public ITerminalNode MAX_USER_CONNECTIONS() { return GetToken(MySqlParser.MAX_USER_CONNECTIONS, 0); }
        public UserResourceOptionContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_userResourceOption; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterUserResourceOption(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitUserResourceOption(this);
        }
    }

    [RuleVersion(0)]
    public UserResourceOptionContext userResourceOption()
    {
        UserResourceOptionContext _localctx = new UserResourceOptionContext(Context, State);
        EnterRule(_localctx, 406, RULE_userResourceOption);
        try
        {
            State = 4651;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case MAX_QUERIES_PER_HOUR:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 4643; Match(MAX_QUERIES_PER_HOUR);
                        State = 4644; decimalLiteral();
                    }
                    break;
                case MAX_UPDATES_PER_HOUR:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 4645; Match(MAX_UPDATES_PER_HOUR);
                        State = 4646; decimalLiteral();
                    }
                    break;
                case MAX_CONNECTIONS_PER_HOUR:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 4647; Match(MAX_CONNECTIONS_PER_HOUR);
                        State = 4648; decimalLiteral();
                    }
                    break;
                case MAX_USER_CONNECTIONS:
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 4649; Match(MAX_USER_CONNECTIONS);
                        State = 4650; decimalLiteral();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class UserPasswordOptionContext : ParserRuleContext
    {
        public IToken expireType;
        public ITerminalNode PASSWORD() { return GetToken(MySqlParser.PASSWORD, 0); }
        public ITerminalNode EXPIRE() { return GetToken(MySqlParser.EXPIRE, 0); }
        public DecimalLiteralContext decimalLiteral()
        {
            return GetRuleContext<DecimalLiteralContext>(0);
        }
        public ITerminalNode DAY() { return GetToken(MySqlParser.DAY, 0); }
        public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
        public ITerminalNode NEVER() { return GetToken(MySqlParser.NEVER, 0); }
        public ITerminalNode INTERVAL() { return GetToken(MySqlParser.INTERVAL, 0); }
        public UserPasswordOptionContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_userPasswordOption; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterUserPasswordOption(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitUserPasswordOption(this);
        }
    }

    [RuleVersion(0)]
    public UserPasswordOptionContext userPasswordOption()
    {
        UserPasswordOptionContext _localctx = new UserPasswordOptionContext(Context, State);
        EnterRule(_localctx, 408, RULE_userPasswordOption);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 4653; Match(PASSWORD);
                State = 4654; Match(EXPIRE);
                State = 4661;
                ErrorHandler.Sync(this);
                switch (TokenStream.LA(1))
                {
                    case DEFAULT:
                        {
                            State = 4655; _localctx.expireType = Match(DEFAULT);
                        }
                        break;
                    case NEVER:
                        {
                            State = 4656; _localctx.expireType = Match(NEVER);
                        }
                        break;
                    case INTERVAL:
                        {
                            State = 4657; _localctx.expireType = Match(INTERVAL);
                            State = 4658; decimalLiteral();
                            State = 4659; Match(DAY);
                        }
                        break;
                    case Eof:
                    case ALTER:
                    case ANALYZE:
                    case CALL:
                    case CHANGE:
                    case CHECK:
                    case CREATE:
                    case DELETE:
                    case DESC:
                    case DESCRIBE:
                    case DROP:
                    case EXPLAIN:
                    case GET:
                    case GRANT:
                    case INSERT:
                    case KILL:
                    case LOAD:
                    case LOCK:
                    case OPTIMIZE:
                    case PURGE:
                    case RELEASE:
                    case RENAME:
                    case REPLACE:
                    case RESIGNAL:
                    case REVOKE:
                    case SELECT:
                    case SET:
                    case SHOW:
                    case SIGNAL:
                    case UNLOCK:
                    case UPDATE:
                    case USE:
                    case ACCOUNT:
                    case BEGIN:
                    case BINLOG:
                    case CACHE:
                    case CHECKSUM:
                    case COMMIT:
                    case DEALLOCATE:
                    case DO:
                    case FLUSH:
                    case HANDLER:
                    case HELP:
                    case INSTALL:
                    case PASSWORD:
                    case PREPARE:
                    case REPAIR:
                    case RESET:
                    case ROLLBACK:
                    case SAVEPOINT:
                    case START:
                    case STOP:
                    case TRUNCATE:
                    case UNINSTALL:
                    case XA:
                    case EXECUTE:
                    case SHUTDOWN:
                    case MINUSMINUS:
                    case LR_BRACKET:
                    case COMMA:
                    case SEMI:
                        break;
                    default:
                        break;
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class UserLockOptionContext : ParserRuleContext
    {
        public IToken lockType;
        public ITerminalNode ACCOUNT() { return GetToken(MySqlParser.ACCOUNT, 0); }
        public ITerminalNode LOCK() { return GetToken(MySqlParser.LOCK, 0); }
        public ITerminalNode UNLOCK() { return GetToken(MySqlParser.UNLOCK, 0); }
        public UserLockOptionContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_userLockOption; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterUserLockOption(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitUserLockOption(this);
        }
    }

    [RuleVersion(0)]
    public UserLockOptionContext userLockOption()
    {
        UserLockOptionContext _localctx = new UserLockOptionContext(Context, State);
        EnterRule(_localctx, 410, RULE_userLockOption);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 4663; Match(ACCOUNT);
                State = 4664;
                _localctx.lockType = TokenStream.LT(1);
                _la = TokenStream.LA(1);
                if (!(_la == LOCK || _la == UNLOCK))
                {
                    _localctx.lockType = ErrorHandler.RecoverInline(this);
                }
                else
                {
                    ErrorHandler.ReportMatch(this);
                    Consume();
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class PrivelegeClauseContext : ParserRuleContext
    {
        public PrivilegeContext privilege()
        {
            return GetRuleContext<PrivilegeContext>(0);
        }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public UidListContext uidList()
        {
            return GetRuleContext<UidListContext>(0);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public PrivelegeClauseContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_privelegeClause; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterPrivelegeClause(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitPrivelegeClause(this);
        }
    }

    [RuleVersion(0)]
    public PrivelegeClauseContext privelegeClause()
    {
        PrivelegeClauseContext _localctx = new PrivelegeClauseContext(Context, State);
        EnterRule(_localctx, 412, RULE_privelegeClause);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 4666; privilege();
                State = 4671;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == LR_BRACKET)
                {
                    {
                        State = 4667; Match(LR_BRACKET);
                        State = 4668; uidList();
                        State = 4669; Match(RR_BRACKET);
                    }
                }

            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class PrivilegeContext : ParserRuleContext
    {
        public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
        public ITerminalNode PRIVILEGES() { return GetToken(MySqlParser.PRIVILEGES, 0); }
        public ITerminalNode ALTER() { return GetToken(MySqlParser.ALTER, 0); }
        public ITerminalNode ROUTINE() { return GetToken(MySqlParser.ROUTINE, 0); }
        public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
        public ITerminalNode TEMPORARY() { return GetToken(MySqlParser.TEMPORARY, 0); }
        public ITerminalNode TABLES() { return GetToken(MySqlParser.TABLES, 0); }
        public ITerminalNode VIEW() { return GetToken(MySqlParser.VIEW, 0); }
        public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
        public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
        public ITerminalNode DELETE() { return GetToken(MySqlParser.DELETE, 0); }
        public ITerminalNode DROP() { return GetToken(MySqlParser.DROP, 0); }
        public ITerminalNode EVENT() { return GetToken(MySqlParser.EVENT, 0); }
        public ITerminalNode EXECUTE() { return GetToken(MySqlParser.EXECUTE, 0); }
        public ITerminalNode FILE() { return GetToken(MySqlParser.FILE, 0); }
        public ITerminalNode GRANT() { return GetToken(MySqlParser.GRANT, 0); }
        public ITerminalNode OPTION() { return GetToken(MySqlParser.OPTION, 0); }
        public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
        public ITerminalNode INSERT() { return GetToken(MySqlParser.INSERT, 0); }
        public ITerminalNode LOCK() { return GetToken(MySqlParser.LOCK, 0); }
        public ITerminalNode PROCESS() { return GetToken(MySqlParser.PROCESS, 0); }
        public ITerminalNode PROXY() { return GetToken(MySqlParser.PROXY, 0); }
        public ITerminalNode REFERENCES() { return GetToken(MySqlParser.REFERENCES, 0); }
        public ITerminalNode RELOAD() { return GetToken(MySqlParser.RELOAD, 0); }
        public ITerminalNode REPLICATION() { return GetToken(MySqlParser.REPLICATION, 0); }
        public ITerminalNode CLIENT() { return GetToken(MySqlParser.CLIENT, 0); }
        public ITerminalNode SLAVE() { return GetToken(MySqlParser.SLAVE, 0); }
        public ITerminalNode SELECT() { return GetToken(MySqlParser.SELECT, 0); }
        public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
        public ITerminalNode DATABASES() { return GetToken(MySqlParser.DATABASES, 0); }
        public ITerminalNode SHUTDOWN() { return GetToken(MySqlParser.SHUTDOWN, 0); }
        public ITerminalNode SUPER() { return GetToken(MySqlParser.SUPER, 0); }
        public ITerminalNode TRIGGER() { return GetToken(MySqlParser.TRIGGER, 0); }
        public ITerminalNode UPDATE() { return GetToken(MySqlParser.UPDATE, 0); }
        public ITerminalNode USAGE() { return GetToken(MySqlParser.USAGE, 0); }
        public ITerminalNode SESSION_VARIABLES_ADMIN() { return GetToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0); }
        public PrivilegeContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_privilege; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterPrivilege(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitPrivilege(this);
        }
    }

    [RuleVersion(0)]
    public PrivilegeContext privilege()
    {
        PrivilegeContext _localctx = new PrivilegeContext(Context, State);
        EnterRule(_localctx, 414, RULE_privilege);
        int _la;
        try
        {
            State = 4716;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case ALL:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 4673; Match(ALL);
                        State = 4675;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == PRIVILEGES)
                        {
                            {
                                State = 4674; Match(PRIVILEGES);
                            }
                        }

                    }
                    break;
                case ALTER:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 4677; Match(ALTER);
                        State = 4679;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == ROUTINE)
                        {
                            {
                                State = 4678; Match(ROUTINE);
                            }
                        }

                    }
                    break;
                case CREATE:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 4681; Match(CREATE);
                        State = 4688;
                        ErrorHandler.Sync(this);
                        switch (TokenStream.LA(1))
                        {
                            case TEMPORARY:
                                {
                                    State = 4682; Match(TEMPORARY);
                                    State = 4683; Match(TABLES);
                                }
                                break;
                            case ROUTINE:
                                {
                                    State = 4684; Match(ROUTINE);
                                }
                                break;
                            case VIEW:
                                {
                                    State = 4685; Match(VIEW);
                                }
                                break;
                            case USER:
                                {
                                    State = 4686; Match(USER);
                                }
                                break;
                            case TABLESPACE:
                                {
                                    State = 4687; Match(TABLESPACE);
                                }
                                break;
                            case ON:
                            case LR_BRACKET:
                            case COMMA:
                                break;
                            default:
                                break;
                        }
                    }
                    break;
                case DELETE:
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 4690; Match(DELETE);
                    }
                    break;
                case DROP:
                    EnterOuterAlt(_localctx, 5);
                    {
                        State = 4691; Match(DROP);
                    }
                    break;
                case EVENT:
                    EnterOuterAlt(_localctx, 6);
                    {
                        State = 4692; Match(EVENT);
                    }
                    break;
                case EXECUTE:
                    EnterOuterAlt(_localctx, 7);
                    {
                        State = 4693; Match(EXECUTE);
                    }
                    break;
                case FILE:
                    EnterOuterAlt(_localctx, 8);
                    {
                        State = 4694; Match(FILE);
                    }
                    break;
                case GRANT:
                    EnterOuterAlt(_localctx, 9);
                    {
                        State = 4695; Match(GRANT);
                        State = 4696; Match(OPTION);
                    }
                    break;
                case INDEX:
                    EnterOuterAlt(_localctx, 10);
                    {
                        State = 4697; Match(INDEX);
                    }
                    break;
                case INSERT:
                    EnterOuterAlt(_localctx, 11);
                    {
                        State = 4698; Match(INSERT);
                    }
                    break;
                case LOCK:
                    EnterOuterAlt(_localctx, 12);
                    {
                        State = 4699; Match(LOCK);
                        State = 4700; Match(TABLES);
                    }
                    break;
                case PROCESS:
                    EnterOuterAlt(_localctx, 13);
                    {
                        State = 4701; Match(PROCESS);
                    }
                    break;
                case PROXY:
                    EnterOuterAlt(_localctx, 14);
                    {
                        State = 4702; Match(PROXY);
                    }
                    break;
                case REFERENCES:
                    EnterOuterAlt(_localctx, 15);
                    {
                        State = 4703; Match(REFERENCES);
                    }
                    break;
                case RELOAD:
                    EnterOuterAlt(_localctx, 16);
                    {
                        State = 4704; Match(RELOAD);
                    }
                    break;
                case REPLICATION:
                    EnterOuterAlt(_localctx, 17);
                    {
                        State = 4705; Match(REPLICATION);
                        State = 4706;
                        _la = TokenStream.LA(1);
                        if (!(_la == CLIENT || _la == SLAVE))
                        {
                            ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                    break;
                case SELECT:
                    EnterOuterAlt(_localctx, 18);
                    {
                        State = 4707; Match(SELECT);
                    }
                    break;
                case SHOW:
                    EnterOuterAlt(_localctx, 19);
                    {
                        State = 4708; Match(SHOW);
                        State = 4709;
                        _la = TokenStream.LA(1);
                        if (!(_la == DATABASES || _la == VIEW))
                        {
                            ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                    break;
                case SHUTDOWN:
                    EnterOuterAlt(_localctx, 20);
                    {
                        State = 4710; Match(SHUTDOWN);
                    }
                    break;
                case SUPER:
                    EnterOuterAlt(_localctx, 21);
                    {
                        State = 4711; Match(SUPER);
                    }
                    break;
                case TRIGGER:
                    EnterOuterAlt(_localctx, 22);
                    {
                        State = 4712; Match(TRIGGER);
                    }
                    break;
                case UPDATE:
                    EnterOuterAlt(_localctx, 23);
                    {
                        State = 4713; Match(UPDATE);
                    }
                    break;
                case USAGE:
                    EnterOuterAlt(_localctx, 24);
                    {
                        State = 4714; Match(USAGE);
                    }
                    break;
                case SESSION_VARIABLES_ADMIN:
                    EnterOuterAlt(_localctx, 25);
                    {
                        State = 4715; Match(SESSION_VARIABLES_ADMIN);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class PrivilegeLevelContext : ParserRuleContext
    {
        public PrivilegeLevelContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_privilegeLevel; } }

        public PrivilegeLevelContext() { }
        public virtual void CopyFrom(PrivilegeLevelContext context)
        {
            base.CopyFrom(context);
        }
    }
    public partial class DefiniteSchemaPrivLevelContext : PrivilegeLevelContext
    {
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public ITerminalNode DOT() { return GetToken(MySqlParser.DOT, 0); }
        public ITerminalNode STAR() { return GetToken(MySqlParser.STAR, 0); }
        public DefiniteSchemaPrivLevelContext(PrivilegeLevelContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterDefiniteSchemaPrivLevel(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitDefiniteSchemaPrivLevel(this);
        }
    }
    public partial class DefiniteFullTablePrivLevel2Context : PrivilegeLevelContext
    {
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public DottedIdContext dottedId()
        {
            return GetRuleContext<DottedIdContext>(0);
        }
        public DefiniteFullTablePrivLevel2Context(PrivilegeLevelContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterDefiniteFullTablePrivLevel2(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitDefiniteFullTablePrivLevel2(this);
        }
    }
    public partial class DefiniteFullTablePrivLevelContext : PrivilegeLevelContext
    {
        public UidContext[] uid()
        {
            return GetRuleContexts<UidContext>();
        }
        public UidContext uid(int i)
        {
            return GetRuleContext<UidContext>(i);
        }
        public ITerminalNode DOT() { return GetToken(MySqlParser.DOT, 0); }
        public DefiniteFullTablePrivLevelContext(PrivilegeLevelContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterDefiniteFullTablePrivLevel(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitDefiniteFullTablePrivLevel(this);
        }
    }
    public partial class GlobalPrivLevelContext : PrivilegeLevelContext
    {
        public ITerminalNode[] STAR() { return GetTokens(MySqlParser.STAR); }
        public ITerminalNode STAR(int i)
        {
            return GetToken(MySqlParser.STAR, i);
        }
        public ITerminalNode DOT() { return GetToken(MySqlParser.DOT, 0); }
        public GlobalPrivLevelContext(PrivilegeLevelContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterGlobalPrivLevel(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitGlobalPrivLevel(this);
        }
    }
    public partial class DefiniteTablePrivLevelContext : PrivilegeLevelContext
    {
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public DefiniteTablePrivLevelContext(PrivilegeLevelContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterDefiniteTablePrivLevel(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitDefiniteTablePrivLevel(this);
        }
    }
    public partial class CurrentSchemaPriviLevelContext : PrivilegeLevelContext
    {
        public ITerminalNode STAR() { return GetToken(MySqlParser.STAR, 0); }
        public CurrentSchemaPriviLevelContext(PrivilegeLevelContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterCurrentSchemaPriviLevel(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitCurrentSchemaPriviLevel(this);
        }
    }

    [RuleVersion(0)]
    public PrivilegeLevelContext privilegeLevel()
    {
        PrivilegeLevelContext _localctx = new PrivilegeLevelContext(Context, State);
        EnterRule(_localctx, 416, RULE_privilegeLevel);
        try
        {
            State = 4734;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 681, Context))
            {
                case 1:
                    _localctx = new CurrentSchemaPriviLevelContext(_localctx);
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 4718; Match(STAR);
                    }
                    break;
                case 2:
                    _localctx = new GlobalPrivLevelContext(_localctx);
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 4719; Match(STAR);
                        State = 4720; Match(DOT);
                        State = 4721; Match(STAR);
                    }
                    break;
                case 3:
                    _localctx = new DefiniteSchemaPrivLevelContext(_localctx);
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 4722; uid();
                        State = 4723; Match(DOT);
                        State = 4724; Match(STAR);
                    }
                    break;
                case 4:
                    _localctx = new DefiniteFullTablePrivLevelContext(_localctx);
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 4726; uid();
                        State = 4727; Match(DOT);
                        State = 4728; uid();
                    }
                    break;
                case 5:
                    _localctx = new DefiniteFullTablePrivLevel2Context(_localctx);
                    EnterOuterAlt(_localctx, 5);
                    {
                        State = 4730; uid();
                        State = 4731; dottedId();
                    }
                    break;
                case 6:
                    _localctx = new DefiniteTablePrivLevelContext(_localctx);
                    EnterOuterAlt(_localctx, 6);
                    {
                        State = 4733; uid();
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class RenameUserClauseContext : ParserRuleContext
    {
        public UserNameContext fromFirst;
        public UserNameContext toFirst;
        public ITerminalNode TO() { return GetToken(MySqlParser.TO, 0); }
        public UserNameContext[] userName()
        {
            return GetRuleContexts<UserNameContext>();
        }
        public UserNameContext userName(int i)
        {
            return GetRuleContext<UserNameContext>(i);
        }
        public RenameUserClauseContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_renameUserClause; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterRenameUserClause(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitRenameUserClause(this);
        }
    }

    [RuleVersion(0)]
    public RenameUserClauseContext renameUserClause()
    {
        RenameUserClauseContext _localctx = new RenameUserClauseContext(Context, State);
        EnterRule(_localctx, 418, RULE_renameUserClause);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 4736; _localctx.fromFirst = userName();
                State = 4737; Match(TO);
                State = 4738; _localctx.toFirst = userName();
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class AnalyzeTableContext : ParserRuleContext
    {
        public IToken actionOption;
        public ITerminalNode ANALYZE() { return GetToken(MySqlParser.ANALYZE, 0); }
        public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
        public TablesContext tables()
        {
            return GetRuleContext<TablesContext>(0);
        }
        public ITerminalNode NO_WRITE_TO_BINLOG() { return GetToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
        public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
        public AnalyzeTableContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_analyzeTable; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAnalyzeTable(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAnalyzeTable(this);
        }
    }

    [RuleVersion(0)]
    public AnalyzeTableContext analyzeTable()
    {
        AnalyzeTableContext _localctx = new AnalyzeTableContext(Context, State);
        EnterRule(_localctx, 420, RULE_analyzeTable);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 4740; Match(ANALYZE);
                State = 4742;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == NO_WRITE_TO_BINLOG || _la == LOCAL)
                {
                    {
                        State = 4741;
                        _localctx.actionOption = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == NO_WRITE_TO_BINLOG || _la == LOCAL))
                        {
                            _localctx.actionOption = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                }

                State = 4744; Match(TABLE);
                State = 4745; tables();
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class CheckTableContext : ParserRuleContext
    {
        public ITerminalNode CHECK() { return GetToken(MySqlParser.CHECK, 0); }
        public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
        public TablesContext tables()
        {
            return GetRuleContext<TablesContext>(0);
        }
        public CheckTableOptionContext[] checkTableOption()
        {
            return GetRuleContexts<CheckTableOptionContext>();
        }
        public CheckTableOptionContext checkTableOption(int i)
        {
            return GetRuleContext<CheckTableOptionContext>(i);
        }
        public CheckTableContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_checkTable; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterCheckTable(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitCheckTable(this);
        }
    }

    [RuleVersion(0)]
    public CheckTableContext checkTable()
    {
        CheckTableContext _localctx = new CheckTableContext(Context, State);
        EnterRule(_localctx, 422, RULE_checkTable);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 4747; Match(CHECK);
                State = 4748; Match(TABLE);
                State = 4749; tables();
                State = 4753;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while (_la == FOR || _la == CHANGED || _la == EXTENDED || _la == FAST || _la == MEDIUM || _la == QUICK)
                {
                    {
                        {
                            State = 4750; checkTableOption();
                        }
                    }
                    State = 4755;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ChecksumTableContext : ParserRuleContext
    {
        public IToken actionOption;
        public ITerminalNode CHECKSUM() { return GetToken(MySqlParser.CHECKSUM, 0); }
        public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
        public TablesContext tables()
        {
            return GetRuleContext<TablesContext>(0);
        }
        public ITerminalNode QUICK() { return GetToken(MySqlParser.QUICK, 0); }
        public ITerminalNode EXTENDED() { return GetToken(MySqlParser.EXTENDED, 0); }
        public ChecksumTableContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_checksumTable; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterChecksumTable(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitChecksumTable(this);
        }
    }

    [RuleVersion(0)]
    public ChecksumTableContext checksumTable()
    {
        ChecksumTableContext _localctx = new ChecksumTableContext(Context, State);
        EnterRule(_localctx, 424, RULE_checksumTable);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 4756; Match(CHECKSUM);
                State = 4757; Match(TABLE);
                State = 4758; tables();
                State = 4760;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == EXTENDED || _la == QUICK)
                {
                    {
                        State = 4759;
                        _localctx.actionOption = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == EXTENDED || _la == QUICK))
                        {
                            _localctx.actionOption = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                }

            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class OptimizeTableContext : ParserRuleContext
    {
        public IToken actionOption;
        public ITerminalNode OPTIMIZE() { return GetToken(MySqlParser.OPTIMIZE, 0); }
        public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
        public TablesContext tables()
        {
            return GetRuleContext<TablesContext>(0);
        }
        public ITerminalNode NO_WRITE_TO_BINLOG() { return GetToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
        public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
        public OptimizeTableContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_optimizeTable; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterOptimizeTable(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitOptimizeTable(this);
        }
    }

    [RuleVersion(0)]
    public OptimizeTableContext optimizeTable()
    {
        OptimizeTableContext _localctx = new OptimizeTableContext(Context, State);
        EnterRule(_localctx, 426, RULE_optimizeTable);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 4762; Match(OPTIMIZE);
                State = 4764;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == NO_WRITE_TO_BINLOG || _la == LOCAL)
                {
                    {
                        State = 4763;
                        _localctx.actionOption = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == NO_WRITE_TO_BINLOG || _la == LOCAL))
                        {
                            _localctx.actionOption = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                }

                State = 4766; Match(TABLE);
                State = 4767; tables();
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class RepairTableContext : ParserRuleContext
    {
        public IToken actionOption;
        public ITerminalNode REPAIR() { return GetToken(MySqlParser.REPAIR, 0); }
        public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
        public TablesContext tables()
        {
            return GetRuleContext<TablesContext>(0);
        }
        public ITerminalNode QUICK() { return GetToken(MySqlParser.QUICK, 0); }
        public ITerminalNode EXTENDED() { return GetToken(MySqlParser.EXTENDED, 0); }
        public ITerminalNode USE_FRM() { return GetToken(MySqlParser.USE_FRM, 0); }
        public ITerminalNode NO_WRITE_TO_BINLOG() { return GetToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
        public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
        public RepairTableContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_repairTable; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterRepairTable(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitRepairTable(this);
        }
    }

    [RuleVersion(0)]
    public RepairTableContext repairTable()
    {
        RepairTableContext _localctx = new RepairTableContext(Context, State);
        EnterRule(_localctx, 428, RULE_repairTable);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 4769; Match(REPAIR);
                State = 4771;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == NO_WRITE_TO_BINLOG || _la == LOCAL)
                {
                    {
                        State = 4770;
                        _localctx.actionOption = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == NO_WRITE_TO_BINLOG || _la == LOCAL))
                        {
                            _localctx.actionOption = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                }

                State = 4773; Match(TABLE);
                State = 4774; tables();
                State = 4776;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == QUICK)
                {
                    {
                        State = 4775; Match(QUICK);
                    }
                }

                State = 4779;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == EXTENDED)
                {
                    {
                        State = 4778; Match(EXTENDED);
                    }
                }

                State = 4782;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == USE_FRM)
                {
                    {
                        State = 4781; Match(USE_FRM);
                    }
                }

            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class CheckTableOptionContext : ParserRuleContext
    {
        public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
        public ITerminalNode UPGRADE() { return GetToken(MySqlParser.UPGRADE, 0); }
        public ITerminalNode QUICK() { return GetToken(MySqlParser.QUICK, 0); }
        public ITerminalNode FAST() { return GetToken(MySqlParser.FAST, 0); }
        public ITerminalNode MEDIUM() { return GetToken(MySqlParser.MEDIUM, 0); }
        public ITerminalNode EXTENDED() { return GetToken(MySqlParser.EXTENDED, 0); }
        public ITerminalNode CHANGED() { return GetToken(MySqlParser.CHANGED, 0); }
        public CheckTableOptionContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_checkTableOption; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterCheckTableOption(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitCheckTableOption(this);
        }
    }

    [RuleVersion(0)]
    public CheckTableOptionContext checkTableOption()
    {
        CheckTableOptionContext _localctx = new CheckTableOptionContext(Context, State);
        EnterRule(_localctx, 430, RULE_checkTableOption);
        try
        {
            State = 4791;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case FOR:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 4784; Match(FOR);
                        State = 4785; Match(UPGRADE);
                    }
                    break;
                case QUICK:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 4786; Match(QUICK);
                    }
                    break;
                case FAST:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 4787; Match(FAST);
                    }
                    break;
                case MEDIUM:
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 4788; Match(MEDIUM);
                    }
                    break;
                case EXTENDED:
                    EnterOuterAlt(_localctx, 5);
                    {
                        State = 4789; Match(EXTENDED);
                    }
                    break;
                case CHANGED:
                    EnterOuterAlt(_localctx, 6);
                    {
                        State = 4790; Match(CHANGED);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class CreateUdfunctionContext : ParserRuleContext
    {
        public IToken returnType;
        public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
        public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public ITerminalNode RETURNS() { return GetToken(MySqlParser.RETURNS, 0); }
        public ITerminalNode SONAME() { return GetToken(MySqlParser.SONAME, 0); }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public ITerminalNode STRING() { return GetToken(MySqlParser.STRING, 0); }
        public ITerminalNode INTEGER() { return GetToken(MySqlParser.INTEGER, 0); }
        public ITerminalNode REAL() { return GetToken(MySqlParser.REAL, 0); }
        public ITerminalNode DECIMAL() { return GetToken(MySqlParser.DECIMAL, 0); }
        public ITerminalNode AGGREGATE() { return GetToken(MySqlParser.AGGREGATE, 0); }
        public CreateUdfunctionContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_createUdfunction; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterCreateUdfunction(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitCreateUdfunction(this);
        }
    }

    [RuleVersion(0)]
    public CreateUdfunctionContext createUdfunction()
    {
        CreateUdfunctionContext _localctx = new CreateUdfunctionContext(Context, State);
        EnterRule(_localctx, 432, RULE_createUdfunction);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 4793; Match(CREATE);
                State = 4795;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == AGGREGATE)
                {
                    {
                        State = 4794; Match(AGGREGATE);
                    }
                }

                State = 4797; Match(FUNCTION);
                State = 4798; uid();
                State = 4799; Match(RETURNS);
                State = 4800;
                _localctx.returnType = TokenStream.LT(1);
                _la = TokenStream.LA(1);
                if (!(((((_la - 182)) & ~0x3f) == 0 && ((1L << (_la - 182)) & ((1L << (INTEGER - 182)) | (1L << (REAL - 182)) | (1L << (DECIMAL - 182)))) != 0) || _la == STRING))
                {
                    _localctx.returnType = ErrorHandler.RecoverInline(this);
                }
                else
                {
                    ErrorHandler.ReportMatch(this);
                    Consume();
                }
                State = 4801; Match(SONAME);
                State = 4802; Match(STRING_LITERAL);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class InstallPluginContext : ParserRuleContext
    {
        public ITerminalNode INSTALL() { return GetToken(MySqlParser.INSTALL, 0); }
        public ITerminalNode PLUGIN() { return GetToken(MySqlParser.PLUGIN, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public ITerminalNode SONAME() { return GetToken(MySqlParser.SONAME, 0); }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public InstallPluginContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_installPlugin; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterInstallPlugin(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitInstallPlugin(this);
        }
    }

    [RuleVersion(0)]
    public InstallPluginContext installPlugin()
    {
        InstallPluginContext _localctx = new InstallPluginContext(Context, State);
        EnterRule(_localctx, 434, RULE_installPlugin);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 4804; Match(INSTALL);
                State = 4805; Match(PLUGIN);
                State = 4806; uid();
                State = 4807; Match(SONAME);
                State = 4808; Match(STRING_LITERAL);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class UninstallPluginContext : ParserRuleContext
    {
        public ITerminalNode UNINSTALL() { return GetToken(MySqlParser.UNINSTALL, 0); }
        public ITerminalNode PLUGIN() { return GetToken(MySqlParser.PLUGIN, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public UninstallPluginContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_uninstallPlugin; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterUninstallPlugin(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitUninstallPlugin(this);
        }
    }

    [RuleVersion(0)]
    public UninstallPluginContext uninstallPlugin()
    {
        UninstallPluginContext _localctx = new UninstallPluginContext(Context, State);
        EnterRule(_localctx, 436, RULE_uninstallPlugin);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 4810; Match(UNINSTALL);
                State = 4811; Match(PLUGIN);
                State = 4812; uid();
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class SetStatementContext : ParserRuleContext
    {
        public SetStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_setStatement; } }

        public SetStatementContext() { }
        public virtual void CopyFrom(SetStatementContext context)
        {
            base.CopyFrom(context);
        }
    }
    public partial class SetTransactionContext : SetStatementContext
    {
        public SetTransactionStatementContext setTransactionStatement()
        {
            return GetRuleContext<SetTransactionStatementContext>(0);
        }
        public SetTransactionContext(SetStatementContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterSetTransaction(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitSetTransaction(this);
        }
    }
    public partial class SetCharsetContext : SetStatementContext
    {
        public ITerminalNode[] SET() { return GetTokens(MySqlParser.SET); }
        public ITerminalNode SET(int i)
        {
            return GetToken(MySqlParser.SET, i);
        }
        public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
        public ITerminalNode CHARSET() { return GetToken(MySqlParser.CHARSET, 0); }
        public CharsetNameContext charsetName()
        {
            return GetRuleContext<CharsetNameContext>(0);
        }
        public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
        public SetCharsetContext(SetStatementContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterSetCharset(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitSetCharset(this);
        }
    }
    public partial class SetNamesContext : SetStatementContext
    {
        public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
        public ITerminalNode NAMES() { return GetToken(MySqlParser.NAMES, 0); }
        public CharsetNameContext charsetName()
        {
            return GetRuleContext<CharsetNameContext>(0);
        }
        public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
        public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
        public CollationNameContext collationName()
        {
            return GetRuleContext<CollationNameContext>(0);
        }
        public SetNamesContext(SetStatementContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterSetNames(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitSetNames(this);
        }
    }
    public partial class SetPasswordContext : SetStatementContext
    {
        public SetPasswordStatementContext setPasswordStatement()
        {
            return GetRuleContext<SetPasswordStatementContext>(0);
        }
        public SetPasswordContext(SetStatementContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterSetPassword(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitSetPassword(this);
        }
    }
    public partial class SetAutocommitContext : SetStatementContext
    {
        public SetAutocommitStatementContext setAutocommitStatement()
        {
            return GetRuleContext<SetAutocommitStatementContext>(0);
        }
        public SetAutocommitContext(SetStatementContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterSetAutocommit(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitSetAutocommit(this);
        }
    }
    public partial class SetNewValueInsideTriggerContext : SetStatementContext
    {
        public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
        public FullIdContext fullId()
        {
            return GetRuleContext<FullIdContext>(0);
        }
        public ExpressionContext expression()
        {
            return GetRuleContext<ExpressionContext>(0);
        }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public ITerminalNode VAR_ASSIGN() { return GetToken(MySqlParser.VAR_ASSIGN, 0); }
        public SetNewValueInsideTriggerContext(SetStatementContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterSetNewValueInsideTrigger(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitSetNewValueInsideTrigger(this);
        }
    }
    public partial class SetVariableContext : SetStatementContext
    {
        public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
        public VariableClauseContext[] variableClause()
        {
            return GetRuleContexts<VariableClauseContext>();
        }
        public VariableClauseContext variableClause(int i)
        {
            return GetRuleContext<VariableClauseContext>(i);
        }
        public ExpressionContext[] expression()
        {
            return GetRuleContexts<ExpressionContext>();
        }
        public ExpressionContext expression(int i)
        {
            return GetRuleContext<ExpressionContext>(i);
        }
        public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
        public ITerminalNode EQUAL_SYMBOL(int i)
        {
            return GetToken(MySqlParser.EQUAL_SYMBOL, i);
        }
        public ITerminalNode[] VAR_ASSIGN() { return GetTokens(MySqlParser.VAR_ASSIGN); }
        public ITerminalNode VAR_ASSIGN(int i)
        {
            return GetToken(MySqlParser.VAR_ASSIGN, i);
        }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public SetVariableContext(SetStatementContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterSetVariable(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitSetVariable(this);
        }
    }

    [RuleVersion(0)]
    public SetStatementContext setStatement()
    {
        SetStatementContext _localctx = new SetStatementContext(Context, State);
        EnterRule(_localctx, 438, RULE_setStatement);
        int _la;
        try
        {
            State = 4856;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 697, Context))
            {
                case 1:
                    _localctx = new SetVariableContext(_localctx);
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 4814; Match(SET);
                        State = 4815; variableClause();
                        State = 4816;
                        _la = TokenStream.LA(1);
                        if (!(_la == VAR_ASSIGN || _la == EQUAL_SYMBOL))
                        {
                            ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                        State = 4817; expression(0);
                        State = 4825;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        while (_la == COMMA)
                        {
                            {
                                {
                                    State = 4818; Match(COMMA);
                                    State = 4819; variableClause();
                                    State = 4820;
                                    _la = TokenStream.LA(1);
                                    if (!(_la == VAR_ASSIGN || _la == EQUAL_SYMBOL))
                                    {
                                        ErrorHandler.RecoverInline(this);
                                    }
                                    else
                                    {
                                        ErrorHandler.ReportMatch(this);
                                        Consume();
                                    }
                                    State = 4821; expression(0);
                                }
                            }
                            State = 4827;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                        }
                    }
                    break;
                case 2:
                    _localctx = new SetCharsetContext(_localctx);
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 4828; Match(SET);
                        State = 4832;
                        ErrorHandler.Sync(this);
                        switch (TokenStream.LA(1))
                        {
                            case CHARACTER:
                                {
                                    State = 4829; Match(CHARACTER);
                                    State = 4830; Match(SET);
                                }
                                break;
                            case CHARSET:
                                {
                                    State = 4831; Match(CHARSET);
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        State = 4836;
                        ErrorHandler.Sync(this);
                        switch (TokenStream.LA(1))
                        {
                            case BINARY:
                            case ARMSCII8:
                            case ASCII:
                            case BIG5:
                            case CP1250:
                            case CP1251:
                            case CP1256:
                            case CP1257:
                            case CP850:
                            case CP852:
                            case CP866:
                            case CP932:
                            case DEC8:
                            case EUCJPMS:
                            case EUCKR:
                            case GB2312:
                            case GBK:
                            case GEOSTD8:
                            case GREEK:
                            case HEBREW:
                            case HP8:
                            case KEYBCS2:
                            case KOI8R:
                            case KOI8U:
                            case LATIN1:
                            case LATIN2:
                            case LATIN5:
                            case LATIN7:
                            case MACCE:
                            case MACROMAN:
                            case SJIS:
                            case SWE7:
                            case TIS620:
                            case UCS2:
                            case UJIS:
                            case UTF16:
                            case UTF16LE:
                            case UTF32:
                            case UTF8:
                            case UTF8MB3:
                            case UTF8MB4:
                            case CHARSET_REVERSE_QOUTE_STRING:
                            case STRING_LITERAL:
                                {
                                    State = 4834; charsetName();
                                }
                                break;
                            case DEFAULT:
                                {
                                    State = 4835; Match(DEFAULT);
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }
                    break;
                case 3:
                    _localctx = new SetNamesContext(_localctx);
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 4838; Match(SET);
                        State = 4839; Match(NAMES);
                        State = 4846;
                        ErrorHandler.Sync(this);
                        switch (TokenStream.LA(1))
                        {
                            case BINARY:
                            case ARMSCII8:
                            case ASCII:
                            case BIG5:
                            case CP1250:
                            case CP1251:
                            case CP1256:
                            case CP1257:
                            case CP850:
                            case CP852:
                            case CP866:
                            case CP932:
                            case DEC8:
                            case EUCJPMS:
                            case EUCKR:
                            case GB2312:
                            case GBK:
                            case GEOSTD8:
                            case GREEK:
                            case HEBREW:
                            case HP8:
                            case KEYBCS2:
                            case KOI8R:
                            case KOI8U:
                            case LATIN1:
                            case LATIN2:
                            case LATIN5:
                            case LATIN7:
                            case MACCE:
                            case MACROMAN:
                            case SJIS:
                            case SWE7:
                            case TIS620:
                            case UCS2:
                            case UJIS:
                            case UTF16:
                            case UTF16LE:
                            case UTF32:
                            case UTF8:
                            case UTF8MB3:
                            case UTF8MB4:
                            case CHARSET_REVERSE_QOUTE_STRING:
                            case STRING_LITERAL:
                                {
                                    State = 4840; charsetName();
                                    State = 4843;
                                    ErrorHandler.Sync(this);
                                    _la = TokenStream.LA(1);
                                    if (_la == COLLATE)
                                    {
                                        {
                                            State = 4841; Match(COLLATE);
                                            State = 4842; collationName();
                                        }
                                    }

                                }
                                break;
                            case DEFAULT:
                                {
                                    State = 4845; Match(DEFAULT);
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }
                    break;
                case 4:
                    _localctx = new SetPasswordContext(_localctx);
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 4848; setPasswordStatement();
                    }
                    break;
                case 5:
                    _localctx = new SetTransactionContext(_localctx);
                    EnterOuterAlt(_localctx, 5);
                    {
                        State = 4849; setTransactionStatement();
                    }
                    break;
                case 6:
                    _localctx = new SetAutocommitContext(_localctx);
                    EnterOuterAlt(_localctx, 6);
                    {
                        State = 4850; setAutocommitStatement();
                    }
                    break;
                case 7:
                    _localctx = new SetNewValueInsideTriggerContext(_localctx);
                    EnterOuterAlt(_localctx, 7);
                    {
                        State = 4851; Match(SET);
                        State = 4852; fullId();
                        State = 4853;
                        _la = TokenStream.LA(1);
                        if (!(_la == VAR_ASSIGN || _la == EQUAL_SYMBOL))
                        {
                            ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                        State = 4854; expression(0);
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ShowStatementContext : ParserRuleContext
    {
        public ShowStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_showStatement; } }

        public ShowStatementContext() { }
        public virtual void CopyFrom(ShowStatementContext context)
        {
            base.CopyFrom(context);
        }
    }
    public partial class ShowOpenTablesContext : ShowStatementContext
    {
        public IToken schemaFormat;
        public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
        public ITerminalNode OPEN() { return GetToken(MySqlParser.OPEN, 0); }
        public ITerminalNode TABLES() { return GetToken(MySqlParser.TABLES, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public ShowFilterContext showFilter()
        {
            return GetRuleContext<ShowFilterContext>(0);
        }
        public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
        public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
        public ShowOpenTablesContext(ShowStatementContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterShowOpenTables(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitShowOpenTables(this);
        }
    }
    public partial class ShowGlobalInfoContext : ShowStatementContext
    {
        public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
        public ShowGlobalInfoClauseContext showGlobalInfoClause()
        {
            return GetRuleContext<ShowGlobalInfoClauseContext>(0);
        }
        public ShowGlobalInfoContext(ShowStatementContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterShowGlobalInfo(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitShowGlobalInfo(this);
        }
    }
    public partial class ShowCreateFullIdObjectContext : ShowStatementContext
    {
        public IToken namedEntity;
        public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
        public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
        public FullIdContext fullId()
        {
            return GetRuleContext<FullIdContext>(0);
        }
        public ITerminalNode EVENT() { return GetToken(MySqlParser.EVENT, 0); }
        public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
        public ITerminalNode PROCEDURE() { return GetToken(MySqlParser.PROCEDURE, 0); }
        public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
        public ITerminalNode TRIGGER() { return GetToken(MySqlParser.TRIGGER, 0); }
        public ITerminalNode VIEW() { return GetToken(MySqlParser.VIEW, 0); }
        public ShowCreateFullIdObjectContext(ShowStatementContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterShowCreateFullIdObject(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitShowCreateFullIdObject(this);
        }
    }
    public partial class ShowCreateUserContext : ShowStatementContext
    {
        public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
        public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
        public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
        public UserNameContext userName()
        {
            return GetRuleContext<UserNameContext>(0);
        }
        public ShowCreateUserContext(ShowStatementContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterShowCreateUser(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitShowCreateUser(this);
        }
    }
    public partial class ShowErrorsContext : ShowStatementContext
    {
        public IToken errorFormat;
        public DecimalLiteralContext offset;
        public DecimalLiteralContext rowCount;
        public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
        public ITerminalNode ERRORS() { return GetToken(MySqlParser.ERRORS, 0); }
        public ITerminalNode WARNINGS() { return GetToken(MySqlParser.WARNINGS, 0); }
        public ITerminalNode LIMIT() { return GetToken(MySqlParser.LIMIT, 0); }
        public DecimalLiteralContext[] decimalLiteral()
        {
            return GetRuleContexts<DecimalLiteralContext>();
        }
        public DecimalLiteralContext decimalLiteral(int i)
        {
            return GetRuleContext<DecimalLiteralContext>(i);
        }
        public ITerminalNode COMMA() { return GetToken(MySqlParser.COMMA, 0); }
        public ShowErrorsContext(ShowStatementContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterShowErrors(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitShowErrors(this);
        }
    }
    public partial class ShowCountErrorsContext : ShowStatementContext
    {
        public IToken errorFormat;
        public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
        public ITerminalNode COUNT() { return GetToken(MySqlParser.COUNT, 0); }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public ITerminalNode STAR() { return GetToken(MySqlParser.STAR, 0); }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public ITerminalNode ERRORS() { return GetToken(MySqlParser.ERRORS, 0); }
        public ITerminalNode WARNINGS() { return GetToken(MySqlParser.WARNINGS, 0); }
        public ShowCountErrorsContext(ShowStatementContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterShowCountErrors(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitShowCountErrors(this);
        }
    }
    public partial class ShowObjectFilterContext : ShowStatementContext
    {
        public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
        public ShowCommonEntityContext showCommonEntity()
        {
            return GetRuleContext<ShowCommonEntityContext>(0);
        }
        public ShowFilterContext showFilter()
        {
            return GetRuleContext<ShowFilterContext>(0);
        }
        public ShowObjectFilterContext(ShowStatementContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterShowObjectFilter(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitShowObjectFilter(this);
        }
    }
    public partial class ShowCreateDbContext : ShowStatementContext
    {
        public IToken schemaFormat;
        public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
        public ITerminalNode CREATE() { return GetToken(MySqlParser.CREATE, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public ITerminalNode DATABASE() { return GetToken(MySqlParser.DATABASE, 0); }
        public ITerminalNode SCHEMA() { return GetToken(MySqlParser.SCHEMA, 0); }
        public IfNotExistsContext ifNotExists()
        {
            return GetRuleContext<IfNotExistsContext>(0);
        }
        public ShowCreateDbContext(ShowStatementContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterShowCreateDb(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitShowCreateDb(this);
        }
    }
    public partial class ShowEngineContext : ShowStatementContext
    {
        public IToken engineOption;
        public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
        public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
        public EngineNameContext engineName()
        {
            return GetRuleContext<EngineNameContext>(0);
        }
        public ITerminalNode STATUS() { return GetToken(MySqlParser.STATUS, 0); }
        public ITerminalNode MUTEX() { return GetToken(MySqlParser.MUTEX, 0); }
        public ShowEngineContext(ShowStatementContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterShowEngine(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitShowEngine(this);
        }
    }
    public partial class ShowSchemaFilterContext : ShowStatementContext
    {
        public IToken schemaFormat;
        public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
        public ShowSchemaEntityContext showSchemaEntity()
        {
            return GetRuleContext<ShowSchemaEntityContext>(0);
        }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public ShowFilterContext showFilter()
        {
            return GetRuleContext<ShowFilterContext>(0);
        }
        public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
        public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
        public ShowSchemaFilterContext(ShowStatementContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterShowSchemaFilter(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitShowSchemaFilter(this);
        }
    }
    public partial class ShowIndexesContext : ShowStatementContext
    {
        public IToken indexFormat;
        public IToken tableFormat;
        public IToken schemaFormat;
        public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
        public TableNameContext tableName()
        {
            return GetRuleContext<TableNameContext>(0);
        }
        public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
        public ITerminalNode INDEXES() { return GetToken(MySqlParser.INDEXES, 0); }
        public ITerminalNode KEYS() { return GetToken(MySqlParser.KEYS, 0); }
        public ITerminalNode[] FROM() { return GetTokens(MySqlParser.FROM); }
        public ITerminalNode FROM(int i)
        {
            return GetToken(MySqlParser.FROM, i);
        }
        public ITerminalNode[] IN() { return GetTokens(MySqlParser.IN); }
        public ITerminalNode IN(int i)
        {
            return GetToken(MySqlParser.IN, i);
        }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public ITerminalNode WHERE() { return GetToken(MySqlParser.WHERE, 0); }
        public ExpressionContext expression()
        {
            return GetRuleContext<ExpressionContext>(0);
        }
        public ShowIndexesContext(ShowStatementContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterShowIndexes(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitShowIndexes(this);
        }
    }
    public partial class ShowLogEventsContext : ShowStatementContext
    {
        public IToken logFormat;
        public IToken filename;
        public DecimalLiteralContext fromPosition;
        public DecimalLiteralContext offset;
        public DecimalLiteralContext rowCount;
        public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
        public ITerminalNode EVENTS() { return GetToken(MySqlParser.EVENTS, 0); }
        public ITerminalNode BINLOG() { return GetToken(MySqlParser.BINLOG, 0); }
        public ITerminalNode RELAYLOG() { return GetToken(MySqlParser.RELAYLOG, 0); }
        public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
        public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
        public ITerminalNode LIMIT() { return GetToken(MySqlParser.LIMIT, 0); }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public DecimalLiteralContext[] decimalLiteral()
        {
            return GetRuleContexts<DecimalLiteralContext>();
        }
        public DecimalLiteralContext decimalLiteral(int i)
        {
            return GetRuleContext<DecimalLiteralContext>(i);
        }
        public ITerminalNode COMMA() { return GetToken(MySqlParser.COMMA, 0); }
        public ShowLogEventsContext(ShowStatementContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterShowLogEvents(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitShowLogEvents(this);
        }
    }
    public partial class ShowMasterLogsContext : ShowStatementContext
    {
        public IToken logFormat;
        public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
        public ITerminalNode LOGS() { return GetToken(MySqlParser.LOGS, 0); }
        public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
        public ITerminalNode MASTER() { return GetToken(MySqlParser.MASTER, 0); }
        public ShowMasterLogsContext(ShowStatementContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterShowMasterLogs(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitShowMasterLogs(this);
        }
    }
    public partial class ShowGrantsContext : ShowStatementContext
    {
        public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
        public ITerminalNode GRANTS() { return GetToken(MySqlParser.GRANTS, 0); }
        public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
        public UserNameContext userName()
        {
            return GetRuleContext<UserNameContext>(0);
        }
        public ShowGrantsContext(ShowStatementContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterShowGrants(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitShowGrants(this);
        }
    }
    public partial class ShowSlaveStatusContext : ShowStatementContext
    {
        public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
        public ITerminalNode SLAVE() { return GetToken(MySqlParser.SLAVE, 0); }
        public ITerminalNode STATUS() { return GetToken(MySqlParser.STATUS, 0); }
        public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
        public ITerminalNode CHANNEL() { return GetToken(MySqlParser.CHANNEL, 0); }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public ShowSlaveStatusContext(ShowStatementContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterShowSlaveStatus(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitShowSlaveStatus(this);
        }
    }
    public partial class ShowRoutineContext : ShowStatementContext
    {
        public IToken routine;
        public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
        public ITerminalNode CODE() { return GetToken(MySqlParser.CODE, 0); }
        public FullIdContext fullId()
        {
            return GetRuleContext<FullIdContext>(0);
        }
        public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
        public ITerminalNode PROCEDURE() { return GetToken(MySqlParser.PROCEDURE, 0); }
        public ShowRoutineContext(ShowStatementContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterShowRoutine(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitShowRoutine(this);
        }
    }
    public partial class ShowProfileContext : ShowStatementContext
    {
        public DecimalLiteralContext queryCount;
        public DecimalLiteralContext offset;
        public DecimalLiteralContext rowCount;
        public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
        public ITerminalNode PROFILE() { return GetToken(MySqlParser.PROFILE, 0); }
        public ShowProfileTypeContext[] showProfileType()
        {
            return GetRuleContexts<ShowProfileTypeContext>();
        }
        public ShowProfileTypeContext showProfileType(int i)
        {
            return GetRuleContext<ShowProfileTypeContext>(i);
        }
        public ITerminalNode LIMIT() { return GetToken(MySqlParser.LIMIT, 0); }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
        public ITerminalNode QUERY() { return GetToken(MySqlParser.QUERY, 0); }
        public DecimalLiteralContext[] decimalLiteral()
        {
            return GetRuleContexts<DecimalLiteralContext>();
        }
        public DecimalLiteralContext decimalLiteral(int i)
        {
            return GetRuleContext<DecimalLiteralContext>(i);
        }
        public ShowProfileContext(ShowStatementContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterShowProfile(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitShowProfile(this);
        }
    }
    public partial class ShowColumnsContext : ShowStatementContext
    {
        public IToken columnsFormat;
        public IToken tableFormat;
        public IToken schemaFormat;
        public ITerminalNode SHOW() { return GetToken(MySqlParser.SHOW, 0); }
        public TableNameContext tableName()
        {
            return GetRuleContext<TableNameContext>(0);
        }
        public ITerminalNode COLUMNS() { return GetToken(MySqlParser.COLUMNS, 0); }
        public ITerminalNode FIELDS() { return GetToken(MySqlParser.FIELDS, 0); }
        public ITerminalNode[] FROM() { return GetTokens(MySqlParser.FROM); }
        public ITerminalNode FROM(int i)
        {
            return GetToken(MySqlParser.FROM, i);
        }
        public ITerminalNode[] IN() { return GetTokens(MySqlParser.IN); }
        public ITerminalNode IN(int i)
        {
            return GetToken(MySqlParser.IN, i);
        }
        public ITerminalNode FULL() { return GetToken(MySqlParser.FULL, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public ShowFilterContext showFilter()
        {
            return GetRuleContext<ShowFilterContext>(0);
        }
        public ShowColumnsContext(ShowStatementContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterShowColumns(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitShowColumns(this);
        }
    }

    [RuleVersion(0)]
    public ShowStatementContext showStatement()
    {
        ShowStatementContext _localctx = new ShowStatementContext(Context, State);
        EnterRule(_localctx, 440, RULE_showStatement);
        int _la;
        try
        {
            State = 5009;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 719, Context))
            {
                case 1:
                    _localctx = new ShowMasterLogsContext(_localctx);
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 4858; Match(SHOW);
                        State = 4859;
                        ((ShowMasterLogsContext)_localctx).logFormat = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == BINARY || _la == MASTER))
                        {
                            ((ShowMasterLogsContext)_localctx).logFormat = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                        State = 4860; Match(LOGS);
                    }
                    break;
                case 2:
                    _localctx = new ShowLogEventsContext(_localctx);
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 4861; Match(SHOW);
                        State = 4862;
                        ((ShowLogEventsContext)_localctx).logFormat = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == BINLOG || _la == RELAYLOG))
                        {
                            ((ShowLogEventsContext)_localctx).logFormat = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                        State = 4863; Match(EVENTS);
                        State = 4866;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == IN)
                        {
                            {
                                State = 4864; Match(IN);
                                State = 4865; ((ShowLogEventsContext)_localctx).filename = Match(STRING_LITERAL);
                            }
                        }

                        State = 4870;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == FROM)
                        {
                            {
                                State = 4868; Match(FROM);
                                State = 4869; ((ShowLogEventsContext)_localctx).fromPosition = decimalLiteral();
                            }
                        }

                        State = 4879;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == LIMIT)
                        {
                            {
                                State = 4872; Match(LIMIT);
                                State = 4876;
                                ErrorHandler.Sync(this);
                                switch (Interpreter.AdaptivePredict(TokenStream, 700, Context))
                                {
                                    case 1:
                                        {
                                            State = 4873; ((ShowLogEventsContext)_localctx).offset = decimalLiteral();
                                            State = 4874; Match(COMMA);
                                        }
                                        break;
                                }
                                State = 4878; ((ShowLogEventsContext)_localctx).rowCount = decimalLiteral();
                            }
                        }

                    }
                    break;
                case 3:
                    _localctx = new ShowObjectFilterContext(_localctx);
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 4881; Match(SHOW);
                        State = 4882; showCommonEntity();
                        State = 4884;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == LIKE || _la == WHERE)
                        {
                            {
                                State = 4883; showFilter();
                            }
                        }

                    }
                    break;
                case 4:
                    _localctx = new ShowColumnsContext(_localctx);
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 4886; Match(SHOW);
                        State = 4888;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == FULL)
                        {
                            {
                                State = 4887; Match(FULL);
                            }
                        }

                        State = 4890;
                        ((ShowColumnsContext)_localctx).columnsFormat = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == COLUMNS || _la == FIELDS))
                        {
                            ((ShowColumnsContext)_localctx).columnsFormat = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                        State = 4891;
                        ((ShowColumnsContext)_localctx).tableFormat = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == FROM || _la == IN))
                        {
                            ((ShowColumnsContext)_localctx).tableFormat = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                        State = 4892; tableName();
                        State = 4895;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == FROM || _la == IN)
                        {
                            {
                                State = 4893;
                                ((ShowColumnsContext)_localctx).schemaFormat = TokenStream.LT(1);
                                _la = TokenStream.LA(1);
                                if (!(_la == FROM || _la == IN))
                                {
                                    ((ShowColumnsContext)_localctx).schemaFormat = ErrorHandler.RecoverInline(this);
                                }
                                else
                                {
                                    ErrorHandler.ReportMatch(this);
                                    Consume();
                                }
                                State = 4894; uid();
                            }
                        }

                        State = 4898;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == LIKE || _la == WHERE)
                        {
                            {
                                State = 4897; showFilter();
                            }
                        }

                    }
                    break;
                case 5:
                    _localctx = new ShowCreateDbContext(_localctx);
                    EnterOuterAlt(_localctx, 5);
                    {
                        State = 4900; Match(SHOW);
                        State = 4901; Match(CREATE);
                        State = 4902;
                        ((ShowCreateDbContext)_localctx).schemaFormat = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == DATABASE || _la == SCHEMA))
                        {
                            ((ShowCreateDbContext)_localctx).schemaFormat = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                        State = 4904;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == IF)
                        {
                            {
                                State = 4903; ifNotExists();
                            }
                        }

                        State = 4906; uid();
                    }
                    break;
                case 6:
                    _localctx = new ShowCreateFullIdObjectContext(_localctx);
                    EnterOuterAlt(_localctx, 6);
                    {
                        State = 4907; Match(SHOW);
                        State = 4908; Match(CREATE);
                        State = 4909;
                        ((ShowCreateFullIdObjectContext)_localctx).namedEntity = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(((((_la - 117)) & ~0x3f) == 0 && ((1L << (_la - 117)) & ((1L << (PROCEDURE - 117)) | (1L << (TABLE - 117)) | (1L << (TRIGGER - 117)))) != 0) || _la == EVENT || _la == FUNCTION || _la == VIEW))
                        {
                            ((ShowCreateFullIdObjectContext)_localctx).namedEntity = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                        State = 4910; fullId();
                    }
                    break;
                case 7:
                    _localctx = new ShowCreateUserContext(_localctx);
                    EnterOuterAlt(_localctx, 7);
                    {
                        State = 4911; Match(SHOW);
                        State = 4912; Match(CREATE);
                        State = 4913; Match(USER);
                        State = 4914; userName();
                    }
                    break;
                case 8:
                    _localctx = new ShowEngineContext(_localctx);
                    EnterOuterAlt(_localctx, 8);
                    {
                        State = 4915; Match(SHOW);
                        State = 4916; Match(ENGINE);
                        State = 4917; engineName();
                        State = 4918;
                        ((ShowEngineContext)_localctx).engineOption = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == MUTEX || _la == STATUS))
                        {
                            ((ShowEngineContext)_localctx).engineOption = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                    break;
                case 9:
                    _localctx = new ShowGlobalInfoContext(_localctx);
                    EnterOuterAlt(_localctx, 9);
                    {
                        State = 4920; Match(SHOW);
                        State = 4921; showGlobalInfoClause();
                    }
                    break;
                case 10:
                    _localctx = new ShowErrorsContext(_localctx);
                    EnterOuterAlt(_localctx, 10);
                    {
                        State = 4922; Match(SHOW);
                        State = 4923;
                        ((ShowErrorsContext)_localctx).errorFormat = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == ERRORS || _la == WARNINGS))
                        {
                            ((ShowErrorsContext)_localctx).errorFormat = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                        {
                            State = 4924; Match(LIMIT);
                            State = 4928;
                            ErrorHandler.Sync(this);
                            switch (Interpreter.AdaptivePredict(TokenStream, 707, Context))
                            {
                                case 1:
                                    {
                                        State = 4925; ((ShowErrorsContext)_localctx).offset = decimalLiteral();
                                        State = 4926; Match(COMMA);
                                    }
                                    break;
                            }
                            State = 4930; ((ShowErrorsContext)_localctx).rowCount = decimalLiteral();
                        }
                    }
                    break;
                case 11:
                    _localctx = new ShowCountErrorsContext(_localctx);
                    EnterOuterAlt(_localctx, 11);
                    {
                        State = 4931; Match(SHOW);
                        State = 4932; Match(COUNT);
                        State = 4933; Match(LR_BRACKET);
                        State = 4934; Match(STAR);
                        State = 4935; Match(RR_BRACKET);
                        State = 4936;
                        ((ShowCountErrorsContext)_localctx).errorFormat = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == ERRORS || _la == WARNINGS))
                        {
                            ((ShowCountErrorsContext)_localctx).errorFormat = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                    break;
                case 12:
                    _localctx = new ShowSchemaFilterContext(_localctx);
                    EnterOuterAlt(_localctx, 12);
                    {
                        State = 4937; Match(SHOW);
                        State = 4938; showSchemaEntity();
                        State = 4941;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == FROM || _la == IN)
                        {
                            {
                                State = 4939;
                                ((ShowSchemaFilterContext)_localctx).schemaFormat = TokenStream.LT(1);
                                _la = TokenStream.LA(1);
                                if (!(_la == FROM || _la == IN))
                                {
                                    ((ShowSchemaFilterContext)_localctx).schemaFormat = ErrorHandler.RecoverInline(this);
                                }
                                else
                                {
                                    ErrorHandler.ReportMatch(this);
                                    Consume();
                                }
                                State = 4940; uid();
                            }
                        }

                        State = 4944;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == LIKE || _la == WHERE)
                        {
                            {
                                State = 4943; showFilter();
                            }
                        }

                    }
                    break;
                case 13:
                    _localctx = new ShowRoutineContext(_localctx);
                    EnterOuterAlt(_localctx, 13);
                    {
                        State = 4946; Match(SHOW);
                        State = 4947;
                        ((ShowRoutineContext)_localctx).routine = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == PROCEDURE || _la == FUNCTION))
                        {
                            ((ShowRoutineContext)_localctx).routine = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                        State = 4948; Match(CODE);
                        State = 4949; fullId();
                    }
                    break;
                case 14:
                    _localctx = new ShowGrantsContext(_localctx);
                    EnterOuterAlt(_localctx, 14);
                    {
                        State = 4950; Match(SHOW);
                        State = 4951; Match(GRANTS);
                        State = 4954;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == FOR)
                        {
                            {
                                State = 4952; Match(FOR);
                                State = 4953; userName();
                            }
                        }

                    }
                    break;
                case 15:
                    _localctx = new ShowIndexesContext(_localctx);
                    EnterOuterAlt(_localctx, 15);
                    {
                        State = 4956; Match(SHOW);
                        State = 4957;
                        ((ShowIndexesContext)_localctx).indexFormat = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == INDEX || _la == KEYS || _la == INDEXES))
                        {
                            ((ShowIndexesContext)_localctx).indexFormat = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                        State = 4958;
                        ((ShowIndexesContext)_localctx).tableFormat = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == FROM || _la == IN))
                        {
                            ((ShowIndexesContext)_localctx).tableFormat = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                        State = 4959; tableName();
                        State = 4962;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == FROM || _la == IN)
                        {
                            {
                                State = 4960;
                                ((ShowIndexesContext)_localctx).schemaFormat = TokenStream.LT(1);
                                _la = TokenStream.LA(1);
                                if (!(_la == FROM || _la == IN))
                                {
                                    ((ShowIndexesContext)_localctx).schemaFormat = ErrorHandler.RecoverInline(this);
                                }
                                else
                                {
                                    ErrorHandler.ReportMatch(this);
                                    Consume();
                                }
                                State = 4961; uid();
                            }
                        }

                        State = 4966;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == WHERE)
                        {
                            {
                                State = 4964; Match(WHERE);
                                State = 4965; expression(0);
                            }
                        }

                    }
                    break;
                case 16:
                    _localctx = new ShowOpenTablesContext(_localctx);
                    EnterOuterAlt(_localctx, 16);
                    {
                        State = 4968; Match(SHOW);
                        State = 4969; Match(OPEN);
                        State = 4970; Match(TABLES);
                        State = 4973;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == FROM || _la == IN)
                        {
                            {
                                State = 4971;
                                ((ShowOpenTablesContext)_localctx).schemaFormat = TokenStream.LT(1);
                                _la = TokenStream.LA(1);
                                if (!(_la == FROM || _la == IN))
                                {
                                    ((ShowOpenTablesContext)_localctx).schemaFormat = ErrorHandler.RecoverInline(this);
                                }
                                else
                                {
                                    ErrorHandler.ReportMatch(this);
                                    Consume();
                                }
                                State = 4972; uid();
                            }
                        }

                        State = 4976;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == LIKE || _la == WHERE)
                        {
                            {
                                State = 4975; showFilter();
                            }
                        }

                    }
                    break;
                case 17:
                    _localctx = new ShowProfileContext(_localctx);
                    EnterOuterAlt(_localctx, 17);
                    {
                        State = 4978; Match(SHOW);
                        State = 4979; Match(PROFILE);
                        State = 4980; showProfileType();
                        State = 4985;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        while (_la == COMMA)
                        {
                            {
                                {
                                    State = 4981; Match(COMMA);
                                    State = 4982; showProfileType();
                                }
                            }
                            State = 4987;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                        }
                        State = 4991;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == FOR)
                        {
                            {
                                State = 4988; Match(FOR);
                                State = 4989; Match(QUERY);
                                State = 4990; ((ShowProfileContext)_localctx).queryCount = decimalLiteral();
                            }
                        }

                        {
                            State = 4993; Match(LIMIT);
                            State = 4997;
                            ErrorHandler.Sync(this);
                            switch (Interpreter.AdaptivePredict(TokenStream, 717, Context))
                            {
                                case 1:
                                    {
                                        State = 4994; ((ShowProfileContext)_localctx).offset = decimalLiteral();
                                        State = 4995; Match(COMMA);
                                    }
                                    break;
                            }
                            State = 4999; ((ShowProfileContext)_localctx).rowCount = decimalLiteral();
                        }
                    }
                    break;
                case 18:
                    _localctx = new ShowSlaveStatusContext(_localctx);
                    EnterOuterAlt(_localctx, 18);
                    {
                        State = 5001; Match(SHOW);
                        State = 5002; Match(SLAVE);
                        State = 5003; Match(STATUS);
                        State = 5007;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == FOR)
                        {
                            {
                                State = 5004; Match(FOR);
                                State = 5005; Match(CHANNEL);
                                State = 5006; Match(STRING_LITERAL);
                            }
                        }

                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class VariableClauseContext : ParserRuleContext
    {
        public ITerminalNode LOCAL_ID() { return GetToken(MySqlParser.LOCAL_ID, 0); }
        public ITerminalNode GLOBAL_ID() { return GetToken(MySqlParser.GLOBAL_ID, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public ITerminalNode GLOBAL() { return GetToken(MySqlParser.GLOBAL, 0); }
        public ITerminalNode SESSION() { return GetToken(MySqlParser.SESSION, 0); }
        public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
        public ITerminalNode[] AT_SIGN() { return GetTokens(MySqlParser.AT_SIGN); }
        public ITerminalNode AT_SIGN(int i)
        {
            return GetToken(MySqlParser.AT_SIGN, i);
        }
        public VariableClauseContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_variableClause; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterVariableClause(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitVariableClause(this);
        }
    }

    [RuleVersion(0)]
    public VariableClauseContext variableClause()
    {
        VariableClauseContext _localctx = new VariableClauseContext(Context, State);
        EnterRule(_localctx, 442, RULE_variableClause);
        int _la;
        try
        {
            State = 5021;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case LOCAL_ID:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 5011; Match(LOCAL_ID);
                    }
                    break;
                case GLOBAL_ID:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 5012; Match(GLOBAL_ID);
                    }
                    break;
                case CURRENT:
                case DATABASE:
                case DIAGNOSTICS:
                case LEFT:
                case NUMBER:
                case RIGHT:
                case STACKED:
                case DATE:
                case TIME:
                case TIMESTAMP:
                case DATETIME:
                case YEAR:
                case TEXT:
                case ENUM:
                case SERIAL:
                case COUNT:
                case POSITION:
                case ACCOUNT:
                case ACTION:
                case AFTER:
                case AGGREGATE:
                case ALGORITHM:
                case ANY:
                case AT:
                case AUTHORS:
                case AUTOCOMMIT:
                case AUTOEXTEND_SIZE:
                case AUTO_INCREMENT:
                case AVG_ROW_LENGTH:
                case BEGIN:
                case BINLOG:
                case BIT:
                case BLOCK:
                case BOOL:
                case BOOLEAN:
                case BTREE:
                case CACHE:
                case CASCADED:
                case CHAIN:
                case CHANGED:
                case CHANNEL:
                case CHECKSUM:
                case PAGE_CHECKSUM:
                case CIPHER:
                case CLASS_ORIGIN:
                case CLIENT:
                case CLOSE:
                case COALESCE:
                case CODE:
                case COLUMNS:
                case COLUMN_FORMAT:
                case COLUMN_NAME:
                case COMMENT:
                case COMMIT:
                case COMPACT:
                case COMPLETION:
                case COMPRESSED:
                case COMPRESSION:
                case CONCURRENT:
                case CONNECTION:
                case CONSISTENT:
                case CONSTRAINT_CATALOG:
                case CONSTRAINT_SCHEMA:
                case CONSTRAINT_NAME:
                case CONTAINS:
                case CONTEXT:
                case CONTRIBUTORS:
                case COPY:
                case CPU:
                case CURSOR_NAME:
                case DATA:
                case DATAFILE:
                case DEALLOCATE:
                case DEFAULT_AUTH:
                case DEFINER:
                case DELAY_KEY_WRITE:
                case DES_KEY_FILE:
                case DIRECTORY:
                case DISABLE:
                case DISCARD:
                case DISK:
                case DO:
                case DUMPFILE:
                case DUPLICATE:
                case DYNAMIC:
                case ENABLE:
                case ENCRYPTION:
                case END:
                case ENDS:
                case ENGINE:
                case ENGINES:
                case ERROR:
                case ERRORS:
                case ESCAPE:
                case EVEN:
                case EVENT:
                case EVENTS:
                case EVERY:
                case EXCHANGE:
                case EXCLUSIVE:
                case EXPIRE:
                case EXPORT:
                case EXTENDED:
                case EXTENT_SIZE:
                case FAST:
                case FAULTS:
                case FIELDS:
                case FILE_BLOCK_SIZE:
                case FILTER:
                case FIRST:
                case FIXED:
                case FLUSH:
                case FOLLOWS:
                case FOUND:
                case FULL:
                case FUNCTION:
                case GENERAL:
                case GLOBAL:
                case GRANTS:
                case GROUP_REPLICATION:
                case HANDLER:
                case HASH:
                case HELP:
                case HOST:
                case HOSTS:
                case IDENTIFIED:
                case IGNORE_SERVER_IDS:
                case IMPORT:
                case INDEXES:
                case INITIAL_SIZE:
                case INPLACE:
                case INSERT_METHOD:
                case INSTALL:
                case INSTANCE:
                case INVISIBLE:
                case INVOKER:
                case IO:
                case IO_THREAD:
                case IPC:
                case ISOLATION:
                case ISSUER:
                case JSON:
                case KEY_BLOCK_SIZE:
                case LANGUAGE:
                case LAST:
                case LEAVES:
                case LESS:
                case LEVEL:
                case LIST:
                case LOCAL:
                case LOGFILE:
                case LOGS:
                case MASTER:
                case MASTER_AUTO_POSITION:
                case MASTER_CONNECT_RETRY:
                case MASTER_DELAY:
                case MASTER_HEARTBEAT_PERIOD:
                case MASTER_HOST:
                case MASTER_LOG_FILE:
                case MASTER_LOG_POS:
                case MASTER_PASSWORD:
                case MASTER_PORT:
                case MASTER_RETRY_COUNT:
                case MASTER_SSL:
                case MASTER_SSL_CA:
                case MASTER_SSL_CAPATH:
                case MASTER_SSL_CERT:
                case MASTER_SSL_CIPHER:
                case MASTER_SSL_CRL:
                case MASTER_SSL_CRLPATH:
                case MASTER_SSL_KEY:
                case MASTER_TLS_VERSION:
                case MASTER_USER:
                case MAX_CONNECTIONS_PER_HOUR:
                case MAX_QUERIES_PER_HOUR:
                case MAX_ROWS:
                case MAX_SIZE:
                case MAX_UPDATES_PER_HOUR:
                case MAX_USER_CONNECTIONS:
                case MEDIUM:
                case MERGE:
                case MESSAGE_TEXT:
                case MID:
                case MIGRATE:
                case MIN_ROWS:
                case MODE:
                case MODIFY:
                case MUTEX:
                case MYSQL:
                case MYSQL_ERRNO:
                case NAME:
                case NAMES:
                case NCHAR:
                case NEVER:
                case NEXT:
                case NO:
                case NODEGROUP:
                case NONE:
                case OFFLINE:
                case OFFSET:
                case OJ:
                case OLD_PASSWORD:
                case ONE:
                case ONLINE:
                case ONLY:
                case OPEN:
                case OPTIMIZER_COSTS:
                case OPTIONS:
                case OWNER:
                case PACK_KEYS:
                case PAGE:
                case PARSER:
                case PARTIAL:
                case PARTITIONING:
                case PARTITIONS:
                case PASSWORD:
                case PHASE:
                case PLUGIN:
                case PLUGIN_DIR:
                case PLUGINS:
                case PORT:
                case PRECEDES:
                case PREPARE:
                case PRESERVE:
                case PREV:
                case PROCESSLIST:
                case PROFILE:
                case PROFILES:
                case PROXY:
                case QUERY:
                case QUICK:
                case REBUILD:
                case RECOVER:
                case REDO_BUFFER_SIZE:
                case REDUNDANT:
                case RELAY:
                case RELAY_LOG_FILE:
                case RELAY_LOG_POS:
                case RELAYLOG:
                case REMOVE:
                case REORGANIZE:
                case REPAIR:
                case REPLICATE_DO_DB:
                case REPLICATE_DO_TABLE:
                case REPLICATE_IGNORE_DB:
                case REPLICATE_IGNORE_TABLE:
                case REPLICATE_REWRITE_DB:
                case REPLICATE_WILD_DO_TABLE:
                case REPLICATE_WILD_IGNORE_TABLE:
                case REPLICATION:
                case RESET:
                case RESUME:
                case RETURNED_SQLSTATE:
                case RETURNS:
                case ROLLBACK:
                case ROLLUP:
                case ROTATE:
                case ROW:
                case ROWS:
                case ROW_FORMAT:
                case SAVEPOINT:
                case SCHEDULE:
                case SECURITY:
                case SERVER:
                case SESSION:
                case SHARE:
                case SHARED:
                case SIGNED:
                case SIMPLE:
                case SLAVE:
                case SLOW:
                case SNAPSHOT:
                case SOCKET:
                case SOME:
                case SONAME:
                case SOUNDS:
                case SOURCE:
                case SQL_AFTER_GTIDS:
                case SQL_AFTER_MTS_GAPS:
                case SQL_BEFORE_GTIDS:
                case SQL_BUFFER_RESULT:
                case SQL_CACHE:
                case SQL_NO_CACHE:
                case SQL_THREAD:
                case START:
                case STARTS:
                case STATS_AUTO_RECALC:
                case STATS_PERSISTENT:
                case STATS_SAMPLE_PAGES:
                case STATUS:
                case STOP:
                case STORAGE:
                case STRING:
                case SUBCLASS_ORIGIN:
                case SUBJECT:
                case SUBPARTITION:
                case SUBPARTITIONS:
                case SUSPEND:
                case SWAPS:
                case SWITCHES:
                case TABLE_NAME:
                case TABLESPACE:
                case TEMPORARY:
                case TEMPTABLE:
                case THAN:
                case TRADITIONAL:
                case TRANSACTION:
                case TRIGGERS:
                case TRUNCATE:
                case UNDEFINED:
                case UNDOFILE:
                case UNDO_BUFFER_SIZE:
                case UNINSTALL:
                case UNKNOWN:
                case UNTIL:
                case UPGRADE:
                case USER:
                case USE_FRM:
                case USER_RESOURCES:
                case VALIDATION:
                case VALUE:
                case VARIABLES:
                case VIEW:
                case VISIBLE:
                case WAIT:
                case WARNINGS:
                case WITHOUT:
                case WORK:
                case WRAPPER:
                case X509:
                case XA:
                case XML:
                case INTERNAL:
                case QUARTER:
                case MONTH:
                case DAY:
                case HOUR:
                case MINUTE:
                case WEEK:
                case SECOND:
                case MICROSECOND:
                case TABLES:
                case ROUTINE:
                case EXECUTE:
                case FILE:
                case PROCESS:
                case RELOAD:
                case SHUTDOWN:
                case SUPER:
                case PRIVILEGES:
                case SESSION_VARIABLES_ADMIN:
                case ARMSCII8:
                case ASCII:
                case BIG5:
                case CP1250:
                case CP1251:
                case CP1256:
                case CP1257:
                case CP850:
                case CP852:
                case CP866:
                case CP932:
                case DEC8:
                case EUCJPMS:
                case EUCKR:
                case GB2312:
                case GBK:
                case GEOSTD8:
                case GREEK:
                case HEBREW:
                case HP8:
                case KEYBCS2:
                case KOI8R:
                case KOI8U:
                case LATIN1:
                case LATIN2:
                case LATIN5:
                case LATIN7:
                case MACCE:
                case MACROMAN:
                case SJIS:
                case SWE7:
                case TIS620:
                case UCS2:
                case UJIS:
                case UTF16:
                case UTF16LE:
                case UTF32:
                case UTF8:
                case UTF8MB3:
                case UTF8MB4:
                case ARCHIVE:
                case BLACKHOLE:
                case CSV:
                case FEDERATED:
                case INNODB:
                case MEMORY:
                case MRG_MYISAM:
                case MYISAM:
                case NDB:
                case NDBCLUSTER:
                case PERFORMANCE_SCHEMA:
                case TOKUDB:
                case REPEATABLE:
                case COMMITTED:
                case UNCOMMITTED:
                case SERIALIZABLE:
                case GEOMETRYCOLLECTION:
                case LINESTRING:
                case MULTILINESTRING:
                case MULTIPOINT:
                case MULTIPOLYGON:
                case POINT:
                case POLYGON:
                case ABS:
                case ACOS:
                case ADDDATE:
                case ADDTIME:
                case AES_DECRYPT:
                case AES_ENCRYPT:
                case AREA:
                case ASBINARY:
                case ASIN:
                case ASTEXT:
                case ASWKB:
                case ASWKT:
                case ASYMMETRIC_DECRYPT:
                case ASYMMETRIC_DERIVE:
                case ASYMMETRIC_ENCRYPT:
                case ASYMMETRIC_SIGN:
                case ASYMMETRIC_VERIFY:
                case ATAN:
                case ATAN2:
                case BENCHMARK:
                case BIN:
                case BIT_COUNT:
                case BIT_LENGTH:
                case BUFFER:
                case CATALOG_NAME:
                case CEIL:
                case CEILING:
                case CENTROID:
                case CHARACTER_LENGTH:
                case CHARSET:
                case CHAR_LENGTH:
                case COERCIBILITY:
                case COLLATION:
                case COMPRESS:
                case CONCAT:
                case CONCAT_WS:
                case CONNECTION_ID:
                case CONV:
                case CONVERT_TZ:
                case COS:
                case COT:
                case CRC32:
                case CREATE_ASYMMETRIC_PRIV_KEY:
                case CREATE_ASYMMETRIC_PUB_KEY:
                case CREATE_DH_PARAMETERS:
                case CREATE_DIGEST:
                case CROSSES:
                case DATEDIFF:
                case DATE_FORMAT:
                case DAYNAME:
                case DAYOFMONTH:
                case DAYOFWEEK:
                case DAYOFYEAR:
                case DECODE:
                case DEGREES:
                case DES_DECRYPT:
                case DES_ENCRYPT:
                case DIMENSION:
                case DISJOINT:
                case ELT:
                case ENCODE:
                case ENCRYPT:
                case ENDPOINT:
                case ENVELOPE:
                case EQUALS:
                case EXP:
                case EXPORT_SET:
                case EXTERIORRING:
                case EXTRACTVALUE:
                case FIELD:
                case FIND_IN_SET:
                case FLOOR:
                case FORMAT:
                case FOUND_ROWS:
                case FROM_BASE64:
                case FROM_DAYS:
                case FROM_UNIXTIME:
                case GEOMCOLLFROMTEXT:
                case GEOMCOLLFROMWKB:
                case GEOMETRYCOLLECTIONFROMTEXT:
                case GEOMETRYCOLLECTIONFROMWKB:
                case GEOMETRYFROMTEXT:
                case GEOMETRYFROMWKB:
                case GEOMETRYN:
                case GEOMETRYTYPE:
                case GEOMFROMTEXT:
                case GEOMFROMWKB:
                case GET_FORMAT:
                case GET_LOCK:
                case GLENGTH:
                case GREATEST:
                case GTID_SUBSET:
                case GTID_SUBTRACT:
                case HEX:
                case IFNULL:
                case INET6_ATON:
                case INET6_NTOA:
                case INET_ATON:
                case INET_NTOA:
                case INSTR:
                case INTERIORRINGN:
                case INTERSECTS:
                case ISCLOSED:
                case ISEMPTY:
                case ISNULL:
                case ISSIMPLE:
                case IS_FREE_LOCK:
                case IS_IPV4:
                case IS_IPV4_COMPAT:
                case IS_IPV4_MAPPED:
                case IS_IPV6:
                case IS_USED_LOCK:
                case LAST_INSERT_ID:
                case LCASE:
                case LEAST:
                case LENGTH:
                case LINEFROMTEXT:
                case LINEFROMWKB:
                case LINESTRINGFROMTEXT:
                case LINESTRINGFROMWKB:
                case LN:
                case LOAD_FILE:
                case LOCATE:
                case LOG:
                case LOG10:
                case LOG2:
                case LOWER:
                case LPAD:
                case LTRIM:
                case MAKEDATE:
                case MAKETIME:
                case MAKE_SET:
                case MASTER_POS_WAIT:
                case MBRCONTAINS:
                case MBRDISJOINT:
                case MBREQUAL:
                case MBRINTERSECTS:
                case MBROVERLAPS:
                case MBRTOUCHES:
                case MBRWITHIN:
                case MD5:
                case MLINEFROMTEXT:
                case MLINEFROMWKB:
                case MONTHNAME:
                case MPOINTFROMTEXT:
                case MPOINTFROMWKB:
                case MPOLYFROMTEXT:
                case MPOLYFROMWKB:
                case MULTILINESTRINGFROMTEXT:
                case MULTILINESTRINGFROMWKB:
                case MULTIPOINTFROMTEXT:
                case MULTIPOINTFROMWKB:
                case MULTIPOLYGONFROMTEXT:
                case MULTIPOLYGONFROMWKB:
                case NAME_CONST:
                case NULLIF:
                case NUMGEOMETRIES:
                case NUMINTERIORRINGS:
                case NUMPOINTS:
                case OCT:
                case OCTET_LENGTH:
                case ORD:
                case OVERLAPS:
                case PERIOD_ADD:
                case PERIOD_DIFF:
                case PI:
                case POINTFROMTEXT:
                case POINTFROMWKB:
                case POINTN:
                case POLYFROMTEXT:
                case POLYFROMWKB:
                case POLYGONFROMTEXT:
                case POLYGONFROMWKB:
                case POW:
                case POWER:
                case QUOTE:
                case RADIANS:
                case RAND:
                case RANDOM_BYTES:
                case RELEASE_LOCK:
                case REVERSE:
                case ROUND:
                case ROW_COUNT:
                case RPAD:
                case RTRIM:
                case SEC_TO_TIME:
                case SESSION_USER:
                case SHA:
                case SHA1:
                case SHA2:
                case SCHEMA_NAME:
                case SIGN:
                case SIN:
                case SLEEP:
                case SOUNDEX:
                case SQL_THREAD_WAIT_AFTER_GTIDS:
                case SQRT:
                case SRID:
                case STARTPOINT:
                case STRCMP:
                case STR_TO_DATE:
                case ST_AREA:
                case ST_ASBINARY:
                case ST_ASTEXT:
                case ST_ASWKB:
                case ST_ASWKT:
                case ST_BUFFER:
                case ST_CENTROID:
                case ST_CONTAINS:
                case ST_CROSSES:
                case ST_DIFFERENCE:
                case ST_DIMENSION:
                case ST_DISJOINT:
                case ST_DISTANCE:
                case ST_ENDPOINT:
                case ST_ENVELOPE:
                case ST_EQUALS:
                case ST_EXTERIORRING:
                case ST_GEOMCOLLFROMTEXT:
                case ST_GEOMCOLLFROMTXT:
                case ST_GEOMCOLLFROMWKB:
                case ST_GEOMETRYCOLLECTIONFROMTEXT:
                case ST_GEOMETRYCOLLECTIONFROMWKB:
                case ST_GEOMETRYFROMTEXT:
                case ST_GEOMETRYFROMWKB:
                case ST_GEOMETRYN:
                case ST_GEOMETRYTYPE:
                case ST_GEOMFROMTEXT:
                case ST_GEOMFROMWKB:
                case ST_INTERIORRINGN:
                case ST_INTERSECTION:
                case ST_INTERSECTS:
                case ST_ISCLOSED:
                case ST_ISEMPTY:
                case ST_ISSIMPLE:
                case ST_LINEFROMTEXT:
                case ST_LINEFROMWKB:
                case ST_LINESTRINGFROMTEXT:
                case ST_LINESTRINGFROMWKB:
                case ST_NUMGEOMETRIES:
                case ST_NUMINTERIORRING:
                case ST_NUMINTERIORRINGS:
                case ST_NUMPOINTS:
                case ST_OVERLAPS:
                case ST_POINTFROMTEXT:
                case ST_POINTFROMWKB:
                case ST_POINTN:
                case ST_POLYFROMTEXT:
                case ST_POLYFROMWKB:
                case ST_POLYGONFROMTEXT:
                case ST_POLYGONFROMWKB:
                case ST_SRID:
                case ST_STARTPOINT:
                case ST_SYMDIFFERENCE:
                case ST_TOUCHES:
                case ST_UNION:
                case ST_WITHIN:
                case ST_X:
                case ST_Y:
                case SUBDATE:
                case SUBSTRING_INDEX:
                case SUBTIME:
                case SYSTEM_USER:
                case TAN:
                case TIMEDIFF:
                case TIMESTAMPADD:
                case TIMESTAMPDIFF:
                case TIME_FORMAT:
                case TIME_TO_SEC:
                case TOUCHES:
                case TO_BASE64:
                case TO_DAYS:
                case TO_SECONDS:
                case UCASE:
                case UNCOMPRESS:
                case UNCOMPRESSED_LENGTH:
                case UNHEX:
                case UNIX_TIMESTAMP:
                case UPDATEXML:
                case UPPER:
                case UUID:
                case UUID_SHORT:
                case VALIDATE_PASSWORD_STRENGTH:
                case VERSION:
                case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
                case WEEKDAY:
                case WEEKOFYEAR:
                case WEIGHT_STRING:
                case WITHIN:
                case YEARWEEK:
                case Y_FUNCTION:
                case X_FUNCTION:
                case AT_SIGN:
                case CHARSET_REVERSE_QOUTE_STRING:
                case STRING_LITERAL:
                case ID:
                case REVERSE_QUOTE_ID:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 5018;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 721, Context))
                        {
                            case 1:
                                {
                                    State = 5015;
                                    ErrorHandler.Sync(this);
                                    _la = TokenStream.LA(1);
                                    if (_la == AT_SIGN)
                                    {
                                        {
                                            State = 5013; Match(AT_SIGN);
                                            State = 5014; Match(AT_SIGN);
                                        }
                                    }

                                    State = 5017;
                                    _la = TokenStream.LA(1);
                                    if (!(_la == GLOBAL || _la == LOCAL || _la == SESSION))
                                    {
                                        ErrorHandler.RecoverInline(this);
                                    }
                                    else
                                    {
                                        ErrorHandler.ReportMatch(this);
                                        Consume();
                                    }
                                }
                                break;
                        }
                        State = 5020; uid();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ShowCommonEntityContext : ParserRuleContext
    {
        public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
        public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
        public ITerminalNode COLLATION() { return GetToken(MySqlParser.COLLATION, 0); }
        public ITerminalNode DATABASES() { return GetToken(MySqlParser.DATABASES, 0); }
        public ITerminalNode SCHEMAS() { return GetToken(MySqlParser.SCHEMAS, 0); }
        public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
        public ITerminalNode STATUS() { return GetToken(MySqlParser.STATUS, 0); }
        public ITerminalNode PROCEDURE() { return GetToken(MySqlParser.PROCEDURE, 0); }
        public ITerminalNode VARIABLES() { return GetToken(MySqlParser.VARIABLES, 0); }
        public ITerminalNode GLOBAL() { return GetToken(MySqlParser.GLOBAL, 0); }
        public ITerminalNode SESSION() { return GetToken(MySqlParser.SESSION, 0); }
        public ShowCommonEntityContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_showCommonEntity; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterShowCommonEntity(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitShowCommonEntity(this);
        }
    }

    [RuleVersion(0)]
    public ShowCommonEntityContext showCommonEntity()
    {
        ShowCommonEntityContext _localctx = new ShowCommonEntityContext(Context, State);
        EnterRule(_localctx, 444, RULE_showCommonEntity);
        int _la;
        try
        {
            State = 5036;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case CHARACTER:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 5023; Match(CHARACTER);
                        State = 5024; Match(SET);
                    }
                    break;
                case COLLATION:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 5025; Match(COLLATION);
                    }
                    break;
                case DATABASES:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 5026; Match(DATABASES);
                    }
                    break;
                case SCHEMAS:
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 5027; Match(SCHEMAS);
                    }
                    break;
                case FUNCTION:
                    EnterOuterAlt(_localctx, 5);
                    {
                        State = 5028; Match(FUNCTION);
                        State = 5029; Match(STATUS);
                    }
                    break;
                case PROCEDURE:
                    EnterOuterAlt(_localctx, 6);
                    {
                        State = 5030; Match(PROCEDURE);
                        State = 5031; Match(STATUS);
                    }
                    break;
                case GLOBAL:
                case SESSION:
                case STATUS:
                case VARIABLES:
                    EnterOuterAlt(_localctx, 7);
                    {
                        State = 5033;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == GLOBAL || _la == SESSION)
                        {
                            {
                                State = 5032;
                                _la = TokenStream.LA(1);
                                if (!(_la == GLOBAL || _la == SESSION))
                                {
                                    ErrorHandler.RecoverInline(this);
                                }
                                else
                                {
                                    ErrorHandler.ReportMatch(this);
                                    Consume();
                                }
                            }
                        }

                        State = 5035;
                        _la = TokenStream.LA(1);
                        if (!(_la == STATUS || _la == VARIABLES))
                        {
                            ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ShowFilterContext : ParserRuleContext
    {
        public ITerminalNode LIKE() { return GetToken(MySqlParser.LIKE, 0); }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public ITerminalNode WHERE() { return GetToken(MySqlParser.WHERE, 0); }
        public ExpressionContext expression()
        {
            return GetRuleContext<ExpressionContext>(0);
        }
        public ShowFilterContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_showFilter; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterShowFilter(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitShowFilter(this);
        }
    }

    [RuleVersion(0)]
    public ShowFilterContext showFilter()
    {
        ShowFilterContext _localctx = new ShowFilterContext(Context, State);
        EnterRule(_localctx, 446, RULE_showFilter);
        try
        {
            State = 5042;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case LIKE:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 5038; Match(LIKE);
                        State = 5039; Match(STRING_LITERAL);
                    }
                    break;
                case WHERE:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 5040; Match(WHERE);
                        State = 5041; expression(0);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ShowGlobalInfoClauseContext : ParserRuleContext
    {
        public ITerminalNode ENGINES() { return GetToken(MySqlParser.ENGINES, 0); }
        public ITerminalNode STORAGE() { return GetToken(MySqlParser.STORAGE, 0); }
        public ITerminalNode MASTER() { return GetToken(MySqlParser.MASTER, 0); }
        public ITerminalNode STATUS() { return GetToken(MySqlParser.STATUS, 0); }
        public ITerminalNode PLUGINS() { return GetToken(MySqlParser.PLUGINS, 0); }
        public ITerminalNode PRIVILEGES() { return GetToken(MySqlParser.PRIVILEGES, 0); }
        public ITerminalNode PROCESSLIST() { return GetToken(MySqlParser.PROCESSLIST, 0); }
        public ITerminalNode FULL() { return GetToken(MySqlParser.FULL, 0); }
        public ITerminalNode PROFILES() { return GetToken(MySqlParser.PROFILES, 0); }
        public ITerminalNode SLAVE() { return GetToken(MySqlParser.SLAVE, 0); }
        public ITerminalNode HOSTS() { return GetToken(MySqlParser.HOSTS, 0); }
        public ITerminalNode AUTHORS() { return GetToken(MySqlParser.AUTHORS, 0); }
        public ITerminalNode CONTRIBUTORS() { return GetToken(MySqlParser.CONTRIBUTORS, 0); }
        public ShowGlobalInfoClauseContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_showGlobalInfoClause; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterShowGlobalInfoClause(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitShowGlobalInfoClause(this);
        }
    }

    [RuleVersion(0)]
    public ShowGlobalInfoClauseContext showGlobalInfoClause()
    {
        ShowGlobalInfoClauseContext _localctx = new ShowGlobalInfoClauseContext(Context, State);
        EnterRule(_localctx, 448, RULE_showGlobalInfoClause);
        int _la;
        try
        {
            State = 5061;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case ENGINES:
                case STORAGE:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 5045;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == STORAGE)
                        {
                            {
                                State = 5044; Match(STORAGE);
                            }
                        }

                        State = 5047; Match(ENGINES);
                    }
                    break;
                case MASTER:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 5048; Match(MASTER);
                        State = 5049; Match(STATUS);
                    }
                    break;
                case PLUGINS:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 5050; Match(PLUGINS);
                    }
                    break;
                case PRIVILEGES:
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 5051; Match(PRIVILEGES);
                    }
                    break;
                case FULL:
                case PROCESSLIST:
                    EnterOuterAlt(_localctx, 5);
                    {
                        State = 5053;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == FULL)
                        {
                            {
                                State = 5052; Match(FULL);
                            }
                        }

                        State = 5055; Match(PROCESSLIST);
                    }
                    break;
                case PROFILES:
                    EnterOuterAlt(_localctx, 6);
                    {
                        State = 5056; Match(PROFILES);
                    }
                    break;
                case SLAVE:
                    EnterOuterAlt(_localctx, 7);
                    {
                        State = 5057; Match(SLAVE);
                        State = 5058; Match(HOSTS);
                    }
                    break;
                case AUTHORS:
                    EnterOuterAlt(_localctx, 8);
                    {
                        State = 5059; Match(AUTHORS);
                    }
                    break;
                case CONTRIBUTORS:
                    EnterOuterAlt(_localctx, 9);
                    {
                        State = 5060; Match(CONTRIBUTORS);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ShowSchemaEntityContext : ParserRuleContext
    {
        public ITerminalNode EVENTS() { return GetToken(MySqlParser.EVENTS, 0); }
        public ITerminalNode TABLE() { return GetToken(MySqlParser.TABLE, 0); }
        public ITerminalNode STATUS() { return GetToken(MySqlParser.STATUS, 0); }
        public ITerminalNode TABLES() { return GetToken(MySqlParser.TABLES, 0); }
        public ITerminalNode FULL() { return GetToken(MySqlParser.FULL, 0); }
        public ITerminalNode TRIGGERS() { return GetToken(MySqlParser.TRIGGERS, 0); }
        public ShowSchemaEntityContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_showSchemaEntity; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterShowSchemaEntity(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitShowSchemaEntity(this);
        }
    }

    [RuleVersion(0)]
    public ShowSchemaEntityContext showSchemaEntity()
    {
        ShowSchemaEntityContext _localctx = new ShowSchemaEntityContext(Context, State);
        EnterRule(_localctx, 450, RULE_showSchemaEntity);
        int _la;
        try
        {
            State = 5071;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case EVENTS:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 5063; Match(EVENTS);
                    }
                    break;
                case TABLE:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 5064; Match(TABLE);
                        State = 5065; Match(STATUS);
                    }
                    break;
                case FULL:
                case TABLES:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 5067;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == FULL)
                        {
                            {
                                State = 5066; Match(FULL);
                            }
                        }

                        State = 5069; Match(TABLES);
                    }
                    break;
                case TRIGGERS:
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 5070; Match(TRIGGERS);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ShowProfileTypeContext : ParserRuleContext
    {
        public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
        public ITerminalNode BLOCK() { return GetToken(MySqlParser.BLOCK, 0); }
        public ITerminalNode IO() { return GetToken(MySqlParser.IO, 0); }
        public ITerminalNode CONTEXT() { return GetToken(MySqlParser.CONTEXT, 0); }
        public ITerminalNode SWITCHES() { return GetToken(MySqlParser.SWITCHES, 0); }
        public ITerminalNode CPU() { return GetToken(MySqlParser.CPU, 0); }
        public ITerminalNode IPC() { return GetToken(MySqlParser.IPC, 0); }
        public ITerminalNode MEMORY() { return GetToken(MySqlParser.MEMORY, 0); }
        public ITerminalNode PAGE() { return GetToken(MySqlParser.PAGE, 0); }
        public ITerminalNode FAULTS() { return GetToken(MySqlParser.FAULTS, 0); }
        public ITerminalNode SOURCE() { return GetToken(MySqlParser.SOURCE, 0); }
        public ITerminalNode SWAPS() { return GetToken(MySqlParser.SWAPS, 0); }
        public ShowProfileTypeContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_showProfileType; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterShowProfileType(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitShowProfileType(this);
        }
    }

    [RuleVersion(0)]
    public ShowProfileTypeContext showProfileType()
    {
        ShowProfileTypeContext _localctx = new ShowProfileTypeContext(Context, State);
        EnterRule(_localctx, 452, RULE_showProfileType);
        try
        {
            State = 5085;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case ALL:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 5073; Match(ALL);
                    }
                    break;
                case BLOCK:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 5074; Match(BLOCK);
                        State = 5075; Match(IO);
                    }
                    break;
                case CONTEXT:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 5076; Match(CONTEXT);
                        State = 5077; Match(SWITCHES);
                    }
                    break;
                case CPU:
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 5078; Match(CPU);
                    }
                    break;
                case IPC:
                    EnterOuterAlt(_localctx, 5);
                    {
                        State = 5079; Match(IPC);
                    }
                    break;
                case MEMORY:
                    EnterOuterAlt(_localctx, 6);
                    {
                        State = 5080; Match(MEMORY);
                    }
                    break;
                case PAGE:
                    EnterOuterAlt(_localctx, 7);
                    {
                        State = 5081; Match(PAGE);
                        State = 5082; Match(FAULTS);
                    }
                    break;
                case SOURCE:
                    EnterOuterAlt(_localctx, 8);
                    {
                        State = 5083; Match(SOURCE);
                    }
                    break;
                case SWAPS:
                    EnterOuterAlt(_localctx, 9);
                    {
                        State = 5084; Match(SWAPS);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class BinlogStatementContext : ParserRuleContext
    {
        public ITerminalNode BINLOG() { return GetToken(MySqlParser.BINLOG, 0); }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public BinlogStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_binlogStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterBinlogStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitBinlogStatement(this);
        }
    }

    [RuleVersion(0)]
    public BinlogStatementContext binlogStatement()
    {
        BinlogStatementContext _localctx = new BinlogStatementContext(Context, State);
        EnterRule(_localctx, 454, RULE_binlogStatement);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 5087; Match(BINLOG);
                State = 5088; Match(STRING_LITERAL);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class CacheIndexStatementContext : ParserRuleContext
    {
        public UidContext schema;
        public ITerminalNode CACHE() { return GetToken(MySqlParser.CACHE, 0); }
        public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
        public TableIndexesContext[] tableIndexes()
        {
            return GetRuleContexts<TableIndexesContext>();
        }
        public TableIndexesContext tableIndexes(int i)
        {
            return GetRuleContext<TableIndexesContext>(i);
        }
        public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public UidListContext uidList()
        {
            return GetRuleContext<UidListContext>(0);
        }
        public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
        public CacheIndexStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_cacheIndexStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterCacheIndexStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitCacheIndexStatement(this);
        }
    }

    [RuleVersion(0)]
    public CacheIndexStatementContext cacheIndexStatement()
    {
        CacheIndexStatementContext _localctx = new CacheIndexStatementContext(Context, State);
        EnterRule(_localctx, 456, RULE_cacheIndexStatement);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 5090; Match(CACHE);
                State = 5091; Match(INDEX);
                State = 5092; tableIndexes();
                State = 5097;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while (_la == COMMA)
                {
                    {
                        {
                            State = 5093; Match(COMMA);
                            State = 5094; tableIndexes();
                        }
                    }
                    State = 5099;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
                State = 5107;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == PARTITION)
                {
                    {
                        State = 5100; Match(PARTITION);
                        State = 5101; Match(LR_BRACKET);
                        State = 5104;
                        ErrorHandler.Sync(this);
                        switch (TokenStream.LA(1))
                        {
                            case CURRENT:
                            case DATABASE:
                            case DIAGNOSTICS:
                            case LEFT:
                            case NUMBER:
                            case RIGHT:
                            case STACKED:
                            case DATE:
                            case TIME:
                            case TIMESTAMP:
                            case DATETIME:
                            case YEAR:
                            case TEXT:
                            case ENUM:
                            case SERIAL:
                            case COUNT:
                            case POSITION:
                            case ACCOUNT:
                            case ACTION:
                            case AFTER:
                            case AGGREGATE:
                            case ALGORITHM:
                            case ANY:
                            case AT:
                            case AUTHORS:
                            case AUTOCOMMIT:
                            case AUTOEXTEND_SIZE:
                            case AUTO_INCREMENT:
                            case AVG_ROW_LENGTH:
                            case BEGIN:
                            case BINLOG:
                            case BIT:
                            case BLOCK:
                            case BOOL:
                            case BOOLEAN:
                            case BTREE:
                            case CACHE:
                            case CASCADED:
                            case CHAIN:
                            case CHANGED:
                            case CHANNEL:
                            case CHECKSUM:
                            case PAGE_CHECKSUM:
                            case CIPHER:
                            case CLASS_ORIGIN:
                            case CLIENT:
                            case CLOSE:
                            case COALESCE:
                            case CODE:
                            case COLUMNS:
                            case COLUMN_FORMAT:
                            case COLUMN_NAME:
                            case COMMENT:
                            case COMMIT:
                            case COMPACT:
                            case COMPLETION:
                            case COMPRESSED:
                            case COMPRESSION:
                            case CONCURRENT:
                            case CONNECTION:
                            case CONSISTENT:
                            case CONSTRAINT_CATALOG:
                            case CONSTRAINT_SCHEMA:
                            case CONSTRAINT_NAME:
                            case CONTAINS:
                            case CONTEXT:
                            case CONTRIBUTORS:
                            case COPY:
                            case CPU:
                            case CURSOR_NAME:
                            case DATA:
                            case DATAFILE:
                            case DEALLOCATE:
                            case DEFAULT_AUTH:
                            case DEFINER:
                            case DELAY_KEY_WRITE:
                            case DES_KEY_FILE:
                            case DIRECTORY:
                            case DISABLE:
                            case DISCARD:
                            case DISK:
                            case DO:
                            case DUMPFILE:
                            case DUPLICATE:
                            case DYNAMIC:
                            case ENABLE:
                            case ENCRYPTION:
                            case END:
                            case ENDS:
                            case ENGINE:
                            case ENGINES:
                            case ERROR:
                            case ERRORS:
                            case ESCAPE:
                            case EVEN:
                            case EVENT:
                            case EVENTS:
                            case EVERY:
                            case EXCHANGE:
                            case EXCLUSIVE:
                            case EXPIRE:
                            case EXPORT:
                            case EXTENDED:
                            case EXTENT_SIZE:
                            case FAST:
                            case FAULTS:
                            case FIELDS:
                            case FILE_BLOCK_SIZE:
                            case FILTER:
                            case FIRST:
                            case FIXED:
                            case FLUSH:
                            case FOLLOWS:
                            case FOUND:
                            case FULL:
                            case FUNCTION:
                            case GENERAL:
                            case GLOBAL:
                            case GRANTS:
                            case GROUP_REPLICATION:
                            case HANDLER:
                            case HASH:
                            case HELP:
                            case HOST:
                            case HOSTS:
                            case IDENTIFIED:
                            case IGNORE_SERVER_IDS:
                            case IMPORT:
                            case INDEXES:
                            case INITIAL_SIZE:
                            case INPLACE:
                            case INSERT_METHOD:
                            case INSTALL:
                            case INSTANCE:
                            case INVISIBLE:
                            case INVOKER:
                            case IO:
                            case IO_THREAD:
                            case IPC:
                            case ISOLATION:
                            case ISSUER:
                            case JSON:
                            case KEY_BLOCK_SIZE:
                            case LANGUAGE:
                            case LAST:
                            case LEAVES:
                            case LESS:
                            case LEVEL:
                            case LIST:
                            case LOCAL:
                            case LOGFILE:
                            case LOGS:
                            case MASTER:
                            case MASTER_AUTO_POSITION:
                            case MASTER_CONNECT_RETRY:
                            case MASTER_DELAY:
                            case MASTER_HEARTBEAT_PERIOD:
                            case MASTER_HOST:
                            case MASTER_LOG_FILE:
                            case MASTER_LOG_POS:
                            case MASTER_PASSWORD:
                            case MASTER_PORT:
                            case MASTER_RETRY_COUNT:
                            case MASTER_SSL:
                            case MASTER_SSL_CA:
                            case MASTER_SSL_CAPATH:
                            case MASTER_SSL_CERT:
                            case MASTER_SSL_CIPHER:
                            case MASTER_SSL_CRL:
                            case MASTER_SSL_CRLPATH:
                            case MASTER_SSL_KEY:
                            case MASTER_TLS_VERSION:
                            case MASTER_USER:
                            case MAX_CONNECTIONS_PER_HOUR:
                            case MAX_QUERIES_PER_HOUR:
                            case MAX_ROWS:
                            case MAX_SIZE:
                            case MAX_UPDATES_PER_HOUR:
                            case MAX_USER_CONNECTIONS:
                            case MEDIUM:
                            case MERGE:
                            case MESSAGE_TEXT:
                            case MID:
                            case MIGRATE:
                            case MIN_ROWS:
                            case MODE:
                            case MODIFY:
                            case MUTEX:
                            case MYSQL:
                            case MYSQL_ERRNO:
                            case NAME:
                            case NAMES:
                            case NCHAR:
                            case NEVER:
                            case NEXT:
                            case NO:
                            case NODEGROUP:
                            case NONE:
                            case OFFLINE:
                            case OFFSET:
                            case OJ:
                            case OLD_PASSWORD:
                            case ONE:
                            case ONLINE:
                            case ONLY:
                            case OPEN:
                            case OPTIMIZER_COSTS:
                            case OPTIONS:
                            case OWNER:
                            case PACK_KEYS:
                            case PAGE:
                            case PARSER:
                            case PARTIAL:
                            case PARTITIONING:
                            case PARTITIONS:
                            case PASSWORD:
                            case PHASE:
                            case PLUGIN:
                            case PLUGIN_DIR:
                            case PLUGINS:
                            case PORT:
                            case PRECEDES:
                            case PREPARE:
                            case PRESERVE:
                            case PREV:
                            case PROCESSLIST:
                            case PROFILE:
                            case PROFILES:
                            case PROXY:
                            case QUERY:
                            case QUICK:
                            case REBUILD:
                            case RECOVER:
                            case REDO_BUFFER_SIZE:
                            case REDUNDANT:
                            case RELAY:
                            case RELAY_LOG_FILE:
                            case RELAY_LOG_POS:
                            case RELAYLOG:
                            case REMOVE:
                            case REORGANIZE:
                            case REPAIR:
                            case REPLICATE_DO_DB:
                            case REPLICATE_DO_TABLE:
                            case REPLICATE_IGNORE_DB:
                            case REPLICATE_IGNORE_TABLE:
                            case REPLICATE_REWRITE_DB:
                            case REPLICATE_WILD_DO_TABLE:
                            case REPLICATE_WILD_IGNORE_TABLE:
                            case REPLICATION:
                            case RESET:
                            case RESUME:
                            case RETURNED_SQLSTATE:
                            case RETURNS:
                            case ROLLBACK:
                            case ROLLUP:
                            case ROTATE:
                            case ROW:
                            case ROWS:
                            case ROW_FORMAT:
                            case SAVEPOINT:
                            case SCHEDULE:
                            case SECURITY:
                            case SERVER:
                            case SESSION:
                            case SHARE:
                            case SHARED:
                            case SIGNED:
                            case SIMPLE:
                            case SLAVE:
                            case SLOW:
                            case SNAPSHOT:
                            case SOCKET:
                            case SOME:
                            case SONAME:
                            case SOUNDS:
                            case SOURCE:
                            case SQL_AFTER_GTIDS:
                            case SQL_AFTER_MTS_GAPS:
                            case SQL_BEFORE_GTIDS:
                            case SQL_BUFFER_RESULT:
                            case SQL_CACHE:
                            case SQL_NO_CACHE:
                            case SQL_THREAD:
                            case START:
                            case STARTS:
                            case STATS_AUTO_RECALC:
                            case STATS_PERSISTENT:
                            case STATS_SAMPLE_PAGES:
                            case STATUS:
                            case STOP:
                            case STORAGE:
                            case STRING:
                            case SUBCLASS_ORIGIN:
                            case SUBJECT:
                            case SUBPARTITION:
                            case SUBPARTITIONS:
                            case SUSPEND:
                            case SWAPS:
                            case SWITCHES:
                            case TABLE_NAME:
                            case TABLESPACE:
                            case TEMPORARY:
                            case TEMPTABLE:
                            case THAN:
                            case TRADITIONAL:
                            case TRANSACTION:
                            case TRIGGERS:
                            case TRUNCATE:
                            case UNDEFINED:
                            case UNDOFILE:
                            case UNDO_BUFFER_SIZE:
                            case UNINSTALL:
                            case UNKNOWN:
                            case UNTIL:
                            case UPGRADE:
                            case USER:
                            case USE_FRM:
                            case USER_RESOURCES:
                            case VALIDATION:
                            case VALUE:
                            case VARIABLES:
                            case VIEW:
                            case VISIBLE:
                            case WAIT:
                            case WARNINGS:
                            case WITHOUT:
                            case WORK:
                            case WRAPPER:
                            case X509:
                            case XA:
                            case XML:
                            case INTERNAL:
                            case QUARTER:
                            case MONTH:
                            case DAY:
                            case HOUR:
                            case MINUTE:
                            case WEEK:
                            case SECOND:
                            case MICROSECOND:
                            case TABLES:
                            case ROUTINE:
                            case EXECUTE:
                            case FILE:
                            case PROCESS:
                            case RELOAD:
                            case SHUTDOWN:
                            case SUPER:
                            case PRIVILEGES:
                            case SESSION_VARIABLES_ADMIN:
                            case ARMSCII8:
                            case ASCII:
                            case BIG5:
                            case CP1250:
                            case CP1251:
                            case CP1256:
                            case CP1257:
                            case CP850:
                            case CP852:
                            case CP866:
                            case CP932:
                            case DEC8:
                            case EUCJPMS:
                            case EUCKR:
                            case GB2312:
                            case GBK:
                            case GEOSTD8:
                            case GREEK:
                            case HEBREW:
                            case HP8:
                            case KEYBCS2:
                            case KOI8R:
                            case KOI8U:
                            case LATIN1:
                            case LATIN2:
                            case LATIN5:
                            case LATIN7:
                            case MACCE:
                            case MACROMAN:
                            case SJIS:
                            case SWE7:
                            case TIS620:
                            case UCS2:
                            case UJIS:
                            case UTF16:
                            case UTF16LE:
                            case UTF32:
                            case UTF8:
                            case UTF8MB3:
                            case UTF8MB4:
                            case ARCHIVE:
                            case BLACKHOLE:
                            case CSV:
                            case FEDERATED:
                            case INNODB:
                            case MEMORY:
                            case MRG_MYISAM:
                            case MYISAM:
                            case NDB:
                            case NDBCLUSTER:
                            case PERFORMANCE_SCHEMA:
                            case TOKUDB:
                            case REPEATABLE:
                            case COMMITTED:
                            case UNCOMMITTED:
                            case SERIALIZABLE:
                            case GEOMETRYCOLLECTION:
                            case LINESTRING:
                            case MULTILINESTRING:
                            case MULTIPOINT:
                            case MULTIPOLYGON:
                            case POINT:
                            case POLYGON:
                            case ABS:
                            case ACOS:
                            case ADDDATE:
                            case ADDTIME:
                            case AES_DECRYPT:
                            case AES_ENCRYPT:
                            case AREA:
                            case ASBINARY:
                            case ASIN:
                            case ASTEXT:
                            case ASWKB:
                            case ASWKT:
                            case ASYMMETRIC_DECRYPT:
                            case ASYMMETRIC_DERIVE:
                            case ASYMMETRIC_ENCRYPT:
                            case ASYMMETRIC_SIGN:
                            case ASYMMETRIC_VERIFY:
                            case ATAN:
                            case ATAN2:
                            case BENCHMARK:
                            case BIN:
                            case BIT_COUNT:
                            case BIT_LENGTH:
                            case BUFFER:
                            case CATALOG_NAME:
                            case CEIL:
                            case CEILING:
                            case CENTROID:
                            case CHARACTER_LENGTH:
                            case CHARSET:
                            case CHAR_LENGTH:
                            case COERCIBILITY:
                            case COLLATION:
                            case COMPRESS:
                            case CONCAT:
                            case CONCAT_WS:
                            case CONNECTION_ID:
                            case CONV:
                            case CONVERT_TZ:
                            case COS:
                            case COT:
                            case CRC32:
                            case CREATE_ASYMMETRIC_PRIV_KEY:
                            case CREATE_ASYMMETRIC_PUB_KEY:
                            case CREATE_DH_PARAMETERS:
                            case CREATE_DIGEST:
                            case CROSSES:
                            case DATEDIFF:
                            case DATE_FORMAT:
                            case DAYNAME:
                            case DAYOFMONTH:
                            case DAYOFWEEK:
                            case DAYOFYEAR:
                            case DECODE:
                            case DEGREES:
                            case DES_DECRYPT:
                            case DES_ENCRYPT:
                            case DIMENSION:
                            case DISJOINT:
                            case ELT:
                            case ENCODE:
                            case ENCRYPT:
                            case ENDPOINT:
                            case ENVELOPE:
                            case EQUALS:
                            case EXP:
                            case EXPORT_SET:
                            case EXTERIORRING:
                            case EXTRACTVALUE:
                            case FIELD:
                            case FIND_IN_SET:
                            case FLOOR:
                            case FORMAT:
                            case FOUND_ROWS:
                            case FROM_BASE64:
                            case FROM_DAYS:
                            case FROM_UNIXTIME:
                            case GEOMCOLLFROMTEXT:
                            case GEOMCOLLFROMWKB:
                            case GEOMETRYCOLLECTIONFROMTEXT:
                            case GEOMETRYCOLLECTIONFROMWKB:
                            case GEOMETRYFROMTEXT:
                            case GEOMETRYFROMWKB:
                            case GEOMETRYN:
                            case GEOMETRYTYPE:
                            case GEOMFROMTEXT:
                            case GEOMFROMWKB:
                            case GET_FORMAT:
                            case GET_LOCK:
                            case GLENGTH:
                            case GREATEST:
                            case GTID_SUBSET:
                            case GTID_SUBTRACT:
                            case HEX:
                            case IFNULL:
                            case INET6_ATON:
                            case INET6_NTOA:
                            case INET_ATON:
                            case INET_NTOA:
                            case INSTR:
                            case INTERIORRINGN:
                            case INTERSECTS:
                            case ISCLOSED:
                            case ISEMPTY:
                            case ISNULL:
                            case ISSIMPLE:
                            case IS_FREE_LOCK:
                            case IS_IPV4:
                            case IS_IPV4_COMPAT:
                            case IS_IPV4_MAPPED:
                            case IS_IPV6:
                            case IS_USED_LOCK:
                            case LAST_INSERT_ID:
                            case LCASE:
                            case LEAST:
                            case LENGTH:
                            case LINEFROMTEXT:
                            case LINEFROMWKB:
                            case LINESTRINGFROMTEXT:
                            case LINESTRINGFROMWKB:
                            case LN:
                            case LOAD_FILE:
                            case LOCATE:
                            case LOG:
                            case LOG10:
                            case LOG2:
                            case LOWER:
                            case LPAD:
                            case LTRIM:
                            case MAKEDATE:
                            case MAKETIME:
                            case MAKE_SET:
                            case MASTER_POS_WAIT:
                            case MBRCONTAINS:
                            case MBRDISJOINT:
                            case MBREQUAL:
                            case MBRINTERSECTS:
                            case MBROVERLAPS:
                            case MBRTOUCHES:
                            case MBRWITHIN:
                            case MD5:
                            case MLINEFROMTEXT:
                            case MLINEFROMWKB:
                            case MONTHNAME:
                            case MPOINTFROMTEXT:
                            case MPOINTFROMWKB:
                            case MPOLYFROMTEXT:
                            case MPOLYFROMWKB:
                            case MULTILINESTRINGFROMTEXT:
                            case MULTILINESTRINGFROMWKB:
                            case MULTIPOINTFROMTEXT:
                            case MULTIPOINTFROMWKB:
                            case MULTIPOLYGONFROMTEXT:
                            case MULTIPOLYGONFROMWKB:
                            case NAME_CONST:
                            case NULLIF:
                            case NUMGEOMETRIES:
                            case NUMINTERIORRINGS:
                            case NUMPOINTS:
                            case OCT:
                            case OCTET_LENGTH:
                            case ORD:
                            case OVERLAPS:
                            case PERIOD_ADD:
                            case PERIOD_DIFF:
                            case PI:
                            case POINTFROMTEXT:
                            case POINTFROMWKB:
                            case POINTN:
                            case POLYFROMTEXT:
                            case POLYFROMWKB:
                            case POLYGONFROMTEXT:
                            case POLYGONFROMWKB:
                            case POW:
                            case POWER:
                            case QUOTE:
                            case RADIANS:
                            case RAND:
                            case RANDOM_BYTES:
                            case RELEASE_LOCK:
                            case REVERSE:
                            case ROUND:
                            case ROW_COUNT:
                            case RPAD:
                            case RTRIM:
                            case SEC_TO_TIME:
                            case SESSION_USER:
                            case SHA:
                            case SHA1:
                            case SHA2:
                            case SCHEMA_NAME:
                            case SIGN:
                            case SIN:
                            case SLEEP:
                            case SOUNDEX:
                            case SQL_THREAD_WAIT_AFTER_GTIDS:
                            case SQRT:
                            case SRID:
                            case STARTPOINT:
                            case STRCMP:
                            case STR_TO_DATE:
                            case ST_AREA:
                            case ST_ASBINARY:
                            case ST_ASTEXT:
                            case ST_ASWKB:
                            case ST_ASWKT:
                            case ST_BUFFER:
                            case ST_CENTROID:
                            case ST_CONTAINS:
                            case ST_CROSSES:
                            case ST_DIFFERENCE:
                            case ST_DIMENSION:
                            case ST_DISJOINT:
                            case ST_DISTANCE:
                            case ST_ENDPOINT:
                            case ST_ENVELOPE:
                            case ST_EQUALS:
                            case ST_EXTERIORRING:
                            case ST_GEOMCOLLFROMTEXT:
                            case ST_GEOMCOLLFROMTXT:
                            case ST_GEOMCOLLFROMWKB:
                            case ST_GEOMETRYCOLLECTIONFROMTEXT:
                            case ST_GEOMETRYCOLLECTIONFROMWKB:
                            case ST_GEOMETRYFROMTEXT:
                            case ST_GEOMETRYFROMWKB:
                            case ST_GEOMETRYN:
                            case ST_GEOMETRYTYPE:
                            case ST_GEOMFROMTEXT:
                            case ST_GEOMFROMWKB:
                            case ST_INTERIORRINGN:
                            case ST_INTERSECTION:
                            case ST_INTERSECTS:
                            case ST_ISCLOSED:
                            case ST_ISEMPTY:
                            case ST_ISSIMPLE:
                            case ST_LINEFROMTEXT:
                            case ST_LINEFROMWKB:
                            case ST_LINESTRINGFROMTEXT:
                            case ST_LINESTRINGFROMWKB:
                            case ST_NUMGEOMETRIES:
                            case ST_NUMINTERIORRING:
                            case ST_NUMINTERIORRINGS:
                            case ST_NUMPOINTS:
                            case ST_OVERLAPS:
                            case ST_POINTFROMTEXT:
                            case ST_POINTFROMWKB:
                            case ST_POINTN:
                            case ST_POLYFROMTEXT:
                            case ST_POLYFROMWKB:
                            case ST_POLYGONFROMTEXT:
                            case ST_POLYGONFROMWKB:
                            case ST_SRID:
                            case ST_STARTPOINT:
                            case ST_SYMDIFFERENCE:
                            case ST_TOUCHES:
                            case ST_UNION:
                            case ST_WITHIN:
                            case ST_X:
                            case ST_Y:
                            case SUBDATE:
                            case SUBSTRING_INDEX:
                            case SUBTIME:
                            case SYSTEM_USER:
                            case TAN:
                            case TIMEDIFF:
                            case TIMESTAMPADD:
                            case TIMESTAMPDIFF:
                            case TIME_FORMAT:
                            case TIME_TO_SEC:
                            case TOUCHES:
                            case TO_BASE64:
                            case TO_DAYS:
                            case TO_SECONDS:
                            case UCASE:
                            case UNCOMPRESS:
                            case UNCOMPRESSED_LENGTH:
                            case UNHEX:
                            case UNIX_TIMESTAMP:
                            case UPDATEXML:
                            case UPPER:
                            case UUID:
                            case UUID_SHORT:
                            case VALIDATE_PASSWORD_STRENGTH:
                            case VERSION:
                            case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
                            case WEEKDAY:
                            case WEEKOFYEAR:
                            case WEIGHT_STRING:
                            case WITHIN:
                            case YEARWEEK:
                            case Y_FUNCTION:
                            case X_FUNCTION:
                            case CHARSET_REVERSE_QOUTE_STRING:
                            case STRING_LITERAL:
                            case ID:
                            case REVERSE_QUOTE_ID:
                                {
                                    State = 5102; uidList();
                                }
                                break;
                            case ALL:
                                {
                                    State = 5103; Match(ALL);
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        State = 5106; Match(RR_BRACKET);
                    }
                }

                State = 5109; Match(IN);
                State = 5110; _localctx.schema = uid();
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class FlushStatementContext : ParserRuleContext
    {
        public IToken flushFormat;
        public ITerminalNode FLUSH() { return GetToken(MySqlParser.FLUSH, 0); }
        public FlushOptionContext[] flushOption()
        {
            return GetRuleContexts<FlushOptionContext>();
        }
        public FlushOptionContext flushOption(int i)
        {
            return GetRuleContext<FlushOptionContext>(i);
        }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public ITerminalNode NO_WRITE_TO_BINLOG() { return GetToken(MySqlParser.NO_WRITE_TO_BINLOG, 0); }
        public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
        public FlushStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_flushStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterFlushStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitFlushStatement(this);
        }
    }

    [RuleVersion(0)]
    public FlushStatementContext flushStatement()
    {
        FlushStatementContext _localctx = new FlushStatementContext(Context, State);
        EnterRule(_localctx, 458, RULE_flushStatement);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 5112; Match(FLUSH);
                State = 5114;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == NO_WRITE_TO_BINLOG || _la == LOCAL)
                {
                    {
                        State = 5113;
                        _localctx.flushFormat = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == NO_WRITE_TO_BINLOG || _la == LOCAL))
                        {
                            _localctx.flushFormat = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                }

                State = 5116; flushOption();
                State = 5121;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while (_la == COMMA)
                {
                    {
                        {
                            State = 5117; Match(COMMA);
                            State = 5118; flushOption();
                        }
                    }
                    State = 5123;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class KillStatementContext : ParserRuleContext
    {
        public IToken connectionFormat;
        public ITerminalNode KILL() { return GetToken(MySqlParser.KILL, 0); }
        public DecimalLiteralContext[] decimalLiteral()
        {
            return GetRuleContexts<DecimalLiteralContext>();
        }
        public DecimalLiteralContext decimalLiteral(int i)
        {
            return GetRuleContext<DecimalLiteralContext>(i);
        }
        public ITerminalNode CONNECTION() { return GetToken(MySqlParser.CONNECTION, 0); }
        public ITerminalNode QUERY() { return GetToken(MySqlParser.QUERY, 0); }
        public KillStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_killStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterKillStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitKillStatement(this);
        }
    }

    [RuleVersion(0)]
    public KillStatementContext killStatement()
    {
        KillStatementContext _localctx = new KillStatementContext(Context, State);
        EnterRule(_localctx, 460, RULE_killStatement);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 5124; Match(KILL);
                State = 5126;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == CONNECTION || _la == QUERY)
                {
                    {
                        State = 5125;
                        _localctx.connectionFormat = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == CONNECTION || _la == QUERY))
                        {
                            _localctx.connectionFormat = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                }

                State = 5129;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                do
                {
                    {
                        {
                            State = 5128; decimalLiteral();
                        }
                    }
                    State = 5131;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                } while (((((_la - 987)) & ~0x3f) == 0 && ((1L << (_la - 987)) & ((1L << (ZERO_DECIMAL - 987)) | (1L << (ONE_DECIMAL - 987)) | (1L << (TWO_DECIMAL - 987)) | (1L << (DECIMAL_LITERAL - 987)))) != 0));
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class LoadIndexIntoCacheContext : ParserRuleContext
    {
        public ITerminalNode LOAD() { return GetToken(MySqlParser.LOAD, 0); }
        public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
        public ITerminalNode INTO() { return GetToken(MySqlParser.INTO, 0); }
        public ITerminalNode CACHE() { return GetToken(MySqlParser.CACHE, 0); }
        public LoadedTableIndexesContext[] loadedTableIndexes()
        {
            return GetRuleContexts<LoadedTableIndexesContext>();
        }
        public LoadedTableIndexesContext loadedTableIndexes(int i)
        {
            return GetRuleContext<LoadedTableIndexesContext>(i);
        }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public LoadIndexIntoCacheContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_loadIndexIntoCache; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterLoadIndexIntoCache(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitLoadIndexIntoCache(this);
        }
    }

    [RuleVersion(0)]
    public LoadIndexIntoCacheContext loadIndexIntoCache()
    {
        LoadIndexIntoCacheContext _localctx = new LoadIndexIntoCacheContext(Context, State);
        EnterRule(_localctx, 462, RULE_loadIndexIntoCache);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 5133; Match(LOAD);
                State = 5134; Match(INDEX);
                State = 5135; Match(INTO);
                State = 5136; Match(CACHE);
                State = 5137; loadedTableIndexes();
                State = 5142;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while (_la == COMMA)
                {
                    {
                        {
                            State = 5138; Match(COMMA);
                            State = 5139; loadedTableIndexes();
                        }
                    }
                    State = 5144;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ResetStatementContext : ParserRuleContext
    {
        public ITerminalNode RESET() { return GetToken(MySqlParser.RESET, 0); }
        public ITerminalNode QUERY() { return GetToken(MySqlParser.QUERY, 0); }
        public ITerminalNode CACHE() { return GetToken(MySqlParser.CACHE, 0); }
        public ResetStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_resetStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterResetStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitResetStatement(this);
        }
    }

    [RuleVersion(0)]
    public ResetStatementContext resetStatement()
    {
        ResetStatementContext _localctx = new ResetStatementContext(Context, State);
        EnterRule(_localctx, 464, RULE_resetStatement);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 5145; Match(RESET);
                State = 5146; Match(QUERY);
                State = 5147; Match(CACHE);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ShutdownStatementContext : ParserRuleContext
    {
        public ITerminalNode SHUTDOWN() { return GetToken(MySqlParser.SHUTDOWN, 0); }
        public ShutdownStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_shutdownStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterShutdownStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitShutdownStatement(this);
        }
    }

    [RuleVersion(0)]
    public ShutdownStatementContext shutdownStatement()
    {
        ShutdownStatementContext _localctx = new ShutdownStatementContext(Context, State);
        EnterRule(_localctx, 466, RULE_shutdownStatement);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 5149; Match(SHUTDOWN);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class TableIndexesContext : ParserRuleContext
    {
        public IToken indexFormat;
        public TableNameContext tableName()
        {
            return GetRuleContext<TableNameContext>(0);
        }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public UidListContext uidList()
        {
            return GetRuleContext<UidListContext>(0);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
        public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
        public TableIndexesContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_tableIndexes; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterTableIndexes(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitTableIndexes(this);
        }
    }

    [RuleVersion(0)]
    public TableIndexesContext tableIndexes()
    {
        TableIndexesContext _localctx = new TableIndexesContext(Context, State);
        EnterRule(_localctx, 468, RULE_tableIndexes);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 5151; tableName();
                State = 5159;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == INDEX || _la == KEY || _la == LR_BRACKET)
                {
                    {
                        State = 5153;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == INDEX || _la == KEY)
                        {
                            {
                                State = 5152;
                                _localctx.indexFormat = TokenStream.LT(1);
                                _la = TokenStream.LA(1);
                                if (!(_la == INDEX || _la == KEY))
                                {
                                    _localctx.indexFormat = ErrorHandler.RecoverInline(this);
                                }
                                else
                                {
                                    ErrorHandler.ReportMatch(this);
                                    Consume();
                                }
                            }
                        }

                        State = 5155; Match(LR_BRACKET);
                        State = 5156; uidList();
                        State = 5157; Match(RR_BRACKET);
                    }
                }

            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class FlushOptionContext : ParserRuleContext
    {
        public FlushOptionContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_flushOption; } }

        public FlushOptionContext() { }
        public virtual void CopyFrom(FlushOptionContext context)
        {
            base.CopyFrom(context);
        }
    }
    public partial class TableFlushOptionContext : FlushOptionContext
    {
        public ITerminalNode TABLES() { return GetToken(MySqlParser.TABLES, 0); }
        public TablesContext tables()
        {
            return GetRuleContext<TablesContext>(0);
        }
        public FlushTableOptionContext flushTableOption()
        {
            return GetRuleContext<FlushTableOptionContext>(0);
        }
        public TableFlushOptionContext(FlushOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterTableFlushOption(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitTableFlushOption(this);
        }
    }
    public partial class ChannelFlushOptionContext : FlushOptionContext
    {
        public ITerminalNode RELAY() { return GetToken(MySqlParser.RELAY, 0); }
        public ITerminalNode LOGS() { return GetToken(MySqlParser.LOGS, 0); }
        public ChannelOptionContext channelOption()
        {
            return GetRuleContext<ChannelOptionContext>(0);
        }
        public ChannelFlushOptionContext(FlushOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterChannelFlushOption(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitChannelFlushOption(this);
        }
    }
    public partial class SimpleFlushOptionContext : FlushOptionContext
    {
        public ITerminalNode DES_KEY_FILE() { return GetToken(MySqlParser.DES_KEY_FILE, 0); }
        public ITerminalNode HOSTS() { return GetToken(MySqlParser.HOSTS, 0); }
        public ITerminalNode LOGS() { return GetToken(MySqlParser.LOGS, 0); }
        public ITerminalNode OPTIMIZER_COSTS() { return GetToken(MySqlParser.OPTIMIZER_COSTS, 0); }
        public ITerminalNode PRIVILEGES() { return GetToken(MySqlParser.PRIVILEGES, 0); }
        public ITerminalNode QUERY() { return GetToken(MySqlParser.QUERY, 0); }
        public ITerminalNode CACHE() { return GetToken(MySqlParser.CACHE, 0); }
        public ITerminalNode STATUS() { return GetToken(MySqlParser.STATUS, 0); }
        public ITerminalNode USER_RESOURCES() { return GetToken(MySqlParser.USER_RESOURCES, 0); }
        public ITerminalNode TABLES() { return GetToken(MySqlParser.TABLES, 0); }
        public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
        public ITerminalNode READ() { return GetToken(MySqlParser.READ, 0); }
        public ITerminalNode LOCK() { return GetToken(MySqlParser.LOCK, 0); }
        public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
        public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
        public ITerminalNode ERROR() { return GetToken(MySqlParser.ERROR, 0); }
        public ITerminalNode GENERAL() { return GetToken(MySqlParser.GENERAL, 0); }
        public ITerminalNode RELAY() { return GetToken(MySqlParser.RELAY, 0); }
        public ITerminalNode SLOW() { return GetToken(MySqlParser.SLOW, 0); }
        public SimpleFlushOptionContext(FlushOptionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterSimpleFlushOption(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitSimpleFlushOption(this);
        }
    }

    [RuleVersion(0)]
    public FlushOptionContext flushOption()
    {
        FlushOptionContext _localctx = new FlushOptionContext(Context, State);
        EnterRule(_localctx, 470, RULE_flushOption);
        int _la;
        try
        {
            State = 5191;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 747, Context))
            {
                case 1:
                    _localctx = new SimpleFlushOptionContext(_localctx);
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 5179;
                        ErrorHandler.Sync(this);
                        switch (TokenStream.LA(1))
                        {
                            case DES_KEY_FILE:
                                {
                                    State = 5161; Match(DES_KEY_FILE);
                                }
                                break;
                            case HOSTS:
                                {
                                    State = 5162; Match(HOSTS);
                                }
                                break;
                            case BINARY:
                            case ENGINE:
                            case ERROR:
                            case GENERAL:
                            case LOGS:
                            case RELAY:
                            case SLOW:
                                {
                                    State = 5164;
                                    ErrorHandler.Sync(this);
                                    _la = TokenStream.LA(1);
                                    if (_la == BINARY || ((((_la - 331)) & ~0x3f) == 0 && ((1L << (_la - 331)) & ((1L << (ENGINE - 331)) | (1L << (ERROR - 331)) | (1L << (GENERAL - 331)))) != 0) || _la == RELAY || _la == SLOW)
                                    {
                                        {
                                            State = 5163;
                                            _la = TokenStream.LA(1);
                                            if (!(_la == BINARY || ((((_la - 331)) & ~0x3f) == 0 && ((1L << (_la - 331)) & ((1L << (ENGINE - 331)) | (1L << (ERROR - 331)) | (1L << (GENERAL - 331)))) != 0) || _la == RELAY || _la == SLOW))
                                            {
                                                ErrorHandler.RecoverInline(this);
                                            }
                                            else
                                            {
                                                ErrorHandler.ReportMatch(this);
                                                Consume();
                                            }
                                        }
                                    }

                                    State = 5166; Match(LOGS);
                                }
                                break;
                            case OPTIMIZER_COSTS:
                                {
                                    State = 5167; Match(OPTIMIZER_COSTS);
                                }
                                break;
                            case PRIVILEGES:
                                {
                                    State = 5168; Match(PRIVILEGES);
                                }
                                break;
                            case QUERY:
                                {
                                    State = 5169; Match(QUERY);
                                    State = 5170; Match(CACHE);
                                }
                                break;
                            case STATUS:
                                {
                                    State = 5171; Match(STATUS);
                                }
                                break;
                            case USER_RESOURCES:
                                {
                                    State = 5172; Match(USER_RESOURCES);
                                }
                                break;
                            case TABLES:
                                {
                                    State = 5173; Match(TABLES);
                                    State = 5177;
                                    ErrorHandler.Sync(this);
                                    _la = TokenStream.LA(1);
                                    if (_la == WITH)
                                    {
                                        {
                                            State = 5174; Match(WITH);
                                            State = 5175; Match(READ);
                                            State = 5176; Match(LOCK);
                                        }
                                    }

                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }
                    break;
                case 2:
                    _localctx = new ChannelFlushOptionContext(_localctx);
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 5181; Match(RELAY);
                        State = 5182; Match(LOGS);
                        State = 5184;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == FOR)
                        {
                            {
                                State = 5183; channelOption();
                            }
                        }

                    }
                    break;
                case 3:
                    _localctx = new TableFlushOptionContext(_localctx);
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 5186; Match(TABLES);
                        State = 5187; tables();
                        State = 5189;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == FOR || _la == WITH)
                        {
                            {
                                State = 5188; flushTableOption();
                            }
                        }

                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class FlushTableOptionContext : ParserRuleContext
    {
        public ITerminalNode WITH() { return GetToken(MySqlParser.WITH, 0); }
        public ITerminalNode READ() { return GetToken(MySqlParser.READ, 0); }
        public ITerminalNode LOCK() { return GetToken(MySqlParser.LOCK, 0); }
        public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
        public ITerminalNode EXPORT() { return GetToken(MySqlParser.EXPORT, 0); }
        public FlushTableOptionContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_flushTableOption; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterFlushTableOption(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitFlushTableOption(this);
        }
    }

    [RuleVersion(0)]
    public FlushTableOptionContext flushTableOption()
    {
        FlushTableOptionContext _localctx = new FlushTableOptionContext(Context, State);
        EnterRule(_localctx, 472, RULE_flushTableOption);
        try
        {
            State = 5198;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case WITH:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 5193; Match(WITH);
                        State = 5194; Match(READ);
                        State = 5195; Match(LOCK);
                    }
                    break;
                case FOR:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 5196; Match(FOR);
                        State = 5197; Match(EXPORT);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class LoadedTableIndexesContext : ParserRuleContext
    {
        public UidListContext partitionList;
        public IToken indexFormat;
        public UidListContext indexList;
        public TableNameContext tableName()
        {
            return GetRuleContext<TableNameContext>(0);
        }
        public ITerminalNode PARTITION() { return GetToken(MySqlParser.PARTITION, 0); }
        public ITerminalNode[] LR_BRACKET() { return GetTokens(MySqlParser.LR_BRACKET); }
        public ITerminalNode LR_BRACKET(int i)
        {
            return GetToken(MySqlParser.LR_BRACKET, i);
        }
        public ITerminalNode[] RR_BRACKET() { return GetTokens(MySqlParser.RR_BRACKET); }
        public ITerminalNode RR_BRACKET(int i)
        {
            return GetToken(MySqlParser.RR_BRACKET, i);
        }
        public ITerminalNode IGNORE() { return GetToken(MySqlParser.IGNORE, 0); }
        public ITerminalNode LEAVES() { return GetToken(MySqlParser.LEAVES, 0); }
        public UidListContext[] uidList()
        {
            return GetRuleContexts<UidListContext>();
        }
        public UidListContext uidList(int i)
        {
            return GetRuleContext<UidListContext>(i);
        }
        public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
        public ITerminalNode INDEX() { return GetToken(MySqlParser.INDEX, 0); }
        public ITerminalNode KEY() { return GetToken(MySqlParser.KEY, 0); }
        public LoadedTableIndexesContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_loadedTableIndexes; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterLoadedTableIndexes(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitLoadedTableIndexes(this);
        }
    }

    [RuleVersion(0)]
    public LoadedTableIndexesContext loadedTableIndexes()
    {
        LoadedTableIndexesContext _localctx = new LoadedTableIndexesContext(Context, State);
        EnterRule(_localctx, 474, RULE_loadedTableIndexes);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 5200; tableName();
                State = 5208;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == PARTITION)
                {
                    {
                        State = 5201; Match(PARTITION);
                        State = 5202; Match(LR_BRACKET);
                        State = 5205;
                        ErrorHandler.Sync(this);
                        switch (TokenStream.LA(1))
                        {
                            case CURRENT:
                            case DATABASE:
                            case DIAGNOSTICS:
                            case LEFT:
                            case NUMBER:
                            case RIGHT:
                            case STACKED:
                            case DATE:
                            case TIME:
                            case TIMESTAMP:
                            case DATETIME:
                            case YEAR:
                            case TEXT:
                            case ENUM:
                            case SERIAL:
                            case COUNT:
                            case POSITION:
                            case ACCOUNT:
                            case ACTION:
                            case AFTER:
                            case AGGREGATE:
                            case ALGORITHM:
                            case ANY:
                            case AT:
                            case AUTHORS:
                            case AUTOCOMMIT:
                            case AUTOEXTEND_SIZE:
                            case AUTO_INCREMENT:
                            case AVG_ROW_LENGTH:
                            case BEGIN:
                            case BINLOG:
                            case BIT:
                            case BLOCK:
                            case BOOL:
                            case BOOLEAN:
                            case BTREE:
                            case CACHE:
                            case CASCADED:
                            case CHAIN:
                            case CHANGED:
                            case CHANNEL:
                            case CHECKSUM:
                            case PAGE_CHECKSUM:
                            case CIPHER:
                            case CLASS_ORIGIN:
                            case CLIENT:
                            case CLOSE:
                            case COALESCE:
                            case CODE:
                            case COLUMNS:
                            case COLUMN_FORMAT:
                            case COLUMN_NAME:
                            case COMMENT:
                            case COMMIT:
                            case COMPACT:
                            case COMPLETION:
                            case COMPRESSED:
                            case COMPRESSION:
                            case CONCURRENT:
                            case CONNECTION:
                            case CONSISTENT:
                            case CONSTRAINT_CATALOG:
                            case CONSTRAINT_SCHEMA:
                            case CONSTRAINT_NAME:
                            case CONTAINS:
                            case CONTEXT:
                            case CONTRIBUTORS:
                            case COPY:
                            case CPU:
                            case CURSOR_NAME:
                            case DATA:
                            case DATAFILE:
                            case DEALLOCATE:
                            case DEFAULT_AUTH:
                            case DEFINER:
                            case DELAY_KEY_WRITE:
                            case DES_KEY_FILE:
                            case DIRECTORY:
                            case DISABLE:
                            case DISCARD:
                            case DISK:
                            case DO:
                            case DUMPFILE:
                            case DUPLICATE:
                            case DYNAMIC:
                            case ENABLE:
                            case ENCRYPTION:
                            case END:
                            case ENDS:
                            case ENGINE:
                            case ENGINES:
                            case ERROR:
                            case ERRORS:
                            case ESCAPE:
                            case EVEN:
                            case EVENT:
                            case EVENTS:
                            case EVERY:
                            case EXCHANGE:
                            case EXCLUSIVE:
                            case EXPIRE:
                            case EXPORT:
                            case EXTENDED:
                            case EXTENT_SIZE:
                            case FAST:
                            case FAULTS:
                            case FIELDS:
                            case FILE_BLOCK_SIZE:
                            case FILTER:
                            case FIRST:
                            case FIXED:
                            case FLUSH:
                            case FOLLOWS:
                            case FOUND:
                            case FULL:
                            case FUNCTION:
                            case GENERAL:
                            case GLOBAL:
                            case GRANTS:
                            case GROUP_REPLICATION:
                            case HANDLER:
                            case HASH:
                            case HELP:
                            case HOST:
                            case HOSTS:
                            case IDENTIFIED:
                            case IGNORE_SERVER_IDS:
                            case IMPORT:
                            case INDEXES:
                            case INITIAL_SIZE:
                            case INPLACE:
                            case INSERT_METHOD:
                            case INSTALL:
                            case INSTANCE:
                            case INVISIBLE:
                            case INVOKER:
                            case IO:
                            case IO_THREAD:
                            case IPC:
                            case ISOLATION:
                            case ISSUER:
                            case JSON:
                            case KEY_BLOCK_SIZE:
                            case LANGUAGE:
                            case LAST:
                            case LEAVES:
                            case LESS:
                            case LEVEL:
                            case LIST:
                            case LOCAL:
                            case LOGFILE:
                            case LOGS:
                            case MASTER:
                            case MASTER_AUTO_POSITION:
                            case MASTER_CONNECT_RETRY:
                            case MASTER_DELAY:
                            case MASTER_HEARTBEAT_PERIOD:
                            case MASTER_HOST:
                            case MASTER_LOG_FILE:
                            case MASTER_LOG_POS:
                            case MASTER_PASSWORD:
                            case MASTER_PORT:
                            case MASTER_RETRY_COUNT:
                            case MASTER_SSL:
                            case MASTER_SSL_CA:
                            case MASTER_SSL_CAPATH:
                            case MASTER_SSL_CERT:
                            case MASTER_SSL_CIPHER:
                            case MASTER_SSL_CRL:
                            case MASTER_SSL_CRLPATH:
                            case MASTER_SSL_KEY:
                            case MASTER_TLS_VERSION:
                            case MASTER_USER:
                            case MAX_CONNECTIONS_PER_HOUR:
                            case MAX_QUERIES_PER_HOUR:
                            case MAX_ROWS:
                            case MAX_SIZE:
                            case MAX_UPDATES_PER_HOUR:
                            case MAX_USER_CONNECTIONS:
                            case MEDIUM:
                            case MERGE:
                            case MESSAGE_TEXT:
                            case MID:
                            case MIGRATE:
                            case MIN_ROWS:
                            case MODE:
                            case MODIFY:
                            case MUTEX:
                            case MYSQL:
                            case MYSQL_ERRNO:
                            case NAME:
                            case NAMES:
                            case NCHAR:
                            case NEVER:
                            case NEXT:
                            case NO:
                            case NODEGROUP:
                            case NONE:
                            case OFFLINE:
                            case OFFSET:
                            case OJ:
                            case OLD_PASSWORD:
                            case ONE:
                            case ONLINE:
                            case ONLY:
                            case OPEN:
                            case OPTIMIZER_COSTS:
                            case OPTIONS:
                            case OWNER:
                            case PACK_KEYS:
                            case PAGE:
                            case PARSER:
                            case PARTIAL:
                            case PARTITIONING:
                            case PARTITIONS:
                            case PASSWORD:
                            case PHASE:
                            case PLUGIN:
                            case PLUGIN_DIR:
                            case PLUGINS:
                            case PORT:
                            case PRECEDES:
                            case PREPARE:
                            case PRESERVE:
                            case PREV:
                            case PROCESSLIST:
                            case PROFILE:
                            case PROFILES:
                            case PROXY:
                            case QUERY:
                            case QUICK:
                            case REBUILD:
                            case RECOVER:
                            case REDO_BUFFER_SIZE:
                            case REDUNDANT:
                            case RELAY:
                            case RELAY_LOG_FILE:
                            case RELAY_LOG_POS:
                            case RELAYLOG:
                            case REMOVE:
                            case REORGANIZE:
                            case REPAIR:
                            case REPLICATE_DO_DB:
                            case REPLICATE_DO_TABLE:
                            case REPLICATE_IGNORE_DB:
                            case REPLICATE_IGNORE_TABLE:
                            case REPLICATE_REWRITE_DB:
                            case REPLICATE_WILD_DO_TABLE:
                            case REPLICATE_WILD_IGNORE_TABLE:
                            case REPLICATION:
                            case RESET:
                            case RESUME:
                            case RETURNED_SQLSTATE:
                            case RETURNS:
                            case ROLLBACK:
                            case ROLLUP:
                            case ROTATE:
                            case ROW:
                            case ROWS:
                            case ROW_FORMAT:
                            case SAVEPOINT:
                            case SCHEDULE:
                            case SECURITY:
                            case SERVER:
                            case SESSION:
                            case SHARE:
                            case SHARED:
                            case SIGNED:
                            case SIMPLE:
                            case SLAVE:
                            case SLOW:
                            case SNAPSHOT:
                            case SOCKET:
                            case SOME:
                            case SONAME:
                            case SOUNDS:
                            case SOURCE:
                            case SQL_AFTER_GTIDS:
                            case SQL_AFTER_MTS_GAPS:
                            case SQL_BEFORE_GTIDS:
                            case SQL_BUFFER_RESULT:
                            case SQL_CACHE:
                            case SQL_NO_CACHE:
                            case SQL_THREAD:
                            case START:
                            case STARTS:
                            case STATS_AUTO_RECALC:
                            case STATS_PERSISTENT:
                            case STATS_SAMPLE_PAGES:
                            case STATUS:
                            case STOP:
                            case STORAGE:
                            case STRING:
                            case SUBCLASS_ORIGIN:
                            case SUBJECT:
                            case SUBPARTITION:
                            case SUBPARTITIONS:
                            case SUSPEND:
                            case SWAPS:
                            case SWITCHES:
                            case TABLE_NAME:
                            case TABLESPACE:
                            case TEMPORARY:
                            case TEMPTABLE:
                            case THAN:
                            case TRADITIONAL:
                            case TRANSACTION:
                            case TRIGGERS:
                            case TRUNCATE:
                            case UNDEFINED:
                            case UNDOFILE:
                            case UNDO_BUFFER_SIZE:
                            case UNINSTALL:
                            case UNKNOWN:
                            case UNTIL:
                            case UPGRADE:
                            case USER:
                            case USE_FRM:
                            case USER_RESOURCES:
                            case VALIDATION:
                            case VALUE:
                            case VARIABLES:
                            case VIEW:
                            case VISIBLE:
                            case WAIT:
                            case WARNINGS:
                            case WITHOUT:
                            case WORK:
                            case WRAPPER:
                            case X509:
                            case XA:
                            case XML:
                            case INTERNAL:
                            case QUARTER:
                            case MONTH:
                            case DAY:
                            case HOUR:
                            case MINUTE:
                            case WEEK:
                            case SECOND:
                            case MICROSECOND:
                            case TABLES:
                            case ROUTINE:
                            case EXECUTE:
                            case FILE:
                            case PROCESS:
                            case RELOAD:
                            case SHUTDOWN:
                            case SUPER:
                            case PRIVILEGES:
                            case SESSION_VARIABLES_ADMIN:
                            case ARMSCII8:
                            case ASCII:
                            case BIG5:
                            case CP1250:
                            case CP1251:
                            case CP1256:
                            case CP1257:
                            case CP850:
                            case CP852:
                            case CP866:
                            case CP932:
                            case DEC8:
                            case EUCJPMS:
                            case EUCKR:
                            case GB2312:
                            case GBK:
                            case GEOSTD8:
                            case GREEK:
                            case HEBREW:
                            case HP8:
                            case KEYBCS2:
                            case KOI8R:
                            case KOI8U:
                            case LATIN1:
                            case LATIN2:
                            case LATIN5:
                            case LATIN7:
                            case MACCE:
                            case MACROMAN:
                            case SJIS:
                            case SWE7:
                            case TIS620:
                            case UCS2:
                            case UJIS:
                            case UTF16:
                            case UTF16LE:
                            case UTF32:
                            case UTF8:
                            case UTF8MB3:
                            case UTF8MB4:
                            case ARCHIVE:
                            case BLACKHOLE:
                            case CSV:
                            case FEDERATED:
                            case INNODB:
                            case MEMORY:
                            case MRG_MYISAM:
                            case MYISAM:
                            case NDB:
                            case NDBCLUSTER:
                            case PERFORMANCE_SCHEMA:
                            case TOKUDB:
                            case REPEATABLE:
                            case COMMITTED:
                            case UNCOMMITTED:
                            case SERIALIZABLE:
                            case GEOMETRYCOLLECTION:
                            case LINESTRING:
                            case MULTILINESTRING:
                            case MULTIPOINT:
                            case MULTIPOLYGON:
                            case POINT:
                            case POLYGON:
                            case ABS:
                            case ACOS:
                            case ADDDATE:
                            case ADDTIME:
                            case AES_DECRYPT:
                            case AES_ENCRYPT:
                            case AREA:
                            case ASBINARY:
                            case ASIN:
                            case ASTEXT:
                            case ASWKB:
                            case ASWKT:
                            case ASYMMETRIC_DECRYPT:
                            case ASYMMETRIC_DERIVE:
                            case ASYMMETRIC_ENCRYPT:
                            case ASYMMETRIC_SIGN:
                            case ASYMMETRIC_VERIFY:
                            case ATAN:
                            case ATAN2:
                            case BENCHMARK:
                            case BIN:
                            case BIT_COUNT:
                            case BIT_LENGTH:
                            case BUFFER:
                            case CATALOG_NAME:
                            case CEIL:
                            case CEILING:
                            case CENTROID:
                            case CHARACTER_LENGTH:
                            case CHARSET:
                            case CHAR_LENGTH:
                            case COERCIBILITY:
                            case COLLATION:
                            case COMPRESS:
                            case CONCAT:
                            case CONCAT_WS:
                            case CONNECTION_ID:
                            case CONV:
                            case CONVERT_TZ:
                            case COS:
                            case COT:
                            case CRC32:
                            case CREATE_ASYMMETRIC_PRIV_KEY:
                            case CREATE_ASYMMETRIC_PUB_KEY:
                            case CREATE_DH_PARAMETERS:
                            case CREATE_DIGEST:
                            case CROSSES:
                            case DATEDIFF:
                            case DATE_FORMAT:
                            case DAYNAME:
                            case DAYOFMONTH:
                            case DAYOFWEEK:
                            case DAYOFYEAR:
                            case DECODE:
                            case DEGREES:
                            case DES_DECRYPT:
                            case DES_ENCRYPT:
                            case DIMENSION:
                            case DISJOINT:
                            case ELT:
                            case ENCODE:
                            case ENCRYPT:
                            case ENDPOINT:
                            case ENVELOPE:
                            case EQUALS:
                            case EXP:
                            case EXPORT_SET:
                            case EXTERIORRING:
                            case EXTRACTVALUE:
                            case FIELD:
                            case FIND_IN_SET:
                            case FLOOR:
                            case FORMAT:
                            case FOUND_ROWS:
                            case FROM_BASE64:
                            case FROM_DAYS:
                            case FROM_UNIXTIME:
                            case GEOMCOLLFROMTEXT:
                            case GEOMCOLLFROMWKB:
                            case GEOMETRYCOLLECTIONFROMTEXT:
                            case GEOMETRYCOLLECTIONFROMWKB:
                            case GEOMETRYFROMTEXT:
                            case GEOMETRYFROMWKB:
                            case GEOMETRYN:
                            case GEOMETRYTYPE:
                            case GEOMFROMTEXT:
                            case GEOMFROMWKB:
                            case GET_FORMAT:
                            case GET_LOCK:
                            case GLENGTH:
                            case GREATEST:
                            case GTID_SUBSET:
                            case GTID_SUBTRACT:
                            case HEX:
                            case IFNULL:
                            case INET6_ATON:
                            case INET6_NTOA:
                            case INET_ATON:
                            case INET_NTOA:
                            case INSTR:
                            case INTERIORRINGN:
                            case INTERSECTS:
                            case ISCLOSED:
                            case ISEMPTY:
                            case ISNULL:
                            case ISSIMPLE:
                            case IS_FREE_LOCK:
                            case IS_IPV4:
                            case IS_IPV4_COMPAT:
                            case IS_IPV4_MAPPED:
                            case IS_IPV6:
                            case IS_USED_LOCK:
                            case LAST_INSERT_ID:
                            case LCASE:
                            case LEAST:
                            case LENGTH:
                            case LINEFROMTEXT:
                            case LINEFROMWKB:
                            case LINESTRINGFROMTEXT:
                            case LINESTRINGFROMWKB:
                            case LN:
                            case LOAD_FILE:
                            case LOCATE:
                            case LOG:
                            case LOG10:
                            case LOG2:
                            case LOWER:
                            case LPAD:
                            case LTRIM:
                            case MAKEDATE:
                            case MAKETIME:
                            case MAKE_SET:
                            case MASTER_POS_WAIT:
                            case MBRCONTAINS:
                            case MBRDISJOINT:
                            case MBREQUAL:
                            case MBRINTERSECTS:
                            case MBROVERLAPS:
                            case MBRTOUCHES:
                            case MBRWITHIN:
                            case MD5:
                            case MLINEFROMTEXT:
                            case MLINEFROMWKB:
                            case MONTHNAME:
                            case MPOINTFROMTEXT:
                            case MPOINTFROMWKB:
                            case MPOLYFROMTEXT:
                            case MPOLYFROMWKB:
                            case MULTILINESTRINGFROMTEXT:
                            case MULTILINESTRINGFROMWKB:
                            case MULTIPOINTFROMTEXT:
                            case MULTIPOINTFROMWKB:
                            case MULTIPOLYGONFROMTEXT:
                            case MULTIPOLYGONFROMWKB:
                            case NAME_CONST:
                            case NULLIF:
                            case NUMGEOMETRIES:
                            case NUMINTERIORRINGS:
                            case NUMPOINTS:
                            case OCT:
                            case OCTET_LENGTH:
                            case ORD:
                            case OVERLAPS:
                            case PERIOD_ADD:
                            case PERIOD_DIFF:
                            case PI:
                            case POINTFROMTEXT:
                            case POINTFROMWKB:
                            case POINTN:
                            case POLYFROMTEXT:
                            case POLYFROMWKB:
                            case POLYGONFROMTEXT:
                            case POLYGONFROMWKB:
                            case POW:
                            case POWER:
                            case QUOTE:
                            case RADIANS:
                            case RAND:
                            case RANDOM_BYTES:
                            case RELEASE_LOCK:
                            case REVERSE:
                            case ROUND:
                            case ROW_COUNT:
                            case RPAD:
                            case RTRIM:
                            case SEC_TO_TIME:
                            case SESSION_USER:
                            case SHA:
                            case SHA1:
                            case SHA2:
                            case SCHEMA_NAME:
                            case SIGN:
                            case SIN:
                            case SLEEP:
                            case SOUNDEX:
                            case SQL_THREAD_WAIT_AFTER_GTIDS:
                            case SQRT:
                            case SRID:
                            case STARTPOINT:
                            case STRCMP:
                            case STR_TO_DATE:
                            case ST_AREA:
                            case ST_ASBINARY:
                            case ST_ASTEXT:
                            case ST_ASWKB:
                            case ST_ASWKT:
                            case ST_BUFFER:
                            case ST_CENTROID:
                            case ST_CONTAINS:
                            case ST_CROSSES:
                            case ST_DIFFERENCE:
                            case ST_DIMENSION:
                            case ST_DISJOINT:
                            case ST_DISTANCE:
                            case ST_ENDPOINT:
                            case ST_ENVELOPE:
                            case ST_EQUALS:
                            case ST_EXTERIORRING:
                            case ST_GEOMCOLLFROMTEXT:
                            case ST_GEOMCOLLFROMTXT:
                            case ST_GEOMCOLLFROMWKB:
                            case ST_GEOMETRYCOLLECTIONFROMTEXT:
                            case ST_GEOMETRYCOLLECTIONFROMWKB:
                            case ST_GEOMETRYFROMTEXT:
                            case ST_GEOMETRYFROMWKB:
                            case ST_GEOMETRYN:
                            case ST_GEOMETRYTYPE:
                            case ST_GEOMFROMTEXT:
                            case ST_GEOMFROMWKB:
                            case ST_INTERIORRINGN:
                            case ST_INTERSECTION:
                            case ST_INTERSECTS:
                            case ST_ISCLOSED:
                            case ST_ISEMPTY:
                            case ST_ISSIMPLE:
                            case ST_LINEFROMTEXT:
                            case ST_LINEFROMWKB:
                            case ST_LINESTRINGFROMTEXT:
                            case ST_LINESTRINGFROMWKB:
                            case ST_NUMGEOMETRIES:
                            case ST_NUMINTERIORRING:
                            case ST_NUMINTERIORRINGS:
                            case ST_NUMPOINTS:
                            case ST_OVERLAPS:
                            case ST_POINTFROMTEXT:
                            case ST_POINTFROMWKB:
                            case ST_POINTN:
                            case ST_POLYFROMTEXT:
                            case ST_POLYFROMWKB:
                            case ST_POLYGONFROMTEXT:
                            case ST_POLYGONFROMWKB:
                            case ST_SRID:
                            case ST_STARTPOINT:
                            case ST_SYMDIFFERENCE:
                            case ST_TOUCHES:
                            case ST_UNION:
                            case ST_WITHIN:
                            case ST_X:
                            case ST_Y:
                            case SUBDATE:
                            case SUBSTRING_INDEX:
                            case SUBTIME:
                            case SYSTEM_USER:
                            case TAN:
                            case TIMEDIFF:
                            case TIMESTAMPADD:
                            case TIMESTAMPDIFF:
                            case TIME_FORMAT:
                            case TIME_TO_SEC:
                            case TOUCHES:
                            case TO_BASE64:
                            case TO_DAYS:
                            case TO_SECONDS:
                            case UCASE:
                            case UNCOMPRESS:
                            case UNCOMPRESSED_LENGTH:
                            case UNHEX:
                            case UNIX_TIMESTAMP:
                            case UPDATEXML:
                            case UPPER:
                            case UUID:
                            case UUID_SHORT:
                            case VALIDATE_PASSWORD_STRENGTH:
                            case VERSION:
                            case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
                            case WEEKDAY:
                            case WEEKOFYEAR:
                            case WEIGHT_STRING:
                            case WITHIN:
                            case YEARWEEK:
                            case Y_FUNCTION:
                            case X_FUNCTION:
                            case CHARSET_REVERSE_QOUTE_STRING:
                            case STRING_LITERAL:
                            case ID:
                            case REVERSE_QUOTE_ID:
                                {
                                    State = 5203; _localctx.partitionList = uidList();
                                }
                                break;
                            case ALL:
                                {
                                    State = 5204; Match(ALL);
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        State = 5207; Match(RR_BRACKET);
                    }
                }

                State = 5217;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 752, Context))
                {
                    case 1:
                        {
                            State = 5211;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            if (_la == INDEX || _la == KEY)
                            {
                                {
                                    State = 5210;
                                    _localctx.indexFormat = TokenStream.LT(1);
                                    _la = TokenStream.LA(1);
                                    if (!(_la == INDEX || _la == KEY))
                                    {
                                        _localctx.indexFormat = ErrorHandler.RecoverInline(this);
                                    }
                                    else
                                    {
                                        ErrorHandler.ReportMatch(this);
                                        Consume();
                                    }
                                }
                            }

                            State = 5213; Match(LR_BRACKET);
                            State = 5214; _localctx.indexList = uidList();
                            State = 5215; Match(RR_BRACKET);
                        }
                        break;
                }
                State = 5221;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == IGNORE)
                {
                    {
                        State = 5219; Match(IGNORE);
                        State = 5220; Match(LEAVES);
                    }
                }

            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class SimpleDescribeStatementContext : ParserRuleContext
    {
        public IToken command;
        public UidContext column;
        public IToken pattern;
        public TableNameContext tableName()
        {
            return GetRuleContext<TableNameContext>(0);
        }
        public ITerminalNode EXPLAIN() { return GetToken(MySqlParser.EXPLAIN, 0); }
        public ITerminalNode DESCRIBE() { return GetToken(MySqlParser.DESCRIBE, 0); }
        public ITerminalNode DESC() { return GetToken(MySqlParser.DESC, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public SimpleDescribeStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_simpleDescribeStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterSimpleDescribeStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitSimpleDescribeStatement(this);
        }
    }

    [RuleVersion(0)]
    public SimpleDescribeStatementContext simpleDescribeStatement()
    {
        SimpleDescribeStatementContext _localctx = new SimpleDescribeStatementContext(Context, State);
        EnterRule(_localctx, 476, RULE_simpleDescribeStatement);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 5223;
                _localctx.command = TokenStream.LT(1);
                _la = TokenStream.LA(1);
                if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DESC) | (1L << DESCRIBE) | (1L << EXPLAIN))) != 0)))
                {
                    _localctx.command = ErrorHandler.RecoverInline(this);
                }
                else
                {
                    ErrorHandler.ReportMatch(this);
                    Consume();
                }
                State = 5224; tableName();
                State = 5227;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 754, Context))
                {
                    case 1:
                        {
                            State = 5225; _localctx.column = uid();
                        }
                        break;
                    case 2:
                        {
                            State = 5226; _localctx.pattern = Match(STRING_LITERAL);
                        }
                        break;
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class FullDescribeStatementContext : ParserRuleContext
    {
        public IToken command;
        public IToken formatType;
        public IToken formatValue;
        public DescribeObjectClauseContext describeObjectClause()
        {
            return GetRuleContext<DescribeObjectClauseContext>(0);
        }
        public ITerminalNode EXPLAIN() { return GetToken(MySqlParser.EXPLAIN, 0); }
        public ITerminalNode DESCRIBE() { return GetToken(MySqlParser.DESCRIBE, 0); }
        public ITerminalNode DESC() { return GetToken(MySqlParser.DESC, 0); }
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public ITerminalNode EXTENDED() { return GetToken(MySqlParser.EXTENDED, 0); }
        public ITerminalNode PARTITIONS() { return GetToken(MySqlParser.PARTITIONS, 0); }
        public ITerminalNode FORMAT() { return GetToken(MySqlParser.FORMAT, 0); }
        public ITerminalNode TRADITIONAL() { return GetToken(MySqlParser.TRADITIONAL, 0); }
        public ITerminalNode JSON() { return GetToken(MySqlParser.JSON, 0); }
        public FullDescribeStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_fullDescribeStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterFullDescribeStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitFullDescribeStatement(this);
        }
    }

    [RuleVersion(0)]
    public FullDescribeStatementContext fullDescribeStatement()
    {
        FullDescribeStatementContext _localctx = new FullDescribeStatementContext(Context, State);
        EnterRule(_localctx, 478, RULE_fullDescribeStatement);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 5229;
                _localctx.command = TokenStream.LT(1);
                _la = TokenStream.LA(1);
                if (!((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DESC) | (1L << DESCRIBE) | (1L << EXPLAIN))) != 0)))
                {
                    _localctx.command = ErrorHandler.RecoverInline(this);
                }
                else
                {
                    ErrorHandler.ReportMatch(this);
                    Consume();
                }
                State = 5233;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == EXTENDED || _la == PARTITIONS || _la == FORMAT)
                {
                    {
                        State = 5230;
                        _localctx.formatType = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == EXTENDED || _la == PARTITIONS || _la == FORMAT))
                        {
                            _localctx.formatType = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                        State = 5231; Match(EQUAL_SYMBOL);
                        State = 5232;
                        _localctx.formatValue = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == JSON || _la == TRADITIONAL))
                        {
                            _localctx.formatValue = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                }

                State = 5235; describeObjectClause();
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class HelpStatementContext : ParserRuleContext
    {
        public ITerminalNode HELP() { return GetToken(MySqlParser.HELP, 0); }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public HelpStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_helpStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterHelpStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitHelpStatement(this);
        }
    }

    [RuleVersion(0)]
    public HelpStatementContext helpStatement()
    {
        HelpStatementContext _localctx = new HelpStatementContext(Context, State);
        EnterRule(_localctx, 480, RULE_helpStatement);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 5237; Match(HELP);
                State = 5238; Match(STRING_LITERAL);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class UseStatementContext : ParserRuleContext
    {
        public ITerminalNode USE() { return GetToken(MySqlParser.USE, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public UseStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_useStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterUseStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitUseStatement(this);
        }
    }

    [RuleVersion(0)]
    public UseStatementContext useStatement()
    {
        UseStatementContext _localctx = new UseStatementContext(Context, State);
        EnterRule(_localctx, 482, RULE_useStatement);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 5240; Match(USE);
                State = 5241; uid();
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class SignalStatementContext : ParserRuleContext
    {
        public ITerminalNode SIGNAL() { return GetToken(MySqlParser.SIGNAL, 0); }
        public ITerminalNode ID() { return GetToken(MySqlParser.ID, 0); }
        public ITerminalNode REVERSE_QUOTE_ID() { return GetToken(MySqlParser.REVERSE_QUOTE_ID, 0); }
        public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
        public SignalConditionInformationContext[] signalConditionInformation()
        {
            return GetRuleContexts<SignalConditionInformationContext>();
        }
        public SignalConditionInformationContext signalConditionInformation(int i)
        {
            return GetRuleContext<SignalConditionInformationContext>(i);
        }
        public ITerminalNode SQLSTATE() { return GetToken(MySqlParser.SQLSTATE, 0); }
        public StringLiteralContext stringLiteral()
        {
            return GetRuleContext<StringLiteralContext>(0);
        }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public ITerminalNode VALUE() { return GetToken(MySqlParser.VALUE, 0); }
        public SignalStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_signalStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterSignalStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitSignalStatement(this);
        }
    }

    [RuleVersion(0)]
    public SignalStatementContext signalStatement()
    {
        SignalStatementContext _localctx = new SignalStatementContext(Context, State);
        EnterRule(_localctx, 484, RULE_signalStatement);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 5243; Match(SIGNAL);
                State = 5251;
                ErrorHandler.Sync(this);
                switch (TokenStream.LA(1))
                {
                    case SQLSTATE:
                        {
                            {
                                State = 5244; Match(SQLSTATE);
                                State = 5246;
                                ErrorHandler.Sync(this);
                                _la = TokenStream.LA(1);
                                if (_la == VALUE)
                                {
                                    {
                                        State = 5245; Match(VALUE);
                                    }
                                }

                                State = 5248; stringLiteral();
                            }
                        }
                        break;
                    case ID:
                        {
                            State = 5249; Match(ID);
                        }
                        break;
                    case REVERSE_QUOTE_ID:
                        {
                            State = 5250; Match(REVERSE_QUOTE_ID);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
                State = 5262;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 759, Context))
                {
                    case 1:
                        {
                            State = 5253; Match(SET);
                            State = 5254; signalConditionInformation();
                            State = 5259;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            while (_la == COMMA)
                            {
                                {
                                    {
                                        State = 5255; Match(COMMA);
                                        State = 5256; signalConditionInformation();
                                    }
                                }
                                State = 5261;
                                ErrorHandler.Sync(this);
                                _la = TokenStream.LA(1);
                            }
                        }
                        break;
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ResignalStatementContext : ParserRuleContext
    {
        public ITerminalNode RESIGNAL() { return GetToken(MySqlParser.RESIGNAL, 0); }
        public ITerminalNode ID() { return GetToken(MySqlParser.ID, 0); }
        public ITerminalNode REVERSE_QUOTE_ID() { return GetToken(MySqlParser.REVERSE_QUOTE_ID, 0); }
        public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
        public SignalConditionInformationContext[] signalConditionInformation()
        {
            return GetRuleContexts<SignalConditionInformationContext>();
        }
        public SignalConditionInformationContext signalConditionInformation(int i)
        {
            return GetRuleContext<SignalConditionInformationContext>(i);
        }
        public ITerminalNode SQLSTATE() { return GetToken(MySqlParser.SQLSTATE, 0); }
        public StringLiteralContext stringLiteral()
        {
            return GetRuleContext<StringLiteralContext>(0);
        }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public ITerminalNode VALUE() { return GetToken(MySqlParser.VALUE, 0); }
        public ResignalStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_resignalStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterResignalStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitResignalStatement(this);
        }
    }

    [RuleVersion(0)]
    public ResignalStatementContext resignalStatement()
    {
        ResignalStatementContext _localctx = new ResignalStatementContext(Context, State);
        EnterRule(_localctx, 486, RULE_resignalStatement);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 5264; Match(RESIGNAL);
                State = 5272;
                ErrorHandler.Sync(this);
                switch (TokenStream.LA(1))
                {
                    case SQLSTATE:
                        {
                            {
                                State = 5265; Match(SQLSTATE);
                                State = 5267;
                                ErrorHandler.Sync(this);
                                _la = TokenStream.LA(1);
                                if (_la == VALUE)
                                {
                                    {
                                        State = 5266; Match(VALUE);
                                    }
                                }

                                State = 5269; stringLiteral();
                            }
                        }
                        break;
                    case ID:
                        {
                            State = 5270; Match(ID);
                        }
                        break;
                    case REVERSE_QUOTE_ID:
                        {
                            State = 5271; Match(REVERSE_QUOTE_ID);
                        }
                        break;
                    case Eof:
                    case ALTER:
                    case ANALYZE:
                    case CALL:
                    case CHANGE:
                    case CHECK:
                    case CREATE:
                    case DELETE:
                    case DESC:
                    case DESCRIBE:
                    case DROP:
                    case EXPLAIN:
                    case GET:
                    case GRANT:
                    case INSERT:
                    case KILL:
                    case LOAD:
                    case LOCK:
                    case OPTIMIZE:
                    case PURGE:
                    case RELEASE:
                    case RENAME:
                    case REPLACE:
                    case RESIGNAL:
                    case REVOKE:
                    case SELECT:
                    case SET:
                    case SHOW:
                    case SIGNAL:
                    case UNLOCK:
                    case UPDATE:
                    case USE:
                    case BEGIN:
                    case BINLOG:
                    case CACHE:
                    case CHECKSUM:
                    case COMMIT:
                    case DEALLOCATE:
                    case DO:
                    case FLUSH:
                    case HANDLER:
                    case HELP:
                    case INSTALL:
                    case PREPARE:
                    case REPAIR:
                    case RESET:
                    case ROLLBACK:
                    case SAVEPOINT:
                    case START:
                    case STOP:
                    case TRUNCATE:
                    case UNINSTALL:
                    case XA:
                    case EXECUTE:
                    case SHUTDOWN:
                    case MINUSMINUS:
                    case LR_BRACKET:
                    case SEMI:
                        break;
                    default:
                        break;
                }
                State = 5283;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 763, Context))
                {
                    case 1:
                        {
                            State = 5274; Match(SET);
                            State = 5275; signalConditionInformation();
                            State = 5280;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            while (_la == COMMA)
                            {
                                {
                                    {
                                        State = 5276; Match(COMMA);
                                        State = 5277; signalConditionInformation();
                                    }
                                }
                                State = 5282;
                                ErrorHandler.Sync(this);
                                _la = TokenStream.LA(1);
                            }
                        }
                        break;
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class SignalConditionInformationContext : ParserRuleContext
    {
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public ITerminalNode CLASS_ORIGIN() { return GetToken(MySqlParser.CLASS_ORIGIN, 0); }
        public ITerminalNode SUBCLASS_ORIGIN() { return GetToken(MySqlParser.SUBCLASS_ORIGIN, 0); }
        public ITerminalNode MESSAGE_TEXT() { return GetToken(MySqlParser.MESSAGE_TEXT, 0); }
        public ITerminalNode MYSQL_ERRNO() { return GetToken(MySqlParser.MYSQL_ERRNO, 0); }
        public ITerminalNode CONSTRAINT_CATALOG() { return GetToken(MySqlParser.CONSTRAINT_CATALOG, 0); }
        public ITerminalNode CONSTRAINT_SCHEMA() { return GetToken(MySqlParser.CONSTRAINT_SCHEMA, 0); }
        public ITerminalNode CONSTRAINT_NAME() { return GetToken(MySqlParser.CONSTRAINT_NAME, 0); }
        public ITerminalNode CATALOG_NAME() { return GetToken(MySqlParser.CATALOG_NAME, 0); }
        public ITerminalNode SCHEMA_NAME() { return GetToken(MySqlParser.SCHEMA_NAME, 0); }
        public ITerminalNode TABLE_NAME() { return GetToken(MySqlParser.TABLE_NAME, 0); }
        public ITerminalNode COLUMN_NAME() { return GetToken(MySqlParser.COLUMN_NAME, 0); }
        public ITerminalNode CURSOR_NAME() { return GetToken(MySqlParser.CURSOR_NAME, 0); }
        public StringLiteralContext stringLiteral()
        {
            return GetRuleContext<StringLiteralContext>(0);
        }
        public ITerminalNode DECIMAL_LITERAL() { return GetToken(MySqlParser.DECIMAL_LITERAL, 0); }
        public SignalConditionInformationContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_signalConditionInformation; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterSignalConditionInformation(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitSignalConditionInformation(this);
        }
    }

    [RuleVersion(0)]
    public SignalConditionInformationContext signalConditionInformation()
    {
        SignalConditionInformationContext _localctx = new SignalConditionInformationContext(Context, State);
        EnterRule(_localctx, 488, RULE_signalConditionInformation);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 5285;
                _la = TokenStream.LA(1);
                if (!(((((_la - 286)) & ~0x3f) == 0 && ((1L << (_la - 286)) & ((1L << (CLASS_ORIGIN - 286)) | (1L << (COLUMN_NAME - 286)) | (1L << (CONSTRAINT_CATALOG - 286)) | (1L << (CONSTRAINT_SCHEMA - 286)) | (1L << (CONSTRAINT_NAME - 286)) | (1L << (CURSOR_NAME - 286)))) != 0) || _la == MESSAGE_TEXT || _la == MYSQL_ERRNO || _la == SUBCLASS_ORIGIN || _la == TABLE_NAME || _la == CATALOG_NAME || _la == SCHEMA_NAME))
                {
                    ErrorHandler.RecoverInline(this);
                }
                else
                {
                    ErrorHandler.ReportMatch(this);
                    Consume();
                }
                State = 5286; Match(EQUAL_SYMBOL);
                State = 5289;
                ErrorHandler.Sync(this);
                switch (TokenStream.LA(1))
                {
                    case START_NATIONAL_STRING_LITERAL:
                    case STRING_LITERAL:
                    case STRING_CHARSET_NAME:
                        {
                            State = 5287; stringLiteral();
                        }
                        break;
                    case DECIMAL_LITERAL:
                        {
                            State = 5288; Match(DECIMAL_LITERAL);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class DiagnosticsStatementContext : ParserRuleContext
    {
        public ITerminalNode GET() { return GetToken(MySqlParser.GET, 0); }
        public ITerminalNode DIAGNOSTICS() { return GetToken(MySqlParser.DIAGNOSTICS, 0); }
        public ITerminalNode CURRENT() { return GetToken(MySqlParser.CURRENT, 0); }
        public ITerminalNode STACKED() { return GetToken(MySqlParser.STACKED, 0); }
        public VariableClauseContext[] variableClause()
        {
            return GetRuleContexts<VariableClauseContext>();
        }
        public VariableClauseContext variableClause(int i)
        {
            return GetRuleContext<VariableClauseContext>(i);
        }
        public ITerminalNode[] EQUAL_SYMBOL() { return GetTokens(MySqlParser.EQUAL_SYMBOL); }
        public ITerminalNode EQUAL_SYMBOL(int i)
        {
            return GetToken(MySqlParser.EQUAL_SYMBOL, i);
        }
        public ITerminalNode CONDITION() { return GetToken(MySqlParser.CONDITION, 0); }
        public DiagnosticsConditionInformationNameContext[] diagnosticsConditionInformationName()
        {
            return GetRuleContexts<DiagnosticsConditionInformationNameContext>();
        }
        public DiagnosticsConditionInformationNameContext diagnosticsConditionInformationName(int i)
        {
            return GetRuleContext<DiagnosticsConditionInformationNameContext>(i);
        }
        public ITerminalNode[] NUMBER() { return GetTokens(MySqlParser.NUMBER); }
        public ITerminalNode NUMBER(int i)
        {
            return GetToken(MySqlParser.NUMBER, i);
        }
        public ITerminalNode[] ROW_COUNT() { return GetTokens(MySqlParser.ROW_COUNT); }
        public ITerminalNode ROW_COUNT(int i)
        {
            return GetToken(MySqlParser.ROW_COUNT, i);
        }
        public DecimalLiteralContext decimalLiteral()
        {
            return GetRuleContext<DecimalLiteralContext>(0);
        }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public DiagnosticsStatementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_diagnosticsStatement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterDiagnosticsStatement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitDiagnosticsStatement(this);
        }
    }

    [RuleVersion(0)]
    public DiagnosticsStatementContext diagnosticsStatement()
    {
        DiagnosticsStatementContext _localctx = new DiagnosticsStatementContext(Context, State);
        EnterRule(_localctx, 490, RULE_diagnosticsStatement);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 5291; Match(GET);
                State = 5293;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == CURRENT || _la == STACKED)
                {
                    {
                        State = 5292;
                        _la = TokenStream.LA(1);
                        if (!(_la == CURRENT || _la == STACKED))
                        {
                            ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                }

                State = 5295; Match(DIAGNOSTICS);
                State = 5327;
                ErrorHandler.Sync(this);
                switch (TokenStream.LA(1))
                {
                    case CURRENT:
                    case DATABASE:
                    case DIAGNOSTICS:
                    case LEFT:
                    case NUMBER:
                    case RIGHT:
                    case STACKED:
                    case DATE:
                    case TIME:
                    case TIMESTAMP:
                    case DATETIME:
                    case YEAR:
                    case TEXT:
                    case ENUM:
                    case SERIAL:
                    case COUNT:
                    case POSITION:
                    case ACCOUNT:
                    case ACTION:
                    case AFTER:
                    case AGGREGATE:
                    case ALGORITHM:
                    case ANY:
                    case AT:
                    case AUTHORS:
                    case AUTOCOMMIT:
                    case AUTOEXTEND_SIZE:
                    case AUTO_INCREMENT:
                    case AVG_ROW_LENGTH:
                    case BEGIN:
                    case BINLOG:
                    case BIT:
                    case BLOCK:
                    case BOOL:
                    case BOOLEAN:
                    case BTREE:
                    case CACHE:
                    case CASCADED:
                    case CHAIN:
                    case CHANGED:
                    case CHANNEL:
                    case CHECKSUM:
                    case PAGE_CHECKSUM:
                    case CIPHER:
                    case CLASS_ORIGIN:
                    case CLIENT:
                    case CLOSE:
                    case COALESCE:
                    case CODE:
                    case COLUMNS:
                    case COLUMN_FORMAT:
                    case COLUMN_NAME:
                    case COMMENT:
                    case COMMIT:
                    case COMPACT:
                    case COMPLETION:
                    case COMPRESSED:
                    case COMPRESSION:
                    case CONCURRENT:
                    case CONNECTION:
                    case CONSISTENT:
                    case CONSTRAINT_CATALOG:
                    case CONSTRAINT_SCHEMA:
                    case CONSTRAINT_NAME:
                    case CONTAINS:
                    case CONTEXT:
                    case CONTRIBUTORS:
                    case COPY:
                    case CPU:
                    case CURSOR_NAME:
                    case DATA:
                    case DATAFILE:
                    case DEALLOCATE:
                    case DEFAULT_AUTH:
                    case DEFINER:
                    case DELAY_KEY_WRITE:
                    case DES_KEY_FILE:
                    case DIRECTORY:
                    case DISABLE:
                    case DISCARD:
                    case DISK:
                    case DO:
                    case DUMPFILE:
                    case DUPLICATE:
                    case DYNAMIC:
                    case ENABLE:
                    case ENCRYPTION:
                    case END:
                    case ENDS:
                    case ENGINE:
                    case ENGINES:
                    case ERROR:
                    case ERRORS:
                    case ESCAPE:
                    case EVEN:
                    case EVENT:
                    case EVENTS:
                    case EVERY:
                    case EXCHANGE:
                    case EXCLUSIVE:
                    case EXPIRE:
                    case EXPORT:
                    case EXTENDED:
                    case EXTENT_SIZE:
                    case FAST:
                    case FAULTS:
                    case FIELDS:
                    case FILE_BLOCK_SIZE:
                    case FILTER:
                    case FIRST:
                    case FIXED:
                    case FLUSH:
                    case FOLLOWS:
                    case FOUND:
                    case FULL:
                    case FUNCTION:
                    case GENERAL:
                    case GLOBAL:
                    case GRANTS:
                    case GROUP_REPLICATION:
                    case HANDLER:
                    case HASH:
                    case HELP:
                    case HOST:
                    case HOSTS:
                    case IDENTIFIED:
                    case IGNORE_SERVER_IDS:
                    case IMPORT:
                    case INDEXES:
                    case INITIAL_SIZE:
                    case INPLACE:
                    case INSERT_METHOD:
                    case INSTALL:
                    case INSTANCE:
                    case INVISIBLE:
                    case INVOKER:
                    case IO:
                    case IO_THREAD:
                    case IPC:
                    case ISOLATION:
                    case ISSUER:
                    case JSON:
                    case KEY_BLOCK_SIZE:
                    case LANGUAGE:
                    case LAST:
                    case LEAVES:
                    case LESS:
                    case LEVEL:
                    case LIST:
                    case LOCAL:
                    case LOGFILE:
                    case LOGS:
                    case MASTER:
                    case MASTER_AUTO_POSITION:
                    case MASTER_CONNECT_RETRY:
                    case MASTER_DELAY:
                    case MASTER_HEARTBEAT_PERIOD:
                    case MASTER_HOST:
                    case MASTER_LOG_FILE:
                    case MASTER_LOG_POS:
                    case MASTER_PASSWORD:
                    case MASTER_PORT:
                    case MASTER_RETRY_COUNT:
                    case MASTER_SSL:
                    case MASTER_SSL_CA:
                    case MASTER_SSL_CAPATH:
                    case MASTER_SSL_CERT:
                    case MASTER_SSL_CIPHER:
                    case MASTER_SSL_CRL:
                    case MASTER_SSL_CRLPATH:
                    case MASTER_SSL_KEY:
                    case MASTER_TLS_VERSION:
                    case MASTER_USER:
                    case MAX_CONNECTIONS_PER_HOUR:
                    case MAX_QUERIES_PER_HOUR:
                    case MAX_ROWS:
                    case MAX_SIZE:
                    case MAX_UPDATES_PER_HOUR:
                    case MAX_USER_CONNECTIONS:
                    case MEDIUM:
                    case MERGE:
                    case MESSAGE_TEXT:
                    case MID:
                    case MIGRATE:
                    case MIN_ROWS:
                    case MODE:
                    case MODIFY:
                    case MUTEX:
                    case MYSQL:
                    case MYSQL_ERRNO:
                    case NAME:
                    case NAMES:
                    case NCHAR:
                    case NEVER:
                    case NEXT:
                    case NO:
                    case NODEGROUP:
                    case NONE:
                    case OFFLINE:
                    case OFFSET:
                    case OJ:
                    case OLD_PASSWORD:
                    case ONE:
                    case ONLINE:
                    case ONLY:
                    case OPEN:
                    case OPTIMIZER_COSTS:
                    case OPTIONS:
                    case OWNER:
                    case PACK_KEYS:
                    case PAGE:
                    case PARSER:
                    case PARTIAL:
                    case PARTITIONING:
                    case PARTITIONS:
                    case PASSWORD:
                    case PHASE:
                    case PLUGIN:
                    case PLUGIN_DIR:
                    case PLUGINS:
                    case PORT:
                    case PRECEDES:
                    case PREPARE:
                    case PRESERVE:
                    case PREV:
                    case PROCESSLIST:
                    case PROFILE:
                    case PROFILES:
                    case PROXY:
                    case QUERY:
                    case QUICK:
                    case REBUILD:
                    case RECOVER:
                    case REDO_BUFFER_SIZE:
                    case REDUNDANT:
                    case RELAY:
                    case RELAY_LOG_FILE:
                    case RELAY_LOG_POS:
                    case RELAYLOG:
                    case REMOVE:
                    case REORGANIZE:
                    case REPAIR:
                    case REPLICATE_DO_DB:
                    case REPLICATE_DO_TABLE:
                    case REPLICATE_IGNORE_DB:
                    case REPLICATE_IGNORE_TABLE:
                    case REPLICATE_REWRITE_DB:
                    case REPLICATE_WILD_DO_TABLE:
                    case REPLICATE_WILD_IGNORE_TABLE:
                    case REPLICATION:
                    case RESET:
                    case RESUME:
                    case RETURNED_SQLSTATE:
                    case RETURNS:
                    case ROLLBACK:
                    case ROLLUP:
                    case ROTATE:
                    case ROW:
                    case ROWS:
                    case ROW_FORMAT:
                    case SAVEPOINT:
                    case SCHEDULE:
                    case SECURITY:
                    case SERVER:
                    case SESSION:
                    case SHARE:
                    case SHARED:
                    case SIGNED:
                    case SIMPLE:
                    case SLAVE:
                    case SLOW:
                    case SNAPSHOT:
                    case SOCKET:
                    case SOME:
                    case SONAME:
                    case SOUNDS:
                    case SOURCE:
                    case SQL_AFTER_GTIDS:
                    case SQL_AFTER_MTS_GAPS:
                    case SQL_BEFORE_GTIDS:
                    case SQL_BUFFER_RESULT:
                    case SQL_CACHE:
                    case SQL_NO_CACHE:
                    case SQL_THREAD:
                    case START:
                    case STARTS:
                    case STATS_AUTO_RECALC:
                    case STATS_PERSISTENT:
                    case STATS_SAMPLE_PAGES:
                    case STATUS:
                    case STOP:
                    case STORAGE:
                    case STRING:
                    case SUBCLASS_ORIGIN:
                    case SUBJECT:
                    case SUBPARTITION:
                    case SUBPARTITIONS:
                    case SUSPEND:
                    case SWAPS:
                    case SWITCHES:
                    case TABLE_NAME:
                    case TABLESPACE:
                    case TEMPORARY:
                    case TEMPTABLE:
                    case THAN:
                    case TRADITIONAL:
                    case TRANSACTION:
                    case TRIGGERS:
                    case TRUNCATE:
                    case UNDEFINED:
                    case UNDOFILE:
                    case UNDO_BUFFER_SIZE:
                    case UNINSTALL:
                    case UNKNOWN:
                    case UNTIL:
                    case UPGRADE:
                    case USER:
                    case USE_FRM:
                    case USER_RESOURCES:
                    case VALIDATION:
                    case VALUE:
                    case VARIABLES:
                    case VIEW:
                    case VISIBLE:
                    case WAIT:
                    case WARNINGS:
                    case WITHOUT:
                    case WORK:
                    case WRAPPER:
                    case X509:
                    case XA:
                    case XML:
                    case INTERNAL:
                    case QUARTER:
                    case MONTH:
                    case DAY:
                    case HOUR:
                    case MINUTE:
                    case WEEK:
                    case SECOND:
                    case MICROSECOND:
                    case TABLES:
                    case ROUTINE:
                    case EXECUTE:
                    case FILE:
                    case PROCESS:
                    case RELOAD:
                    case SHUTDOWN:
                    case SUPER:
                    case PRIVILEGES:
                    case SESSION_VARIABLES_ADMIN:
                    case ARMSCII8:
                    case ASCII:
                    case BIG5:
                    case CP1250:
                    case CP1251:
                    case CP1256:
                    case CP1257:
                    case CP850:
                    case CP852:
                    case CP866:
                    case CP932:
                    case DEC8:
                    case EUCJPMS:
                    case EUCKR:
                    case GB2312:
                    case GBK:
                    case GEOSTD8:
                    case GREEK:
                    case HEBREW:
                    case HP8:
                    case KEYBCS2:
                    case KOI8R:
                    case KOI8U:
                    case LATIN1:
                    case LATIN2:
                    case LATIN5:
                    case LATIN7:
                    case MACCE:
                    case MACROMAN:
                    case SJIS:
                    case SWE7:
                    case TIS620:
                    case UCS2:
                    case UJIS:
                    case UTF16:
                    case UTF16LE:
                    case UTF32:
                    case UTF8:
                    case UTF8MB3:
                    case UTF8MB4:
                    case ARCHIVE:
                    case BLACKHOLE:
                    case CSV:
                    case FEDERATED:
                    case INNODB:
                    case MEMORY:
                    case MRG_MYISAM:
                    case MYISAM:
                    case NDB:
                    case NDBCLUSTER:
                    case PERFORMANCE_SCHEMA:
                    case TOKUDB:
                    case REPEATABLE:
                    case COMMITTED:
                    case UNCOMMITTED:
                    case SERIALIZABLE:
                    case GEOMETRYCOLLECTION:
                    case LINESTRING:
                    case MULTILINESTRING:
                    case MULTIPOINT:
                    case MULTIPOLYGON:
                    case POINT:
                    case POLYGON:
                    case ABS:
                    case ACOS:
                    case ADDDATE:
                    case ADDTIME:
                    case AES_DECRYPT:
                    case AES_ENCRYPT:
                    case AREA:
                    case ASBINARY:
                    case ASIN:
                    case ASTEXT:
                    case ASWKB:
                    case ASWKT:
                    case ASYMMETRIC_DECRYPT:
                    case ASYMMETRIC_DERIVE:
                    case ASYMMETRIC_ENCRYPT:
                    case ASYMMETRIC_SIGN:
                    case ASYMMETRIC_VERIFY:
                    case ATAN:
                    case ATAN2:
                    case BENCHMARK:
                    case BIN:
                    case BIT_COUNT:
                    case BIT_LENGTH:
                    case BUFFER:
                    case CATALOG_NAME:
                    case CEIL:
                    case CEILING:
                    case CENTROID:
                    case CHARACTER_LENGTH:
                    case CHARSET:
                    case CHAR_LENGTH:
                    case COERCIBILITY:
                    case COLLATION:
                    case COMPRESS:
                    case CONCAT:
                    case CONCAT_WS:
                    case CONNECTION_ID:
                    case CONV:
                    case CONVERT_TZ:
                    case COS:
                    case COT:
                    case CRC32:
                    case CREATE_ASYMMETRIC_PRIV_KEY:
                    case CREATE_ASYMMETRIC_PUB_KEY:
                    case CREATE_DH_PARAMETERS:
                    case CREATE_DIGEST:
                    case CROSSES:
                    case DATEDIFF:
                    case DATE_FORMAT:
                    case DAYNAME:
                    case DAYOFMONTH:
                    case DAYOFWEEK:
                    case DAYOFYEAR:
                    case DECODE:
                    case DEGREES:
                    case DES_DECRYPT:
                    case DES_ENCRYPT:
                    case DIMENSION:
                    case DISJOINT:
                    case ELT:
                    case ENCODE:
                    case ENCRYPT:
                    case ENDPOINT:
                    case ENVELOPE:
                    case EQUALS:
                    case EXP:
                    case EXPORT_SET:
                    case EXTERIORRING:
                    case EXTRACTVALUE:
                    case FIELD:
                    case FIND_IN_SET:
                    case FLOOR:
                    case FORMAT:
                    case FOUND_ROWS:
                    case FROM_BASE64:
                    case FROM_DAYS:
                    case FROM_UNIXTIME:
                    case GEOMCOLLFROMTEXT:
                    case GEOMCOLLFROMWKB:
                    case GEOMETRYCOLLECTIONFROMTEXT:
                    case GEOMETRYCOLLECTIONFROMWKB:
                    case GEOMETRYFROMTEXT:
                    case GEOMETRYFROMWKB:
                    case GEOMETRYN:
                    case GEOMETRYTYPE:
                    case GEOMFROMTEXT:
                    case GEOMFROMWKB:
                    case GET_FORMAT:
                    case GET_LOCK:
                    case GLENGTH:
                    case GREATEST:
                    case GTID_SUBSET:
                    case GTID_SUBTRACT:
                    case HEX:
                    case IFNULL:
                    case INET6_ATON:
                    case INET6_NTOA:
                    case INET_ATON:
                    case INET_NTOA:
                    case INSTR:
                    case INTERIORRINGN:
                    case INTERSECTS:
                    case ISCLOSED:
                    case ISEMPTY:
                    case ISNULL:
                    case ISSIMPLE:
                    case IS_FREE_LOCK:
                    case IS_IPV4:
                    case IS_IPV4_COMPAT:
                    case IS_IPV4_MAPPED:
                    case IS_IPV6:
                    case IS_USED_LOCK:
                    case LAST_INSERT_ID:
                    case LCASE:
                    case LEAST:
                    case LENGTH:
                    case LINEFROMTEXT:
                    case LINEFROMWKB:
                    case LINESTRINGFROMTEXT:
                    case LINESTRINGFROMWKB:
                    case LN:
                    case LOAD_FILE:
                    case LOCATE:
                    case LOG:
                    case LOG10:
                    case LOG2:
                    case LOWER:
                    case LPAD:
                    case LTRIM:
                    case MAKEDATE:
                    case MAKETIME:
                    case MAKE_SET:
                    case MASTER_POS_WAIT:
                    case MBRCONTAINS:
                    case MBRDISJOINT:
                    case MBREQUAL:
                    case MBRINTERSECTS:
                    case MBROVERLAPS:
                    case MBRTOUCHES:
                    case MBRWITHIN:
                    case MD5:
                    case MLINEFROMTEXT:
                    case MLINEFROMWKB:
                    case MONTHNAME:
                    case MPOINTFROMTEXT:
                    case MPOINTFROMWKB:
                    case MPOLYFROMTEXT:
                    case MPOLYFROMWKB:
                    case MULTILINESTRINGFROMTEXT:
                    case MULTILINESTRINGFROMWKB:
                    case MULTIPOINTFROMTEXT:
                    case MULTIPOINTFROMWKB:
                    case MULTIPOLYGONFROMTEXT:
                    case MULTIPOLYGONFROMWKB:
                    case NAME_CONST:
                    case NULLIF:
                    case NUMGEOMETRIES:
                    case NUMINTERIORRINGS:
                    case NUMPOINTS:
                    case OCT:
                    case OCTET_LENGTH:
                    case ORD:
                    case OVERLAPS:
                    case PERIOD_ADD:
                    case PERIOD_DIFF:
                    case PI:
                    case POINTFROMTEXT:
                    case POINTFROMWKB:
                    case POINTN:
                    case POLYFROMTEXT:
                    case POLYFROMWKB:
                    case POLYGONFROMTEXT:
                    case POLYGONFROMWKB:
                    case POW:
                    case POWER:
                    case QUOTE:
                    case RADIANS:
                    case RAND:
                    case RANDOM_BYTES:
                    case RELEASE_LOCK:
                    case REVERSE:
                    case ROUND:
                    case ROW_COUNT:
                    case RPAD:
                    case RTRIM:
                    case SEC_TO_TIME:
                    case SESSION_USER:
                    case SHA:
                    case SHA1:
                    case SHA2:
                    case SCHEMA_NAME:
                    case SIGN:
                    case SIN:
                    case SLEEP:
                    case SOUNDEX:
                    case SQL_THREAD_WAIT_AFTER_GTIDS:
                    case SQRT:
                    case SRID:
                    case STARTPOINT:
                    case STRCMP:
                    case STR_TO_DATE:
                    case ST_AREA:
                    case ST_ASBINARY:
                    case ST_ASTEXT:
                    case ST_ASWKB:
                    case ST_ASWKT:
                    case ST_BUFFER:
                    case ST_CENTROID:
                    case ST_CONTAINS:
                    case ST_CROSSES:
                    case ST_DIFFERENCE:
                    case ST_DIMENSION:
                    case ST_DISJOINT:
                    case ST_DISTANCE:
                    case ST_ENDPOINT:
                    case ST_ENVELOPE:
                    case ST_EQUALS:
                    case ST_EXTERIORRING:
                    case ST_GEOMCOLLFROMTEXT:
                    case ST_GEOMCOLLFROMTXT:
                    case ST_GEOMCOLLFROMWKB:
                    case ST_GEOMETRYCOLLECTIONFROMTEXT:
                    case ST_GEOMETRYCOLLECTIONFROMWKB:
                    case ST_GEOMETRYFROMTEXT:
                    case ST_GEOMETRYFROMWKB:
                    case ST_GEOMETRYN:
                    case ST_GEOMETRYTYPE:
                    case ST_GEOMFROMTEXT:
                    case ST_GEOMFROMWKB:
                    case ST_INTERIORRINGN:
                    case ST_INTERSECTION:
                    case ST_INTERSECTS:
                    case ST_ISCLOSED:
                    case ST_ISEMPTY:
                    case ST_ISSIMPLE:
                    case ST_LINEFROMTEXT:
                    case ST_LINEFROMWKB:
                    case ST_LINESTRINGFROMTEXT:
                    case ST_LINESTRINGFROMWKB:
                    case ST_NUMGEOMETRIES:
                    case ST_NUMINTERIORRING:
                    case ST_NUMINTERIORRINGS:
                    case ST_NUMPOINTS:
                    case ST_OVERLAPS:
                    case ST_POINTFROMTEXT:
                    case ST_POINTFROMWKB:
                    case ST_POINTN:
                    case ST_POLYFROMTEXT:
                    case ST_POLYFROMWKB:
                    case ST_POLYGONFROMTEXT:
                    case ST_POLYGONFROMWKB:
                    case ST_SRID:
                    case ST_STARTPOINT:
                    case ST_SYMDIFFERENCE:
                    case ST_TOUCHES:
                    case ST_UNION:
                    case ST_WITHIN:
                    case ST_X:
                    case ST_Y:
                    case SUBDATE:
                    case SUBSTRING_INDEX:
                    case SUBTIME:
                    case SYSTEM_USER:
                    case TAN:
                    case TIMEDIFF:
                    case TIMESTAMPADD:
                    case TIMESTAMPDIFF:
                    case TIME_FORMAT:
                    case TIME_TO_SEC:
                    case TOUCHES:
                    case TO_BASE64:
                    case TO_DAYS:
                    case TO_SECONDS:
                    case UCASE:
                    case UNCOMPRESS:
                    case UNCOMPRESSED_LENGTH:
                    case UNHEX:
                    case UNIX_TIMESTAMP:
                    case UPDATEXML:
                    case UPPER:
                    case UUID:
                    case UUID_SHORT:
                    case VALIDATE_PASSWORD_STRENGTH:
                    case VERSION:
                    case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
                    case WEEKDAY:
                    case WEEKOFYEAR:
                    case WEIGHT_STRING:
                    case WITHIN:
                    case YEARWEEK:
                    case Y_FUNCTION:
                    case X_FUNCTION:
                    case AT_SIGN:
                    case CHARSET_REVERSE_QOUTE_STRING:
                    case STRING_LITERAL:
                    case ID:
                    case REVERSE_QUOTE_ID:
                    case LOCAL_ID:
                    case GLOBAL_ID:
                        {
                            {
                                State = 5296; variableClause();
                                State = 5297; Match(EQUAL_SYMBOL);
                                State = 5298;
                                _la = TokenStream.LA(1);
                                if (!(_la == NUMBER || _la == ROW_COUNT))
                                {
                                    ErrorHandler.RecoverInline(this);
                                }
                                else
                                {
                                    ErrorHandler.ReportMatch(this);
                                    Consume();
                                }
                                State = 5306;
                                ErrorHandler.Sync(this);
                                _la = TokenStream.LA(1);
                                while (_la == COMMA)
                                {
                                    {
                                        {
                                            State = 5299; Match(COMMA);
                                            State = 5300; variableClause();
                                            State = 5301; Match(EQUAL_SYMBOL);
                                            State = 5302;
                                            _la = TokenStream.LA(1);
                                            if (!(_la == NUMBER || _la == ROW_COUNT))
                                            {
                                                ErrorHandler.RecoverInline(this);
                                            }
                                            else
                                            {
                                                ErrorHandler.ReportMatch(this);
                                                Consume();
                                            }
                                        }
                                    }
                                    State = 5308;
                                    ErrorHandler.Sync(this);
                                    _la = TokenStream.LA(1);
                                }
                            }
                        }
                        break;
                    case CONDITION:
                        {
                            {
                                State = 5309; Match(CONDITION);
                                State = 5312;
                                ErrorHandler.Sync(this);
                                switch (TokenStream.LA(1))
                                {
                                    case ZERO_DECIMAL:
                                    case ONE_DECIMAL:
                                    case TWO_DECIMAL:
                                    case DECIMAL_LITERAL:
                                        {
                                            State = 5310; decimalLiteral();
                                        }
                                        break;
                                    case CURRENT:
                                    case DATABASE:
                                    case DIAGNOSTICS:
                                    case LEFT:
                                    case NUMBER:
                                    case RIGHT:
                                    case STACKED:
                                    case DATE:
                                    case TIME:
                                    case TIMESTAMP:
                                    case DATETIME:
                                    case YEAR:
                                    case TEXT:
                                    case ENUM:
                                    case SERIAL:
                                    case COUNT:
                                    case POSITION:
                                    case ACCOUNT:
                                    case ACTION:
                                    case AFTER:
                                    case AGGREGATE:
                                    case ALGORITHM:
                                    case ANY:
                                    case AT:
                                    case AUTHORS:
                                    case AUTOCOMMIT:
                                    case AUTOEXTEND_SIZE:
                                    case AUTO_INCREMENT:
                                    case AVG_ROW_LENGTH:
                                    case BEGIN:
                                    case BINLOG:
                                    case BIT:
                                    case BLOCK:
                                    case BOOL:
                                    case BOOLEAN:
                                    case BTREE:
                                    case CACHE:
                                    case CASCADED:
                                    case CHAIN:
                                    case CHANGED:
                                    case CHANNEL:
                                    case CHECKSUM:
                                    case PAGE_CHECKSUM:
                                    case CIPHER:
                                    case CLASS_ORIGIN:
                                    case CLIENT:
                                    case CLOSE:
                                    case COALESCE:
                                    case CODE:
                                    case COLUMNS:
                                    case COLUMN_FORMAT:
                                    case COLUMN_NAME:
                                    case COMMENT:
                                    case COMMIT:
                                    case COMPACT:
                                    case COMPLETION:
                                    case COMPRESSED:
                                    case COMPRESSION:
                                    case CONCURRENT:
                                    case CONNECTION:
                                    case CONSISTENT:
                                    case CONSTRAINT_CATALOG:
                                    case CONSTRAINT_SCHEMA:
                                    case CONSTRAINT_NAME:
                                    case CONTAINS:
                                    case CONTEXT:
                                    case CONTRIBUTORS:
                                    case COPY:
                                    case CPU:
                                    case CURSOR_NAME:
                                    case DATA:
                                    case DATAFILE:
                                    case DEALLOCATE:
                                    case DEFAULT_AUTH:
                                    case DEFINER:
                                    case DELAY_KEY_WRITE:
                                    case DES_KEY_FILE:
                                    case DIRECTORY:
                                    case DISABLE:
                                    case DISCARD:
                                    case DISK:
                                    case DO:
                                    case DUMPFILE:
                                    case DUPLICATE:
                                    case DYNAMIC:
                                    case ENABLE:
                                    case ENCRYPTION:
                                    case END:
                                    case ENDS:
                                    case ENGINE:
                                    case ENGINES:
                                    case ERROR:
                                    case ERRORS:
                                    case ESCAPE:
                                    case EVEN:
                                    case EVENT:
                                    case EVENTS:
                                    case EVERY:
                                    case EXCHANGE:
                                    case EXCLUSIVE:
                                    case EXPIRE:
                                    case EXPORT:
                                    case EXTENDED:
                                    case EXTENT_SIZE:
                                    case FAST:
                                    case FAULTS:
                                    case FIELDS:
                                    case FILE_BLOCK_SIZE:
                                    case FILTER:
                                    case FIRST:
                                    case FIXED:
                                    case FLUSH:
                                    case FOLLOWS:
                                    case FOUND:
                                    case FULL:
                                    case FUNCTION:
                                    case GENERAL:
                                    case GLOBAL:
                                    case GRANTS:
                                    case GROUP_REPLICATION:
                                    case HANDLER:
                                    case HASH:
                                    case HELP:
                                    case HOST:
                                    case HOSTS:
                                    case IDENTIFIED:
                                    case IGNORE_SERVER_IDS:
                                    case IMPORT:
                                    case INDEXES:
                                    case INITIAL_SIZE:
                                    case INPLACE:
                                    case INSERT_METHOD:
                                    case INSTALL:
                                    case INSTANCE:
                                    case INVISIBLE:
                                    case INVOKER:
                                    case IO:
                                    case IO_THREAD:
                                    case IPC:
                                    case ISOLATION:
                                    case ISSUER:
                                    case JSON:
                                    case KEY_BLOCK_SIZE:
                                    case LANGUAGE:
                                    case LAST:
                                    case LEAVES:
                                    case LESS:
                                    case LEVEL:
                                    case LIST:
                                    case LOCAL:
                                    case LOGFILE:
                                    case LOGS:
                                    case MASTER:
                                    case MASTER_AUTO_POSITION:
                                    case MASTER_CONNECT_RETRY:
                                    case MASTER_DELAY:
                                    case MASTER_HEARTBEAT_PERIOD:
                                    case MASTER_HOST:
                                    case MASTER_LOG_FILE:
                                    case MASTER_LOG_POS:
                                    case MASTER_PASSWORD:
                                    case MASTER_PORT:
                                    case MASTER_RETRY_COUNT:
                                    case MASTER_SSL:
                                    case MASTER_SSL_CA:
                                    case MASTER_SSL_CAPATH:
                                    case MASTER_SSL_CERT:
                                    case MASTER_SSL_CIPHER:
                                    case MASTER_SSL_CRL:
                                    case MASTER_SSL_CRLPATH:
                                    case MASTER_SSL_KEY:
                                    case MASTER_TLS_VERSION:
                                    case MASTER_USER:
                                    case MAX_CONNECTIONS_PER_HOUR:
                                    case MAX_QUERIES_PER_HOUR:
                                    case MAX_ROWS:
                                    case MAX_SIZE:
                                    case MAX_UPDATES_PER_HOUR:
                                    case MAX_USER_CONNECTIONS:
                                    case MEDIUM:
                                    case MERGE:
                                    case MESSAGE_TEXT:
                                    case MID:
                                    case MIGRATE:
                                    case MIN_ROWS:
                                    case MODE:
                                    case MODIFY:
                                    case MUTEX:
                                    case MYSQL:
                                    case MYSQL_ERRNO:
                                    case NAME:
                                    case NAMES:
                                    case NCHAR:
                                    case NEVER:
                                    case NEXT:
                                    case NO:
                                    case NODEGROUP:
                                    case NONE:
                                    case OFFLINE:
                                    case OFFSET:
                                    case OJ:
                                    case OLD_PASSWORD:
                                    case ONE:
                                    case ONLINE:
                                    case ONLY:
                                    case OPEN:
                                    case OPTIMIZER_COSTS:
                                    case OPTIONS:
                                    case OWNER:
                                    case PACK_KEYS:
                                    case PAGE:
                                    case PARSER:
                                    case PARTIAL:
                                    case PARTITIONING:
                                    case PARTITIONS:
                                    case PASSWORD:
                                    case PHASE:
                                    case PLUGIN:
                                    case PLUGIN_DIR:
                                    case PLUGINS:
                                    case PORT:
                                    case PRECEDES:
                                    case PREPARE:
                                    case PRESERVE:
                                    case PREV:
                                    case PROCESSLIST:
                                    case PROFILE:
                                    case PROFILES:
                                    case PROXY:
                                    case QUERY:
                                    case QUICK:
                                    case REBUILD:
                                    case RECOVER:
                                    case REDO_BUFFER_SIZE:
                                    case REDUNDANT:
                                    case RELAY:
                                    case RELAY_LOG_FILE:
                                    case RELAY_LOG_POS:
                                    case RELAYLOG:
                                    case REMOVE:
                                    case REORGANIZE:
                                    case REPAIR:
                                    case REPLICATE_DO_DB:
                                    case REPLICATE_DO_TABLE:
                                    case REPLICATE_IGNORE_DB:
                                    case REPLICATE_IGNORE_TABLE:
                                    case REPLICATE_REWRITE_DB:
                                    case REPLICATE_WILD_DO_TABLE:
                                    case REPLICATE_WILD_IGNORE_TABLE:
                                    case REPLICATION:
                                    case RESET:
                                    case RESUME:
                                    case RETURNED_SQLSTATE:
                                    case RETURNS:
                                    case ROLLBACK:
                                    case ROLLUP:
                                    case ROTATE:
                                    case ROW:
                                    case ROWS:
                                    case ROW_FORMAT:
                                    case SAVEPOINT:
                                    case SCHEDULE:
                                    case SECURITY:
                                    case SERVER:
                                    case SESSION:
                                    case SHARE:
                                    case SHARED:
                                    case SIGNED:
                                    case SIMPLE:
                                    case SLAVE:
                                    case SLOW:
                                    case SNAPSHOT:
                                    case SOCKET:
                                    case SOME:
                                    case SONAME:
                                    case SOUNDS:
                                    case SOURCE:
                                    case SQL_AFTER_GTIDS:
                                    case SQL_AFTER_MTS_GAPS:
                                    case SQL_BEFORE_GTIDS:
                                    case SQL_BUFFER_RESULT:
                                    case SQL_CACHE:
                                    case SQL_NO_CACHE:
                                    case SQL_THREAD:
                                    case START:
                                    case STARTS:
                                    case STATS_AUTO_RECALC:
                                    case STATS_PERSISTENT:
                                    case STATS_SAMPLE_PAGES:
                                    case STATUS:
                                    case STOP:
                                    case STORAGE:
                                    case STRING:
                                    case SUBCLASS_ORIGIN:
                                    case SUBJECT:
                                    case SUBPARTITION:
                                    case SUBPARTITIONS:
                                    case SUSPEND:
                                    case SWAPS:
                                    case SWITCHES:
                                    case TABLE_NAME:
                                    case TABLESPACE:
                                    case TEMPORARY:
                                    case TEMPTABLE:
                                    case THAN:
                                    case TRADITIONAL:
                                    case TRANSACTION:
                                    case TRIGGERS:
                                    case TRUNCATE:
                                    case UNDEFINED:
                                    case UNDOFILE:
                                    case UNDO_BUFFER_SIZE:
                                    case UNINSTALL:
                                    case UNKNOWN:
                                    case UNTIL:
                                    case UPGRADE:
                                    case USER:
                                    case USE_FRM:
                                    case USER_RESOURCES:
                                    case VALIDATION:
                                    case VALUE:
                                    case VARIABLES:
                                    case VIEW:
                                    case VISIBLE:
                                    case WAIT:
                                    case WARNINGS:
                                    case WITHOUT:
                                    case WORK:
                                    case WRAPPER:
                                    case X509:
                                    case XA:
                                    case XML:
                                    case INTERNAL:
                                    case QUARTER:
                                    case MONTH:
                                    case DAY:
                                    case HOUR:
                                    case MINUTE:
                                    case WEEK:
                                    case SECOND:
                                    case MICROSECOND:
                                    case TABLES:
                                    case ROUTINE:
                                    case EXECUTE:
                                    case FILE:
                                    case PROCESS:
                                    case RELOAD:
                                    case SHUTDOWN:
                                    case SUPER:
                                    case PRIVILEGES:
                                    case SESSION_VARIABLES_ADMIN:
                                    case ARMSCII8:
                                    case ASCII:
                                    case BIG5:
                                    case CP1250:
                                    case CP1251:
                                    case CP1256:
                                    case CP1257:
                                    case CP850:
                                    case CP852:
                                    case CP866:
                                    case CP932:
                                    case DEC8:
                                    case EUCJPMS:
                                    case EUCKR:
                                    case GB2312:
                                    case GBK:
                                    case GEOSTD8:
                                    case GREEK:
                                    case HEBREW:
                                    case HP8:
                                    case KEYBCS2:
                                    case KOI8R:
                                    case KOI8U:
                                    case LATIN1:
                                    case LATIN2:
                                    case LATIN5:
                                    case LATIN7:
                                    case MACCE:
                                    case MACROMAN:
                                    case SJIS:
                                    case SWE7:
                                    case TIS620:
                                    case UCS2:
                                    case UJIS:
                                    case UTF16:
                                    case UTF16LE:
                                    case UTF32:
                                    case UTF8:
                                    case UTF8MB3:
                                    case UTF8MB4:
                                    case ARCHIVE:
                                    case BLACKHOLE:
                                    case CSV:
                                    case FEDERATED:
                                    case INNODB:
                                    case MEMORY:
                                    case MRG_MYISAM:
                                    case MYISAM:
                                    case NDB:
                                    case NDBCLUSTER:
                                    case PERFORMANCE_SCHEMA:
                                    case TOKUDB:
                                    case REPEATABLE:
                                    case COMMITTED:
                                    case UNCOMMITTED:
                                    case SERIALIZABLE:
                                    case GEOMETRYCOLLECTION:
                                    case LINESTRING:
                                    case MULTILINESTRING:
                                    case MULTIPOINT:
                                    case MULTIPOLYGON:
                                    case POINT:
                                    case POLYGON:
                                    case ABS:
                                    case ACOS:
                                    case ADDDATE:
                                    case ADDTIME:
                                    case AES_DECRYPT:
                                    case AES_ENCRYPT:
                                    case AREA:
                                    case ASBINARY:
                                    case ASIN:
                                    case ASTEXT:
                                    case ASWKB:
                                    case ASWKT:
                                    case ASYMMETRIC_DECRYPT:
                                    case ASYMMETRIC_DERIVE:
                                    case ASYMMETRIC_ENCRYPT:
                                    case ASYMMETRIC_SIGN:
                                    case ASYMMETRIC_VERIFY:
                                    case ATAN:
                                    case ATAN2:
                                    case BENCHMARK:
                                    case BIN:
                                    case BIT_COUNT:
                                    case BIT_LENGTH:
                                    case BUFFER:
                                    case CATALOG_NAME:
                                    case CEIL:
                                    case CEILING:
                                    case CENTROID:
                                    case CHARACTER_LENGTH:
                                    case CHARSET:
                                    case CHAR_LENGTH:
                                    case COERCIBILITY:
                                    case COLLATION:
                                    case COMPRESS:
                                    case CONCAT:
                                    case CONCAT_WS:
                                    case CONNECTION_ID:
                                    case CONV:
                                    case CONVERT_TZ:
                                    case COS:
                                    case COT:
                                    case CRC32:
                                    case CREATE_ASYMMETRIC_PRIV_KEY:
                                    case CREATE_ASYMMETRIC_PUB_KEY:
                                    case CREATE_DH_PARAMETERS:
                                    case CREATE_DIGEST:
                                    case CROSSES:
                                    case DATEDIFF:
                                    case DATE_FORMAT:
                                    case DAYNAME:
                                    case DAYOFMONTH:
                                    case DAYOFWEEK:
                                    case DAYOFYEAR:
                                    case DECODE:
                                    case DEGREES:
                                    case DES_DECRYPT:
                                    case DES_ENCRYPT:
                                    case DIMENSION:
                                    case DISJOINT:
                                    case ELT:
                                    case ENCODE:
                                    case ENCRYPT:
                                    case ENDPOINT:
                                    case ENVELOPE:
                                    case EQUALS:
                                    case EXP:
                                    case EXPORT_SET:
                                    case EXTERIORRING:
                                    case EXTRACTVALUE:
                                    case FIELD:
                                    case FIND_IN_SET:
                                    case FLOOR:
                                    case FORMAT:
                                    case FOUND_ROWS:
                                    case FROM_BASE64:
                                    case FROM_DAYS:
                                    case FROM_UNIXTIME:
                                    case GEOMCOLLFROMTEXT:
                                    case GEOMCOLLFROMWKB:
                                    case GEOMETRYCOLLECTIONFROMTEXT:
                                    case GEOMETRYCOLLECTIONFROMWKB:
                                    case GEOMETRYFROMTEXT:
                                    case GEOMETRYFROMWKB:
                                    case GEOMETRYN:
                                    case GEOMETRYTYPE:
                                    case GEOMFROMTEXT:
                                    case GEOMFROMWKB:
                                    case GET_FORMAT:
                                    case GET_LOCK:
                                    case GLENGTH:
                                    case GREATEST:
                                    case GTID_SUBSET:
                                    case GTID_SUBTRACT:
                                    case HEX:
                                    case IFNULL:
                                    case INET6_ATON:
                                    case INET6_NTOA:
                                    case INET_ATON:
                                    case INET_NTOA:
                                    case INSTR:
                                    case INTERIORRINGN:
                                    case INTERSECTS:
                                    case ISCLOSED:
                                    case ISEMPTY:
                                    case ISNULL:
                                    case ISSIMPLE:
                                    case IS_FREE_LOCK:
                                    case IS_IPV4:
                                    case IS_IPV4_COMPAT:
                                    case IS_IPV4_MAPPED:
                                    case IS_IPV6:
                                    case IS_USED_LOCK:
                                    case LAST_INSERT_ID:
                                    case LCASE:
                                    case LEAST:
                                    case LENGTH:
                                    case LINEFROMTEXT:
                                    case LINEFROMWKB:
                                    case LINESTRINGFROMTEXT:
                                    case LINESTRINGFROMWKB:
                                    case LN:
                                    case LOAD_FILE:
                                    case LOCATE:
                                    case LOG:
                                    case LOG10:
                                    case LOG2:
                                    case LOWER:
                                    case LPAD:
                                    case LTRIM:
                                    case MAKEDATE:
                                    case MAKETIME:
                                    case MAKE_SET:
                                    case MASTER_POS_WAIT:
                                    case MBRCONTAINS:
                                    case MBRDISJOINT:
                                    case MBREQUAL:
                                    case MBRINTERSECTS:
                                    case MBROVERLAPS:
                                    case MBRTOUCHES:
                                    case MBRWITHIN:
                                    case MD5:
                                    case MLINEFROMTEXT:
                                    case MLINEFROMWKB:
                                    case MONTHNAME:
                                    case MPOINTFROMTEXT:
                                    case MPOINTFROMWKB:
                                    case MPOLYFROMTEXT:
                                    case MPOLYFROMWKB:
                                    case MULTILINESTRINGFROMTEXT:
                                    case MULTILINESTRINGFROMWKB:
                                    case MULTIPOINTFROMTEXT:
                                    case MULTIPOINTFROMWKB:
                                    case MULTIPOLYGONFROMTEXT:
                                    case MULTIPOLYGONFROMWKB:
                                    case NAME_CONST:
                                    case NULLIF:
                                    case NUMGEOMETRIES:
                                    case NUMINTERIORRINGS:
                                    case NUMPOINTS:
                                    case OCT:
                                    case OCTET_LENGTH:
                                    case ORD:
                                    case OVERLAPS:
                                    case PERIOD_ADD:
                                    case PERIOD_DIFF:
                                    case PI:
                                    case POINTFROMTEXT:
                                    case POINTFROMWKB:
                                    case POINTN:
                                    case POLYFROMTEXT:
                                    case POLYFROMWKB:
                                    case POLYGONFROMTEXT:
                                    case POLYGONFROMWKB:
                                    case POW:
                                    case POWER:
                                    case QUOTE:
                                    case RADIANS:
                                    case RAND:
                                    case RANDOM_BYTES:
                                    case RELEASE_LOCK:
                                    case REVERSE:
                                    case ROUND:
                                    case ROW_COUNT:
                                    case RPAD:
                                    case RTRIM:
                                    case SEC_TO_TIME:
                                    case SESSION_USER:
                                    case SHA:
                                    case SHA1:
                                    case SHA2:
                                    case SCHEMA_NAME:
                                    case SIGN:
                                    case SIN:
                                    case SLEEP:
                                    case SOUNDEX:
                                    case SQL_THREAD_WAIT_AFTER_GTIDS:
                                    case SQRT:
                                    case SRID:
                                    case STARTPOINT:
                                    case STRCMP:
                                    case STR_TO_DATE:
                                    case ST_AREA:
                                    case ST_ASBINARY:
                                    case ST_ASTEXT:
                                    case ST_ASWKB:
                                    case ST_ASWKT:
                                    case ST_BUFFER:
                                    case ST_CENTROID:
                                    case ST_CONTAINS:
                                    case ST_CROSSES:
                                    case ST_DIFFERENCE:
                                    case ST_DIMENSION:
                                    case ST_DISJOINT:
                                    case ST_DISTANCE:
                                    case ST_ENDPOINT:
                                    case ST_ENVELOPE:
                                    case ST_EQUALS:
                                    case ST_EXTERIORRING:
                                    case ST_GEOMCOLLFROMTEXT:
                                    case ST_GEOMCOLLFROMTXT:
                                    case ST_GEOMCOLLFROMWKB:
                                    case ST_GEOMETRYCOLLECTIONFROMTEXT:
                                    case ST_GEOMETRYCOLLECTIONFROMWKB:
                                    case ST_GEOMETRYFROMTEXT:
                                    case ST_GEOMETRYFROMWKB:
                                    case ST_GEOMETRYN:
                                    case ST_GEOMETRYTYPE:
                                    case ST_GEOMFROMTEXT:
                                    case ST_GEOMFROMWKB:
                                    case ST_INTERIORRINGN:
                                    case ST_INTERSECTION:
                                    case ST_INTERSECTS:
                                    case ST_ISCLOSED:
                                    case ST_ISEMPTY:
                                    case ST_ISSIMPLE:
                                    case ST_LINEFROMTEXT:
                                    case ST_LINEFROMWKB:
                                    case ST_LINESTRINGFROMTEXT:
                                    case ST_LINESTRINGFROMWKB:
                                    case ST_NUMGEOMETRIES:
                                    case ST_NUMINTERIORRING:
                                    case ST_NUMINTERIORRINGS:
                                    case ST_NUMPOINTS:
                                    case ST_OVERLAPS:
                                    case ST_POINTFROMTEXT:
                                    case ST_POINTFROMWKB:
                                    case ST_POINTN:
                                    case ST_POLYFROMTEXT:
                                    case ST_POLYFROMWKB:
                                    case ST_POLYGONFROMTEXT:
                                    case ST_POLYGONFROMWKB:
                                    case ST_SRID:
                                    case ST_STARTPOINT:
                                    case ST_SYMDIFFERENCE:
                                    case ST_TOUCHES:
                                    case ST_UNION:
                                    case ST_WITHIN:
                                    case ST_X:
                                    case ST_Y:
                                    case SUBDATE:
                                    case SUBSTRING_INDEX:
                                    case SUBTIME:
                                    case SYSTEM_USER:
                                    case TAN:
                                    case TIMEDIFF:
                                    case TIMESTAMPADD:
                                    case TIMESTAMPDIFF:
                                    case TIME_FORMAT:
                                    case TIME_TO_SEC:
                                    case TOUCHES:
                                    case TO_BASE64:
                                    case TO_DAYS:
                                    case TO_SECONDS:
                                    case UCASE:
                                    case UNCOMPRESS:
                                    case UNCOMPRESSED_LENGTH:
                                    case UNHEX:
                                    case UNIX_TIMESTAMP:
                                    case UPDATEXML:
                                    case UPPER:
                                    case UUID:
                                    case UUID_SHORT:
                                    case VALIDATE_PASSWORD_STRENGTH:
                                    case VERSION:
                                    case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
                                    case WEEKDAY:
                                    case WEEKOFYEAR:
                                    case WEIGHT_STRING:
                                    case WITHIN:
                                    case YEARWEEK:
                                    case Y_FUNCTION:
                                    case X_FUNCTION:
                                    case AT_SIGN:
                                    case CHARSET_REVERSE_QOUTE_STRING:
                                    case STRING_LITERAL:
                                    case ID:
                                    case REVERSE_QUOTE_ID:
                                    case LOCAL_ID:
                                    case GLOBAL_ID:
                                        {
                                            State = 5311; variableClause();
                                        }
                                        break;
                                    default:
                                        throw new NoViableAltException(this);
                                }
                                State = 5314; variableClause();
                                State = 5315; Match(EQUAL_SYMBOL);
                                State = 5316; diagnosticsConditionInformationName();
                                State = 5324;
                                ErrorHandler.Sync(this);
                                _la = TokenStream.LA(1);
                                while (_la == COMMA)
                                {
                                    {
                                        {
                                            State = 5317; Match(COMMA);
                                            State = 5318; variableClause();
                                            State = 5319; Match(EQUAL_SYMBOL);
                                            State = 5320; diagnosticsConditionInformationName();
                                        }
                                    }
                                    State = 5326;
                                    ErrorHandler.Sync(this);
                                    _la = TokenStream.LA(1);
                                }
                            }
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class DiagnosticsConditionInformationNameContext : ParserRuleContext
    {
        public ITerminalNode CLASS_ORIGIN() { return GetToken(MySqlParser.CLASS_ORIGIN, 0); }
        public ITerminalNode SUBCLASS_ORIGIN() { return GetToken(MySqlParser.SUBCLASS_ORIGIN, 0); }
        public ITerminalNode RETURNED_SQLSTATE() { return GetToken(MySqlParser.RETURNED_SQLSTATE, 0); }
        public ITerminalNode MESSAGE_TEXT() { return GetToken(MySqlParser.MESSAGE_TEXT, 0); }
        public ITerminalNode MYSQL_ERRNO() { return GetToken(MySqlParser.MYSQL_ERRNO, 0); }
        public ITerminalNode CONSTRAINT_CATALOG() { return GetToken(MySqlParser.CONSTRAINT_CATALOG, 0); }
        public ITerminalNode CONSTRAINT_SCHEMA() { return GetToken(MySqlParser.CONSTRAINT_SCHEMA, 0); }
        public ITerminalNode CONSTRAINT_NAME() { return GetToken(MySqlParser.CONSTRAINT_NAME, 0); }
        public ITerminalNode CATALOG_NAME() { return GetToken(MySqlParser.CATALOG_NAME, 0); }
        public ITerminalNode SCHEMA_NAME() { return GetToken(MySqlParser.SCHEMA_NAME, 0); }
        public ITerminalNode TABLE_NAME() { return GetToken(MySqlParser.TABLE_NAME, 0); }
        public ITerminalNode COLUMN_NAME() { return GetToken(MySqlParser.COLUMN_NAME, 0); }
        public ITerminalNode CURSOR_NAME() { return GetToken(MySqlParser.CURSOR_NAME, 0); }
        public DiagnosticsConditionInformationNameContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_diagnosticsConditionInformationName; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterDiagnosticsConditionInformationName(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitDiagnosticsConditionInformationName(this);
        }
    }

    [RuleVersion(0)]
    public DiagnosticsConditionInformationNameContext diagnosticsConditionInformationName()
    {
        DiagnosticsConditionInformationNameContext _localctx = new DiagnosticsConditionInformationNameContext(Context, State);
        EnterRule(_localctx, 492, RULE_diagnosticsConditionInformationName);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 5329;
                _la = TokenStream.LA(1);
                if (!(((((_la - 286)) & ~0x3f) == 0 && ((1L << (_la - 286)) & ((1L << (CLASS_ORIGIN - 286)) | (1L << (COLUMN_NAME - 286)) | (1L << (CONSTRAINT_CATALOG - 286)) | (1L << (CONSTRAINT_SCHEMA - 286)) | (1L << (CONSTRAINT_NAME - 286)) | (1L << (CURSOR_NAME - 286)))) != 0) || _la == MESSAGE_TEXT || _la == MYSQL_ERRNO || ((((_la - 494)) & ~0x3f) == 0 && ((1L << (_la - 494)) & ((1L << (RETURNED_SQLSTATE - 494)) | (1L << (SUBCLASS_ORIGIN - 494)) | (1L << (TABLE_NAME - 494)))) != 0) || _la == CATALOG_NAME || _la == SCHEMA_NAME))
                {
                    ErrorHandler.RecoverInline(this);
                }
                else
                {
                    ErrorHandler.ReportMatch(this);
                    Consume();
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class DescribeObjectClauseContext : ParserRuleContext
    {
        public DescribeObjectClauseContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_describeObjectClause; } }

        public DescribeObjectClauseContext() { }
        public virtual void CopyFrom(DescribeObjectClauseContext context)
        {
            base.CopyFrom(context);
        }
    }
    public partial class DescribeStatementsContext : DescribeObjectClauseContext
    {
        public SelectStatementContext selectStatement()
        {
            return GetRuleContext<SelectStatementContext>(0);
        }
        public DeleteStatementContext deleteStatement()
        {
            return GetRuleContext<DeleteStatementContext>(0);
        }
        public InsertStatementContext insertStatement()
        {
            return GetRuleContext<InsertStatementContext>(0);
        }
        public ReplaceStatementContext replaceStatement()
        {
            return GetRuleContext<ReplaceStatementContext>(0);
        }
        public UpdateStatementContext updateStatement()
        {
            return GetRuleContext<UpdateStatementContext>(0);
        }
        public DescribeStatementsContext(DescribeObjectClauseContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterDescribeStatements(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitDescribeStatements(this);
        }
    }
    public partial class DescribeConnectionContext : DescribeObjectClauseContext
    {
        public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
        public ITerminalNode CONNECTION() { return GetToken(MySqlParser.CONNECTION, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public DescribeConnectionContext(DescribeObjectClauseContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterDescribeConnection(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitDescribeConnection(this);
        }
    }

    [RuleVersion(0)]
    public DescribeObjectClauseContext describeObjectClause()
    {
        DescribeObjectClauseContext _localctx = new DescribeObjectClauseContext(Context, State);
        EnterRule(_localctx, 494, RULE_describeObjectClause);
        try
        {
            State = 5341;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case DELETE:
                case INSERT:
                case REPLACE:
                case SELECT:
                case UPDATE:
                case LR_BRACKET:
                    _localctx = new DescribeStatementsContext(_localctx);
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 5336;
                        ErrorHandler.Sync(this);
                        switch (TokenStream.LA(1))
                        {
                            case SELECT:
                            case LR_BRACKET:
                                {
                                    State = 5331; selectStatement();
                                }
                                break;
                            case DELETE:
                                {
                                    State = 5332; deleteStatement();
                                }
                                break;
                            case INSERT:
                                {
                                    State = 5333; insertStatement();
                                }
                                break;
                            case REPLACE:
                                {
                                    State = 5334; replaceStatement();
                                }
                                break;
                            case UPDATE:
                                {
                                    State = 5335; updateStatement();
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                    }
                    break;
                case FOR:
                    _localctx = new DescribeConnectionContext(_localctx);
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 5338; Match(FOR);
                        State = 5339; Match(CONNECTION);
                        State = 5340; uid();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class FullIdContext : ParserRuleContext
    {
        public UidContext[] uid()
        {
            return GetRuleContexts<UidContext>();
        }
        public UidContext uid(int i)
        {
            return GetRuleContext<UidContext>(i);
        }
        public ITerminalNode DOT_ID() { return GetToken(MySqlParser.DOT_ID, 0); }
        public ITerminalNode DOT() { return GetToken(MySqlParser.DOT, 0); }
        public FullIdContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_fullId; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterFullId(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitFullId(this);
        }
    }

    [RuleVersion(0)]
    public FullIdContext fullId()
    {
        FullIdContext _localctx = new FullIdContext(Context, State);
        EnterRule(_localctx, 496, RULE_fullId);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 5343; uid();
                State = 5347;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 772, Context))
                {
                    case 1:
                        {
                            State = 5344; Match(DOT_ID);
                        }
                        break;
                    case 2:
                        {
                            State = 5345; Match(DOT);
                            State = 5346; uid();
                        }
                        break;
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class TableNameContext : ParserRuleContext
    {
        public FullIdContext fullId()
        {
            return GetRuleContext<FullIdContext>(0);
        }
        public TableNameContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_tableName; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterTableName(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitTableName(this);
        }
    }

    [RuleVersion(0)]
    public TableNameContext tableName()
    {
        TableNameContext _localctx = new TableNameContext(Context, State);
        EnterRule(_localctx, 498, RULE_tableName);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 5349; fullId();
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class FullColumnNameContext : ParserRuleContext
    {
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public DottedIdContext[] dottedId()
        {
            return GetRuleContexts<DottedIdContext>();
        }
        public DottedIdContext dottedId(int i)
        {
            return GetRuleContext<DottedIdContext>(i);
        }
        public FullColumnNameContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_fullColumnName; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterFullColumnName(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitFullColumnName(this);
        }
    }

    [RuleVersion(0)]
    public FullColumnNameContext fullColumnName()
    {
        FullColumnNameContext _localctx = new FullColumnNameContext(Context, State);
        EnterRule(_localctx, 500, RULE_fullColumnName);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 5351; uid();
                State = 5356;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 774, Context))
                {
                    case 1:
                        {
                            State = 5352; dottedId();
                            State = 5354;
                            ErrorHandler.Sync(this);
                            switch (Interpreter.AdaptivePredict(TokenStream, 773, Context))
                            {
                                case 1:
                                    {
                                        State = 5353; dottedId();
                                    }
                                    break;
                            }
                        }
                        break;
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class IndexColumnNameContext : ParserRuleContext
    {
        public IToken sortType;
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public DecimalLiteralContext decimalLiteral()
        {
            return GetRuleContext<DecimalLiteralContext>(0);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public ITerminalNode ASC() { return GetToken(MySqlParser.ASC, 0); }
        public ITerminalNode DESC() { return GetToken(MySqlParser.DESC, 0); }
        public IndexColumnNameContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_indexColumnName; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterIndexColumnName(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitIndexColumnName(this);
        }
    }

    [RuleVersion(0)]
    public IndexColumnNameContext indexColumnName()
    {
        IndexColumnNameContext _localctx = new IndexColumnNameContext(Context, State);
        EnterRule(_localctx, 502, RULE_indexColumnName);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 5360;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 775, Context))
                {
                    case 1:
                        {
                            State = 5358; uid();
                        }
                        break;
                    case 2:
                        {
                            State = 5359; Match(STRING_LITERAL);
                        }
                        break;
                }
                State = 5366;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == LR_BRACKET)
                {
                    {
                        State = 5362; Match(LR_BRACKET);
                        State = 5363; decimalLiteral();
                        State = 5364; Match(RR_BRACKET);
                    }
                }

                State = 5369;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == ASC || _la == DESC)
                {
                    {
                        State = 5368;
                        _localctx.sortType = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == ASC || _la == DESC))
                        {
                            _localctx.sortType = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                }

            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class UserNameContext : ParserRuleContext
    {
        public ITerminalNode STRING_USER_NAME() { return GetToken(MySqlParser.STRING_USER_NAME, 0); }
        public ITerminalNode ID() { return GetToken(MySqlParser.ID, 0); }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public UserNameContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_userName; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterUserName(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitUserName(this);
        }
    }

    [RuleVersion(0)]
    public UserNameContext userName()
    {
        UserNameContext _localctx = new UserNameContext(Context, State);
        EnterRule(_localctx, 504, RULE_userName);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 5371;
                _la = TokenStream.LA(1);
                if (!(((((_la - 997)) & ~0x3f) == 0 && ((1L << (_la - 997)) & ((1L << (STRING_LITERAL - 997)) | (1L << (ID - 997)) | (1L << (STRING_USER_NAME - 997)))) != 0)))
                {
                    ErrorHandler.RecoverInline(this);
                }
                else
                {
                    ErrorHandler.ReportMatch(this);
                    Consume();
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class MysqlVariableContext : ParserRuleContext
    {
        public ITerminalNode LOCAL_ID() { return GetToken(MySqlParser.LOCAL_ID, 0); }
        public ITerminalNode GLOBAL_ID() { return GetToken(MySqlParser.GLOBAL_ID, 0); }
        public MysqlVariableContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_mysqlVariable; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterMysqlVariable(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitMysqlVariable(this);
        }
    }

    [RuleVersion(0)]
    public MysqlVariableContext mysqlVariable()
    {
        MysqlVariableContext _localctx = new MysqlVariableContext(Context, State);
        EnterRule(_localctx, 506, RULE_mysqlVariable);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 5373;
                _la = TokenStream.LA(1);
                if (!(_la == LOCAL_ID || _la == GLOBAL_ID))
                {
                    ErrorHandler.RecoverInline(this);
                }
                else
                {
                    ErrorHandler.ReportMatch(this);
                    Consume();
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class CharsetNameContext : ParserRuleContext
    {
        public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
        public CharsetNameBaseContext charsetNameBase()
        {
            return GetRuleContext<CharsetNameBaseContext>(0);
        }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public ITerminalNode CHARSET_REVERSE_QOUTE_STRING() { return GetToken(MySqlParser.CHARSET_REVERSE_QOUTE_STRING, 0); }
        public CharsetNameContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_charsetName; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterCharsetName(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitCharsetName(this);
        }
    }

    [RuleVersion(0)]
    public CharsetNameContext charsetName()
    {
        CharsetNameContext _localctx = new CharsetNameContext(Context, State);
        EnterRule(_localctx, 508, RULE_charsetName);
        try
        {
            State = 5379;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case BINARY:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 5375; Match(BINARY);
                    }
                    break;
                case ARMSCII8:
                case ASCII:
                case BIG5:
                case CP1250:
                case CP1251:
                case CP1256:
                case CP1257:
                case CP850:
                case CP852:
                case CP866:
                case CP932:
                case DEC8:
                case EUCJPMS:
                case EUCKR:
                case GB2312:
                case GBK:
                case GEOSTD8:
                case GREEK:
                case HEBREW:
                case HP8:
                case KEYBCS2:
                case KOI8R:
                case KOI8U:
                case LATIN1:
                case LATIN2:
                case LATIN5:
                case LATIN7:
                case MACCE:
                case MACROMAN:
                case SJIS:
                case SWE7:
                case TIS620:
                case UCS2:
                case UJIS:
                case UTF16:
                case UTF16LE:
                case UTF32:
                case UTF8:
                case UTF8MB3:
                case UTF8MB4:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 5376; charsetNameBase();
                    }
                    break;
                case STRING_LITERAL:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 5377; Match(STRING_LITERAL);
                    }
                    break;
                case CHARSET_REVERSE_QOUTE_STRING:
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 5378; Match(CHARSET_REVERSE_QOUTE_STRING);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class CollationNameContext : ParserRuleContext
    {
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public CollationNameContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_collationName; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterCollationName(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitCollationName(this);
        }
    }

    [RuleVersion(0)]
    public CollationNameContext collationName()
    {
        CollationNameContext _localctx = new CollationNameContext(Context, State);
        EnterRule(_localctx, 510, RULE_collationName);
        try
        {
            State = 5383;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 779, Context))
            {
                case 1:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 5381; uid();
                    }
                    break;
                case 2:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 5382; Match(STRING_LITERAL);
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class EngineNameContext : ParserRuleContext
    {
        public ITerminalNode ARCHIVE() { return GetToken(MySqlParser.ARCHIVE, 0); }
        public ITerminalNode BLACKHOLE() { return GetToken(MySqlParser.BLACKHOLE, 0); }
        public ITerminalNode CSV() { return GetToken(MySqlParser.CSV, 0); }
        public ITerminalNode FEDERATED() { return GetToken(MySqlParser.FEDERATED, 0); }
        public ITerminalNode INNODB() { return GetToken(MySqlParser.INNODB, 0); }
        public ITerminalNode MEMORY() { return GetToken(MySqlParser.MEMORY, 0); }
        public ITerminalNode MRG_MYISAM() { return GetToken(MySqlParser.MRG_MYISAM, 0); }
        public ITerminalNode MYISAM() { return GetToken(MySqlParser.MYISAM, 0); }
        public ITerminalNode NDB() { return GetToken(MySqlParser.NDB, 0); }
        public ITerminalNode NDBCLUSTER() { return GetToken(MySqlParser.NDBCLUSTER, 0); }
        public ITerminalNode PERFORMANCE_SCHEMA() { return GetToken(MySqlParser.PERFORMANCE_SCHEMA, 0); }
        public ITerminalNode TOKUDB() { return GetToken(MySqlParser.TOKUDB, 0); }
        public ITerminalNode ID() { return GetToken(MySqlParser.ID, 0); }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public ITerminalNode REVERSE_QUOTE_ID() { return GetToken(MySqlParser.REVERSE_QUOTE_ID, 0); }
        public EngineNameContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_engineName; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterEngineName(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitEngineName(this);
        }
    }

    [RuleVersion(0)]
    public EngineNameContext engineName()
    {
        EngineNameContext _localctx = new EngineNameContext(Context, State);
        EnterRule(_localctx, 512, RULE_engineName);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 5385;
                _la = TokenStream.LA(1);
                if (!(((((_la - 639)) & ~0x3f) == 0 && ((1L << (_la - 639)) & ((1L << (ARCHIVE - 639)) | (1L << (BLACKHOLE - 639)) | (1L << (CSV - 639)) | (1L << (FEDERATED - 639)) | (1L << (INNODB - 639)) | (1L << (MEMORY - 639)) | (1L << (MRG_MYISAM - 639)) | (1L << (MYISAM - 639)) | (1L << (NDB - 639)) | (1L << (NDBCLUSTER - 639)) | (1L << (PERFORMANCE_SCHEMA - 639)) | (1L << (TOKUDB - 639)))) != 0) || ((((_la - 997)) & ~0x3f) == 0 && ((1L << (_la - 997)) & ((1L << (STRING_LITERAL - 997)) | (1L << (ID - 997)) | (1L << (REVERSE_QUOTE_ID - 997)))) != 0)))
                {
                    ErrorHandler.RecoverInline(this);
                }
                else
                {
                    ErrorHandler.ReportMatch(this);
                    Consume();
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class UuidSetContext : ParserRuleContext
    {
        public DecimalLiteralContext[] decimalLiteral()
        {
            return GetRuleContexts<DecimalLiteralContext>();
        }
        public DecimalLiteralContext decimalLiteral(int i)
        {
            return GetRuleContext<DecimalLiteralContext>(i);
        }
        public ITerminalNode[] MINUS() { return GetTokens(MySqlParser.MINUS); }
        public ITerminalNode MINUS(int i)
        {
            return GetToken(MySqlParser.MINUS, i);
        }
        public ITerminalNode[] COLON_SYMB() { return GetTokens(MySqlParser.COLON_SYMB); }
        public ITerminalNode COLON_SYMB(int i)
        {
            return GetToken(MySqlParser.COLON_SYMB, i);
        }
        public UuidSetContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_uuidSet; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterUuidSet(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitUuidSet(this);
        }
    }

    [RuleVersion(0)]
    public UuidSetContext uuidSet()
    {
        UuidSetContext _localctx = new UuidSetContext(Context, State);
        EnterRule(_localctx, 514, RULE_uuidSet);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 5387; decimalLiteral();
                State = 5388; Match(MINUS);
                State = 5389; decimalLiteral();
                State = 5390; Match(MINUS);
                State = 5391; decimalLiteral();
                State = 5392; Match(MINUS);
                State = 5393; decimalLiteral();
                State = 5394; Match(MINUS);
                State = 5395; decimalLiteral();
                State = 5401;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                do
                {
                    {
                        {
                            State = 5396; Match(COLON_SYMB);
                            State = 5397; decimalLiteral();
                            State = 5398; Match(MINUS);
                            State = 5399; decimalLiteral();
                        }
                    }
                    State = 5403;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                } while (_la == COLON_SYMB);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class XidContext : ParserRuleContext
    {
        public XuidStringIdContext globalTableUid;
        public XuidStringIdContext qualifier;
        public DecimalLiteralContext idFormat;
        public XuidStringIdContext[] xuidStringId()
        {
            return GetRuleContexts<XuidStringIdContext>();
        }
        public XuidStringIdContext xuidStringId(int i)
        {
            return GetRuleContext<XuidStringIdContext>(i);
        }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public DecimalLiteralContext decimalLiteral()
        {
            return GetRuleContext<DecimalLiteralContext>(0);
        }
        public XidContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_xid; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterXid(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitXid(this);
        }
    }

    [RuleVersion(0)]
    public XidContext xid()
    {
        XidContext _localctx = new XidContext(Context, State);
        EnterRule(_localctx, 516, RULE_xid);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 5405; _localctx.globalTableUid = xuidStringId();
                State = 5412;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == COMMA)
                {
                    {
                        State = 5406; Match(COMMA);
                        State = 5407; _localctx.qualifier = xuidStringId();
                        State = 5410;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == COMMA)
                        {
                            {
                                State = 5408; Match(COMMA);
                                State = 5409; _localctx.idFormat = decimalLiteral();
                            }
                        }

                    }
                }

            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class XuidStringIdContext : ParserRuleContext
    {
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public ITerminalNode BIT_STRING() { return GetToken(MySqlParser.BIT_STRING, 0); }
        public ITerminalNode[] HEXADECIMAL_LITERAL() { return GetTokens(MySqlParser.HEXADECIMAL_LITERAL); }
        public ITerminalNode HEXADECIMAL_LITERAL(int i)
        {
            return GetToken(MySqlParser.HEXADECIMAL_LITERAL, i);
        }
        public XuidStringIdContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_xuidStringId; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterXuidStringId(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitXuidStringId(this);
        }
    }

    [RuleVersion(0)]
    public XuidStringIdContext xuidStringId()
    {
        XuidStringIdContext _localctx = new XuidStringIdContext(Context, State);
        EnterRule(_localctx, 518, RULE_xuidStringId);
        int _la;
        try
        {
            State = 5421;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case STRING_LITERAL:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 5414; Match(STRING_LITERAL);
                    }
                    break;
                case BIT_STRING:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 5415; Match(BIT_STRING);
                    }
                    break;
                case HEXADECIMAL_LITERAL:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 5417;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        do
                        {
                            {
                                {
                                    State = 5416; Match(HEXADECIMAL_LITERAL);
                                }
                            }
                            State = 5419;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                        } while (_la == HEXADECIMAL_LITERAL);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class AuthPluginContext : ParserRuleContext
    {
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public AuthPluginContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_authPlugin; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAuthPlugin(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAuthPlugin(this);
        }
    }

    [RuleVersion(0)]
    public AuthPluginContext authPlugin()
    {
        AuthPluginContext _localctx = new AuthPluginContext(Context, State);
        EnterRule(_localctx, 520, RULE_authPlugin);
        try
        {
            State = 5425;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 785, Context))
            {
                case 1:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 5423; uid();
                    }
                    break;
                case 2:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 5424; Match(STRING_LITERAL);
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class UidContext : ParserRuleContext
    {
        public SimpleIdContext simpleId()
        {
            return GetRuleContext<SimpleIdContext>(0);
        }
        public ITerminalNode REVERSE_QUOTE_ID() { return GetToken(MySqlParser.REVERSE_QUOTE_ID, 0); }
        public ITerminalNode CHARSET_REVERSE_QOUTE_STRING() { return GetToken(MySqlParser.CHARSET_REVERSE_QOUTE_STRING, 0); }
        public UidContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_uid; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterUid(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitUid(this);
        }
    }

    [RuleVersion(0)]
    public UidContext uid()
    {
        UidContext _localctx = new UidContext(Context, State);
        EnterRule(_localctx, 522, RULE_uid);
        try
        {
            State = 5430;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 786, Context))
            {
                case 1:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 5427; simpleId();
                    }
                    break;
                case 2:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 5428; Match(REVERSE_QUOTE_ID);
                    }
                    break;
                case 3:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 5429; Match(CHARSET_REVERSE_QOUTE_STRING);
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class SimpleIdContext : ParserRuleContext
    {
        public ITerminalNode ID() { return GetToken(MySqlParser.ID, 0); }
        public CharsetNameBaseContext charsetNameBase()
        {
            return GetRuleContext<CharsetNameBaseContext>(0);
        }
        public TransactionLevelBaseContext transactionLevelBase()
        {
            return GetRuleContext<TransactionLevelBaseContext>(0);
        }
        public EngineNameContext engineName()
        {
            return GetRuleContext<EngineNameContext>(0);
        }
        public PrivilegesBaseContext privilegesBase()
        {
            return GetRuleContext<PrivilegesBaseContext>(0);
        }
        public IntervalTypeBaseContext intervalTypeBase()
        {
            return GetRuleContext<IntervalTypeBaseContext>(0);
        }
        public DataTypeBaseContext dataTypeBase()
        {
            return GetRuleContext<DataTypeBaseContext>(0);
        }
        public KeywordsCanBeIdContext keywordsCanBeId()
        {
            return GetRuleContext<KeywordsCanBeIdContext>(0);
        }
        public FunctionNameBaseContext functionNameBase()
        {
            return GetRuleContext<FunctionNameBaseContext>(0);
        }
        public SimpleIdContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_simpleId; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterSimpleId(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitSimpleId(this);
        }
    }

    [RuleVersion(0)]
    public SimpleIdContext simpleId()
    {
        SimpleIdContext _localctx = new SimpleIdContext(Context, State);
        EnterRule(_localctx, 524, RULE_simpleId);
        try
        {
            State = 5441;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 787, Context))
            {
                case 1:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 5432; Match(ID);
                    }
                    break;
                case 2:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 5433; charsetNameBase();
                    }
                    break;
                case 3:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 5434; transactionLevelBase();
                    }
                    break;
                case 4:
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 5435; engineName();
                    }
                    break;
                case 5:
                    EnterOuterAlt(_localctx, 5);
                    {
                        State = 5436; privilegesBase();
                    }
                    break;
                case 6:
                    EnterOuterAlt(_localctx, 6);
                    {
                        State = 5437; intervalTypeBase();
                    }
                    break;
                case 7:
                    EnterOuterAlt(_localctx, 7);
                    {
                        State = 5438; dataTypeBase();
                    }
                    break;
                case 8:
                    EnterOuterAlt(_localctx, 8);
                    {
                        State = 5439; keywordsCanBeId();
                    }
                    break;
                case 9:
                    EnterOuterAlt(_localctx, 9);
                    {
                        State = 5440; functionNameBase();
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class DottedIdContext : ParserRuleContext
    {
        public ITerminalNode DOT_ID() { return GetToken(MySqlParser.DOT_ID, 0); }
        public ITerminalNode DOT() { return GetToken(MySqlParser.DOT, 0); }
        public UidContext uid()
        {
            return GetRuleContext<UidContext>(0);
        }
        public DottedIdContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_dottedId; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterDottedId(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitDottedId(this);
        }
    }

    [RuleVersion(0)]
    public DottedIdContext dottedId()
    {
        DottedIdContext _localctx = new DottedIdContext(Context, State);
        EnterRule(_localctx, 526, RULE_dottedId);
        try
        {
            State = 5446;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case DOT_ID:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 5443; Match(DOT_ID);
                    }
                    break;
                case DOT:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 5444; Match(DOT);
                        State = 5445; uid();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class DecimalLiteralContext : ParserRuleContext
    {
        public ITerminalNode DECIMAL_LITERAL() { return GetToken(MySqlParser.DECIMAL_LITERAL, 0); }
        public ITerminalNode ZERO_DECIMAL() { return GetToken(MySqlParser.ZERO_DECIMAL, 0); }
        public ITerminalNode ONE_DECIMAL() { return GetToken(MySqlParser.ONE_DECIMAL, 0); }
        public ITerminalNode TWO_DECIMAL() { return GetToken(MySqlParser.TWO_DECIMAL, 0); }
        public DecimalLiteralContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_decimalLiteral; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterDecimalLiteral(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitDecimalLiteral(this);
        }
    }

    [RuleVersion(0)]
    public DecimalLiteralContext decimalLiteral()
    {
        DecimalLiteralContext _localctx = new DecimalLiteralContext(Context, State);
        EnterRule(_localctx, 528, RULE_decimalLiteral);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 5448;
                _la = TokenStream.LA(1);
                if (!(((((_la - 987)) & ~0x3f) == 0 && ((1L << (_la - 987)) & ((1L << (ZERO_DECIMAL - 987)) | (1L << (ONE_DECIMAL - 987)) | (1L << (TWO_DECIMAL - 987)) | (1L << (DECIMAL_LITERAL - 987)))) != 0)))
                {
                    ErrorHandler.RecoverInline(this);
                }
                else
                {
                    ErrorHandler.ReportMatch(this);
                    Consume();
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class FileSizeLiteralContext : ParserRuleContext
    {
        public ITerminalNode FILESIZE_LITERAL() { return GetToken(MySqlParser.FILESIZE_LITERAL, 0); }
        public DecimalLiteralContext decimalLiteral()
        {
            return GetRuleContext<DecimalLiteralContext>(0);
        }
        public FileSizeLiteralContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_fileSizeLiteral; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterFileSizeLiteral(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitFileSizeLiteral(this);
        }
    }

    [RuleVersion(0)]
    public FileSizeLiteralContext fileSizeLiteral()
    {
        FileSizeLiteralContext _localctx = new FileSizeLiteralContext(Context, State);
        EnterRule(_localctx, 530, RULE_fileSizeLiteral);
        try
        {
            State = 5452;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case FILESIZE_LITERAL:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 5450; Match(FILESIZE_LITERAL);
                    }
                    break;
                case ZERO_DECIMAL:
                case ONE_DECIMAL:
                case TWO_DECIMAL:
                case DECIMAL_LITERAL:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 5451; decimalLiteral();
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class StringLiteralContext : ParserRuleContext
    {
        public ITerminalNode[] STRING_LITERAL() { return GetTokens(MySqlParser.STRING_LITERAL); }
        public ITerminalNode STRING_LITERAL(int i)
        {
            return GetToken(MySqlParser.STRING_LITERAL, i);
        }
        public ITerminalNode START_NATIONAL_STRING_LITERAL() { return GetToken(MySqlParser.START_NATIONAL_STRING_LITERAL, 0); }
        public ITerminalNode STRING_CHARSET_NAME() { return GetToken(MySqlParser.STRING_CHARSET_NAME, 0); }
        public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
        public CollationNameContext collationName()
        {
            return GetRuleContext<CollationNameContext>(0);
        }
        public StringLiteralContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_stringLiteral; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterStringLiteral(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitStringLiteral(this);
        }
    }

    [RuleVersion(0)]
    public StringLiteralContext stringLiteral()
    {
        StringLiteralContext _localctx = new StringLiteralContext(Context, State);
        EnterRule(_localctx, 532, RULE_stringLiteral);
        int _la;
        try
        {
            int _alt;
            State = 5477;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 796, Context))
            {
                case 1:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 5459;
                        ErrorHandler.Sync(this);
                        switch (TokenStream.LA(1))
                        {
                            case STRING_LITERAL:
                            case STRING_CHARSET_NAME:
                                {
                                    State = 5455;
                                    ErrorHandler.Sync(this);
                                    _la = TokenStream.LA(1);
                                    if (_la == STRING_CHARSET_NAME)
                                    {
                                        {
                                            State = 5454; Match(STRING_CHARSET_NAME);
                                        }
                                    }

                                    State = 5457; Match(STRING_LITERAL);
                                }
                                break;
                            case START_NATIONAL_STRING_LITERAL:
                                {
                                    State = 5458; Match(START_NATIONAL_STRING_LITERAL);
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        State = 5462;
                        ErrorHandler.Sync(this);
                        _alt = 1;
                        do
                        {
                            switch (_alt)
                            {
                                case 1:
                                    {
                                        {
                                            State = 5461; Match(STRING_LITERAL);
                                        }
                                    }
                                    break;
                                default:
                                    throw new NoViableAltException(this);
                            }
                            State = 5464;
                            ErrorHandler.Sync(this);
                            _alt = Interpreter.AdaptivePredict(TokenStream, 792, Context);
                        } while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER);
                    }
                    break;
                case 2:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 5471;
                        ErrorHandler.Sync(this);
                        switch (TokenStream.LA(1))
                        {
                            case STRING_LITERAL:
                            case STRING_CHARSET_NAME:
                                {
                                    State = 5467;
                                    ErrorHandler.Sync(this);
                                    _la = TokenStream.LA(1);
                                    if (_la == STRING_CHARSET_NAME)
                                    {
                                        {
                                            State = 5466; Match(STRING_CHARSET_NAME);
                                        }
                                    }

                                    State = 5469; Match(STRING_LITERAL);
                                }
                                break;
                            case START_NATIONAL_STRING_LITERAL:
                                {
                                    State = 5470; Match(START_NATIONAL_STRING_LITERAL);
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        State = 5475;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 795, Context))
                        {
                            case 1:
                                {
                                    State = 5473; Match(COLLATE);
                                    State = 5474; collationName();
                                }
                                break;
                        }
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class BooleanLiteralContext : ParserRuleContext
    {
        public ITerminalNode TRUE() { return GetToken(MySqlParser.TRUE, 0); }
        public ITerminalNode FALSE() { return GetToken(MySqlParser.FALSE, 0); }
        public BooleanLiteralContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_booleanLiteral; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterBooleanLiteral(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitBooleanLiteral(this);
        }
    }

    [RuleVersion(0)]
    public BooleanLiteralContext booleanLiteral()
    {
        BooleanLiteralContext _localctx = new BooleanLiteralContext(Context, State);
        EnterRule(_localctx, 534, RULE_booleanLiteral);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 5479;
                _la = TokenStream.LA(1);
                if (!(_la == FALSE || _la == TRUE))
                {
                    ErrorHandler.RecoverInline(this);
                }
                else
                {
                    ErrorHandler.ReportMatch(this);
                    Consume();
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class HexadecimalLiteralContext : ParserRuleContext
    {
        public ITerminalNode HEXADECIMAL_LITERAL() { return GetToken(MySqlParser.HEXADECIMAL_LITERAL, 0); }
        public ITerminalNode STRING_CHARSET_NAME() { return GetToken(MySqlParser.STRING_CHARSET_NAME, 0); }
        public HexadecimalLiteralContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_hexadecimalLiteral; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterHexadecimalLiteral(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitHexadecimalLiteral(this);
        }
    }

    [RuleVersion(0)]
    public HexadecimalLiteralContext hexadecimalLiteral()
    {
        HexadecimalLiteralContext _localctx = new HexadecimalLiteralContext(Context, State);
        EnterRule(_localctx, 536, RULE_hexadecimalLiteral);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 5482;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == STRING_CHARSET_NAME)
                {
                    {
                        State = 5481; Match(STRING_CHARSET_NAME);
                    }
                }

                State = 5484; Match(HEXADECIMAL_LITERAL);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class NullNotnullContext : ParserRuleContext
    {
        public ITerminalNode NULL_LITERAL() { return GetToken(MySqlParser.NULL_LITERAL, 0); }
        public ITerminalNode NULL_SPEC_LITERAL() { return GetToken(MySqlParser.NULL_SPEC_LITERAL, 0); }
        public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
        public NullNotnullContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_nullNotnull; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterNullNotnull(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitNullNotnull(this);
        }
    }

    [RuleVersion(0)]
    public NullNotnullContext nullNotnull()
    {
        NullNotnullContext _localctx = new NullNotnullContext(Context, State);
        EnterRule(_localctx, 538, RULE_nullNotnull);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 5487;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == NOT)
                {
                    {
                        State = 5486; Match(NOT);
                    }
                }

                State = 5489;
                _la = TokenStream.LA(1);
                if (!(_la == NULL_LITERAL || _la == NULL_SPEC_LITERAL))
                {
                    ErrorHandler.RecoverInline(this);
                }
                else
                {
                    ErrorHandler.ReportMatch(this);
                    Consume();
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ConstantContext : ParserRuleContext
    {
        public IToken nullLiteral;
        public StringLiteralContext stringLiteral()
        {
            return GetRuleContext<StringLiteralContext>(0);
        }
        public DecimalLiteralContext decimalLiteral()
        {
            return GetRuleContext<DecimalLiteralContext>(0);
        }
        public ITerminalNode MINUS() { return GetToken(MySqlParser.MINUS, 0); }
        public HexadecimalLiteralContext hexadecimalLiteral()
        {
            return GetRuleContext<HexadecimalLiteralContext>(0);
        }
        public BooleanLiteralContext booleanLiteral()
        {
            return GetRuleContext<BooleanLiteralContext>(0);
        }
        public ITerminalNode REAL_LITERAL() { return GetToken(MySqlParser.REAL_LITERAL, 0); }
        public ITerminalNode BIT_STRING() { return GetToken(MySqlParser.BIT_STRING, 0); }
        public ITerminalNode NULL_LITERAL() { return GetToken(MySqlParser.NULL_LITERAL, 0); }
        public ITerminalNode NULL_SPEC_LITERAL() { return GetToken(MySqlParser.NULL_SPEC_LITERAL, 0); }
        public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
        public ConstantContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_constant; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterConstant(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitConstant(this);
        }
    }

    [RuleVersion(0)]
    public ConstantContext constant()
    {
        ConstantContext _localctx = new ConstantContext(Context, State);
        EnterRule(_localctx, 540, RULE_constant);
        int _la;
        try
        {
            State = 5503;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 800, Context))
            {
                case 1:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 5491; stringLiteral();
                    }
                    break;
                case 2:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 5492; decimalLiteral();
                    }
                    break;
                case 3:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 5493; Match(MINUS);
                        State = 5494; decimalLiteral();
                    }
                    break;
                case 4:
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 5495; hexadecimalLiteral();
                    }
                    break;
                case 5:
                    EnterOuterAlt(_localctx, 5);
                    {
                        State = 5496; booleanLiteral();
                    }
                    break;
                case 6:
                    EnterOuterAlt(_localctx, 6);
                    {
                        State = 5497; Match(REAL_LITERAL);
                    }
                    break;
                case 7:
                    EnterOuterAlt(_localctx, 7);
                    {
                        State = 5498; Match(BIT_STRING);
                    }
                    break;
                case 8:
                    EnterOuterAlt(_localctx, 8);
                    {
                        State = 5500;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == NOT)
                        {
                            {
                                State = 5499; Match(NOT);
                            }
                        }

                        State = 5502;
                        _localctx.nullLiteral = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == NULL_LITERAL || _la == NULL_SPEC_LITERAL))
                        {
                            _localctx.nullLiteral = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class DataTypeContext : ParserRuleContext
    {
        public DataTypeContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_dataType; } }

        public DataTypeContext() { }
        public virtual void CopyFrom(DataTypeContext context)
        {
            base.CopyFrom(context);
        }
    }
    public partial class SpatialDataTypeContext : DataTypeContext
    {
        public IToken typeName;
        public ITerminalNode GEOMETRYCOLLECTION() { return GetToken(MySqlParser.GEOMETRYCOLLECTION, 0); }
        public ITerminalNode GEOMCOLLECTION() { return GetToken(MySqlParser.GEOMCOLLECTION, 0); }
        public ITerminalNode LINESTRING() { return GetToken(MySqlParser.LINESTRING, 0); }
        public ITerminalNode MULTILINESTRING() { return GetToken(MySqlParser.MULTILINESTRING, 0); }
        public ITerminalNode MULTIPOINT() { return GetToken(MySqlParser.MULTIPOINT, 0); }
        public ITerminalNode MULTIPOLYGON() { return GetToken(MySqlParser.MULTIPOLYGON, 0); }
        public ITerminalNode POINT() { return GetToken(MySqlParser.POINT, 0); }
        public ITerminalNode POLYGON() { return GetToken(MySqlParser.POLYGON, 0); }
        public ITerminalNode JSON() { return GetToken(MySqlParser.JSON, 0); }
        public ITerminalNode GEOMETRY() { return GetToken(MySqlParser.GEOMETRY, 0); }
        public SpatialDataTypeContext(DataTypeContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterSpatialDataType(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitSpatialDataType(this);
        }
    }
    public partial class CollectionDataTypeContext : DataTypeContext
    {
        public IToken typeName;
        public CollectionOptionsContext collectionOptions()
        {
            return GetRuleContext<CollectionOptionsContext>(0);
        }
        public ITerminalNode ENUM() { return GetToken(MySqlParser.ENUM, 0); }
        public ITerminalNode[] SET() { return GetTokens(MySqlParser.SET); }
        public ITerminalNode SET(int i)
        {
            return GetToken(MySqlParser.SET, i);
        }
        public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
        public CharsetNameContext charsetName()
        {
            return GetRuleContext<CharsetNameContext>(0);
        }
        public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
        public ITerminalNode CHARSET() { return GetToken(MySqlParser.CHARSET, 0); }
        public CollectionDataTypeContext(DataTypeContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterCollectionDataType(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitCollectionDataType(this);
        }
    }
    public partial class NationalVaryingStringDataTypeContext : DataTypeContext
    {
        public IToken typeName;
        public ITerminalNode NATIONAL() { return GetToken(MySqlParser.NATIONAL, 0); }
        public ITerminalNode VARYING() { return GetToken(MySqlParser.VARYING, 0); }
        public ITerminalNode CHAR() { return GetToken(MySqlParser.CHAR, 0); }
        public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
        public LengthOneDimensionContext lengthOneDimension()
        {
            return GetRuleContext<LengthOneDimensionContext>(0);
        }
        public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
        public NationalVaryingStringDataTypeContext(DataTypeContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterNationalVaryingStringDataType(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitNationalVaryingStringDataType(this);
        }
    }
    public partial class DimensionDataTypeContext : DataTypeContext
    {
        public IToken typeName;
        public ITerminalNode TINYINT() { return GetToken(MySqlParser.TINYINT, 0); }
        public ITerminalNode SMALLINT() { return GetToken(MySqlParser.SMALLINT, 0); }
        public ITerminalNode MEDIUMINT() { return GetToken(MySqlParser.MEDIUMINT, 0); }
        public ITerminalNode INT() { return GetToken(MySqlParser.INT, 0); }
        public ITerminalNode INTEGER() { return GetToken(MySqlParser.INTEGER, 0); }
        public ITerminalNode BIGINT() { return GetToken(MySqlParser.BIGINT, 0); }
        public LengthOneDimensionContext lengthOneDimension()
        {
            return GetRuleContext<LengthOneDimensionContext>(0);
        }
        public ITerminalNode ZEROFILL() { return GetToken(MySqlParser.ZEROFILL, 0); }
        public ITerminalNode SIGNED() { return GetToken(MySqlParser.SIGNED, 0); }
        public ITerminalNode UNSIGNED() { return GetToken(MySqlParser.UNSIGNED, 0); }
        public ITerminalNode REAL() { return GetToken(MySqlParser.REAL, 0); }
        public LengthTwoDimensionContext lengthTwoDimension()
        {
            return GetRuleContext<LengthTwoDimensionContext>(0);
        }
        public ITerminalNode DOUBLE() { return GetToken(MySqlParser.DOUBLE, 0); }
        public ITerminalNode PRECISION() { return GetToken(MySqlParser.PRECISION, 0); }
        public ITerminalNode DECIMAL() { return GetToken(MySqlParser.DECIMAL, 0); }
        public ITerminalNode DEC() { return GetToken(MySqlParser.DEC, 0); }
        public ITerminalNode FIXED() { return GetToken(MySqlParser.FIXED, 0); }
        public ITerminalNode NUMERIC() { return GetToken(MySqlParser.NUMERIC, 0); }
        public ITerminalNode FLOAT() { return GetToken(MySqlParser.FLOAT, 0); }
        public LengthTwoOptionalDimensionContext lengthTwoOptionalDimension()
        {
            return GetRuleContext<LengthTwoOptionalDimensionContext>(0);
        }
        public ITerminalNode BIT() { return GetToken(MySqlParser.BIT, 0); }
        public ITerminalNode TIME() { return GetToken(MySqlParser.TIME, 0); }
        public ITerminalNode TIMESTAMP() { return GetToken(MySqlParser.TIMESTAMP, 0); }
        public ITerminalNode DATETIME() { return GetToken(MySqlParser.DATETIME, 0); }
        public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
        public ITerminalNode VARBINARY() { return GetToken(MySqlParser.VARBINARY, 0); }
        public ITerminalNode YEAR() { return GetToken(MySqlParser.YEAR, 0); }
        public DimensionDataTypeContext(DataTypeContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterDimensionDataType(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitDimensionDataType(this);
        }
    }
    public partial class StringDataTypeContext : DataTypeContext
    {
        public IToken typeName;
        public ITerminalNode CHAR() { return GetToken(MySqlParser.CHAR, 0); }
        public ITerminalNode VARCHAR() { return GetToken(MySqlParser.VARCHAR, 0); }
        public ITerminalNode TINYTEXT() { return GetToken(MySqlParser.TINYTEXT, 0); }
        public ITerminalNode TEXT() { return GetToken(MySqlParser.TEXT, 0); }
        public ITerminalNode MEDIUMTEXT() { return GetToken(MySqlParser.MEDIUMTEXT, 0); }
        public ITerminalNode LONGTEXT() { return GetToken(MySqlParser.LONGTEXT, 0); }
        public ITerminalNode NCHAR() { return GetToken(MySqlParser.NCHAR, 0); }
        public ITerminalNode NVARCHAR() { return GetToken(MySqlParser.NVARCHAR, 0); }
        public LengthOneDimensionContext lengthOneDimension()
        {
            return GetRuleContext<LengthOneDimensionContext>(0);
        }
        public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
        public CharsetNameContext charsetName()
        {
            return GetRuleContext<CharsetNameContext>(0);
        }
        public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
        public CollationNameContext collationName()
        {
            return GetRuleContext<CollationNameContext>(0);
        }
        public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
        public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
        public ITerminalNode CHARSET() { return GetToken(MySqlParser.CHARSET, 0); }
        public StringDataTypeContext(DataTypeContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterStringDataType(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitStringDataType(this);
        }
    }
    public partial class NationalStringDataTypeContext : DataTypeContext
    {
        public IToken typeName;
        public ITerminalNode NATIONAL() { return GetToken(MySqlParser.NATIONAL, 0); }
        public ITerminalNode VARCHAR() { return GetToken(MySqlParser.VARCHAR, 0); }
        public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
        public LengthOneDimensionContext lengthOneDimension()
        {
            return GetRuleContext<LengthOneDimensionContext>(0);
        }
        public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
        public ITerminalNode NCHAR() { return GetToken(MySqlParser.NCHAR, 0); }
        public NationalStringDataTypeContext(DataTypeContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterNationalStringDataType(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitNationalStringDataType(this);
        }
    }
    public partial class SimpleDataTypeContext : DataTypeContext
    {
        public IToken typeName;
        public ITerminalNode DATE() { return GetToken(MySqlParser.DATE, 0); }
        public ITerminalNode TINYBLOB() { return GetToken(MySqlParser.TINYBLOB, 0); }
        public ITerminalNode BLOB() { return GetToken(MySqlParser.BLOB, 0); }
        public ITerminalNode MEDIUMBLOB() { return GetToken(MySqlParser.MEDIUMBLOB, 0); }
        public ITerminalNode LONGBLOB() { return GetToken(MySqlParser.LONGBLOB, 0); }
        public ITerminalNode BOOL() { return GetToken(MySqlParser.BOOL, 0); }
        public ITerminalNode BOOLEAN() { return GetToken(MySqlParser.BOOLEAN, 0); }
        public ITerminalNode SERIAL() { return GetToken(MySqlParser.SERIAL, 0); }
        public SimpleDataTypeContext(DataTypeContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterSimpleDataType(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitSimpleDataType(this);
        }
    }

    [RuleVersion(0)]
    public DataTypeContext dataType()
    {
        DataTypeContext _localctx = new DataTypeContext(Context, State);
        EnterRule(_localctx, 542, RULE_dataType);
        int _la;
        try
        {
            State = 5611;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 829, Context))
            {
                case 1:
                    _localctx = new StringDataTypeContext(_localctx);
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 5505;
                        ((StringDataTypeContext)_localctx).typeName = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(((((_la - 196)) & ~0x3f) == 0 && ((1L << (_la - 196)) & ((1L << (CHAR - 196)) | (1L << (VARCHAR - 196)) | (1L << (NVARCHAR - 196)) | (1L << (TINYTEXT - 196)) | (1L << (TEXT - 196)) | (1L << (MEDIUMTEXT - 196)) | (1L << (LONGTEXT - 196)))) != 0) || _la == NCHAR))
                        {
                            ((StringDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                        State = 5507;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 801, Context))
                        {
                            case 1:
                                {
                                    State = 5506; lengthOneDimension();
                                }
                                break;
                        }
                        State = 5510;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == BINARY)
                        {
                            {
                                State = 5509; Match(BINARY);
                            }
                        }

                        State = 5518;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 804, Context))
                        {
                            case 1:
                                {
                                    State = 5515;
                                    ErrorHandler.Sync(this);
                                    switch (TokenStream.LA(1))
                                    {
                                        case CHARACTER:
                                            {
                                                State = 5512; Match(CHARACTER);
                                                State = 5513; Match(SET);
                                            }
                                            break;
                                        case CHARSET:
                                            {
                                                State = 5514; Match(CHARSET);
                                            }
                                            break;
                                        default:
                                            throw new NoViableAltException(this);
                                    }
                                    State = 5517; charsetName();
                                }
                                break;
                        }
                        State = 5522;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 805, Context))
                        {
                            case 1:
                                {
                                    State = 5520; Match(COLLATE);
                                    State = 5521; collationName();
                                }
                                break;
                        }
                    }
                    break;
                case 2:
                    _localctx = new NationalStringDataTypeContext(_localctx);
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 5524; Match(NATIONAL);
                        State = 5525;
                        ((NationalStringDataTypeContext)_localctx).typeName = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == CHARACTER || _la == VARCHAR))
                        {
                            ((NationalStringDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                        State = 5527;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 806, Context))
                        {
                            case 1:
                                {
                                    State = 5526; lengthOneDimension();
                                }
                                break;
                        }
                        State = 5530;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == BINARY)
                        {
                            {
                                State = 5529; Match(BINARY);
                            }
                        }

                    }
                    break;
                case 3:
                    _localctx = new NationalStringDataTypeContext(_localctx);
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 5532; Match(NCHAR);
                        State = 5533; ((NationalStringDataTypeContext)_localctx).typeName = Match(VARCHAR);
                        State = 5535;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 808, Context))
                        {
                            case 1:
                                {
                                    State = 5534; lengthOneDimension();
                                }
                                break;
                        }
                        State = 5538;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == BINARY)
                        {
                            {
                                State = 5537; Match(BINARY);
                            }
                        }

                    }
                    break;
                case 4:
                    _localctx = new NationalVaryingStringDataTypeContext(_localctx);
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 5540; Match(NATIONAL);
                        State = 5541;
                        ((NationalVaryingStringDataTypeContext)_localctx).typeName = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == CHARACTER || _la == CHAR))
                        {
                            ((NationalVaryingStringDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                        State = 5542; Match(VARYING);
                        State = 5544;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 810, Context))
                        {
                            case 1:
                                {
                                    State = 5543; lengthOneDimension();
                                }
                                break;
                        }
                        State = 5547;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == BINARY)
                        {
                            {
                                State = 5546; Match(BINARY);
                            }
                        }

                    }
                    break;
                case 5:
                    _localctx = new DimensionDataTypeContext(_localctx);
                    EnterOuterAlt(_localctx, 5);
                    {
                        State = 5549;
                        ((DimensionDataTypeContext)_localctx).typeName = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(((((_la - 178)) & ~0x3f) == 0 && ((1L << (_la - 178)) & ((1L << (TINYINT - 178)) | (1L << (SMALLINT - 178)) | (1L << (MEDIUMINT - 178)) | (1L << (INT - 178)) | (1L << (INTEGER - 178)) | (1L << (BIGINT - 178)))) != 0)))
                        {
                            ((DimensionDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                        State = 5551;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 812, Context))
                        {
                            case 1:
                                {
                                    State = 5550; lengthOneDimension();
                                }
                                break;
                        }
                        State = 5554;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 813, Context))
                        {
                            case 1:
                                {
                                    State = 5553;
                                    _la = TokenStream.LA(1);
                                    if (!(_la == UNSIGNED || _la == SIGNED))
                                    {
                                        ErrorHandler.RecoverInline(this);
                                    }
                                    else
                                    {
                                        ErrorHandler.ReportMatch(this);
                                        Consume();
                                    }
                                }
                                break;
                        }
                        State = 5557;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == ZEROFILL)
                        {
                            {
                                State = 5556; Match(ZEROFILL);
                            }
                        }

                    }
                    break;
                case 6:
                    _localctx = new DimensionDataTypeContext(_localctx);
                    EnterOuterAlt(_localctx, 6);
                    {
                        State = 5559; ((DimensionDataTypeContext)_localctx).typeName = Match(REAL);
                        State = 5561;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 815, Context))
                        {
                            case 1:
                                {
                                    State = 5560; lengthTwoDimension();
                                }
                                break;
                        }
                        State = 5564;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 816, Context))
                        {
                            case 1:
                                {
                                    State = 5563;
                                    _la = TokenStream.LA(1);
                                    if (!(_la == UNSIGNED || _la == SIGNED))
                                    {
                                        ErrorHandler.RecoverInline(this);
                                    }
                                    else
                                    {
                                        ErrorHandler.ReportMatch(this);
                                        Consume();
                                    }
                                }
                                break;
                        }
                        State = 5567;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == ZEROFILL)
                        {
                            {
                                State = 5566; Match(ZEROFILL);
                            }
                        }

                    }
                    break;
                case 7:
                    _localctx = new DimensionDataTypeContext(_localctx);
                    EnterOuterAlt(_localctx, 7);
                    {
                        State = 5569; ((DimensionDataTypeContext)_localctx).typeName = Match(DOUBLE);
                        State = 5571;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == PRECISION)
                        {
                            {
                                State = 5570; Match(PRECISION);
                            }
                        }

                        State = 5574;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 819, Context))
                        {
                            case 1:
                                {
                                    State = 5573; lengthTwoDimension();
                                }
                                break;
                        }
                        State = 5577;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 820, Context))
                        {
                            case 1:
                                {
                                    State = 5576;
                                    _la = TokenStream.LA(1);
                                    if (!(_la == UNSIGNED || _la == SIGNED))
                                    {
                                        ErrorHandler.RecoverInline(this);
                                    }
                                    else
                                    {
                                        ErrorHandler.ReportMatch(this);
                                        Consume();
                                    }
                                }
                                break;
                        }
                        State = 5580;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == ZEROFILL)
                        {
                            {
                                State = 5579; Match(ZEROFILL);
                            }
                        }

                    }
                    break;
                case 8:
                    _localctx = new DimensionDataTypeContext(_localctx);
                    EnterOuterAlt(_localctx, 8);
                    {
                        State = 5582;
                        ((DimensionDataTypeContext)_localctx).typeName = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(((((_la - 187)) & ~0x3f) == 0 && ((1L << (_la - 187)) & ((1L << (FLOAT - 187)) | (1L << (DECIMAL - 187)) | (1L << (DEC - 187)) | (1L << (NUMERIC - 187)))) != 0) || _la == FIXED))
                        {
                            ((DimensionDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                        State = 5584;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 822, Context))
                        {
                            case 1:
                                {
                                    State = 5583; lengthTwoOptionalDimension();
                                }
                                break;
                        }
                        State = 5587;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 823, Context))
                        {
                            case 1:
                                {
                                    State = 5586;
                                    _la = TokenStream.LA(1);
                                    if (!(_la == UNSIGNED || _la == SIGNED))
                                    {
                                        ErrorHandler.RecoverInline(this);
                                    }
                                    else
                                    {
                                        ErrorHandler.ReportMatch(this);
                                        Consume();
                                    }
                                }
                                break;
                        }
                        State = 5590;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == ZEROFILL)
                        {
                            {
                                State = 5589; Match(ZEROFILL);
                            }
                        }

                    }
                    break;
                case 9:
                    _localctx = new SimpleDataTypeContext(_localctx);
                    EnterOuterAlt(_localctx, 9);
                    {
                        State = 5592;
                        ((SimpleDataTypeContext)_localctx).typeName = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TINYBLOB - 191)) | (1L << (BLOB - 191)) | (1L << (MEDIUMBLOB - 191)) | (1L << (LONGBLOB - 191)) | (1L << (SERIAL - 191)))) != 0) || _la == BOOL || _la == BOOLEAN))
                        {
                            ((SimpleDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                    break;
                case 10:
                    _localctx = new DimensionDataTypeContext(_localctx);
                    EnterOuterAlt(_localctx, 10);
                    {
                        State = 5593;
                        ((DimensionDataTypeContext)_localctx).typeName = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (TIME - 192)) | (1L << (TIMESTAMP - 192)) | (1L << (DATETIME - 192)) | (1L << (YEAR - 192)) | (1L << (BINARY - 192)) | (1L << (VARBINARY - 192)))) != 0) || _la == BIT))
                        {
                            ((DimensionDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                        State = 5595;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 825, Context))
                        {
                            case 1:
                                {
                                    State = 5594; lengthOneDimension();
                                }
                                break;
                        }
                    }
                    break;
                case 11:
                    _localctx = new CollectionDataTypeContext(_localctx);
                    EnterOuterAlt(_localctx, 11);
                    {
                        State = 5597;
                        ((CollectionDataTypeContext)_localctx).typeName = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == SET || _la == ENUM))
                        {
                            ((CollectionDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                        State = 5598; collectionOptions();
                        State = 5600;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == BINARY)
                        {
                            {
                                State = 5599; Match(BINARY);
                            }
                        }

                        State = 5608;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 828, Context))
                        {
                            case 1:
                                {
                                    State = 5605;
                                    ErrorHandler.Sync(this);
                                    switch (TokenStream.LA(1))
                                    {
                                        case CHARACTER:
                                            {
                                                State = 5602; Match(CHARACTER);
                                                State = 5603; Match(SET);
                                            }
                                            break;
                                        case CHARSET:
                                            {
                                                State = 5604; Match(CHARSET);
                                            }
                                            break;
                                        default:
                                            throw new NoViableAltException(this);
                                    }
                                    State = 5607; charsetName();
                                }
                                break;
                        }
                    }
                    break;
                case 12:
                    _localctx = new SpatialDataTypeContext(_localctx);
                    EnterOuterAlt(_localctx, 12);
                    {
                        State = 5610;
                        ((SpatialDataTypeContext)_localctx).typeName = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == JSON || ((((_la - 655)) & ~0x3f) == 0 && ((1L << (_la - 655)) & ((1L << (GEOMETRYCOLLECTION - 655)) | (1L << (GEOMCOLLECTION - 655)) | (1L << (GEOMETRY - 655)) | (1L << (LINESTRING - 655)) | (1L << (MULTILINESTRING - 655)) | (1L << (MULTIPOINT - 655)) | (1L << (MULTIPOLYGON - 655)) | (1L << (POINT - 655)) | (1L << (POLYGON - 655)))) != 0)))
                        {
                            ((SpatialDataTypeContext)_localctx).typeName = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class CollectionOptionsContext : ParserRuleContext
    {
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public ITerminalNode[] STRING_LITERAL() { return GetTokens(MySqlParser.STRING_LITERAL); }
        public ITerminalNode STRING_LITERAL(int i)
        {
            return GetToken(MySqlParser.STRING_LITERAL, i);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public CollectionOptionsContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_collectionOptions; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterCollectionOptions(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitCollectionOptions(this);
        }
    }

    [RuleVersion(0)]
    public CollectionOptionsContext collectionOptions()
    {
        CollectionOptionsContext _localctx = new CollectionOptionsContext(Context, State);
        EnterRule(_localctx, 544, RULE_collectionOptions);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 5613; Match(LR_BRACKET);
                State = 5614; Match(STRING_LITERAL);
                State = 5619;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while (_la == COMMA)
                {
                    {
                        {
                            State = 5615; Match(COMMA);
                            State = 5616; Match(STRING_LITERAL);
                        }
                    }
                    State = 5621;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
                State = 5622; Match(RR_BRACKET);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ConvertedDataTypeContext : ParserRuleContext
    {
        public IToken typeName;
        public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
        public ITerminalNode NCHAR() { return GetToken(MySqlParser.NCHAR, 0); }
        public LengthOneDimensionContext lengthOneDimension()
        {
            return GetRuleContext<LengthOneDimensionContext>(0);
        }
        public ITerminalNode CHAR() { return GetToken(MySqlParser.CHAR, 0); }
        public CharsetNameContext charsetName()
        {
            return GetRuleContext<CharsetNameContext>(0);
        }
        public ITerminalNode CHARACTER() { return GetToken(MySqlParser.CHARACTER, 0); }
        public ITerminalNode SET() { return GetToken(MySqlParser.SET, 0); }
        public ITerminalNode CHARSET() { return GetToken(MySqlParser.CHARSET, 0); }
        public ITerminalNode DATE() { return GetToken(MySqlParser.DATE, 0); }
        public ITerminalNode DATETIME() { return GetToken(MySqlParser.DATETIME, 0); }
        public ITerminalNode TIME() { return GetToken(MySqlParser.TIME, 0); }
        public ITerminalNode JSON() { return GetToken(MySqlParser.JSON, 0); }
        public ITerminalNode DECIMAL() { return GetToken(MySqlParser.DECIMAL, 0); }
        public LengthTwoDimensionContext lengthTwoDimension()
        {
            return GetRuleContext<LengthTwoDimensionContext>(0);
        }
        public ITerminalNode SIGNED() { return GetToken(MySqlParser.SIGNED, 0); }
        public ITerminalNode UNSIGNED() { return GetToken(MySqlParser.UNSIGNED, 0); }
        public ITerminalNode INTEGER() { return GetToken(MySqlParser.INTEGER, 0); }
        public ConvertedDataTypeContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_convertedDataType; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterConvertedDataType(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitConvertedDataType(this);
        }
    }

    [RuleVersion(0)]
    public ConvertedDataTypeContext convertedDataType()
    {
        ConvertedDataTypeContext _localctx = new ConvertedDataTypeContext(Context, State);
        EnterRule(_localctx, 546, RULE_convertedDataType);
        int _la;
        try
        {
            State = 5649;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case BINARY:
                case NCHAR:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 5624;
                        _localctx.typeName = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == BINARY || _la == NCHAR))
                        {
                            _localctx.typeName = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                        State = 5626;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == LR_BRACKET)
                        {
                            {
                                State = 5625; lengthOneDimension();
                            }
                        }

                    }
                    break;
                case CHAR:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 5628; _localctx.typeName = Match(CHAR);
                        State = 5630;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == LR_BRACKET)
                        {
                            {
                                State = 5629; lengthOneDimension();
                            }
                        }

                        State = 5638;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == CHARACTER || _la == CHARSET)
                        {
                            {
                                State = 5635;
                                ErrorHandler.Sync(this);
                                switch (TokenStream.LA(1))
                                {
                                    case CHARACTER:
                                        {
                                            State = 5632; Match(CHARACTER);
                                            State = 5633; Match(SET);
                                        }
                                        break;
                                    case CHARSET:
                                        {
                                            State = 5634; Match(CHARSET);
                                        }
                                        break;
                                    default:
                                        throw new NoViableAltException(this);
                                }
                                State = 5637; charsetName();
                            }
                        }

                    }
                    break;
                case DATE:
                case TIME:
                case DATETIME:
                case JSON:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 5640;
                        _localctx.typeName = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (DATETIME - 191)))) != 0) || _la == JSON))
                        {
                            _localctx.typeName = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                    break;
                case DECIMAL:
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 5641; _localctx.typeName = Match(DECIMAL);
                        State = 5643;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == LR_BRACKET)
                        {
                            {
                                State = 5642; lengthTwoDimension();
                            }
                        }

                    }
                    break;
                case UNSIGNED:
                case SIGNED:
                    EnterOuterAlt(_localctx, 5);
                    {
                        State = 5645;
                        _la = TokenStream.LA(1);
                        if (!(_la == UNSIGNED || _la == SIGNED))
                        {
                            ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                        State = 5647;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == INTEGER)
                        {
                            {
                                State = 5646; Match(INTEGER);
                            }
                        }

                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class LengthOneDimensionContext : ParserRuleContext
    {
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public DecimalLiteralContext decimalLiteral()
        {
            return GetRuleContext<DecimalLiteralContext>(0);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public LengthOneDimensionContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_lengthOneDimension; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterLengthOneDimension(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitLengthOneDimension(this);
        }
    }

    [RuleVersion(0)]
    public LengthOneDimensionContext lengthOneDimension()
    {
        LengthOneDimensionContext _localctx = new LengthOneDimensionContext(Context, State);
        EnterRule(_localctx, 548, RULE_lengthOneDimension);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 5651; Match(LR_BRACKET);
                State = 5652; decimalLiteral();
                State = 5653; Match(RR_BRACKET);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class LengthTwoDimensionContext : ParserRuleContext
    {
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public DecimalLiteralContext[] decimalLiteral()
        {
            return GetRuleContexts<DecimalLiteralContext>();
        }
        public DecimalLiteralContext decimalLiteral(int i)
        {
            return GetRuleContext<DecimalLiteralContext>(i);
        }
        public ITerminalNode COMMA() { return GetToken(MySqlParser.COMMA, 0); }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public LengthTwoDimensionContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_lengthTwoDimension; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterLengthTwoDimension(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitLengthTwoDimension(this);
        }
    }

    [RuleVersion(0)]
    public LengthTwoDimensionContext lengthTwoDimension()
    {
        LengthTwoDimensionContext _localctx = new LengthTwoDimensionContext(Context, State);
        EnterRule(_localctx, 550, RULE_lengthTwoDimension);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 5655; Match(LR_BRACKET);
                State = 5656; decimalLiteral();
                State = 5657; Match(COMMA);
                State = 5658; decimalLiteral();
                State = 5659; Match(RR_BRACKET);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class LengthTwoOptionalDimensionContext : ParserRuleContext
    {
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public DecimalLiteralContext[] decimalLiteral()
        {
            return GetRuleContexts<DecimalLiteralContext>();
        }
        public DecimalLiteralContext decimalLiteral(int i)
        {
            return GetRuleContext<DecimalLiteralContext>(i);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public ITerminalNode COMMA() { return GetToken(MySqlParser.COMMA, 0); }
        public LengthTwoOptionalDimensionContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_lengthTwoOptionalDimension; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterLengthTwoOptionalDimension(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitLengthTwoOptionalDimension(this);
        }
    }

    [RuleVersion(0)]
    public LengthTwoOptionalDimensionContext lengthTwoOptionalDimension()
    {
        LengthTwoOptionalDimensionContext _localctx = new LengthTwoOptionalDimensionContext(Context, State);
        EnterRule(_localctx, 552, RULE_lengthTwoOptionalDimension);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 5661; Match(LR_BRACKET);
                State = 5662; decimalLiteral();
                State = 5665;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == COMMA)
                {
                    {
                        State = 5663; Match(COMMA);
                        State = 5664; decimalLiteral();
                    }
                }

                State = 5667; Match(RR_BRACKET);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class UidListContext : ParserRuleContext
    {
        public UidContext[] uid()
        {
            return GetRuleContexts<UidContext>();
        }
        public UidContext uid(int i)
        {
            return GetRuleContext<UidContext>(i);
        }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public UidListContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_uidList; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterUidList(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitUidList(this);
        }
    }

    [RuleVersion(0)]
    public UidListContext uidList()
    {
        UidListContext _localctx = new UidListContext(Context, State);
        EnterRule(_localctx, 554, RULE_uidList);
        try
        {
            int _alt;
            EnterOuterAlt(_localctx, 1);
            {
                State = 5669; uid();
                State = 5674;
                ErrorHandler.Sync(this);
                _alt = Interpreter.AdaptivePredict(TokenStream, 839, Context);
                while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                {
                    if (_alt == 1)
                    {
                        {
                            {
                                State = 5670; Match(COMMA);
                                State = 5671; uid();
                            }
                        }
                    }
                    State = 5676;
                    ErrorHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(TokenStream, 839, Context);
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class TablesContext : ParserRuleContext
    {
        public TableNameContext[] tableName()
        {
            return GetRuleContexts<TableNameContext>();
        }
        public TableNameContext tableName(int i)
        {
            return GetRuleContext<TableNameContext>(i);
        }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public TablesContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_tables; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterTables(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitTables(this);
        }
    }

    [RuleVersion(0)]
    public TablesContext tables()
    {
        TablesContext _localctx = new TablesContext(Context, State);
        EnterRule(_localctx, 556, RULE_tables);
        try
        {
            int _alt;
            EnterOuterAlt(_localctx, 1);
            {
                State = 5677; tableName();
                State = 5682;
                ErrorHandler.Sync(this);
                _alt = Interpreter.AdaptivePredict(TokenStream, 840, Context);
                while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                {
                    if (_alt == 1)
                    {
                        {
                            {
                                State = 5678; Match(COMMA);
                                State = 5679; tableName();
                            }
                        }
                    }
                    State = 5684;
                    ErrorHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(TokenStream, 840, Context);
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class IndexColumnNamesContext : ParserRuleContext
    {
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public IndexColumnNameContext[] indexColumnName()
        {
            return GetRuleContexts<IndexColumnNameContext>();
        }
        public IndexColumnNameContext indexColumnName(int i)
        {
            return GetRuleContext<IndexColumnNameContext>(i);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public IndexColumnNamesContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_indexColumnNames; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterIndexColumnNames(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitIndexColumnNames(this);
        }
    }

    [RuleVersion(0)]
    public IndexColumnNamesContext indexColumnNames()
    {
        IndexColumnNamesContext _localctx = new IndexColumnNamesContext(Context, State);
        EnterRule(_localctx, 558, RULE_indexColumnNames);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 5685; Match(LR_BRACKET);
                State = 5686; indexColumnName();
                State = 5691;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while (_la == COMMA)
                {
                    {
                        {
                            State = 5687; Match(COMMA);
                            State = 5688; indexColumnName();
                        }
                    }
                    State = 5693;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
                State = 5694; Match(RR_BRACKET);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ExpressionsContext : ParserRuleContext
    {
        public ExpressionContext[] expression()
        {
            return GetRuleContexts<ExpressionContext>();
        }
        public ExpressionContext expression(int i)
        {
            return GetRuleContext<ExpressionContext>(i);
        }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public ExpressionsContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_expressions; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterExpressions(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitExpressions(this);
        }
    }

    [RuleVersion(0)]
    public ExpressionsContext expressions()
    {
        ExpressionsContext _localctx = new ExpressionsContext(Context, State);
        EnterRule(_localctx, 560, RULE_expressions);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 5696; expression(0);
                State = 5701;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while (_la == COMMA)
                {
                    {
                        {
                            State = 5697; Match(COMMA);
                            State = 5698; expression(0);
                        }
                    }
                    State = 5703;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ExpressionsWithDefaultsContext : ParserRuleContext
    {
        public ExpressionOrDefaultContext[] expressionOrDefault()
        {
            return GetRuleContexts<ExpressionOrDefaultContext>();
        }
        public ExpressionOrDefaultContext expressionOrDefault(int i)
        {
            return GetRuleContext<ExpressionOrDefaultContext>(i);
        }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public ExpressionsWithDefaultsContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_expressionsWithDefaults; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterExpressionsWithDefaults(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitExpressionsWithDefaults(this);
        }
    }

    [RuleVersion(0)]
    public ExpressionsWithDefaultsContext expressionsWithDefaults()
    {
        ExpressionsWithDefaultsContext _localctx = new ExpressionsWithDefaultsContext(Context, State);
        EnterRule(_localctx, 562, RULE_expressionsWithDefaults);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 5704; expressionOrDefault();
                State = 5709;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while (_la == COMMA)
                {
                    {
                        {
                            State = 5705; Match(COMMA);
                            State = 5706; expressionOrDefault();
                        }
                    }
                    State = 5711;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ConstantsContext : ParserRuleContext
    {
        public ConstantContext[] constant()
        {
            return GetRuleContexts<ConstantContext>();
        }
        public ConstantContext constant(int i)
        {
            return GetRuleContext<ConstantContext>(i);
        }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public ConstantsContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_constants; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterConstants(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitConstants(this);
        }
    }

    [RuleVersion(0)]
    public ConstantsContext constants()
    {
        ConstantsContext _localctx = new ConstantsContext(Context, State);
        EnterRule(_localctx, 564, RULE_constants);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 5712; constant();
                State = 5717;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while (_la == COMMA)
                {
                    {
                        {
                            State = 5713; Match(COMMA);
                            State = 5714; constant();
                        }
                    }
                    State = 5719;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class SimpleStringsContext : ParserRuleContext
    {
        public ITerminalNode[] STRING_LITERAL() { return GetTokens(MySqlParser.STRING_LITERAL); }
        public ITerminalNode STRING_LITERAL(int i)
        {
            return GetToken(MySqlParser.STRING_LITERAL, i);
        }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public SimpleStringsContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_simpleStrings; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterSimpleStrings(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitSimpleStrings(this);
        }
    }

    [RuleVersion(0)]
    public SimpleStringsContext simpleStrings()
    {
        SimpleStringsContext _localctx = new SimpleStringsContext(Context, State);
        EnterRule(_localctx, 566, RULE_simpleStrings);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 5720; Match(STRING_LITERAL);
                State = 5725;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while (_la == COMMA)
                {
                    {
                        {
                            State = 5721; Match(COMMA);
                            State = 5722; Match(STRING_LITERAL);
                        }
                    }
                    State = 5727;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class UserVariablesContext : ParserRuleContext
    {
        public ITerminalNode[] LOCAL_ID() { return GetTokens(MySqlParser.LOCAL_ID); }
        public ITerminalNode LOCAL_ID(int i)
        {
            return GetToken(MySqlParser.LOCAL_ID, i);
        }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public UserVariablesContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_userVariables; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterUserVariables(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitUserVariables(this);
        }
    }

    [RuleVersion(0)]
    public UserVariablesContext userVariables()
    {
        UserVariablesContext _localctx = new UserVariablesContext(Context, State);
        EnterRule(_localctx, 568, RULE_userVariables);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 5728; Match(LOCAL_ID);
                State = 5733;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while (_la == COMMA)
                {
                    {
                        {
                            State = 5729; Match(COMMA);
                            State = 5730; Match(LOCAL_ID);
                        }
                    }
                    State = 5735;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class DefaultValueContext : ParserRuleContext
    {
        public ITerminalNode NULL_LITERAL() { return GetToken(MySqlParser.NULL_LITERAL, 0); }
        public ConstantContext constant()
        {
            return GetRuleContext<ConstantContext>(0);
        }
        public UnaryOperatorContext unaryOperator()
        {
            return GetRuleContext<UnaryOperatorContext>(0);
        }
        public CurrentTimestampContext[] currentTimestamp()
        {
            return GetRuleContexts<CurrentTimestampContext>();
        }
        public CurrentTimestampContext currentTimestamp(int i)
        {
            return GetRuleContext<CurrentTimestampContext>(i);
        }
        public ITerminalNode ON() { return GetToken(MySqlParser.ON, 0); }
        public ITerminalNode UPDATE() { return GetToken(MySqlParser.UPDATE, 0); }
        public DefaultValueContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_defaultValue; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterDefaultValue(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitDefaultValue(this);
        }
    }

    [RuleVersion(0)]
    public DefaultValueContext defaultValue()
    {
        DefaultValueContext _localctx = new DefaultValueContext(Context, State);
        EnterRule(_localctx, 570, RULE_defaultValue);
        try
        {
            State = 5747;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 849, Context))
            {
                case 1:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 5736; Match(NULL_LITERAL);
                    }
                    break;
                case 2:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 5738;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 847, Context))
                        {
                            case 1:
                                {
                                    State = 5737; unaryOperator();
                                }
                                break;
                        }
                        State = 5740; constant();
                    }
                    break;
                case 3:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 5741; currentTimestamp();
                        State = 5745;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 848, Context))
                        {
                            case 1:
                                {
                                    State = 5742; Match(ON);
                                    State = 5743; Match(UPDATE);
                                    State = 5744; currentTimestamp();
                                }
                                break;
                        }
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class CurrentTimestampContext : ParserRuleContext
    {
        public ITerminalNode NOW() { return GetToken(MySqlParser.NOW, 0); }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
        public ITerminalNode LOCALTIME() { return GetToken(MySqlParser.LOCALTIME, 0); }
        public ITerminalNode LOCALTIMESTAMP() { return GetToken(MySqlParser.LOCALTIMESTAMP, 0); }
        public DecimalLiteralContext decimalLiteral()
        {
            return GetRuleContext<DecimalLiteralContext>(0);
        }
        public CurrentTimestampContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_currentTimestamp; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterCurrentTimestamp(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitCurrentTimestamp(this);
        }
    }

    [RuleVersion(0)]
    public CurrentTimestampContext currentTimestamp()
    {
        CurrentTimestampContext _localctx = new CurrentTimestampContext(Context, State);
        EnterRule(_localctx, 572, RULE_currentTimestamp);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 5763;
                ErrorHandler.Sync(this);
                switch (TokenStream.LA(1))
                {
                    case CURRENT_TIMESTAMP:
                    case LOCALTIME:
                    case LOCALTIMESTAMP:
                        {
                            State = 5749;
                            _la = TokenStream.LA(1);
                            if (!(((((_la - 242)) & ~0x3f) == 0 && ((1L << (_la - 242)) & ((1L << (CURRENT_TIMESTAMP - 242)) | (1L << (LOCALTIME - 242)) | (1L << (LOCALTIMESTAMP - 242)))) != 0)))
                            {
                                ErrorHandler.RecoverInline(this);
                            }
                            else
                            {
                                ErrorHandler.ReportMatch(this);
                                Consume();
                            }
                            State = 5755;
                            ErrorHandler.Sync(this);
                            switch (Interpreter.AdaptivePredict(TokenStream, 851, Context))
                            {
                                case 1:
                                    {
                                        State = 5750; Match(LR_BRACKET);
                                        State = 5752;
                                        ErrorHandler.Sync(this);
                                        _la = TokenStream.LA(1);
                                        if (((((_la - 987)) & ~0x3f) == 0 && ((1L << (_la - 987)) & ((1L << (ZERO_DECIMAL - 987)) | (1L << (ONE_DECIMAL - 987)) | (1L << (TWO_DECIMAL - 987)) | (1L << (DECIMAL_LITERAL - 987)))) != 0))
                                        {
                                            {
                                                State = 5751; decimalLiteral();
                                            }
                                        }

                                        State = 5754; Match(RR_BRACKET);
                                    }
                                    break;
                            }
                        }
                        break;
                    case NOW:
                        {
                            State = 5757; Match(NOW);
                            State = 5758; Match(LR_BRACKET);
                            State = 5760;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            if (((((_la - 987)) & ~0x3f) == 0 && ((1L << (_la - 987)) & ((1L << (ZERO_DECIMAL - 987)) | (1L << (ONE_DECIMAL - 987)) | (1L << (TWO_DECIMAL - 987)) | (1L << (DECIMAL_LITERAL - 987)))) != 0))
                            {
                                {
                                    State = 5759; decimalLiteral();
                                }
                            }

                            State = 5762; Match(RR_BRACKET);
                        }
                        break;
                    default:
                        throw new NoViableAltException(this);
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ExpressionOrDefaultContext : ParserRuleContext
    {
        public ExpressionContext expression()
        {
            return GetRuleContext<ExpressionContext>(0);
        }
        public ITerminalNode DEFAULT() { return GetToken(MySqlParser.DEFAULT, 0); }
        public ExpressionOrDefaultContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_expressionOrDefault; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterExpressionOrDefault(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitExpressionOrDefault(this);
        }
    }

    [RuleVersion(0)]
    public ExpressionOrDefaultContext expressionOrDefault()
    {
        ExpressionOrDefaultContext _localctx = new ExpressionOrDefaultContext(Context, State);
        EnterRule(_localctx, 574, RULE_expressionOrDefault);
        try
        {
            State = 5767;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case CASE:
                case CAST:
                case CONVERT:
                case CURRENT:
                case CURRENT_USER:
                case DATABASE:
                case DIAGNOSTICS:
                case EXISTS:
                case FALSE:
                case IF:
                case INSERT:
                case INTERVAL:
                case LEFT:
                case NOT:
                case NULL_LITERAL:
                case NUMBER:
                case REPLACE:
                case RIGHT:
                case STACKED:
                case TRUE:
                case VALUES:
                case DATE:
                case TIME:
                case TIMESTAMP:
                case DATETIME:
                case YEAR:
                case CHAR:
                case BINARY:
                case TEXT:
                case ENUM:
                case SERIAL:
                case AVG:
                case BIT_AND:
                case BIT_OR:
                case BIT_XOR:
                case COUNT:
                case GROUP_CONCAT:
                case MAX:
                case MIN:
                case STD:
                case STDDEV:
                case STDDEV_POP:
                case STDDEV_SAMP:
                case SUM:
                case VAR_POP:
                case VAR_SAMP:
                case VARIANCE:
                case CURRENT_DATE:
                case CURRENT_TIME:
                case CURRENT_TIMESTAMP:
                case LOCALTIME:
                case CURDATE:
                case CURTIME:
                case DATE_ADD:
                case DATE_SUB:
                case EXTRACT:
                case LOCALTIMESTAMP:
                case NOW:
                case POSITION:
                case SUBSTR:
                case SUBSTRING:
                case SYSDATE:
                case TRIM:
                case UTC_DATE:
                case UTC_TIME:
                case UTC_TIMESTAMP:
                case ACCOUNT:
                case ACTION:
                case AFTER:
                case AGGREGATE:
                case ALGORITHM:
                case ANY:
                case AT:
                case AUTHORS:
                case AUTOCOMMIT:
                case AUTOEXTEND_SIZE:
                case AUTO_INCREMENT:
                case AVG_ROW_LENGTH:
                case BEGIN:
                case BINLOG:
                case BIT:
                case BLOCK:
                case BOOL:
                case BOOLEAN:
                case BTREE:
                case CACHE:
                case CASCADED:
                case CHAIN:
                case CHANGED:
                case CHANNEL:
                case CHECKSUM:
                case PAGE_CHECKSUM:
                case CIPHER:
                case CLASS_ORIGIN:
                case CLIENT:
                case CLOSE:
                case COALESCE:
                case CODE:
                case COLUMNS:
                case COLUMN_FORMAT:
                case COLUMN_NAME:
                case COMMENT:
                case COMMIT:
                case COMPACT:
                case COMPLETION:
                case COMPRESSED:
                case COMPRESSION:
                case CONCURRENT:
                case CONNECTION:
                case CONSISTENT:
                case CONSTRAINT_CATALOG:
                case CONSTRAINT_SCHEMA:
                case CONSTRAINT_NAME:
                case CONTAINS:
                case CONTEXT:
                case CONTRIBUTORS:
                case COPY:
                case CPU:
                case CURSOR_NAME:
                case DATA:
                case DATAFILE:
                case DEALLOCATE:
                case DEFAULT_AUTH:
                case DEFINER:
                case DELAY_KEY_WRITE:
                case DES_KEY_FILE:
                case DIRECTORY:
                case DISABLE:
                case DISCARD:
                case DISK:
                case DO:
                case DUMPFILE:
                case DUPLICATE:
                case DYNAMIC:
                case ENABLE:
                case ENCRYPTION:
                case END:
                case ENDS:
                case ENGINE:
                case ENGINES:
                case ERROR:
                case ERRORS:
                case ESCAPE:
                case EVEN:
                case EVENT:
                case EVENTS:
                case EVERY:
                case EXCHANGE:
                case EXCLUSIVE:
                case EXPIRE:
                case EXPORT:
                case EXTENDED:
                case EXTENT_SIZE:
                case FAST:
                case FAULTS:
                case FIELDS:
                case FILE_BLOCK_SIZE:
                case FILTER:
                case FIRST:
                case FIXED:
                case FLUSH:
                case FOLLOWS:
                case FOUND:
                case FULL:
                case FUNCTION:
                case GENERAL:
                case GLOBAL:
                case GRANTS:
                case GROUP_REPLICATION:
                case HANDLER:
                case HASH:
                case HELP:
                case HOST:
                case HOSTS:
                case IDENTIFIED:
                case IGNORE_SERVER_IDS:
                case IMPORT:
                case INDEXES:
                case INITIAL_SIZE:
                case INPLACE:
                case INSERT_METHOD:
                case INSTALL:
                case INSTANCE:
                case INVISIBLE:
                case INVOKER:
                case IO:
                case IO_THREAD:
                case IPC:
                case ISOLATION:
                case ISSUER:
                case JSON:
                case KEY_BLOCK_SIZE:
                case LANGUAGE:
                case LAST:
                case LEAVES:
                case LESS:
                case LEVEL:
                case LIST:
                case LOCAL:
                case LOGFILE:
                case LOGS:
                case MASTER:
                case MASTER_AUTO_POSITION:
                case MASTER_CONNECT_RETRY:
                case MASTER_DELAY:
                case MASTER_HEARTBEAT_PERIOD:
                case MASTER_HOST:
                case MASTER_LOG_FILE:
                case MASTER_LOG_POS:
                case MASTER_PASSWORD:
                case MASTER_PORT:
                case MASTER_RETRY_COUNT:
                case MASTER_SSL:
                case MASTER_SSL_CA:
                case MASTER_SSL_CAPATH:
                case MASTER_SSL_CERT:
                case MASTER_SSL_CIPHER:
                case MASTER_SSL_CRL:
                case MASTER_SSL_CRLPATH:
                case MASTER_SSL_KEY:
                case MASTER_TLS_VERSION:
                case MASTER_USER:
                case MAX_CONNECTIONS_PER_HOUR:
                case MAX_QUERIES_PER_HOUR:
                case MAX_ROWS:
                case MAX_SIZE:
                case MAX_UPDATES_PER_HOUR:
                case MAX_USER_CONNECTIONS:
                case MEDIUM:
                case MERGE:
                case MESSAGE_TEXT:
                case MID:
                case MIGRATE:
                case MIN_ROWS:
                case MODE:
                case MODIFY:
                case MUTEX:
                case MYSQL:
                case MYSQL_ERRNO:
                case NAME:
                case NAMES:
                case NCHAR:
                case NEVER:
                case NEXT:
                case NO:
                case NODEGROUP:
                case NONE:
                case OFFLINE:
                case OFFSET:
                case OJ:
                case OLD_PASSWORD:
                case ONE:
                case ONLINE:
                case ONLY:
                case OPEN:
                case OPTIMIZER_COSTS:
                case OPTIONS:
                case OWNER:
                case PACK_KEYS:
                case PAGE:
                case PARSER:
                case PARTIAL:
                case PARTITIONING:
                case PARTITIONS:
                case PASSWORD:
                case PHASE:
                case PLUGIN:
                case PLUGIN_DIR:
                case PLUGINS:
                case PORT:
                case PRECEDES:
                case PREPARE:
                case PRESERVE:
                case PREV:
                case PROCESSLIST:
                case PROFILE:
                case PROFILES:
                case PROXY:
                case QUERY:
                case QUICK:
                case REBUILD:
                case RECOVER:
                case REDO_BUFFER_SIZE:
                case REDUNDANT:
                case RELAY:
                case RELAY_LOG_FILE:
                case RELAY_LOG_POS:
                case RELAYLOG:
                case REMOVE:
                case REORGANIZE:
                case REPAIR:
                case REPLICATE_DO_DB:
                case REPLICATE_DO_TABLE:
                case REPLICATE_IGNORE_DB:
                case REPLICATE_IGNORE_TABLE:
                case REPLICATE_REWRITE_DB:
                case REPLICATE_WILD_DO_TABLE:
                case REPLICATE_WILD_IGNORE_TABLE:
                case REPLICATION:
                case RESET:
                case RESUME:
                case RETURNED_SQLSTATE:
                case RETURNS:
                case ROLLBACK:
                case ROLLUP:
                case ROTATE:
                case ROW:
                case ROWS:
                case ROW_FORMAT:
                case SAVEPOINT:
                case SCHEDULE:
                case SECURITY:
                case SERVER:
                case SESSION:
                case SHARE:
                case SHARED:
                case SIGNED:
                case SIMPLE:
                case SLAVE:
                case SLOW:
                case SNAPSHOT:
                case SOCKET:
                case SOME:
                case SONAME:
                case SOUNDS:
                case SOURCE:
                case SQL_AFTER_GTIDS:
                case SQL_AFTER_MTS_GAPS:
                case SQL_BEFORE_GTIDS:
                case SQL_BUFFER_RESULT:
                case SQL_CACHE:
                case SQL_NO_CACHE:
                case SQL_THREAD:
                case START:
                case STARTS:
                case STATS_AUTO_RECALC:
                case STATS_PERSISTENT:
                case STATS_SAMPLE_PAGES:
                case STATUS:
                case STOP:
                case STORAGE:
                case STRING:
                case SUBCLASS_ORIGIN:
                case SUBJECT:
                case SUBPARTITION:
                case SUBPARTITIONS:
                case SUSPEND:
                case SWAPS:
                case SWITCHES:
                case TABLE_NAME:
                case TABLESPACE:
                case TEMPORARY:
                case TEMPTABLE:
                case THAN:
                case TRADITIONAL:
                case TRANSACTION:
                case TRIGGERS:
                case TRUNCATE:
                case UNDEFINED:
                case UNDOFILE:
                case UNDO_BUFFER_SIZE:
                case UNINSTALL:
                case UNKNOWN:
                case UNTIL:
                case UPGRADE:
                case USER:
                case USE_FRM:
                case USER_RESOURCES:
                case VALIDATION:
                case VALUE:
                case VARIABLES:
                case VIEW:
                case VISIBLE:
                case WAIT:
                case WARNINGS:
                case WITHOUT:
                case WORK:
                case WRAPPER:
                case X509:
                case XA:
                case XML:
                case INTERNAL:
                case QUARTER:
                case MONTH:
                case DAY:
                case HOUR:
                case MINUTE:
                case WEEK:
                case SECOND:
                case MICROSECOND:
                case TABLES:
                case ROUTINE:
                case EXECUTE:
                case FILE:
                case PROCESS:
                case RELOAD:
                case SHUTDOWN:
                case SUPER:
                case PRIVILEGES:
                case SESSION_VARIABLES_ADMIN:
                case ARMSCII8:
                case ASCII:
                case BIG5:
                case CP1250:
                case CP1251:
                case CP1256:
                case CP1257:
                case CP850:
                case CP852:
                case CP866:
                case CP932:
                case DEC8:
                case EUCJPMS:
                case EUCKR:
                case GB2312:
                case GBK:
                case GEOSTD8:
                case GREEK:
                case HEBREW:
                case HP8:
                case KEYBCS2:
                case KOI8R:
                case KOI8U:
                case LATIN1:
                case LATIN2:
                case LATIN5:
                case LATIN7:
                case MACCE:
                case MACROMAN:
                case SJIS:
                case SWE7:
                case TIS620:
                case UCS2:
                case UJIS:
                case UTF16:
                case UTF16LE:
                case UTF32:
                case UTF8:
                case UTF8MB3:
                case UTF8MB4:
                case ARCHIVE:
                case BLACKHOLE:
                case CSV:
                case FEDERATED:
                case INNODB:
                case MEMORY:
                case MRG_MYISAM:
                case MYISAM:
                case NDB:
                case NDBCLUSTER:
                case PERFORMANCE_SCHEMA:
                case TOKUDB:
                case REPEATABLE:
                case COMMITTED:
                case UNCOMMITTED:
                case SERIALIZABLE:
                case GEOMETRYCOLLECTION:
                case LINESTRING:
                case MULTILINESTRING:
                case MULTIPOINT:
                case MULTIPOLYGON:
                case POINT:
                case POLYGON:
                case ABS:
                case ACOS:
                case ADDDATE:
                case ADDTIME:
                case AES_DECRYPT:
                case AES_ENCRYPT:
                case AREA:
                case ASBINARY:
                case ASIN:
                case ASTEXT:
                case ASWKB:
                case ASWKT:
                case ASYMMETRIC_DECRYPT:
                case ASYMMETRIC_DERIVE:
                case ASYMMETRIC_ENCRYPT:
                case ASYMMETRIC_SIGN:
                case ASYMMETRIC_VERIFY:
                case ATAN:
                case ATAN2:
                case BENCHMARK:
                case BIN:
                case BIT_COUNT:
                case BIT_LENGTH:
                case BUFFER:
                case CATALOG_NAME:
                case CEIL:
                case CEILING:
                case CENTROID:
                case CHARACTER_LENGTH:
                case CHARSET:
                case CHAR_LENGTH:
                case COERCIBILITY:
                case COLLATION:
                case COMPRESS:
                case CONCAT:
                case CONCAT_WS:
                case CONNECTION_ID:
                case CONV:
                case CONVERT_TZ:
                case COS:
                case COT:
                case CRC32:
                case CREATE_ASYMMETRIC_PRIV_KEY:
                case CREATE_ASYMMETRIC_PUB_KEY:
                case CREATE_DH_PARAMETERS:
                case CREATE_DIGEST:
                case CROSSES:
                case DATEDIFF:
                case DATE_FORMAT:
                case DAYNAME:
                case DAYOFMONTH:
                case DAYOFWEEK:
                case DAYOFYEAR:
                case DECODE:
                case DEGREES:
                case DES_DECRYPT:
                case DES_ENCRYPT:
                case DIMENSION:
                case DISJOINT:
                case ELT:
                case ENCODE:
                case ENCRYPT:
                case ENDPOINT:
                case ENVELOPE:
                case EQUALS:
                case EXP:
                case EXPORT_SET:
                case EXTERIORRING:
                case EXTRACTVALUE:
                case FIELD:
                case FIND_IN_SET:
                case FLOOR:
                case FORMAT:
                case FOUND_ROWS:
                case FROM_BASE64:
                case FROM_DAYS:
                case FROM_UNIXTIME:
                case GEOMCOLLFROMTEXT:
                case GEOMCOLLFROMWKB:
                case GEOMETRYCOLLECTIONFROMTEXT:
                case GEOMETRYCOLLECTIONFROMWKB:
                case GEOMETRYFROMTEXT:
                case GEOMETRYFROMWKB:
                case GEOMETRYN:
                case GEOMETRYTYPE:
                case GEOMFROMTEXT:
                case GEOMFROMWKB:
                case GET_FORMAT:
                case GET_LOCK:
                case GLENGTH:
                case GREATEST:
                case GTID_SUBSET:
                case GTID_SUBTRACT:
                case HEX:
                case IFNULL:
                case INET6_ATON:
                case INET6_NTOA:
                case INET_ATON:
                case INET_NTOA:
                case INSTR:
                case INTERIORRINGN:
                case INTERSECTS:
                case ISCLOSED:
                case ISEMPTY:
                case ISNULL:
                case ISSIMPLE:
                case IS_FREE_LOCK:
                case IS_IPV4:
                case IS_IPV4_COMPAT:
                case IS_IPV4_MAPPED:
                case IS_IPV6:
                case IS_USED_LOCK:
                case LAST_INSERT_ID:
                case LCASE:
                case LEAST:
                case LENGTH:
                case LINEFROMTEXT:
                case LINEFROMWKB:
                case LINESTRINGFROMTEXT:
                case LINESTRINGFROMWKB:
                case LN:
                case LOAD_FILE:
                case LOCATE:
                case LOG:
                case LOG10:
                case LOG2:
                case LOWER:
                case LPAD:
                case LTRIM:
                case MAKEDATE:
                case MAKETIME:
                case MAKE_SET:
                case MASTER_POS_WAIT:
                case MBRCONTAINS:
                case MBRDISJOINT:
                case MBREQUAL:
                case MBRINTERSECTS:
                case MBROVERLAPS:
                case MBRTOUCHES:
                case MBRWITHIN:
                case MD5:
                case MLINEFROMTEXT:
                case MLINEFROMWKB:
                case MONTHNAME:
                case MPOINTFROMTEXT:
                case MPOINTFROMWKB:
                case MPOLYFROMTEXT:
                case MPOLYFROMWKB:
                case MULTILINESTRINGFROMTEXT:
                case MULTILINESTRINGFROMWKB:
                case MULTIPOINTFROMTEXT:
                case MULTIPOINTFROMWKB:
                case MULTIPOLYGONFROMTEXT:
                case MULTIPOLYGONFROMWKB:
                case NAME_CONST:
                case NULLIF:
                case NUMGEOMETRIES:
                case NUMINTERIORRINGS:
                case NUMPOINTS:
                case OCT:
                case OCTET_LENGTH:
                case ORD:
                case OVERLAPS:
                case PERIOD_ADD:
                case PERIOD_DIFF:
                case PI:
                case POINTFROMTEXT:
                case POINTFROMWKB:
                case POINTN:
                case POLYFROMTEXT:
                case POLYFROMWKB:
                case POLYGONFROMTEXT:
                case POLYGONFROMWKB:
                case POW:
                case POWER:
                case QUOTE:
                case RADIANS:
                case RAND:
                case RANDOM_BYTES:
                case RELEASE_LOCK:
                case REVERSE:
                case ROUND:
                case ROW_COUNT:
                case RPAD:
                case RTRIM:
                case SEC_TO_TIME:
                case SESSION_USER:
                case SHA:
                case SHA1:
                case SHA2:
                case SCHEMA_NAME:
                case SIGN:
                case SIN:
                case SLEEP:
                case SOUNDEX:
                case SQL_THREAD_WAIT_AFTER_GTIDS:
                case SQRT:
                case SRID:
                case STARTPOINT:
                case STRCMP:
                case STR_TO_DATE:
                case ST_AREA:
                case ST_ASBINARY:
                case ST_ASTEXT:
                case ST_ASWKB:
                case ST_ASWKT:
                case ST_BUFFER:
                case ST_CENTROID:
                case ST_CONTAINS:
                case ST_CROSSES:
                case ST_DIFFERENCE:
                case ST_DIMENSION:
                case ST_DISJOINT:
                case ST_DISTANCE:
                case ST_ENDPOINT:
                case ST_ENVELOPE:
                case ST_EQUALS:
                case ST_EXTERIORRING:
                case ST_GEOMCOLLFROMTEXT:
                case ST_GEOMCOLLFROMTXT:
                case ST_GEOMCOLLFROMWKB:
                case ST_GEOMETRYCOLLECTIONFROMTEXT:
                case ST_GEOMETRYCOLLECTIONFROMWKB:
                case ST_GEOMETRYFROMTEXT:
                case ST_GEOMETRYFROMWKB:
                case ST_GEOMETRYN:
                case ST_GEOMETRYTYPE:
                case ST_GEOMFROMTEXT:
                case ST_GEOMFROMWKB:
                case ST_INTERIORRINGN:
                case ST_INTERSECTION:
                case ST_INTERSECTS:
                case ST_ISCLOSED:
                case ST_ISEMPTY:
                case ST_ISSIMPLE:
                case ST_LINEFROMTEXT:
                case ST_LINEFROMWKB:
                case ST_LINESTRINGFROMTEXT:
                case ST_LINESTRINGFROMWKB:
                case ST_NUMGEOMETRIES:
                case ST_NUMINTERIORRING:
                case ST_NUMINTERIORRINGS:
                case ST_NUMPOINTS:
                case ST_OVERLAPS:
                case ST_POINTFROMTEXT:
                case ST_POINTFROMWKB:
                case ST_POINTN:
                case ST_POLYFROMTEXT:
                case ST_POLYFROMWKB:
                case ST_POLYGONFROMTEXT:
                case ST_POLYGONFROMWKB:
                case ST_SRID:
                case ST_STARTPOINT:
                case ST_SYMDIFFERENCE:
                case ST_TOUCHES:
                case ST_UNION:
                case ST_WITHIN:
                case ST_X:
                case ST_Y:
                case SUBDATE:
                case SUBSTRING_INDEX:
                case SUBTIME:
                case SYSTEM_USER:
                case TAN:
                case TIMEDIFF:
                case TIMESTAMPADD:
                case TIMESTAMPDIFF:
                case TIME_FORMAT:
                case TIME_TO_SEC:
                case TOUCHES:
                case TO_BASE64:
                case TO_DAYS:
                case TO_SECONDS:
                case UCASE:
                case UNCOMPRESS:
                case UNCOMPRESSED_LENGTH:
                case UNHEX:
                case UNIX_TIMESTAMP:
                case UPDATEXML:
                case UPPER:
                case UUID:
                case UUID_SHORT:
                case VALIDATE_PASSWORD_STRENGTH:
                case VERSION:
                case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
                case WEEKDAY:
                case WEEKOFYEAR:
                case WEIGHT_STRING:
                case WITHIN:
                case YEARWEEK:
                case Y_FUNCTION:
                case X_FUNCTION:
                case PLUS:
                case MINUS:
                case EXCLAMATION_SYMBOL:
                case BIT_NOT_OP:
                case LR_BRACKET:
                case ZERO_DECIMAL:
                case ONE_DECIMAL:
                case TWO_DECIMAL:
                case CHARSET_REVERSE_QOUTE_STRING:
                case START_NATIONAL_STRING_LITERAL:
                case STRING_LITERAL:
                case DECIMAL_LITERAL:
                case HEXADECIMAL_LITERAL:
                case REAL_LITERAL:
                case NULL_SPEC_LITERAL:
                case BIT_STRING:
                case STRING_CHARSET_NAME:
                case ID:
                case REVERSE_QUOTE_ID:
                case LOCAL_ID:
                case GLOBAL_ID:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 5765; expression(0);
                    }
                    break;
                case DEFAULT:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 5766; Match(DEFAULT);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class IfExistsContext : ParserRuleContext
    {
        public ITerminalNode IF() { return GetToken(MySqlParser.IF, 0); }
        public ITerminalNode EXISTS() { return GetToken(MySqlParser.EXISTS, 0); }
        public IfExistsContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_ifExists; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterIfExists(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitIfExists(this);
        }
    }

    [RuleVersion(0)]
    public IfExistsContext ifExists()
    {
        IfExistsContext _localctx = new IfExistsContext(Context, State);
        EnterRule(_localctx, 576, RULE_ifExists);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 5769; Match(IF);
                State = 5770; Match(EXISTS);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class IfNotExistsContext : ParserRuleContext
    {
        public ITerminalNode IF() { return GetToken(MySqlParser.IF, 0); }
        public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
        public ITerminalNode EXISTS() { return GetToken(MySqlParser.EXISTS, 0); }
        public IfNotExistsContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_ifNotExists; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterIfNotExists(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitIfNotExists(this);
        }
    }

    [RuleVersion(0)]
    public IfNotExistsContext ifNotExists()
    {
        IfNotExistsContext _localctx = new IfNotExistsContext(Context, State);
        EnterRule(_localctx, 578, RULE_ifNotExists);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 5772; Match(IF);
                State = 5773; Match(NOT);
                State = 5774; Match(EXISTS);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class FunctionCallContext : ParserRuleContext
    {
        public FunctionCallContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_functionCall; } }

        public FunctionCallContext() { }
        public virtual void CopyFrom(FunctionCallContext context)
        {
            base.CopyFrom(context);
        }
    }
    public partial class SpecificFunctionCallContext : FunctionCallContext
    {
        public SpecificFunctionContext specificFunction()
        {
            return GetRuleContext<SpecificFunctionContext>(0);
        }
        public SpecificFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterSpecificFunctionCall(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitSpecificFunctionCall(this);
        }
    }
    public partial class PasswordFunctionCallContext : FunctionCallContext
    {
        public PasswordFunctionClauseContext passwordFunctionClause()
        {
            return GetRuleContext<PasswordFunctionClauseContext>(0);
        }
        public PasswordFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterPasswordFunctionCall(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitPasswordFunctionCall(this);
        }
    }
    public partial class UdfFunctionCallContext : FunctionCallContext
    {
        public FullIdContext fullId()
        {
            return GetRuleContext<FullIdContext>(0);
        }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public FunctionArgsContext functionArgs()
        {
            return GetRuleContext<FunctionArgsContext>(0);
        }
        public UdfFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterUdfFunctionCall(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitUdfFunctionCall(this);
        }
    }
    public partial class AggregateFunctionCallContext : FunctionCallContext
    {
        public AggregateWindowedFunctionContext aggregateWindowedFunction()
        {
            return GetRuleContext<AggregateWindowedFunctionContext>(0);
        }
        public AggregateFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAggregateFunctionCall(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAggregateFunctionCall(this);
        }
    }
    public partial class ScalarFunctionCallContext : FunctionCallContext
    {
        public ScalarFunctionNameContext scalarFunctionName()
        {
            return GetRuleContext<ScalarFunctionNameContext>(0);
        }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public FunctionArgsContext functionArgs()
        {
            return GetRuleContext<FunctionArgsContext>(0);
        }
        public ScalarFunctionCallContext(FunctionCallContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterScalarFunctionCall(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitScalarFunctionCall(this);
        }
    }

    [RuleVersion(0)]
    public FunctionCallContext functionCall()
    {
        FunctionCallContext _localctx = new FunctionCallContext(Context, State);
        EnterRule(_localctx, 580, RULE_functionCall);
        int _la;
        try
        {
            State = 5793;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 857, Context))
            {
                case 1:
                    _localctx = new SpecificFunctionCallContext(_localctx);
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 5776; specificFunction();
                    }
                    break;
                case 2:
                    _localctx = new AggregateFunctionCallContext(_localctx);
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 5777; aggregateWindowedFunction();
                    }
                    break;
                case 3:
                    _localctx = new ScalarFunctionCallContext(_localctx);
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 5778; scalarFunctionName();
                        State = 5779; Match(LR_BRACKET);
                        State = 5781;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CASE) | (1L << CAST) | (1L << CONVERT) | (1L << CURRENT) | (1L << CURRENT_USER) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXISTS) | (1L << FALSE))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (IF - 69)) | (1L << (INSERT - 69)) | (1L << (INTERVAL - 69)) | (1L << (LEFT - 69)) | (1L << (NOT - 69)) | (1L << (NULL_LITERAL - 69)) | (1L << (NUMBER - 69)) | (1L << (REPLACE - 69)))) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (RIGHT - 133)) | (1L << (STACKED - 133)) | (1L << (TRUE - 133)) | (1L << (VALUES - 133)) | (1L << (DATE - 133)) | (1L << (TIME - 133)) | (1L << (TIMESTAMP - 133)) | (1L << (DATETIME - 133)) | (1L << (YEAR - 133)) | (1L << (CHAR - 133)))) != 0) || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (BINARY - 200)) | (1L << (TEXT - 200)) | (1L << (ENUM - 200)) | (1L << (SERIAL - 200)) | (1L << (AVG - 200)) | (1L << (BIT_AND - 200)) | (1L << (BIT_OR - 200)) | (1L << (BIT_XOR - 200)) | (1L << (COUNT - 200)) | (1L << (GROUP_CONCAT - 200)) | (1L << (MAX - 200)) | (1L << (MIN - 200)) | (1L << (STD - 200)) | (1L << (STDDEV - 200)) | (1L << (STDDEV_POP - 200)) | (1L << (STDDEV_SAMP - 200)) | (1L << (SUM - 200)) | (1L << (VAR_POP - 200)) | (1L << (VAR_SAMP - 200)) | (1L << (VARIANCE - 200)) | (1L << (CURRENT_DATE - 200)) | (1L << (CURRENT_TIME - 200)) | (1L << (CURRENT_TIMESTAMP - 200)) | (1L << (LOCALTIME - 200)) | (1L << (CURDATE - 200)) | (1L << (CURTIME - 200)) | (1L << (DATE_ADD - 200)) | (1L << (DATE_SUB - 200)) | (1L << (EXTRACT - 200)) | (1L << (LOCALTIMESTAMP - 200)) | (1L << (NOW - 200)) | (1L << (POSITION - 200)) | (1L << (SUBSTR - 200)) | (1L << (SUBSTRING - 200)) | (1L << (SYSDATE - 200)) | (1L << (TRIM - 200)) | (1L << (UTC_DATE - 200)) | (1L << (UTC_TIME - 200)) | (1L << (UTC_TIMESTAMP - 200)) | (1L << (ACCOUNT - 200)) | (1L << (ACTION - 200)) | (1L << (AFTER - 200)) | (1L << (AGGREGATE - 200)) | (1L << (ALGORITHM - 200)))) != 0) || ((((_la - 264)) & ~0x3f) == 0 && ((1L << (_la - 264)) & ((1L << (ANY - 264)) | (1L << (AT - 264)) | (1L << (AUTHORS - 264)) | (1L << (AUTOCOMMIT - 264)) | (1L << (AUTOEXTEND_SIZE - 264)) | (1L << (AUTO_INCREMENT - 264)) | (1L << (AVG_ROW_LENGTH - 264)) | (1L << (BEGIN - 264)) | (1L << (BINLOG - 264)) | (1L << (BIT - 264)) | (1L << (BLOCK - 264)) | (1L << (BOOL - 264)) | (1L << (BOOLEAN - 264)) | (1L << (BTREE - 264)) | (1L << (CACHE - 264)) | (1L << (CASCADED - 264)) | (1L << (CHAIN - 264)) | (1L << (CHANGED - 264)) | (1L << (CHANNEL - 264)) | (1L << (CHECKSUM - 264)) | (1L << (PAGE_CHECKSUM - 264)) | (1L << (CIPHER - 264)) | (1L << (CLASS_ORIGIN - 264)) | (1L << (CLIENT - 264)) | (1L << (CLOSE - 264)) | (1L << (COALESCE - 264)) | (1L << (CODE - 264)) | (1L << (COLUMNS - 264)) | (1L << (COLUMN_FORMAT - 264)) | (1L << (COLUMN_NAME - 264)) | (1L << (COMMENT - 264)) | (1L << (COMMIT - 264)) | (1L << (COMPACT - 264)) | (1L << (COMPLETION - 264)) | (1L << (COMPRESSED - 264)) | (1L << (COMPRESSION - 264)) | (1L << (CONCURRENT - 264)) | (1L << (CONNECTION - 264)) | (1L << (CONSISTENT - 264)) | (1L << (CONSTRAINT_CATALOG - 264)) | (1L << (CONSTRAINT_SCHEMA - 264)) | (1L << (CONSTRAINT_NAME - 264)) | (1L << (CONTAINS - 264)) | (1L << (CONTEXT - 264)) | (1L << (CONTRIBUTORS - 264)) | (1L << (COPY - 264)) | (1L << (CPU - 264)) | (1L << (CURSOR_NAME - 264)) | (1L << (DATA - 264)) | (1L << (DATAFILE - 264)) | (1L << (DEALLOCATE - 264)) | (1L << (DEFAULT_AUTH - 264)) | (1L << (DEFINER - 264)) | (1L << (DELAY_KEY_WRITE - 264)) | (1L << (DES_KEY_FILE - 264)) | (1L << (DIRECTORY - 264)) | (1L << (DISABLE - 264)) | (1L << (DISCARD - 264)) | (1L << (DISK - 264)) | (1L << (DO - 264)) | (1L << (DUMPFILE - 264)) | (1L << (DUPLICATE - 264)) | (1L << (DYNAMIC - 264)) | (1L << (ENABLE - 264)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (ENCRYPTION - 328)) | (1L << (END - 328)) | (1L << (ENDS - 328)) | (1L << (ENGINE - 328)) | (1L << (ENGINES - 328)) | (1L << (ERROR - 328)) | (1L << (ERRORS - 328)) | (1L << (ESCAPE - 328)) | (1L << (EVEN - 328)) | (1L << (EVENT - 328)) | (1L << (EVENTS - 328)) | (1L << (EVERY - 328)) | (1L << (EXCHANGE - 328)) | (1L << (EXCLUSIVE - 328)) | (1L << (EXPIRE - 328)) | (1L << (EXPORT - 328)) | (1L << (EXTENDED - 328)) | (1L << (EXTENT_SIZE - 328)) | (1L << (FAST - 328)) | (1L << (FAULTS - 328)) | (1L << (FIELDS - 328)) | (1L << (FILE_BLOCK_SIZE - 328)) | (1L << (FILTER - 328)) | (1L << (FIRST - 328)) | (1L << (FIXED - 328)) | (1L << (FLUSH - 328)) | (1L << (FOLLOWS - 328)) | (1L << (FOUND - 328)) | (1L << (FULL - 328)) | (1L << (FUNCTION - 328)) | (1L << (GENERAL - 328)) | (1L << (GLOBAL - 328)) | (1L << (GRANTS - 328)) | (1L << (GROUP_REPLICATION - 328)) | (1L << (HANDLER - 328)) | (1L << (HASH - 328)) | (1L << (HELP - 328)) | (1L << (HOST - 328)) | (1L << (HOSTS - 328)) | (1L << (IDENTIFIED - 328)) | (1L << (IGNORE_SERVER_IDS - 328)) | (1L << (IMPORT - 328)) | (1L << (INDEXES - 328)) | (1L << (INITIAL_SIZE - 328)) | (1L << (INPLACE - 328)) | (1L << (INSERT_METHOD - 328)) | (1L << (INSTALL - 328)) | (1L << (INSTANCE - 328)) | (1L << (INVISIBLE - 328)) | (1L << (INVOKER - 328)) | (1L << (IO - 328)) | (1L << (IO_THREAD - 328)) | (1L << (IPC - 328)) | (1L << (ISOLATION - 328)) | (1L << (ISSUER - 328)) | (1L << (JSON - 328)) | (1L << (KEY_BLOCK_SIZE - 328)) | (1L << (LANGUAGE - 328)) | (1L << (LAST - 328)) | (1L << (LEAVES - 328)) | (1L << (LESS - 328)) | (1L << (LEVEL - 328)) | (1L << (LIST - 328)) | (1L << (LOCAL - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (LOGFILE - 392)) | (1L << (LOGS - 392)) | (1L << (MASTER - 392)) | (1L << (MASTER_AUTO_POSITION - 392)) | (1L << (MASTER_CONNECT_RETRY - 392)) | (1L << (MASTER_DELAY - 392)) | (1L << (MASTER_HEARTBEAT_PERIOD - 392)) | (1L << (MASTER_HOST - 392)) | (1L << (MASTER_LOG_FILE - 392)) | (1L << (MASTER_LOG_POS - 392)) | (1L << (MASTER_PASSWORD - 392)) | (1L << (MASTER_PORT - 392)) | (1L << (MASTER_RETRY_COUNT - 392)) | (1L << (MASTER_SSL - 392)) | (1L << (MASTER_SSL_CA - 392)) | (1L << (MASTER_SSL_CAPATH - 392)) | (1L << (MASTER_SSL_CERT - 392)) | (1L << (MASTER_SSL_CIPHER - 392)) | (1L << (MASTER_SSL_CRL - 392)) | (1L << (MASTER_SSL_CRLPATH - 392)) | (1L << (MASTER_SSL_KEY - 392)) | (1L << (MASTER_TLS_VERSION - 392)) | (1L << (MASTER_USER - 392)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 392)) | (1L << (MAX_QUERIES_PER_HOUR - 392)) | (1L << (MAX_ROWS - 392)) | (1L << (MAX_SIZE - 392)) | (1L << (MAX_UPDATES_PER_HOUR - 392)) | (1L << (MAX_USER_CONNECTIONS - 392)) | (1L << (MEDIUM - 392)) | (1L << (MERGE - 392)) | (1L << (MESSAGE_TEXT - 392)) | (1L << (MID - 392)) | (1L << (MIGRATE - 392)) | (1L << (MIN_ROWS - 392)) | (1L << (MODE - 392)) | (1L << (MODIFY - 392)) | (1L << (MUTEX - 392)) | (1L << (MYSQL - 392)) | (1L << (MYSQL_ERRNO - 392)) | (1L << (NAME - 392)) | (1L << (NAMES - 392)) | (1L << (NCHAR - 392)) | (1L << (NEVER - 392)) | (1L << (NEXT - 392)) | (1L << (NO - 392)) | (1L << (NODEGROUP - 392)) | (1L << (NONE - 392)) | (1L << (OFFLINE - 392)) | (1L << (OFFSET - 392)) | (1L << (OJ - 392)) | (1L << (OLD_PASSWORD - 392)) | (1L << (ONE - 392)) | (1L << (ONLINE - 392)) | (1L << (ONLY - 392)) | (1L << (OPEN - 392)) | (1L << (OPTIMIZER_COSTS - 392)) | (1L << (OPTIONS - 392)) | (1L << (OWNER - 392)) | (1L << (PACK_KEYS - 392)) | (1L << (PAGE - 392)) | (1L << (PARSER - 392)) | (1L << (PARTIAL - 392)) | (1L << (PARTITIONING - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (PARTITIONS - 456)) | (1L << (PASSWORD - 456)) | (1L << (PHASE - 456)) | (1L << (PLUGIN - 456)) | (1L << (PLUGIN_DIR - 456)) | (1L << (PLUGINS - 456)) | (1L << (PORT - 456)) | (1L << (PRECEDES - 456)) | (1L << (PREPARE - 456)) | (1L << (PRESERVE - 456)) | (1L << (PREV - 456)) | (1L << (PROCESSLIST - 456)) | (1L << (PROFILE - 456)) | (1L << (PROFILES - 456)) | (1L << (PROXY - 456)) | (1L << (QUERY - 456)) | (1L << (QUICK - 456)) | (1L << (REBUILD - 456)) | (1L << (RECOVER - 456)) | (1L << (REDO_BUFFER_SIZE - 456)) | (1L << (REDUNDANT - 456)) | (1L << (RELAY - 456)) | (1L << (RELAY_LOG_FILE - 456)) | (1L << (RELAY_LOG_POS - 456)) | (1L << (RELAYLOG - 456)) | (1L << (REMOVE - 456)) | (1L << (REORGANIZE - 456)) | (1L << (REPAIR - 456)) | (1L << (REPLICATE_DO_DB - 456)) | (1L << (REPLICATE_DO_TABLE - 456)) | (1L << (REPLICATE_IGNORE_DB - 456)) | (1L << (REPLICATE_IGNORE_TABLE - 456)) | (1L << (REPLICATE_REWRITE_DB - 456)) | (1L << (REPLICATE_WILD_DO_TABLE - 456)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 456)) | (1L << (REPLICATION - 456)) | (1L << (RESET - 456)) | (1L << (RESUME - 456)) | (1L << (RETURNED_SQLSTATE - 456)) | (1L << (RETURNS - 456)) | (1L << (ROLLBACK - 456)) | (1L << (ROLLUP - 456)) | (1L << (ROTATE - 456)) | (1L << (ROW - 456)) | (1L << (ROWS - 456)) | (1L << (ROW_FORMAT - 456)) | (1L << (SAVEPOINT - 456)) | (1L << (SCHEDULE - 456)) | (1L << (SECURITY - 456)) | (1L << (SERVER - 456)) | (1L << (SESSION - 456)) | (1L << (SHARE - 456)) | (1L << (SHARED - 456)) | (1L << (SIGNED - 456)) | (1L << (SIMPLE - 456)) | (1L << (SLAVE - 456)) | (1L << (SLOW - 456)) | (1L << (SNAPSHOT - 456)) | (1L << (SOCKET - 456)) | (1L << (SOME - 456)) | (1L << (SONAME - 456)) | (1L << (SOUNDS - 456)) | (1L << (SOURCE - 456)) | (1L << (SQL_AFTER_GTIDS - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (SQL_AFTER_MTS_GAPS - 520)) | (1L << (SQL_BEFORE_GTIDS - 520)) | (1L << (SQL_BUFFER_RESULT - 520)) | (1L << (SQL_CACHE - 520)) | (1L << (SQL_NO_CACHE - 520)) | (1L << (SQL_THREAD - 520)) | (1L << (START - 520)) | (1L << (STARTS - 520)) | (1L << (STATS_AUTO_RECALC - 520)) | (1L << (STATS_PERSISTENT - 520)) | (1L << (STATS_SAMPLE_PAGES - 520)) | (1L << (STATUS - 520)) | (1L << (STOP - 520)) | (1L << (STORAGE - 520)) | (1L << (STRING - 520)) | (1L << (SUBCLASS_ORIGIN - 520)) | (1L << (SUBJECT - 520)) | (1L << (SUBPARTITION - 520)) | (1L << (SUBPARTITIONS - 520)) | (1L << (SUSPEND - 520)) | (1L << (SWAPS - 520)) | (1L << (SWITCHES - 520)) | (1L << (TABLE_NAME - 520)) | (1L << (TABLESPACE - 520)) | (1L << (TEMPORARY - 520)) | (1L << (TEMPTABLE - 520)) | (1L << (THAN - 520)) | (1L << (TRADITIONAL - 520)) | (1L << (TRANSACTION - 520)) | (1L << (TRIGGERS - 520)) | (1L << (TRUNCATE - 520)) | (1L << (UNDEFINED - 520)) | (1L << (UNDOFILE - 520)) | (1L << (UNDO_BUFFER_SIZE - 520)) | (1L << (UNINSTALL - 520)) | (1L << (UNKNOWN - 520)) | (1L << (UNTIL - 520)) | (1L << (UPGRADE - 520)) | (1L << (USER - 520)) | (1L << (USE_FRM - 520)) | (1L << (USER_RESOURCES - 520)) | (1L << (VALIDATION - 520)) | (1L << (VALUE - 520)) | (1L << (VARIABLES - 520)) | (1L << (VIEW - 520)) | (1L << (VISIBLE - 520)) | (1L << (WAIT - 520)) | (1L << (WARNINGS - 520)) | (1L << (WITHOUT - 520)) | (1L << (WORK - 520)) | (1L << (WRAPPER - 520)) | (1L << (X509 - 520)) | (1L << (XA - 520)) | (1L << (XML - 520)) | (1L << (INTERNAL - 520)) | (1L << (QUARTER - 520)) | (1L << (MONTH - 520)) | (1L << (DAY - 520)))) != 0) || ((((_la - 584)) & ~0x3f) == 0 && ((1L << (_la - 584)) & ((1L << (HOUR - 584)) | (1L << (MINUTE - 584)) | (1L << (WEEK - 584)) | (1L << (SECOND - 584)) | (1L << (MICROSECOND - 584)) | (1L << (TABLES - 584)) | (1L << (ROUTINE - 584)) | (1L << (EXECUTE - 584)) | (1L << (FILE - 584)) | (1L << (PROCESS - 584)) | (1L << (RELOAD - 584)) | (1L << (SHUTDOWN - 584)) | (1L << (SUPER - 584)) | (1L << (PRIVILEGES - 584)) | (1L << (SESSION_VARIABLES_ADMIN - 584)) | (1L << (ARMSCII8 - 584)) | (1L << (ASCII - 584)) | (1L << (BIG5 - 584)) | (1L << (CP1250 - 584)) | (1L << (CP1251 - 584)) | (1L << (CP1256 - 584)) | (1L << (CP1257 - 584)) | (1L << (CP850 - 584)) | (1L << (CP852 - 584)) | (1L << (CP866 - 584)) | (1L << (CP932 - 584)) | (1L << (DEC8 - 584)) | (1L << (EUCJPMS - 584)) | (1L << (EUCKR - 584)) | (1L << (GB2312 - 584)) | (1L << (GBK - 584)) | (1L << (GEOSTD8 - 584)) | (1L << (GREEK - 584)) | (1L << (HEBREW - 584)) | (1L << (HP8 - 584)) | (1L << (KEYBCS2 - 584)) | (1L << (KOI8R - 584)) | (1L << (KOI8U - 584)) | (1L << (LATIN1 - 584)) | (1L << (LATIN2 - 584)) | (1L << (LATIN5 - 584)) | (1L << (LATIN7 - 584)) | (1L << (MACCE - 584)) | (1L << (MACROMAN - 584)) | (1L << (SJIS - 584)) | (1L << (SWE7 - 584)) | (1L << (TIS620 - 584)) | (1L << (UCS2 - 584)) | (1L << (UJIS - 584)) | (1L << (UTF16 - 584)) | (1L << (UTF16LE - 584)) | (1L << (UTF32 - 584)) | (1L << (UTF8 - 584)) | (1L << (UTF8MB3 - 584)) | (1L << (UTF8MB4 - 584)) | (1L << (ARCHIVE - 584)) | (1L << (BLACKHOLE - 584)) | (1L << (CSV - 584)) | (1L << (FEDERATED - 584)) | (1L << (INNODB - 584)) | (1L << (MEMORY - 584)) | (1L << (MRG_MYISAM - 584)) | (1L << (MYISAM - 584)) | (1L << (NDB - 584)))) != 0) || ((((_la - 648)) & ~0x3f) == 0 && ((1L << (_la - 648)) & ((1L << (NDBCLUSTER - 648)) | (1L << (PERFORMANCE_SCHEMA - 648)) | (1L << (TOKUDB - 648)) | (1L << (REPEATABLE - 648)) | (1L << (COMMITTED - 648)) | (1L << (UNCOMMITTED - 648)) | (1L << (SERIALIZABLE - 648)) | (1L << (GEOMETRYCOLLECTION - 648)) | (1L << (LINESTRING - 648)) | (1L << (MULTILINESTRING - 648)) | (1L << (MULTIPOINT - 648)) | (1L << (MULTIPOLYGON - 648)) | (1L << (POINT - 648)) | (1L << (POLYGON - 648)) | (1L << (ABS - 648)) | (1L << (ACOS - 648)) | (1L << (ADDDATE - 648)) | (1L << (ADDTIME - 648)) | (1L << (AES_DECRYPT - 648)) | (1L << (AES_ENCRYPT - 648)) | (1L << (AREA - 648)) | (1L << (ASBINARY - 648)) | (1L << (ASIN - 648)) | (1L << (ASTEXT - 648)) | (1L << (ASWKB - 648)) | (1L << (ASWKT - 648)) | (1L << (ASYMMETRIC_DECRYPT - 648)) | (1L << (ASYMMETRIC_DERIVE - 648)) | (1L << (ASYMMETRIC_ENCRYPT - 648)) | (1L << (ASYMMETRIC_SIGN - 648)) | (1L << (ASYMMETRIC_VERIFY - 648)) | (1L << (ATAN - 648)) | (1L << (ATAN2 - 648)) | (1L << (BENCHMARK - 648)) | (1L << (BIN - 648)) | (1L << (BIT_COUNT - 648)) | (1L << (BIT_LENGTH - 648)) | (1L << (BUFFER - 648)) | (1L << (CATALOG_NAME - 648)) | (1L << (CEIL - 648)) | (1L << (CEILING - 648)) | (1L << (CENTROID - 648)) | (1L << (CHARACTER_LENGTH - 648)) | (1L << (CHARSET - 648)) | (1L << (CHAR_LENGTH - 648)) | (1L << (COERCIBILITY - 648)) | (1L << (COLLATION - 648)) | (1L << (COMPRESS - 648)) | (1L << (CONCAT - 648)) | (1L << (CONCAT_WS - 648)) | (1L << (CONNECTION_ID - 648)) | (1L << (CONV - 648)) | (1L << (CONVERT_TZ - 648)) | (1L << (COS - 648)) | (1L << (COT - 648)) | (1L << (CRC32 - 648)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 648)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 648)) | (1L << (CREATE_DH_PARAMETERS - 648)) | (1L << (CREATE_DIGEST - 648)) | (1L << (CROSSES - 648)) | (1L << (DATEDIFF - 648)))) != 0) || ((((_la - 712)) & ~0x3f) == 0 && ((1L << (_la - 712)) & ((1L << (DATE_FORMAT - 712)) | (1L << (DAYNAME - 712)) | (1L << (DAYOFMONTH - 712)) | (1L << (DAYOFWEEK - 712)) | (1L << (DAYOFYEAR - 712)) | (1L << (DECODE - 712)) | (1L << (DEGREES - 712)) | (1L << (DES_DECRYPT - 712)) | (1L << (DES_ENCRYPT - 712)) | (1L << (DIMENSION - 712)) | (1L << (DISJOINT - 712)) | (1L << (ELT - 712)) | (1L << (ENCODE - 712)) | (1L << (ENCRYPT - 712)) | (1L << (ENDPOINT - 712)) | (1L << (ENVELOPE - 712)) | (1L << (EQUALS - 712)) | (1L << (EXP - 712)) | (1L << (EXPORT_SET - 712)) | (1L << (EXTERIORRING - 712)) | (1L << (EXTRACTVALUE - 712)) | (1L << (FIELD - 712)) | (1L << (FIND_IN_SET - 712)) | (1L << (FLOOR - 712)) | (1L << (FORMAT - 712)) | (1L << (FOUND_ROWS - 712)) | (1L << (FROM_BASE64 - 712)) | (1L << (FROM_DAYS - 712)) | (1L << (FROM_UNIXTIME - 712)) | (1L << (GEOMCOLLFROMTEXT - 712)) | (1L << (GEOMCOLLFROMWKB - 712)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 712)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 712)) | (1L << (GEOMETRYFROMTEXT - 712)) | (1L << (GEOMETRYFROMWKB - 712)) | (1L << (GEOMETRYN - 712)) | (1L << (GEOMETRYTYPE - 712)) | (1L << (GEOMFROMTEXT - 712)) | (1L << (GEOMFROMWKB - 712)) | (1L << (GET_FORMAT - 712)) | (1L << (GET_LOCK - 712)) | (1L << (GLENGTH - 712)) | (1L << (GREATEST - 712)) | (1L << (GTID_SUBSET - 712)) | (1L << (GTID_SUBTRACT - 712)) | (1L << (HEX - 712)) | (1L << (IFNULL - 712)) | (1L << (INET6_ATON - 712)) | (1L << (INET6_NTOA - 712)) | (1L << (INET_ATON - 712)) | (1L << (INET_NTOA - 712)) | (1L << (INSTR - 712)) | (1L << (INTERIORRINGN - 712)) | (1L << (INTERSECTS - 712)) | (1L << (ISCLOSED - 712)) | (1L << (ISEMPTY - 712)) | (1L << (ISNULL - 712)) | (1L << (ISSIMPLE - 712)) | (1L << (IS_FREE_LOCK - 712)) | (1L << (IS_IPV4 - 712)) | (1L << (IS_IPV4_COMPAT - 712)) | (1L << (IS_IPV4_MAPPED - 712)) | (1L << (IS_IPV6 - 712)) | (1L << (IS_USED_LOCK - 712)))) != 0) || ((((_la - 776)) & ~0x3f) == 0 && ((1L << (_la - 776)) & ((1L << (LAST_INSERT_ID - 776)) | (1L << (LCASE - 776)) | (1L << (LEAST - 776)) | (1L << (LENGTH - 776)) | (1L << (LINEFROMTEXT - 776)) | (1L << (LINEFROMWKB - 776)) | (1L << (LINESTRINGFROMTEXT - 776)) | (1L << (LINESTRINGFROMWKB - 776)) | (1L << (LN - 776)) | (1L << (LOAD_FILE - 776)) | (1L << (LOCATE - 776)) | (1L << (LOG - 776)) | (1L << (LOG10 - 776)) | (1L << (LOG2 - 776)) | (1L << (LOWER - 776)) | (1L << (LPAD - 776)) | (1L << (LTRIM - 776)) | (1L << (MAKEDATE - 776)) | (1L << (MAKETIME - 776)) | (1L << (MAKE_SET - 776)) | (1L << (MASTER_POS_WAIT - 776)) | (1L << (MBRCONTAINS - 776)) | (1L << (MBRDISJOINT - 776)) | (1L << (MBREQUAL - 776)) | (1L << (MBRINTERSECTS - 776)) | (1L << (MBROVERLAPS - 776)) | (1L << (MBRTOUCHES - 776)) | (1L << (MBRWITHIN - 776)) | (1L << (MD5 - 776)) | (1L << (MLINEFROMTEXT - 776)) | (1L << (MLINEFROMWKB - 776)) | (1L << (MONTHNAME - 776)) | (1L << (MPOINTFROMTEXT - 776)) | (1L << (MPOINTFROMWKB - 776)) | (1L << (MPOLYFROMTEXT - 776)) | (1L << (MPOLYFROMWKB - 776)) | (1L << (MULTILINESTRINGFROMTEXT - 776)) | (1L << (MULTILINESTRINGFROMWKB - 776)) | (1L << (MULTIPOINTFROMTEXT - 776)) | (1L << (MULTIPOINTFROMWKB - 776)) | (1L << (MULTIPOLYGONFROMTEXT - 776)) | (1L << (MULTIPOLYGONFROMWKB - 776)) | (1L << (NAME_CONST - 776)) | (1L << (NULLIF - 776)) | (1L << (NUMGEOMETRIES - 776)) | (1L << (NUMINTERIORRINGS - 776)) | (1L << (NUMPOINTS - 776)) | (1L << (OCT - 776)) | (1L << (OCTET_LENGTH - 776)) | (1L << (ORD - 776)) | (1L << (OVERLAPS - 776)) | (1L << (PERIOD_ADD - 776)) | (1L << (PERIOD_DIFF - 776)) | (1L << (PI - 776)) | (1L << (POINTFROMTEXT - 776)) | (1L << (POINTFROMWKB - 776)) | (1L << (POINTN - 776)) | (1L << (POLYFROMTEXT - 776)) | (1L << (POLYFROMWKB - 776)) | (1L << (POLYGONFROMTEXT - 776)) | (1L << (POLYGONFROMWKB - 776)) | (1L << (POW - 776)) | (1L << (POWER - 776)) | (1L << (QUOTE - 776)))) != 0) || ((((_la - 840)) & ~0x3f) == 0 && ((1L << (_la - 840)) & ((1L << (RADIANS - 840)) | (1L << (RAND - 840)) | (1L << (RANDOM_BYTES - 840)) | (1L << (RELEASE_LOCK - 840)) | (1L << (REVERSE - 840)) | (1L << (ROUND - 840)) | (1L << (ROW_COUNT - 840)) | (1L << (RPAD - 840)) | (1L << (RTRIM - 840)) | (1L << (SEC_TO_TIME - 840)) | (1L << (SESSION_USER - 840)) | (1L << (SHA - 840)) | (1L << (SHA1 - 840)) | (1L << (SHA2 - 840)) | (1L << (SCHEMA_NAME - 840)) | (1L << (SIGN - 840)) | (1L << (SIN - 840)) | (1L << (SLEEP - 840)) | (1L << (SOUNDEX - 840)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 840)) | (1L << (SQRT - 840)) | (1L << (SRID - 840)) | (1L << (STARTPOINT - 840)) | (1L << (STRCMP - 840)) | (1L << (STR_TO_DATE - 840)) | (1L << (ST_AREA - 840)) | (1L << (ST_ASBINARY - 840)) | (1L << (ST_ASTEXT - 840)) | (1L << (ST_ASWKB - 840)) | (1L << (ST_ASWKT - 840)) | (1L << (ST_BUFFER - 840)) | (1L << (ST_CENTROID - 840)) | (1L << (ST_CONTAINS - 840)) | (1L << (ST_CROSSES - 840)) | (1L << (ST_DIFFERENCE - 840)) | (1L << (ST_DIMENSION - 840)) | (1L << (ST_DISJOINT - 840)) | (1L << (ST_DISTANCE - 840)) | (1L << (ST_ENDPOINT - 840)) | (1L << (ST_ENVELOPE - 840)) | (1L << (ST_EQUALS - 840)) | (1L << (ST_EXTERIORRING - 840)) | (1L << (ST_GEOMCOLLFROMTEXT - 840)) | (1L << (ST_GEOMCOLLFROMTXT - 840)) | (1L << (ST_GEOMCOLLFROMWKB - 840)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 840)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 840)) | (1L << (ST_GEOMETRYFROMTEXT - 840)) | (1L << (ST_GEOMETRYFROMWKB - 840)) | (1L << (ST_GEOMETRYN - 840)) | (1L << (ST_GEOMETRYTYPE - 840)) | (1L << (ST_GEOMFROMTEXT - 840)) | (1L << (ST_GEOMFROMWKB - 840)) | (1L << (ST_INTERIORRINGN - 840)) | (1L << (ST_INTERSECTION - 840)) | (1L << (ST_INTERSECTS - 840)) | (1L << (ST_ISCLOSED - 840)) | (1L << (ST_ISEMPTY - 840)) | (1L << (ST_ISSIMPLE - 840)) | (1L << (ST_LINEFROMTEXT - 840)) | (1L << (ST_LINEFROMWKB - 840)) | (1L << (ST_LINESTRINGFROMTEXT - 840)) | (1L << (ST_LINESTRINGFROMWKB - 840)) | (1L << (ST_NUMGEOMETRIES - 840)))) != 0) || ((((_la - 904)) & ~0x3f) == 0 && ((1L << (_la - 904)) & ((1L << (ST_NUMINTERIORRING - 904)) | (1L << (ST_NUMINTERIORRINGS - 904)) | (1L << (ST_NUMPOINTS - 904)) | (1L << (ST_OVERLAPS - 904)) | (1L << (ST_POINTFROMTEXT - 904)) | (1L << (ST_POINTFROMWKB - 904)) | (1L << (ST_POINTN - 904)) | (1L << (ST_POLYFROMTEXT - 904)) | (1L << (ST_POLYFROMWKB - 904)) | (1L << (ST_POLYGONFROMTEXT - 904)) | (1L << (ST_POLYGONFROMWKB - 904)) | (1L << (ST_SRID - 904)) | (1L << (ST_STARTPOINT - 904)) | (1L << (ST_SYMDIFFERENCE - 904)) | (1L << (ST_TOUCHES - 904)) | (1L << (ST_UNION - 904)) | (1L << (ST_WITHIN - 904)) | (1L << (ST_X - 904)) | (1L << (ST_Y - 904)) | (1L << (SUBDATE - 904)) | (1L << (SUBSTRING_INDEX - 904)) | (1L << (SUBTIME - 904)) | (1L << (SYSTEM_USER - 904)) | (1L << (TAN - 904)) | (1L << (TIMEDIFF - 904)) | (1L << (TIMESTAMPADD - 904)) | (1L << (TIMESTAMPDIFF - 904)) | (1L << (TIME_FORMAT - 904)) | (1L << (TIME_TO_SEC - 904)) | (1L << (TOUCHES - 904)) | (1L << (TO_BASE64 - 904)) | (1L << (TO_DAYS - 904)) | (1L << (TO_SECONDS - 904)) | (1L << (UCASE - 904)) | (1L << (UNCOMPRESS - 904)) | (1L << (UNCOMPRESSED_LENGTH - 904)) | (1L << (UNHEX - 904)) | (1L << (UNIX_TIMESTAMP - 904)) | (1L << (UPDATEXML - 904)) | (1L << (UPPER - 904)) | (1L << (UUID - 904)) | (1L << (UUID_SHORT - 904)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 904)) | (1L << (VERSION - 904)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 904)) | (1L << (WEEKDAY - 904)) | (1L << (WEEKOFYEAR - 904)) | (1L << (WEIGHT_STRING - 904)) | (1L << (WITHIN - 904)) | (1L << (YEARWEEK - 904)) | (1L << (Y_FUNCTION - 904)) | (1L << (X_FUNCTION - 904)))) != 0) || ((((_la - 968)) & ~0x3f) == 0 && ((1L << (_la - 968)) & ((1L << (PLUS - 968)) | (1L << (MINUS - 968)) | (1L << (EXCLAMATION_SYMBOL - 968)) | (1L << (BIT_NOT_OP - 968)) | (1L << (LR_BRACKET - 968)) | (1L << (ZERO_DECIMAL - 968)) | (1L << (ONE_DECIMAL - 968)) | (1L << (TWO_DECIMAL - 968)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 968)) | (1L << (START_NATIONAL_STRING_LITERAL - 968)) | (1L << (STRING_LITERAL - 968)) | (1L << (DECIMAL_LITERAL - 968)) | (1L << (HEXADECIMAL_LITERAL - 968)) | (1L << (REAL_LITERAL - 968)) | (1L << (NULL_SPEC_LITERAL - 968)) | (1L << (BIT_STRING - 968)) | (1L << (STRING_CHARSET_NAME - 968)) | (1L << (ID - 968)) | (1L << (REVERSE_QUOTE_ID - 968)) | (1L << (LOCAL_ID - 968)) | (1L << (GLOBAL_ID - 968)))) != 0))
                        {
                            {
                                State = 5780; functionArgs();
                            }
                        }

                        State = 5783; Match(RR_BRACKET);
                    }
                    break;
                case 4:
                    _localctx = new UdfFunctionCallContext(_localctx);
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 5785; fullId();
                        State = 5786; Match(LR_BRACKET);
                        State = 5788;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CASE) | (1L << CAST) | (1L << CONVERT) | (1L << CURRENT) | (1L << CURRENT_USER) | (1L << DATABASE) | (1L << DIAGNOSTICS) | (1L << EXISTS) | (1L << FALSE))) != 0) || ((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (IF - 69)) | (1L << (INSERT - 69)) | (1L << (INTERVAL - 69)) | (1L << (LEFT - 69)) | (1L << (NOT - 69)) | (1L << (NULL_LITERAL - 69)) | (1L << (NUMBER - 69)) | (1L << (REPLACE - 69)))) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (RIGHT - 133)) | (1L << (STACKED - 133)) | (1L << (TRUE - 133)) | (1L << (VALUES - 133)) | (1L << (DATE - 133)) | (1L << (TIME - 133)) | (1L << (TIMESTAMP - 133)) | (1L << (DATETIME - 133)) | (1L << (YEAR - 133)) | (1L << (CHAR - 133)))) != 0) || ((((_la - 200)) & ~0x3f) == 0 && ((1L << (_la - 200)) & ((1L << (BINARY - 200)) | (1L << (TEXT - 200)) | (1L << (ENUM - 200)) | (1L << (SERIAL - 200)) | (1L << (AVG - 200)) | (1L << (BIT_AND - 200)) | (1L << (BIT_OR - 200)) | (1L << (BIT_XOR - 200)) | (1L << (COUNT - 200)) | (1L << (GROUP_CONCAT - 200)) | (1L << (MAX - 200)) | (1L << (MIN - 200)) | (1L << (STD - 200)) | (1L << (STDDEV - 200)) | (1L << (STDDEV_POP - 200)) | (1L << (STDDEV_SAMP - 200)) | (1L << (SUM - 200)) | (1L << (VAR_POP - 200)) | (1L << (VAR_SAMP - 200)) | (1L << (VARIANCE - 200)) | (1L << (CURRENT_DATE - 200)) | (1L << (CURRENT_TIME - 200)) | (1L << (CURRENT_TIMESTAMP - 200)) | (1L << (LOCALTIME - 200)) | (1L << (CURDATE - 200)) | (1L << (CURTIME - 200)) | (1L << (DATE_ADD - 200)) | (1L << (DATE_SUB - 200)) | (1L << (EXTRACT - 200)) | (1L << (LOCALTIMESTAMP - 200)) | (1L << (NOW - 200)) | (1L << (POSITION - 200)) | (1L << (SUBSTR - 200)) | (1L << (SUBSTRING - 200)) | (1L << (SYSDATE - 200)) | (1L << (TRIM - 200)) | (1L << (UTC_DATE - 200)) | (1L << (UTC_TIME - 200)) | (1L << (UTC_TIMESTAMP - 200)) | (1L << (ACCOUNT - 200)) | (1L << (ACTION - 200)) | (1L << (AFTER - 200)) | (1L << (AGGREGATE - 200)) | (1L << (ALGORITHM - 200)))) != 0) || ((((_la - 264)) & ~0x3f) == 0 && ((1L << (_la - 264)) & ((1L << (ANY - 264)) | (1L << (AT - 264)) | (1L << (AUTHORS - 264)) | (1L << (AUTOCOMMIT - 264)) | (1L << (AUTOEXTEND_SIZE - 264)) | (1L << (AUTO_INCREMENT - 264)) | (1L << (AVG_ROW_LENGTH - 264)) | (1L << (BEGIN - 264)) | (1L << (BINLOG - 264)) | (1L << (BIT - 264)) | (1L << (BLOCK - 264)) | (1L << (BOOL - 264)) | (1L << (BOOLEAN - 264)) | (1L << (BTREE - 264)) | (1L << (CACHE - 264)) | (1L << (CASCADED - 264)) | (1L << (CHAIN - 264)) | (1L << (CHANGED - 264)) | (1L << (CHANNEL - 264)) | (1L << (CHECKSUM - 264)) | (1L << (PAGE_CHECKSUM - 264)) | (1L << (CIPHER - 264)) | (1L << (CLASS_ORIGIN - 264)) | (1L << (CLIENT - 264)) | (1L << (CLOSE - 264)) | (1L << (COALESCE - 264)) | (1L << (CODE - 264)) | (1L << (COLUMNS - 264)) | (1L << (COLUMN_FORMAT - 264)) | (1L << (COLUMN_NAME - 264)) | (1L << (COMMENT - 264)) | (1L << (COMMIT - 264)) | (1L << (COMPACT - 264)) | (1L << (COMPLETION - 264)) | (1L << (COMPRESSED - 264)) | (1L << (COMPRESSION - 264)) | (1L << (CONCURRENT - 264)) | (1L << (CONNECTION - 264)) | (1L << (CONSISTENT - 264)) | (1L << (CONSTRAINT_CATALOG - 264)) | (1L << (CONSTRAINT_SCHEMA - 264)) | (1L << (CONSTRAINT_NAME - 264)) | (1L << (CONTAINS - 264)) | (1L << (CONTEXT - 264)) | (1L << (CONTRIBUTORS - 264)) | (1L << (COPY - 264)) | (1L << (CPU - 264)) | (1L << (CURSOR_NAME - 264)) | (1L << (DATA - 264)) | (1L << (DATAFILE - 264)) | (1L << (DEALLOCATE - 264)) | (1L << (DEFAULT_AUTH - 264)) | (1L << (DEFINER - 264)) | (1L << (DELAY_KEY_WRITE - 264)) | (1L << (DES_KEY_FILE - 264)) | (1L << (DIRECTORY - 264)) | (1L << (DISABLE - 264)) | (1L << (DISCARD - 264)) | (1L << (DISK - 264)) | (1L << (DO - 264)) | (1L << (DUMPFILE - 264)) | (1L << (DUPLICATE - 264)) | (1L << (DYNAMIC - 264)) | (1L << (ENABLE - 264)))) != 0) || ((((_la - 328)) & ~0x3f) == 0 && ((1L << (_la - 328)) & ((1L << (ENCRYPTION - 328)) | (1L << (END - 328)) | (1L << (ENDS - 328)) | (1L << (ENGINE - 328)) | (1L << (ENGINES - 328)) | (1L << (ERROR - 328)) | (1L << (ERRORS - 328)) | (1L << (ESCAPE - 328)) | (1L << (EVEN - 328)) | (1L << (EVENT - 328)) | (1L << (EVENTS - 328)) | (1L << (EVERY - 328)) | (1L << (EXCHANGE - 328)) | (1L << (EXCLUSIVE - 328)) | (1L << (EXPIRE - 328)) | (1L << (EXPORT - 328)) | (1L << (EXTENDED - 328)) | (1L << (EXTENT_SIZE - 328)) | (1L << (FAST - 328)) | (1L << (FAULTS - 328)) | (1L << (FIELDS - 328)) | (1L << (FILE_BLOCK_SIZE - 328)) | (1L << (FILTER - 328)) | (1L << (FIRST - 328)) | (1L << (FIXED - 328)) | (1L << (FLUSH - 328)) | (1L << (FOLLOWS - 328)) | (1L << (FOUND - 328)) | (1L << (FULL - 328)) | (1L << (FUNCTION - 328)) | (1L << (GENERAL - 328)) | (1L << (GLOBAL - 328)) | (1L << (GRANTS - 328)) | (1L << (GROUP_REPLICATION - 328)) | (1L << (HANDLER - 328)) | (1L << (HASH - 328)) | (1L << (HELP - 328)) | (1L << (HOST - 328)) | (1L << (HOSTS - 328)) | (1L << (IDENTIFIED - 328)) | (1L << (IGNORE_SERVER_IDS - 328)) | (1L << (IMPORT - 328)) | (1L << (INDEXES - 328)) | (1L << (INITIAL_SIZE - 328)) | (1L << (INPLACE - 328)) | (1L << (INSERT_METHOD - 328)) | (1L << (INSTALL - 328)) | (1L << (INSTANCE - 328)) | (1L << (INVISIBLE - 328)) | (1L << (INVOKER - 328)) | (1L << (IO - 328)) | (1L << (IO_THREAD - 328)) | (1L << (IPC - 328)) | (1L << (ISOLATION - 328)) | (1L << (ISSUER - 328)) | (1L << (JSON - 328)) | (1L << (KEY_BLOCK_SIZE - 328)) | (1L << (LANGUAGE - 328)) | (1L << (LAST - 328)) | (1L << (LEAVES - 328)) | (1L << (LESS - 328)) | (1L << (LEVEL - 328)) | (1L << (LIST - 328)) | (1L << (LOCAL - 328)))) != 0) || ((((_la - 392)) & ~0x3f) == 0 && ((1L << (_la - 392)) & ((1L << (LOGFILE - 392)) | (1L << (LOGS - 392)) | (1L << (MASTER - 392)) | (1L << (MASTER_AUTO_POSITION - 392)) | (1L << (MASTER_CONNECT_RETRY - 392)) | (1L << (MASTER_DELAY - 392)) | (1L << (MASTER_HEARTBEAT_PERIOD - 392)) | (1L << (MASTER_HOST - 392)) | (1L << (MASTER_LOG_FILE - 392)) | (1L << (MASTER_LOG_POS - 392)) | (1L << (MASTER_PASSWORD - 392)) | (1L << (MASTER_PORT - 392)) | (1L << (MASTER_RETRY_COUNT - 392)) | (1L << (MASTER_SSL - 392)) | (1L << (MASTER_SSL_CA - 392)) | (1L << (MASTER_SSL_CAPATH - 392)) | (1L << (MASTER_SSL_CERT - 392)) | (1L << (MASTER_SSL_CIPHER - 392)) | (1L << (MASTER_SSL_CRL - 392)) | (1L << (MASTER_SSL_CRLPATH - 392)) | (1L << (MASTER_SSL_KEY - 392)) | (1L << (MASTER_TLS_VERSION - 392)) | (1L << (MASTER_USER - 392)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 392)) | (1L << (MAX_QUERIES_PER_HOUR - 392)) | (1L << (MAX_ROWS - 392)) | (1L << (MAX_SIZE - 392)) | (1L << (MAX_UPDATES_PER_HOUR - 392)) | (1L << (MAX_USER_CONNECTIONS - 392)) | (1L << (MEDIUM - 392)) | (1L << (MERGE - 392)) | (1L << (MESSAGE_TEXT - 392)) | (1L << (MID - 392)) | (1L << (MIGRATE - 392)) | (1L << (MIN_ROWS - 392)) | (1L << (MODE - 392)) | (1L << (MODIFY - 392)) | (1L << (MUTEX - 392)) | (1L << (MYSQL - 392)) | (1L << (MYSQL_ERRNO - 392)) | (1L << (NAME - 392)) | (1L << (NAMES - 392)) | (1L << (NCHAR - 392)) | (1L << (NEVER - 392)) | (1L << (NEXT - 392)) | (1L << (NO - 392)) | (1L << (NODEGROUP - 392)) | (1L << (NONE - 392)) | (1L << (OFFLINE - 392)) | (1L << (OFFSET - 392)) | (1L << (OJ - 392)) | (1L << (OLD_PASSWORD - 392)) | (1L << (ONE - 392)) | (1L << (ONLINE - 392)) | (1L << (ONLY - 392)) | (1L << (OPEN - 392)) | (1L << (OPTIMIZER_COSTS - 392)) | (1L << (OPTIONS - 392)) | (1L << (OWNER - 392)) | (1L << (PACK_KEYS - 392)) | (1L << (PAGE - 392)) | (1L << (PARSER - 392)) | (1L << (PARTIAL - 392)) | (1L << (PARTITIONING - 392)))) != 0) || ((((_la - 456)) & ~0x3f) == 0 && ((1L << (_la - 456)) & ((1L << (PARTITIONS - 456)) | (1L << (PASSWORD - 456)) | (1L << (PHASE - 456)) | (1L << (PLUGIN - 456)) | (1L << (PLUGIN_DIR - 456)) | (1L << (PLUGINS - 456)) | (1L << (PORT - 456)) | (1L << (PRECEDES - 456)) | (1L << (PREPARE - 456)) | (1L << (PRESERVE - 456)) | (1L << (PREV - 456)) | (1L << (PROCESSLIST - 456)) | (1L << (PROFILE - 456)) | (1L << (PROFILES - 456)) | (1L << (PROXY - 456)) | (1L << (QUERY - 456)) | (1L << (QUICK - 456)) | (1L << (REBUILD - 456)) | (1L << (RECOVER - 456)) | (1L << (REDO_BUFFER_SIZE - 456)) | (1L << (REDUNDANT - 456)) | (1L << (RELAY - 456)) | (1L << (RELAY_LOG_FILE - 456)) | (1L << (RELAY_LOG_POS - 456)) | (1L << (RELAYLOG - 456)) | (1L << (REMOVE - 456)) | (1L << (REORGANIZE - 456)) | (1L << (REPAIR - 456)) | (1L << (REPLICATE_DO_DB - 456)) | (1L << (REPLICATE_DO_TABLE - 456)) | (1L << (REPLICATE_IGNORE_DB - 456)) | (1L << (REPLICATE_IGNORE_TABLE - 456)) | (1L << (REPLICATE_REWRITE_DB - 456)) | (1L << (REPLICATE_WILD_DO_TABLE - 456)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 456)) | (1L << (REPLICATION - 456)) | (1L << (RESET - 456)) | (1L << (RESUME - 456)) | (1L << (RETURNED_SQLSTATE - 456)) | (1L << (RETURNS - 456)) | (1L << (ROLLBACK - 456)) | (1L << (ROLLUP - 456)) | (1L << (ROTATE - 456)) | (1L << (ROW - 456)) | (1L << (ROWS - 456)) | (1L << (ROW_FORMAT - 456)) | (1L << (SAVEPOINT - 456)) | (1L << (SCHEDULE - 456)) | (1L << (SECURITY - 456)) | (1L << (SERVER - 456)) | (1L << (SESSION - 456)) | (1L << (SHARE - 456)) | (1L << (SHARED - 456)) | (1L << (SIGNED - 456)) | (1L << (SIMPLE - 456)) | (1L << (SLAVE - 456)) | (1L << (SLOW - 456)) | (1L << (SNAPSHOT - 456)) | (1L << (SOCKET - 456)) | (1L << (SOME - 456)) | (1L << (SONAME - 456)) | (1L << (SOUNDS - 456)) | (1L << (SOURCE - 456)) | (1L << (SQL_AFTER_GTIDS - 456)))) != 0) || ((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (SQL_AFTER_MTS_GAPS - 520)) | (1L << (SQL_BEFORE_GTIDS - 520)) | (1L << (SQL_BUFFER_RESULT - 520)) | (1L << (SQL_CACHE - 520)) | (1L << (SQL_NO_CACHE - 520)) | (1L << (SQL_THREAD - 520)) | (1L << (START - 520)) | (1L << (STARTS - 520)) | (1L << (STATS_AUTO_RECALC - 520)) | (1L << (STATS_PERSISTENT - 520)) | (1L << (STATS_SAMPLE_PAGES - 520)) | (1L << (STATUS - 520)) | (1L << (STOP - 520)) | (1L << (STORAGE - 520)) | (1L << (STRING - 520)) | (1L << (SUBCLASS_ORIGIN - 520)) | (1L << (SUBJECT - 520)) | (1L << (SUBPARTITION - 520)) | (1L << (SUBPARTITIONS - 520)) | (1L << (SUSPEND - 520)) | (1L << (SWAPS - 520)) | (1L << (SWITCHES - 520)) | (1L << (TABLE_NAME - 520)) | (1L << (TABLESPACE - 520)) | (1L << (TEMPORARY - 520)) | (1L << (TEMPTABLE - 520)) | (1L << (THAN - 520)) | (1L << (TRADITIONAL - 520)) | (1L << (TRANSACTION - 520)) | (1L << (TRIGGERS - 520)) | (1L << (TRUNCATE - 520)) | (1L << (UNDEFINED - 520)) | (1L << (UNDOFILE - 520)) | (1L << (UNDO_BUFFER_SIZE - 520)) | (1L << (UNINSTALL - 520)) | (1L << (UNKNOWN - 520)) | (1L << (UNTIL - 520)) | (1L << (UPGRADE - 520)) | (1L << (USER - 520)) | (1L << (USE_FRM - 520)) | (1L << (USER_RESOURCES - 520)) | (1L << (VALIDATION - 520)) | (1L << (VALUE - 520)) | (1L << (VARIABLES - 520)) | (1L << (VIEW - 520)) | (1L << (VISIBLE - 520)) | (1L << (WAIT - 520)) | (1L << (WARNINGS - 520)) | (1L << (WITHOUT - 520)) | (1L << (WORK - 520)) | (1L << (WRAPPER - 520)) | (1L << (X509 - 520)) | (1L << (XA - 520)) | (1L << (XML - 520)) | (1L << (INTERNAL - 520)) | (1L << (QUARTER - 520)) | (1L << (MONTH - 520)) | (1L << (DAY - 520)))) != 0) || ((((_la - 584)) & ~0x3f) == 0 && ((1L << (_la - 584)) & ((1L << (HOUR - 584)) | (1L << (MINUTE - 584)) | (1L << (WEEK - 584)) | (1L << (SECOND - 584)) | (1L << (MICROSECOND - 584)) | (1L << (TABLES - 584)) | (1L << (ROUTINE - 584)) | (1L << (EXECUTE - 584)) | (1L << (FILE - 584)) | (1L << (PROCESS - 584)) | (1L << (RELOAD - 584)) | (1L << (SHUTDOWN - 584)) | (1L << (SUPER - 584)) | (1L << (PRIVILEGES - 584)) | (1L << (SESSION_VARIABLES_ADMIN - 584)) | (1L << (ARMSCII8 - 584)) | (1L << (ASCII - 584)) | (1L << (BIG5 - 584)) | (1L << (CP1250 - 584)) | (1L << (CP1251 - 584)) | (1L << (CP1256 - 584)) | (1L << (CP1257 - 584)) | (1L << (CP850 - 584)) | (1L << (CP852 - 584)) | (1L << (CP866 - 584)) | (1L << (CP932 - 584)) | (1L << (DEC8 - 584)) | (1L << (EUCJPMS - 584)) | (1L << (EUCKR - 584)) | (1L << (GB2312 - 584)) | (1L << (GBK - 584)) | (1L << (GEOSTD8 - 584)) | (1L << (GREEK - 584)) | (1L << (HEBREW - 584)) | (1L << (HP8 - 584)) | (1L << (KEYBCS2 - 584)) | (1L << (KOI8R - 584)) | (1L << (KOI8U - 584)) | (1L << (LATIN1 - 584)) | (1L << (LATIN2 - 584)) | (1L << (LATIN5 - 584)) | (1L << (LATIN7 - 584)) | (1L << (MACCE - 584)) | (1L << (MACROMAN - 584)) | (1L << (SJIS - 584)) | (1L << (SWE7 - 584)) | (1L << (TIS620 - 584)) | (1L << (UCS2 - 584)) | (1L << (UJIS - 584)) | (1L << (UTF16 - 584)) | (1L << (UTF16LE - 584)) | (1L << (UTF32 - 584)) | (1L << (UTF8 - 584)) | (1L << (UTF8MB3 - 584)) | (1L << (UTF8MB4 - 584)) | (1L << (ARCHIVE - 584)) | (1L << (BLACKHOLE - 584)) | (1L << (CSV - 584)) | (1L << (FEDERATED - 584)) | (1L << (INNODB - 584)) | (1L << (MEMORY - 584)) | (1L << (MRG_MYISAM - 584)) | (1L << (MYISAM - 584)) | (1L << (NDB - 584)))) != 0) || ((((_la - 648)) & ~0x3f) == 0 && ((1L << (_la - 648)) & ((1L << (NDBCLUSTER - 648)) | (1L << (PERFORMANCE_SCHEMA - 648)) | (1L << (TOKUDB - 648)) | (1L << (REPEATABLE - 648)) | (1L << (COMMITTED - 648)) | (1L << (UNCOMMITTED - 648)) | (1L << (SERIALIZABLE - 648)) | (1L << (GEOMETRYCOLLECTION - 648)) | (1L << (LINESTRING - 648)) | (1L << (MULTILINESTRING - 648)) | (1L << (MULTIPOINT - 648)) | (1L << (MULTIPOLYGON - 648)) | (1L << (POINT - 648)) | (1L << (POLYGON - 648)) | (1L << (ABS - 648)) | (1L << (ACOS - 648)) | (1L << (ADDDATE - 648)) | (1L << (ADDTIME - 648)) | (1L << (AES_DECRYPT - 648)) | (1L << (AES_ENCRYPT - 648)) | (1L << (AREA - 648)) | (1L << (ASBINARY - 648)) | (1L << (ASIN - 648)) | (1L << (ASTEXT - 648)) | (1L << (ASWKB - 648)) | (1L << (ASWKT - 648)) | (1L << (ASYMMETRIC_DECRYPT - 648)) | (1L << (ASYMMETRIC_DERIVE - 648)) | (1L << (ASYMMETRIC_ENCRYPT - 648)) | (1L << (ASYMMETRIC_SIGN - 648)) | (1L << (ASYMMETRIC_VERIFY - 648)) | (1L << (ATAN - 648)) | (1L << (ATAN2 - 648)) | (1L << (BENCHMARK - 648)) | (1L << (BIN - 648)) | (1L << (BIT_COUNT - 648)) | (1L << (BIT_LENGTH - 648)) | (1L << (BUFFER - 648)) | (1L << (CATALOG_NAME - 648)) | (1L << (CEIL - 648)) | (1L << (CEILING - 648)) | (1L << (CENTROID - 648)) | (1L << (CHARACTER_LENGTH - 648)) | (1L << (CHARSET - 648)) | (1L << (CHAR_LENGTH - 648)) | (1L << (COERCIBILITY - 648)) | (1L << (COLLATION - 648)) | (1L << (COMPRESS - 648)) | (1L << (CONCAT - 648)) | (1L << (CONCAT_WS - 648)) | (1L << (CONNECTION_ID - 648)) | (1L << (CONV - 648)) | (1L << (CONVERT_TZ - 648)) | (1L << (COS - 648)) | (1L << (COT - 648)) | (1L << (CRC32 - 648)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 648)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 648)) | (1L << (CREATE_DH_PARAMETERS - 648)) | (1L << (CREATE_DIGEST - 648)) | (1L << (CROSSES - 648)) | (1L << (DATEDIFF - 648)))) != 0) || ((((_la - 712)) & ~0x3f) == 0 && ((1L << (_la - 712)) & ((1L << (DATE_FORMAT - 712)) | (1L << (DAYNAME - 712)) | (1L << (DAYOFMONTH - 712)) | (1L << (DAYOFWEEK - 712)) | (1L << (DAYOFYEAR - 712)) | (1L << (DECODE - 712)) | (1L << (DEGREES - 712)) | (1L << (DES_DECRYPT - 712)) | (1L << (DES_ENCRYPT - 712)) | (1L << (DIMENSION - 712)) | (1L << (DISJOINT - 712)) | (1L << (ELT - 712)) | (1L << (ENCODE - 712)) | (1L << (ENCRYPT - 712)) | (1L << (ENDPOINT - 712)) | (1L << (ENVELOPE - 712)) | (1L << (EQUALS - 712)) | (1L << (EXP - 712)) | (1L << (EXPORT_SET - 712)) | (1L << (EXTERIORRING - 712)) | (1L << (EXTRACTVALUE - 712)) | (1L << (FIELD - 712)) | (1L << (FIND_IN_SET - 712)) | (1L << (FLOOR - 712)) | (1L << (FORMAT - 712)) | (1L << (FOUND_ROWS - 712)) | (1L << (FROM_BASE64 - 712)) | (1L << (FROM_DAYS - 712)) | (1L << (FROM_UNIXTIME - 712)) | (1L << (GEOMCOLLFROMTEXT - 712)) | (1L << (GEOMCOLLFROMWKB - 712)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 712)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 712)) | (1L << (GEOMETRYFROMTEXT - 712)) | (1L << (GEOMETRYFROMWKB - 712)) | (1L << (GEOMETRYN - 712)) | (1L << (GEOMETRYTYPE - 712)) | (1L << (GEOMFROMTEXT - 712)) | (1L << (GEOMFROMWKB - 712)) | (1L << (GET_FORMAT - 712)) | (1L << (GET_LOCK - 712)) | (1L << (GLENGTH - 712)) | (1L << (GREATEST - 712)) | (1L << (GTID_SUBSET - 712)) | (1L << (GTID_SUBTRACT - 712)) | (1L << (HEX - 712)) | (1L << (IFNULL - 712)) | (1L << (INET6_ATON - 712)) | (1L << (INET6_NTOA - 712)) | (1L << (INET_ATON - 712)) | (1L << (INET_NTOA - 712)) | (1L << (INSTR - 712)) | (1L << (INTERIORRINGN - 712)) | (1L << (INTERSECTS - 712)) | (1L << (ISCLOSED - 712)) | (1L << (ISEMPTY - 712)) | (1L << (ISNULL - 712)) | (1L << (ISSIMPLE - 712)) | (1L << (IS_FREE_LOCK - 712)) | (1L << (IS_IPV4 - 712)) | (1L << (IS_IPV4_COMPAT - 712)) | (1L << (IS_IPV4_MAPPED - 712)) | (1L << (IS_IPV6 - 712)) | (1L << (IS_USED_LOCK - 712)))) != 0) || ((((_la - 776)) & ~0x3f) == 0 && ((1L << (_la - 776)) & ((1L << (LAST_INSERT_ID - 776)) | (1L << (LCASE - 776)) | (1L << (LEAST - 776)) | (1L << (LENGTH - 776)) | (1L << (LINEFROMTEXT - 776)) | (1L << (LINEFROMWKB - 776)) | (1L << (LINESTRINGFROMTEXT - 776)) | (1L << (LINESTRINGFROMWKB - 776)) | (1L << (LN - 776)) | (1L << (LOAD_FILE - 776)) | (1L << (LOCATE - 776)) | (1L << (LOG - 776)) | (1L << (LOG10 - 776)) | (1L << (LOG2 - 776)) | (1L << (LOWER - 776)) | (1L << (LPAD - 776)) | (1L << (LTRIM - 776)) | (1L << (MAKEDATE - 776)) | (1L << (MAKETIME - 776)) | (1L << (MAKE_SET - 776)) | (1L << (MASTER_POS_WAIT - 776)) | (1L << (MBRCONTAINS - 776)) | (1L << (MBRDISJOINT - 776)) | (1L << (MBREQUAL - 776)) | (1L << (MBRINTERSECTS - 776)) | (1L << (MBROVERLAPS - 776)) | (1L << (MBRTOUCHES - 776)) | (1L << (MBRWITHIN - 776)) | (1L << (MD5 - 776)) | (1L << (MLINEFROMTEXT - 776)) | (1L << (MLINEFROMWKB - 776)) | (1L << (MONTHNAME - 776)) | (1L << (MPOINTFROMTEXT - 776)) | (1L << (MPOINTFROMWKB - 776)) | (1L << (MPOLYFROMTEXT - 776)) | (1L << (MPOLYFROMWKB - 776)) | (1L << (MULTILINESTRINGFROMTEXT - 776)) | (1L << (MULTILINESTRINGFROMWKB - 776)) | (1L << (MULTIPOINTFROMTEXT - 776)) | (1L << (MULTIPOINTFROMWKB - 776)) | (1L << (MULTIPOLYGONFROMTEXT - 776)) | (1L << (MULTIPOLYGONFROMWKB - 776)) | (1L << (NAME_CONST - 776)) | (1L << (NULLIF - 776)) | (1L << (NUMGEOMETRIES - 776)) | (1L << (NUMINTERIORRINGS - 776)) | (1L << (NUMPOINTS - 776)) | (1L << (OCT - 776)) | (1L << (OCTET_LENGTH - 776)) | (1L << (ORD - 776)) | (1L << (OVERLAPS - 776)) | (1L << (PERIOD_ADD - 776)) | (1L << (PERIOD_DIFF - 776)) | (1L << (PI - 776)) | (1L << (POINTFROMTEXT - 776)) | (1L << (POINTFROMWKB - 776)) | (1L << (POINTN - 776)) | (1L << (POLYFROMTEXT - 776)) | (1L << (POLYFROMWKB - 776)) | (1L << (POLYGONFROMTEXT - 776)) | (1L << (POLYGONFROMWKB - 776)) | (1L << (POW - 776)) | (1L << (POWER - 776)) | (1L << (QUOTE - 776)))) != 0) || ((((_la - 840)) & ~0x3f) == 0 && ((1L << (_la - 840)) & ((1L << (RADIANS - 840)) | (1L << (RAND - 840)) | (1L << (RANDOM_BYTES - 840)) | (1L << (RELEASE_LOCK - 840)) | (1L << (REVERSE - 840)) | (1L << (ROUND - 840)) | (1L << (ROW_COUNT - 840)) | (1L << (RPAD - 840)) | (1L << (RTRIM - 840)) | (1L << (SEC_TO_TIME - 840)) | (1L << (SESSION_USER - 840)) | (1L << (SHA - 840)) | (1L << (SHA1 - 840)) | (1L << (SHA2 - 840)) | (1L << (SCHEMA_NAME - 840)) | (1L << (SIGN - 840)) | (1L << (SIN - 840)) | (1L << (SLEEP - 840)) | (1L << (SOUNDEX - 840)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 840)) | (1L << (SQRT - 840)) | (1L << (SRID - 840)) | (1L << (STARTPOINT - 840)) | (1L << (STRCMP - 840)) | (1L << (STR_TO_DATE - 840)) | (1L << (ST_AREA - 840)) | (1L << (ST_ASBINARY - 840)) | (1L << (ST_ASTEXT - 840)) | (1L << (ST_ASWKB - 840)) | (1L << (ST_ASWKT - 840)) | (1L << (ST_BUFFER - 840)) | (1L << (ST_CENTROID - 840)) | (1L << (ST_CONTAINS - 840)) | (1L << (ST_CROSSES - 840)) | (1L << (ST_DIFFERENCE - 840)) | (1L << (ST_DIMENSION - 840)) | (1L << (ST_DISJOINT - 840)) | (1L << (ST_DISTANCE - 840)) | (1L << (ST_ENDPOINT - 840)) | (1L << (ST_ENVELOPE - 840)) | (1L << (ST_EQUALS - 840)) | (1L << (ST_EXTERIORRING - 840)) | (1L << (ST_GEOMCOLLFROMTEXT - 840)) | (1L << (ST_GEOMCOLLFROMTXT - 840)) | (1L << (ST_GEOMCOLLFROMWKB - 840)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 840)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 840)) | (1L << (ST_GEOMETRYFROMTEXT - 840)) | (1L << (ST_GEOMETRYFROMWKB - 840)) | (1L << (ST_GEOMETRYN - 840)) | (1L << (ST_GEOMETRYTYPE - 840)) | (1L << (ST_GEOMFROMTEXT - 840)) | (1L << (ST_GEOMFROMWKB - 840)) | (1L << (ST_INTERIORRINGN - 840)) | (1L << (ST_INTERSECTION - 840)) | (1L << (ST_INTERSECTS - 840)) | (1L << (ST_ISCLOSED - 840)) | (1L << (ST_ISEMPTY - 840)) | (1L << (ST_ISSIMPLE - 840)) | (1L << (ST_LINEFROMTEXT - 840)) | (1L << (ST_LINEFROMWKB - 840)) | (1L << (ST_LINESTRINGFROMTEXT - 840)) | (1L << (ST_LINESTRINGFROMWKB - 840)) | (1L << (ST_NUMGEOMETRIES - 840)))) != 0) || ((((_la - 904)) & ~0x3f) == 0 && ((1L << (_la - 904)) & ((1L << (ST_NUMINTERIORRING - 904)) | (1L << (ST_NUMINTERIORRINGS - 904)) | (1L << (ST_NUMPOINTS - 904)) | (1L << (ST_OVERLAPS - 904)) | (1L << (ST_POINTFROMTEXT - 904)) | (1L << (ST_POINTFROMWKB - 904)) | (1L << (ST_POINTN - 904)) | (1L << (ST_POLYFROMTEXT - 904)) | (1L << (ST_POLYFROMWKB - 904)) | (1L << (ST_POLYGONFROMTEXT - 904)) | (1L << (ST_POLYGONFROMWKB - 904)) | (1L << (ST_SRID - 904)) | (1L << (ST_STARTPOINT - 904)) | (1L << (ST_SYMDIFFERENCE - 904)) | (1L << (ST_TOUCHES - 904)) | (1L << (ST_UNION - 904)) | (1L << (ST_WITHIN - 904)) | (1L << (ST_X - 904)) | (1L << (ST_Y - 904)) | (1L << (SUBDATE - 904)) | (1L << (SUBSTRING_INDEX - 904)) | (1L << (SUBTIME - 904)) | (1L << (SYSTEM_USER - 904)) | (1L << (TAN - 904)) | (1L << (TIMEDIFF - 904)) | (1L << (TIMESTAMPADD - 904)) | (1L << (TIMESTAMPDIFF - 904)) | (1L << (TIME_FORMAT - 904)) | (1L << (TIME_TO_SEC - 904)) | (1L << (TOUCHES - 904)) | (1L << (TO_BASE64 - 904)) | (1L << (TO_DAYS - 904)) | (1L << (TO_SECONDS - 904)) | (1L << (UCASE - 904)) | (1L << (UNCOMPRESS - 904)) | (1L << (UNCOMPRESSED_LENGTH - 904)) | (1L << (UNHEX - 904)) | (1L << (UNIX_TIMESTAMP - 904)) | (1L << (UPDATEXML - 904)) | (1L << (UPPER - 904)) | (1L << (UUID - 904)) | (1L << (UUID_SHORT - 904)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 904)) | (1L << (VERSION - 904)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 904)) | (1L << (WEEKDAY - 904)) | (1L << (WEEKOFYEAR - 904)) | (1L << (WEIGHT_STRING - 904)) | (1L << (WITHIN - 904)) | (1L << (YEARWEEK - 904)) | (1L << (Y_FUNCTION - 904)) | (1L << (X_FUNCTION - 904)))) != 0) || ((((_la - 968)) & ~0x3f) == 0 && ((1L << (_la - 968)) & ((1L << (PLUS - 968)) | (1L << (MINUS - 968)) | (1L << (EXCLAMATION_SYMBOL - 968)) | (1L << (BIT_NOT_OP - 968)) | (1L << (LR_BRACKET - 968)) | (1L << (ZERO_DECIMAL - 968)) | (1L << (ONE_DECIMAL - 968)) | (1L << (TWO_DECIMAL - 968)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 968)) | (1L << (START_NATIONAL_STRING_LITERAL - 968)) | (1L << (STRING_LITERAL - 968)) | (1L << (DECIMAL_LITERAL - 968)) | (1L << (HEXADECIMAL_LITERAL - 968)) | (1L << (REAL_LITERAL - 968)) | (1L << (NULL_SPEC_LITERAL - 968)) | (1L << (BIT_STRING - 968)) | (1L << (STRING_CHARSET_NAME - 968)) | (1L << (ID - 968)) | (1L << (REVERSE_QUOTE_ID - 968)) | (1L << (LOCAL_ID - 968)) | (1L << (GLOBAL_ID - 968)))) != 0))
                        {
                            {
                                State = 5787; functionArgs();
                            }
                        }

                        State = 5790; Match(RR_BRACKET);
                    }
                    break;
                case 5:
                    _localctx = new PasswordFunctionCallContext(_localctx);
                    EnterOuterAlt(_localctx, 5);
                    {
                        State = 5792; passwordFunctionClause();
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class SpecificFunctionContext : ParserRuleContext
    {
        public SpecificFunctionContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_specificFunction; } }

        public SpecificFunctionContext() { }
        public virtual void CopyFrom(SpecificFunctionContext context)
        {
            base.CopyFrom(context);
        }
    }
    public partial class PositionFunctionCallContext : SpecificFunctionContext
    {
        public StringLiteralContext positionString;
        public ExpressionContext positionExpression;
        public StringLiteralContext inString;
        public ExpressionContext inExpression;
        public ITerminalNode POSITION() { return GetToken(MySqlParser.POSITION, 0); }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public StringLiteralContext[] stringLiteral()
        {
            return GetRuleContexts<StringLiteralContext>();
        }
        public StringLiteralContext stringLiteral(int i)
        {
            return GetRuleContext<StringLiteralContext>(i);
        }
        public ExpressionContext[] expression()
        {
            return GetRuleContexts<ExpressionContext>();
        }
        public ExpressionContext expression(int i)
        {
            return GetRuleContext<ExpressionContext>(i);
        }
        public PositionFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterPositionFunctionCall(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitPositionFunctionCall(this);
        }
    }
    public partial class TrimFunctionCallContext : SpecificFunctionContext
    {
        public IToken positioinForm;
        public StringLiteralContext sourceString;
        public ExpressionContext sourceExpression;
        public StringLiteralContext fromString;
        public ExpressionContext fromExpression;
        public ITerminalNode TRIM() { return GetToken(MySqlParser.TRIM, 0); }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public ITerminalNode BOTH() { return GetToken(MySqlParser.BOTH, 0); }
        public ITerminalNode LEADING() { return GetToken(MySqlParser.LEADING, 0); }
        public ITerminalNode TRAILING() { return GetToken(MySqlParser.TRAILING, 0); }
        public StringLiteralContext[] stringLiteral()
        {
            return GetRuleContexts<StringLiteralContext>();
        }
        public StringLiteralContext stringLiteral(int i)
        {
            return GetRuleContext<StringLiteralContext>(i);
        }
        public ExpressionContext[] expression()
        {
            return GetRuleContexts<ExpressionContext>();
        }
        public ExpressionContext expression(int i)
        {
            return GetRuleContext<ExpressionContext>(i);
        }
        public TrimFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterTrimFunctionCall(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitTrimFunctionCall(this);
        }
    }
    public partial class SimpleFunctionCallContext : SpecificFunctionContext
    {
        public ITerminalNode CURRENT_DATE() { return GetToken(MySqlParser.CURRENT_DATE, 0); }
        public ITerminalNode CURRENT_TIME() { return GetToken(MySqlParser.CURRENT_TIME, 0); }
        public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
        public ITerminalNode CURRENT_USER() { return GetToken(MySqlParser.CURRENT_USER, 0); }
        public ITerminalNode LOCALTIME() { return GetToken(MySqlParser.LOCALTIME, 0); }
        public SimpleFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterSimpleFunctionCall(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitSimpleFunctionCall(this);
        }
    }
    public partial class CharFunctionCallContext : SpecificFunctionContext
    {
        public ITerminalNode CHAR() { return GetToken(MySqlParser.CHAR, 0); }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public FunctionArgsContext functionArgs()
        {
            return GetRuleContext<FunctionArgsContext>(0);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public ITerminalNode USING() { return GetToken(MySqlParser.USING, 0); }
        public CharsetNameContext charsetName()
        {
            return GetRuleContext<CharsetNameContext>(0);
        }
        public CharFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterCharFunctionCall(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitCharFunctionCall(this);
        }
    }
    public partial class WeightFunctionCallContext : SpecificFunctionContext
    {
        public IToken stringFormat;
        public ITerminalNode WEIGHT_STRING() { return GetToken(MySqlParser.WEIGHT_STRING, 0); }
        public ITerminalNode[] LR_BRACKET() { return GetTokens(MySqlParser.LR_BRACKET); }
        public ITerminalNode LR_BRACKET(int i)
        {
            return GetToken(MySqlParser.LR_BRACKET, i);
        }
        public ITerminalNode[] RR_BRACKET() { return GetTokens(MySqlParser.RR_BRACKET); }
        public ITerminalNode RR_BRACKET(int i)
        {
            return GetToken(MySqlParser.RR_BRACKET, i);
        }
        public StringLiteralContext stringLiteral()
        {
            return GetRuleContext<StringLiteralContext>(0);
        }
        public ExpressionContext expression()
        {
            return GetRuleContext<ExpressionContext>(0);
        }
        public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
        public DecimalLiteralContext decimalLiteral()
        {
            return GetRuleContext<DecimalLiteralContext>(0);
        }
        public LevelsInWeightStringContext levelsInWeightString()
        {
            return GetRuleContext<LevelsInWeightStringContext>(0);
        }
        public ITerminalNode CHAR() { return GetToken(MySqlParser.CHAR, 0); }
        public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
        public WeightFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterWeightFunctionCall(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitWeightFunctionCall(this);
        }
    }
    public partial class GetFormatFunctionCallContext : SpecificFunctionContext
    {
        public IToken datetimeFormat;
        public ITerminalNode GET_FORMAT() { return GetToken(MySqlParser.GET_FORMAT, 0); }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public ITerminalNode COMMA() { return GetToken(MySqlParser.COMMA, 0); }
        public StringLiteralContext stringLiteral()
        {
            return GetRuleContext<StringLiteralContext>(0);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public ITerminalNode DATE() { return GetToken(MySqlParser.DATE, 0); }
        public ITerminalNode TIME() { return GetToken(MySqlParser.TIME, 0); }
        public ITerminalNode DATETIME() { return GetToken(MySqlParser.DATETIME, 0); }
        public GetFormatFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterGetFormatFunctionCall(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitGetFormatFunctionCall(this);
        }
    }
    public partial class CaseFunctionCallContext : SpecificFunctionContext
    {
        public FunctionArgContext elseArg;
        public ITerminalNode CASE() { return GetToken(MySqlParser.CASE, 0); }
        public ExpressionContext expression()
        {
            return GetRuleContext<ExpressionContext>(0);
        }
        public ITerminalNode END() { return GetToken(MySqlParser.END, 0); }
        public CaseFuncAlternativeContext[] caseFuncAlternative()
        {
            return GetRuleContexts<CaseFuncAlternativeContext>();
        }
        public CaseFuncAlternativeContext caseFuncAlternative(int i)
        {
            return GetRuleContext<CaseFuncAlternativeContext>(i);
        }
        public ITerminalNode ELSE() { return GetToken(MySqlParser.ELSE, 0); }
        public FunctionArgContext functionArg()
        {
            return GetRuleContext<FunctionArgContext>(0);
        }
        public CaseFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterCaseFunctionCall(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitCaseFunctionCall(this);
        }
    }
    public partial class ExtractFunctionCallContext : SpecificFunctionContext
    {
        public StringLiteralContext sourceString;
        public ExpressionContext sourceExpression;
        public ITerminalNode EXTRACT() { return GetToken(MySqlParser.EXTRACT, 0); }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public IntervalTypeContext intervalType()
        {
            return GetRuleContext<IntervalTypeContext>(0);
        }
        public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public StringLiteralContext stringLiteral()
        {
            return GetRuleContext<StringLiteralContext>(0);
        }
        public ExpressionContext expression()
        {
            return GetRuleContext<ExpressionContext>(0);
        }
        public ExtractFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterExtractFunctionCall(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitExtractFunctionCall(this);
        }
    }
    public partial class DataTypeFunctionCallContext : SpecificFunctionContext
    {
        public IToken separator;
        public ITerminalNode CONVERT() { return GetToken(MySqlParser.CONVERT, 0); }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public ExpressionContext expression()
        {
            return GetRuleContext<ExpressionContext>(0);
        }
        public ConvertedDataTypeContext convertedDataType()
        {
            return GetRuleContext<ConvertedDataTypeContext>(0);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public ITerminalNode COMMA() { return GetToken(MySqlParser.COMMA, 0); }
        public ITerminalNode USING() { return GetToken(MySqlParser.USING, 0); }
        public CharsetNameContext charsetName()
        {
            return GetRuleContext<CharsetNameContext>(0);
        }
        public ITerminalNode CAST() { return GetToken(MySqlParser.CAST, 0); }
        public ITerminalNode AS() { return GetToken(MySqlParser.AS, 0); }
        public DataTypeFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterDataTypeFunctionCall(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitDataTypeFunctionCall(this);
        }
    }
    public partial class ValuesFunctionCallContext : SpecificFunctionContext
    {
        public ITerminalNode VALUES() { return GetToken(MySqlParser.VALUES, 0); }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public FullColumnNameContext fullColumnName()
        {
            return GetRuleContext<FullColumnNameContext>(0);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public ValuesFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterValuesFunctionCall(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitValuesFunctionCall(this);
        }
    }
    public partial class SubstrFunctionCallContext : SpecificFunctionContext
    {
        public StringLiteralContext sourceString;
        public ExpressionContext sourceExpression;
        public DecimalLiteralContext fromDecimal;
        public ExpressionContext fromExpression;
        public DecimalLiteralContext forDecimal;
        public ExpressionContext forExpression;
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public ITerminalNode FROM() { return GetToken(MySqlParser.FROM, 0); }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public ITerminalNode SUBSTR() { return GetToken(MySqlParser.SUBSTR, 0); }
        public ITerminalNode SUBSTRING() { return GetToken(MySqlParser.SUBSTRING, 0); }
        public StringLiteralContext stringLiteral()
        {
            return GetRuleContext<StringLiteralContext>(0);
        }
        public ExpressionContext[] expression()
        {
            return GetRuleContexts<ExpressionContext>();
        }
        public ExpressionContext expression(int i)
        {
            return GetRuleContext<ExpressionContext>(i);
        }
        public DecimalLiteralContext[] decimalLiteral()
        {
            return GetRuleContexts<DecimalLiteralContext>();
        }
        public DecimalLiteralContext decimalLiteral(int i)
        {
            return GetRuleContext<DecimalLiteralContext>(i);
        }
        public ITerminalNode FOR() { return GetToken(MySqlParser.FOR, 0); }
        public SubstrFunctionCallContext(SpecificFunctionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterSubstrFunctionCall(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitSubstrFunctionCall(this);
        }
    }

    [RuleVersion(0)]
    public SpecificFunctionContext specificFunction()
    {
        SpecificFunctionContext _localctx = new SpecificFunctionContext(Context, State);
        EnterRule(_localctx, 582, RULE_specificFunction);
        int _la;
        try
        {
            State = 5952;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 877, Context))
            {
                case 1:
                    _localctx = new SimpleFunctionCallContext(_localctx);
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 5795;
                        _la = TokenStream.LA(1);
                        if (!(_la == CURRENT_USER || ((((_la - 240)) & ~0x3f) == 0 && ((1L << (_la - 240)) & ((1L << (CURRENT_DATE - 240)) | (1L << (CURRENT_TIME - 240)) | (1L << (CURRENT_TIMESTAMP - 240)) | (1L << (LOCALTIME - 240)))) != 0)))
                        {
                            ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                    break;
                case 2:
                    _localctx = new DataTypeFunctionCallContext(_localctx);
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 5796; Match(CONVERT);
                        State = 5797; Match(LR_BRACKET);
                        State = 5798; expression(0);
                        State = 5799; ((DataTypeFunctionCallContext)_localctx).separator = Match(COMMA);
                        State = 5800; convertedDataType();
                        State = 5801; Match(RR_BRACKET);
                    }
                    break;
                case 3:
                    _localctx = new DataTypeFunctionCallContext(_localctx);
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 5803; Match(CONVERT);
                        State = 5804; Match(LR_BRACKET);
                        State = 5805; expression(0);
                        State = 5806; Match(USING);
                        State = 5807; charsetName();
                        State = 5808; Match(RR_BRACKET);
                    }
                    break;
                case 4:
                    _localctx = new DataTypeFunctionCallContext(_localctx);
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 5810; Match(CAST);
                        State = 5811; Match(LR_BRACKET);
                        State = 5812; expression(0);
                        State = 5813; Match(AS);
                        State = 5814; convertedDataType();
                        State = 5815; Match(RR_BRACKET);
                    }
                    break;
                case 5:
                    _localctx = new ValuesFunctionCallContext(_localctx);
                    EnterOuterAlt(_localctx, 5);
                    {
                        State = 5817; Match(VALUES);
                        State = 5818; Match(LR_BRACKET);
                        State = 5819; fullColumnName();
                        State = 5820; Match(RR_BRACKET);
                    }
                    break;
                case 6:
                    _localctx = new CaseFunctionCallContext(_localctx);
                    EnterOuterAlt(_localctx, 6);
                    {
                        State = 5822; Match(CASE);
                        State = 5823; expression(0);
                        State = 5825;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        do
                        {
                            {
                                {
                                    State = 5824; caseFuncAlternative();
                                }
                            }
                            State = 5827;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                        } while (_la == WHEN);
                        State = 5831;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == ELSE)
                        {
                            {
                                State = 5829; Match(ELSE);
                                State = 5830; ((CaseFunctionCallContext)_localctx).elseArg = functionArg();
                            }
                        }

                        State = 5833; Match(END);
                    }
                    break;
                case 7:
                    _localctx = new CaseFunctionCallContext(_localctx);
                    EnterOuterAlt(_localctx, 7);
                    {
                        State = 5835; Match(CASE);
                        State = 5837;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        do
                        {
                            {
                                {
                                    State = 5836; caseFuncAlternative();
                                }
                            }
                            State = 5839;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                        } while (_la == WHEN);
                        State = 5843;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == ELSE)
                        {
                            {
                                State = 5841; Match(ELSE);
                                State = 5842; ((CaseFunctionCallContext)_localctx).elseArg = functionArg();
                            }
                        }

                        State = 5845; Match(END);
                    }
                    break;
                case 8:
                    _localctx = new CharFunctionCallContext(_localctx);
                    EnterOuterAlt(_localctx, 8);
                    {
                        State = 5847; Match(CHAR);
                        State = 5848; Match(LR_BRACKET);
                        State = 5849; functionArgs();
                        State = 5852;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == USING)
                        {
                            {
                                State = 5850; Match(USING);
                                State = 5851; charsetName();
                            }
                        }

                        State = 5854; Match(RR_BRACKET);
                    }
                    break;
                case 9:
                    _localctx = new PositionFunctionCallContext(_localctx);
                    EnterOuterAlt(_localctx, 9);
                    {
                        State = 5856; Match(POSITION);
                        State = 5857; Match(LR_BRACKET);
                        State = 5860;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 863, Context))
                        {
                            case 1:
                                {
                                    State = 5858; ((PositionFunctionCallContext)_localctx).positionString = stringLiteral();
                                }
                                break;
                            case 2:
                                {
                                    State = 5859; ((PositionFunctionCallContext)_localctx).positionExpression = expression(0);
                                }
                                break;
                        }
                        State = 5862; Match(IN);
                        State = 5865;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 864, Context))
                        {
                            case 1:
                                {
                                    State = 5863; ((PositionFunctionCallContext)_localctx).inString = stringLiteral();
                                }
                                break;
                            case 2:
                                {
                                    State = 5864; ((PositionFunctionCallContext)_localctx).inExpression = expression(0);
                                }
                                break;
                        }
                        State = 5867; Match(RR_BRACKET);
                    }
                    break;
                case 10:
                    _localctx = new SubstrFunctionCallContext(_localctx);
                    EnterOuterAlt(_localctx, 10);
                    {
                        State = 5869;
                        _la = TokenStream.LA(1);
                        if (!(_la == SUBSTR || _la == SUBSTRING))
                        {
                            ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                        State = 5870; Match(LR_BRACKET);
                        State = 5873;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 865, Context))
                        {
                            case 1:
                                {
                                    State = 5871; ((SubstrFunctionCallContext)_localctx).sourceString = stringLiteral();
                                }
                                break;
                            case 2:
                                {
                                    State = 5872; ((SubstrFunctionCallContext)_localctx).sourceExpression = expression(0);
                                }
                                break;
                        }
                        State = 5875; Match(FROM);
                        State = 5878;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 866, Context))
                        {
                            case 1:
                                {
                                    State = 5876; ((SubstrFunctionCallContext)_localctx).fromDecimal = decimalLiteral();
                                }
                                break;
                            case 2:
                                {
                                    State = 5877; ((SubstrFunctionCallContext)_localctx).fromExpression = expression(0);
                                }
                                break;
                        }
                        State = 5885;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == FOR)
                        {
                            {
                                State = 5880; Match(FOR);
                                State = 5883;
                                ErrorHandler.Sync(this);
                                switch (Interpreter.AdaptivePredict(TokenStream, 867, Context))
                                {
                                    case 1:
                                        {
                                            State = 5881; ((SubstrFunctionCallContext)_localctx).forDecimal = decimalLiteral();
                                        }
                                        break;
                                    case 2:
                                        {
                                            State = 5882; ((SubstrFunctionCallContext)_localctx).forExpression = expression(0);
                                        }
                                        break;
                                }
                            }
                        }

                        State = 5887; Match(RR_BRACKET);
                    }
                    break;
                case 11:
                    _localctx = new TrimFunctionCallContext(_localctx);
                    EnterOuterAlt(_localctx, 11);
                    {
                        State = 5889; Match(TRIM);
                        State = 5890; Match(LR_BRACKET);
                        State = 5891;
                        ((TrimFunctionCallContext)_localctx).positioinForm = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == BOTH || _la == LEADING || _la == TRAILING))
                        {
                            ((TrimFunctionCallContext)_localctx).positioinForm = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                        State = 5894;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 869, Context))
                        {
                            case 1:
                                {
                                    State = 5892; ((TrimFunctionCallContext)_localctx).sourceString = stringLiteral();
                                }
                                break;
                            case 2:
                                {
                                    State = 5893; ((TrimFunctionCallContext)_localctx).sourceExpression = expression(0);
                                }
                                break;
                        }
                        State = 5896; Match(FROM);
                        State = 5899;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 870, Context))
                        {
                            case 1:
                                {
                                    State = 5897; ((TrimFunctionCallContext)_localctx).fromString = stringLiteral();
                                }
                                break;
                            case 2:
                                {
                                    State = 5898; ((TrimFunctionCallContext)_localctx).fromExpression = expression(0);
                                }
                                break;
                        }
                        State = 5901; Match(RR_BRACKET);
                    }
                    break;
                case 12:
                    _localctx = new TrimFunctionCallContext(_localctx);
                    EnterOuterAlt(_localctx, 12);
                    {
                        State = 5903; Match(TRIM);
                        State = 5904; Match(LR_BRACKET);
                        State = 5907;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 871, Context))
                        {
                            case 1:
                                {
                                    State = 5905; ((TrimFunctionCallContext)_localctx).sourceString = stringLiteral();
                                }
                                break;
                            case 2:
                                {
                                    State = 5906; ((TrimFunctionCallContext)_localctx).sourceExpression = expression(0);
                                }
                                break;
                        }
                        State = 5909; Match(FROM);
                        State = 5912;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 872, Context))
                        {
                            case 1:
                                {
                                    State = 5910; ((TrimFunctionCallContext)_localctx).fromString = stringLiteral();
                                }
                                break;
                            case 2:
                                {
                                    State = 5911; ((TrimFunctionCallContext)_localctx).fromExpression = expression(0);
                                }
                                break;
                        }
                        State = 5914; Match(RR_BRACKET);
                    }
                    break;
                case 13:
                    _localctx = new WeightFunctionCallContext(_localctx);
                    EnterOuterAlt(_localctx, 13);
                    {
                        State = 5916; Match(WEIGHT_STRING);
                        State = 5917; Match(LR_BRACKET);
                        State = 5920;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 873, Context))
                        {
                            case 1:
                                {
                                    State = 5918; stringLiteral();
                                }
                                break;
                            case 2:
                                {
                                    State = 5919; expression(0);
                                }
                                break;
                        }
                        State = 5928;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == AS)
                        {
                            {
                                State = 5922; Match(AS);
                                State = 5923;
                                ((WeightFunctionCallContext)_localctx).stringFormat = TokenStream.LT(1);
                                _la = TokenStream.LA(1);
                                if (!(_la == CHAR || _la == BINARY))
                                {
                                    ((WeightFunctionCallContext)_localctx).stringFormat = ErrorHandler.RecoverInline(this);
                                }
                                else
                                {
                                    ErrorHandler.ReportMatch(this);
                                    Consume();
                                }
                                State = 5924; Match(LR_BRACKET);
                                State = 5925; decimalLiteral();
                                State = 5926; Match(RR_BRACKET);
                            }
                        }

                        State = 5931;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == LEVEL)
                        {
                            {
                                State = 5930; levelsInWeightString();
                            }
                        }

                        State = 5933; Match(RR_BRACKET);
                    }
                    break;
                case 14:
                    _localctx = new ExtractFunctionCallContext(_localctx);
                    EnterOuterAlt(_localctx, 14);
                    {
                        State = 5935; Match(EXTRACT);
                        State = 5936; Match(LR_BRACKET);
                        State = 5937; intervalType();
                        State = 5938; Match(FROM);
                        State = 5941;
                        ErrorHandler.Sync(this);
                        switch (Interpreter.AdaptivePredict(TokenStream, 876, Context))
                        {
                            case 1:
                                {
                                    State = 5939; ((ExtractFunctionCallContext)_localctx).sourceString = stringLiteral();
                                }
                                break;
                            case 2:
                                {
                                    State = 5940; ((ExtractFunctionCallContext)_localctx).sourceExpression = expression(0);
                                }
                                break;
                        }
                        State = 5943; Match(RR_BRACKET);
                    }
                    break;
                case 15:
                    _localctx = new GetFormatFunctionCallContext(_localctx);
                    EnterOuterAlt(_localctx, 15);
                    {
                        State = 5945; Match(GET_FORMAT);
                        State = 5946; Match(LR_BRACKET);
                        State = 5947;
                        ((GetFormatFunctionCallContext)_localctx).datetimeFormat = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (DATETIME - 191)))) != 0)))
                        {
                            ((GetFormatFunctionCallContext)_localctx).datetimeFormat = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                        State = 5948; Match(COMMA);
                        State = 5949; stringLiteral();
                        State = 5950; Match(RR_BRACKET);
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class CaseFuncAlternativeContext : ParserRuleContext
    {
        public FunctionArgContext condition;
        public FunctionArgContext consequent;
        public ITerminalNode WHEN() { return GetToken(MySqlParser.WHEN, 0); }
        public ITerminalNode THEN() { return GetToken(MySqlParser.THEN, 0); }
        public FunctionArgContext[] functionArg()
        {
            return GetRuleContexts<FunctionArgContext>();
        }
        public FunctionArgContext functionArg(int i)
        {
            return GetRuleContext<FunctionArgContext>(i);
        }
        public CaseFuncAlternativeContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_caseFuncAlternative; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterCaseFuncAlternative(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitCaseFuncAlternative(this);
        }
    }

    [RuleVersion(0)]
    public CaseFuncAlternativeContext caseFuncAlternative()
    {
        CaseFuncAlternativeContext _localctx = new CaseFuncAlternativeContext(Context, State);
        EnterRule(_localctx, 584, RULE_caseFuncAlternative);
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 5954; Match(WHEN);
                State = 5955; _localctx.condition = functionArg();
                State = 5956; Match(THEN);
                State = 5957; _localctx.consequent = functionArg();
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class LevelsInWeightStringContext : ParserRuleContext
    {
        public LevelsInWeightStringContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_levelsInWeightString; } }

        public LevelsInWeightStringContext() { }
        public virtual void CopyFrom(LevelsInWeightStringContext context)
        {
            base.CopyFrom(context);
        }
    }
    public partial class LevelWeightRangeContext : LevelsInWeightStringContext
    {
        public DecimalLiteralContext firstLevel;
        public DecimalLiteralContext lastLevel;
        public ITerminalNode LEVEL() { return GetToken(MySqlParser.LEVEL, 0); }
        public ITerminalNode MINUS() { return GetToken(MySqlParser.MINUS, 0); }
        public DecimalLiteralContext[] decimalLiteral()
        {
            return GetRuleContexts<DecimalLiteralContext>();
        }
        public DecimalLiteralContext decimalLiteral(int i)
        {
            return GetRuleContext<DecimalLiteralContext>(i);
        }
        public LevelWeightRangeContext(LevelsInWeightStringContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterLevelWeightRange(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitLevelWeightRange(this);
        }
    }
    public partial class LevelWeightListContext : LevelsInWeightStringContext
    {
        public ITerminalNode LEVEL() { return GetToken(MySqlParser.LEVEL, 0); }
        public LevelInWeightListElementContext[] levelInWeightListElement()
        {
            return GetRuleContexts<LevelInWeightListElementContext>();
        }
        public LevelInWeightListElementContext levelInWeightListElement(int i)
        {
            return GetRuleContext<LevelInWeightListElementContext>(i);
        }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public LevelWeightListContext(LevelsInWeightStringContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterLevelWeightList(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitLevelWeightList(this);
        }
    }

    [RuleVersion(0)]
    public LevelsInWeightStringContext levelsInWeightString()
    {
        LevelsInWeightStringContext _localctx = new LevelsInWeightStringContext(Context, State);
        EnterRule(_localctx, 586, RULE_levelsInWeightString);
        int _la;
        try
        {
            State = 5973;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 879, Context))
            {
                case 1:
                    _localctx = new LevelWeightListContext(_localctx);
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 5959; Match(LEVEL);
                        State = 5960; levelInWeightListElement();
                        State = 5965;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        while (_la == COMMA)
                        {
                            {
                                {
                                    State = 5961; Match(COMMA);
                                    State = 5962; levelInWeightListElement();
                                }
                            }
                            State = 5967;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                        }
                    }
                    break;
                case 2:
                    _localctx = new LevelWeightRangeContext(_localctx);
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 5968; Match(LEVEL);
                        State = 5969; ((LevelWeightRangeContext)_localctx).firstLevel = decimalLiteral();
                        State = 5970; Match(MINUS);
                        State = 5971; ((LevelWeightRangeContext)_localctx).lastLevel = decimalLiteral();
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class LevelInWeightListElementContext : ParserRuleContext
    {
        public IToken orderType;
        public DecimalLiteralContext decimalLiteral()
        {
            return GetRuleContext<DecimalLiteralContext>(0);
        }
        public ITerminalNode ASC() { return GetToken(MySqlParser.ASC, 0); }
        public ITerminalNode DESC() { return GetToken(MySqlParser.DESC, 0); }
        public ITerminalNode REVERSE() { return GetToken(MySqlParser.REVERSE, 0); }
        public LevelInWeightListElementContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_levelInWeightListElement; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterLevelInWeightListElement(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitLevelInWeightListElement(this);
        }
    }

    [RuleVersion(0)]
    public LevelInWeightListElementContext levelInWeightListElement()
    {
        LevelInWeightListElementContext _localctx = new LevelInWeightListElementContext(Context, State);
        EnterRule(_localctx, 588, RULE_levelInWeightListElement);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 5975; decimalLiteral();
                State = 5977;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                if (_la == ASC || _la == DESC || _la == REVERSE)
                {
                    {
                        State = 5976;
                        _localctx.orderType = TokenStream.LT(1);
                        _la = TokenStream.LA(1);
                        if (!(_la == ASC || _la == DESC || _la == REVERSE))
                        {
                            _localctx.orderType = ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                    }
                }

            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class AggregateWindowedFunctionContext : ParserRuleContext
    {
        public IToken aggregator;
        public IToken starArg;
        public IToken separator;
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public FunctionArgContext functionArg()
        {
            return GetRuleContext<FunctionArgContext>(0);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public ITerminalNode AVG() { return GetToken(MySqlParser.AVG, 0); }
        public ITerminalNode MAX() { return GetToken(MySqlParser.MAX, 0); }
        public ITerminalNode MIN() { return GetToken(MySqlParser.MIN, 0); }
        public ITerminalNode SUM() { return GetToken(MySqlParser.SUM, 0); }
        public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
        public ITerminalNode DISTINCT() { return GetToken(MySqlParser.DISTINCT, 0); }
        public ITerminalNode COUNT() { return GetToken(MySqlParser.COUNT, 0); }
        public ITerminalNode STAR() { return GetToken(MySqlParser.STAR, 0); }
        public FunctionArgsContext functionArgs()
        {
            return GetRuleContext<FunctionArgsContext>(0);
        }
        public ITerminalNode BIT_AND() { return GetToken(MySqlParser.BIT_AND, 0); }
        public ITerminalNode BIT_OR() { return GetToken(MySqlParser.BIT_OR, 0); }
        public ITerminalNode BIT_XOR() { return GetToken(MySqlParser.BIT_XOR, 0); }
        public ITerminalNode STD() { return GetToken(MySqlParser.STD, 0); }
        public ITerminalNode STDDEV() { return GetToken(MySqlParser.STDDEV, 0); }
        public ITerminalNode STDDEV_POP() { return GetToken(MySqlParser.STDDEV_POP, 0); }
        public ITerminalNode STDDEV_SAMP() { return GetToken(MySqlParser.STDDEV_SAMP, 0); }
        public ITerminalNode VAR_POP() { return GetToken(MySqlParser.VAR_POP, 0); }
        public ITerminalNode VAR_SAMP() { return GetToken(MySqlParser.VAR_SAMP, 0); }
        public ITerminalNode VARIANCE() { return GetToken(MySqlParser.VARIANCE, 0); }
        public ITerminalNode GROUP_CONCAT() { return GetToken(MySqlParser.GROUP_CONCAT, 0); }
        public ITerminalNode ORDER() { return GetToken(MySqlParser.ORDER, 0); }
        public ITerminalNode BY() { return GetToken(MySqlParser.BY, 0); }
        public OrderByExpressionContext[] orderByExpression()
        {
            return GetRuleContexts<OrderByExpressionContext>();
        }
        public OrderByExpressionContext orderByExpression(int i)
        {
            return GetRuleContext<OrderByExpressionContext>(i);
        }
        public ITerminalNode SEPARATOR() { return GetToken(MySqlParser.SEPARATOR, 0); }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public AggregateWindowedFunctionContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_aggregateWindowedFunction; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterAggregateWindowedFunction(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitAggregateWindowedFunction(this);
        }
    }

    [RuleVersion(0)]
    public AggregateWindowedFunctionContext aggregateWindowedFunction()
    {
        AggregateWindowedFunctionContext _localctx = new AggregateWindowedFunctionContext(Context, State);
        EnterRule(_localctx, 590, RULE_aggregateWindowedFunction);
        int _la;
        try
        {
            State = 6035;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 889, Context))
            {
                case 1:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 5979;
                        _la = TokenStream.LA(1);
                        if (!(((((_la - 224)) & ~0x3f) == 0 && ((1L << (_la - 224)) & ((1L << (AVG - 224)) | (1L << (MAX - 224)) | (1L << (MIN - 224)) | (1L << (SUM - 224)))) != 0)))
                        {
                            ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                        State = 5980; Match(LR_BRACKET);
                        State = 5982;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == ALL || _la == DISTINCT)
                        {
                            {
                                State = 5981;
                                _localctx.aggregator = TokenStream.LT(1);
                                _la = TokenStream.LA(1);
                                if (!(_la == ALL || _la == DISTINCT))
                                {
                                    _localctx.aggregator = ErrorHandler.RecoverInline(this);
                                }
                                else
                                {
                                    ErrorHandler.ReportMatch(this);
                                    Consume();
                                }
                            }
                        }

                        State = 5984; functionArg();
                        State = 5985; Match(RR_BRACKET);
                    }
                    break;
                case 2:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 5987; Match(COUNT);
                        State = 5988; Match(LR_BRACKET);
                        State = 5994;
                        ErrorHandler.Sync(this);
                        switch (TokenStream.LA(1))
                        {
                            case STAR:
                                {
                                    State = 5989; _localctx.starArg = Match(STAR);
                                }
                                break;
                            case ALL:
                            case CASE:
                            case CAST:
                            case CONVERT:
                            case CURRENT:
                            case CURRENT_USER:
                            case DATABASE:
                            case DIAGNOSTICS:
                            case EXISTS:
                            case FALSE:
                            case IF:
                            case INSERT:
                            case INTERVAL:
                            case LEFT:
                            case NOT:
                            case NULL_LITERAL:
                            case NUMBER:
                            case REPLACE:
                            case RIGHT:
                            case STACKED:
                            case TRUE:
                            case VALUES:
                            case DATE:
                            case TIME:
                            case TIMESTAMP:
                            case DATETIME:
                            case YEAR:
                            case CHAR:
                            case BINARY:
                            case TEXT:
                            case ENUM:
                            case SERIAL:
                            case AVG:
                            case BIT_AND:
                            case BIT_OR:
                            case BIT_XOR:
                            case COUNT:
                            case GROUP_CONCAT:
                            case MAX:
                            case MIN:
                            case STD:
                            case STDDEV:
                            case STDDEV_POP:
                            case STDDEV_SAMP:
                            case SUM:
                            case VAR_POP:
                            case VAR_SAMP:
                            case VARIANCE:
                            case CURRENT_DATE:
                            case CURRENT_TIME:
                            case CURRENT_TIMESTAMP:
                            case LOCALTIME:
                            case CURDATE:
                            case CURTIME:
                            case DATE_ADD:
                            case DATE_SUB:
                            case EXTRACT:
                            case LOCALTIMESTAMP:
                            case NOW:
                            case POSITION:
                            case SUBSTR:
                            case SUBSTRING:
                            case SYSDATE:
                            case TRIM:
                            case UTC_DATE:
                            case UTC_TIME:
                            case UTC_TIMESTAMP:
                            case ACCOUNT:
                            case ACTION:
                            case AFTER:
                            case AGGREGATE:
                            case ALGORITHM:
                            case ANY:
                            case AT:
                            case AUTHORS:
                            case AUTOCOMMIT:
                            case AUTOEXTEND_SIZE:
                            case AUTO_INCREMENT:
                            case AVG_ROW_LENGTH:
                            case BEGIN:
                            case BINLOG:
                            case BIT:
                            case BLOCK:
                            case BOOL:
                            case BOOLEAN:
                            case BTREE:
                            case CACHE:
                            case CASCADED:
                            case CHAIN:
                            case CHANGED:
                            case CHANNEL:
                            case CHECKSUM:
                            case PAGE_CHECKSUM:
                            case CIPHER:
                            case CLASS_ORIGIN:
                            case CLIENT:
                            case CLOSE:
                            case COALESCE:
                            case CODE:
                            case COLUMNS:
                            case COLUMN_FORMAT:
                            case COLUMN_NAME:
                            case COMMENT:
                            case COMMIT:
                            case COMPACT:
                            case COMPLETION:
                            case COMPRESSED:
                            case COMPRESSION:
                            case CONCURRENT:
                            case CONNECTION:
                            case CONSISTENT:
                            case CONSTRAINT_CATALOG:
                            case CONSTRAINT_SCHEMA:
                            case CONSTRAINT_NAME:
                            case CONTAINS:
                            case CONTEXT:
                            case CONTRIBUTORS:
                            case COPY:
                            case CPU:
                            case CURSOR_NAME:
                            case DATA:
                            case DATAFILE:
                            case DEALLOCATE:
                            case DEFAULT_AUTH:
                            case DEFINER:
                            case DELAY_KEY_WRITE:
                            case DES_KEY_FILE:
                            case DIRECTORY:
                            case DISABLE:
                            case DISCARD:
                            case DISK:
                            case DO:
                            case DUMPFILE:
                            case DUPLICATE:
                            case DYNAMIC:
                            case ENABLE:
                            case ENCRYPTION:
                            case END:
                            case ENDS:
                            case ENGINE:
                            case ENGINES:
                            case ERROR:
                            case ERRORS:
                            case ESCAPE:
                            case EVEN:
                            case EVENT:
                            case EVENTS:
                            case EVERY:
                            case EXCHANGE:
                            case EXCLUSIVE:
                            case EXPIRE:
                            case EXPORT:
                            case EXTENDED:
                            case EXTENT_SIZE:
                            case FAST:
                            case FAULTS:
                            case FIELDS:
                            case FILE_BLOCK_SIZE:
                            case FILTER:
                            case FIRST:
                            case FIXED:
                            case FLUSH:
                            case FOLLOWS:
                            case FOUND:
                            case FULL:
                            case FUNCTION:
                            case GENERAL:
                            case GLOBAL:
                            case GRANTS:
                            case GROUP_REPLICATION:
                            case HANDLER:
                            case HASH:
                            case HELP:
                            case HOST:
                            case HOSTS:
                            case IDENTIFIED:
                            case IGNORE_SERVER_IDS:
                            case IMPORT:
                            case INDEXES:
                            case INITIAL_SIZE:
                            case INPLACE:
                            case INSERT_METHOD:
                            case INSTALL:
                            case INSTANCE:
                            case INVISIBLE:
                            case INVOKER:
                            case IO:
                            case IO_THREAD:
                            case IPC:
                            case ISOLATION:
                            case ISSUER:
                            case JSON:
                            case KEY_BLOCK_SIZE:
                            case LANGUAGE:
                            case LAST:
                            case LEAVES:
                            case LESS:
                            case LEVEL:
                            case LIST:
                            case LOCAL:
                            case LOGFILE:
                            case LOGS:
                            case MASTER:
                            case MASTER_AUTO_POSITION:
                            case MASTER_CONNECT_RETRY:
                            case MASTER_DELAY:
                            case MASTER_HEARTBEAT_PERIOD:
                            case MASTER_HOST:
                            case MASTER_LOG_FILE:
                            case MASTER_LOG_POS:
                            case MASTER_PASSWORD:
                            case MASTER_PORT:
                            case MASTER_RETRY_COUNT:
                            case MASTER_SSL:
                            case MASTER_SSL_CA:
                            case MASTER_SSL_CAPATH:
                            case MASTER_SSL_CERT:
                            case MASTER_SSL_CIPHER:
                            case MASTER_SSL_CRL:
                            case MASTER_SSL_CRLPATH:
                            case MASTER_SSL_KEY:
                            case MASTER_TLS_VERSION:
                            case MASTER_USER:
                            case MAX_CONNECTIONS_PER_HOUR:
                            case MAX_QUERIES_PER_HOUR:
                            case MAX_ROWS:
                            case MAX_SIZE:
                            case MAX_UPDATES_PER_HOUR:
                            case MAX_USER_CONNECTIONS:
                            case MEDIUM:
                            case MERGE:
                            case MESSAGE_TEXT:
                            case MID:
                            case MIGRATE:
                            case MIN_ROWS:
                            case MODE:
                            case MODIFY:
                            case MUTEX:
                            case MYSQL:
                            case MYSQL_ERRNO:
                            case NAME:
                            case NAMES:
                            case NCHAR:
                            case NEVER:
                            case NEXT:
                            case NO:
                            case NODEGROUP:
                            case NONE:
                            case OFFLINE:
                            case OFFSET:
                            case OJ:
                            case OLD_PASSWORD:
                            case ONE:
                            case ONLINE:
                            case ONLY:
                            case OPEN:
                            case OPTIMIZER_COSTS:
                            case OPTIONS:
                            case OWNER:
                            case PACK_KEYS:
                            case PAGE:
                            case PARSER:
                            case PARTIAL:
                            case PARTITIONING:
                            case PARTITIONS:
                            case PASSWORD:
                            case PHASE:
                            case PLUGIN:
                            case PLUGIN_DIR:
                            case PLUGINS:
                            case PORT:
                            case PRECEDES:
                            case PREPARE:
                            case PRESERVE:
                            case PREV:
                            case PROCESSLIST:
                            case PROFILE:
                            case PROFILES:
                            case PROXY:
                            case QUERY:
                            case QUICK:
                            case REBUILD:
                            case RECOVER:
                            case REDO_BUFFER_SIZE:
                            case REDUNDANT:
                            case RELAY:
                            case RELAY_LOG_FILE:
                            case RELAY_LOG_POS:
                            case RELAYLOG:
                            case REMOVE:
                            case REORGANIZE:
                            case REPAIR:
                            case REPLICATE_DO_DB:
                            case REPLICATE_DO_TABLE:
                            case REPLICATE_IGNORE_DB:
                            case REPLICATE_IGNORE_TABLE:
                            case REPLICATE_REWRITE_DB:
                            case REPLICATE_WILD_DO_TABLE:
                            case REPLICATE_WILD_IGNORE_TABLE:
                            case REPLICATION:
                            case RESET:
                            case RESUME:
                            case RETURNED_SQLSTATE:
                            case RETURNS:
                            case ROLLBACK:
                            case ROLLUP:
                            case ROTATE:
                            case ROW:
                            case ROWS:
                            case ROW_FORMAT:
                            case SAVEPOINT:
                            case SCHEDULE:
                            case SECURITY:
                            case SERVER:
                            case SESSION:
                            case SHARE:
                            case SHARED:
                            case SIGNED:
                            case SIMPLE:
                            case SLAVE:
                            case SLOW:
                            case SNAPSHOT:
                            case SOCKET:
                            case SOME:
                            case SONAME:
                            case SOUNDS:
                            case SOURCE:
                            case SQL_AFTER_GTIDS:
                            case SQL_AFTER_MTS_GAPS:
                            case SQL_BEFORE_GTIDS:
                            case SQL_BUFFER_RESULT:
                            case SQL_CACHE:
                            case SQL_NO_CACHE:
                            case SQL_THREAD:
                            case START:
                            case STARTS:
                            case STATS_AUTO_RECALC:
                            case STATS_PERSISTENT:
                            case STATS_SAMPLE_PAGES:
                            case STATUS:
                            case STOP:
                            case STORAGE:
                            case STRING:
                            case SUBCLASS_ORIGIN:
                            case SUBJECT:
                            case SUBPARTITION:
                            case SUBPARTITIONS:
                            case SUSPEND:
                            case SWAPS:
                            case SWITCHES:
                            case TABLE_NAME:
                            case TABLESPACE:
                            case TEMPORARY:
                            case TEMPTABLE:
                            case THAN:
                            case TRADITIONAL:
                            case TRANSACTION:
                            case TRIGGERS:
                            case TRUNCATE:
                            case UNDEFINED:
                            case UNDOFILE:
                            case UNDO_BUFFER_SIZE:
                            case UNINSTALL:
                            case UNKNOWN:
                            case UNTIL:
                            case UPGRADE:
                            case USER:
                            case USE_FRM:
                            case USER_RESOURCES:
                            case VALIDATION:
                            case VALUE:
                            case VARIABLES:
                            case VIEW:
                            case VISIBLE:
                            case WAIT:
                            case WARNINGS:
                            case WITHOUT:
                            case WORK:
                            case WRAPPER:
                            case X509:
                            case XA:
                            case XML:
                            case INTERNAL:
                            case QUARTER:
                            case MONTH:
                            case DAY:
                            case HOUR:
                            case MINUTE:
                            case WEEK:
                            case SECOND:
                            case MICROSECOND:
                            case TABLES:
                            case ROUTINE:
                            case EXECUTE:
                            case FILE:
                            case PROCESS:
                            case RELOAD:
                            case SHUTDOWN:
                            case SUPER:
                            case PRIVILEGES:
                            case SESSION_VARIABLES_ADMIN:
                            case ARMSCII8:
                            case ASCII:
                            case BIG5:
                            case CP1250:
                            case CP1251:
                            case CP1256:
                            case CP1257:
                            case CP850:
                            case CP852:
                            case CP866:
                            case CP932:
                            case DEC8:
                            case EUCJPMS:
                            case EUCKR:
                            case GB2312:
                            case GBK:
                            case GEOSTD8:
                            case GREEK:
                            case HEBREW:
                            case HP8:
                            case KEYBCS2:
                            case KOI8R:
                            case KOI8U:
                            case LATIN1:
                            case LATIN2:
                            case LATIN5:
                            case LATIN7:
                            case MACCE:
                            case MACROMAN:
                            case SJIS:
                            case SWE7:
                            case TIS620:
                            case UCS2:
                            case UJIS:
                            case UTF16:
                            case UTF16LE:
                            case UTF32:
                            case UTF8:
                            case UTF8MB3:
                            case UTF8MB4:
                            case ARCHIVE:
                            case BLACKHOLE:
                            case CSV:
                            case FEDERATED:
                            case INNODB:
                            case MEMORY:
                            case MRG_MYISAM:
                            case MYISAM:
                            case NDB:
                            case NDBCLUSTER:
                            case PERFORMANCE_SCHEMA:
                            case TOKUDB:
                            case REPEATABLE:
                            case COMMITTED:
                            case UNCOMMITTED:
                            case SERIALIZABLE:
                            case GEOMETRYCOLLECTION:
                            case LINESTRING:
                            case MULTILINESTRING:
                            case MULTIPOINT:
                            case MULTIPOLYGON:
                            case POINT:
                            case POLYGON:
                            case ABS:
                            case ACOS:
                            case ADDDATE:
                            case ADDTIME:
                            case AES_DECRYPT:
                            case AES_ENCRYPT:
                            case AREA:
                            case ASBINARY:
                            case ASIN:
                            case ASTEXT:
                            case ASWKB:
                            case ASWKT:
                            case ASYMMETRIC_DECRYPT:
                            case ASYMMETRIC_DERIVE:
                            case ASYMMETRIC_ENCRYPT:
                            case ASYMMETRIC_SIGN:
                            case ASYMMETRIC_VERIFY:
                            case ATAN:
                            case ATAN2:
                            case BENCHMARK:
                            case BIN:
                            case BIT_COUNT:
                            case BIT_LENGTH:
                            case BUFFER:
                            case CATALOG_NAME:
                            case CEIL:
                            case CEILING:
                            case CENTROID:
                            case CHARACTER_LENGTH:
                            case CHARSET:
                            case CHAR_LENGTH:
                            case COERCIBILITY:
                            case COLLATION:
                            case COMPRESS:
                            case CONCAT:
                            case CONCAT_WS:
                            case CONNECTION_ID:
                            case CONV:
                            case CONVERT_TZ:
                            case COS:
                            case COT:
                            case CRC32:
                            case CREATE_ASYMMETRIC_PRIV_KEY:
                            case CREATE_ASYMMETRIC_PUB_KEY:
                            case CREATE_DH_PARAMETERS:
                            case CREATE_DIGEST:
                            case CROSSES:
                            case DATEDIFF:
                            case DATE_FORMAT:
                            case DAYNAME:
                            case DAYOFMONTH:
                            case DAYOFWEEK:
                            case DAYOFYEAR:
                            case DECODE:
                            case DEGREES:
                            case DES_DECRYPT:
                            case DES_ENCRYPT:
                            case DIMENSION:
                            case DISJOINT:
                            case ELT:
                            case ENCODE:
                            case ENCRYPT:
                            case ENDPOINT:
                            case ENVELOPE:
                            case EQUALS:
                            case EXP:
                            case EXPORT_SET:
                            case EXTERIORRING:
                            case EXTRACTVALUE:
                            case FIELD:
                            case FIND_IN_SET:
                            case FLOOR:
                            case FORMAT:
                            case FOUND_ROWS:
                            case FROM_BASE64:
                            case FROM_DAYS:
                            case FROM_UNIXTIME:
                            case GEOMCOLLFROMTEXT:
                            case GEOMCOLLFROMWKB:
                            case GEOMETRYCOLLECTIONFROMTEXT:
                            case GEOMETRYCOLLECTIONFROMWKB:
                            case GEOMETRYFROMTEXT:
                            case GEOMETRYFROMWKB:
                            case GEOMETRYN:
                            case GEOMETRYTYPE:
                            case GEOMFROMTEXT:
                            case GEOMFROMWKB:
                            case GET_FORMAT:
                            case GET_LOCK:
                            case GLENGTH:
                            case GREATEST:
                            case GTID_SUBSET:
                            case GTID_SUBTRACT:
                            case HEX:
                            case IFNULL:
                            case INET6_ATON:
                            case INET6_NTOA:
                            case INET_ATON:
                            case INET_NTOA:
                            case INSTR:
                            case INTERIORRINGN:
                            case INTERSECTS:
                            case ISCLOSED:
                            case ISEMPTY:
                            case ISNULL:
                            case ISSIMPLE:
                            case IS_FREE_LOCK:
                            case IS_IPV4:
                            case IS_IPV4_COMPAT:
                            case IS_IPV4_MAPPED:
                            case IS_IPV6:
                            case IS_USED_LOCK:
                            case LAST_INSERT_ID:
                            case LCASE:
                            case LEAST:
                            case LENGTH:
                            case LINEFROMTEXT:
                            case LINEFROMWKB:
                            case LINESTRINGFROMTEXT:
                            case LINESTRINGFROMWKB:
                            case LN:
                            case LOAD_FILE:
                            case LOCATE:
                            case LOG:
                            case LOG10:
                            case LOG2:
                            case LOWER:
                            case LPAD:
                            case LTRIM:
                            case MAKEDATE:
                            case MAKETIME:
                            case MAKE_SET:
                            case MASTER_POS_WAIT:
                            case MBRCONTAINS:
                            case MBRDISJOINT:
                            case MBREQUAL:
                            case MBRINTERSECTS:
                            case MBROVERLAPS:
                            case MBRTOUCHES:
                            case MBRWITHIN:
                            case MD5:
                            case MLINEFROMTEXT:
                            case MLINEFROMWKB:
                            case MONTHNAME:
                            case MPOINTFROMTEXT:
                            case MPOINTFROMWKB:
                            case MPOLYFROMTEXT:
                            case MPOLYFROMWKB:
                            case MULTILINESTRINGFROMTEXT:
                            case MULTILINESTRINGFROMWKB:
                            case MULTIPOINTFROMTEXT:
                            case MULTIPOINTFROMWKB:
                            case MULTIPOLYGONFROMTEXT:
                            case MULTIPOLYGONFROMWKB:
                            case NAME_CONST:
                            case NULLIF:
                            case NUMGEOMETRIES:
                            case NUMINTERIORRINGS:
                            case NUMPOINTS:
                            case OCT:
                            case OCTET_LENGTH:
                            case ORD:
                            case OVERLAPS:
                            case PERIOD_ADD:
                            case PERIOD_DIFF:
                            case PI:
                            case POINTFROMTEXT:
                            case POINTFROMWKB:
                            case POINTN:
                            case POLYFROMTEXT:
                            case POLYFROMWKB:
                            case POLYGONFROMTEXT:
                            case POLYGONFROMWKB:
                            case POW:
                            case POWER:
                            case QUOTE:
                            case RADIANS:
                            case RAND:
                            case RANDOM_BYTES:
                            case RELEASE_LOCK:
                            case REVERSE:
                            case ROUND:
                            case ROW_COUNT:
                            case RPAD:
                            case RTRIM:
                            case SEC_TO_TIME:
                            case SESSION_USER:
                            case SHA:
                            case SHA1:
                            case SHA2:
                            case SCHEMA_NAME:
                            case SIGN:
                            case SIN:
                            case SLEEP:
                            case SOUNDEX:
                            case SQL_THREAD_WAIT_AFTER_GTIDS:
                            case SQRT:
                            case SRID:
                            case STARTPOINT:
                            case STRCMP:
                            case STR_TO_DATE:
                            case ST_AREA:
                            case ST_ASBINARY:
                            case ST_ASTEXT:
                            case ST_ASWKB:
                            case ST_ASWKT:
                            case ST_BUFFER:
                            case ST_CENTROID:
                            case ST_CONTAINS:
                            case ST_CROSSES:
                            case ST_DIFFERENCE:
                            case ST_DIMENSION:
                            case ST_DISJOINT:
                            case ST_DISTANCE:
                            case ST_ENDPOINT:
                            case ST_ENVELOPE:
                            case ST_EQUALS:
                            case ST_EXTERIORRING:
                            case ST_GEOMCOLLFROMTEXT:
                            case ST_GEOMCOLLFROMTXT:
                            case ST_GEOMCOLLFROMWKB:
                            case ST_GEOMETRYCOLLECTIONFROMTEXT:
                            case ST_GEOMETRYCOLLECTIONFROMWKB:
                            case ST_GEOMETRYFROMTEXT:
                            case ST_GEOMETRYFROMWKB:
                            case ST_GEOMETRYN:
                            case ST_GEOMETRYTYPE:
                            case ST_GEOMFROMTEXT:
                            case ST_GEOMFROMWKB:
                            case ST_INTERIORRINGN:
                            case ST_INTERSECTION:
                            case ST_INTERSECTS:
                            case ST_ISCLOSED:
                            case ST_ISEMPTY:
                            case ST_ISSIMPLE:
                            case ST_LINEFROMTEXT:
                            case ST_LINEFROMWKB:
                            case ST_LINESTRINGFROMTEXT:
                            case ST_LINESTRINGFROMWKB:
                            case ST_NUMGEOMETRIES:
                            case ST_NUMINTERIORRING:
                            case ST_NUMINTERIORRINGS:
                            case ST_NUMPOINTS:
                            case ST_OVERLAPS:
                            case ST_POINTFROMTEXT:
                            case ST_POINTFROMWKB:
                            case ST_POINTN:
                            case ST_POLYFROMTEXT:
                            case ST_POLYFROMWKB:
                            case ST_POLYGONFROMTEXT:
                            case ST_POLYGONFROMWKB:
                            case ST_SRID:
                            case ST_STARTPOINT:
                            case ST_SYMDIFFERENCE:
                            case ST_TOUCHES:
                            case ST_UNION:
                            case ST_WITHIN:
                            case ST_X:
                            case ST_Y:
                            case SUBDATE:
                            case SUBSTRING_INDEX:
                            case SUBTIME:
                            case SYSTEM_USER:
                            case TAN:
                            case TIMEDIFF:
                            case TIMESTAMPADD:
                            case TIMESTAMPDIFF:
                            case TIME_FORMAT:
                            case TIME_TO_SEC:
                            case TOUCHES:
                            case TO_BASE64:
                            case TO_DAYS:
                            case TO_SECONDS:
                            case UCASE:
                            case UNCOMPRESS:
                            case UNCOMPRESSED_LENGTH:
                            case UNHEX:
                            case UNIX_TIMESTAMP:
                            case UPDATEXML:
                            case UPPER:
                            case UUID:
                            case UUID_SHORT:
                            case VALIDATE_PASSWORD_STRENGTH:
                            case VERSION:
                            case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
                            case WEEKDAY:
                            case WEEKOFYEAR:
                            case WEIGHT_STRING:
                            case WITHIN:
                            case YEARWEEK:
                            case Y_FUNCTION:
                            case X_FUNCTION:
                            case PLUS:
                            case MINUS:
                            case EXCLAMATION_SYMBOL:
                            case BIT_NOT_OP:
                            case LR_BRACKET:
                            case ZERO_DECIMAL:
                            case ONE_DECIMAL:
                            case TWO_DECIMAL:
                            case CHARSET_REVERSE_QOUTE_STRING:
                            case START_NATIONAL_STRING_LITERAL:
                            case STRING_LITERAL:
                            case DECIMAL_LITERAL:
                            case HEXADECIMAL_LITERAL:
                            case REAL_LITERAL:
                            case NULL_SPEC_LITERAL:
                            case BIT_STRING:
                            case STRING_CHARSET_NAME:
                            case ID:
                            case REVERSE_QUOTE_ID:
                            case LOCAL_ID:
                            case GLOBAL_ID:
                                {
                                    State = 5991;
                                    ErrorHandler.Sync(this);
                                    _la = TokenStream.LA(1);
                                    if (_la == ALL)
                                    {
                                        {
                                            State = 5990; _localctx.aggregator = Match(ALL);
                                        }
                                    }

                                    State = 5993; functionArg();
                                }
                                break;
                            default:
                                throw new NoViableAltException(this);
                        }
                        State = 5996; Match(RR_BRACKET);
                    }
                    break;
                case 3:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 5997; Match(COUNT);
                        State = 5998; Match(LR_BRACKET);
                        State = 5999; _localctx.aggregator = Match(DISTINCT);
                        State = 6000; functionArgs();
                        State = 6001; Match(RR_BRACKET);
                    }
                    break;
                case 4:
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 6003;
                        _la = TokenStream.LA(1);
                        if (!(((((_la - 225)) & ~0x3f) == 0 && ((1L << (_la - 225)) & ((1L << (BIT_AND - 225)) | (1L << (BIT_OR - 225)) | (1L << (BIT_XOR - 225)) | (1L << (STD - 225)) | (1L << (STDDEV - 225)) | (1L << (STDDEV_POP - 225)) | (1L << (STDDEV_SAMP - 225)) | (1L << (VAR_POP - 225)) | (1L << (VAR_SAMP - 225)) | (1L << (VARIANCE - 225)))) != 0)))
                        {
                            ErrorHandler.RecoverInline(this);
                        }
                        else
                        {
                            ErrorHandler.ReportMatch(this);
                            Consume();
                        }
                        State = 6004; Match(LR_BRACKET);
                        State = 6006;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == ALL)
                        {
                            {
                                State = 6005; _localctx.aggregator = Match(ALL);
                            }
                        }

                        State = 6008; functionArg();
                        State = 6009; Match(RR_BRACKET);
                    }
                    break;
                case 5:
                    EnterOuterAlt(_localctx, 5);
                    {
                        State = 6011; Match(GROUP_CONCAT);
                        State = 6012; Match(LR_BRACKET);
                        State = 6014;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == DISTINCT)
                        {
                            {
                                State = 6013; _localctx.aggregator = Match(DISTINCT);
                            }
                        }

                        State = 6016; functionArgs();
                        State = 6027;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == ORDER)
                        {
                            {
                                State = 6017; Match(ORDER);
                                State = 6018; Match(BY);
                                State = 6019; orderByExpression();
                                State = 6024;
                                ErrorHandler.Sync(this);
                                _la = TokenStream.LA(1);
                                while (_la == COMMA)
                                {
                                    {
                                        {
                                            State = 6020; Match(COMMA);
                                            State = 6021; orderByExpression();
                                        }
                                    }
                                    State = 6026;
                                    ErrorHandler.Sync(this);
                                    _la = TokenStream.LA(1);
                                }
                            }
                        }

                        State = 6031;
                        ErrorHandler.Sync(this);
                        _la = TokenStream.LA(1);
                        if (_la == SEPARATOR)
                        {
                            {
                                State = 6029; Match(SEPARATOR);
                                State = 6030; _localctx.separator = Match(STRING_LITERAL);
                            }
                        }

                        State = 6033; Match(RR_BRACKET);
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ScalarFunctionNameContext : ParserRuleContext
    {
        public FunctionNameBaseContext functionNameBase()
        {
            return GetRuleContext<FunctionNameBaseContext>(0);
        }
        public ITerminalNode ASCII() { return GetToken(MySqlParser.ASCII, 0); }
        public ITerminalNode CURDATE() { return GetToken(MySqlParser.CURDATE, 0); }
        public ITerminalNode CURRENT_DATE() { return GetToken(MySqlParser.CURRENT_DATE, 0); }
        public ITerminalNode CURRENT_TIME() { return GetToken(MySqlParser.CURRENT_TIME, 0); }
        public ITerminalNode CURRENT_TIMESTAMP() { return GetToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
        public ITerminalNode CURTIME() { return GetToken(MySqlParser.CURTIME, 0); }
        public ITerminalNode DATE_ADD() { return GetToken(MySqlParser.DATE_ADD, 0); }
        public ITerminalNode DATE_SUB() { return GetToken(MySqlParser.DATE_SUB, 0); }
        public ITerminalNode IF() { return GetToken(MySqlParser.IF, 0); }
        public ITerminalNode INSERT() { return GetToken(MySqlParser.INSERT, 0); }
        public ITerminalNode LOCALTIME() { return GetToken(MySqlParser.LOCALTIME, 0); }
        public ITerminalNode LOCALTIMESTAMP() { return GetToken(MySqlParser.LOCALTIMESTAMP, 0); }
        public ITerminalNode MID() { return GetToken(MySqlParser.MID, 0); }
        public ITerminalNode NOW() { return GetToken(MySqlParser.NOW, 0); }
        public ITerminalNode REPLACE() { return GetToken(MySqlParser.REPLACE, 0); }
        public ITerminalNode SUBSTR() { return GetToken(MySqlParser.SUBSTR, 0); }
        public ITerminalNode SUBSTRING() { return GetToken(MySqlParser.SUBSTRING, 0); }
        public ITerminalNode SYSDATE() { return GetToken(MySqlParser.SYSDATE, 0); }
        public ITerminalNode TRIM() { return GetToken(MySqlParser.TRIM, 0); }
        public ITerminalNode UTC_DATE() { return GetToken(MySqlParser.UTC_DATE, 0); }
        public ITerminalNode UTC_TIME() { return GetToken(MySqlParser.UTC_TIME, 0); }
        public ITerminalNode UTC_TIMESTAMP() { return GetToken(MySqlParser.UTC_TIMESTAMP, 0); }
        public ScalarFunctionNameContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_scalarFunctionName; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterScalarFunctionName(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitScalarFunctionName(this);
        }
    }

    [RuleVersion(0)]
    public ScalarFunctionNameContext scalarFunctionName()
    {
        ScalarFunctionNameContext _localctx = new ScalarFunctionNameContext(Context, State);
        EnterRule(_localctx, 592, RULE_scalarFunctionName);
        try
        {
            State = 6060;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case DATABASE:
                case LEFT:
                case RIGHT:
                case DATE:
                case TIME:
                case TIMESTAMP:
                case YEAR:
                case COUNT:
                case POSITION:
                case INVISIBLE:
                case VISIBLE:
                case QUARTER:
                case MONTH:
                case DAY:
                case HOUR:
                case MINUTE:
                case WEEK:
                case SECOND:
                case MICROSECOND:
                case SESSION_VARIABLES_ADMIN:
                case GEOMETRYCOLLECTION:
                case LINESTRING:
                case MULTILINESTRING:
                case MULTIPOINT:
                case MULTIPOLYGON:
                case POINT:
                case POLYGON:
                case ABS:
                case ACOS:
                case ADDDATE:
                case ADDTIME:
                case AES_DECRYPT:
                case AES_ENCRYPT:
                case AREA:
                case ASBINARY:
                case ASIN:
                case ASTEXT:
                case ASWKB:
                case ASWKT:
                case ASYMMETRIC_DECRYPT:
                case ASYMMETRIC_DERIVE:
                case ASYMMETRIC_ENCRYPT:
                case ASYMMETRIC_SIGN:
                case ASYMMETRIC_VERIFY:
                case ATAN:
                case ATAN2:
                case BENCHMARK:
                case BIN:
                case BIT_COUNT:
                case BIT_LENGTH:
                case BUFFER:
                case CEIL:
                case CEILING:
                case CENTROID:
                case CHARACTER_LENGTH:
                case CHARSET:
                case CHAR_LENGTH:
                case COERCIBILITY:
                case COLLATION:
                case COMPRESS:
                case CONCAT:
                case CONCAT_WS:
                case CONNECTION_ID:
                case CONV:
                case CONVERT_TZ:
                case COS:
                case COT:
                case CRC32:
                case CREATE_ASYMMETRIC_PRIV_KEY:
                case CREATE_ASYMMETRIC_PUB_KEY:
                case CREATE_DH_PARAMETERS:
                case CREATE_DIGEST:
                case CROSSES:
                case DATEDIFF:
                case DATE_FORMAT:
                case DAYNAME:
                case DAYOFMONTH:
                case DAYOFWEEK:
                case DAYOFYEAR:
                case DECODE:
                case DEGREES:
                case DES_DECRYPT:
                case DES_ENCRYPT:
                case DIMENSION:
                case DISJOINT:
                case ELT:
                case ENCODE:
                case ENCRYPT:
                case ENDPOINT:
                case ENVELOPE:
                case EQUALS:
                case EXP:
                case EXPORT_SET:
                case EXTERIORRING:
                case EXTRACTVALUE:
                case FIELD:
                case FIND_IN_SET:
                case FLOOR:
                case FORMAT:
                case FOUND_ROWS:
                case FROM_BASE64:
                case FROM_DAYS:
                case FROM_UNIXTIME:
                case GEOMCOLLFROMTEXT:
                case GEOMCOLLFROMWKB:
                case GEOMETRYCOLLECTIONFROMTEXT:
                case GEOMETRYCOLLECTIONFROMWKB:
                case GEOMETRYFROMTEXT:
                case GEOMETRYFROMWKB:
                case GEOMETRYN:
                case GEOMETRYTYPE:
                case GEOMFROMTEXT:
                case GEOMFROMWKB:
                case GET_FORMAT:
                case GET_LOCK:
                case GLENGTH:
                case GREATEST:
                case GTID_SUBSET:
                case GTID_SUBTRACT:
                case HEX:
                case IFNULL:
                case INET6_ATON:
                case INET6_NTOA:
                case INET_ATON:
                case INET_NTOA:
                case INSTR:
                case INTERIORRINGN:
                case INTERSECTS:
                case ISCLOSED:
                case ISEMPTY:
                case ISNULL:
                case ISSIMPLE:
                case IS_FREE_LOCK:
                case IS_IPV4:
                case IS_IPV4_COMPAT:
                case IS_IPV4_MAPPED:
                case IS_IPV6:
                case IS_USED_LOCK:
                case LAST_INSERT_ID:
                case LCASE:
                case LEAST:
                case LENGTH:
                case LINEFROMTEXT:
                case LINEFROMWKB:
                case LINESTRINGFROMTEXT:
                case LINESTRINGFROMWKB:
                case LN:
                case LOAD_FILE:
                case LOCATE:
                case LOG:
                case LOG10:
                case LOG2:
                case LOWER:
                case LPAD:
                case LTRIM:
                case MAKEDATE:
                case MAKETIME:
                case MAKE_SET:
                case MASTER_POS_WAIT:
                case MBRCONTAINS:
                case MBRDISJOINT:
                case MBREQUAL:
                case MBRINTERSECTS:
                case MBROVERLAPS:
                case MBRTOUCHES:
                case MBRWITHIN:
                case MD5:
                case MLINEFROMTEXT:
                case MLINEFROMWKB:
                case MONTHNAME:
                case MPOINTFROMTEXT:
                case MPOINTFROMWKB:
                case MPOLYFROMTEXT:
                case MPOLYFROMWKB:
                case MULTILINESTRINGFROMTEXT:
                case MULTILINESTRINGFROMWKB:
                case MULTIPOINTFROMTEXT:
                case MULTIPOINTFROMWKB:
                case MULTIPOLYGONFROMTEXT:
                case MULTIPOLYGONFROMWKB:
                case NAME_CONST:
                case NULLIF:
                case NUMGEOMETRIES:
                case NUMINTERIORRINGS:
                case NUMPOINTS:
                case OCT:
                case OCTET_LENGTH:
                case ORD:
                case OVERLAPS:
                case PERIOD_ADD:
                case PERIOD_DIFF:
                case PI:
                case POINTFROMTEXT:
                case POINTFROMWKB:
                case POINTN:
                case POLYFROMTEXT:
                case POLYFROMWKB:
                case POLYGONFROMTEXT:
                case POLYGONFROMWKB:
                case POW:
                case POWER:
                case QUOTE:
                case RADIANS:
                case RAND:
                case RANDOM_BYTES:
                case RELEASE_LOCK:
                case REVERSE:
                case ROUND:
                case ROW_COUNT:
                case RPAD:
                case RTRIM:
                case SEC_TO_TIME:
                case SESSION_USER:
                case SHA:
                case SHA1:
                case SHA2:
                case SIGN:
                case SIN:
                case SLEEP:
                case SOUNDEX:
                case SQL_THREAD_WAIT_AFTER_GTIDS:
                case SQRT:
                case SRID:
                case STARTPOINT:
                case STRCMP:
                case STR_TO_DATE:
                case ST_AREA:
                case ST_ASBINARY:
                case ST_ASTEXT:
                case ST_ASWKB:
                case ST_ASWKT:
                case ST_BUFFER:
                case ST_CENTROID:
                case ST_CONTAINS:
                case ST_CROSSES:
                case ST_DIFFERENCE:
                case ST_DIMENSION:
                case ST_DISJOINT:
                case ST_DISTANCE:
                case ST_ENDPOINT:
                case ST_ENVELOPE:
                case ST_EQUALS:
                case ST_EXTERIORRING:
                case ST_GEOMCOLLFROMTEXT:
                case ST_GEOMCOLLFROMTXT:
                case ST_GEOMCOLLFROMWKB:
                case ST_GEOMETRYCOLLECTIONFROMTEXT:
                case ST_GEOMETRYCOLLECTIONFROMWKB:
                case ST_GEOMETRYFROMTEXT:
                case ST_GEOMETRYFROMWKB:
                case ST_GEOMETRYN:
                case ST_GEOMETRYTYPE:
                case ST_GEOMFROMTEXT:
                case ST_GEOMFROMWKB:
                case ST_INTERIORRINGN:
                case ST_INTERSECTION:
                case ST_INTERSECTS:
                case ST_ISCLOSED:
                case ST_ISEMPTY:
                case ST_ISSIMPLE:
                case ST_LINEFROMTEXT:
                case ST_LINEFROMWKB:
                case ST_LINESTRINGFROMTEXT:
                case ST_LINESTRINGFROMWKB:
                case ST_NUMGEOMETRIES:
                case ST_NUMINTERIORRING:
                case ST_NUMINTERIORRINGS:
                case ST_NUMPOINTS:
                case ST_OVERLAPS:
                case ST_POINTFROMTEXT:
                case ST_POINTFROMWKB:
                case ST_POINTN:
                case ST_POLYFROMTEXT:
                case ST_POLYFROMWKB:
                case ST_POLYGONFROMTEXT:
                case ST_POLYGONFROMWKB:
                case ST_SRID:
                case ST_STARTPOINT:
                case ST_SYMDIFFERENCE:
                case ST_TOUCHES:
                case ST_UNION:
                case ST_WITHIN:
                case ST_X:
                case ST_Y:
                case SUBDATE:
                case SUBSTRING_INDEX:
                case SUBTIME:
                case SYSTEM_USER:
                case TAN:
                case TIMEDIFF:
                case TIMESTAMPADD:
                case TIMESTAMPDIFF:
                case TIME_FORMAT:
                case TIME_TO_SEC:
                case TOUCHES:
                case TO_BASE64:
                case TO_DAYS:
                case TO_SECONDS:
                case UCASE:
                case UNCOMPRESS:
                case UNCOMPRESSED_LENGTH:
                case UNHEX:
                case UNIX_TIMESTAMP:
                case UPDATEXML:
                case UPPER:
                case UUID:
                case UUID_SHORT:
                case VALIDATE_PASSWORD_STRENGTH:
                case VERSION:
                case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
                case WEEKDAY:
                case WEEKOFYEAR:
                case WEIGHT_STRING:
                case WITHIN:
                case YEARWEEK:
                case Y_FUNCTION:
                case X_FUNCTION:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 6037; functionNameBase();
                    }
                    break;
                case ASCII:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 6038; Match(ASCII);
                    }
                    break;
                case CURDATE:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 6039; Match(CURDATE);
                    }
                    break;
                case CURRENT_DATE:
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 6040; Match(CURRENT_DATE);
                    }
                    break;
                case CURRENT_TIME:
                    EnterOuterAlt(_localctx, 5);
                    {
                        State = 6041; Match(CURRENT_TIME);
                    }
                    break;
                case CURRENT_TIMESTAMP:
                    EnterOuterAlt(_localctx, 6);
                    {
                        State = 6042; Match(CURRENT_TIMESTAMP);
                    }
                    break;
                case CURTIME:
                    EnterOuterAlt(_localctx, 7);
                    {
                        State = 6043; Match(CURTIME);
                    }
                    break;
                case DATE_ADD:
                    EnterOuterAlt(_localctx, 8);
                    {
                        State = 6044; Match(DATE_ADD);
                    }
                    break;
                case DATE_SUB:
                    EnterOuterAlt(_localctx, 9);
                    {
                        State = 6045; Match(DATE_SUB);
                    }
                    break;
                case IF:
                    EnterOuterAlt(_localctx, 10);
                    {
                        State = 6046; Match(IF);
                    }
                    break;
                case INSERT:
                    EnterOuterAlt(_localctx, 11);
                    {
                        State = 6047; Match(INSERT);
                    }
                    break;
                case LOCALTIME:
                    EnterOuterAlt(_localctx, 12);
                    {
                        State = 6048; Match(LOCALTIME);
                    }
                    break;
                case LOCALTIMESTAMP:
                    EnterOuterAlt(_localctx, 13);
                    {
                        State = 6049; Match(LOCALTIMESTAMP);
                    }
                    break;
                case MID:
                    EnterOuterAlt(_localctx, 14);
                    {
                        State = 6050; Match(MID);
                    }
                    break;
                case NOW:
                    EnterOuterAlt(_localctx, 15);
                    {
                        State = 6051; Match(NOW);
                    }
                    break;
                case REPLACE:
                    EnterOuterAlt(_localctx, 16);
                    {
                        State = 6052; Match(REPLACE);
                    }
                    break;
                case SUBSTR:
                    EnterOuterAlt(_localctx, 17);
                    {
                        State = 6053; Match(SUBSTR);
                    }
                    break;
                case SUBSTRING:
                    EnterOuterAlt(_localctx, 18);
                    {
                        State = 6054; Match(SUBSTRING);
                    }
                    break;
                case SYSDATE:
                    EnterOuterAlt(_localctx, 19);
                    {
                        State = 6055; Match(SYSDATE);
                    }
                    break;
                case TRIM:
                    EnterOuterAlt(_localctx, 20);
                    {
                        State = 6056; Match(TRIM);
                    }
                    break;
                case UTC_DATE:
                    EnterOuterAlt(_localctx, 21);
                    {
                        State = 6057; Match(UTC_DATE);
                    }
                    break;
                case UTC_TIME:
                    EnterOuterAlt(_localctx, 22);
                    {
                        State = 6058; Match(UTC_TIME);
                    }
                    break;
                case UTC_TIMESTAMP:
                    EnterOuterAlt(_localctx, 23);
                    {
                        State = 6059; Match(UTC_TIMESTAMP);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class PasswordFunctionClauseContext : ParserRuleContext
    {
        public IToken functionName;
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public FunctionArgContext functionArg()
        {
            return GetRuleContext<FunctionArgContext>(0);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public ITerminalNode PASSWORD() { return GetToken(MySqlParser.PASSWORD, 0); }
        public ITerminalNode OLD_PASSWORD() { return GetToken(MySqlParser.OLD_PASSWORD, 0); }
        public PasswordFunctionClauseContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_passwordFunctionClause; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterPasswordFunctionClause(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitPasswordFunctionClause(this);
        }
    }

    [RuleVersion(0)]
    public PasswordFunctionClauseContext passwordFunctionClause()
    {
        PasswordFunctionClauseContext _localctx = new PasswordFunctionClauseContext(Context, State);
        EnterRule(_localctx, 594, RULE_passwordFunctionClause);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 6062;
                _localctx.functionName = TokenStream.LT(1);
                _la = TokenStream.LA(1);
                if (!(_la == OLD_PASSWORD || _la == PASSWORD))
                {
                    _localctx.functionName = ErrorHandler.RecoverInline(this);
                }
                else
                {
                    ErrorHandler.ReportMatch(this);
                    Consume();
                }
                State = 6063; Match(LR_BRACKET);
                State = 6064; functionArg();
                State = 6065; Match(RR_BRACKET);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class FunctionArgsContext : ParserRuleContext
    {
        public ConstantContext[] constant()
        {
            return GetRuleContexts<ConstantContext>();
        }
        public ConstantContext constant(int i)
        {
            return GetRuleContext<ConstantContext>(i);
        }
        public FullColumnNameContext[] fullColumnName()
        {
            return GetRuleContexts<FullColumnNameContext>();
        }
        public FullColumnNameContext fullColumnName(int i)
        {
            return GetRuleContext<FullColumnNameContext>(i);
        }
        public FunctionCallContext[] functionCall()
        {
            return GetRuleContexts<FunctionCallContext>();
        }
        public FunctionCallContext functionCall(int i)
        {
            return GetRuleContext<FunctionCallContext>(i);
        }
        public ExpressionContext[] expression()
        {
            return GetRuleContexts<ExpressionContext>();
        }
        public ExpressionContext expression(int i)
        {
            return GetRuleContext<ExpressionContext>(i);
        }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public FunctionArgsContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_functionArgs; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterFunctionArgs(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitFunctionArgs(this);
        }
    }

    [RuleVersion(0)]
    public FunctionArgsContext functionArgs()
    {
        FunctionArgsContext _localctx = new FunctionArgsContext(Context, State);
        EnterRule(_localctx, 596, RULE_functionArgs);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 6071;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 891, Context))
                {
                    case 1:
                        {
                            State = 6067; constant();
                        }
                        break;
                    case 2:
                        {
                            State = 6068; fullColumnName();
                        }
                        break;
                    case 3:
                        {
                            State = 6069; functionCall();
                        }
                        break;
                    case 4:
                        {
                            State = 6070; expression(0);
                        }
                        break;
                }
                State = 6082;
                ErrorHandler.Sync(this);
                _la = TokenStream.LA(1);
                while (_la == COMMA)
                {
                    {
                        {
                            State = 6073; Match(COMMA);
                            State = 6078;
                            ErrorHandler.Sync(this);
                            switch (Interpreter.AdaptivePredict(TokenStream, 892, Context))
                            {
                                case 1:
                                    {
                                        State = 6074; constant();
                                    }
                                    break;
                                case 2:
                                    {
                                        State = 6075; fullColumnName();
                                    }
                                    break;
                                case 3:
                                    {
                                        State = 6076; functionCall();
                                    }
                                    break;
                                case 4:
                                    {
                                        State = 6077; expression(0);
                                    }
                                    break;
                            }
                        }
                    }
                    State = 6084;
                    ErrorHandler.Sync(this);
                    _la = TokenStream.LA(1);
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class FunctionArgContext : ParserRuleContext
    {
        public ConstantContext constant()
        {
            return GetRuleContext<ConstantContext>(0);
        }
        public FullColumnNameContext fullColumnName()
        {
            return GetRuleContext<FullColumnNameContext>(0);
        }
        public FunctionCallContext functionCall()
        {
            return GetRuleContext<FunctionCallContext>(0);
        }
        public ExpressionContext expression()
        {
            return GetRuleContext<ExpressionContext>(0);
        }
        public FunctionArgContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_functionArg; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterFunctionArg(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitFunctionArg(this);
        }
    }

    [RuleVersion(0)]
    public FunctionArgContext functionArg()
    {
        FunctionArgContext _localctx = new FunctionArgContext(Context, State);
        EnterRule(_localctx, 598, RULE_functionArg);
        try
        {
            State = 6089;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 894, Context))
            {
                case 1:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 6085; constant();
                    }
                    break;
                case 2:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 6086; fullColumnName();
                    }
                    break;
                case 3:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 6087; functionCall();
                    }
                    break;
                case 4:
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 6088; expression(0);
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ExpressionContext : ParserRuleContext
    {
        public ExpressionContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_expression; } }

        public ExpressionContext() { }
        public virtual void CopyFrom(ExpressionContext context)
        {
            base.CopyFrom(context);
        }
    }
    public partial class IsExpressionContext : ExpressionContext
    {
        public IToken testValue;
        public PredicateContext predicate()
        {
            return GetRuleContext<PredicateContext>(0);
        }
        public ITerminalNode IS() { return GetToken(MySqlParser.IS, 0); }
        public ITerminalNode TRUE() { return GetToken(MySqlParser.TRUE, 0); }
        public ITerminalNode FALSE() { return GetToken(MySqlParser.FALSE, 0); }
        public ITerminalNode UNKNOWN() { return GetToken(MySqlParser.UNKNOWN, 0); }
        public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
        public IsExpressionContext(ExpressionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterIsExpression(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitIsExpression(this);
        }
    }
    public partial class NotExpressionContext : ExpressionContext
    {
        public IToken notOperator;
        public ExpressionContext expression()
        {
            return GetRuleContext<ExpressionContext>(0);
        }
        public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
        public ITerminalNode EXCLAMATION_SYMBOL() { return GetToken(MySqlParser.EXCLAMATION_SYMBOL, 0); }
        public NotExpressionContext(ExpressionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterNotExpression(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitNotExpression(this);
        }
    }
    public partial class LogicalExpressionContext : ExpressionContext
    {
        public ExpressionContext[] expression()
        {
            return GetRuleContexts<ExpressionContext>();
        }
        public ExpressionContext expression(int i)
        {
            return GetRuleContext<ExpressionContext>(i);
        }
        public LogicalOperatorContext logicalOperator()
        {
            return GetRuleContext<LogicalOperatorContext>(0);
        }
        public LogicalExpressionContext(ExpressionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterLogicalExpression(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitLogicalExpression(this);
        }
    }
    public partial class PredicateExpressionContext : ExpressionContext
    {
        public PredicateContext predicate()
        {
            return GetRuleContext<PredicateContext>(0);
        }
        public PredicateExpressionContext(ExpressionContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterPredicateExpression(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitPredicateExpression(this);
        }
    }

    [RuleVersion(0)]
    public ExpressionContext expression()
    {
        return expression(0);
    }

    private ExpressionContext expression(int _p)
    {
        ParserRuleContext _parentctx = Context;
        int _parentState = State;
        ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
        ExpressionContext _prevctx = _localctx;
        int _startState = 600;
        EnterRecursionRule(_localctx, 600, RULE_expression, _p);
        int _la;
        try
        {
            int _alt;
            EnterOuterAlt(_localctx, 1);
            {
                State = 6102;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 896, Context))
                {
                    case 1:
                        {
                            _localctx = new NotExpressionContext(_localctx);
                            Context = _localctx;
                            _prevctx = _localctx;

                            State = 6092;
                            ((NotExpressionContext)_localctx).notOperator = TokenStream.LT(1);
                            _la = TokenStream.LA(1);
                            if (!(_la == NOT || _la == EXCLAMATION_SYMBOL))
                            {
                                ((NotExpressionContext)_localctx).notOperator = ErrorHandler.RecoverInline(this);
                            }
                            else
                            {
                                ErrorHandler.ReportMatch(this);
                                Consume();
                            }
                            State = 6093; expression(4);
                        }
                        break;
                    case 2:
                        {
                            _localctx = new IsExpressionContext(_localctx);
                            Context = _localctx;
                            _prevctx = _localctx;
                            State = 6094; predicate(0);
                            State = 6095; Match(IS);
                            State = 6097;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            if (_la == NOT)
                            {
                                {
                                    State = 6096; Match(NOT);
                                }
                            }

                            State = 6099;
                            ((IsExpressionContext)_localctx).testValue = TokenStream.LT(1);
                            _la = TokenStream.LA(1);
                            if (!(_la == FALSE || _la == TRUE || _la == UNKNOWN))
                            {
                                ((IsExpressionContext)_localctx).testValue = ErrorHandler.RecoverInline(this);
                            }
                            else
                            {
                                ErrorHandler.ReportMatch(this);
                                Consume();
                            }
                        }
                        break;
                    case 3:
                        {
                            _localctx = new PredicateExpressionContext(_localctx);
                            Context = _localctx;
                            _prevctx = _localctx;
                            State = 6101; predicate(0);
                        }
                        break;
                }
                Context.Stop = TokenStream.LT(-1);
                State = 6110;
                ErrorHandler.Sync(this);
                _alt = Interpreter.AdaptivePredict(TokenStream, 897, Context);
                while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                {
                    if (_alt == 1)
                    {
                        if (ParseListeners != null)
                            TriggerExitRuleEvent();
                        _prevctx = _localctx;
                        {
                            {
                                _localctx = new LogicalExpressionContext(new ExpressionContext(_parentctx, _parentState));
                                PushNewRecursionContext(_localctx, _startState, RULE_expression);
                                State = 6104;
                                if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
                                State = 6105; logicalOperator();
                                State = 6106; expression(4);
                            }
                        }
                    }
                    State = 6112;
                    ErrorHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(TokenStream, 897, Context);
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            UnrollRecursionContexts(_parentctx);
        }
        return _localctx;
    }

    public partial class PredicateContext : ParserRuleContext
    {
        public PredicateContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_predicate; } }

        public PredicateContext() { }
        public virtual void CopyFrom(PredicateContext context)
        {
            base.CopyFrom(context);
        }
    }
    public partial class SoundsLikePredicateContext : PredicateContext
    {
        public PredicateContext[] predicate()
        {
            return GetRuleContexts<PredicateContext>();
        }
        public PredicateContext predicate(int i)
        {
            return GetRuleContext<PredicateContext>(i);
        }
        public ITerminalNode SOUNDS() { return GetToken(MySqlParser.SOUNDS, 0); }
        public ITerminalNode LIKE() { return GetToken(MySqlParser.LIKE, 0); }
        public SoundsLikePredicateContext(PredicateContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterSoundsLikePredicate(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitSoundsLikePredicate(this);
        }
    }
    public partial class ExpressionAtomPredicateContext : PredicateContext
    {
        public ExpressionAtomContext expressionAtom()
        {
            return GetRuleContext<ExpressionAtomContext>(0);
        }
        public ITerminalNode LOCAL_ID() { return GetToken(MySqlParser.LOCAL_ID, 0); }
        public ITerminalNode VAR_ASSIGN() { return GetToken(MySqlParser.VAR_ASSIGN, 0); }
        public ExpressionAtomPredicateContext(PredicateContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterExpressionAtomPredicate(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitExpressionAtomPredicate(this);
        }
    }
    public partial class InPredicateContext : PredicateContext
    {
        public PredicateContext predicate()
        {
            return GetRuleContext<PredicateContext>(0);
        }
        public ITerminalNode IN() { return GetToken(MySqlParser.IN, 0); }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public SelectStatementContext selectStatement()
        {
            return GetRuleContext<SelectStatementContext>(0);
        }
        public ExpressionsContext expressions()
        {
            return GetRuleContext<ExpressionsContext>(0);
        }
        public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
        public InPredicateContext(PredicateContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterInPredicate(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitInPredicate(this);
        }
    }
    public partial class SubqueryComparasionPredicateContext : PredicateContext
    {
        public IToken quantifier;
        public PredicateContext predicate()
        {
            return GetRuleContext<PredicateContext>(0);
        }
        public ComparisonOperatorContext comparisonOperator()
        {
            return GetRuleContext<ComparisonOperatorContext>(0);
        }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public SelectStatementContext selectStatement()
        {
            return GetRuleContext<SelectStatementContext>(0);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public ITerminalNode ALL() { return GetToken(MySqlParser.ALL, 0); }
        public ITerminalNode ANY() { return GetToken(MySqlParser.ANY, 0); }
        public ITerminalNode SOME() { return GetToken(MySqlParser.SOME, 0); }
        public SubqueryComparasionPredicateContext(PredicateContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterSubqueryComparasionPredicate(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitSubqueryComparasionPredicate(this);
        }
    }
    public partial class BetweenPredicateContext : PredicateContext
    {
        public PredicateContext[] predicate()
        {
            return GetRuleContexts<PredicateContext>();
        }
        public PredicateContext predicate(int i)
        {
            return GetRuleContext<PredicateContext>(i);
        }
        public ITerminalNode BETWEEN() { return GetToken(MySqlParser.BETWEEN, 0); }
        public ITerminalNode AND() { return GetToken(MySqlParser.AND, 0); }
        public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
        public BetweenPredicateContext(PredicateContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterBetweenPredicate(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitBetweenPredicate(this);
        }
    }
    public partial class BinaryComparasionPredicateContext : PredicateContext
    {
        public PredicateContext left;
        public PredicateContext right;
        public ComparisonOperatorContext comparisonOperator()
        {
            return GetRuleContext<ComparisonOperatorContext>(0);
        }
        public PredicateContext[] predicate()
        {
            return GetRuleContexts<PredicateContext>();
        }
        public PredicateContext predicate(int i)
        {
            return GetRuleContext<PredicateContext>(i);
        }
        public BinaryComparasionPredicateContext(PredicateContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterBinaryComparasionPredicate(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitBinaryComparasionPredicate(this);
        }
    }
    public partial class IsNullPredicateContext : PredicateContext
    {
        public PredicateContext predicate()
        {
            return GetRuleContext<PredicateContext>(0);
        }
        public ITerminalNode IS() { return GetToken(MySqlParser.IS, 0); }
        public NullNotnullContext nullNotnull()
        {
            return GetRuleContext<NullNotnullContext>(0);
        }
        public IsNullPredicateContext(PredicateContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterIsNullPredicate(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitIsNullPredicate(this);
        }
    }
    public partial class LikePredicateContext : PredicateContext
    {
        public PredicateContext[] predicate()
        {
            return GetRuleContexts<PredicateContext>();
        }
        public PredicateContext predicate(int i)
        {
            return GetRuleContext<PredicateContext>(i);
        }
        public ITerminalNode LIKE() { return GetToken(MySqlParser.LIKE, 0); }
        public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
        public ITerminalNode ESCAPE() { return GetToken(MySqlParser.ESCAPE, 0); }
        public ITerminalNode STRING_LITERAL() { return GetToken(MySqlParser.STRING_LITERAL, 0); }
        public LikePredicateContext(PredicateContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterLikePredicate(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitLikePredicate(this);
        }
    }
    public partial class RegexpPredicateContext : PredicateContext
    {
        public IToken regex;
        public PredicateContext[] predicate()
        {
            return GetRuleContexts<PredicateContext>();
        }
        public PredicateContext predicate(int i)
        {
            return GetRuleContext<PredicateContext>(i);
        }
        public ITerminalNode REGEXP() { return GetToken(MySqlParser.REGEXP, 0); }
        public ITerminalNode RLIKE() { return GetToken(MySqlParser.RLIKE, 0); }
        public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
        public RegexpPredicateContext(PredicateContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterRegexpPredicate(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitRegexpPredicate(this);
        }
    }

    [RuleVersion(0)]
    public PredicateContext predicate()
    {
        return predicate(0);
    }

    private PredicateContext predicate(int _p)
    {
        ParserRuleContext _parentctx = Context;
        int _parentState = State;
        PredicateContext _localctx = new PredicateContext(Context, _parentState);
        PredicateContext _prevctx = _localctx;
        int _startState = 602;
        EnterRecursionRule(_localctx, 602, RULE_predicate, _p);
        int _la;
        try
        {
            int _alt;
            EnterOuterAlt(_localctx, 1);
            {
                {
                    _localctx = new ExpressionAtomPredicateContext(_localctx);
                    Context = _localctx;
                    _prevctx = _localctx;

                    State = 6116;
                    ErrorHandler.Sync(this);
                    switch (Interpreter.AdaptivePredict(TokenStream, 898, Context))
                    {
                        case 1:
                            {
                                State = 6114; Match(LOCAL_ID);
                                State = 6115; Match(VAR_ASSIGN);
                            }
                            break;
                    }
                    State = 6118; expressionAtom(0);
                }
                Context.Stop = TokenStream.LT(-1);
                State = 6177;
                ErrorHandler.Sync(this);
                _alt = Interpreter.AdaptivePredict(TokenStream, 906, Context);
                while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                {
                    if (_alt == 1)
                    {
                        if (ParseListeners != null)
                            TriggerExitRuleEvent();
                        _prevctx = _localctx;
                        {
                            State = 6175;
                            ErrorHandler.Sync(this);
                            switch (Interpreter.AdaptivePredict(TokenStream, 905, Context))
                            {
                                case 1:
                                    {
                                        _localctx = new BinaryComparasionPredicateContext(new PredicateContext(_parentctx, _parentState));
                                        ((BinaryComparasionPredicateContext)_localctx).left = _prevctx;
                                        PushNewRecursionContext(_localctx, _startState, RULE_predicate);
                                        State = 6120;
                                        if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
                                        State = 6121; comparisonOperator();
                                        State = 6122; ((BinaryComparasionPredicateContext)_localctx).right = predicate(8);
                                    }
                                    break;
                                case 2:
                                    {
                                        _localctx = new BetweenPredicateContext(new PredicateContext(_parentctx, _parentState));
                                        PushNewRecursionContext(_localctx, _startState, RULE_predicate);
                                        State = 6124;
                                        if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
                                        State = 6126;
                                        ErrorHandler.Sync(this);
                                        _la = TokenStream.LA(1);
                                        if (_la == NOT)
                                        {
                                            {
                                                State = 6125; Match(NOT);
                                            }
                                        }

                                        State = 6128; Match(BETWEEN);
                                        State = 6129; predicate(0);
                                        State = 6130; Match(AND);
                                        State = 6131; predicate(6);
                                    }
                                    break;
                                case 3:
                                    {
                                        _localctx = new SoundsLikePredicateContext(new PredicateContext(_parentctx, _parentState));
                                        PushNewRecursionContext(_localctx, _startState, RULE_predicate);
                                        State = 6133;
                                        if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
                                        State = 6134; Match(SOUNDS);
                                        State = 6135; Match(LIKE);
                                        State = 6136; predicate(5);
                                    }
                                    break;
                                case 4:
                                    {
                                        _localctx = new RegexpPredicateContext(new PredicateContext(_parentctx, _parentState));
                                        PushNewRecursionContext(_localctx, _startState, RULE_predicate);
                                        State = 6137;
                                        if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
                                        State = 6139;
                                        ErrorHandler.Sync(this);
                                        _la = TokenStream.LA(1);
                                        if (_la == NOT)
                                        {
                                            {
                                                State = 6138; Match(NOT);
                                            }
                                        }

                                        State = 6141;
                                        ((RegexpPredicateContext)_localctx).regex = TokenStream.LT(1);
                                        _la = TokenStream.LA(1);
                                        if (!(_la == REGEXP || _la == RLIKE))
                                        {
                                            ((RegexpPredicateContext)_localctx).regex = ErrorHandler.RecoverInline(this);
                                        }
                                        else
                                        {
                                            ErrorHandler.ReportMatch(this);
                                            Consume();
                                        }
                                        State = 6142; predicate(3);
                                    }
                                    break;
                                case 5:
                                    {
                                        _localctx = new InPredicateContext(new PredicateContext(_parentctx, _parentState));
                                        PushNewRecursionContext(_localctx, _startState, RULE_predicate);
                                        State = 6143;
                                        if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
                                        State = 6145;
                                        ErrorHandler.Sync(this);
                                        _la = TokenStream.LA(1);
                                        if (_la == NOT)
                                        {
                                            {
                                                State = 6144; Match(NOT);
                                            }
                                        }

                                        State = 6147; Match(IN);
                                        State = 6148; Match(LR_BRACKET);
                                        State = 6151;
                                        ErrorHandler.Sync(this);
                                        switch (Interpreter.AdaptivePredict(TokenStream, 902, Context))
                                        {
                                            case 1:
                                                {
                                                    State = 6149; selectStatement();
                                                }
                                                break;
                                            case 2:
                                                {
                                                    State = 6150; expressions();
                                                }
                                                break;
                                        }
                                        State = 6153; Match(RR_BRACKET);
                                    }
                                    break;
                                case 6:
                                    {
                                        _localctx = new IsNullPredicateContext(new PredicateContext(_parentctx, _parentState));
                                        PushNewRecursionContext(_localctx, _startState, RULE_predicate);
                                        State = 6155;
                                        if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
                                        State = 6156; Match(IS);
                                        State = 6157; nullNotnull();
                                    }
                                    break;
                                case 7:
                                    {
                                        _localctx = new SubqueryComparasionPredicateContext(new PredicateContext(_parentctx, _parentState));
                                        PushNewRecursionContext(_localctx, _startState, RULE_predicate);
                                        State = 6158;
                                        if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
                                        State = 6159; comparisonOperator();
                                        State = 6160;
                                        ((SubqueryComparasionPredicateContext)_localctx).quantifier = TokenStream.LT(1);
                                        _la = TokenStream.LA(1);
                                        if (!(_la == ALL || _la == ANY || _la == SOME))
                                        {
                                            ((SubqueryComparasionPredicateContext)_localctx).quantifier = ErrorHandler.RecoverInline(this);
                                        }
                                        else
                                        {
                                            ErrorHandler.ReportMatch(this);
                                            Consume();
                                        }
                                        State = 6161; Match(LR_BRACKET);
                                        State = 6162; selectStatement();
                                        State = 6163; Match(RR_BRACKET);
                                    }
                                    break;
                                case 8:
                                    {
                                        _localctx = new LikePredicateContext(new PredicateContext(_parentctx, _parentState));
                                        PushNewRecursionContext(_localctx, _startState, RULE_predicate);
                                        State = 6165;
                                        if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
                                        State = 6167;
                                        ErrorHandler.Sync(this);
                                        _la = TokenStream.LA(1);
                                        if (_la == NOT)
                                        {
                                            {
                                                State = 6166; Match(NOT);
                                            }
                                        }

                                        State = 6169; Match(LIKE);
                                        State = 6170; predicate(0);
                                        State = 6173;
                                        ErrorHandler.Sync(this);
                                        switch (Interpreter.AdaptivePredict(TokenStream, 904, Context))
                                        {
                                            case 1:
                                                {
                                                    State = 6171; Match(ESCAPE);
                                                    State = 6172; Match(STRING_LITERAL);
                                                }
                                                break;
                                        }
                                    }
                                    break;
                            }
                        }
                    }
                    State = 6179;
                    ErrorHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(TokenStream, 906, Context);
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            UnrollRecursionContexts(_parentctx);
        }
        return _localctx;
    }

    public partial class ExpressionAtomContext : ParserRuleContext
    {
        public ExpressionAtomContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_expressionAtom; } }

        public ExpressionAtomContext() { }
        public virtual void CopyFrom(ExpressionAtomContext context)
        {
            base.CopyFrom(context);
        }
    }
    public partial class UnaryExpressionAtomContext : ExpressionAtomContext
    {
        public UnaryOperatorContext unaryOperator()
        {
            return GetRuleContext<UnaryOperatorContext>(0);
        }
        public ExpressionAtomContext expressionAtom()
        {
            return GetRuleContext<ExpressionAtomContext>(0);
        }
        public UnaryExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterUnaryExpressionAtom(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitUnaryExpressionAtom(this);
        }
    }
    public partial class CollateExpressionAtomContext : ExpressionAtomContext
    {
        public ExpressionAtomContext expressionAtom()
        {
            return GetRuleContext<ExpressionAtomContext>(0);
        }
        public ITerminalNode COLLATE() { return GetToken(MySqlParser.COLLATE, 0); }
        public CollationNameContext collationName()
        {
            return GetRuleContext<CollationNameContext>(0);
        }
        public CollateExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterCollateExpressionAtom(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitCollateExpressionAtom(this);
        }
    }
    public partial class SubqueryExpessionAtomContext : ExpressionAtomContext
    {
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public SelectStatementContext selectStatement()
        {
            return GetRuleContext<SelectStatementContext>(0);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public SubqueryExpessionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterSubqueryExpessionAtom(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitSubqueryExpessionAtom(this);
        }
    }
    public partial class MysqlVariableExpressionAtomContext : ExpressionAtomContext
    {
        public MysqlVariableContext mysqlVariable()
        {
            return GetRuleContext<MysqlVariableContext>(0);
        }
        public MysqlVariableExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterMysqlVariableExpressionAtom(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitMysqlVariableExpressionAtom(this);
        }
    }
    public partial class NestedExpressionAtomContext : ExpressionAtomContext
    {
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public ExpressionContext[] expression()
        {
            return GetRuleContexts<ExpressionContext>();
        }
        public ExpressionContext expression(int i)
        {
            return GetRuleContext<ExpressionContext>(i);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public NestedExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterNestedExpressionAtom(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitNestedExpressionAtom(this);
        }
    }
    public partial class NestedRowExpressionAtomContext : ExpressionAtomContext
    {
        public ITerminalNode ROW() { return GetToken(MySqlParser.ROW, 0); }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public ExpressionContext[] expression()
        {
            return GetRuleContexts<ExpressionContext>();
        }
        public ExpressionContext expression(int i)
        {
            return GetRuleContext<ExpressionContext>(i);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public ITerminalNode[] COMMA() { return GetTokens(MySqlParser.COMMA); }
        public ITerminalNode COMMA(int i)
        {
            return GetToken(MySqlParser.COMMA, i);
        }
        public NestedRowExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterNestedRowExpressionAtom(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitNestedRowExpressionAtom(this);
        }
    }
    public partial class MathExpressionAtomContext : ExpressionAtomContext
    {
        public ExpressionAtomContext left;
        public ExpressionAtomContext right;
        public MathOperatorContext mathOperator()
        {
            return GetRuleContext<MathOperatorContext>(0);
        }
        public ExpressionAtomContext[] expressionAtom()
        {
            return GetRuleContexts<ExpressionAtomContext>();
        }
        public ExpressionAtomContext expressionAtom(int i)
        {
            return GetRuleContext<ExpressionAtomContext>(i);
        }
        public MathExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterMathExpressionAtom(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitMathExpressionAtom(this);
        }
    }
    public partial class IntervalExpressionAtomContext : ExpressionAtomContext
    {
        public ITerminalNode INTERVAL() { return GetToken(MySqlParser.INTERVAL, 0); }
        public ExpressionContext expression()
        {
            return GetRuleContext<ExpressionContext>(0);
        }
        public IntervalTypeContext intervalType()
        {
            return GetRuleContext<IntervalTypeContext>(0);
        }
        public IntervalExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterIntervalExpressionAtom(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitIntervalExpressionAtom(this);
        }
    }
    public partial class ExistsExpessionAtomContext : ExpressionAtomContext
    {
        public ITerminalNode EXISTS() { return GetToken(MySqlParser.EXISTS, 0); }
        public ITerminalNode LR_BRACKET() { return GetToken(MySqlParser.LR_BRACKET, 0); }
        public SelectStatementContext selectStatement()
        {
            return GetRuleContext<SelectStatementContext>(0);
        }
        public ITerminalNode RR_BRACKET() { return GetToken(MySqlParser.RR_BRACKET, 0); }
        public ExistsExpessionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterExistsExpessionAtom(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitExistsExpessionAtom(this);
        }
    }
    public partial class ConstantExpressionAtomContext : ExpressionAtomContext
    {
        public ConstantContext constant()
        {
            return GetRuleContext<ConstantContext>(0);
        }
        public ConstantExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterConstantExpressionAtom(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitConstantExpressionAtom(this);
        }
    }
    public partial class FunctionCallExpressionAtomContext : ExpressionAtomContext
    {
        public FunctionCallContext functionCall()
        {
            return GetRuleContext<FunctionCallContext>(0);
        }
        public FunctionCallExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterFunctionCallExpressionAtom(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitFunctionCallExpressionAtom(this);
        }
    }
    public partial class BinaryExpressionAtomContext : ExpressionAtomContext
    {
        public ITerminalNode BINARY() { return GetToken(MySqlParser.BINARY, 0); }
        public ExpressionAtomContext expressionAtom()
        {
            return GetRuleContext<ExpressionAtomContext>(0);
        }
        public BinaryExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterBinaryExpressionAtom(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitBinaryExpressionAtom(this);
        }
    }
    public partial class FullColumnNameExpressionAtomContext : ExpressionAtomContext
    {
        public FullColumnNameContext fullColumnName()
        {
            return GetRuleContext<FullColumnNameContext>(0);
        }
        public FullColumnNameExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterFullColumnNameExpressionAtom(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitFullColumnNameExpressionAtom(this);
        }
    }
    public partial class BitExpressionAtomContext : ExpressionAtomContext
    {
        public ExpressionAtomContext left;
        public ExpressionAtomContext right;
        public BitOperatorContext bitOperator()
        {
            return GetRuleContext<BitOperatorContext>(0);
        }
        public ExpressionAtomContext[] expressionAtom()
        {
            return GetRuleContexts<ExpressionAtomContext>();
        }
        public ExpressionAtomContext expressionAtom(int i)
        {
            return GetRuleContext<ExpressionAtomContext>(i);
        }
        public BitExpressionAtomContext(ExpressionAtomContext context) { CopyFrom(context); }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterBitExpressionAtom(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitBitExpressionAtom(this);
        }
    }

    [RuleVersion(0)]
    public ExpressionAtomContext expressionAtom()
    {
        return expressionAtom(0);
    }

    private ExpressionAtomContext expressionAtom(int _p)
    {
        ParserRuleContext _parentctx = Context;
        int _parentState = State;
        ExpressionAtomContext _localctx = new ExpressionAtomContext(Context, _parentState);
        ExpressionAtomContext _prevctx = _localctx;
        int _startState = 604;
        EnterRecursionRule(_localctx, 604, RULE_expressionAtom, _p);
        int _la;
        try
        {
            int _alt;
            EnterOuterAlt(_localctx, 1);
            {
                State = 6225;
                ErrorHandler.Sync(this);
                switch (Interpreter.AdaptivePredict(TokenStream, 909, Context))
                {
                    case 1:
                        {
                            _localctx = new ConstantExpressionAtomContext(_localctx);
                            Context = _localctx;
                            _prevctx = _localctx;

                            State = 6181; constant();
                        }
                        break;
                    case 2:
                        {
                            _localctx = new FullColumnNameExpressionAtomContext(_localctx);
                            Context = _localctx;
                            _prevctx = _localctx;
                            State = 6182; fullColumnName();
                        }
                        break;
                    case 3:
                        {
                            _localctx = new FunctionCallExpressionAtomContext(_localctx);
                            Context = _localctx;
                            _prevctx = _localctx;
                            State = 6183; functionCall();
                        }
                        break;
                    case 4:
                        {
                            _localctx = new MysqlVariableExpressionAtomContext(_localctx);
                            Context = _localctx;
                            _prevctx = _localctx;
                            State = 6184; mysqlVariable();
                        }
                        break;
                    case 5:
                        {
                            _localctx = new UnaryExpressionAtomContext(_localctx);
                            Context = _localctx;
                            _prevctx = _localctx;
                            State = 6185; unaryOperator();
                            State = 6186; expressionAtom(9);
                        }
                        break;
                    case 6:
                        {
                            _localctx = new BinaryExpressionAtomContext(_localctx);
                            Context = _localctx;
                            _prevctx = _localctx;
                            State = 6188; Match(BINARY);
                            State = 6189; expressionAtom(8);
                        }
                        break;
                    case 7:
                        {
                            _localctx = new NestedExpressionAtomContext(_localctx);
                            Context = _localctx;
                            _prevctx = _localctx;
                            State = 6190; Match(LR_BRACKET);
                            State = 6191; expression(0);
                            State = 6196;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            while (_la == COMMA)
                            {
                                {
                                    {
                                        State = 6192; Match(COMMA);
                                        State = 6193; expression(0);
                                    }
                                }
                                State = 6198;
                                ErrorHandler.Sync(this);
                                _la = TokenStream.LA(1);
                            }
                            State = 6199; Match(RR_BRACKET);
                        }
                        break;
                    case 8:
                        {
                            _localctx = new NestedRowExpressionAtomContext(_localctx);
                            Context = _localctx;
                            _prevctx = _localctx;
                            State = 6201; Match(ROW);
                            State = 6202; Match(LR_BRACKET);
                            State = 6203; expression(0);
                            State = 6206;
                            ErrorHandler.Sync(this);
                            _la = TokenStream.LA(1);
                            do
                            {
                                {
                                    {
                                        State = 6204; Match(COMMA);
                                        State = 6205; expression(0);
                                    }
                                }
                                State = 6208;
                                ErrorHandler.Sync(this);
                                _la = TokenStream.LA(1);
                            } while (_la == COMMA);
                            State = 6210; Match(RR_BRACKET);
                        }
                        break;
                    case 9:
                        {
                            _localctx = new ExistsExpessionAtomContext(_localctx);
                            Context = _localctx;
                            _prevctx = _localctx;
                            State = 6212; Match(EXISTS);
                            State = 6213; Match(LR_BRACKET);
                            State = 6214; selectStatement();
                            State = 6215; Match(RR_BRACKET);
                        }
                        break;
                    case 10:
                        {
                            _localctx = new SubqueryExpessionAtomContext(_localctx);
                            Context = _localctx;
                            _prevctx = _localctx;
                            State = 6217; Match(LR_BRACKET);
                            State = 6218; selectStatement();
                            State = 6219; Match(RR_BRACKET);
                        }
                        break;
                    case 11:
                        {
                            _localctx = new IntervalExpressionAtomContext(_localctx);
                            Context = _localctx;
                            _prevctx = _localctx;
                            State = 6221; Match(INTERVAL);
                            State = 6222; expression(0);
                            State = 6223; intervalType();
                        }
                        break;
                }
                Context.Stop = TokenStream.LT(-1);
                State = 6240;
                ErrorHandler.Sync(this);
                _alt = Interpreter.AdaptivePredict(TokenStream, 911, Context);
                while (_alt != 2 && _alt != global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER)
                {
                    if (_alt == 1)
                    {
                        if (ParseListeners != null)
                            TriggerExitRuleEvent();
                        _prevctx = _localctx;
                        {
                            State = 6238;
                            ErrorHandler.Sync(this);
                            switch (Interpreter.AdaptivePredict(TokenStream, 910, Context))
                            {
                                case 1:
                                    {
                                        _localctx = new BitExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
                                        ((BitExpressionAtomContext)_localctx).left = _prevctx;
                                        PushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
                                        State = 6227;
                                        if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
                                        State = 6228; bitOperator();
                                        State = 6229; ((BitExpressionAtomContext)_localctx).right = expressionAtom(3);
                                    }
                                    break;
                                case 2:
                                    {
                                        _localctx = new MathExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
                                        ((MathExpressionAtomContext)_localctx).left = _prevctx;
                                        PushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
                                        State = 6231;
                                        if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
                                        State = 6232; mathOperator();
                                        State = 6233; ((MathExpressionAtomContext)_localctx).right = expressionAtom(2);
                                    }
                                    break;
                                case 3:
                                    {
                                        _localctx = new CollateExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
                                        PushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
                                        State = 6235;
                                        if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
                                        State = 6236; Match(COLLATE);
                                        State = 6237; collationName();
                                    }
                                    break;
                            }
                        }
                    }
                    State = 6242;
                    ErrorHandler.Sync(this);
                    _alt = Interpreter.AdaptivePredict(TokenStream, 911, Context);
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            UnrollRecursionContexts(_parentctx);
        }
        return _localctx;
    }

    public partial class UnaryOperatorContext : ParserRuleContext
    {
        public ITerminalNode EXCLAMATION_SYMBOL() { return GetToken(MySqlParser.EXCLAMATION_SYMBOL, 0); }
        public ITerminalNode BIT_NOT_OP() { return GetToken(MySqlParser.BIT_NOT_OP, 0); }
        public ITerminalNode PLUS() { return GetToken(MySqlParser.PLUS, 0); }
        public ITerminalNode MINUS() { return GetToken(MySqlParser.MINUS, 0); }
        public ITerminalNode NOT() { return GetToken(MySqlParser.NOT, 0); }
        public UnaryOperatorContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_unaryOperator; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterUnaryOperator(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitUnaryOperator(this);
        }
    }

    [RuleVersion(0)]
    public UnaryOperatorContext unaryOperator()
    {
        UnaryOperatorContext _localctx = new UnaryOperatorContext(Context, State);
        EnterRule(_localctx, 606, RULE_unaryOperator);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 6243;
                _la = TokenStream.LA(1);
                if (!(_la == NOT || ((((_la - 968)) & ~0x3f) == 0 && ((1L << (_la - 968)) & ((1L << (PLUS - 968)) | (1L << (MINUS - 968)) | (1L << (EXCLAMATION_SYMBOL - 968)) | (1L << (BIT_NOT_OP - 968)))) != 0)))
                {
                    ErrorHandler.RecoverInline(this);
                }
                else
                {
                    ErrorHandler.ReportMatch(this);
                    Consume();
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class ComparisonOperatorContext : ParserRuleContext
    {
        public ITerminalNode EQUAL_SYMBOL() { return GetToken(MySqlParser.EQUAL_SYMBOL, 0); }
        public ITerminalNode GREATER_SYMBOL() { return GetToken(MySqlParser.GREATER_SYMBOL, 0); }
        public ITerminalNode LESS_SYMBOL() { return GetToken(MySqlParser.LESS_SYMBOL, 0); }
        public ITerminalNode EXCLAMATION_SYMBOL() { return GetToken(MySqlParser.EXCLAMATION_SYMBOL, 0); }
        public ComparisonOperatorContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_comparisonOperator; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterComparisonOperator(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitComparisonOperator(this);
        }
    }

    [RuleVersion(0)]
    public ComparisonOperatorContext comparisonOperator()
    {
        ComparisonOperatorContext _localctx = new ComparisonOperatorContext(Context, State);
        EnterRule(_localctx, 608, RULE_comparisonOperator);
        try
        {
            State = 6259;
            ErrorHandler.Sync(this);
            switch (Interpreter.AdaptivePredict(TokenStream, 912, Context))
            {
                case 1:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 6245; Match(EQUAL_SYMBOL);
                    }
                    break;
                case 2:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 6246; Match(GREATER_SYMBOL);
                    }
                    break;
                case 3:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 6247; Match(LESS_SYMBOL);
                    }
                    break;
                case 4:
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 6248; Match(LESS_SYMBOL);
                        State = 6249; Match(EQUAL_SYMBOL);
                    }
                    break;
                case 5:
                    EnterOuterAlt(_localctx, 5);
                    {
                        State = 6250; Match(GREATER_SYMBOL);
                        State = 6251; Match(EQUAL_SYMBOL);
                    }
                    break;
                case 6:
                    EnterOuterAlt(_localctx, 6);
                    {
                        State = 6252; Match(LESS_SYMBOL);
                        State = 6253; Match(GREATER_SYMBOL);
                    }
                    break;
                case 7:
                    EnterOuterAlt(_localctx, 7);
                    {
                        State = 6254; Match(EXCLAMATION_SYMBOL);
                        State = 6255; Match(EQUAL_SYMBOL);
                    }
                    break;
                case 8:
                    EnterOuterAlt(_localctx, 8);
                    {
                        State = 6256; Match(LESS_SYMBOL);
                        State = 6257; Match(EQUAL_SYMBOL);
                        State = 6258; Match(GREATER_SYMBOL);
                    }
                    break;
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class LogicalOperatorContext : ParserRuleContext
    {
        public ITerminalNode AND() { return GetToken(MySqlParser.AND, 0); }
        public ITerminalNode[] BIT_AND_OP() { return GetTokens(MySqlParser.BIT_AND_OP); }
        public ITerminalNode BIT_AND_OP(int i)
        {
            return GetToken(MySqlParser.BIT_AND_OP, i);
        }
        public ITerminalNode XOR() { return GetToken(MySqlParser.XOR, 0); }
        public ITerminalNode OR() { return GetToken(MySqlParser.OR, 0); }
        public ITerminalNode[] BIT_OR_OP() { return GetTokens(MySqlParser.BIT_OR_OP); }
        public ITerminalNode BIT_OR_OP(int i)
        {
            return GetToken(MySqlParser.BIT_OR_OP, i);
        }
        public LogicalOperatorContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_logicalOperator; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterLogicalOperator(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitLogicalOperator(this);
        }
    }

    [RuleVersion(0)]
    public LogicalOperatorContext logicalOperator()
    {
        LogicalOperatorContext _localctx = new LogicalOperatorContext(Context, State);
        EnterRule(_localctx, 610, RULE_logicalOperator);
        try
        {
            State = 6268;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case AND:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 6261; Match(AND);
                    }
                    break;
                case BIT_AND_OP:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 6262; Match(BIT_AND_OP);
                        State = 6263; Match(BIT_AND_OP);
                    }
                    break;
                case XOR:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 6264; Match(XOR);
                    }
                    break;
                case OR:
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 6265; Match(OR);
                    }
                    break;
                case BIT_OR_OP:
                    EnterOuterAlt(_localctx, 5);
                    {
                        State = 6266; Match(BIT_OR_OP);
                        State = 6267; Match(BIT_OR_OP);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class BitOperatorContext : ParserRuleContext
    {
        public ITerminalNode[] LESS_SYMBOL() { return GetTokens(MySqlParser.LESS_SYMBOL); }
        public ITerminalNode LESS_SYMBOL(int i)
        {
            return GetToken(MySqlParser.LESS_SYMBOL, i);
        }
        public ITerminalNode[] GREATER_SYMBOL() { return GetTokens(MySqlParser.GREATER_SYMBOL); }
        public ITerminalNode GREATER_SYMBOL(int i)
        {
            return GetToken(MySqlParser.GREATER_SYMBOL, i);
        }
        public ITerminalNode BIT_AND_OP() { return GetToken(MySqlParser.BIT_AND_OP, 0); }
        public ITerminalNode BIT_XOR_OP() { return GetToken(MySqlParser.BIT_XOR_OP, 0); }
        public ITerminalNode BIT_OR_OP() { return GetToken(MySqlParser.BIT_OR_OP, 0); }
        public BitOperatorContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_bitOperator; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterBitOperator(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitBitOperator(this);
        }
    }

    [RuleVersion(0)]
    public BitOperatorContext bitOperator()
    {
        BitOperatorContext _localctx = new BitOperatorContext(Context, State);
        EnterRule(_localctx, 612, RULE_bitOperator);
        try
        {
            State = 6277;
            ErrorHandler.Sync(this);
            switch (TokenStream.LA(1))
            {
                case LESS_SYMBOL:
                    EnterOuterAlt(_localctx, 1);
                    {
                        State = 6270; Match(LESS_SYMBOL);
                        State = 6271; Match(LESS_SYMBOL);
                    }
                    break;
                case GREATER_SYMBOL:
                    EnterOuterAlt(_localctx, 2);
                    {
                        State = 6272; Match(GREATER_SYMBOL);
                        State = 6273; Match(GREATER_SYMBOL);
                    }
                    break;
                case BIT_AND_OP:
                    EnterOuterAlt(_localctx, 3);
                    {
                        State = 6274; Match(BIT_AND_OP);
                    }
                    break;
                case BIT_XOR_OP:
                    EnterOuterAlt(_localctx, 4);
                    {
                        State = 6275; Match(BIT_XOR_OP);
                    }
                    break;
                case BIT_OR_OP:
                    EnterOuterAlt(_localctx, 5);
                    {
                        State = 6276; Match(BIT_OR_OP);
                    }
                    break;
                default:
                    throw new NoViableAltException(this);
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class MathOperatorContext : ParserRuleContext
    {
        public ITerminalNode STAR() { return GetToken(MySqlParser.STAR, 0); }
        public ITerminalNode DIVIDE() { return GetToken(MySqlParser.DIVIDE, 0); }
        public ITerminalNode MODULE() { return GetToken(MySqlParser.MODULE, 0); }
        public ITerminalNode DIV() { return GetToken(MySqlParser.DIV, 0); }
        public ITerminalNode MOD() { return GetToken(MySqlParser.MOD, 0); }
        public ITerminalNode PLUS() { return GetToken(MySqlParser.PLUS, 0); }
        public ITerminalNode MINUS() { return GetToken(MySqlParser.MINUS, 0); }
        public ITerminalNode MINUSMINUS() { return GetToken(MySqlParser.MINUSMINUS, 0); }
        public MathOperatorContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_mathOperator; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterMathOperator(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitMathOperator(this);
        }
    }

    [RuleVersion(0)]
    public MathOperatorContext mathOperator()
    {
        MathOperatorContext _localctx = new MathOperatorContext(Context, State);
        EnterRule(_localctx, 614, RULE_mathOperator);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 6279;
                _la = TokenStream.LA(1);
                if (!(((((_la - 965)) & ~0x3f) == 0 && ((1L << (_la - 965)) & ((1L << (STAR - 965)) | (1L << (DIVIDE - 965)) | (1L << (MODULE - 965)) | (1L << (PLUS - 965)) | (1L << (MINUSMINUS - 965)) | (1L << (MINUS - 965)) | (1L << (DIV - 965)) | (1L << (MOD - 965)))) != 0)))
                {
                    ErrorHandler.RecoverInline(this);
                }
                else
                {
                    ErrorHandler.ReportMatch(this);
                    Consume();
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class CharsetNameBaseContext : ParserRuleContext
    {
        public ITerminalNode ARMSCII8() { return GetToken(MySqlParser.ARMSCII8, 0); }
        public ITerminalNode ASCII() { return GetToken(MySqlParser.ASCII, 0); }
        public ITerminalNode BIG5() { return GetToken(MySqlParser.BIG5, 0); }
        public ITerminalNode CP1250() { return GetToken(MySqlParser.CP1250, 0); }
        public ITerminalNode CP1251() { return GetToken(MySqlParser.CP1251, 0); }
        public ITerminalNode CP1256() { return GetToken(MySqlParser.CP1256, 0); }
        public ITerminalNode CP1257() { return GetToken(MySqlParser.CP1257, 0); }
        public ITerminalNode CP850() { return GetToken(MySqlParser.CP850, 0); }
        public ITerminalNode CP852() { return GetToken(MySqlParser.CP852, 0); }
        public ITerminalNode CP866() { return GetToken(MySqlParser.CP866, 0); }
        public ITerminalNode CP932() { return GetToken(MySqlParser.CP932, 0); }
        public ITerminalNode DEC8() { return GetToken(MySqlParser.DEC8, 0); }
        public ITerminalNode EUCJPMS() { return GetToken(MySqlParser.EUCJPMS, 0); }
        public ITerminalNode EUCKR() { return GetToken(MySqlParser.EUCKR, 0); }
        public ITerminalNode GB2312() { return GetToken(MySqlParser.GB2312, 0); }
        public ITerminalNode GBK() { return GetToken(MySqlParser.GBK, 0); }
        public ITerminalNode GEOSTD8() { return GetToken(MySqlParser.GEOSTD8, 0); }
        public ITerminalNode GREEK() { return GetToken(MySqlParser.GREEK, 0); }
        public ITerminalNode HEBREW() { return GetToken(MySqlParser.HEBREW, 0); }
        public ITerminalNode HP8() { return GetToken(MySqlParser.HP8, 0); }
        public ITerminalNode KEYBCS2() { return GetToken(MySqlParser.KEYBCS2, 0); }
        public ITerminalNode KOI8R() { return GetToken(MySqlParser.KOI8R, 0); }
        public ITerminalNode KOI8U() { return GetToken(MySqlParser.KOI8U, 0); }
        public ITerminalNode LATIN1() { return GetToken(MySqlParser.LATIN1, 0); }
        public ITerminalNode LATIN2() { return GetToken(MySqlParser.LATIN2, 0); }
        public ITerminalNode LATIN5() { return GetToken(MySqlParser.LATIN5, 0); }
        public ITerminalNode LATIN7() { return GetToken(MySqlParser.LATIN7, 0); }
        public ITerminalNode MACCE() { return GetToken(MySqlParser.MACCE, 0); }
        public ITerminalNode MACROMAN() { return GetToken(MySqlParser.MACROMAN, 0); }
        public ITerminalNode SJIS() { return GetToken(MySqlParser.SJIS, 0); }
        public ITerminalNode SWE7() { return GetToken(MySqlParser.SWE7, 0); }
        public ITerminalNode TIS620() { return GetToken(MySqlParser.TIS620, 0); }
        public ITerminalNode UCS2() { return GetToken(MySqlParser.UCS2, 0); }
        public ITerminalNode UJIS() { return GetToken(MySqlParser.UJIS, 0); }
        public ITerminalNode UTF16() { return GetToken(MySqlParser.UTF16, 0); }
        public ITerminalNode UTF16LE() { return GetToken(MySqlParser.UTF16LE, 0); }
        public ITerminalNode UTF32() { return GetToken(MySqlParser.UTF32, 0); }
        public ITerminalNode UTF8() { return GetToken(MySqlParser.UTF8, 0); }
        public ITerminalNode UTF8MB3() { return GetToken(MySqlParser.UTF8MB3, 0); }
        public ITerminalNode UTF8MB4() { return GetToken(MySqlParser.UTF8MB4, 0); }
        public CharsetNameBaseContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_charsetNameBase; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterCharsetNameBase(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitCharsetNameBase(this);
        }
    }

    [RuleVersion(0)]
    public CharsetNameBaseContext charsetNameBase()
    {
        CharsetNameBaseContext _localctx = new CharsetNameBaseContext(Context, State);
        EnterRule(_localctx, 616, RULE_charsetNameBase);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 6281;
                _la = TokenStream.LA(1);
                if (!(((((_la - 599)) & ~0x3f) == 0 && ((1L << (_la - 599)) & ((1L << (ARMSCII8 - 599)) | (1L << (ASCII - 599)) | (1L << (BIG5 - 599)) | (1L << (CP1250 - 599)) | (1L << (CP1251 - 599)) | (1L << (CP1256 - 599)) | (1L << (CP1257 - 599)) | (1L << (CP850 - 599)) | (1L << (CP852 - 599)) | (1L << (CP866 - 599)) | (1L << (CP932 - 599)) | (1L << (DEC8 - 599)) | (1L << (EUCJPMS - 599)) | (1L << (EUCKR - 599)) | (1L << (GB2312 - 599)) | (1L << (GBK - 599)) | (1L << (GEOSTD8 - 599)) | (1L << (GREEK - 599)) | (1L << (HEBREW - 599)) | (1L << (HP8 - 599)) | (1L << (KEYBCS2 - 599)) | (1L << (KOI8R - 599)) | (1L << (KOI8U - 599)) | (1L << (LATIN1 - 599)) | (1L << (LATIN2 - 599)) | (1L << (LATIN5 - 599)) | (1L << (LATIN7 - 599)) | (1L << (MACCE - 599)) | (1L << (MACROMAN - 599)) | (1L << (SJIS - 599)) | (1L << (SWE7 - 599)) | (1L << (TIS620 - 599)) | (1L << (UCS2 - 599)) | (1L << (UJIS - 599)) | (1L << (UTF16 - 599)) | (1L << (UTF16LE - 599)) | (1L << (UTF32 - 599)) | (1L << (UTF8 - 599)) | (1L << (UTF8MB3 - 599)) | (1L << (UTF8MB4 - 599)))) != 0)))
                {
                    ErrorHandler.RecoverInline(this);
                }
                else
                {
                    ErrorHandler.ReportMatch(this);
                    Consume();
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class TransactionLevelBaseContext : ParserRuleContext
    {
        public ITerminalNode REPEATABLE() { return GetToken(MySqlParser.REPEATABLE, 0); }
        public ITerminalNode COMMITTED() { return GetToken(MySqlParser.COMMITTED, 0); }
        public ITerminalNode UNCOMMITTED() { return GetToken(MySqlParser.UNCOMMITTED, 0); }
        public ITerminalNode SERIALIZABLE() { return GetToken(MySqlParser.SERIALIZABLE, 0); }
        public TransactionLevelBaseContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_transactionLevelBase; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterTransactionLevelBase(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitTransactionLevelBase(this);
        }
    }

    [RuleVersion(0)]
    public TransactionLevelBaseContext transactionLevelBase()
    {
        TransactionLevelBaseContext _localctx = new TransactionLevelBaseContext(Context, State);
        EnterRule(_localctx, 618, RULE_transactionLevelBase);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 6283;
                _la = TokenStream.LA(1);
                if (!(((((_la - 651)) & ~0x3f) == 0 && ((1L << (_la - 651)) & ((1L << (REPEATABLE - 651)) | (1L << (COMMITTED - 651)) | (1L << (UNCOMMITTED - 651)) | (1L << (SERIALIZABLE - 651)))) != 0)))
                {
                    ErrorHandler.RecoverInline(this);
                }
                else
                {
                    ErrorHandler.ReportMatch(this);
                    Consume();
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class PrivilegesBaseContext : ParserRuleContext
    {
        public ITerminalNode TABLES() { return GetToken(MySqlParser.TABLES, 0); }
        public ITerminalNode ROUTINE() { return GetToken(MySqlParser.ROUTINE, 0); }
        public ITerminalNode EXECUTE() { return GetToken(MySqlParser.EXECUTE, 0); }
        public ITerminalNode FILE() { return GetToken(MySqlParser.FILE, 0); }
        public ITerminalNode PROCESS() { return GetToken(MySqlParser.PROCESS, 0); }
        public ITerminalNode RELOAD() { return GetToken(MySqlParser.RELOAD, 0); }
        public ITerminalNode SHUTDOWN() { return GetToken(MySqlParser.SHUTDOWN, 0); }
        public ITerminalNode SUPER() { return GetToken(MySqlParser.SUPER, 0); }
        public ITerminalNode PRIVILEGES() { return GetToken(MySqlParser.PRIVILEGES, 0); }
        public PrivilegesBaseContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_privilegesBase; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterPrivilegesBase(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitPrivilegesBase(this);
        }
    }

    [RuleVersion(0)]
    public PrivilegesBaseContext privilegesBase()
    {
        PrivilegesBaseContext _localctx = new PrivilegesBaseContext(Context, State);
        EnterRule(_localctx, 620, RULE_privilegesBase);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 6285;
                _la = TokenStream.LA(1);
                if (!(((((_la - 589)) & ~0x3f) == 0 && ((1L << (_la - 589)) & ((1L << (TABLES - 589)) | (1L << (ROUTINE - 589)) | (1L << (EXECUTE - 589)) | (1L << (FILE - 589)) | (1L << (PROCESS - 589)) | (1L << (RELOAD - 589)) | (1L << (SHUTDOWN - 589)) | (1L << (SUPER - 589)) | (1L << (PRIVILEGES - 589)))) != 0)))
                {
                    ErrorHandler.RecoverInline(this);
                }
                else
                {
                    ErrorHandler.ReportMatch(this);
                    Consume();
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class IntervalTypeBaseContext : ParserRuleContext
    {
        public ITerminalNode QUARTER() { return GetToken(MySqlParser.QUARTER, 0); }
        public ITerminalNode MONTH() { return GetToken(MySqlParser.MONTH, 0); }
        public ITerminalNode DAY() { return GetToken(MySqlParser.DAY, 0); }
        public ITerminalNode HOUR() { return GetToken(MySqlParser.HOUR, 0); }
        public ITerminalNode MINUTE() { return GetToken(MySqlParser.MINUTE, 0); }
        public ITerminalNode WEEK() { return GetToken(MySqlParser.WEEK, 0); }
        public ITerminalNode SECOND() { return GetToken(MySqlParser.SECOND, 0); }
        public ITerminalNode MICROSECOND() { return GetToken(MySqlParser.MICROSECOND, 0); }
        public IntervalTypeBaseContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_intervalTypeBase; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterIntervalTypeBase(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitIntervalTypeBase(this);
        }
    }

    [RuleVersion(0)]
    public IntervalTypeBaseContext intervalTypeBase()
    {
        IntervalTypeBaseContext _localctx = new IntervalTypeBaseContext(Context, State);
        EnterRule(_localctx, 622, RULE_intervalTypeBase);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 6287;
                _la = TokenStream.LA(1);
                if (!(((((_la - 581)) & ~0x3f) == 0 && ((1L << (_la - 581)) & ((1L << (QUARTER - 581)) | (1L << (MONTH - 581)) | (1L << (DAY - 581)) | (1L << (HOUR - 581)) | (1L << (MINUTE - 581)) | (1L << (WEEK - 581)) | (1L << (SECOND - 581)) | (1L << (MICROSECOND - 581)))) != 0)))
                {
                    ErrorHandler.RecoverInline(this);
                }
                else
                {
                    ErrorHandler.ReportMatch(this);
                    Consume();
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class DataTypeBaseContext : ParserRuleContext
    {
        public ITerminalNode DATE() { return GetToken(MySqlParser.DATE, 0); }
        public ITerminalNode TIME() { return GetToken(MySqlParser.TIME, 0); }
        public ITerminalNode TIMESTAMP() { return GetToken(MySqlParser.TIMESTAMP, 0); }
        public ITerminalNode DATETIME() { return GetToken(MySqlParser.DATETIME, 0); }
        public ITerminalNode YEAR() { return GetToken(MySqlParser.YEAR, 0); }
        public ITerminalNode ENUM() { return GetToken(MySqlParser.ENUM, 0); }
        public ITerminalNode TEXT() { return GetToken(MySqlParser.TEXT, 0); }
        public DataTypeBaseContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_dataTypeBase; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterDataTypeBase(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitDataTypeBase(this);
        }
    }

    [RuleVersion(0)]
    public DataTypeBaseContext dataTypeBase()
    {
        DataTypeBaseContext _localctx = new DataTypeBaseContext(Context, State);
        EnterRule(_localctx, 624, RULE_dataTypeBase);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 6289;
                _la = TokenStream.LA(1);
                if (!(((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (DATETIME - 191)) | (1L << (YEAR - 191)) | (1L << (TEXT - 191)) | (1L << (ENUM - 191)))) != 0)))
                {
                    ErrorHandler.RecoverInline(this);
                }
                else
                {
                    ErrorHandler.ReportMatch(this);
                    Consume();
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class KeywordsCanBeIdContext : ParserRuleContext
    {
        public ITerminalNode ACCOUNT() { return GetToken(MySqlParser.ACCOUNT, 0); }
        public ITerminalNode ACTION() { return GetToken(MySqlParser.ACTION, 0); }
        public ITerminalNode AFTER() { return GetToken(MySqlParser.AFTER, 0); }
        public ITerminalNode AGGREGATE() { return GetToken(MySqlParser.AGGREGATE, 0); }
        public ITerminalNode ALGORITHM() { return GetToken(MySqlParser.ALGORITHM, 0); }
        public ITerminalNode ANY() { return GetToken(MySqlParser.ANY, 0); }
        public ITerminalNode AT() { return GetToken(MySqlParser.AT, 0); }
        public ITerminalNode AUTHORS() { return GetToken(MySqlParser.AUTHORS, 0); }
        public ITerminalNode AUTOCOMMIT() { return GetToken(MySqlParser.AUTOCOMMIT, 0); }
        public ITerminalNode AUTOEXTEND_SIZE() { return GetToken(MySqlParser.AUTOEXTEND_SIZE, 0); }
        public ITerminalNode AUTO_INCREMENT() { return GetToken(MySqlParser.AUTO_INCREMENT, 0); }
        public ITerminalNode AVG_ROW_LENGTH() { return GetToken(MySqlParser.AVG_ROW_LENGTH, 0); }
        public ITerminalNode BEGIN() { return GetToken(MySqlParser.BEGIN, 0); }
        public ITerminalNode BINLOG() { return GetToken(MySqlParser.BINLOG, 0); }
        public ITerminalNode BIT() { return GetToken(MySqlParser.BIT, 0); }
        public ITerminalNode BLOCK() { return GetToken(MySqlParser.BLOCK, 0); }
        public ITerminalNode BOOL() { return GetToken(MySqlParser.BOOL, 0); }
        public ITerminalNode BOOLEAN() { return GetToken(MySqlParser.BOOLEAN, 0); }
        public ITerminalNode BTREE() { return GetToken(MySqlParser.BTREE, 0); }
        public ITerminalNode CACHE() { return GetToken(MySqlParser.CACHE, 0); }
        public ITerminalNode CASCADED() { return GetToken(MySqlParser.CASCADED, 0); }
        public ITerminalNode CHAIN() { return GetToken(MySqlParser.CHAIN, 0); }
        public ITerminalNode CHANGED() { return GetToken(MySqlParser.CHANGED, 0); }
        public ITerminalNode CHANNEL() { return GetToken(MySqlParser.CHANNEL, 0); }
        public ITerminalNode CHECKSUM() { return GetToken(MySqlParser.CHECKSUM, 0); }
        public ITerminalNode PAGE_CHECKSUM() { return GetToken(MySqlParser.PAGE_CHECKSUM, 0); }
        public ITerminalNode CATALOG_NAME() { return GetToken(MySqlParser.CATALOG_NAME, 0); }
        public ITerminalNode CIPHER() { return GetToken(MySqlParser.CIPHER, 0); }
        public ITerminalNode CLASS_ORIGIN() { return GetToken(MySqlParser.CLASS_ORIGIN, 0); }
        public ITerminalNode CLIENT() { return GetToken(MySqlParser.CLIENT, 0); }
        public ITerminalNode CLOSE() { return GetToken(MySqlParser.CLOSE, 0); }
        public ITerminalNode COALESCE() { return GetToken(MySqlParser.COALESCE, 0); }
        public ITerminalNode CODE() { return GetToken(MySqlParser.CODE, 0); }
        public ITerminalNode COLUMNS() { return GetToken(MySqlParser.COLUMNS, 0); }
        public ITerminalNode COLUMN_FORMAT() { return GetToken(MySqlParser.COLUMN_FORMAT, 0); }
        public ITerminalNode COLUMN_NAME() { return GetToken(MySqlParser.COLUMN_NAME, 0); }
        public ITerminalNode COMMENT() { return GetToken(MySqlParser.COMMENT, 0); }
        public ITerminalNode COMMIT() { return GetToken(MySqlParser.COMMIT, 0); }
        public ITerminalNode COMPACT() { return GetToken(MySqlParser.COMPACT, 0); }
        public ITerminalNode COMPLETION() { return GetToken(MySqlParser.COMPLETION, 0); }
        public ITerminalNode COMPRESSED() { return GetToken(MySqlParser.COMPRESSED, 0); }
        public ITerminalNode COMPRESSION() { return GetToken(MySqlParser.COMPRESSION, 0); }
        public ITerminalNode CONCURRENT() { return GetToken(MySqlParser.CONCURRENT, 0); }
        public ITerminalNode CONNECTION() { return GetToken(MySqlParser.CONNECTION, 0); }
        public ITerminalNode CONSISTENT() { return GetToken(MySqlParser.CONSISTENT, 0); }
        public ITerminalNode CONSTRAINT_CATALOG() { return GetToken(MySqlParser.CONSTRAINT_CATALOG, 0); }
        public ITerminalNode CONSTRAINT_NAME() { return GetToken(MySqlParser.CONSTRAINT_NAME, 0); }
        public ITerminalNode CONSTRAINT_SCHEMA() { return GetToken(MySqlParser.CONSTRAINT_SCHEMA, 0); }
        public ITerminalNode CONTAINS() { return GetToken(MySqlParser.CONTAINS, 0); }
        public ITerminalNode CONTEXT() { return GetToken(MySqlParser.CONTEXT, 0); }
        public ITerminalNode CONTRIBUTORS() { return GetToken(MySqlParser.CONTRIBUTORS, 0); }
        public ITerminalNode COPY() { return GetToken(MySqlParser.COPY, 0); }
        public ITerminalNode CPU() { return GetToken(MySqlParser.CPU, 0); }
        public ITerminalNode CURRENT() { return GetToken(MySqlParser.CURRENT, 0); }
        public ITerminalNode CURSOR_NAME() { return GetToken(MySqlParser.CURSOR_NAME, 0); }
        public ITerminalNode DATA() { return GetToken(MySqlParser.DATA, 0); }
        public ITerminalNode DATAFILE() { return GetToken(MySqlParser.DATAFILE, 0); }
        public ITerminalNode DEALLOCATE() { return GetToken(MySqlParser.DEALLOCATE, 0); }
        public ITerminalNode DEFAULT_AUTH() { return GetToken(MySqlParser.DEFAULT_AUTH, 0); }
        public ITerminalNode DEFINER() { return GetToken(MySqlParser.DEFINER, 0); }
        public ITerminalNode DELAY_KEY_WRITE() { return GetToken(MySqlParser.DELAY_KEY_WRITE, 0); }
        public ITerminalNode DES_KEY_FILE() { return GetToken(MySqlParser.DES_KEY_FILE, 0); }
        public ITerminalNode DIAGNOSTICS() { return GetToken(MySqlParser.DIAGNOSTICS, 0); }
        public ITerminalNode DIRECTORY() { return GetToken(MySqlParser.DIRECTORY, 0); }
        public ITerminalNode DISABLE() { return GetToken(MySqlParser.DISABLE, 0); }
        public ITerminalNode DISCARD() { return GetToken(MySqlParser.DISCARD, 0); }
        public ITerminalNode DISK() { return GetToken(MySqlParser.DISK, 0); }
        public ITerminalNode DO() { return GetToken(MySqlParser.DO, 0); }
        public ITerminalNode DUMPFILE() { return GetToken(MySqlParser.DUMPFILE, 0); }
        public ITerminalNode DUPLICATE() { return GetToken(MySqlParser.DUPLICATE, 0); }
        public ITerminalNode DYNAMIC() { return GetToken(MySqlParser.DYNAMIC, 0); }
        public ITerminalNode ENABLE() { return GetToken(MySqlParser.ENABLE, 0); }
        public ITerminalNode ENCRYPTION() { return GetToken(MySqlParser.ENCRYPTION, 0); }
        public ITerminalNode END() { return GetToken(MySqlParser.END, 0); }
        public ITerminalNode ENDS() { return GetToken(MySqlParser.ENDS, 0); }
        public ITerminalNode ENGINE() { return GetToken(MySqlParser.ENGINE, 0); }
        public ITerminalNode ENGINES() { return GetToken(MySqlParser.ENGINES, 0); }
        public ITerminalNode ERROR() { return GetToken(MySqlParser.ERROR, 0); }
        public ITerminalNode ERRORS() { return GetToken(MySqlParser.ERRORS, 0); }
        public ITerminalNode ESCAPE() { return GetToken(MySqlParser.ESCAPE, 0); }
        public ITerminalNode EVEN() { return GetToken(MySqlParser.EVEN, 0); }
        public ITerminalNode EVENT() { return GetToken(MySqlParser.EVENT, 0); }
        public ITerminalNode EVENTS() { return GetToken(MySqlParser.EVENTS, 0); }
        public ITerminalNode EVERY() { return GetToken(MySqlParser.EVERY, 0); }
        public ITerminalNode EXCHANGE() { return GetToken(MySqlParser.EXCHANGE, 0); }
        public ITerminalNode EXCLUSIVE() { return GetToken(MySqlParser.EXCLUSIVE, 0); }
        public ITerminalNode EXPIRE() { return GetToken(MySqlParser.EXPIRE, 0); }
        public ITerminalNode EXPORT() { return GetToken(MySqlParser.EXPORT, 0); }
        public ITerminalNode EXTENDED() { return GetToken(MySqlParser.EXTENDED, 0); }
        public ITerminalNode EXTENT_SIZE() { return GetToken(MySqlParser.EXTENT_SIZE, 0); }
        public ITerminalNode FAST() { return GetToken(MySqlParser.FAST, 0); }
        public ITerminalNode FAULTS() { return GetToken(MySqlParser.FAULTS, 0); }
        public ITerminalNode FIELDS() { return GetToken(MySqlParser.FIELDS, 0); }
        public ITerminalNode FILE_BLOCK_SIZE() { return GetToken(MySqlParser.FILE_BLOCK_SIZE, 0); }
        public ITerminalNode FILTER() { return GetToken(MySqlParser.FILTER, 0); }
        public ITerminalNode FIRST() { return GetToken(MySqlParser.FIRST, 0); }
        public ITerminalNode FIXED() { return GetToken(MySqlParser.FIXED, 0); }
        public ITerminalNode FLUSH() { return GetToken(MySqlParser.FLUSH, 0); }
        public ITerminalNode FOLLOWS() { return GetToken(MySqlParser.FOLLOWS, 0); }
        public ITerminalNode FOUND() { return GetToken(MySqlParser.FOUND, 0); }
        public ITerminalNode FULL() { return GetToken(MySqlParser.FULL, 0); }
        public ITerminalNode FUNCTION() { return GetToken(MySqlParser.FUNCTION, 0); }
        public ITerminalNode GENERAL() { return GetToken(MySqlParser.GENERAL, 0); }
        public ITerminalNode GLOBAL() { return GetToken(MySqlParser.GLOBAL, 0); }
        public ITerminalNode GRANTS() { return GetToken(MySqlParser.GRANTS, 0); }
        public ITerminalNode GROUP_REPLICATION() { return GetToken(MySqlParser.GROUP_REPLICATION, 0); }
        public ITerminalNode HANDLER() { return GetToken(MySqlParser.HANDLER, 0); }
        public ITerminalNode HASH() { return GetToken(MySqlParser.HASH, 0); }
        public ITerminalNode HELP() { return GetToken(MySqlParser.HELP, 0); }
        public ITerminalNode HOST() { return GetToken(MySqlParser.HOST, 0); }
        public ITerminalNode HOSTS() { return GetToken(MySqlParser.HOSTS, 0); }
        public ITerminalNode IDENTIFIED() { return GetToken(MySqlParser.IDENTIFIED, 0); }
        public ITerminalNode IGNORE_SERVER_IDS() { return GetToken(MySqlParser.IGNORE_SERVER_IDS, 0); }
        public ITerminalNode IMPORT() { return GetToken(MySqlParser.IMPORT, 0); }
        public ITerminalNode INDEXES() { return GetToken(MySqlParser.INDEXES, 0); }
        public ITerminalNode INITIAL_SIZE() { return GetToken(MySqlParser.INITIAL_SIZE, 0); }
        public ITerminalNode INPLACE() { return GetToken(MySqlParser.INPLACE, 0); }
        public ITerminalNode INSERT_METHOD() { return GetToken(MySqlParser.INSERT_METHOD, 0); }
        public ITerminalNode INSTALL() { return GetToken(MySqlParser.INSTALL, 0); }
        public ITerminalNode INSTANCE() { return GetToken(MySqlParser.INSTANCE, 0); }
        public ITerminalNode INTERNAL() { return GetToken(MySqlParser.INTERNAL, 0); }
        public ITerminalNode INVOKER() { return GetToken(MySqlParser.INVOKER, 0); }
        public ITerminalNode IO() { return GetToken(MySqlParser.IO, 0); }
        public ITerminalNode IO_THREAD() { return GetToken(MySqlParser.IO_THREAD, 0); }
        public ITerminalNode IPC() { return GetToken(MySqlParser.IPC, 0); }
        public ITerminalNode ISOLATION() { return GetToken(MySqlParser.ISOLATION, 0); }
        public ITerminalNode ISSUER() { return GetToken(MySqlParser.ISSUER, 0); }
        public ITerminalNode JSON() { return GetToken(MySqlParser.JSON, 0); }
        public ITerminalNode KEY_BLOCK_SIZE() { return GetToken(MySqlParser.KEY_BLOCK_SIZE, 0); }
        public ITerminalNode LANGUAGE() { return GetToken(MySqlParser.LANGUAGE, 0); }
        public ITerminalNode LAST() { return GetToken(MySqlParser.LAST, 0); }
        public ITerminalNode LEAVES() { return GetToken(MySqlParser.LEAVES, 0); }
        public ITerminalNode LESS() { return GetToken(MySqlParser.LESS, 0); }
        public ITerminalNode LEVEL() { return GetToken(MySqlParser.LEVEL, 0); }
        public ITerminalNode LIST() { return GetToken(MySqlParser.LIST, 0); }
        public ITerminalNode LOCAL() { return GetToken(MySqlParser.LOCAL, 0); }
        public ITerminalNode LOGFILE() { return GetToken(MySqlParser.LOGFILE, 0); }
        public ITerminalNode LOGS() { return GetToken(MySqlParser.LOGS, 0); }
        public ITerminalNode MASTER() { return GetToken(MySqlParser.MASTER, 0); }
        public ITerminalNode MASTER_AUTO_POSITION() { return GetToken(MySqlParser.MASTER_AUTO_POSITION, 0); }
        public ITerminalNode MASTER_CONNECT_RETRY() { return GetToken(MySqlParser.MASTER_CONNECT_RETRY, 0); }
        public ITerminalNode MASTER_DELAY() { return GetToken(MySqlParser.MASTER_DELAY, 0); }
        public ITerminalNode MASTER_HEARTBEAT_PERIOD() { return GetToken(MySqlParser.MASTER_HEARTBEAT_PERIOD, 0); }
        public ITerminalNode MASTER_HOST() { return GetToken(MySqlParser.MASTER_HOST, 0); }
        public ITerminalNode MASTER_LOG_FILE() { return GetToken(MySqlParser.MASTER_LOG_FILE, 0); }
        public ITerminalNode MASTER_LOG_POS() { return GetToken(MySqlParser.MASTER_LOG_POS, 0); }
        public ITerminalNode MASTER_PASSWORD() { return GetToken(MySqlParser.MASTER_PASSWORD, 0); }
        public ITerminalNode MASTER_PORT() { return GetToken(MySqlParser.MASTER_PORT, 0); }
        public ITerminalNode MASTER_RETRY_COUNT() { return GetToken(MySqlParser.MASTER_RETRY_COUNT, 0); }
        public ITerminalNode MASTER_SSL() { return GetToken(MySqlParser.MASTER_SSL, 0); }
        public ITerminalNode MASTER_SSL_CA() { return GetToken(MySqlParser.MASTER_SSL_CA, 0); }
        public ITerminalNode MASTER_SSL_CAPATH() { return GetToken(MySqlParser.MASTER_SSL_CAPATH, 0); }
        public ITerminalNode MASTER_SSL_CERT() { return GetToken(MySqlParser.MASTER_SSL_CERT, 0); }
        public ITerminalNode MASTER_SSL_CIPHER() { return GetToken(MySqlParser.MASTER_SSL_CIPHER, 0); }
        public ITerminalNode MASTER_SSL_CRL() { return GetToken(MySqlParser.MASTER_SSL_CRL, 0); }
        public ITerminalNode MASTER_SSL_CRLPATH() { return GetToken(MySqlParser.MASTER_SSL_CRLPATH, 0); }
        public ITerminalNode MASTER_SSL_KEY() { return GetToken(MySqlParser.MASTER_SSL_KEY, 0); }
        public ITerminalNode MASTER_TLS_VERSION() { return GetToken(MySqlParser.MASTER_TLS_VERSION, 0); }
        public ITerminalNode MASTER_USER() { return GetToken(MySqlParser.MASTER_USER, 0); }
        public ITerminalNode MAX_CONNECTIONS_PER_HOUR() { return GetToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR, 0); }
        public ITerminalNode MAX_QUERIES_PER_HOUR() { return GetToken(MySqlParser.MAX_QUERIES_PER_HOUR, 0); }
        public ITerminalNode MAX_ROWS() { return GetToken(MySqlParser.MAX_ROWS, 0); }
        public ITerminalNode MAX_SIZE() { return GetToken(MySqlParser.MAX_SIZE, 0); }
        public ITerminalNode MAX_UPDATES_PER_HOUR() { return GetToken(MySqlParser.MAX_UPDATES_PER_HOUR, 0); }
        public ITerminalNode MAX_USER_CONNECTIONS() { return GetToken(MySqlParser.MAX_USER_CONNECTIONS, 0); }
        public ITerminalNode MEDIUM() { return GetToken(MySqlParser.MEDIUM, 0); }
        public ITerminalNode MEMORY() { return GetToken(MySqlParser.MEMORY, 0); }
        public ITerminalNode MERGE() { return GetToken(MySqlParser.MERGE, 0); }
        public ITerminalNode MESSAGE_TEXT() { return GetToken(MySqlParser.MESSAGE_TEXT, 0); }
        public ITerminalNode MID() { return GetToken(MySqlParser.MID, 0); }
        public ITerminalNode MIGRATE() { return GetToken(MySqlParser.MIGRATE, 0); }
        public ITerminalNode MIN_ROWS() { return GetToken(MySqlParser.MIN_ROWS, 0); }
        public ITerminalNode MODE() { return GetToken(MySqlParser.MODE, 0); }
        public ITerminalNode MODIFY() { return GetToken(MySqlParser.MODIFY, 0); }
        public ITerminalNode MUTEX() { return GetToken(MySqlParser.MUTEX, 0); }
        public ITerminalNode MYSQL() { return GetToken(MySqlParser.MYSQL, 0); }
        public ITerminalNode MYSQL_ERRNO() { return GetToken(MySqlParser.MYSQL_ERRNO, 0); }
        public ITerminalNode NAME() { return GetToken(MySqlParser.NAME, 0); }
        public ITerminalNode NAMES() { return GetToken(MySqlParser.NAMES, 0); }
        public ITerminalNode NCHAR() { return GetToken(MySqlParser.NCHAR, 0); }
        public ITerminalNode NEVER() { return GetToken(MySqlParser.NEVER, 0); }
        public ITerminalNode NEXT() { return GetToken(MySqlParser.NEXT, 0); }
        public ITerminalNode NO() { return GetToken(MySqlParser.NO, 0); }
        public ITerminalNode NODEGROUP() { return GetToken(MySqlParser.NODEGROUP, 0); }
        public ITerminalNode NONE() { return GetToken(MySqlParser.NONE, 0); }
        public ITerminalNode NUMBER() { return GetToken(MySqlParser.NUMBER, 0); }
        public ITerminalNode OFFLINE() { return GetToken(MySqlParser.OFFLINE, 0); }
        public ITerminalNode OFFSET() { return GetToken(MySqlParser.OFFSET, 0); }
        public ITerminalNode OJ() { return GetToken(MySqlParser.OJ, 0); }
        public ITerminalNode OLD_PASSWORD() { return GetToken(MySqlParser.OLD_PASSWORD, 0); }
        public ITerminalNode ONE() { return GetToken(MySqlParser.ONE, 0); }
        public ITerminalNode ONLINE() { return GetToken(MySqlParser.ONLINE, 0); }
        public ITerminalNode ONLY() { return GetToken(MySqlParser.ONLY, 0); }
        public ITerminalNode OPEN() { return GetToken(MySqlParser.OPEN, 0); }
        public ITerminalNode OPTIMIZER_COSTS() { return GetToken(MySqlParser.OPTIMIZER_COSTS, 0); }
        public ITerminalNode OPTIONS() { return GetToken(MySqlParser.OPTIONS, 0); }
        public ITerminalNode OWNER() { return GetToken(MySqlParser.OWNER, 0); }
        public ITerminalNode PACK_KEYS() { return GetToken(MySqlParser.PACK_KEYS, 0); }
        public ITerminalNode PAGE() { return GetToken(MySqlParser.PAGE, 0); }
        public ITerminalNode PARSER() { return GetToken(MySqlParser.PARSER, 0); }
        public ITerminalNode PARTIAL() { return GetToken(MySqlParser.PARTIAL, 0); }
        public ITerminalNode PARTITIONING() { return GetToken(MySqlParser.PARTITIONING, 0); }
        public ITerminalNode PARTITIONS() { return GetToken(MySqlParser.PARTITIONS, 0); }
        public ITerminalNode PASSWORD() { return GetToken(MySqlParser.PASSWORD, 0); }
        public ITerminalNode PHASE() { return GetToken(MySqlParser.PHASE, 0); }
        public ITerminalNode PLUGINS() { return GetToken(MySqlParser.PLUGINS, 0); }
        public ITerminalNode PLUGIN_DIR() { return GetToken(MySqlParser.PLUGIN_DIR, 0); }
        public ITerminalNode PLUGIN() { return GetToken(MySqlParser.PLUGIN, 0); }
        public ITerminalNode PORT() { return GetToken(MySqlParser.PORT, 0); }
        public ITerminalNode PRECEDES() { return GetToken(MySqlParser.PRECEDES, 0); }
        public ITerminalNode PREPARE() { return GetToken(MySqlParser.PREPARE, 0); }
        public ITerminalNode PRESERVE() { return GetToken(MySqlParser.PRESERVE, 0); }
        public ITerminalNode PREV() { return GetToken(MySqlParser.PREV, 0); }
        public ITerminalNode PROCESSLIST() { return GetToken(MySqlParser.PROCESSLIST, 0); }
        public ITerminalNode PROFILE() { return GetToken(MySqlParser.PROFILE, 0); }
        public ITerminalNode PROFILES() { return GetToken(MySqlParser.PROFILES, 0); }
        public ITerminalNode PROXY() { return GetToken(MySqlParser.PROXY, 0); }
        public ITerminalNode QUERY() { return GetToken(MySqlParser.QUERY, 0); }
        public ITerminalNode QUICK() { return GetToken(MySqlParser.QUICK, 0); }
        public ITerminalNode REBUILD() { return GetToken(MySqlParser.REBUILD, 0); }
        public ITerminalNode RECOVER() { return GetToken(MySqlParser.RECOVER, 0); }
        public ITerminalNode REDO_BUFFER_SIZE() { return GetToken(MySqlParser.REDO_BUFFER_SIZE, 0); }
        public ITerminalNode REDUNDANT() { return GetToken(MySqlParser.REDUNDANT, 0); }
        public ITerminalNode RELAY() { return GetToken(MySqlParser.RELAY, 0); }
        public ITerminalNode RELAYLOG() { return GetToken(MySqlParser.RELAYLOG, 0); }
        public ITerminalNode RELAY_LOG_FILE() { return GetToken(MySqlParser.RELAY_LOG_FILE, 0); }
        public ITerminalNode RELAY_LOG_POS() { return GetToken(MySqlParser.RELAY_LOG_POS, 0); }
        public ITerminalNode REMOVE() { return GetToken(MySqlParser.REMOVE, 0); }
        public ITerminalNode REORGANIZE() { return GetToken(MySqlParser.REORGANIZE, 0); }
        public ITerminalNode REPAIR() { return GetToken(MySqlParser.REPAIR, 0); }
        public ITerminalNode REPLICATE_DO_DB() { return GetToken(MySqlParser.REPLICATE_DO_DB, 0); }
        public ITerminalNode REPLICATE_DO_TABLE() { return GetToken(MySqlParser.REPLICATE_DO_TABLE, 0); }
        public ITerminalNode REPLICATE_IGNORE_DB() { return GetToken(MySqlParser.REPLICATE_IGNORE_DB, 0); }
        public ITerminalNode REPLICATE_IGNORE_TABLE() { return GetToken(MySqlParser.REPLICATE_IGNORE_TABLE, 0); }
        public ITerminalNode REPLICATE_REWRITE_DB() { return GetToken(MySqlParser.REPLICATE_REWRITE_DB, 0); }
        public ITerminalNode REPLICATE_WILD_DO_TABLE() { return GetToken(MySqlParser.REPLICATE_WILD_DO_TABLE, 0); }
        public ITerminalNode REPLICATE_WILD_IGNORE_TABLE() { return GetToken(MySqlParser.REPLICATE_WILD_IGNORE_TABLE, 0); }
        public ITerminalNode REPLICATION() { return GetToken(MySqlParser.REPLICATION, 0); }
        public ITerminalNode RESET() { return GetToken(MySqlParser.RESET, 0); }
        public ITerminalNode RESUME() { return GetToken(MySqlParser.RESUME, 0); }
        public ITerminalNode RETURNED_SQLSTATE() { return GetToken(MySqlParser.RETURNED_SQLSTATE, 0); }
        public ITerminalNode RETURNS() { return GetToken(MySqlParser.RETURNS, 0); }
        public ITerminalNode ROLLBACK() { return GetToken(MySqlParser.ROLLBACK, 0); }
        public ITerminalNode ROLLUP() { return GetToken(MySqlParser.ROLLUP, 0); }
        public ITerminalNode ROTATE() { return GetToken(MySqlParser.ROTATE, 0); }
        public ITerminalNode ROW() { return GetToken(MySqlParser.ROW, 0); }
        public ITerminalNode ROWS() { return GetToken(MySqlParser.ROWS, 0); }
        public ITerminalNode ROW_FORMAT() { return GetToken(MySqlParser.ROW_FORMAT, 0); }
        public ITerminalNode SAVEPOINT() { return GetToken(MySqlParser.SAVEPOINT, 0); }
        public ITerminalNode SCHEDULE() { return GetToken(MySqlParser.SCHEDULE, 0); }
        public ITerminalNode SCHEMA_NAME() { return GetToken(MySqlParser.SCHEMA_NAME, 0); }
        public ITerminalNode SECURITY() { return GetToken(MySqlParser.SECURITY, 0); }
        public ITerminalNode SERIAL() { return GetToken(MySqlParser.SERIAL, 0); }
        public ITerminalNode SERVER() { return GetToken(MySqlParser.SERVER, 0); }
        public ITerminalNode SESSION() { return GetToken(MySqlParser.SESSION, 0); }
        public ITerminalNode SHARE() { return GetToken(MySqlParser.SHARE, 0); }
        public ITerminalNode SHARED() { return GetToken(MySqlParser.SHARED, 0); }
        public ITerminalNode SIGNED() { return GetToken(MySqlParser.SIGNED, 0); }
        public ITerminalNode SIMPLE() { return GetToken(MySqlParser.SIMPLE, 0); }
        public ITerminalNode SLAVE() { return GetToken(MySqlParser.SLAVE, 0); }
        public ITerminalNode SLOW() { return GetToken(MySqlParser.SLOW, 0); }
        public ITerminalNode SNAPSHOT() { return GetToken(MySqlParser.SNAPSHOT, 0); }
        public ITerminalNode SOCKET() { return GetToken(MySqlParser.SOCKET, 0); }
        public ITerminalNode SOME() { return GetToken(MySqlParser.SOME, 0); }
        public ITerminalNode SONAME() { return GetToken(MySqlParser.SONAME, 0); }
        public ITerminalNode SOUNDS() { return GetToken(MySqlParser.SOUNDS, 0); }
        public ITerminalNode SOURCE() { return GetToken(MySqlParser.SOURCE, 0); }
        public ITerminalNode SQL_AFTER_GTIDS() { return GetToken(MySqlParser.SQL_AFTER_GTIDS, 0); }
        public ITerminalNode SQL_AFTER_MTS_GAPS() { return GetToken(MySqlParser.SQL_AFTER_MTS_GAPS, 0); }
        public ITerminalNode SQL_BEFORE_GTIDS() { return GetToken(MySqlParser.SQL_BEFORE_GTIDS, 0); }
        public ITerminalNode SQL_BUFFER_RESULT() { return GetToken(MySqlParser.SQL_BUFFER_RESULT, 0); }
        public ITerminalNode SQL_CACHE() { return GetToken(MySqlParser.SQL_CACHE, 0); }
        public ITerminalNode SQL_NO_CACHE() { return GetToken(MySqlParser.SQL_NO_CACHE, 0); }
        public ITerminalNode SQL_THREAD() { return GetToken(MySqlParser.SQL_THREAD, 0); }
        public ITerminalNode STACKED() { return GetToken(MySqlParser.STACKED, 0); }
        public ITerminalNode START() { return GetToken(MySqlParser.START, 0); }
        public ITerminalNode STARTS() { return GetToken(MySqlParser.STARTS, 0); }
        public ITerminalNode STATS_AUTO_RECALC() { return GetToken(MySqlParser.STATS_AUTO_RECALC, 0); }
        public ITerminalNode STATS_PERSISTENT() { return GetToken(MySqlParser.STATS_PERSISTENT, 0); }
        public ITerminalNode STATS_SAMPLE_PAGES() { return GetToken(MySqlParser.STATS_SAMPLE_PAGES, 0); }
        public ITerminalNode STATUS() { return GetToken(MySqlParser.STATUS, 0); }
        public ITerminalNode STOP() { return GetToken(MySqlParser.STOP, 0); }
        public ITerminalNode STORAGE() { return GetToken(MySqlParser.STORAGE, 0); }
        public ITerminalNode STRING() { return GetToken(MySqlParser.STRING, 0); }
        public ITerminalNode SUBCLASS_ORIGIN() { return GetToken(MySqlParser.SUBCLASS_ORIGIN, 0); }
        public ITerminalNode SUBJECT() { return GetToken(MySqlParser.SUBJECT, 0); }
        public ITerminalNode SUBPARTITION() { return GetToken(MySqlParser.SUBPARTITION, 0); }
        public ITerminalNode SUBPARTITIONS() { return GetToken(MySqlParser.SUBPARTITIONS, 0); }
        public ITerminalNode SUSPEND() { return GetToken(MySqlParser.SUSPEND, 0); }
        public ITerminalNode SWAPS() { return GetToken(MySqlParser.SWAPS, 0); }
        public ITerminalNode SWITCHES() { return GetToken(MySqlParser.SWITCHES, 0); }
        public ITerminalNode TABLE_NAME() { return GetToken(MySqlParser.TABLE_NAME, 0); }
        public ITerminalNode TABLESPACE() { return GetToken(MySqlParser.TABLESPACE, 0); }
        public ITerminalNode TEMPORARY() { return GetToken(MySqlParser.TEMPORARY, 0); }
        public ITerminalNode TEMPTABLE() { return GetToken(MySqlParser.TEMPTABLE, 0); }
        public ITerminalNode THAN() { return GetToken(MySqlParser.THAN, 0); }
        public ITerminalNode TRADITIONAL() { return GetToken(MySqlParser.TRADITIONAL, 0); }
        public ITerminalNode TRANSACTION() { return GetToken(MySqlParser.TRANSACTION, 0); }
        public ITerminalNode TRIGGERS() { return GetToken(MySqlParser.TRIGGERS, 0); }
        public ITerminalNode TRUNCATE() { return GetToken(MySqlParser.TRUNCATE, 0); }
        public ITerminalNode UNDEFINED() { return GetToken(MySqlParser.UNDEFINED, 0); }
        public ITerminalNode UNDOFILE() { return GetToken(MySqlParser.UNDOFILE, 0); }
        public ITerminalNode UNDO_BUFFER_SIZE() { return GetToken(MySqlParser.UNDO_BUFFER_SIZE, 0); }
        public ITerminalNode UNINSTALL() { return GetToken(MySqlParser.UNINSTALL, 0); }
        public ITerminalNode UNKNOWN() { return GetToken(MySqlParser.UNKNOWN, 0); }
        public ITerminalNode UNTIL() { return GetToken(MySqlParser.UNTIL, 0); }
        public ITerminalNode UPGRADE() { return GetToken(MySqlParser.UPGRADE, 0); }
        public ITerminalNode USER() { return GetToken(MySqlParser.USER, 0); }
        public ITerminalNode USE_FRM() { return GetToken(MySqlParser.USE_FRM, 0); }
        public ITerminalNode USER_RESOURCES() { return GetToken(MySqlParser.USER_RESOURCES, 0); }
        public ITerminalNode VALIDATION() { return GetToken(MySqlParser.VALIDATION, 0); }
        public ITerminalNode VALUE() { return GetToken(MySqlParser.VALUE, 0); }
        public ITerminalNode VARIABLES() { return GetToken(MySqlParser.VARIABLES, 0); }
        public ITerminalNode VIEW() { return GetToken(MySqlParser.VIEW, 0); }
        public ITerminalNode WAIT() { return GetToken(MySqlParser.WAIT, 0); }
        public ITerminalNode WARNINGS() { return GetToken(MySqlParser.WARNINGS, 0); }
        public ITerminalNode WITHOUT() { return GetToken(MySqlParser.WITHOUT, 0); }
        public ITerminalNode WORK() { return GetToken(MySqlParser.WORK, 0); }
        public ITerminalNode WRAPPER() { return GetToken(MySqlParser.WRAPPER, 0); }
        public ITerminalNode X509() { return GetToken(MySqlParser.X509, 0); }
        public ITerminalNode XA() { return GetToken(MySqlParser.XA, 0); }
        public ITerminalNode XML() { return GetToken(MySqlParser.XML, 0); }
        public KeywordsCanBeIdContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_keywordsCanBeId; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterKeywordsCanBeId(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitKeywordsCanBeId(this);
        }
    }

    [RuleVersion(0)]
    public KeywordsCanBeIdContext keywordsCanBeId()
    {
        KeywordsCanBeIdContext _localctx = new KeywordsCanBeIdContext(Context, State);
        EnterRule(_localctx, 626, RULE_keywordsCanBeId);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 6291;
                _la = TokenStream.LA(1);
                if (!(_la == CURRENT || _la == DIAGNOSTICS || _la == NUMBER || _la == STACKED || ((((_la - 212)) & ~0x3f) == 0 && ((1L << (_la - 212)) & ((1L << (SERIAL - 212)) | (1L << (ACCOUNT - 212)) | (1L << (ACTION - 212)) | (1L << (AFTER - 212)) | (1L << (AGGREGATE - 212)) | (1L << (ALGORITHM - 212)) | (1L << (ANY - 212)) | (1L << (AT - 212)) | (1L << (AUTHORS - 212)) | (1L << (AUTOCOMMIT - 212)) | (1L << (AUTOEXTEND_SIZE - 212)) | (1L << (AUTO_INCREMENT - 212)) | (1L << (AVG_ROW_LENGTH - 212)) | (1L << (BEGIN - 212)) | (1L << (BINLOG - 212)) | (1L << (BIT - 212)) | (1L << (BLOCK - 212)) | (1L << (BOOL - 212)))) != 0) || ((((_la - 276)) & ~0x3f) == 0 && ((1L << (_la - 276)) & ((1L << (BOOLEAN - 276)) | (1L << (BTREE - 276)) | (1L << (CACHE - 276)) | (1L << (CASCADED - 276)) | (1L << (CHAIN - 276)) | (1L << (CHANGED - 276)) | (1L << (CHANNEL - 276)) | (1L << (CHECKSUM - 276)) | (1L << (PAGE_CHECKSUM - 276)) | (1L << (CIPHER - 276)) | (1L << (CLASS_ORIGIN - 276)) | (1L << (CLIENT - 276)) | (1L << (CLOSE - 276)) | (1L << (COALESCE - 276)) | (1L << (CODE - 276)) | (1L << (COLUMNS - 276)) | (1L << (COLUMN_FORMAT - 276)) | (1L << (COLUMN_NAME - 276)) | (1L << (COMMENT - 276)) | (1L << (COMMIT - 276)) | (1L << (COMPACT - 276)) | (1L << (COMPLETION - 276)) | (1L << (COMPRESSED - 276)) | (1L << (COMPRESSION - 276)) | (1L << (CONCURRENT - 276)) | (1L << (CONNECTION - 276)) | (1L << (CONSISTENT - 276)) | (1L << (CONSTRAINT_CATALOG - 276)) | (1L << (CONSTRAINT_SCHEMA - 276)) | (1L << (CONSTRAINT_NAME - 276)) | (1L << (CONTAINS - 276)) | (1L << (CONTEXT - 276)) | (1L << (CONTRIBUTORS - 276)) | (1L << (COPY - 276)) | (1L << (CPU - 276)) | (1L << (CURSOR_NAME - 276)) | (1L << (DATA - 276)) | (1L << (DATAFILE - 276)) | (1L << (DEALLOCATE - 276)) | (1L << (DEFAULT_AUTH - 276)) | (1L << (DEFINER - 276)) | (1L << (DELAY_KEY_WRITE - 276)) | (1L << (DES_KEY_FILE - 276)) | (1L << (DIRECTORY - 276)) | (1L << (DISABLE - 276)) | (1L << (DISCARD - 276)) | (1L << (DISK - 276)) | (1L << (DO - 276)) | (1L << (DUMPFILE - 276)) | (1L << (DUPLICATE - 276)) | (1L << (DYNAMIC - 276)) | (1L << (ENABLE - 276)) | (1L << (ENCRYPTION - 276)) | (1L << (END - 276)) | (1L << (ENDS - 276)) | (1L << (ENGINE - 276)) | (1L << (ENGINES - 276)) | (1L << (ERROR - 276)) | (1L << (ERRORS - 276)) | (1L << (ESCAPE - 276)) | (1L << (EVEN - 276)) | (1L << (EVENT - 276)) | (1L << (EVENTS - 276)) | (1L << (EVERY - 276)))) != 0) || ((((_la - 340)) & ~0x3f) == 0 && ((1L << (_la - 340)) & ((1L << (EXCHANGE - 340)) | (1L << (EXCLUSIVE - 340)) | (1L << (EXPIRE - 340)) | (1L << (EXPORT - 340)) | (1L << (EXTENDED - 340)) | (1L << (EXTENT_SIZE - 340)) | (1L << (FAST - 340)) | (1L << (FAULTS - 340)) | (1L << (FIELDS - 340)) | (1L << (FILE_BLOCK_SIZE - 340)) | (1L << (FILTER - 340)) | (1L << (FIRST - 340)) | (1L << (FIXED - 340)) | (1L << (FLUSH - 340)) | (1L << (FOLLOWS - 340)) | (1L << (FOUND - 340)) | (1L << (FULL - 340)) | (1L << (FUNCTION - 340)) | (1L << (GENERAL - 340)) | (1L << (GLOBAL - 340)) | (1L << (GRANTS - 340)) | (1L << (GROUP_REPLICATION - 340)) | (1L << (HANDLER - 340)) | (1L << (HASH - 340)) | (1L << (HELP - 340)) | (1L << (HOST - 340)) | (1L << (HOSTS - 340)) | (1L << (IDENTIFIED - 340)) | (1L << (IGNORE_SERVER_IDS - 340)) | (1L << (IMPORT - 340)) | (1L << (INDEXES - 340)) | (1L << (INITIAL_SIZE - 340)) | (1L << (INPLACE - 340)) | (1L << (INSERT_METHOD - 340)) | (1L << (INSTALL - 340)) | (1L << (INSTANCE - 340)) | (1L << (INVOKER - 340)) | (1L << (IO - 340)) | (1L << (IO_THREAD - 340)) | (1L << (IPC - 340)) | (1L << (ISOLATION - 340)) | (1L << (ISSUER - 340)) | (1L << (JSON - 340)) | (1L << (KEY_BLOCK_SIZE - 340)) | (1L << (LANGUAGE - 340)) | (1L << (LAST - 340)) | (1L << (LEAVES - 340)) | (1L << (LESS - 340)) | (1L << (LEVEL - 340)) | (1L << (LIST - 340)) | (1L << (LOCAL - 340)) | (1L << (LOGFILE - 340)) | (1L << (LOGS - 340)) | (1L << (MASTER - 340)) | (1L << (MASTER_AUTO_POSITION - 340)) | (1L << (MASTER_CONNECT_RETRY - 340)) | (1L << (MASTER_DELAY - 340)) | (1L << (MASTER_HEARTBEAT_PERIOD - 340)) | (1L << (MASTER_HOST - 340)) | (1L << (MASTER_LOG_FILE - 340)) | (1L << (MASTER_LOG_POS - 340)) | (1L << (MASTER_PASSWORD - 340)) | (1L << (MASTER_PORT - 340)))) != 0) || ((((_la - 404)) & ~0x3f) == 0 && ((1L << (_la - 404)) & ((1L << (MASTER_RETRY_COUNT - 404)) | (1L << (MASTER_SSL - 404)) | (1L << (MASTER_SSL_CA - 404)) | (1L << (MASTER_SSL_CAPATH - 404)) | (1L << (MASTER_SSL_CERT - 404)) | (1L << (MASTER_SSL_CIPHER - 404)) | (1L << (MASTER_SSL_CRL - 404)) | (1L << (MASTER_SSL_CRLPATH - 404)) | (1L << (MASTER_SSL_KEY - 404)) | (1L << (MASTER_TLS_VERSION - 404)) | (1L << (MASTER_USER - 404)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 404)) | (1L << (MAX_QUERIES_PER_HOUR - 404)) | (1L << (MAX_ROWS - 404)) | (1L << (MAX_SIZE - 404)) | (1L << (MAX_UPDATES_PER_HOUR - 404)) | (1L << (MAX_USER_CONNECTIONS - 404)) | (1L << (MEDIUM - 404)) | (1L << (MERGE - 404)) | (1L << (MESSAGE_TEXT - 404)) | (1L << (MID - 404)) | (1L << (MIGRATE - 404)) | (1L << (MIN_ROWS - 404)) | (1L << (MODE - 404)) | (1L << (MODIFY - 404)) | (1L << (MUTEX - 404)) | (1L << (MYSQL - 404)) | (1L << (MYSQL_ERRNO - 404)) | (1L << (NAME - 404)) | (1L << (NAMES - 404)) | (1L << (NCHAR - 404)) | (1L << (NEVER - 404)) | (1L << (NEXT - 404)) | (1L << (NO - 404)) | (1L << (NODEGROUP - 404)) | (1L << (NONE - 404)) | (1L << (OFFLINE - 404)) | (1L << (OFFSET - 404)) | (1L << (OJ - 404)) | (1L << (OLD_PASSWORD - 404)) | (1L << (ONE - 404)) | (1L << (ONLINE - 404)) | (1L << (ONLY - 404)) | (1L << (OPEN - 404)) | (1L << (OPTIMIZER_COSTS - 404)) | (1L << (OPTIONS - 404)) | (1L << (OWNER - 404)) | (1L << (PACK_KEYS - 404)) | (1L << (PAGE - 404)) | (1L << (PARSER - 404)) | (1L << (PARTIAL - 404)) | (1L << (PARTITIONING - 404)) | (1L << (PARTITIONS - 404)) | (1L << (PASSWORD - 404)) | (1L << (PHASE - 404)) | (1L << (PLUGIN - 404)) | (1L << (PLUGIN_DIR - 404)) | (1L << (PLUGINS - 404)) | (1L << (PORT - 404)) | (1L << (PRECEDES - 404)) | (1L << (PREPARE - 404)) | (1L << (PRESERVE - 404)) | (1L << (PREV - 404)) | (1L << (PROCESSLIST - 404)))) != 0) || ((((_la - 468)) & ~0x3f) == 0 && ((1L << (_la - 468)) & ((1L << (PROFILE - 468)) | (1L << (PROFILES - 468)) | (1L << (PROXY - 468)) | (1L << (QUERY - 468)) | (1L << (QUICK - 468)) | (1L << (REBUILD - 468)) | (1L << (RECOVER - 468)) | (1L << (REDO_BUFFER_SIZE - 468)) | (1L << (REDUNDANT - 468)) | (1L << (RELAY - 468)) | (1L << (RELAY_LOG_FILE - 468)) | (1L << (RELAY_LOG_POS - 468)) | (1L << (RELAYLOG - 468)) | (1L << (REMOVE - 468)) | (1L << (REORGANIZE - 468)) | (1L << (REPAIR - 468)) | (1L << (REPLICATE_DO_DB - 468)) | (1L << (REPLICATE_DO_TABLE - 468)) | (1L << (REPLICATE_IGNORE_DB - 468)) | (1L << (REPLICATE_IGNORE_TABLE - 468)) | (1L << (REPLICATE_REWRITE_DB - 468)) | (1L << (REPLICATE_WILD_DO_TABLE - 468)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 468)) | (1L << (REPLICATION - 468)) | (1L << (RESET - 468)) | (1L << (RESUME - 468)) | (1L << (RETURNED_SQLSTATE - 468)) | (1L << (RETURNS - 468)) | (1L << (ROLLBACK - 468)) | (1L << (ROLLUP - 468)) | (1L << (ROTATE - 468)) | (1L << (ROW - 468)) | (1L << (ROWS - 468)) | (1L << (ROW_FORMAT - 468)) | (1L << (SAVEPOINT - 468)) | (1L << (SCHEDULE - 468)) | (1L << (SECURITY - 468)) | (1L << (SERVER - 468)) | (1L << (SESSION - 468)) | (1L << (SHARE - 468)) | (1L << (SHARED - 468)) | (1L << (SIGNED - 468)) | (1L << (SIMPLE - 468)) | (1L << (SLAVE - 468)) | (1L << (SLOW - 468)) | (1L << (SNAPSHOT - 468)) | (1L << (SOCKET - 468)) | (1L << (SOME - 468)) | (1L << (SONAME - 468)) | (1L << (SOUNDS - 468)) | (1L << (SOURCE - 468)) | (1L << (SQL_AFTER_GTIDS - 468)) | (1L << (SQL_AFTER_MTS_GAPS - 468)) | (1L << (SQL_BEFORE_GTIDS - 468)) | (1L << (SQL_BUFFER_RESULT - 468)) | (1L << (SQL_CACHE - 468)) | (1L << (SQL_NO_CACHE - 468)) | (1L << (SQL_THREAD - 468)) | (1L << (START - 468)) | (1L << (STARTS - 468)) | (1L << (STATS_AUTO_RECALC - 468)) | (1L << (STATS_PERSISTENT - 468)) | (1L << (STATS_SAMPLE_PAGES - 468)) | (1L << (STATUS - 468)))) != 0) || ((((_la - 532)) & ~0x3f) == 0 && ((1L << (_la - 532)) & ((1L << (STOP - 532)) | (1L << (STORAGE - 532)) | (1L << (STRING - 532)) | (1L << (SUBCLASS_ORIGIN - 532)) | (1L << (SUBJECT - 532)) | (1L << (SUBPARTITION - 532)) | (1L << (SUBPARTITIONS - 532)) | (1L << (SUSPEND - 532)) | (1L << (SWAPS - 532)) | (1L << (SWITCHES - 532)) | (1L << (TABLE_NAME - 532)) | (1L << (TABLESPACE - 532)) | (1L << (TEMPORARY - 532)) | (1L << (TEMPTABLE - 532)) | (1L << (THAN - 532)) | (1L << (TRADITIONAL - 532)) | (1L << (TRANSACTION - 532)) | (1L << (TRIGGERS - 532)) | (1L << (TRUNCATE - 532)) | (1L << (UNDEFINED - 532)) | (1L << (UNDOFILE - 532)) | (1L << (UNDO_BUFFER_SIZE - 532)) | (1L << (UNINSTALL - 532)) | (1L << (UNKNOWN - 532)) | (1L << (UNTIL - 532)) | (1L << (UPGRADE - 532)) | (1L << (USER - 532)) | (1L << (USE_FRM - 532)) | (1L << (USER_RESOURCES - 532)) | (1L << (VALIDATION - 532)) | (1L << (VALUE - 532)) | (1L << (VARIABLES - 532)) | (1L << (VIEW - 532)) | (1L << (WAIT - 532)) | (1L << (WARNINGS - 532)) | (1L << (WITHOUT - 532)) | (1L << (WORK - 532)) | (1L << (WRAPPER - 532)) | (1L << (X509 - 532)) | (1L << (XA - 532)) | (1L << (XML - 532)) | (1L << (INTERNAL - 532)))) != 0) || _la == MEMORY || _la == CATALOG_NAME || _la == SCHEMA_NAME))
                {
                    ErrorHandler.RecoverInline(this);
                }
                else
                {
                    ErrorHandler.ReportMatch(this);
                    Consume();
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public partial class FunctionNameBaseContext : ParserRuleContext
    {
        public ITerminalNode ABS() { return GetToken(MySqlParser.ABS, 0); }
        public ITerminalNode ACOS() { return GetToken(MySqlParser.ACOS, 0); }
        public ITerminalNode ADDDATE() { return GetToken(MySqlParser.ADDDATE, 0); }
        public ITerminalNode ADDTIME() { return GetToken(MySqlParser.ADDTIME, 0); }
        public ITerminalNode AES_DECRYPT() { return GetToken(MySqlParser.AES_DECRYPT, 0); }
        public ITerminalNode AES_ENCRYPT() { return GetToken(MySqlParser.AES_ENCRYPT, 0); }
        public ITerminalNode AREA() { return GetToken(MySqlParser.AREA, 0); }
        public ITerminalNode ASBINARY() { return GetToken(MySqlParser.ASBINARY, 0); }
        public ITerminalNode ASIN() { return GetToken(MySqlParser.ASIN, 0); }
        public ITerminalNode ASTEXT() { return GetToken(MySqlParser.ASTEXT, 0); }
        public ITerminalNode ASWKB() { return GetToken(MySqlParser.ASWKB, 0); }
        public ITerminalNode ASWKT() { return GetToken(MySqlParser.ASWKT, 0); }
        public ITerminalNode ASYMMETRIC_DECRYPT() { return GetToken(MySqlParser.ASYMMETRIC_DECRYPT, 0); }
        public ITerminalNode ASYMMETRIC_DERIVE() { return GetToken(MySqlParser.ASYMMETRIC_DERIVE, 0); }
        public ITerminalNode ASYMMETRIC_ENCRYPT() { return GetToken(MySqlParser.ASYMMETRIC_ENCRYPT, 0); }
        public ITerminalNode ASYMMETRIC_SIGN() { return GetToken(MySqlParser.ASYMMETRIC_SIGN, 0); }
        public ITerminalNode ASYMMETRIC_VERIFY() { return GetToken(MySqlParser.ASYMMETRIC_VERIFY, 0); }
        public ITerminalNode ATAN() { return GetToken(MySqlParser.ATAN, 0); }
        public ITerminalNode ATAN2() { return GetToken(MySqlParser.ATAN2, 0); }
        public ITerminalNode BENCHMARK() { return GetToken(MySqlParser.BENCHMARK, 0); }
        public ITerminalNode BIN() { return GetToken(MySqlParser.BIN, 0); }
        public ITerminalNode BIT_COUNT() { return GetToken(MySqlParser.BIT_COUNT, 0); }
        public ITerminalNode BIT_LENGTH() { return GetToken(MySqlParser.BIT_LENGTH, 0); }
        public ITerminalNode BUFFER() { return GetToken(MySqlParser.BUFFER, 0); }
        public ITerminalNode CEIL() { return GetToken(MySqlParser.CEIL, 0); }
        public ITerminalNode CEILING() { return GetToken(MySqlParser.CEILING, 0); }
        public ITerminalNode CENTROID() { return GetToken(MySqlParser.CENTROID, 0); }
        public ITerminalNode CHARACTER_LENGTH() { return GetToken(MySqlParser.CHARACTER_LENGTH, 0); }
        public ITerminalNode CHARSET() { return GetToken(MySqlParser.CHARSET, 0); }
        public ITerminalNode CHAR_LENGTH() { return GetToken(MySqlParser.CHAR_LENGTH, 0); }
        public ITerminalNode COERCIBILITY() { return GetToken(MySqlParser.COERCIBILITY, 0); }
        public ITerminalNode COLLATION() { return GetToken(MySqlParser.COLLATION, 0); }
        public ITerminalNode COMPRESS() { return GetToken(MySqlParser.COMPRESS, 0); }
        public ITerminalNode CONCAT() { return GetToken(MySqlParser.CONCAT, 0); }
        public ITerminalNode CONCAT_WS() { return GetToken(MySqlParser.CONCAT_WS, 0); }
        public ITerminalNode CONNECTION_ID() { return GetToken(MySqlParser.CONNECTION_ID, 0); }
        public ITerminalNode CONV() { return GetToken(MySqlParser.CONV, 0); }
        public ITerminalNode CONVERT_TZ() { return GetToken(MySqlParser.CONVERT_TZ, 0); }
        public ITerminalNode COS() { return GetToken(MySqlParser.COS, 0); }
        public ITerminalNode COT() { return GetToken(MySqlParser.COT, 0); }
        public ITerminalNode COUNT() { return GetToken(MySqlParser.COUNT, 0); }
        public ITerminalNode CRC32() { return GetToken(MySqlParser.CRC32, 0); }
        public ITerminalNode CREATE_ASYMMETRIC_PRIV_KEY() { return GetToken(MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, 0); }
        public ITerminalNode CREATE_ASYMMETRIC_PUB_KEY() { return GetToken(MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, 0); }
        public ITerminalNode CREATE_DH_PARAMETERS() { return GetToken(MySqlParser.CREATE_DH_PARAMETERS, 0); }
        public ITerminalNode CREATE_DIGEST() { return GetToken(MySqlParser.CREATE_DIGEST, 0); }
        public ITerminalNode CROSSES() { return GetToken(MySqlParser.CROSSES, 0); }
        public ITerminalNode DATABASE() { return GetToken(MySqlParser.DATABASE, 0); }
        public ITerminalNode DATE() { return GetToken(MySqlParser.DATE, 0); }
        public ITerminalNode DATEDIFF() { return GetToken(MySqlParser.DATEDIFF, 0); }
        public ITerminalNode DATE_FORMAT() { return GetToken(MySqlParser.DATE_FORMAT, 0); }
        public ITerminalNode DAY() { return GetToken(MySqlParser.DAY, 0); }
        public ITerminalNode DAYNAME() { return GetToken(MySqlParser.DAYNAME, 0); }
        public ITerminalNode DAYOFMONTH() { return GetToken(MySqlParser.DAYOFMONTH, 0); }
        public ITerminalNode DAYOFWEEK() { return GetToken(MySqlParser.DAYOFWEEK, 0); }
        public ITerminalNode DAYOFYEAR() { return GetToken(MySqlParser.DAYOFYEAR, 0); }
        public ITerminalNode DECODE() { return GetToken(MySqlParser.DECODE, 0); }
        public ITerminalNode DEGREES() { return GetToken(MySqlParser.DEGREES, 0); }
        public ITerminalNode DES_DECRYPT() { return GetToken(MySqlParser.DES_DECRYPT, 0); }
        public ITerminalNode DES_ENCRYPT() { return GetToken(MySqlParser.DES_ENCRYPT, 0); }
        public ITerminalNode DIMENSION() { return GetToken(MySqlParser.DIMENSION, 0); }
        public ITerminalNode DISJOINT() { return GetToken(MySqlParser.DISJOINT, 0); }
        public ITerminalNode ELT() { return GetToken(MySqlParser.ELT, 0); }
        public ITerminalNode ENCODE() { return GetToken(MySqlParser.ENCODE, 0); }
        public ITerminalNode ENCRYPT() { return GetToken(MySqlParser.ENCRYPT, 0); }
        public ITerminalNode ENDPOINT() { return GetToken(MySqlParser.ENDPOINT, 0); }
        public ITerminalNode ENVELOPE() { return GetToken(MySqlParser.ENVELOPE, 0); }
        public ITerminalNode EQUALS() { return GetToken(MySqlParser.EQUALS, 0); }
        public ITerminalNode EXP() { return GetToken(MySqlParser.EXP, 0); }
        public ITerminalNode EXPORT_SET() { return GetToken(MySqlParser.EXPORT_SET, 0); }
        public ITerminalNode EXTERIORRING() { return GetToken(MySqlParser.EXTERIORRING, 0); }
        public ITerminalNode EXTRACTVALUE() { return GetToken(MySqlParser.EXTRACTVALUE, 0); }
        public ITerminalNode FIELD() { return GetToken(MySqlParser.FIELD, 0); }
        public ITerminalNode FIND_IN_SET() { return GetToken(MySqlParser.FIND_IN_SET, 0); }
        public ITerminalNode FLOOR() { return GetToken(MySqlParser.FLOOR, 0); }
        public ITerminalNode FORMAT() { return GetToken(MySqlParser.FORMAT, 0); }
        public ITerminalNode FOUND_ROWS() { return GetToken(MySqlParser.FOUND_ROWS, 0); }
        public ITerminalNode FROM_BASE64() { return GetToken(MySqlParser.FROM_BASE64, 0); }
        public ITerminalNode FROM_DAYS() { return GetToken(MySqlParser.FROM_DAYS, 0); }
        public ITerminalNode FROM_UNIXTIME() { return GetToken(MySqlParser.FROM_UNIXTIME, 0); }
        public ITerminalNode GEOMCOLLFROMTEXT() { return GetToken(MySqlParser.GEOMCOLLFROMTEXT, 0); }
        public ITerminalNode GEOMCOLLFROMWKB() { return GetToken(MySqlParser.GEOMCOLLFROMWKB, 0); }
        public ITerminalNode GEOMETRYCOLLECTION() { return GetToken(MySqlParser.GEOMETRYCOLLECTION, 0); }
        public ITerminalNode GEOMETRYCOLLECTIONFROMTEXT() { return GetToken(MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, 0); }
        public ITerminalNode GEOMETRYCOLLECTIONFROMWKB() { return GetToken(MySqlParser.GEOMETRYCOLLECTIONFROMWKB, 0); }
        public ITerminalNode GEOMETRYFROMTEXT() { return GetToken(MySqlParser.GEOMETRYFROMTEXT, 0); }
        public ITerminalNode GEOMETRYFROMWKB() { return GetToken(MySqlParser.GEOMETRYFROMWKB, 0); }
        public ITerminalNode GEOMETRYN() { return GetToken(MySqlParser.GEOMETRYN, 0); }
        public ITerminalNode GEOMETRYTYPE() { return GetToken(MySqlParser.GEOMETRYTYPE, 0); }
        public ITerminalNode GEOMFROMTEXT() { return GetToken(MySqlParser.GEOMFROMTEXT, 0); }
        public ITerminalNode GEOMFROMWKB() { return GetToken(MySqlParser.GEOMFROMWKB, 0); }
        public ITerminalNode GET_FORMAT() { return GetToken(MySqlParser.GET_FORMAT, 0); }
        public ITerminalNode GET_LOCK() { return GetToken(MySqlParser.GET_LOCK, 0); }
        public ITerminalNode GLENGTH() { return GetToken(MySqlParser.GLENGTH, 0); }
        public ITerminalNode GREATEST() { return GetToken(MySqlParser.GREATEST, 0); }
        public ITerminalNode GTID_SUBSET() { return GetToken(MySqlParser.GTID_SUBSET, 0); }
        public ITerminalNode GTID_SUBTRACT() { return GetToken(MySqlParser.GTID_SUBTRACT, 0); }
        public ITerminalNode HEX() { return GetToken(MySqlParser.HEX, 0); }
        public ITerminalNode HOUR() { return GetToken(MySqlParser.HOUR, 0); }
        public ITerminalNode IFNULL() { return GetToken(MySqlParser.IFNULL, 0); }
        public ITerminalNode INET6_ATON() { return GetToken(MySqlParser.INET6_ATON, 0); }
        public ITerminalNode INET6_NTOA() { return GetToken(MySqlParser.INET6_NTOA, 0); }
        public ITerminalNode INET_ATON() { return GetToken(MySqlParser.INET_ATON, 0); }
        public ITerminalNode INET_NTOA() { return GetToken(MySqlParser.INET_NTOA, 0); }
        public ITerminalNode INSTR() { return GetToken(MySqlParser.INSTR, 0); }
        public ITerminalNode INTERIORRINGN() { return GetToken(MySqlParser.INTERIORRINGN, 0); }
        public ITerminalNode INTERSECTS() { return GetToken(MySqlParser.INTERSECTS, 0); }
        public ITerminalNode INVISIBLE() { return GetToken(MySqlParser.INVISIBLE, 0); }
        public ITerminalNode ISCLOSED() { return GetToken(MySqlParser.ISCLOSED, 0); }
        public ITerminalNode ISEMPTY() { return GetToken(MySqlParser.ISEMPTY, 0); }
        public ITerminalNode ISNULL() { return GetToken(MySqlParser.ISNULL, 0); }
        public ITerminalNode ISSIMPLE() { return GetToken(MySqlParser.ISSIMPLE, 0); }
        public ITerminalNode IS_FREE_LOCK() { return GetToken(MySqlParser.IS_FREE_LOCK, 0); }
        public ITerminalNode IS_IPV4() { return GetToken(MySqlParser.IS_IPV4, 0); }
        public ITerminalNode IS_IPV4_COMPAT() { return GetToken(MySqlParser.IS_IPV4_COMPAT, 0); }
        public ITerminalNode IS_IPV4_MAPPED() { return GetToken(MySqlParser.IS_IPV4_MAPPED, 0); }
        public ITerminalNode IS_IPV6() { return GetToken(MySqlParser.IS_IPV6, 0); }
        public ITerminalNode IS_USED_LOCK() { return GetToken(MySqlParser.IS_USED_LOCK, 0); }
        public ITerminalNode LAST_INSERT_ID() { return GetToken(MySqlParser.LAST_INSERT_ID, 0); }
        public ITerminalNode LCASE() { return GetToken(MySqlParser.LCASE, 0); }
        public ITerminalNode LEAST() { return GetToken(MySqlParser.LEAST, 0); }
        public ITerminalNode LEFT() { return GetToken(MySqlParser.LEFT, 0); }
        public ITerminalNode LENGTH() { return GetToken(MySqlParser.LENGTH, 0); }
        public ITerminalNode LINEFROMTEXT() { return GetToken(MySqlParser.LINEFROMTEXT, 0); }
        public ITerminalNode LINEFROMWKB() { return GetToken(MySqlParser.LINEFROMWKB, 0); }
        public ITerminalNode LINESTRING() { return GetToken(MySqlParser.LINESTRING, 0); }
        public ITerminalNode LINESTRINGFROMTEXT() { return GetToken(MySqlParser.LINESTRINGFROMTEXT, 0); }
        public ITerminalNode LINESTRINGFROMWKB() { return GetToken(MySqlParser.LINESTRINGFROMWKB, 0); }
        public ITerminalNode LN() { return GetToken(MySqlParser.LN, 0); }
        public ITerminalNode LOAD_FILE() { return GetToken(MySqlParser.LOAD_FILE, 0); }
        public ITerminalNode LOCATE() { return GetToken(MySqlParser.LOCATE, 0); }
        public ITerminalNode LOG() { return GetToken(MySqlParser.LOG, 0); }
        public ITerminalNode LOG10() { return GetToken(MySqlParser.LOG10, 0); }
        public ITerminalNode LOG2() { return GetToken(MySqlParser.LOG2, 0); }
        public ITerminalNode LOWER() { return GetToken(MySqlParser.LOWER, 0); }
        public ITerminalNode LPAD() { return GetToken(MySqlParser.LPAD, 0); }
        public ITerminalNode LTRIM() { return GetToken(MySqlParser.LTRIM, 0); }
        public ITerminalNode MAKEDATE() { return GetToken(MySqlParser.MAKEDATE, 0); }
        public ITerminalNode MAKETIME() { return GetToken(MySqlParser.MAKETIME, 0); }
        public ITerminalNode MAKE_SET() { return GetToken(MySqlParser.MAKE_SET, 0); }
        public ITerminalNode MASTER_POS_WAIT() { return GetToken(MySqlParser.MASTER_POS_WAIT, 0); }
        public ITerminalNode MBRCONTAINS() { return GetToken(MySqlParser.MBRCONTAINS, 0); }
        public ITerminalNode MBRDISJOINT() { return GetToken(MySqlParser.MBRDISJOINT, 0); }
        public ITerminalNode MBREQUAL() { return GetToken(MySqlParser.MBREQUAL, 0); }
        public ITerminalNode MBRINTERSECTS() { return GetToken(MySqlParser.MBRINTERSECTS, 0); }
        public ITerminalNode MBROVERLAPS() { return GetToken(MySqlParser.MBROVERLAPS, 0); }
        public ITerminalNode MBRTOUCHES() { return GetToken(MySqlParser.MBRTOUCHES, 0); }
        public ITerminalNode MBRWITHIN() { return GetToken(MySqlParser.MBRWITHIN, 0); }
        public ITerminalNode MD5() { return GetToken(MySqlParser.MD5, 0); }
        public ITerminalNode MICROSECOND() { return GetToken(MySqlParser.MICROSECOND, 0); }
        public ITerminalNode MINUTE() { return GetToken(MySqlParser.MINUTE, 0); }
        public ITerminalNode MLINEFROMTEXT() { return GetToken(MySqlParser.MLINEFROMTEXT, 0); }
        public ITerminalNode MLINEFROMWKB() { return GetToken(MySqlParser.MLINEFROMWKB, 0); }
        public ITerminalNode MONTH() { return GetToken(MySqlParser.MONTH, 0); }
        public ITerminalNode MONTHNAME() { return GetToken(MySqlParser.MONTHNAME, 0); }
        public ITerminalNode MPOINTFROMTEXT() { return GetToken(MySqlParser.MPOINTFROMTEXT, 0); }
        public ITerminalNode MPOINTFROMWKB() { return GetToken(MySqlParser.MPOINTFROMWKB, 0); }
        public ITerminalNode MPOLYFROMTEXT() { return GetToken(MySqlParser.MPOLYFROMTEXT, 0); }
        public ITerminalNode MPOLYFROMWKB() { return GetToken(MySqlParser.MPOLYFROMWKB, 0); }
        public ITerminalNode MULTILINESTRING() { return GetToken(MySqlParser.MULTILINESTRING, 0); }
        public ITerminalNode MULTILINESTRINGFROMTEXT() { return GetToken(MySqlParser.MULTILINESTRINGFROMTEXT, 0); }
        public ITerminalNode MULTILINESTRINGFROMWKB() { return GetToken(MySqlParser.MULTILINESTRINGFROMWKB, 0); }
        public ITerminalNode MULTIPOINT() { return GetToken(MySqlParser.MULTIPOINT, 0); }
        public ITerminalNode MULTIPOINTFROMTEXT() { return GetToken(MySqlParser.MULTIPOINTFROMTEXT, 0); }
        public ITerminalNode MULTIPOINTFROMWKB() { return GetToken(MySqlParser.MULTIPOINTFROMWKB, 0); }
        public ITerminalNode MULTIPOLYGON() { return GetToken(MySqlParser.MULTIPOLYGON, 0); }
        public ITerminalNode MULTIPOLYGONFROMTEXT() { return GetToken(MySqlParser.MULTIPOLYGONFROMTEXT, 0); }
        public ITerminalNode MULTIPOLYGONFROMWKB() { return GetToken(MySqlParser.MULTIPOLYGONFROMWKB, 0); }
        public ITerminalNode NAME_CONST() { return GetToken(MySqlParser.NAME_CONST, 0); }
        public ITerminalNode NULLIF() { return GetToken(MySqlParser.NULLIF, 0); }
        public ITerminalNode NUMGEOMETRIES() { return GetToken(MySqlParser.NUMGEOMETRIES, 0); }
        public ITerminalNode NUMINTERIORRINGS() { return GetToken(MySqlParser.NUMINTERIORRINGS, 0); }
        public ITerminalNode NUMPOINTS() { return GetToken(MySqlParser.NUMPOINTS, 0); }
        public ITerminalNode OCT() { return GetToken(MySqlParser.OCT, 0); }
        public ITerminalNode OCTET_LENGTH() { return GetToken(MySqlParser.OCTET_LENGTH, 0); }
        public ITerminalNode ORD() { return GetToken(MySqlParser.ORD, 0); }
        public ITerminalNode OVERLAPS() { return GetToken(MySqlParser.OVERLAPS, 0); }
        public ITerminalNode PERIOD_ADD() { return GetToken(MySqlParser.PERIOD_ADD, 0); }
        public ITerminalNode PERIOD_DIFF() { return GetToken(MySqlParser.PERIOD_DIFF, 0); }
        public ITerminalNode PI() { return GetToken(MySqlParser.PI, 0); }
        public ITerminalNode POINT() { return GetToken(MySqlParser.POINT, 0); }
        public ITerminalNode POINTFROMTEXT() { return GetToken(MySqlParser.POINTFROMTEXT, 0); }
        public ITerminalNode POINTFROMWKB() { return GetToken(MySqlParser.POINTFROMWKB, 0); }
        public ITerminalNode POINTN() { return GetToken(MySqlParser.POINTN, 0); }
        public ITerminalNode POLYFROMTEXT() { return GetToken(MySqlParser.POLYFROMTEXT, 0); }
        public ITerminalNode POLYFROMWKB() { return GetToken(MySqlParser.POLYFROMWKB, 0); }
        public ITerminalNode POLYGON() { return GetToken(MySqlParser.POLYGON, 0); }
        public ITerminalNode POLYGONFROMTEXT() { return GetToken(MySqlParser.POLYGONFROMTEXT, 0); }
        public ITerminalNode POLYGONFROMWKB() { return GetToken(MySqlParser.POLYGONFROMWKB, 0); }
        public ITerminalNode POSITION() { return GetToken(MySqlParser.POSITION, 0); }
        public ITerminalNode POW() { return GetToken(MySqlParser.POW, 0); }
        public ITerminalNode POWER() { return GetToken(MySqlParser.POWER, 0); }
        public ITerminalNode QUARTER() { return GetToken(MySqlParser.QUARTER, 0); }
        public ITerminalNode QUOTE() { return GetToken(MySqlParser.QUOTE, 0); }
        public ITerminalNode RADIANS() { return GetToken(MySqlParser.RADIANS, 0); }
        public ITerminalNode RAND() { return GetToken(MySqlParser.RAND, 0); }
        public ITerminalNode RANDOM_BYTES() { return GetToken(MySqlParser.RANDOM_BYTES, 0); }
        public ITerminalNode RELEASE_LOCK() { return GetToken(MySqlParser.RELEASE_LOCK, 0); }
        public ITerminalNode REVERSE() { return GetToken(MySqlParser.REVERSE, 0); }
        public ITerminalNode RIGHT() { return GetToken(MySqlParser.RIGHT, 0); }
        public ITerminalNode ROUND() { return GetToken(MySqlParser.ROUND, 0); }
        public ITerminalNode ROW_COUNT() { return GetToken(MySqlParser.ROW_COUNT, 0); }
        public ITerminalNode RPAD() { return GetToken(MySqlParser.RPAD, 0); }
        public ITerminalNode RTRIM() { return GetToken(MySqlParser.RTRIM, 0); }
        public ITerminalNode SECOND() { return GetToken(MySqlParser.SECOND, 0); }
        public ITerminalNode SEC_TO_TIME() { return GetToken(MySqlParser.SEC_TO_TIME, 0); }
        public ITerminalNode SESSION_USER() { return GetToken(MySqlParser.SESSION_USER, 0); }
        public ITerminalNode SESSION_VARIABLES_ADMIN() { return GetToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0); }
        public ITerminalNode SHA() { return GetToken(MySqlParser.SHA, 0); }
        public ITerminalNode SHA1() { return GetToken(MySqlParser.SHA1, 0); }
        public ITerminalNode SHA2() { return GetToken(MySqlParser.SHA2, 0); }
        public ITerminalNode SIGN() { return GetToken(MySqlParser.SIGN, 0); }
        public ITerminalNode SIN() { return GetToken(MySqlParser.SIN, 0); }
        public ITerminalNode SLEEP() { return GetToken(MySqlParser.SLEEP, 0); }
        public ITerminalNode SOUNDEX() { return GetToken(MySqlParser.SOUNDEX, 0); }
        public ITerminalNode SQL_THREAD_WAIT_AFTER_GTIDS() { return GetToken(MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, 0); }
        public ITerminalNode SQRT() { return GetToken(MySqlParser.SQRT, 0); }
        public ITerminalNode SRID() { return GetToken(MySqlParser.SRID, 0); }
        public ITerminalNode STARTPOINT() { return GetToken(MySqlParser.STARTPOINT, 0); }
        public ITerminalNode STRCMP() { return GetToken(MySqlParser.STRCMP, 0); }
        public ITerminalNode STR_TO_DATE() { return GetToken(MySqlParser.STR_TO_DATE, 0); }
        public ITerminalNode ST_AREA() { return GetToken(MySqlParser.ST_AREA, 0); }
        public ITerminalNode ST_ASBINARY() { return GetToken(MySqlParser.ST_ASBINARY, 0); }
        public ITerminalNode ST_ASTEXT() { return GetToken(MySqlParser.ST_ASTEXT, 0); }
        public ITerminalNode ST_ASWKB() { return GetToken(MySqlParser.ST_ASWKB, 0); }
        public ITerminalNode ST_ASWKT() { return GetToken(MySqlParser.ST_ASWKT, 0); }
        public ITerminalNode ST_BUFFER() { return GetToken(MySqlParser.ST_BUFFER, 0); }
        public ITerminalNode ST_CENTROID() { return GetToken(MySqlParser.ST_CENTROID, 0); }
        public ITerminalNode ST_CONTAINS() { return GetToken(MySqlParser.ST_CONTAINS, 0); }
        public ITerminalNode ST_CROSSES() { return GetToken(MySqlParser.ST_CROSSES, 0); }
        public ITerminalNode ST_DIFFERENCE() { return GetToken(MySqlParser.ST_DIFFERENCE, 0); }
        public ITerminalNode ST_DIMENSION() { return GetToken(MySqlParser.ST_DIMENSION, 0); }
        public ITerminalNode ST_DISJOINT() { return GetToken(MySqlParser.ST_DISJOINT, 0); }
        public ITerminalNode ST_DISTANCE() { return GetToken(MySqlParser.ST_DISTANCE, 0); }
        public ITerminalNode ST_ENDPOINT() { return GetToken(MySqlParser.ST_ENDPOINT, 0); }
        public ITerminalNode ST_ENVELOPE() { return GetToken(MySqlParser.ST_ENVELOPE, 0); }
        public ITerminalNode ST_EQUALS() { return GetToken(MySqlParser.ST_EQUALS, 0); }
        public ITerminalNode ST_EXTERIORRING() { return GetToken(MySqlParser.ST_EXTERIORRING, 0); }
        public ITerminalNode ST_GEOMCOLLFROMTEXT() { return GetToken(MySqlParser.ST_GEOMCOLLFROMTEXT, 0); }
        public ITerminalNode ST_GEOMCOLLFROMTXT() { return GetToken(MySqlParser.ST_GEOMCOLLFROMTXT, 0); }
        public ITerminalNode ST_GEOMCOLLFROMWKB() { return GetToken(MySqlParser.ST_GEOMCOLLFROMWKB, 0); }
        public ITerminalNode ST_GEOMETRYCOLLECTIONFROMTEXT() { return GetToken(MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, 0); }
        public ITerminalNode ST_GEOMETRYCOLLECTIONFROMWKB() { return GetToken(MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, 0); }
        public ITerminalNode ST_GEOMETRYFROMTEXT() { return GetToken(MySqlParser.ST_GEOMETRYFROMTEXT, 0); }
        public ITerminalNode ST_GEOMETRYFROMWKB() { return GetToken(MySqlParser.ST_GEOMETRYFROMWKB, 0); }
        public ITerminalNode ST_GEOMETRYN() { return GetToken(MySqlParser.ST_GEOMETRYN, 0); }
        public ITerminalNode ST_GEOMETRYTYPE() { return GetToken(MySqlParser.ST_GEOMETRYTYPE, 0); }
        public ITerminalNode ST_GEOMFROMTEXT() { return GetToken(MySqlParser.ST_GEOMFROMTEXT, 0); }
        public ITerminalNode ST_GEOMFROMWKB() { return GetToken(MySqlParser.ST_GEOMFROMWKB, 0); }
        public ITerminalNode ST_INTERIORRINGN() { return GetToken(MySqlParser.ST_INTERIORRINGN, 0); }
        public ITerminalNode ST_INTERSECTION() { return GetToken(MySqlParser.ST_INTERSECTION, 0); }
        public ITerminalNode ST_INTERSECTS() { return GetToken(MySqlParser.ST_INTERSECTS, 0); }
        public ITerminalNode ST_ISCLOSED() { return GetToken(MySqlParser.ST_ISCLOSED, 0); }
        public ITerminalNode ST_ISEMPTY() { return GetToken(MySqlParser.ST_ISEMPTY, 0); }
        public ITerminalNode ST_ISSIMPLE() { return GetToken(MySqlParser.ST_ISSIMPLE, 0); }
        public ITerminalNode ST_LINEFROMTEXT() { return GetToken(MySqlParser.ST_LINEFROMTEXT, 0); }
        public ITerminalNode ST_LINEFROMWKB() { return GetToken(MySqlParser.ST_LINEFROMWKB, 0); }
        public ITerminalNode ST_LINESTRINGFROMTEXT() { return GetToken(MySqlParser.ST_LINESTRINGFROMTEXT, 0); }
        public ITerminalNode ST_LINESTRINGFROMWKB() { return GetToken(MySqlParser.ST_LINESTRINGFROMWKB, 0); }
        public ITerminalNode ST_NUMGEOMETRIES() { return GetToken(MySqlParser.ST_NUMGEOMETRIES, 0); }
        public ITerminalNode ST_NUMINTERIORRING() { return GetToken(MySqlParser.ST_NUMINTERIORRING, 0); }
        public ITerminalNode ST_NUMINTERIORRINGS() { return GetToken(MySqlParser.ST_NUMINTERIORRINGS, 0); }
        public ITerminalNode ST_NUMPOINTS() { return GetToken(MySqlParser.ST_NUMPOINTS, 0); }
        public ITerminalNode ST_OVERLAPS() { return GetToken(MySqlParser.ST_OVERLAPS, 0); }
        public ITerminalNode ST_POINTFROMTEXT() { return GetToken(MySqlParser.ST_POINTFROMTEXT, 0); }
        public ITerminalNode ST_POINTFROMWKB() { return GetToken(MySqlParser.ST_POINTFROMWKB, 0); }
        public ITerminalNode ST_POINTN() { return GetToken(MySqlParser.ST_POINTN, 0); }
        public ITerminalNode ST_POLYFROMTEXT() { return GetToken(MySqlParser.ST_POLYFROMTEXT, 0); }
        public ITerminalNode ST_POLYFROMWKB() { return GetToken(MySqlParser.ST_POLYFROMWKB, 0); }
        public ITerminalNode ST_POLYGONFROMTEXT() { return GetToken(MySqlParser.ST_POLYGONFROMTEXT, 0); }
        public ITerminalNode ST_POLYGONFROMWKB() { return GetToken(MySqlParser.ST_POLYGONFROMWKB, 0); }
        public ITerminalNode ST_SRID() { return GetToken(MySqlParser.ST_SRID, 0); }
        public ITerminalNode ST_STARTPOINT() { return GetToken(MySqlParser.ST_STARTPOINT, 0); }
        public ITerminalNode ST_SYMDIFFERENCE() { return GetToken(MySqlParser.ST_SYMDIFFERENCE, 0); }
        public ITerminalNode ST_TOUCHES() { return GetToken(MySqlParser.ST_TOUCHES, 0); }
        public ITerminalNode ST_UNION() { return GetToken(MySqlParser.ST_UNION, 0); }
        public ITerminalNode ST_WITHIN() { return GetToken(MySqlParser.ST_WITHIN, 0); }
        public ITerminalNode ST_X() { return GetToken(MySqlParser.ST_X, 0); }
        public ITerminalNode ST_Y() { return GetToken(MySqlParser.ST_Y, 0); }
        public ITerminalNode SUBDATE() { return GetToken(MySqlParser.SUBDATE, 0); }
        public ITerminalNode SUBSTRING_INDEX() { return GetToken(MySqlParser.SUBSTRING_INDEX, 0); }
        public ITerminalNode SUBTIME() { return GetToken(MySqlParser.SUBTIME, 0); }
        public ITerminalNode SYSTEM_USER() { return GetToken(MySqlParser.SYSTEM_USER, 0); }
        public ITerminalNode TAN() { return GetToken(MySqlParser.TAN, 0); }
        public ITerminalNode TIME() { return GetToken(MySqlParser.TIME, 0); }
        public ITerminalNode TIMEDIFF() { return GetToken(MySqlParser.TIMEDIFF, 0); }
        public ITerminalNode TIMESTAMP() { return GetToken(MySqlParser.TIMESTAMP, 0); }
        public ITerminalNode TIMESTAMPADD() { return GetToken(MySqlParser.TIMESTAMPADD, 0); }
        public ITerminalNode TIMESTAMPDIFF() { return GetToken(MySqlParser.TIMESTAMPDIFF, 0); }
        public ITerminalNode TIME_FORMAT() { return GetToken(MySqlParser.TIME_FORMAT, 0); }
        public ITerminalNode TIME_TO_SEC() { return GetToken(MySqlParser.TIME_TO_SEC, 0); }
        public ITerminalNode TOUCHES() { return GetToken(MySqlParser.TOUCHES, 0); }
        public ITerminalNode TO_BASE64() { return GetToken(MySqlParser.TO_BASE64, 0); }
        public ITerminalNode TO_DAYS() { return GetToken(MySqlParser.TO_DAYS, 0); }
        public ITerminalNode TO_SECONDS() { return GetToken(MySqlParser.TO_SECONDS, 0); }
        public ITerminalNode UCASE() { return GetToken(MySqlParser.UCASE, 0); }
        public ITerminalNode UNCOMPRESS() { return GetToken(MySqlParser.UNCOMPRESS, 0); }
        public ITerminalNode UNCOMPRESSED_LENGTH() { return GetToken(MySqlParser.UNCOMPRESSED_LENGTH, 0); }
        public ITerminalNode UNHEX() { return GetToken(MySqlParser.UNHEX, 0); }
        public ITerminalNode UNIX_TIMESTAMP() { return GetToken(MySqlParser.UNIX_TIMESTAMP, 0); }
        public ITerminalNode UPDATEXML() { return GetToken(MySqlParser.UPDATEXML, 0); }
        public ITerminalNode UPPER() { return GetToken(MySqlParser.UPPER, 0); }
        public ITerminalNode UUID() { return GetToken(MySqlParser.UUID, 0); }
        public ITerminalNode UUID_SHORT() { return GetToken(MySqlParser.UUID_SHORT, 0); }
        public ITerminalNode VALIDATE_PASSWORD_STRENGTH() { return GetToken(MySqlParser.VALIDATE_PASSWORD_STRENGTH, 0); }
        public ITerminalNode VERSION() { return GetToken(MySqlParser.VERSION, 0); }
        public ITerminalNode VISIBLE() { return GetToken(MySqlParser.VISIBLE, 0); }
        public ITerminalNode WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS() { return GetToken(MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, 0); }
        public ITerminalNode WEEK() { return GetToken(MySqlParser.WEEK, 0); }
        public ITerminalNode WEEKDAY() { return GetToken(MySqlParser.WEEKDAY, 0); }
        public ITerminalNode WEEKOFYEAR() { return GetToken(MySqlParser.WEEKOFYEAR, 0); }
        public ITerminalNode WEIGHT_STRING() { return GetToken(MySqlParser.WEIGHT_STRING, 0); }
        public ITerminalNode WITHIN() { return GetToken(MySqlParser.WITHIN, 0); }
        public ITerminalNode YEAR() { return GetToken(MySqlParser.YEAR, 0); }
        public ITerminalNode YEARWEEK() { return GetToken(MySqlParser.YEARWEEK, 0); }
        public ITerminalNode Y_FUNCTION() { return GetToken(MySqlParser.Y_FUNCTION, 0); }
        public ITerminalNode X_FUNCTION() { return GetToken(MySqlParser.X_FUNCTION, 0); }
        public FunctionNameBaseContext(ParserRuleContext parent, int invokingState)
            : base(parent, invokingState)
        {
        }
        public override int RuleIndex { get { return RULE_functionNameBase; } }
        public override void EnterRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.EnterFunctionNameBase(this);
        }
        public override void ExitRule(IParseTreeListener listener)
        {
            IMySqlParserListener typedListener = listener as IMySqlParserListener;
            if (typedListener != null) typedListener.ExitFunctionNameBase(this);
        }
    }

    [RuleVersion(0)]
    public FunctionNameBaseContext functionNameBase()
    {
        FunctionNameBaseContext _localctx = new FunctionNameBaseContext(Context, State);
        EnterRule(_localctx, 628, RULE_functionNameBase);
        int _la;
        try
        {
            EnterOuterAlt(_localctx, 1);
            {
                State = 6293;
                _la = TokenStream.LA(1);
                if (!(_la == DATABASE || _la == LEFT || _la == RIGHT || ((((_la - 191)) & ~0x3f) == 0 && ((1L << (_la - 191)) & ((1L << (DATE - 191)) | (1L << (TIME - 191)) | (1L << (TIMESTAMP - 191)) | (1L << (YEAR - 191)) | (1L << (COUNT - 191)) | (1L << (POSITION - 191)))) != 0) || _la == INVISIBLE || ((((_la - 567)) & ~0x3f) == 0 && ((1L << (_la - 567)) & ((1L << (VISIBLE - 567)) | (1L << (QUARTER - 567)) | (1L << (MONTH - 567)) | (1L << (DAY - 567)) | (1L << (HOUR - 567)) | (1L << (MINUTE - 567)) | (1L << (WEEK - 567)) | (1L << (SECOND - 567)) | (1L << (MICROSECOND - 567)) | (1L << (SESSION_VARIABLES_ADMIN - 567)))) != 0) || ((((_la - 655)) & ~0x3f) == 0 && ((1L << (_la - 655)) & ((1L << (GEOMETRYCOLLECTION - 655)) | (1L << (LINESTRING - 655)) | (1L << (MULTILINESTRING - 655)) | (1L << (MULTIPOINT - 655)) | (1L << (MULTIPOLYGON - 655)) | (1L << (POINT - 655)) | (1L << (POLYGON - 655)) | (1L << (ABS - 655)) | (1L << (ACOS - 655)) | (1L << (ADDDATE - 655)) | (1L << (ADDTIME - 655)) | (1L << (AES_DECRYPT - 655)) | (1L << (AES_ENCRYPT - 655)) | (1L << (AREA - 655)) | (1L << (ASBINARY - 655)) | (1L << (ASIN - 655)) | (1L << (ASTEXT - 655)) | (1L << (ASWKB - 655)) | (1L << (ASWKT - 655)) | (1L << (ASYMMETRIC_DECRYPT - 655)) | (1L << (ASYMMETRIC_DERIVE - 655)) | (1L << (ASYMMETRIC_ENCRYPT - 655)) | (1L << (ASYMMETRIC_SIGN - 655)) | (1L << (ASYMMETRIC_VERIFY - 655)) | (1L << (ATAN - 655)) | (1L << (ATAN2 - 655)) | (1L << (BENCHMARK - 655)) | (1L << (BIN - 655)) | (1L << (BIT_COUNT - 655)) | (1L << (BIT_LENGTH - 655)) | (1L << (BUFFER - 655)) | (1L << (CEIL - 655)) | (1L << (CEILING - 655)) | (1L << (CENTROID - 655)) | (1L << (CHARACTER_LENGTH - 655)) | (1L << (CHARSET - 655)) | (1L << (CHAR_LENGTH - 655)) | (1L << (COERCIBILITY - 655)) | (1L << (COLLATION - 655)) | (1L << (COMPRESS - 655)) | (1L << (CONCAT - 655)) | (1L << (CONCAT_WS - 655)) | (1L << (CONNECTION_ID - 655)) | (1L << (CONV - 655)) | (1L << (CONVERT_TZ - 655)) | (1L << (COS - 655)) | (1L << (COT - 655)) | (1L << (CRC32 - 655)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 655)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 655)) | (1L << (CREATE_DH_PARAMETERS - 655)) | (1L << (CREATE_DIGEST - 655)) | (1L << (CROSSES - 655)) | (1L << (DATEDIFF - 655)) | (1L << (DATE_FORMAT - 655)) | (1L << (DAYNAME - 655)) | (1L << (DAYOFMONTH - 655)) | (1L << (DAYOFWEEK - 655)) | (1L << (DAYOFYEAR - 655)) | (1L << (DECODE - 655)) | (1L << (DEGREES - 655)))) != 0) || ((((_la - 719)) & ~0x3f) == 0 && ((1L << (_la - 719)) & ((1L << (DES_DECRYPT - 719)) | (1L << (DES_ENCRYPT - 719)) | (1L << (DIMENSION - 719)) | (1L << (DISJOINT - 719)) | (1L << (ELT - 719)) | (1L << (ENCODE - 719)) | (1L << (ENCRYPT - 719)) | (1L << (ENDPOINT - 719)) | (1L << (ENVELOPE - 719)) | (1L << (EQUALS - 719)) | (1L << (EXP - 719)) | (1L << (EXPORT_SET - 719)) | (1L << (EXTERIORRING - 719)) | (1L << (EXTRACTVALUE - 719)) | (1L << (FIELD - 719)) | (1L << (FIND_IN_SET - 719)) | (1L << (FLOOR - 719)) | (1L << (FORMAT - 719)) | (1L << (FOUND_ROWS - 719)) | (1L << (FROM_BASE64 - 719)) | (1L << (FROM_DAYS - 719)) | (1L << (FROM_UNIXTIME - 719)) | (1L << (GEOMCOLLFROMTEXT - 719)) | (1L << (GEOMCOLLFROMWKB - 719)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 719)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 719)) | (1L << (GEOMETRYFROMTEXT - 719)) | (1L << (GEOMETRYFROMWKB - 719)) | (1L << (GEOMETRYN - 719)) | (1L << (GEOMETRYTYPE - 719)) | (1L << (GEOMFROMTEXT - 719)) | (1L << (GEOMFROMWKB - 719)) | (1L << (GET_FORMAT - 719)) | (1L << (GET_LOCK - 719)) | (1L << (GLENGTH - 719)) | (1L << (GREATEST - 719)) | (1L << (GTID_SUBSET - 719)) | (1L << (GTID_SUBTRACT - 719)) | (1L << (HEX - 719)) | (1L << (IFNULL - 719)) | (1L << (INET6_ATON - 719)) | (1L << (INET6_NTOA - 719)) | (1L << (INET_ATON - 719)) | (1L << (INET_NTOA - 719)) | (1L << (INSTR - 719)) | (1L << (INTERIORRINGN - 719)) | (1L << (INTERSECTS - 719)) | (1L << (ISCLOSED - 719)) | (1L << (ISEMPTY - 719)) | (1L << (ISNULL - 719)) | (1L << (ISSIMPLE - 719)) | (1L << (IS_FREE_LOCK - 719)) | (1L << (IS_IPV4 - 719)) | (1L << (IS_IPV4_COMPAT - 719)) | (1L << (IS_IPV4_MAPPED - 719)) | (1L << (IS_IPV6 - 719)) | (1L << (IS_USED_LOCK - 719)) | (1L << (LAST_INSERT_ID - 719)) | (1L << (LCASE - 719)) | (1L << (LEAST - 719)) | (1L << (LENGTH - 719)) | (1L << (LINEFROMTEXT - 719)) | (1L << (LINEFROMWKB - 719)) | (1L << (LINESTRINGFROMTEXT - 719)))) != 0) || ((((_la - 783)) & ~0x3f) == 0 && ((1L << (_la - 783)) & ((1L << (LINESTRINGFROMWKB - 783)) | (1L << (LN - 783)) | (1L << (LOAD_FILE - 783)) | (1L << (LOCATE - 783)) | (1L << (LOG - 783)) | (1L << (LOG10 - 783)) | (1L << (LOG2 - 783)) | (1L << (LOWER - 783)) | (1L << (LPAD - 783)) | (1L << (LTRIM - 783)) | (1L << (MAKEDATE - 783)) | (1L << (MAKETIME - 783)) | (1L << (MAKE_SET - 783)) | (1L << (MASTER_POS_WAIT - 783)) | (1L << (MBRCONTAINS - 783)) | (1L << (MBRDISJOINT - 783)) | (1L << (MBREQUAL - 783)) | (1L << (MBRINTERSECTS - 783)) | (1L << (MBROVERLAPS - 783)) | (1L << (MBRTOUCHES - 783)) | (1L << (MBRWITHIN - 783)) | (1L << (MD5 - 783)) | (1L << (MLINEFROMTEXT - 783)) | (1L << (MLINEFROMWKB - 783)) | (1L << (MONTHNAME - 783)) | (1L << (MPOINTFROMTEXT - 783)) | (1L << (MPOINTFROMWKB - 783)) | (1L << (MPOLYFROMTEXT - 783)) | (1L << (MPOLYFROMWKB - 783)) | (1L << (MULTILINESTRINGFROMTEXT - 783)) | (1L << (MULTILINESTRINGFROMWKB - 783)) | (1L << (MULTIPOINTFROMTEXT - 783)) | (1L << (MULTIPOINTFROMWKB - 783)) | (1L << (MULTIPOLYGONFROMTEXT - 783)) | (1L << (MULTIPOLYGONFROMWKB - 783)) | (1L << (NAME_CONST - 783)) | (1L << (NULLIF - 783)) | (1L << (NUMGEOMETRIES - 783)) | (1L << (NUMINTERIORRINGS - 783)) | (1L << (NUMPOINTS - 783)) | (1L << (OCT - 783)) | (1L << (OCTET_LENGTH - 783)) | (1L << (ORD - 783)) | (1L << (OVERLAPS - 783)) | (1L << (PERIOD_ADD - 783)) | (1L << (PERIOD_DIFF - 783)) | (1L << (PI - 783)) | (1L << (POINTFROMTEXT - 783)) | (1L << (POINTFROMWKB - 783)) | (1L << (POINTN - 783)) | (1L << (POLYFROMTEXT - 783)) | (1L << (POLYFROMWKB - 783)) | (1L << (POLYGONFROMTEXT - 783)) | (1L << (POLYGONFROMWKB - 783)) | (1L << (POW - 783)) | (1L << (POWER - 783)) | (1L << (QUOTE - 783)) | (1L << (RADIANS - 783)) | (1L << (RAND - 783)) | (1L << (RANDOM_BYTES - 783)) | (1L << (RELEASE_LOCK - 783)) | (1L << (REVERSE - 783)) | (1L << (ROUND - 783)) | (1L << (ROW_COUNT - 783)))) != 0) || ((((_la - 847)) & ~0x3f) == 0 && ((1L << (_la - 847)) & ((1L << (RPAD - 847)) | (1L << (RTRIM - 847)) | (1L << (SEC_TO_TIME - 847)) | (1L << (SESSION_USER - 847)) | (1L << (SHA - 847)) | (1L << (SHA1 - 847)) | (1L << (SHA2 - 847)) | (1L << (SIGN - 847)) | (1L << (SIN - 847)) | (1L << (SLEEP - 847)) | (1L << (SOUNDEX - 847)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 847)) | (1L << (SQRT - 847)) | (1L << (SRID - 847)) | (1L << (STARTPOINT - 847)) | (1L << (STRCMP - 847)) | (1L << (STR_TO_DATE - 847)) | (1L << (ST_AREA - 847)) | (1L << (ST_ASBINARY - 847)) | (1L << (ST_ASTEXT - 847)) | (1L << (ST_ASWKB - 847)) | (1L << (ST_ASWKT - 847)) | (1L << (ST_BUFFER - 847)) | (1L << (ST_CENTROID - 847)) | (1L << (ST_CONTAINS - 847)) | (1L << (ST_CROSSES - 847)) | (1L << (ST_DIFFERENCE - 847)) | (1L << (ST_DIMENSION - 847)) | (1L << (ST_DISJOINT - 847)) | (1L << (ST_DISTANCE - 847)) | (1L << (ST_ENDPOINT - 847)) | (1L << (ST_ENVELOPE - 847)) | (1L << (ST_EQUALS - 847)) | (1L << (ST_EXTERIORRING - 847)) | (1L << (ST_GEOMCOLLFROMTEXT - 847)) | (1L << (ST_GEOMCOLLFROMTXT - 847)) | (1L << (ST_GEOMCOLLFROMWKB - 847)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 847)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 847)) | (1L << (ST_GEOMETRYFROMTEXT - 847)) | (1L << (ST_GEOMETRYFROMWKB - 847)) | (1L << (ST_GEOMETRYN - 847)) | (1L << (ST_GEOMETRYTYPE - 847)) | (1L << (ST_GEOMFROMTEXT - 847)) | (1L << (ST_GEOMFROMWKB - 847)) | (1L << (ST_INTERIORRINGN - 847)) | (1L << (ST_INTERSECTION - 847)) | (1L << (ST_INTERSECTS - 847)) | (1L << (ST_ISCLOSED - 847)) | (1L << (ST_ISEMPTY - 847)) | (1L << (ST_ISSIMPLE - 847)) | (1L << (ST_LINEFROMTEXT - 847)) | (1L << (ST_LINEFROMWKB - 847)) | (1L << (ST_LINESTRINGFROMTEXT - 847)) | (1L << (ST_LINESTRINGFROMWKB - 847)) | (1L << (ST_NUMGEOMETRIES - 847)) | (1L << (ST_NUMINTERIORRING - 847)) | (1L << (ST_NUMINTERIORRINGS - 847)) | (1L << (ST_NUMPOINTS - 847)) | (1L << (ST_OVERLAPS - 847)) | (1L << (ST_POINTFROMTEXT - 847)) | (1L << (ST_POINTFROMWKB - 847)) | (1L << (ST_POINTN - 847)))) != 0) || ((((_la - 911)) & ~0x3f) == 0 && ((1L << (_la - 911)) & ((1L << (ST_POLYFROMTEXT - 911)) | (1L << (ST_POLYFROMWKB - 911)) | (1L << (ST_POLYGONFROMTEXT - 911)) | (1L << (ST_POLYGONFROMWKB - 911)) | (1L << (ST_SRID - 911)) | (1L << (ST_STARTPOINT - 911)) | (1L << (ST_SYMDIFFERENCE - 911)) | (1L << (ST_TOUCHES - 911)) | (1L << (ST_UNION - 911)) | (1L << (ST_WITHIN - 911)) | (1L << (ST_X - 911)) | (1L << (ST_Y - 911)) | (1L << (SUBDATE - 911)) | (1L << (SUBSTRING_INDEX - 911)) | (1L << (SUBTIME - 911)) | (1L << (SYSTEM_USER - 911)) | (1L << (TAN - 911)) | (1L << (TIMEDIFF - 911)) | (1L << (TIMESTAMPADD - 911)) | (1L << (TIMESTAMPDIFF - 911)) | (1L << (TIME_FORMAT - 911)) | (1L << (TIME_TO_SEC - 911)) | (1L << (TOUCHES - 911)) | (1L << (TO_BASE64 - 911)) | (1L << (TO_DAYS - 911)) | (1L << (TO_SECONDS - 911)) | (1L << (UCASE - 911)) | (1L << (UNCOMPRESS - 911)) | (1L << (UNCOMPRESSED_LENGTH - 911)) | (1L << (UNHEX - 911)) | (1L << (UNIX_TIMESTAMP - 911)) | (1L << (UPDATEXML - 911)) | (1L << (UPPER - 911)) | (1L << (UUID - 911)) | (1L << (UUID_SHORT - 911)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 911)) | (1L << (VERSION - 911)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 911)) | (1L << (WEEKDAY - 911)) | (1L << (WEEKOFYEAR - 911)) | (1L << (WEIGHT_STRING - 911)) | (1L << (WITHIN - 911)) | (1L << (YEARWEEK - 911)) | (1L << (Y_FUNCTION - 911)) | (1L << (X_FUNCTION - 911)))) != 0)))
                {
                    ErrorHandler.RecoverInline(this);
                }
                else
                {
                    ErrorHandler.ReportMatch(this);
                    Consume();
                }
            }
        }
        catch (RecognitionException re)
        {
            _localctx.exception = re;
            ErrorHandler.ReportError(this, re);
            ErrorHandler.Recover(this, re);
        }
        finally
        {
            ExitRule();
        }
        return _localctx;
    }

    public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex)
    {
        switch (ruleIndex)
        {
            case 300: return expression_sempred((ExpressionContext)_localctx, predIndex);
            case 301: return predicate_sempred((PredicateContext)_localctx, predIndex);
            case 302: return expressionAtom_sempred((ExpressionAtomContext)_localctx, predIndex);
        }
        return true;
    }
    private bool expression_sempred(ExpressionContext _localctx, int predIndex)
    {
        switch (predIndex)
        {
            case 0: return Precpred(Context, 3);
        }
        return true;
    }
    private bool predicate_sempred(PredicateContext _localctx, int predIndex)
    {
        switch (predIndex)
        {
            case 1: return Precpred(Context, 7);
            case 2: return Precpred(Context, 5);
            case 3: return Precpred(Context, 4);
            case 4: return Precpred(Context, 2);
            case 5: return Precpred(Context, 9);
            case 6: return Precpred(Context, 8);
            case 7: return Precpred(Context, 6);
            case 8: return Precpred(Context, 3);
        }
        return true;
    }
    private bool expressionAtom_sempred(ExpressionAtomContext _localctx, int predIndex)
    {
        switch (predIndex)
        {
            case 9: return Precpred(Context, 2);
            case 10: return Precpred(Context, 1);
            case 11: return Precpred(Context, 11);
        }
        return true;
    }

    private static char[] _serializedATN = {
    '\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786',
    '\x5964', '\x3', '\x3F4', '\x189A', '\x4', '\x2', '\t', '\x2', '\x4',
    '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5',
    '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t',
    '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t',
    '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE',
    '\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4',
    '\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t',
    '\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4',
    '\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t',
    '\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4',
    '\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t',
    '\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4',
    ' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4',
    '#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&',
    '\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')',
    '\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t',
    ',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/',
    '\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32',
    '\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34',
    '\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37',
    '\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39',
    '\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4',
    '=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@',
    '\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4',
    '\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t',
    '\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H',
    '\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t',
    'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N',
    '\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4',
    'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U',
    '\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t',
    'X', '\x4', 'Y', '\t', 'Y', '\x4', 'Z', '\t', 'Z', '\x4', '[', '\t', '[',
    '\x4', '\\', '\t', '\\', '\x4', ']', '\t', ']', '\x4', '^', '\t', '^',
    '\x4', '_', '\t', '_', '\x4', '`', '\t', '`', '\x4', '\x61', '\t', '\x61',
    '\x4', '\x62', '\t', '\x62', '\x4', '\x63', '\t', '\x63', '\x4', '\x64',
    '\t', '\x64', '\x4', '\x65', '\t', '\x65', '\x4', '\x66', '\t', '\x66',
    '\x4', 'g', '\t', 'g', '\x4', 'h', '\t', 'h', '\x4', 'i', '\t', 'i', '\x4',
    'j', '\t', 'j', '\x4', 'k', '\t', 'k', '\x4', 'l', '\t', 'l', '\x4', 'm',
    '\t', 'm', '\x4', 'n', '\t', 'n', '\x4', 'o', '\t', 'o', '\x4', 'p', '\t',
    'p', '\x4', 'q', '\t', 'q', '\x4', 'r', '\t', 'r', '\x4', 's', '\t', 's',
    '\x4', 't', '\t', 't', '\x4', 'u', '\t', 'u', '\x4', 'v', '\t', 'v', '\x4',
    'w', '\t', 'w', '\x4', 'x', '\t', 'x', '\x4', 'y', '\t', 'y', '\x4', 'z',
    '\t', 'z', '\x4', '{', '\t', '{', '\x4', '|', '\t', '|', '\x4', '}', '\t',
    '}', '\x4', '~', '\t', '~', '\x4', '\x7F', '\t', '\x7F', '\x4', '\x80',
    '\t', '\x80', '\x4', '\x81', '\t', '\x81', '\x4', '\x82', '\t', '\x82',
    '\x4', '\x83', '\t', '\x83', '\x4', '\x84', '\t', '\x84', '\x4', '\x85',
    '\t', '\x85', '\x4', '\x86', '\t', '\x86', '\x4', '\x87', '\t', '\x87',
    '\x4', '\x88', '\t', '\x88', '\x4', '\x89', '\t', '\x89', '\x4', '\x8A',
    '\t', '\x8A', '\x4', '\x8B', '\t', '\x8B', '\x4', '\x8C', '\t', '\x8C',
    '\x4', '\x8D', '\t', '\x8D', '\x4', '\x8E', '\t', '\x8E', '\x4', '\x8F',
    '\t', '\x8F', '\x4', '\x90', '\t', '\x90', '\x4', '\x91', '\t', '\x91',
    '\x4', '\x92', '\t', '\x92', '\x4', '\x93', '\t', '\x93', '\x4', '\x94',
    '\t', '\x94', '\x4', '\x95', '\t', '\x95', '\x4', '\x96', '\t', '\x96',
    '\x4', '\x97', '\t', '\x97', '\x4', '\x98', '\t', '\x98', '\x4', '\x99',
    '\t', '\x99', '\x4', '\x9A', '\t', '\x9A', '\x4', '\x9B', '\t', '\x9B',
    '\x4', '\x9C', '\t', '\x9C', '\x4', '\x9D', '\t', '\x9D', '\x4', '\x9E',
    '\t', '\x9E', '\x4', '\x9F', '\t', '\x9F', '\x4', '\xA0', '\t', '\xA0',
    '\x4', '\xA1', '\t', '\xA1', '\x4', '\xA2', '\t', '\xA2', '\x4', '\xA3',
    '\t', '\xA3', '\x4', '\xA4', '\t', '\xA4', '\x4', '\xA5', '\t', '\xA5',
    '\x4', '\xA6', '\t', '\xA6', '\x4', '\xA7', '\t', '\xA7', '\x4', '\xA8',
    '\t', '\xA8', '\x4', '\xA9', '\t', '\xA9', '\x4', '\xAA', '\t', '\xAA',
    '\x4', '\xAB', '\t', '\xAB', '\x4', '\xAC', '\t', '\xAC', '\x4', '\xAD',
    '\t', '\xAD', '\x4', '\xAE', '\t', '\xAE', '\x4', '\xAF', '\t', '\xAF',
    '\x4', '\xB0', '\t', '\xB0', '\x4', '\xB1', '\t', '\xB1', '\x4', '\xB2',
    '\t', '\xB2', '\x4', '\xB3', '\t', '\xB3', '\x4', '\xB4', '\t', '\xB4',
    '\x4', '\xB5', '\t', '\xB5', '\x4', '\xB6', '\t', '\xB6', '\x4', '\xB7',
    '\t', '\xB7', '\x4', '\xB8', '\t', '\xB8', '\x4', '\xB9', '\t', '\xB9',
    '\x4', '\xBA', '\t', '\xBA', '\x4', '\xBB', '\t', '\xBB', '\x4', '\xBC',
    '\t', '\xBC', '\x4', '\xBD', '\t', '\xBD', '\x4', '\xBE', '\t', '\xBE',
    '\x4', '\xBF', '\t', '\xBF', '\x4', '\xC0', '\t', '\xC0', '\x4', '\xC1',
    '\t', '\xC1', '\x4', '\xC2', '\t', '\xC2', '\x4', '\xC3', '\t', '\xC3',
    '\x4', '\xC4', '\t', '\xC4', '\x4', '\xC5', '\t', '\xC5', '\x4', '\xC6',
    '\t', '\xC6', '\x4', '\xC7', '\t', '\xC7', '\x4', '\xC8', '\t', '\xC8',
    '\x4', '\xC9', '\t', '\xC9', '\x4', '\xCA', '\t', '\xCA', '\x4', '\xCB',
    '\t', '\xCB', '\x4', '\xCC', '\t', '\xCC', '\x4', '\xCD', '\t', '\xCD',
    '\x4', '\xCE', '\t', '\xCE', '\x4', '\xCF', '\t', '\xCF', '\x4', '\xD0',
    '\t', '\xD0', '\x4', '\xD1', '\t', '\xD1', '\x4', '\xD2', '\t', '\xD2',
    '\x4', '\xD3', '\t', '\xD3', '\x4', '\xD4', '\t', '\xD4', '\x4', '\xD5',
    '\t', '\xD5', '\x4', '\xD6', '\t', '\xD6', '\x4', '\xD7', '\t', '\xD7',
    '\x4', '\xD8', '\t', '\xD8', '\x4', '\xD9', '\t', '\xD9', '\x4', '\xDA',
    '\t', '\xDA', '\x4', '\xDB', '\t', '\xDB', '\x4', '\xDC', '\t', '\xDC',
    '\x4', '\xDD', '\t', '\xDD', '\x4', '\xDE', '\t', '\xDE', '\x4', '\xDF',
    '\t', '\xDF', '\x4', '\xE0', '\t', '\xE0', '\x4', '\xE1', '\t', '\xE1',
    '\x4', '\xE2', '\t', '\xE2', '\x4', '\xE3', '\t', '\xE3', '\x4', '\xE4',
    '\t', '\xE4', '\x4', '\xE5', '\t', '\xE5', '\x4', '\xE6', '\t', '\xE6',
    '\x4', '\xE7', '\t', '\xE7', '\x4', '\xE8', '\t', '\xE8', '\x4', '\xE9',
    '\t', '\xE9', '\x4', '\xEA', '\t', '\xEA', '\x4', '\xEB', '\t', '\xEB',
    '\x4', '\xEC', '\t', '\xEC', '\x4', '\xED', '\t', '\xED', '\x4', '\xEE',
    '\t', '\xEE', '\x4', '\xEF', '\t', '\xEF', '\x4', '\xF0', '\t', '\xF0',
    '\x4', '\xF1', '\t', '\xF1', '\x4', '\xF2', '\t', '\xF2', '\x4', '\xF3',
    '\t', '\xF3', '\x4', '\xF4', '\t', '\xF4', '\x4', '\xF5', '\t', '\xF5',
    '\x4', '\xF6', '\t', '\xF6', '\x4', '\xF7', '\t', '\xF7', '\x4', '\xF8',
    '\t', '\xF8', '\x4', '\xF9', '\t', '\xF9', '\x4', '\xFA', '\t', '\xFA',
    '\x4', '\xFB', '\t', '\xFB', '\x4', '\xFC', '\t', '\xFC', '\x4', '\xFD',
    '\t', '\xFD', '\x4', '\xFE', '\t', '\xFE', '\x4', '\xFF', '\t', '\xFF',
    '\x4', '\x100', '\t', '\x100', '\x4', '\x101', '\t', '\x101', '\x4', '\x102',
    '\t', '\x102', '\x4', '\x103', '\t', '\x103', '\x4', '\x104', '\t', '\x104',
    '\x4', '\x105', '\t', '\x105', '\x4', '\x106', '\t', '\x106', '\x4', '\x107',
    '\t', '\x107', '\x4', '\x108', '\t', '\x108', '\x4', '\x109', '\t', '\x109',
    '\x4', '\x10A', '\t', '\x10A', '\x4', '\x10B', '\t', '\x10B', '\x4', '\x10C',
    '\t', '\x10C', '\x4', '\x10D', '\t', '\x10D', '\x4', '\x10E', '\t', '\x10E',
    '\x4', '\x10F', '\t', '\x10F', '\x4', '\x110', '\t', '\x110', '\x4', '\x111',
    '\t', '\x111', '\x4', '\x112', '\t', '\x112', '\x4', '\x113', '\t', '\x113',
    '\x4', '\x114', '\t', '\x114', '\x4', '\x115', '\t', '\x115', '\x4', '\x116',
    '\t', '\x116', '\x4', '\x117', '\t', '\x117', '\x4', '\x118', '\t', '\x118',
    '\x4', '\x119', '\t', '\x119', '\x4', '\x11A', '\t', '\x11A', '\x4', '\x11B',
    '\t', '\x11B', '\x4', '\x11C', '\t', '\x11C', '\x4', '\x11D', '\t', '\x11D',
    '\x4', '\x11E', '\t', '\x11E', '\x4', '\x11F', '\t', '\x11F', '\x4', '\x120',
    '\t', '\x120', '\x4', '\x121', '\t', '\x121', '\x4', '\x122', '\t', '\x122',
    '\x4', '\x123', '\t', '\x123', '\x4', '\x124', '\t', '\x124', '\x4', '\x125',
    '\t', '\x125', '\x4', '\x126', '\t', '\x126', '\x4', '\x127', '\t', '\x127',
    '\x4', '\x128', '\t', '\x128', '\x4', '\x129', '\t', '\x129', '\x4', '\x12A',
    '\t', '\x12A', '\x4', '\x12B', '\t', '\x12B', '\x4', '\x12C', '\t', '\x12C',
    '\x4', '\x12D', '\t', '\x12D', '\x4', '\x12E', '\t', '\x12E', '\x4', '\x12F',
    '\t', '\x12F', '\x4', '\x130', '\t', '\x130', '\x4', '\x131', '\t', '\x131',
    '\x4', '\x132', '\t', '\x132', '\x4', '\x133', '\t', '\x133', '\x4', '\x134',
    '\t', '\x134', '\x4', '\x135', '\t', '\x135', '\x4', '\x136', '\t', '\x136',
    '\x4', '\x137', '\t', '\x137', '\x4', '\x138', '\t', '\x138', '\x4', '\x139',
    '\t', '\x139', '\x4', '\x13A', '\t', '\x13A', '\x4', '\x13B', '\t', '\x13B',
    '\x4', '\x13C', '\t', '\x13C', '\x3', '\x2', '\x5', '\x2', '\x27A', '\n',
    '\x2', '\x3', '\x2', '\x5', '\x2', '\x27D', '\n', '\x2', '\x3', '\x2',
    '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x283', '\n',
    '\x3', '\x3', '\x3', '\x5', '\x3', '\x286', '\n', '\x3', '\x3', '\x3',
    '\a', '\x3', '\x289', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x28C',
    '\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x290', '\n',
    '\x3', '\x3', '\x3', '\x5', '\x3', '\x293', '\n', '\x3', '\x3', '\x3',
    '\x5', '\x3', '\x296', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3',
    '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5',
    '\x4', '\x29F', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6',
    '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6',
    '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6',
    '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6',
    '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6',
    '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6',
    '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6',
    '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6',
    '\x2C6', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a',
    '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3',
    '\a', '\x5', '\a', '\x2D2', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3',
    '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b',
    '\x3', '\b', '\x5', '\b', '\x2DD', '\n', '\b', '\x3', '\t', '\x3', '\t',
    '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3',
    '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t',
    '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x2EE', '\n', '\t', '\x3', '\n',
    '\x3', '\n', '\x3', '\n', '\x5', '\n', '\x2F3', '\n', '\n', '\x3', '\v',
    '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3',
    '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\x2FF', '\n',
    '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f',
    '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3',
    '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f',
    '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3',
    '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x31A', '\n',
    '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r',
    '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x323', '\n', '\r', '\x3', '\xE',
    '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x328', '\n', '\xE', '\x3',
    '\xE', '\x3', '\xE', '\a', '\xE', '\x32C', '\n', '\xE', '\f', '\xE', '\xE',
    '\xE', '\x32F', '\v', '\xE', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF',
    '\x333', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x337',
    '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3',
    '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x340', '\n', '\xF',
    '\x3', '\xF', '\x5', '\xF', '\x343', '\n', '\xF', '\x3', '\xF', '\x5',
    '\xF', '\x346', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF',
    '\x34A', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3',
    '\x10', '\x3', '\x10', '\x5', '\x10', '\x351', '\n', '\x10', '\x3', '\x10',
    '\x5', '\x10', '\x354', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3',
    '\x10', '\x5', '\x10', '\x359', '\n', '\x10', '\x3', '\x10', '\x3', '\x10',
    '\x3', '\x10', '\x3', '\x10', '\a', '\x10', '\x35F', '\n', '\x10', '\f',
    '\x10', '\xE', '\x10', '\x362', '\v', '\x10', '\x3', '\x10', '\x3', '\x10',
    '\x5', '\x10', '\x366', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3',
    '\x10', '\x5', '\x10', '\x36B', '\n', '\x10', '\x3', '\x10', '\a', '\x10',
    '\x36E', '\n', '\x10', '\f', '\x10', '\xE', '\x10', '\x371', '\v', '\x10',
    '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11',
    '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11',
    '\x37C', '\n', '\x11', '\x3', '\x11', '\x5', '\x11', '\x37F', '\n', '\x11',
    '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x383', '\n', '\x11', '\x3',
    '\x11', '\x5', '\x11', '\x386', '\n', '\x11', '\x3', '\x11', '\x3', '\x11',
    '\x5', '\x11', '\x38A', '\n', '\x11', '\x3', '\x11', '\x5', '\x11', '\x38D',
    '\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x391', '\n',
    '\x11', '\x3', '\x11', '\x5', '\x11', '\x394', '\n', '\x11', '\x3', '\x11',
    '\x5', '\x11', '\x397', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5',
    '\x11', '\x39B', '\n', '\x11', '\x3', '\x11', '\x5', '\x11', '\x39E',
    '\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x3A2', '\n',
    '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x5',
    '\x12', '\x3A8', '\n', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12',
    '\x3', '\x12', '\x5', '\x12', '\x3AE', '\n', '\x12', '\x3', '\x12', '\x3',
    '\x12', '\a', '\x12', '\x3B2', '\n', '\x12', '\f', '\x12', '\xE', '\x12',
    '\x3B5', '\v', '\x12', '\x3', '\x12', '\x3', '\x12', '\a', '\x12', '\x3B9',
    '\n', '\x12', '\f', '\x12', '\xE', '\x12', '\x3BC', '\v', '\x12', '\x3',
    '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x3C2',
    '\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13',
    '\x5', '\x13', '\x3C8', '\n', '\x13', '\x3', '\x13', '\x3', '\x13', '\a',
    '\x13', '\x3CC', '\n', '\x13', '\f', '\x13', '\xE', '\x13', '\x3CF', '\v',
    '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\a',
    '\x13', '\x3D5', '\n', '\x13', '\f', '\x13', '\xE', '\x13', '\x3D8', '\v',
    '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x3DC', '\n', '\x13',
    '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14',
    '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14',
    '\x3', '\x14', '\x3', '\x14', '\a', '\x14', '\x3EA', '\n', '\x14', '\f',
    '\x14', '\xE', '\x14', '\x3ED', '\v', '\x14', '\x3', '\x14', '\x3', '\x14',
    '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x3F3', '\n', '\x15', '\x3',
    '\x15', '\x3', '\x15', '\x5', '\x15', '\x3F7', '\n', '\x15', '\x3', '\x15',
    '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15',
    '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x401', '\n', '\x15', '\x3',
    '\x15', '\x3', '\x15', '\x5', '\x15', '\x405', '\n', '\x15', '\x3', '\x15',
    '\x3', '\x15', '\x5', '\x15', '\x409', '\n', '\x15', '\x3', '\x15', '\x3',
    '\x15', '\x5', '\x15', '\x40D', '\n', '\x15', '\x3', '\x15', '\x3', '\x15',
    '\x5', '\x15', '\x411', '\n', '\x15', '\x3', '\x15', '\a', '\x15', '\x414',
    '\n', '\x15', '\f', '\x15', '\xE', '\x15', '\x417', '\v', '\x15', '\x5',
    '\x15', '\x419', '\n', '\x15', '\x3', '\x15', '\x5', '\x15', '\x41C',
    '\n', '\x15', '\x3', '\x15', '\x5', '\x15', '\x41F', '\n', '\x15', '\x3',
    '\x15', '\x5', '\x15', '\x422', '\n', '\x15', '\x3', '\x15', '\x3', '\x15',
    '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x428', '\n', '\x15', '\x3',
    '\x15', '\x3', '\x15', '\x5', '\x15', '\x42C', '\n', '\x15', '\x3', '\x15',
    '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x432', '\n',
    '\x15', '\x3', '\x15', '\a', '\x15', '\x435', '\n', '\x15', '\f', '\x15',
    '\xE', '\x15', '\x438', '\v', '\x15', '\x5', '\x15', '\x43A', '\n', '\x15',
    '\x3', '\x15', '\x5', '\x15', '\x43D', '\n', '\x15', '\x5', '\x15', '\x43F',
    '\n', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16',
    '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16',
    '\x5', '\x16', '\x44A', '\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5',
    '\x16', '\x44E', '\n', '\x16', '\x3', '\x16', '\x5', '\x16', '\x451',
    '\n', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17',
    '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17',
    '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x45F', '\n',
    '\x17', '\x3', '\x17', '\x5', '\x17', '\x462', '\n', '\x17', '\x3', '\x17',
    '\x3', '\x17', '\x5', '\x17', '\x466', '\n', '\x17', '\x3', '\x17', '\x5',
    '\x17', '\x469', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17',
    '\x46D', '\n', '\x17', '\x3', '\x17', '\x5', '\x17', '\x470', '\n', '\x17',
    '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x474', '\n', '\x17', '\x3',
    '\x17', '\x5', '\x17', '\x477', '\n', '\x17', '\x3', '\x17', '\x3', '\x17',
    '\x5', '\x17', '\x47B', '\n', '\x17', '\x3', '\x17', '\x5', '\x17', '\x47E',
    '\n', '\x17', '\x3', '\x17', '\x5', '\x17', '\x481', '\n', '\x17', '\x3',
    '\x17', '\x3', '\x17', '\x5', '\x17', '\x485', '\n', '\x17', '\x3', '\x17',
    '\x5', '\x17', '\x488', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5',
    '\x17', '\x48C', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18',
    '\x3', '\x18', '\x5', '\x18', '\x492', '\n', '\x18', '\x3', '\x18', '\x3',
    '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3',
    '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5',
    '\x18', '\x49F', '\n', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19',
    '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\x4A6', '\n', '\x19', '\x3',
    '\x19', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\x4AB', '\n', '\x19',
    '\x3', '\x19', '\x5', '\x19', '\x4AE', '\n', '\x19', '\x3', '\x19', '\x3',
    '\x19', '\x3', '\x19', '\x5', '\x19', '\x4B3', '\n', '\x19', '\x3', '\x19',
    '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19',
    '\x5', '\x19', '\x4BB', '\n', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3',
    '\x19', '\x3', '\x19', '\x5', '\x19', '\x4C1', '\n', '\x19', '\x3', '\x19',
    '\x3', '\x19', '\x5', '\x19', '\x4C5', '\n', '\x19', '\x3', '\x1A', '\x5',
    '\x1A', '\x4C8', '\n', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A',
    '\x5', '\x1A', '\x4CD', '\n', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x4D0',
    '\n', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x4D4', '\n',
    '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x4D7', '\n', '\x1A', '\x3', '\x1A',
    '\x3', '\x1A', '\x5', '\x1A', '\x4DB', '\n', '\x1A', '\x3', '\x1A', '\x5',
    '\x1A', '\x4DE', '\n', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B',
    '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x4E6', '\n',
    '\x1B', '\x5', '\x1B', '\x4E8', '\n', '\x1B', '\x3', '\x1C', '\x3', '\x1C',
    '\x3', '\x1C', '\a', '\x1C', '\x4ED', '\n', '\x1C', '\f', '\x1C', '\xE',
    '\x1C', '\x4F0', '\v', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C',
    '\x5', '\x1C', '\x4F5', '\n', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3',
    '\x1C', '\x3', '\x1C', '\a', '\x1C', '\x4FB', '\n', '\x1C', '\f', '\x1C',
    '\xE', '\x1C', '\x4FE', '\v', '\x1C', '\x5', '\x1C', '\x500', '\n', '\x1C',
    '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\a', '\x1C', '\x505', '\n',
    '\x1C', '\f', '\x1C', '\xE', '\x1C', '\x508', '\v', '\x1C', '\x5', '\x1C',
    '\x50A', '\n', '\x1C', '\x5', '\x1C', '\x50C', '\n', '\x1C', '\x3', '\x1D',
    '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x512', '\n',
    '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x5',
    '\x1E', '\x518', '\n', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F',
    '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F',
    '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F',
    '\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x529', '\n', '\x1F', '\x3',
    ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x5', ' ', '\x530',
    '\n', ' ', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '\"', '\x3', '\"',
    '\x5', '\"', '\x537', '\n', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"',
    '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3',
    '\"', '\x5', '\"', '\x542', '\n', '\"', '\x3', '#', '\x5', '#', '\x545',
    '\n', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '$', '\x3', '$',
    '\x3', '$', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%',
    '\x5', '%', '\x552', '\n', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3',
    '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3',
    '%', '\x3', '%', '\x5', '%', '\x55F', '\n', '%', '\x3', '%', '\x3', '%',
    '\x3', '%', '\x5', '%', '\x564', '\n', '%', '\x3', '&', '\x3', '&', '\x3',
    '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3',
    '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x5',
    '&', '\x574', '\n', '&', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3',
    '\'', '\a', '\'', '\x57A', '\n', '\'', '\f', '\'', '\xE', '\'', '\x57D',
    '\v', '\'', '\x3', '\'', '\x3', '\'', '\x3', '(', '\x3', '(', '\x3', '(',
    '\x3', '(', '\x3', '(', '\x5', '(', '\x586', '\n', '(', '\x3', ')', '\x3',
    ')', '\a', ')', '\x58A', '\n', ')', '\f', ')', '\xE', ')', '\x58D', '\v',
    ')', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3',
    '*', '\x3', '*', '\x5', '*', '\x596', '\n', '*', '\x3', '*', '\x5', '*',
    '\x599', '\n', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x5', '*', '\x59E',
    '\n', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*',
    '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*',
    '\x5', '*', '\x5AB', '\n', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3',
    '*', '\x3', '*', '\x5', '*', '\x5B2', '\n', '*', '\x3', '*', '\x3', '*',
    '\x3', '*', '\x5', '*', '\x5B7', '\n', '*', '\x3', '+', '\x3', '+', '\x5',
    '+', '\x5BB', '\n', '+', '\x5', '+', '\x5BD', '\n', '+', '\x3', '+', '\x3',
    '+', '\x3', '+', '\x5', '+', '\x5C2', '\n', '+', '\x3', '+', '\x5', '+',
    '\x5C5', '\n', '+', '\x3', '+', '\x3', '+', '\a', '+', '\x5C9', '\n',
    '+', '\f', '+', '\xE', '+', '\x5CC', '\v', '+', '\x3', '+', '\x3', '+',
    '\x5', '+', '\x5D0', '\n', '+', '\x5', '+', '\x5D2', '\n', '+', '\x3',
    '+', '\x3', '+', '\x5', '+', '\x5D6', '\n', '+', '\x3', '+', '\x5', '+',
    '\x5D9', '\n', '+', '\x3', '+', '\x5', '+', '\x5DC', '\n', '+', '\x3',
    '+', '\x3', '+', '\a', '+', '\x5E0', '\n', '+', '\f', '+', '\xE', '+',
    '\x5E3', '\v', '+', '\x3', '+', '\x3', '+', '\x5', '+', '\x5E7', '\n',
    '+', '\x5', '+', '\x5E9', '\n', '+', '\x3', '+', '\x3', '+', '\x3', '+',
    '\x5', '+', '\x5EE', '\n', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3',
    '+', '\x3', '+', '\x5', '+', '\x5F5', '\n', '+', '\x5', '+', '\x5F7',
    '\n', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+',
    '\x5', '+', '\x5FE', '\n', '+', '\x3', ',', '\x3', ',', '\x3', ',', '\x5',
    ',', '\x603', '\n', ',', '\x3', ',', '\x3', ',', '\x5', ',', '\x607',
    '\n', ',', '\x3', ',', '\x5', ',', '\x60A', '\n', ',', '\x3', '-', '\x3',
    '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x5', '-', '\x612',
    '\n', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-',
    '\x3', '-', '\x5', '-', '\x61A', '\n', '-', '\x5', '-', '\x61C', '\n',
    '-', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3',
    '.', '\x5', '.', '\x624', '\n', '.', '\x3', '/', '\x3', '/', '\x5', '/',
    '\x628', '\n', '/', '\x3', '/', '\x5', '/', '\x62B', '\n', '/', '\x3',
    '/', '\x3', '/', '\a', '/', '\x62F', '\n', '/', '\f', '/', '\xE', '/',
    '\x632', '\v', '/', '\x3', '/', '\x3', '/', '\x5', '/', '\x636', '\n',
    '/', '\x3', '/', '\x5', '/', '\x639', '\n', '/', '\x3', '/', '\x3', '/',
    '\a', '/', '\x63D', '\n', '/', '\f', '/', '\xE', '/', '\x640', '\v', '/',
    '\x5', '/', '\x642', '\n', '/', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30',
    '\x646', '\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5',
    '\x30', '\x64B', '\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30',
    '\x5', '\x30', '\x650', '\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5',
    '\x30', '\x654', '\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30',
    '\x5', '\x30', '\x659', '\n', '\x30', '\x3', '\x30', '\x5', '\x30', '\x65C',
    '\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x660', '\n',
    '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x664', '\n', '\x30',
    '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x668', '\n', '\x30', '\x3',
    '\x30', '\x3', '\x30', '\x5', '\x30', '\x66C', '\n', '\x30', '\x3', '\x30',
    '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x671', '\n', '\x30', '\x3',
    '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x676', '\n', '\x30',
    '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x67B', '\n',
    '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5',
    '\x30', '\x681', '\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30',
    '\x5', '\x30', '\x686', '\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3',
    '\x30', '\x5', '\x30', '\x68B', '\n', '\x30', '\x3', '\x30', '\x3', '\x30',
    '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x691', '\n', '\x30', '\x3',
    '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x696', '\n', '\x30',
    '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x69B', '\n',
    '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x6A0',
    '\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30',
    '\x6A5', '\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5',
    '\x30', '\x6AA', '\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30',
    '\x5', '\x30', '\x6AF', '\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3',
    '\x30', '\x5', '\x30', '\x6B4', '\n', '\x30', '\x3', '\x30', '\x3', '\x30',
    '\x3', '\x30', '\x5', '\x30', '\x6B9', '\n', '\x30', '\x3', '\x30', '\x3',
    '\x30', '\x3', '\x30', '\x5', '\x30', '\x6BE', '\n', '\x30', '\x3', '\x30',
    '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x6C3', '\n', '\x30', '\x3',
    '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30', '\x6C9',
    '\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x5', '\x30',
    '\x6CE', '\n', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3',
    '\x30', '\x5', '\x30', '\x6D4', '\n', '\x30', '\x3', '\x31', '\x3', '\x31',
    '\x3', '\x31', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32',
    '\x3', '\x32', '\x5', '\x32', '\x6DE', '\n', '\x32', '\x3', '\x32', '\x3',
    '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x5', '\x32', '\x6E5',
    '\n', '\x32', '\x5', '\x32', '\x6E7', '\n', '\x32', '\x3', '\x32', '\x3',
    '\x32', '\x3', '\x32', '\x3', '\x32', '\a', '\x32', '\x6ED', '\n', '\x32',
    '\f', '\x32', '\xE', '\x32', '\x6F0', '\v', '\x32', '\x3', '\x32', '\x3',
    '\x32', '\x5', '\x32', '\x6F4', '\n', '\x32', '\x3', '\x33', '\x5', '\x33',
    '\x6F7', '\n', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3',
    '\x33', '\x3', '\x33', '\x3', '\x33', '\x5', '\x33', '\x6FF', '\n', '\x33',
    '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x5', '\x33',
    '\x705', '\n', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3',
    '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3',
    '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3',
    '\x33', '\x5', '\x33', '\x715', '\n', '\x33', '\x3', '\x33', '\x3', '\x33',
    '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33',
    '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x5', '\x33', '\x721', '\n',
    '\x33', '\x5', '\x33', '\x723', '\n', '\x33', '\x3', '\x34', '\x5', '\x34',
    '\x726', '\n', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3',
    '\x34', '\x3', '\x34', '\x3', '\x34', '\x5', '\x34', '\x72E', '\n', '\x34',
    '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x5', '\x34',
    '\x734', '\n', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3',
    '\x34', '\x5', '\x34', '\x73A', '\n', '\x34', '\x3', '\x35', '\x3', '\x35',
    '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35',
    '\x3', '\x35', '\x3', '\x35', '\a', '\x35', '\x745', '\n', '\x35', '\f',
    '\x35', '\xE', '\x35', '\x748', '\v', '\x35', '\x3', '\x35', '\x3', '\x35',
    '\a', '\x35', '\x74C', '\n', '\x35', '\f', '\x35', '\xE', '\x35', '\x74F',
    '\v', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\a', '\x35',
    '\x754', '\n', '\x35', '\f', '\x35', '\xE', '\x35', '\x757', '\v', '\x35',
    '\x5', '\x35', '\x759', '\n', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3',
    '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\a',
    '\x35', '\x762', '\n', '\x35', '\f', '\x35', '\xE', '\x35', '\x765', '\v',
    '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\a', '\x35', '\x76A',
    '\n', '\x35', '\f', '\x35', '\xE', '\x35', '\x76D', '\v', '\x35', '\x5',
    '\x35', '\x76F', '\n', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35',
    '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35',
    '\a', '\x35', '\x779', '\n', '\x35', '\f', '\x35', '\xE', '\x35', '\x77C',
    '\v', '\x35', '\x3', '\x35', '\x3', '\x35', '\a', '\x35', '\x780', '\n',
    '\x35', '\f', '\x35', '\xE', '\x35', '\x783', '\v', '\x35', '\x3', '\x35',
    '\x3', '\x35', '\x3', '\x35', '\a', '\x35', '\x788', '\n', '\x35', '\f',
    '\x35', '\xE', '\x35', '\x78B', '\v', '\x35', '\x5', '\x35', '\x78D',
    '\n', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35',
    '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\a', '\x35',
    '\x797', '\n', '\x35', '\f', '\x35', '\xE', '\x35', '\x79A', '\v', '\x35',
    '\x3', '\x35', '\x3', '\x35', '\a', '\x35', '\x79E', '\n', '\x35', '\f',
    '\x35', '\xE', '\x35', '\x7A1', '\v', '\x35', '\x3', '\x35', '\x3', '\x35',
    '\x3', '\x35', '\a', '\x35', '\x7A6', '\n', '\x35', '\f', '\x35', '\xE',
    '\x35', '\x7A9', '\v', '\x35', '\x5', '\x35', '\x7AB', '\n', '\x35', '\x3',
    '\x35', '\x3', '\x35', '\x3', '\x35', '\a', '\x35', '\x7B0', '\n', '\x35',
    '\f', '\x35', '\xE', '\x35', '\x7B3', '\v', '\x35', '\x3', '\x35', '\x3',
    '\x35', '\x3', '\x35', '\a', '\x35', '\x7B8', '\n', '\x35', '\f', '\x35',
    '\xE', '\x35', '\x7BB', '\v', '\x35', '\x5', '\x35', '\x7BD', '\n', '\x35',
    '\x5', '\x35', '\x7BF', '\n', '\x35', '\x3', '\x36', '\x3', '\x36', '\x3',
    '\x36', '\x5', '\x36', '\x7C4', '\n', '\x36', '\x3', '\x37', '\x3', '\x37',
    '\x3', '\x37', '\x3', '\x37', '\x6', '\x37', '\x7CA', '\n', '\x37', '\r',
    '\x37', '\xE', '\x37', '\x7CB', '\x3', '\x37', '\x3', '\x37', '\x3', '\x38',
    '\x3', '\x38', '\x3', '\x38', '\a', '\x38', '\x7D3', '\n', '\x38', '\f',
    '\x38', '\xE', '\x38', '\x7D6', '\v', '\x38', '\x3', '\x39', '\x5', '\x39',
    '\x7D9', '\n', '\x39', '\x3', '\x39', '\x3', '\x39', '\x5', '\x39', '\x7DD',
    '\n', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x5', '\x39',
    '\x7E2', '\n', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3',
    '\x39', '\x5', '\x39', '\x7E8', '\n', '\x39', '\x3', '\x39', '\x3', '\x39',
    '\x3', '\x39', '\x3', '\x39', '\x5', '\x39', '\x7EE', '\n', '\x39', '\x3',
    '\x39', '\x3', '\x39', '\x3', '\x39', '\x5', '\x39', '\x7F3', '\n', '\x39',
    '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x5', '\x39', '\x7F8', '\n',
    '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x5', '\x39', '\x7FD',
    '\n', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x5', '\x39',
    '\x802', '\n', '\x39', '\x3', '\x39', '\x5', '\x39', '\x805', '\n', '\x39',
    '\x3', ':', '\x3', ':', '\x3', ':', '\x5', ':', '\x80A', '\n', ':', '\x3',
    ':', '\x6', ':', '\x80D', '\n', ':', '\r', ':', '\xE', ':', '\x80E', '\x3',
    ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3',
    ':', '\x3', ':', '\x5', ':', '\x819', '\n', ':', '\x3', ';', '\x3', ';',
    '\x5', ';', '\x81D', '\n', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3',
    ';', '\x3', ';', '\x5', ';', '\x824', '\n', ';', '\x3', ';', '\x3', ';',
    '\x3', ';', '\x5', ';', '\x829', '\n', ';', '\x3', ';', '\x5', ';', '\x82C',
    '\n', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x5', ';', '\x831', '\n',
    ';', '\x3', ';', '\x5', ';', '\x834', '\n', ';', '\x3', ';', '\x3', ';',
    '\x5', ';', '\x838', '\n', ';', '\x3', ';', '\x3', ';', '\x5', ';', '\x83C',
    '\n', ';', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', '<', '\a', '<',
    '\x842', '\n', '<', '\f', '<', '\xE', '<', '\x845', '\v', '<', '\x3',
    '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3',
    '=', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3',
    '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x5', '>', '\x857', '\n', '>',
    '\x3', '>', '\x5', '>', '\x85A', '\n', '>', '\x3', '>', '\x5', '>', '\x85D',
    '\n', '>', '\x3', '>', '\x3', '>', '\x5', '>', '\x861', '\n', '>', '\x3',
    '>', '\x3', '>', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', '\a',
    '?', '\x869', '\n', '?', '\f', '?', '\xE', '?', '\x86C', '\v', '?', '\x3',
    '@', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', '\x3',
    '@', '\x3', '@', '\a', '@', '\x876', '\n', '@', '\f', '@', '\xE', '@',
    '\x879', '\v', '@', '\x3', '@', '\x3', '@', '\x3', '\x41', '\x3', '\x41',
    '\x5', '\x41', '\x87F', '\n', '\x41', '\x3', '\x41', '\x5', '\x41', '\x882',
    '\n', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41',
    '\x3', '\x41', '\a', '\x41', '\x889', '\n', '\x41', '\f', '\x41', '\xE',
    '\x41', '\x88C', '\v', '\x41', '\x5', '\x41', '\x88E', '\n', '\x41', '\x3',
    '\x41', '\x5', '\x41', '\x891', '\n', '\x41', '\x3', '\x42', '\x3', '\x42',
    '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42',
    '\x3', '\x42', '\x3', '\x42', '\x5', '\x42', '\x89C', '\n', '\x42', '\x3',
    '\x42', '\x5', '\x42', '\x89F', '\n', '\x42', '\x3', '\x42', '\x3', '\x42',
    '\x5', '\x42', '\x8A3', '\n', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3',
    '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x5', '\x43', '\x8AB',
    '\n', '\x43', '\x3', '\x43', '\x5', '\x43', '\x8AE', '\n', '\x43', '\x3',
    '\x43', '\x3', '\x43', '\x3', '\x43', '\x5', '\x43', '\x8B3', '\n', '\x43',
    '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43',
    '\x3', '\x43', '\x5', '\x43', '\x8BB', '\n', '\x43', '\x3', '\x43', '\x3',
    '\x43', '\x3', '\x43', '\x3', '\x43', '\x5', '\x43', '\x8C1', '\n', '\x43',
    '\x3', '\x43', '\x3', '\x43', '\x5', '\x43', '\x8C5', '\n', '\x43', '\x3',
    '\x44', '\x3', '\x44', '\x5', '\x44', '\x8C9', '\n', '\x44', '\x3', '\x44',
    '\a', '\x44', '\x8CC', '\n', '\x44', '\f', '\x44', '\xE', '\x44', '\x8CF',
    '\v', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x8D3', '\n',
    '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3',
    '\x44', '\x5', '\x44', '\x8DA', '\n', '\x44', '\x3', '\x44', '\x3', '\x44',
    '\x5', '\x44', '\x8DE', '\n', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3',
    '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\a',
    '\x44', '\x8E7', '\n', '\x44', '\f', '\x44', '\xE', '\x44', '\x8EA', '\v',
    '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3',
    '\x44', '\x5', '\x44', '\x8F1', '\n', '\x44', '\x3', '\x44', '\x5', '\x44',
    '\x8F4', '\n', '\x44', '\x3', '\x44', '\x3', '\x44', '\a', '\x44', '\x8F8',
    '\n', '\x44', '\f', '\x44', '\xE', '\x44', '\x8FB', '\v', '\x44', '\x3',
    '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x900', '\n', '\x44',
    '\x5', '\x44', '\x902', '\n', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3',
    '\x44', '\x5', '\x44', '\x907', '\n', '\x44', '\x3', '\x44', '\x3', '\x44',
    '\a', '\x44', '\x90B', '\n', '\x44', '\f', '\x44', '\xE', '\x44', '\x90E',
    '\v', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44',
    '\x913', '\n', '\x44', '\x5', '\x44', '\x915', '\n', '\x44', '\x3', '\x44',
    '\x3', '\x44', '\x5', '\x44', '\x919', '\n', '\x44', '\x3', '\x44', '\x5',
    '\x44', '\x91C', '\n', '\x44', '\x3', '\x44', '\x5', '\x44', '\x91F',
    '\n', '\x44', '\x3', '\x44', '\x3', '\x44', '\a', '\x44', '\x923', '\n',
    '\x44', '\f', '\x44', '\xE', '\x44', '\x926', '\v', '\x44', '\x3', '\x44',
    '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x92B', '\n', '\x44', '\x3',
    '\x44', '\x5', '\x44', '\x92E', '\n', '\x44', '\x3', '\x44', '\x3', '\x44',
    '\a', '\x44', '\x932', '\n', '\x44', '\f', '\x44', '\xE', '\x44', '\x935',
    '\v', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44',
    '\x93A', '\n', '\x44', '\x5', '\x44', '\x93C', '\n', '\x44', '\x3', '\x44',
    '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x941', '\n', '\x44', '\x3',
    '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3',
    '\x44', '\x5', '\x44', '\x949', '\n', '\x44', '\x5', '\x44', '\x94B',
    '\n', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44',
    '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x954', '\n',
    '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x959',
    '\n', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44',
    '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x961', '\n', '\x44', '\x3',
    '\x44', '\x3', '\x44', '\x5', '\x44', '\x965', '\n', '\x44', '\x3', '\x44',
    '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44',
    '\x5', '\x44', '\x96D', '\n', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3',
    '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3',
    '\x44', '\x5', '\x44', '\x977', '\n', '\x44', '\x3', '\x44', '\x3', '\x44',
    '\x3', '\x44', '\x5', '\x44', '\x97C', '\n', '\x44', '\x3', '\x44', '\x3',
    '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x983',
    '\n', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x987', '\n',
    '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x98B', '\n', '\x44',
    '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44',
    '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44',
    '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44',
    '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44',
    '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x9A3', '\n', '\x44', '\x3',
    '\x44', '\x3', '\x44', '\x5', '\x44', '\x9A7', '\n', '\x44', '\x3', '\x44',
    '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44',
    '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44',
    '\x9B3', '\n', '\x44', '\x3', '\x44', '\x5', '\x44', '\x9B6', '\n', '\x44',
    '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44',
    '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x9BF', '\n', '\x44', '\x3',
    '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3',
    '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3',
    '\x44', '\x3', '\x44', '\x3', '\x44', '\a', '\x44', '\x9CE', '\n', '\x44',
    '\f', '\x44', '\xE', '\x44', '\x9D1', '\v', '\x44', '\x3', '\x44', '\x3',
    '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3',
    '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x9DC', '\n', '\x44',
    '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44',
    '\x5', '\x44', '\x9E3', '\n', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3',
    '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x9EA', '\n', '\x44',
    '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44',
    '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44',
    '\x3', '\x44', '\a', '\x44', '\x9F7', '\n', '\x44', '\f', '\x44', '\xE',
    '\x44', '\x9FA', '\v', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44',
    '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44',
    '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\xA06', '\n', '\x44', '\x3',
    '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\xA0C',
    '\n', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44',
    '\x5', '\x44', '\xA12', '\n', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3',
    '\x44', '\x3', '\x44', '\x5', '\x44', '\xA18', '\n', '\x44', '\x3', '\x44',
    '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\xA1E', '\n',
    '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5',
    '\x44', '\xA24', '\n', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44',
    '\x3', '\x44', '\x5', '\x44', '\xA2A', '\n', '\x44', '\x3', '\x45', '\x3',
    '\x45', '\x3', '\x45', '\x5', '\x45', '\xA2F', '\n', '\x45', '\x3', '\x45',
    '\x3', '\x45', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x5', '\x46',
    '\xA36', '\n', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', 'G', '\x3',
    'G', '\x3', 'G', '\x5', 'G', '\xA3D', '\n', 'G', '\x3', 'G', '\x3', 'G',
    '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x5', 'G', '\xA44', '\n', 'G', '\x3',
    'G', '\x3', 'G', '\x3', 'G', '\x5', 'G', '\xA49', '\n', 'G', '\x3', 'G',
    '\a', 'G', '\xA4C', '\n', 'G', '\f', 'G', '\xE', 'G', '\xA4F', '\v', 'G',
    '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H',
    '\x3', 'H', '\x3', 'H', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x5', 'I',
    '\xA5C', '\n', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'J', '\x3', 'J', '\x3',
    'J', '\x5', 'J', '\xA63', '\n', 'J', '\x3', 'J', '\x3', 'J', '\x3', 'K',
    '\x3', 'K', '\x3', 'K', '\x5', 'K', '\xA6A', '\n', 'K', '\x3', 'K', '\x3',
    'K', '\x3', 'L', '\x3', 'L', '\x5', 'L', '\xA70', '\n', 'L', '\x3', 'L',
    '\x3', 'L', '\x5', 'L', '\xA74', '\n', 'L', '\x3', 'L', '\x3', 'L', '\x5',
    'L', '\xA78', '\n', 'L', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M',
    '\x3', 'M', '\x5', 'M', '\xA7F', '\n', 'M', '\x3', 'M', '\x5', 'M', '\xA82',
    '\n', 'M', '\x3', 'N', '\x3', 'N', '\x3', 'N', '\x5', 'N', '\xA87', '\n',
    'N', '\x3', 'N', '\x3', 'N', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x5',
    'O', '\xA8E', '\n', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\a', 'O',
    '\xA93', '\n', 'O', '\f', 'O', '\xE', 'O', '\xA96', '\v', 'O', '\x3',
    'O', '\x5', 'O', '\xA99', '\n', 'O', '\x3', 'P', '\x3', 'P', '\x3', 'P',
    '\x3', 'P', '\x3', 'P', '\a', 'P', '\xAA0', '\n', 'P', '\f', 'P', '\xE',
    'P', '\xAA3', '\v', 'P', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q',
    '\x3', 'R', '\x3', 'R', '\x5', 'R', '\xAAB', '\n', 'R', '\x3', 'R', '\x3',
    'R', '\x3', 'S', '\x3', 'S', '\x3', 'S', '\x3', 'S', '\x3', 'S', '\x5',
    'S', '\xAB4', '\n', 'S', '\x3', 'S', '\x5', 'S', '\xAB7', '\n', 'S', '\x3',
    'T', '\x3', 'T', '\x5', 'T', '\xABB', '\n', 'T', '\x3', 'U', '\x3', 'U',
    '\x3', 'U', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x5', 'V',
    '\xAC4', '\n', 'V', '\x3', 'W', '\x3', 'W', '\x5', 'W', '\xAC8', '\n',
    'W', '\x3', 'W', '\x5', 'W', '\xACB', '\n', 'W', '\x3', 'W', '\x5', 'W',
    '\xACE', '\n', 'W', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x3',
    'W', '\x3', 'W', '\x5', 'W', '\xAD6', '\n', 'W', '\x3', 'W', '\x3', 'W',
    '\x3', 'W', '\x3', 'W', '\x5', 'W', '\xADC', '\n', 'W', '\x3', 'W', '\x3',
    'W', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\a', 'W', '\xAE3', '\n', 'W',
    '\f', 'W', '\xE', 'W', '\xAE6', '\v', 'W', '\x5', 'W', '\xAE8', '\n',
    'W', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x3', 'W', '\x3',
    'W', '\x3', 'W', '\a', 'W', '\xAF1', '\n', 'W', '\f', 'W', '\xE', 'W',
    '\xAF4', '\v', 'W', '\x5', 'W', '\xAF6', '\n', 'W', '\x3', 'X', '\x3',
    'X', '\x3', 'X', '\x5', 'X', '\xAFB', '\n', 'X', '\x3', 'X', '\x5', 'X',
    '\xAFE', '\n', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x5', 'X', '\xB03',
    '\n', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X',
    '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x5', 'X', '\xB0D', '\n', 'X', '\x3',
    'X', '\x3', 'X', '\x3', 'X', '\x5', 'X', '\xB12', '\n', 'X', '\x3', 'X',
    '\x3', 'X', '\x6', 'X', '\xB16', '\n', 'X', '\r', 'X', '\xE', 'X', '\xB17',
    '\x5', 'X', '\xB1A', '\n', 'X', '\x3', 'X', '\x3', 'X', '\x6', 'X', '\xB1E',
    '\n', 'X', '\r', 'X', '\xE', 'X', '\xB1F', '\x5', 'X', '\xB22', '\n',
    'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x5', 'X', '\xB28',
    '\n', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\a', 'X',
    '\xB2E', '\n', 'X', '\f', 'X', '\xE', 'X', '\xB31', '\v', 'X', '\x3',
    'X', '\x3', 'X', '\x5', 'X', '\xB35', '\n', 'X', '\x3', 'X', '\x3', 'X',
    '\x3', 'X', '\x3', 'X', '\a', 'X', '\xB3B', '\n', 'X', '\f', 'X', '\xE',
    'X', '\xB3E', '\v', 'X', '\x5', 'X', '\xB40', '\n', 'X', '\x3', 'Y', '\x3',
    'Y', '\x3', 'Y', '\x5', 'Y', '\xB45', '\n', 'Y', '\x3', 'Y', '\x5', 'Y',
    '\xB48', '\n', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x5', 'Y', '\xB4D',
    '\n', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y',
    '\x3', 'Y', '\x5', 'Y', '\xB55', '\n', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3',
    'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x5', 'Y', '\xB5D', '\n', 'Y',
    '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x5', 'Y', '\xB63', '\n',
    'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\a', 'Y', '\xB69',
    '\n', 'Y', '\f', 'Y', '\xE', 'Y', '\xB6C', '\v', 'Y', '\x3', 'Y', '\x3',
    'Y', '\x5', 'Y', '\xB70', '\n', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y',
    '\x3', 'Y', '\a', 'Y', '\xB76', '\n', 'Y', '\f', 'Y', '\xE', 'Y', '\xB79',
    '\v', 'Y', '\x5', 'Y', '\xB7B', '\n', 'Y', '\x3', 'Z', '\x3', 'Z', '\x5',
    'Z', '\xB7F', '\n', 'Z', '\x3', 'Z', '\x5', 'Z', '\xB82', '\n', 'Z', '\x3',
    'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x5',
    'Z', '\xB8A', '\n', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z',
    '\x5', 'Z', '\xB90', '\n', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3',
    'Z', '\x3', 'Z', '\a', 'Z', '\xB97', '\n', 'Z', '\f', 'Z', '\xE', 'Z',
    '\xB9A', '\v', 'Z', '\x5', 'Z', '\xB9C', '\n', 'Z', '\x3', '[', '\x3',
    '[', '\x5', '[', '\xBA0', '\n', '[', '\x3', '[', '\x3', '[', '\x5', '[',
    '\xBA4', '\n', '[', '\x3', '[', '\x3', '[', '\x6', '[', '\xBA8', '\n',
    '[', '\r', '[', '\xE', '[', '\xBA9', '\x3', '[', '\x3', '[', '\x5', '[',
    '\xBAE', '\n', '[', '\x3', '[', '\x3', '[', '\x5', '[', '\xBB2', '\n',
    '[', '\x5', '[', '\xBB4', '\n', '[', '\x3', '[', '\x5', '[', '\xBB7',
    '\n', '[', '\x3', '[', '\x5', '[', '\xBBA', '\n', '[', '\x3', '[', '\x5',
    '[', '\xBBD', '\n', '[', '\x3', '[', '\x3', '[', '\x6', '[', '\xBC1',
    '\n', '[', '\r', '[', '\xE', '[', '\xBC2', '\x3', '[', '\x3', '[', '\x5',
    '[', '\xBC7', '\n', '[', '\x3', '[', '\x5', '[', '\xBCA', '\n', '[', '\x3',
    '[', '\x5', '[', '\xBCD', '\n', '[', '\x3', '[', '\x5', '[', '\xBD0',
    '\n', '[', '\x3', '[', '\x5', '[', '\xBD3', '\n', '[', '\x5', '[', '\xBD5',
    '\n', '[', '\x3', '\\', '\x3', '\\', '\x5', '\\', '\xBD9', '\n', '\\',
    '\x3', ']', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', ']', '\x3', ']',
    '\x3', ']', '\x3', ']', '\x3', ']', '\x3', ']', '\a', ']', '\xBE5', '\n',
    ']', '\f', ']', '\xE', ']', '\xBE8', '\v', ']', '\x5', ']', '\xBEA', '\n',
    ']', '\x3', '^', '\x3', '^', '\x3', '^', '\x3', '^', '\x5', '^', '\xBF0',
    '\n', '^', '\x3', '_', '\x3', '_', '\x5', '_', '\xBF4', '\n', '_', '\x3',
    '`', '\x3', '`', '\x3', '`', '\x3', '`', '\x3', '`', '\x3', '`', '\x5',
    '`', '\xBFC', '\n', '`', '\x3', '\x61', '\x3', '\x61', '\x5', '\x61',
    '\xC00', '\n', '\x61', '\x3', '\x61', '\x5', '\x61', '\xC03', '\n', '\x61',
    '\x3', '\x61', '\x5', '\x61', '\xC06', '\n', '\x61', '\x3', '\x61', '\x3',
    '\x61', '\x3', '\x61', '\x3', '\x61', '\x3', '\x61', '\x3', '\x61', '\x3',
    '\x61', '\x5', '\x61', '\xC0F', '\n', '\x61', '\x3', '\x61', '\x3', '\x61',
    '\x5', '\x61', '\xC13', '\n', '\x61', '\x3', '\x61', '\x5', '\x61', '\xC16',
    '\n', '\x61', '\x3', '\x61', '\x3', '\x61', '\x5', '\x61', '\xC1A', '\n',
    '\x61', '\x3', '\x62', '\x3', '\x62', '\x5', '\x62', '\xC1E', '\n', '\x62',
    '\x3', '\x62', '\x5', '\x62', '\xC21', '\n', '\x62', '\x3', '\x62', '\x5',
    '\x62', '\xC24', '\n', '\x62', '\x3', '\x62', '\x3', '\x62', '\x3', '\x62',
    '\x5', '\x62', '\xC29', '\n', '\x62', '\x3', '\x62', '\x3', '\x62', '\x3',
    '\x62', '\x3', '\x62', '\x5', '\x62', '\xC2F', '\n', '\x62', '\a', '\x62',
    '\xC31', '\n', '\x62', '\f', '\x62', '\xE', '\x62', '\xC34', '\v', '\x62',
    '\x3', '\x62', '\x3', '\x62', '\x3', '\x62', '\x3', '\x62', '\x3', '\x62',
    '\x3', '\x62', '\x3', '\x62', '\x5', '\x62', '\xC3D', '\n', '\x62', '\x3',
    '\x62', '\x3', '\x62', '\x3', '\x62', '\x3', '\x62', '\x5', '\x62', '\xC43',
    '\n', '\x62', '\a', '\x62', '\xC45', '\n', '\x62', '\f', '\x62', '\xE',
    '\x62', '\xC48', '\v', '\x62', '\x3', '\x62', '\x3', '\x62', '\x3', '\x62',
    '\x5', '\x62', '\xC4D', '\n', '\x62', '\x3', '\x62', '\x3', '\x62', '\x5',
    '\x62', '\xC51', '\n', '\x62', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63',
    '\x3', '\x63', '\x5', '\x63', '\xC57', '\n', '\x63', '\x3', '\x63', '\x5',
    '\x63', '\xC5A', '\n', '\x63', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64',
    '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x64',
    '\x3', '\x64', '\x3', '\x64', '\x5', '\x64', '\xC66', '\n', '\x64', '\x3',
    '\x64', '\x3', '\x64', '\x5', '\x64', '\xC6A', '\n', '\x64', '\x3', '\x64',
    '\x3', '\x64', '\x5', '\x64', '\xC6E', '\n', '\x64', '\x3', '\x65', '\x3',
    '\x65', '\x3', '\x65', '\x3', '\x65', '\x3', '\x65', '\x3', '\x65', '\x5',
    '\x65', '\xC76', '\n', '\x65', '\x3', '\x65', '\x3', '\x65', '\x5', '\x65',
    '\xC7A', '\n', '\x65', '\x3', '\x66', '\x3', '\x66', '\x3', '\x66', '\x3',
    '\x66', '\x3', 'g', '\x3', 'g', '\x5', 'g', '\xC82', '\n', 'g', '\x3',
    'g', '\x5', 'g', '\xC85', '\n', 'g', '\x3', 'g', '\x3', 'g', '\x5', 'g',
    '\xC89', '\n', 'g', '\x3', 'g', '\x5', 'g', '\xC8C', '\n', 'g', '\x3',
    'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\a', 'g', '\xC92', '\n', 'g',
    '\f', 'g', '\xE', 'g', '\xC95', '\v', 'g', '\x3', 'g', '\x3', 'g', '\x5',
    'g', '\xC99', '\n', 'g', '\x3', 'g', '\x5', 'g', '\xC9C', '\n', 'g', '\x3',
    'g', '\x5', 'g', '\xC9F', '\n', 'g', '\x3', 'h', '\x3', 'h', '\x5', 'h',
    '\xCA3', '\n', 'h', '\x3', 'h', '\x5', 'h', '\xCA6', '\n', 'h', '\x3',
    'h', '\x3', 'h', '\x3', 'h', '\x3', 'h', '\x3', 'h', '\a', 'h', '\xCAD',
    '\n', 'h', '\f', 'h', '\xE', 'h', '\xCB0', '\v', 'h', '\x3', 'h', '\x3',
    'h', '\x5', 'h', '\xCB4', '\n', 'h', '\x3', 'i', '\x3', 'i', '\x3', 'i',
    '\x3', 'i', '\x3', 'i', '\a', 'i', '\xCBB', '\n', 'i', '\f', 'i', '\xE',
    'i', '\xCBE', '\v', 'i', '\x3', 'j', '\x3', 'j', '\x5', 'j', '\xCC2',
    '\n', 'j', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\a', 'k', '\xCC7', '\n',
    'k', '\f', 'k', '\xE', 'k', '\xCCA', '\v', 'k', '\x3', 'l', '\x3', 'l',
    '\a', 'l', '\xCCE', '\n', 'l', '\f', 'l', '\xE', 'l', '\xCD1', '\v', 'l',
    '\x3', 'l', '\x3', 'l', '\x3', 'l', '\a', 'l', '\xCD6', '\n', 'l', '\f',
    'l', '\xE', 'l', '\xCD9', '\v', 'l', '\x3', 'l', '\x3', 'l', '\x5', 'l',
    '\xCDD', '\n', 'l', '\x3', 'm', '\x3', 'm', '\x3', 'm', '\x3', 'm', '\x3',
    'm', '\x3', 'm', '\x5', 'm', '\xCE5', '\n', 'm', '\x3', 'm', '\x5', 'm',
    '\xCE8', '\n', 'm', '\x3', 'm', '\x5', 'm', '\xCEB', '\n', 'm', '\x3',
    'm', '\x3', 'm', '\x3', 'm', '\a', 'm', '\xCF0', '\n', 'm', '\f', 'm',
    '\xE', 'm', '\xCF3', '\v', 'm', '\x5', 'm', '\xCF5', '\n', 'm', '\x3',
    'm', '\x3', 'm', '\x3', 'm', '\x3', 'm', '\x3', 'm', '\x5', 'm', '\xCFC',
    '\n', 'm', '\x3', 'm', '\x5', 'm', '\xCFF', '\n', 'm', '\x3', 'm', '\x3',
    'm', '\x3', 'm', '\x3', 'm', '\x3', 'm', '\x3', 'm', '\x5', 'm', '\xD07',
    '\n', 'm', '\x3', 'n', '\x3', 'n', '\x3', 'n', '\x3', 'n', '\x5', 'n',
    '\xD0D', '\n', 'n', '\x3', 'n', '\x3', 'n', '\x3', 'n', '\x3', 'n', '\x3',
    'o', '\x3', 'o', '\x3', 'o', '\x3', 'o', '\x3', 'o', '\x5', 'o', '\xD18',
    '\n', 'o', '\x3', 'p', '\x5', 'p', '\xD1B', '\n', 'p', '\x3', 'p', '\x3',
    'p', '\x3', 'p', '\x3', 'p', '\x3', 'p', '\x3', 'p', '\x3', 'p', '\x3',
    'p', '\x3', 'p', '\x5', 'p', '\xD26', '\n', 'p', '\x3', 'p', '\x3', 'p',
    '\x3', 'p', '\x3', 'p', '\x5', 'p', '\xD2C', '\n', 'p', '\x3', 'p', '\x3',
    'p', '\x5', 'p', '\xD30', '\n', 'p', '\x3', 'p', '\x3', 'p', '\x3', 'p',
    '\x3', 'p', '\x3', 'p', '\x3', 'p', '\x3', 'p', '\x3', 'p', '\x3', 'p',
    '\x5', 'p', '\xD3B', '\n', 'p', '\x3', 'p', '\x3', 'p', '\x3', 'p', '\x5',
    'p', '\xD40', '\n', 'p', '\x5', 'p', '\xD42', '\n', 'p', '\x3', 'p', '\x3',
    'p', '\x5', 'p', '\xD46', '\n', 'p', '\x3', 'q', '\x3', 'q', '\x3', 'q',
    '\x3', 'q', '\x3', 'q', '\x3', 'q', '\x3', 'q', '\x3', 'q', '\x5', 'q',
    '\xD50', '\n', 'q', '\x3', 'r', '\x3', 'r', '\x3', 'r', '\x3', 'r', '\x3',
    'r', '\x3', 'r', '\x3', 'r', '\x3', 'r', '\x5', 'r', '\xD5A', '\n', 'r',
    '\x3', 's', '\x3', 's', '\a', 's', '\xD5E', '\n', 's', '\f', 's', '\xE',
    's', '\xD61', '\v', 's', '\x3', 's', '\x3', 's', '\x5', 's', '\xD65',
    '\n', 's', '\x3', 's', '\x5', 's', '\xD68', '\n', 's', '\x3', 's', '\x5',
    's', '\xD6B', '\n', 's', '\x3', 's', '\x5', 's', '\xD6E', '\n', 's', '\x3',
    's', '\x3', 's', '\a', 's', '\xD72', '\n', 's', '\f', 's', '\xE', 's',
    '\xD75', '\v', 's', '\x3', 's', '\x3', 's', '\x5', 's', '\xD79', '\n',
    's', '\x3', 's', '\x5', 's', '\xD7C', '\n', 's', '\x3', 's', '\x5', 's',
    '\xD7F', '\n', 's', '\x3', 's', '\x5', 's', '\xD82', '\n', 's', '\x5',
    's', '\xD84', '\n', 's', '\x3', 't', '\x3', 't', '\a', 't', '\xD88', '\n',
    't', '\f', 't', '\xE', 't', '\xD8B', '\v', 't', '\x3', 't', '\x3', 't',
    '\x5', 't', '\xD8F', '\n', 't', '\x3', 't', '\x5', 't', '\xD92', '\n',
    't', '\x3', 't', '\x5', 't', '\xD95', '\n', 't', '\x3', 'u', '\x3', 'u',
    '\x5', 'u', '\xD99', '\n', 'u', '\x3', 'u', '\x3', 'u', '\x3', 'v', '\x3',
    'v', '\x5', 'v', '\xD9F', '\n', 'v', '\x3', 'v', '\x3', 'v', '\x5', 'v',
    '\xDA3', '\n', 'v', '\x3', 'w', '\x3', 'w', '\x3', 'w', '\x3', 'w', '\x3',
    'w', '\x3', 'w', '\x3', 'w', '\x3', 'w', '\x5', 'w', '\xDAD', '\n', 'w',
    '\x3', 'x', '\x3', 'x', '\x5', 'x', '\xDB1', '\n', 'x', '\x3', 'x', '\x3',
    'x', '\a', 'x', '\xDB5', '\n', 'x', '\f', 'x', '\xE', 'x', '\xDB8', '\v',
    'x', '\x3', 'y', '\x3', 'y', '\x3', 'y', '\x3', 'y', '\x3', 'y', '\x3',
    'y', '\x5', 'y', '\xDC0', '\n', 'y', '\x3', 'y', '\x5', 'y', '\xDC3',
    '\n', 'y', '\x3', 'y', '\x3', 'y', '\x5', 'y', '\xDC7', '\n', 'y', '\x3',
    'y', '\x5', 'y', '\xDCA', '\n', 'y', '\x3', 'y', '\x3', 'y', '\x5', 'y',
    '\xDCE', '\n', 'y', '\x3', 'y', '\x3', 'y', '\x5', 'y', '\xDD2', '\n',
    'y', '\x3', 'y', '\x5', 'y', '\xDD5', '\n', 'y', '\x5', 'y', '\xDD7',
    '\n', 'y', '\x3', 'z', '\x3', 'z', '\x3', 'z', '\x3', 'z', '\a', 'z',
    '\xDDD', '\n', 'z', '\f', 'z', '\xE', 'z', '\xDE0', '\v', 'z', '\x3',
    'z', '\x3', 'z', '\x3', 'z', '\x3', 'z', '\x3', 'z', '\x3', 'z', '\x3',
    'z', '\x3', 'z', '\x3', 'z', '\x5', 'z', '\xDEB', '\n', 'z', '\x3', 'z',
    '\x3', 'z', '\x6', 'z', '\xDEF', '\n', 'z', '\r', 'z', '\xE', 'z', '\xDF0',
    '\x5', 'z', '\xDF3', '\n', 'z', '\x3', 'z', '\x3', 'z', '\x6', 'z', '\xDF7',
    '\n', 'z', '\r', 'z', '\xE', 'z', '\xDF8', '\x5', 'z', '\xDFB', '\n',
    'z', '\x5', 'z', '\xDFD', '\n', 'z', '\x3', '{', '\x3', '{', '\x3', '{',
    '\x3', '{', '\x5', '{', '\xE03', '\n', '{', '\x3', '{', '\x3', '{', '\x3',
    '{', '\x3', '{', '\x3', '{', '\x3', '{', '\x5', '{', '\xE0B', '\n', '{',
    '\x3', '|', '\x3', '|', '\x3', '|', '\x3', '|', '\x3', '|', '\x3', '|',
    '\x5', '|', '\xE13', '\n', '|', '\x3', '}', '\x3', '}', '\x3', '}', '\x3',
    '}', '\x5', '}', '\xE19', '\n', '}', '\x3', '}', '\x3', '}', '\x3', '}',
    '\x3', '}', '\x3', '}', '\a', '}', '\xE20', '\n', '}', '\f', '}', '\xE',
    '}', '\xE23', '\v', '}', '\x3', '}', '\x3', '}', '\x5', '}', '\xE27',
    '\n', '}', '\x5', '}', '\xE29', '\n', '}', '\x3', '}', '\x3', '}', '\x5',
    '}', '\xE2D', '\n', '}', '\x3', '~', '\x3', '~', '\x5', '~', '\xE31',
    '\n', '~', '\x3', '\x7F', '\x3', '\x7F', '\x3', '\x7F', '\x3', '\x7F',
    '\x5', '\x7F', '\xE37', '\n', '\x7F', '\x3', '\x7F', '\x3', '\x7F', '\x3',
    '\x7F', '\x3', '\x7F', '\x3', '\x7F', '\x5', '\x7F', '\xE3E', '\n', '\x7F',
    '\x3', '\x80', '\x3', '\x80', '\x5', '\x80', '\xE42', '\n', '\x80', '\x3',
    '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\x3', '\x81', '\a',
    '\x81', '\xE49', '\n', '\x81', '\f', '\x81', '\xE', '\x81', '\xE4C', '\v',
    '\x81', '\x5', '\x81', '\xE4E', '\n', '\x81', '\x3', '\x82', '\x3', '\x82',
    '\x5', '\x82', '\xE52', '\n', '\x82', '\x3', '\x83', '\x3', '\x83', '\x5',
    '\x83', '\xE56', '\n', '\x83', '\x3', '\x83', '\x3', '\x83', '\x5', '\x83',
    '\xE5A', '\n', '\x83', '\x3', '\x83', '\x5', '\x83', '\xE5D', '\n', '\x83',
    '\x3', '\x83', '\x5', '\x83', '\xE60', '\n', '\x83', '\x3', '\x83', '\x5',
    '\x83', '\xE63', '\n', '\x83', '\x3', '\x84', '\x3', '\x84', '\x5', '\x84',
    '\xE67', '\n', '\x84', '\x3', '\x84', '\x3', '\x84', '\x5', '\x84', '\xE6B',
    '\n', '\x84', '\x3', '\x84', '\x5', '\x84', '\xE6E', '\n', '\x84', '\x3',
    '\x84', '\x5', '\x84', '\xE71', '\n', '\x84', '\x3', '\x84', '\x5', '\x84',
    '\xE74', '\n', '\x84', '\x3', '\x85', '\x3', '\x85', '\x3', '\x85', '\x3',
    '\x86', '\x3', '\x86', '\x5', '\x86', '\xE7B', '\n', '\x86', '\x3', '\x86',
    '\x3', '\x86', '\x5', '\x86', '\xE7F', '\n', '\x86', '\x3', '\x86', '\x3',
    '\x86', '\x3', '\x87', '\x3', '\x87', '\x3', '\x87', '\x3', '\x87', '\x3',
    '\x88', '\x3', '\x88', '\x3', '\x88', '\x3', '\x88', '\x3', '\x88', '\a',
    '\x88', '\xE8C', '\n', '\x88', '\f', '\x88', '\xE', '\x88', '\xE8F', '\v',
    '\x88', '\x3', '\x89', '\x3', '\x89', '\x3', '\x89', '\x3', '\x8A', '\x3',
    '\x8A', '\x3', '\x8A', '\x3', '\x8A', '\x3', '\x8A', '\x3', '\x8B', '\x3',
    '\x8B', '\x5', '\x8B', '\xE9B', '\n', '\x8B', '\x3', '\x8B', '\x3', '\x8B',
    '\x3', '\x8B', '\x3', '\x8B', '\a', '\x8B', '\xEA1', '\n', '\x8B', '\f',
    '\x8B', '\xE', '\x8B', '\xEA4', '\v', '\x8B', '\x3', '\x8C', '\x3', '\x8C',
    '\x3', '\x8C', '\x3', '\x8C', '\x3', '\x8C', '\x3', '\x8C', '\x3', '\x8C',
    '\x5', '\x8C', '\xEAD', '\n', '\x8C', '\x3', '\x8D', '\x3', '\x8D', '\x5',
    '\x8D', '\xEB1', '\n', '\x8D', '\x3', '\x8D', '\x5', '\x8D', '\xEB4',
    '\n', '\x8D', '\x3', '\x8D', '\x3', '\x8D', '\x3', '\x8E', '\x3', '\x8E',
    '\x5', '\x8E', '\xEBA', '\n', '\x8E', '\x3', '\x8E', '\x5', '\x8E', '\xEBD',
    '\n', '\x8E', '\x3', '\x8E', '\x5', '\x8E', '\xEC0', '\n', '\x8E', '\x3',
    '\x8F', '\x3', '\x8F', '\x3', '\x8F', '\x3', '\x8F', '\x3', '\x8F', '\x3',
    '\x8F', '\x3', '\x8F', '\x5', '\x8F', '\xEC9', '\n', '\x8F', '\x3', '\x90',
    '\x3', '\x90', '\x3', '\x90', '\x3', '\x90', '\x3', '\x90', '\x3', '\x90',
    '\x3', '\x90', '\x5', '\x90', '\xED2', '\n', '\x90', '\x3', '\x91', '\x3',
    '\x91', '\x3', '\x91', '\x3', '\x91', '\x3', '\x91', '\x3', '\x91', '\a',
    '\x91', '\xEDA', '\n', '\x91', '\f', '\x91', '\xE', '\x91', '\xEDD', '\v',
    '\x91', '\x3', '\x91', '\x5', '\x91', '\xEE0', '\n', '\x91', '\x3', '\x92',
    '\x3', '\x92', '\x3', '\x92', '\x3', '\x92', '\x3', '\x92', '\x3', '\x92',
    '\a', '\x92', '\xEE8', '\n', '\x92', '\f', '\x92', '\xE', '\x92', '\xEEB',
    '\v', '\x92', '\x3', '\x93', '\x3', '\x93', '\x3', '\x93', '\x3', '\x93',
    '\x3', '\x93', '\x3', '\x93', '\x3', '\x93', '\x5', '\x93', '\xEF4', '\n',
    '\x93', '\x3', '\x94', '\x3', '\x94', '\x3', '\x94', '\x3', '\x95', '\x3',
    '\x95', '\x3', '\x95', '\x5', '\x95', '\xEFC', '\n', '\x95', '\x3', '\x95',
    '\x5', '\x95', '\xEFF', '\n', '\x95', '\x3', '\x96', '\x3', '\x96', '\x3',
    '\x96', '\x3', '\x96', '\x3', '\x96', '\a', '\x96', '\xF06', '\n', '\x96',
    '\f', '\x96', '\xE', '\x96', '\xF09', '\v', '\x96', '\x5', '\x96', '\xF0B',
    '\n', '\x96', '\x3', '\x96', '\x3', '\x96', '\x5', '\x96', '\xF0F', '\n',
    '\x96', '\x3', '\x96', '\a', '\x96', '\xF12', '\n', '\x96', '\f', '\x96',
    '\xE', '\x96', '\xF15', '\v', '\x96', '\x3', '\x96', '\x5', '\x96', '\xF18',
    '\n', '\x96', '\x3', '\x97', '\x3', '\x97', '\x3', '\x97', '\x3', '\x97',
    '\x3', '\x97', '\a', '\x97', '\xF1F', '\n', '\x97', '\f', '\x97', '\xE',
    '\x97', '\xF22', '\v', '\x97', '\x5', '\x97', '\xF24', '\n', '\x97', '\x3',
    '\x98', '\x3', '\x98', '\x3', '\x98', '\x3', '\x99', '\x3', '\x99', '\x3',
    '\x99', '\x3', '\x9A', '\x3', '\x9A', '\x3', '\x9A', '\x3', '\x9A', '\x3',
    '\x9A', '\x3', '\x9A', '\x3', '\x9A', '\x3', '\x9A', '\x3', '\x9A', '\x3',
    '\x9A', '\x3', '\x9A', '\x3', '\x9A', '\x3', '\x9A', '\x3', '\x9A', '\x3',
    '\x9A', '\x3', '\x9A', '\x3', '\x9A', '\x3', '\x9A', '\x3', '\x9A', '\x3',
    '\x9A', '\x3', '\x9A', '\a', '\x9A', '\xF41', '\n', '\x9A', '\f', '\x9A',
    '\xE', '\x9A', '\xF44', '\v', '\x9A', '\x5', '\x9A', '\xF46', '\n', '\x9A',
    '\x3', '\x9A', '\x5', '\x9A', '\xF49', '\n', '\x9A', '\x3', '\x9B', '\x3',
    '\x9B', '\x3', '\x9C', '\x3', '\x9C', '\x3', '\x9D', '\x3', '\x9D', '\x3',
    '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9F', '\x3',
    '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3',
    '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3',
    '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3',
    '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3',
    '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3',
    '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3',
    '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3',
    '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x3',
    '\x9F', '\a', '\x9F', '\xF7F', '\n', '\x9F', '\f', '\x9F', '\xE', '\x9F',
    '\xF82', '\v', '\x9F', '\x3', '\x9F', '\x3', '\x9F', '\x5', '\x9F', '\xF86',
    '\n', '\x9F', '\x3', '\xA0', '\x3', '\xA0', '\x3', '\xA0', '\x3', '\xA0',
    '\x3', '\xA0', '\x3', '\xA0', '\x3', '\xA1', '\x3', '\xA1', '\x3', '\xA2',
    '\x3', '\xA2', '\x3', '\xA2', '\x3', '\xA2', '\x3', '\xA2', '\x3', '\xA2',
    '\x3', '\xA2', '\x3', '\xA2', '\x3', '\xA2', '\x3', '\xA2', '\x3', '\xA2',
    '\x3', '\xA2', '\x3', '\xA2', '\x3', '\xA2', '\x3', '\xA2', '\x3', '\xA2',
    '\x3', '\xA2', '\x3', '\xA2', '\x5', '\xA2', '\xFA2', '\n', '\xA2', '\x3',
    '\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3',
    '\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x3',
    '\xA3', '\x3', '\xA3', '\x5', '\xA3', '\xFB0', '\n', '\xA3', '\x3', '\xA4',
    '\x3', '\xA4', '\x3', '\xA4', '\a', '\xA4', '\xFB5', '\n', '\xA4', '\f',
    '\xA4', '\xE', '\xA4', '\xFB8', '\v', '\xA4', '\x3', '\xA4', '\x5', '\xA4',
    '\xFBB', '\n', '\xA4', '\x3', '\xA5', '\x3', '\xA5', '\x3', '\xA5', '\x3',
    '\xA5', '\x5', '\xA5', '\xFC1', '\n', '\xA5', '\x3', '\xA6', '\x3', '\xA6',
    '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x5', '\xA6',
    '\xFC9', '\n', '\xA6', '\x5', '\xA6', '\xFCB', '\n', '\xA6', '\x3', '\xA7',
    '\x3', '\xA7', '\x3', '\xA7', '\x3', '\xA7', '\x3', '\xA8', '\x3', '\xA8',
    '\x3', '\xA8', '\x3', '\xA8', '\x3', '\xA8', '\x5', '\xA8', '\xFD6', '\n',
    '\xA8', '\x3', '\xA9', '\x3', '\xA9', '\x3', '\xA9', '\x3', '\xA9', '\x3',
    '\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x5', '\xAA', '\xFE0',
    '\n', '\xAA', '\x3', '\xAB', '\x3', '\xAB', '\x3', '\xAB', '\x3', '\xAB',
    '\x3', '\xAB', '\x5', '\xAB', '\xFE7', '\n', '\xAB', '\x3', '\xAC', '\x3',
    '\xAC', '\x3', '\xAC', '\x3', '\xAC', '\x5', '\xAC', '\xFED', '\n', '\xAC',
    '\x3', '\xAD', '\x3', '\xAD', '\x3', '\xAD', '\x3', '\xAD', '\x3', '\xAE',
    '\x3', '\xAE', '\x5', '\xAE', '\xFF5', '\n', '\xAE', '\x3', '\xAF', '\x3',
    '\xAF', '\x3', '\xAF', '\x5', '\xAF', '\xFFA', '\n', '\xAF', '\x3', '\xAF',
    '\x3', '\xAF', '\x3', '\xAF', '\x3', '\xAF', '\a', '\xAF', '\x1000', '\n',
    '\xAF', '\f', '\xAF', '\xE', '\xAF', '\x1003', '\v', '\xAF', '\x3', '\xAF',
    '\x3', '\xAF', '\x3', '\xAF', '\a', '\xAF', '\x1008', '\n', '\xAF', '\f',
    '\xAF', '\xE', '\xAF', '\x100B', '\v', '\xAF', '\x3', '\xAF', '\x3', '\xAF',
    '\x3', '\xAF', '\a', '\xAF', '\x1010', '\n', '\xAF', '\f', '\xAF', '\xE',
    '\xAF', '\x1013', '\v', '\xAF', '\x3', '\xAF', '\x3', '\xAF', '\x3', '\xAF',
    '\a', '\xAF', '\x1018', '\n', '\xAF', '\f', '\xAF', '\xE', '\xAF', '\x101B',
    '\v', '\xAF', '\x3', '\xAF', '\a', '\xAF', '\x101E', '\n', '\xAF', '\f',
    '\xAF', '\xE', '\xAF', '\x1021', '\v', '\xAF', '\x5', '\xAF', '\x1023',
    '\n', '\xAF', '\x3', '\xAF', '\x3', '\xAF', '\x5', '\xAF', '\x1027', '\n',
    '\xAF', '\x3', '\xB0', '\x3', '\xB0', '\x3', '\xB0', '\x5', '\xB0', '\x102C',
    '\n', '\xB0', '\x3', '\xB0', '\x6', '\xB0', '\x102F', '\n', '\xB0', '\r',
    '\xB0', '\xE', '\xB0', '\x1030', '\x3', '\xB0', '\x3', '\xB0', '\x6',
    '\xB0', '\x1035', '\n', '\xB0', '\r', '\xB0', '\xE', '\xB0', '\x1036',
    '\x5', '\xB0', '\x1039', '\n', '\xB0', '\x3', '\xB0', '\x3', '\xB0', '\x3',
    '\xB0', '\x3', '\xB1', '\x3', '\xB1', '\x3', '\xB1', '\x3', '\xB1', '\x6',
    '\xB1', '\x1042', '\n', '\xB1', '\r', '\xB1', '\xE', '\xB1', '\x1043',
    '\x3', '\xB1', '\a', '\xB1', '\x1047', '\n', '\xB1', '\f', '\xB1', '\xE',
    '\xB1', '\x104A', '\v', '\xB1', '\x3', '\xB1', '\x3', '\xB1', '\x6', '\xB1',
    '\x104E', '\n', '\xB1', '\r', '\xB1', '\xE', '\xB1', '\x104F', '\x5',
    '\xB1', '\x1052', '\n', '\xB1', '\x3', '\xB1', '\x3', '\xB1', '\x3', '\xB1',
    '\x3', '\xB2', '\x3', '\xB2', '\x3', '\xB2', '\x3', '\xB3', '\x3', '\xB3',
    '\x3', '\xB3', '\x3', '\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x5', '\xB4',
    '\x1060', '\n', '\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x6', '\xB4', '\x1064',
    '\n', '\xB4', '\r', '\xB4', '\xE', '\xB4', '\x1065', '\x3', '\xB4', '\x3',
    '\xB4', '\x3', '\xB4', '\x5', '\xB4', '\x106B', '\n', '\xB4', '\x3', '\xB5',
    '\x3', '\xB5', '\x3', '\xB5', '\x5', '\xB5', '\x1070', '\n', '\xB5', '\x3',
    '\xB5', '\x3', '\xB5', '\x6', '\xB5', '\x1074', '\n', '\xB5', '\r', '\xB5',
    '\xE', '\xB5', '\x1075', '\x3', '\xB5', '\x3', '\xB5', '\x3', '\xB5',
    '\x3', '\xB5', '\x3', '\xB5', '\x5', '\xB5', '\x107D', '\n', '\xB5', '\x3',
    '\xB6', '\x3', '\xB6', '\x3', '\xB6', '\x3', '\xB7', '\x3', '\xB7', '\x3',
    '\xB7', '\x5', '\xB7', '\x1085', '\n', '\xB7', '\x3', '\xB7', '\x3', '\xB7',
    '\x3', '\xB7', '\x3', '\xB7', '\x6', '\xB7', '\x108B', '\n', '\xB7', '\r',
    '\xB7', '\xE', '\xB7', '\x108C', '\x3', '\xB7', '\x3', '\xB7', '\x3',
    '\xB7', '\x5', '\xB7', '\x1092', '\n', '\xB7', '\x3', '\xB8', '\x3', '\xB8',
    '\x3', '\xB8', '\x3', '\xB8', '\x5', '\xB8', '\x1098', '\n', '\xB8', '\x3',
    '\xB8', '\x5', '\xB8', '\x109B', '\n', '\xB8', '\x3', '\xB8', '\x3', '\xB8',
    '\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x3', '\xB8', '\x5', '\xB8',
    '\x10A3', '\n', '\xB8', '\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x3',
    '\xB9', '\x3', '\xB9', '\x5', '\xB9', '\x10AA', '\n', '\xB9', '\x3', '\xBA',
    '\x3', '\xBA', '\x3', '\xBA', '\x3', '\xBA', '\x3', '\xBA', '\x3', '\xBA',
    '\x3', '\xBA', '\x5', '\xBA', '\x10B3', '\n', '\xBA', '\x3', '\xBA', '\x5',
    '\xBA', '\x10B6', '\n', '\xBA', '\x3', '\xBB', '\x3', '\xBB', '\x3', '\xBB',
    '\x3', '\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x3', '\xBC', '\x3', '\xBC',
    '\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC',
    '\a', '\xBC', '\x10C5', '\n', '\xBC', '\f', '\xBC', '\xE', '\xBC', '\x10C8',
    '\v', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBD', '\x3', '\xBD',
    '\x3', '\xBD', '\x5', '\xBD', '\x10CF', '\n', '\xBD', '\x3', '\xBD', '\x3',
    '\xBD', '\x3', '\xBD', '\x3', '\xBD', '\x3', '\xBD', '\x3', '\xBD', '\x5',
    '\xBD', '\x10D7', '\n', '\xBD', '\x3', '\xBE', '\x3', '\xBE', '\x5', '\xBE',
    '\x10DB', '\n', '\xBE', '\x3', '\xBE', '\x3', '\xBE', '\x3', '\xBF', '\x3',
    '\xBF', '\x3', '\xBF', '\x5', '\xBF', '\x10E2', '\n', '\xBF', '\x3', '\xBF',
    '\x3', '\xBF', '\x6', '\xBF', '\x10E6', '\n', '\xBF', '\r', '\xBF', '\xE',
    '\xBF', '\x10E7', '\x3', '\xC0', '\x3', '\xC0', '\x3', '\xC0', '\x3',
    '\xC0', '\x6', '\xC0', '\x10EE', '\n', '\xC0', '\r', '\xC0', '\xE', '\xC0',
    '\x10EF', '\x3', '\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x3', '\xC1',
    '\x3', '\xC1', '\a', '\xC1', '\x10F7', '\n', '\xC1', '\f', '\xC1', '\xE',
    '\xC1', '\x10FA', '\v', '\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x3', '\xC1',
    '\x5', '\xC1', '\x10FF', '\n', '\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x3',
    '\xC1', '\a', '\xC1', '\x1104', '\n', '\xC1', '\f', '\xC1', '\xE', '\xC1',
    '\x1107', '\v', '\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x3',
    '\xC1', '\x5', '\xC1', '\x110D', '\n', '\xC1', '\x3', '\xC1', '\a', '\xC1',
    '\x1110', '\n', '\xC1', '\f', '\xC1', '\xE', '\xC1', '\x1113', '\v', '\xC1',
    '\x5', '\xC1', '\x1115', '\n', '\xC1', '\x5', '\xC1', '\x1117', '\n',
    '\xC1', '\x3', '\xC1', '\x3', '\xC1', '\x6', '\xC1', '\x111B', '\n', '\xC1',
    '\r', '\xC1', '\xE', '\xC1', '\x111C', '\x5', '\xC1', '\x111F', '\n',
    '\xC1', '\x3', '\xC1', '\x3', '\xC1', '\a', '\xC1', '\x1123', '\n', '\xC1',
    '\f', '\xC1', '\xE', '\xC1', '\x1126', '\v', '\xC1', '\x5', '\xC1', '\x1128',
    '\n', '\xC1', '\x3', '\xC2', '\x3', '\xC2', '\x3', '\xC2', '\x3', '\xC2',
    '\x3', '\xC2', '\a', '\xC2', '\x112F', '\n', '\xC2', '\f', '\xC2', '\xE',
    '\xC2', '\x1132', '\v', '\xC2', '\x3', '\xC2', '\x3', '\xC2', '\x3', '\xC2',
    '\x5', '\xC2', '\x1137', '\n', '\xC2', '\x3', '\xC2', '\x3', '\xC2', '\x3',
    '\xC2', '\a', '\xC2', '\x113C', '\n', '\xC2', '\f', '\xC2', '\xE', '\xC2',
    '\x113F', '\v', '\xC2', '\x3', '\xC2', '\x3', '\xC2', '\x3', '\xC2', '\x3',
    '\xC2', '\x5', '\xC2', '\x1145', '\n', '\xC2', '\x3', '\xC2', '\a', '\xC2',
    '\x1148', '\n', '\xC2', '\f', '\xC2', '\xE', '\xC2', '\x114B', '\v', '\xC2',
    '\x5', '\xC2', '\x114D', '\n', '\xC2', '\x5', '\xC2', '\x114F', '\n',
    '\xC2', '\x3', '\xC2', '\x3', '\xC2', '\x6', '\xC2', '\x1153', '\n', '\xC2',
    '\r', '\xC2', '\xE', '\xC2', '\x1154', '\x5', '\xC2', '\x1157', '\n',
    '\xC2', '\x3', '\xC2', '\x3', '\xC2', '\a', '\xC2', '\x115B', '\n', '\xC2',
    '\f', '\xC2', '\xE', '\xC2', '\x115E', '\v', '\xC2', '\x5', '\xC2', '\x1160',
    '\n', '\xC2', '\x3', '\xC3', '\x3', '\xC3', '\x3', '\xC3', '\x5', '\xC3',
    '\x1165', '\n', '\xC3', '\x3', '\xC3', '\x3', '\xC3', '\x3', '\xC3', '\a',
    '\xC3', '\x116A', '\n', '\xC3', '\f', '\xC3', '\xE', '\xC3', '\x116D',
    '\v', '\xC3', '\x3', '\xC4', '\x3', '\xC4', '\x3', '\xC4', '\x3', '\xC4',
    '\a', '\xC4', '\x1173', '\n', '\xC4', '\f', '\xC4', '\xE', '\xC4', '\x1176',
    '\v', '\xC4', '\x3', '\xC4', '\x3', '\xC4', '\x5', '\xC4', '\x117A', '\n',
    '\xC4', '\x3', '\xC4', '\x3', '\xC4', '\x3', '\xC4', '\x3', '\xC4', '\x3',
    '\xC4', '\a', '\xC4', '\x1181', '\n', '\xC4', '\f', '\xC4', '\xE', '\xC4',
    '\x1184', '\v', '\xC4', '\x3', '\xC4', '\x3', '\xC4', '\x3', '\xC4', '\x3',
    '\xC4', '\x5', '\xC4', '\x118A', '\n', '\xC4', '\x3', '\xC4', '\a', '\xC4',
    '\x118D', '\n', '\xC4', '\f', '\xC4', '\xE', '\xC4', '\x1190', '\v', '\xC4',
    '\x5', '\xC4', '\x1192', '\n', '\xC4', '\x5', '\xC4', '\x1194', '\n',
    '\xC4', '\x3', '\xC4', '\x3', '\xC4', '\x3', '\xC4', '\x3', '\xC4', '\a',
    '\xC4', '\x119A', '\n', '\xC4', '\f', '\xC4', '\xE', '\xC4', '\x119D',
    '\v', '\xC4', '\x5', '\xC4', '\x119F', '\n', '\xC4', '\x3', '\xC5', '\x3',
    '\xC5', '\x3', '\xC5', '\x3', '\xC5', '\x3', '\xC5', '\x3', '\xC5', '\x3',
    '\xC5', '\x3', '\xC5', '\a', '\xC5', '\x11A9', '\n', '\xC5', '\f', '\xC5',
    '\xE', '\xC5', '\x11AC', '\v', '\xC5', '\x3', '\xC5', '\x3', '\xC5', '\x3',
    '\xC5', '\x5', '\xC5', '\x11B1', '\n', '\xC5', '\x3', '\xC6', '\x3', '\xC6',
    '\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', '\a', '\xC6', '\x11B8', '\n',
    '\xC6', '\f', '\xC6', '\xE', '\xC6', '\x11BB', '\v', '\xC6', '\x3', '\xC7',
    '\x3', '\xC7', '\x3', '\xC7', '\x3', '\xC7', '\a', '\xC7', '\x11C1', '\n',
    '\xC7', '\f', '\xC7', '\xE', '\xC7', '\x11C4', '\v', '\xC7', '\x3', '\xC7',
    '\x3', '\xC7', '\x5', '\xC7', '\x11C8', '\n', '\xC7', '\x3', '\xC7', '\x3',
    '\xC7', '\x3', '\xC7', '\x3', '\xC7', '\x3', '\xC7', '\a', '\xC7', '\x11CF',
    '\n', '\xC7', '\f', '\xC7', '\xE', '\xC7', '\x11D2', '\v', '\xC7', '\x3',
    '\xC7', '\x3', '\xC7', '\x3', '\xC7', '\x5', '\xC7', '\x11D7', '\n', '\xC7',
    '\x3', '\xC7', '\x3', '\xC7', '\x3', '\xC7', '\x3', '\xC7', '\x3', '\xC7',
    '\x3', '\xC7', '\x3', '\xC7', '\a', '\xC7', '\x11E0', '\n', '\xC7', '\f',
    '\xC7', '\xE', '\xC7', '\x11E3', '\v', '\xC7', '\x5', '\xC7', '\x11E5',
    '\n', '\xC7', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8',
    '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\a', '\xC8',
    '\x11EF', '\n', '\xC8', '\f', '\xC8', '\xE', '\xC8', '\x11F2', '\v', '\xC8',
    '\x3', '\xC9', '\x3', '\xC9', '\x3', '\xC9', '\x3', '\xC9', '\x5', '\xC9',
    '\x11F8', '\n', '\xC9', '\x3', '\xC9', '\x3', '\xC9', '\x3', '\xC9', '\x5',
    '\xC9', '\x11FD', '\n', '\xC9', '\x3', '\xCA', '\x3', '\xCA', '\x3', '\xCA',
    '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB',
    '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB',
    '\x5', '\xCB', '\x120C', '\n', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3',
    '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x3',
    '\xCB', '\x3', '\xCB', '\x5', '\xCB', '\x1217', '\n', '\xCB', '\x3', '\xCB',
    '\x5', '\xCB', '\x121A', '\n', '\xCB', '\x3', '\xCC', '\x3', '\xCC', '\x3',
    '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', '\x3',
    '\xCC', '\x5', '\xCC', '\x1224', '\n', '\xCC', '\x3', '\xCD', '\x3', '\xCD',
    '\x3', '\xCD', '\x3', '\xCD', '\x3', '\xCD', '\x3', '\xCD', '\x3', '\xCD',
    '\x3', '\xCD', '\x5', '\xCD', '\x122E', '\n', '\xCD', '\x3', '\xCE', '\x3',
    '\xCE', '\x3', '\xCE', '\x3', '\xCE', '\x3', '\xCE', '\x3', '\xCE', '\x3',
    '\xCE', '\x3', '\xCE', '\x5', '\xCE', '\x1238', '\n', '\xCE', '\x3', '\xCF',
    '\x3', '\xCF', '\x3', '\xCF', '\x3', '\xD0', '\x3', '\xD0', '\x3', '\xD0',
    '\x3', '\xD0', '\x3', '\xD0', '\x5', '\xD0', '\x1242', '\n', '\xD0', '\x3',
    '\xD1', '\x3', '\xD1', '\x5', '\xD1', '\x1246', '\n', '\xD1', '\x3', '\xD1',
    '\x3', '\xD1', '\x5', '\xD1', '\x124A', '\n', '\xD1', '\x3', '\xD1', '\x3',
    '\xD1', '\x3', '\xD1', '\x3', '\xD1', '\x3', '\xD1', '\x3', '\xD1', '\x3',
    '\xD1', '\x5', '\xD1', '\x1253', '\n', '\xD1', '\x3', '\xD1', '\x3', '\xD1',
    '\x3', '\xD1', '\x3', '\xD1', '\x3', '\xD1', '\x3', '\xD1', '\x3', '\xD1',
    '\x3', '\xD1', '\x3', '\xD1', '\x3', '\xD1', '\x3', '\xD1', '\x3', '\xD1',
    '\x3', '\xD1', '\x3', '\xD1', '\x3', '\xD1', '\x3', '\xD1', '\x3', '\xD1',
    '\x3', '\xD1', '\x3', '\xD1', '\x3', '\xD1', '\x3', '\xD1', '\x3', '\xD1',
    '\x3', '\xD1', '\x3', '\xD1', '\x3', '\xD1', '\x3', '\xD1', '\x5', '\xD1',
    '\x126F', '\n', '\xD1', '\x3', '\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3',
    '\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3',
    '\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3',
    '\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x5', '\xD2', '\x1281', '\n', '\xD2',
    '\x3', '\xD3', '\x3', '\xD3', '\x3', '\xD3', '\x3', '\xD3', '\x3', '\xD4',
    '\x3', '\xD4', '\x5', '\xD4', '\x1289', '\n', '\xD4', '\x3', '\xD4', '\x3',
    '\xD4', '\x3', '\xD4', '\x3', '\xD5', '\x3', '\xD5', '\x3', '\xD5', '\x3',
    '\xD5', '\a', '\xD5', '\x1292', '\n', '\xD5', '\f', '\xD5', '\xE', '\xD5',
    '\x1295', '\v', '\xD5', '\x3', '\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3',
    '\xD6', '\x5', '\xD6', '\x129B', '\n', '\xD6', '\x3', '\xD7', '\x3', '\xD7',
    '\x5', '\xD7', '\x129F', '\n', '\xD7', '\x3', '\xD7', '\x3', '\xD7', '\x3',
    '\xD7', '\x3', '\xD8', '\x3', '\xD8', '\x5', '\xD8', '\x12A6', '\n', '\xD8',
    '\x3', '\xD8', '\x3', '\xD8', '\x3', '\xD8', '\x5', '\xD8', '\x12AB',
    '\n', '\xD8', '\x3', '\xD8', '\x5', '\xD8', '\x12AE', '\n', '\xD8', '\x3',
    '\xD8', '\x5', '\xD8', '\x12B1', '\n', '\xD8', '\x3', '\xD9', '\x3', '\xD9',
    '\x3', '\xD9', '\x3', '\xD9', '\x3', '\xD9', '\x3', '\xD9', '\x3', '\xD9',
    '\x5', '\xD9', '\x12BA', '\n', '\xD9', '\x3', '\xDA', '\x3', '\xDA', '\x5',
    '\xDA', '\x12BE', '\n', '\xDA', '\x3', '\xDA', '\x3', '\xDA', '\x3', '\xDA',
    '\x3', '\xDA', '\x3', '\xDA', '\x3', '\xDA', '\x3', '\xDA', '\x3', '\xDB',
    '\x3', '\xDB', '\x3', '\xDB', '\x3', '\xDB', '\x3', '\xDB', '\x3', '\xDB',
    '\x3', '\xDC', '\x3', '\xDC', '\x3', '\xDC', '\x3', '\xDC', '\x3', '\xDD',
    '\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD',
    '\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\a', '\xDD', '\x12DA', '\n',
    '\xDD', '\f', '\xDD', '\xE', '\xDD', '\x12DD', '\v', '\xDD', '\x3', '\xDD',
    '\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x5', '\xDD', '\x12E3',
    '\n', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x5', '\xDD', '\x12E7', '\n',
    '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x3',
    '\xDD', '\x5', '\xDD', '\x12EE', '\n', '\xDD', '\x3', '\xDD', '\x5', '\xDD',
    '\x12F1', '\n', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x3',
    '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x3', '\xDD', '\x5',
    '\xDD', '\x12FB', '\n', '\xDD', '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE',
    '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE',
    '\x5', '\xDE', '\x1305', '\n', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x5',
    '\xDE', '\x1309', '\n', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE',
    '\x3', '\xDE', '\x5', '\xDE', '\x130F', '\n', '\xDE', '\x3', '\xDE', '\x5',
    '\xDE', '\x1312', '\n', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE',
    '\x5', '\xDE', '\x1317', '\n', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x5',
    '\xDE', '\x131B', '\n', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE',
    '\x3', '\xDE', '\x3', '\xDE', '\x5', '\xDE', '\x1322', '\n', '\xDE', '\x3',
    '\xDE', '\x5', '\xDE', '\x1325', '\n', '\xDE', '\x3', '\xDE', '\x3', '\xDE',
    '\x3', '\xDE', '\x3', '\xDE', '\x5', '\xDE', '\x132B', '\n', '\xDE', '\x3',
    '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3',
    '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3',
    '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3',
    '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3',
    '\xDE', '\x3', '\xDE', '\x5', '\xDE', '\x1343', '\n', '\xDE', '\x3', '\xDE',
    '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE',
    '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE',
    '\x5', '\xDE', '\x1350', '\n', '\xDE', '\x3', '\xDE', '\x5', '\xDE', '\x1353',
    '\n', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE',
    '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x5', '\xDE',
    '\x135D', '\n', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3',
    '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x5', '\xDE', '\x1365', '\n', '\xDE',
    '\x3', '\xDE', '\x3', '\xDE', '\x5', '\xDE', '\x1369', '\n', '\xDE', '\x3',
    '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x5',
    '\xDE', '\x1370', '\n', '\xDE', '\x3', '\xDE', '\x5', '\xDE', '\x1373',
    '\n', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE',
    '\x3', '\xDE', '\a', '\xDE', '\x137A', '\n', '\xDE', '\f', '\xDE', '\xE',
    '\xDE', '\x137D', '\v', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE',
    '\x5', '\xDE', '\x1382', '\n', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3',
    '\xDE', '\x3', '\xDE', '\x5', '\xDE', '\x1388', '\n', '\xDE', '\x3', '\xDE',
    '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE', '\x3', '\xDE',
    '\x3', '\xDE', '\x3', '\xDE', '\x5', '\xDE', '\x1392', '\n', '\xDE', '\x5',
    '\xDE', '\x1394', '\n', '\xDE', '\x3', '\xDF', '\x3', '\xDF', '\x3', '\xDF',
    '\x3', '\xDF', '\x5', '\xDF', '\x139A', '\n', '\xDF', '\x3', '\xDF', '\x5',
    '\xDF', '\x139D', '\n', '\xDF', '\x3', '\xDF', '\x5', '\xDF', '\x13A0',
    '\n', '\xDF', '\x3', '\xE0', '\x3', '\xE0', '\x3', '\xE0', '\x3', '\xE0',
    '\x3', '\xE0', '\x3', '\xE0', '\x3', '\xE0', '\x3', '\xE0', '\x3', '\xE0',
    '\x3', '\xE0', '\x5', '\xE0', '\x13AC', '\n', '\xE0', '\x3', '\xE0', '\x5',
    '\xE0', '\x13AF', '\n', '\xE0', '\x3', '\xE1', '\x3', '\xE1', '\x3', '\xE1',
    '\x3', '\xE1', '\x5', '\xE1', '\x13B5', '\n', '\xE1', '\x3', '\xE2', '\x5',
    '\xE2', '\x13B8', '\n', '\xE2', '\x3', '\xE2', '\x3', '\xE2', '\x3', '\xE2',
    '\x3', '\xE2', '\x3', '\xE2', '\x3', '\xE2', '\x5', '\xE2', '\x13C0',
    '\n', '\xE2', '\x3', '\xE2', '\x3', '\xE2', '\x3', '\xE2', '\x3', '\xE2',
    '\x3', '\xE2', '\x3', '\xE2', '\x5', '\xE2', '\x13C8', '\n', '\xE2', '\x3',
    '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x5', '\xE3', '\x13CE',
    '\n', '\xE3', '\x3', '\xE3', '\x3', '\xE3', '\x5', '\xE3', '\x13D2', '\n',
    '\xE3', '\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3',
    '\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x3',
    '\xE4', '\x3', '\xE4', '\x3', '\xE4', '\x5', '\xE4', '\x13E0', '\n', '\xE4',
    '\x3', '\xE5', '\x3', '\xE5', '\x3', '\xE5', '\x3', '\xE6', '\x3', '\xE6',
    '\x3', '\xE6', '\x3', '\xE6', '\x3', '\xE6', '\a', '\xE6', '\x13EA', '\n',
    '\xE6', '\f', '\xE6', '\xE', '\xE6', '\x13ED', '\v', '\xE6', '\x3', '\xE6',
    '\x3', '\xE6', '\x3', '\xE6', '\x3', '\xE6', '\x5', '\xE6', '\x13F3',
    '\n', '\xE6', '\x3', '\xE6', '\x5', '\xE6', '\x13F6', '\n', '\xE6', '\x3',
    '\xE6', '\x3', '\xE6', '\x3', '\xE6', '\x3', '\xE7', '\x3', '\xE7', '\x5',
    '\xE7', '\x13FD', '\n', '\xE7', '\x3', '\xE7', '\x3', '\xE7', '\x3', '\xE7',
    '\a', '\xE7', '\x1402', '\n', '\xE7', '\f', '\xE7', '\xE', '\xE7', '\x1405',
    '\v', '\xE7', '\x3', '\xE8', '\x3', '\xE8', '\x5', '\xE8', '\x1409', '\n',
    '\xE8', '\x3', '\xE8', '\x6', '\xE8', '\x140C', '\n', '\xE8', '\r', '\xE8',
    '\xE', '\xE8', '\x140D', '\x3', '\xE9', '\x3', '\xE9', '\x3', '\xE9',
    '\x3', '\xE9', '\x3', '\xE9', '\x3', '\xE9', '\x3', '\xE9', '\a', '\xE9',
    '\x1417', '\n', '\xE9', '\f', '\xE9', '\xE', '\xE9', '\x141A', '\v', '\xE9',
    '\x3', '\xEA', '\x3', '\xEA', '\x3', '\xEA', '\x3', '\xEA', '\x3', '\xEB',
    '\x3', '\xEB', '\x3', '\xEC', '\x3', '\xEC', '\x5', '\xEC', '\x1424',
    '\n', '\xEC', '\x3', '\xEC', '\x3', '\xEC', '\x3', '\xEC', '\x3', '\xEC',
    '\x5', '\xEC', '\x142A', '\n', '\xEC', '\x3', '\xED', '\x3', '\xED', '\x3',
    '\xED', '\x5', '\xED', '\x142F', '\n', '\xED', '\x3', '\xED', '\x3', '\xED',
    '\x3', '\xED', '\x3', '\xED', '\x3', '\xED', '\x3', '\xED', '\x3', '\xED',
    '\x3', '\xED', '\x3', '\xED', '\x3', '\xED', '\x3', '\xED', '\x5', '\xED',
    '\x143C', '\n', '\xED', '\x5', '\xED', '\x143E', '\n', '\xED', '\x3',
    '\xED', '\x3', '\xED', '\x3', '\xED', '\x5', '\xED', '\x1443', '\n', '\xED',
    '\x3', '\xED', '\x3', '\xED', '\x3', '\xED', '\x5', '\xED', '\x1448',
    '\n', '\xED', '\x5', '\xED', '\x144A', '\n', '\xED', '\x3', '\xEE', '\x3',
    '\xEE', '\x3', '\xEE', '\x3', '\xEE', '\x3', '\xEE', '\x5', '\xEE', '\x1451',
    '\n', '\xEE', '\x3', '\xEF', '\x3', '\xEF', '\x3', '\xEF', '\x3', '\xEF',
    '\x3', '\xEF', '\x5', '\xEF', '\x1458', '\n', '\xEF', '\x3', '\xEF', '\x5',
    '\xEF', '\x145B', '\n', '\xEF', '\x3', '\xEF', '\x5', '\xEF', '\x145E',
    '\n', '\xEF', '\x3', '\xEF', '\x3', '\xEF', '\x3', '\xEF', '\x3', '\xEF',
    '\x5', '\xEF', '\x1464', '\n', '\xEF', '\x3', '\xEF', '\x3', '\xEF', '\x5',
    '\xEF', '\x1468', '\n', '\xEF', '\x3', '\xF0', '\x3', '\xF0', '\x3', '\xF0',
    '\x3', '\xF0', '\x5', '\xF0', '\x146E', '\n', '\xF0', '\x3', '\xF1', '\x3',
    '\xF1', '\x3', '\xF1', '\x3', '\xF1', '\x5', '\xF1', '\x1474', '\n', '\xF1',
    '\x3', '\xF1', '\x3', '\xF1', '\x3', '\xF2', '\x3', '\xF2', '\x3', '\xF2',
    '\x3', '\xF3', '\x3', '\xF3', '\x3', '\xF3', '\x3', '\xF4', '\x3', '\xF4',
    '\x3', '\xF4', '\x5', '\xF4', '\x1481', '\n', '\xF4', '\x3', '\xF4', '\x3',
    '\xF4', '\x3', '\xF4', '\x5', '\xF4', '\x1486', '\n', '\xF4', '\x3', '\xF4',
    '\x3', '\xF4', '\x3', '\xF4', '\x3', '\xF4', '\a', '\xF4', '\x148C', '\n',
    '\xF4', '\f', '\xF4', '\xE', '\xF4', '\x148F', '\v', '\xF4', '\x5', '\xF4',
    '\x1491', '\n', '\xF4', '\x3', '\xF5', '\x3', '\xF5', '\x3', '\xF5', '\x5',
    '\xF5', '\x1496', '\n', '\xF5', '\x3', '\xF5', '\x3', '\xF5', '\x3', '\xF5',
    '\x5', '\xF5', '\x149B', '\n', '\xF5', '\x3', '\xF5', '\x3', '\xF5', '\x3',
    '\xF5', '\x3', '\xF5', '\a', '\xF5', '\x14A1', '\n', '\xF5', '\f', '\xF5',
    '\xE', '\xF5', '\x14A4', '\v', '\xF5', '\x5', '\xF5', '\x14A6', '\n',
    '\xF5', '\x3', '\xF6', '\x3', '\xF6', '\x3', '\xF6', '\x3', '\xF6', '\x5',
    '\xF6', '\x14AC', '\n', '\xF6', '\x3', '\xF7', '\x3', '\xF7', '\x5', '\xF7',
    '\x14B0', '\n', '\xF7', '\x3', '\xF7', '\x3', '\xF7', '\x3', '\xF7', '\x3',
    '\xF7', '\x3', '\xF7', '\x3', '\xF7', '\x3', '\xF7', '\x3', '\xF7', '\x3',
    '\xF7', '\a', '\xF7', '\x14BB', '\n', '\xF7', '\f', '\xF7', '\xE', '\xF7',
    '\x14BE', '\v', '\xF7', '\x3', '\xF7', '\x3', '\xF7', '\x3', '\xF7', '\x5',
    '\xF7', '\x14C3', '\n', '\xF7', '\x3', '\xF7', '\x3', '\xF7', '\x3', '\xF7',
    '\x3', '\xF7', '\x3', '\xF7', '\x3', '\xF7', '\x3', '\xF7', '\x3', '\xF7',
    '\a', '\xF7', '\x14CD', '\n', '\xF7', '\f', '\xF7', '\xE', '\xF7', '\x14D0',
    '\v', '\xF7', '\x5', '\xF7', '\x14D2', '\n', '\xF7', '\x3', '\xF8', '\x3',
    '\xF8', '\x3', '\xF9', '\x3', '\xF9', '\x3', '\xF9', '\x3', '\xF9', '\x3',
    '\xF9', '\x5', '\xF9', '\x14DB', '\n', '\xF9', '\x3', '\xF9', '\x3', '\xF9',
    '\x3', '\xF9', '\x5', '\xF9', '\x14E0', '\n', '\xF9', '\x3', '\xFA', '\x3',
    '\xFA', '\x3', '\xFA', '\x3', '\xFA', '\x5', '\xFA', '\x14E6', '\n', '\xFA',
    '\x3', '\xFB', '\x3', '\xFB', '\x3', '\xFC', '\x3', '\xFC', '\x3', '\xFC',
    '\x5', '\xFC', '\x14ED', '\n', '\xFC', '\x5', '\xFC', '\x14EF', '\n',
    '\xFC', '\x3', '\xFD', '\x3', '\xFD', '\x5', '\xFD', '\x14F3', '\n', '\xFD',
    '\x3', '\xFD', '\x3', '\xFD', '\x3', '\xFD', '\x3', '\xFD', '\x5', '\xFD',
    '\x14F9', '\n', '\xFD', '\x3', '\xFD', '\x5', '\xFD', '\x14FC', '\n',
    '\xFD', '\x3', '\xFE', '\x3', '\xFE', '\x3', '\xFF', '\x3', '\xFF', '\x3',
    '\x100', '\x3', '\x100', '\x3', '\x100', '\x3', '\x100', '\x5', '\x100',
    '\x1506', '\n', '\x100', '\x3', '\x101', '\x3', '\x101', '\x5', '\x101',
    '\x150A', '\n', '\x101', '\x3', '\x102', '\x3', '\x102', '\x3', '\x103',
    '\x3', '\x103', '\x3', '\x103', '\x3', '\x103', '\x3', '\x103', '\x3',
    '\x103', '\x3', '\x103', '\x3', '\x103', '\x3', '\x103', '\x3', '\x103',
    '\x3', '\x103', '\x3', '\x103', '\x3', '\x103', '\x3', '\x103', '\x6',
    '\x103', '\x151C', '\n', '\x103', '\r', '\x103', '\xE', '\x103', '\x151D',
    '\x3', '\x104', '\x3', '\x104', '\x3', '\x104', '\x3', '\x104', '\x3',
    '\x104', '\x5', '\x104', '\x1525', '\n', '\x104', '\x5', '\x104', '\x1527',
    '\n', '\x104', '\x3', '\x105', '\x3', '\x105', '\x3', '\x105', '\x6',
    '\x105', '\x152C', '\n', '\x105', '\r', '\x105', '\xE', '\x105', '\x152D',
    '\x5', '\x105', '\x1530', '\n', '\x105', '\x3', '\x106', '\x3', '\x106',
    '\x5', '\x106', '\x1534', '\n', '\x106', '\x3', '\x107', '\x3', '\x107',
    '\x3', '\x107', '\x5', '\x107', '\x1539', '\n', '\x107', '\x3', '\x108',
    '\x3', '\x108', '\x3', '\x108', '\x3', '\x108', '\x3', '\x108', '\x3',
    '\x108', '\x3', '\x108', '\x3', '\x108', '\x3', '\x108', '\x5', '\x108',
    '\x1544', '\n', '\x108', '\x3', '\x109', '\x3', '\x109', '\x3', '\x109',
    '\x5', '\x109', '\x1549', '\n', '\x109', '\x3', '\x10A', '\x3', '\x10A',
    '\x3', '\x10B', '\x3', '\x10B', '\x5', '\x10B', '\x154F', '\n', '\x10B',
    '\x3', '\x10C', '\x5', '\x10C', '\x1552', '\n', '\x10C', '\x3', '\x10C',
    '\x3', '\x10C', '\x5', '\x10C', '\x1556', '\n', '\x10C', '\x3', '\x10C',
    '\x6', '\x10C', '\x1559', '\n', '\x10C', '\r', '\x10C', '\xE', '\x10C',
    '\x155A', '\x3', '\x10C', '\x5', '\x10C', '\x155E', '\n', '\x10C', '\x3',
    '\x10C', '\x3', '\x10C', '\x5', '\x10C', '\x1562', '\n', '\x10C', '\x3',
    '\x10C', '\x3', '\x10C', '\x5', '\x10C', '\x1566', '\n', '\x10C', '\x5',
    '\x10C', '\x1568', '\n', '\x10C', '\x3', '\x10D', '\x3', '\x10D', '\x3',
    '\x10E', '\x5', '\x10E', '\x156D', '\n', '\x10E', '\x3', '\x10E', '\x3',
    '\x10E', '\x3', '\x10F', '\x5', '\x10F', '\x1572', '\n', '\x10F', '\x3',
    '\x10F', '\x3', '\x10F', '\x3', '\x110', '\x3', '\x110', '\x3', '\x110',
    '\x3', '\x110', '\x3', '\x110', '\x3', '\x110', '\x3', '\x110', '\x3',
    '\x110', '\x3', '\x110', '\x5', '\x110', '\x157F', '\n', '\x110', '\x3',
    '\x110', '\x5', '\x110', '\x1582', '\n', '\x110', '\x3', '\x111', '\x3',
    '\x111', '\x5', '\x111', '\x1586', '\n', '\x111', '\x3', '\x111', '\x5',
    '\x111', '\x1589', '\n', '\x111', '\x3', '\x111', '\x3', '\x111', '\x3',
    '\x111', '\x5', '\x111', '\x158E', '\n', '\x111', '\x3', '\x111', '\x5',
    '\x111', '\x1591', '\n', '\x111', '\x3', '\x111', '\x3', '\x111', '\x5',
    '\x111', '\x1595', '\n', '\x111', '\x3', '\x111', '\x3', '\x111', '\x3',
    '\x111', '\x5', '\x111', '\x159A', '\n', '\x111', '\x3', '\x111', '\x5',
    '\x111', '\x159D', '\n', '\x111', '\x3', '\x111', '\x3', '\x111', '\x3',
    '\x111', '\x5', '\x111', '\x15A2', '\n', '\x111', '\x3', '\x111', '\x5',
    '\x111', '\x15A5', '\n', '\x111', '\x3', '\x111', '\x3', '\x111', '\x3',
    '\x111', '\x3', '\x111', '\x5', '\x111', '\x15AB', '\n', '\x111', '\x3',
    '\x111', '\x5', '\x111', '\x15AE', '\n', '\x111', '\x3', '\x111', '\x3',
    '\x111', '\x5', '\x111', '\x15B2', '\n', '\x111', '\x3', '\x111', '\x5',
    '\x111', '\x15B5', '\n', '\x111', '\x3', '\x111', '\x5', '\x111', '\x15B8',
    '\n', '\x111', '\x3', '\x111', '\x3', '\x111', '\x5', '\x111', '\x15BC',
    '\n', '\x111', '\x3', '\x111', '\x5', '\x111', '\x15BF', '\n', '\x111',
    '\x3', '\x111', '\x5', '\x111', '\x15C2', '\n', '\x111', '\x3', '\x111',
    '\x3', '\x111', '\x5', '\x111', '\x15C6', '\n', '\x111', '\x3', '\x111',
    '\x5', '\x111', '\x15C9', '\n', '\x111', '\x3', '\x111', '\x5', '\x111',
    '\x15CC', '\n', '\x111', '\x3', '\x111', '\x5', '\x111', '\x15CF', '\n',
    '\x111', '\x3', '\x111', '\x3', '\x111', '\x5', '\x111', '\x15D3', '\n',
    '\x111', '\x3', '\x111', '\x5', '\x111', '\x15D6', '\n', '\x111', '\x3',
    '\x111', '\x5', '\x111', '\x15D9', '\n', '\x111', '\x3', '\x111', '\x3',
    '\x111', '\x3', '\x111', '\x5', '\x111', '\x15DE', '\n', '\x111', '\x3',
    '\x111', '\x3', '\x111', '\x3', '\x111', '\x5', '\x111', '\x15E3', '\n',
    '\x111', '\x3', '\x111', '\x3', '\x111', '\x3', '\x111', '\x5', '\x111',
    '\x15E8', '\n', '\x111', '\x3', '\x111', '\x5', '\x111', '\x15EB', '\n',
    '\x111', '\x3', '\x111', '\x5', '\x111', '\x15EE', '\n', '\x111', '\x3',
    '\x112', '\x3', '\x112', '\x3', '\x112', '\x3', '\x112', '\a', '\x112',
    '\x15F4', '\n', '\x112', '\f', '\x112', '\xE', '\x112', '\x15F7', '\v',
    '\x112', '\x3', '\x112', '\x3', '\x112', '\x3', '\x113', '\x3', '\x113',
    '\x5', '\x113', '\x15FD', '\n', '\x113', '\x3', '\x113', '\x3', '\x113',
    '\x5', '\x113', '\x1601', '\n', '\x113', '\x3', '\x113', '\x3', '\x113',
    '\x3', '\x113', '\x5', '\x113', '\x1606', '\n', '\x113', '\x3', '\x113',
    '\x5', '\x113', '\x1609', '\n', '\x113', '\x3', '\x113', '\x3', '\x113',
    '\x3', '\x113', '\x5', '\x113', '\x160E', '\n', '\x113', '\x3', '\x113',
    '\x3', '\x113', '\x5', '\x113', '\x1612', '\n', '\x113', '\x5', '\x113',
    '\x1614', '\n', '\x113', '\x3', '\x114', '\x3', '\x114', '\x3', '\x114',
    '\x3', '\x114', '\x3', '\x115', '\x3', '\x115', '\x3', '\x115', '\x3',
    '\x115', '\x3', '\x115', '\x3', '\x115', '\x3', '\x116', '\x3', '\x116',
    '\x3', '\x116', '\x3', '\x116', '\x5', '\x116', '\x1624', '\n', '\x116',
    '\x3', '\x116', '\x3', '\x116', '\x3', '\x117', '\x3', '\x117', '\x3',
    '\x117', '\a', '\x117', '\x162B', '\n', '\x117', '\f', '\x117', '\xE',
    '\x117', '\x162E', '\v', '\x117', '\x3', '\x118', '\x3', '\x118', '\x3',
    '\x118', '\a', '\x118', '\x1633', '\n', '\x118', '\f', '\x118', '\xE',
    '\x118', '\x1636', '\v', '\x118', '\x3', '\x119', '\x3', '\x119', '\x3',
    '\x119', '\x3', '\x119', '\a', '\x119', '\x163C', '\n', '\x119', '\f',
    '\x119', '\xE', '\x119', '\x163F', '\v', '\x119', '\x3', '\x119', '\x3',
    '\x119', '\x3', '\x11A', '\x3', '\x11A', '\x3', '\x11A', '\a', '\x11A',
    '\x1646', '\n', '\x11A', '\f', '\x11A', '\xE', '\x11A', '\x1649', '\v',
    '\x11A', '\x3', '\x11B', '\x3', '\x11B', '\x3', '\x11B', '\a', '\x11B',
    '\x164E', '\n', '\x11B', '\f', '\x11B', '\xE', '\x11B', '\x1651', '\v',
    '\x11B', '\x3', '\x11C', '\x3', '\x11C', '\x3', '\x11C', '\a', '\x11C',
    '\x1656', '\n', '\x11C', '\f', '\x11C', '\xE', '\x11C', '\x1659', '\v',
    '\x11C', '\x3', '\x11D', '\x3', '\x11D', '\x3', '\x11D', '\a', '\x11D',
    '\x165E', '\n', '\x11D', '\f', '\x11D', '\xE', '\x11D', '\x1661', '\v',
    '\x11D', '\x3', '\x11E', '\x3', '\x11E', '\x3', '\x11E', '\a', '\x11E',
    '\x1666', '\n', '\x11E', '\f', '\x11E', '\xE', '\x11E', '\x1669', '\v',
    '\x11E', '\x3', '\x11F', '\x3', '\x11F', '\x5', '\x11F', '\x166D', '\n',
    '\x11F', '\x3', '\x11F', '\x3', '\x11F', '\x3', '\x11F', '\x3', '\x11F',
    '\x3', '\x11F', '\x5', '\x11F', '\x1674', '\n', '\x11F', '\x5', '\x11F',
    '\x1676', '\n', '\x11F', '\x3', '\x120', '\x3', '\x120', '\x3', '\x120',
    '\x5', '\x120', '\x167B', '\n', '\x120', '\x3', '\x120', '\x5', '\x120',
    '\x167E', '\n', '\x120', '\x3', '\x120', '\x3', '\x120', '\x3', '\x120',
    '\x5', '\x120', '\x1683', '\n', '\x120', '\x3', '\x120', '\x5', '\x120',
    '\x1686', '\n', '\x120', '\x3', '\x121', '\x3', '\x121', '\x5', '\x121',
    '\x168A', '\n', '\x121', '\x3', '\x122', '\x3', '\x122', '\x3', '\x122',
    '\x3', '\x123', '\x3', '\x123', '\x3', '\x123', '\x3', '\x123', '\x3',
    '\x124', '\x3', '\x124', '\x3', '\x124', '\x3', '\x124', '\x3', '\x124',
    '\x5', '\x124', '\x1698', '\n', '\x124', '\x3', '\x124', '\x3', '\x124',
    '\x3', '\x124', '\x3', '\x124', '\x3', '\x124', '\x5', '\x124', '\x169F',
    '\n', '\x124', '\x3', '\x124', '\x3', '\x124', '\x3', '\x124', '\x5',
    '\x124', '\x16A4', '\n', '\x124', '\x3', '\x125', '\x3', '\x125', '\x3',
    '\x125', '\x3', '\x125', '\x3', '\x125', '\x3', '\x125', '\x3', '\x125',
    '\x3', '\x125', '\x3', '\x125', '\x3', '\x125', '\x3', '\x125', '\x3',
    '\x125', '\x3', '\x125', '\x3', '\x125', '\x3', '\x125', '\x3', '\x125',
    '\x3', '\x125', '\x3', '\x125', '\x3', '\x125', '\x3', '\x125', '\x3',
    '\x125', '\x3', '\x125', '\x3', '\x125', '\x3', '\x125', '\x3', '\x125',
    '\x3', '\x125', '\x3', '\x125', '\x3', '\x125', '\x3', '\x125', '\x3',
    '\x125', '\x6', '\x125', '\x16C4', '\n', '\x125', '\r', '\x125', '\xE',
    '\x125', '\x16C5', '\x3', '\x125', '\x3', '\x125', '\x5', '\x125', '\x16CA',
    '\n', '\x125', '\x3', '\x125', '\x3', '\x125', '\x3', '\x125', '\x3',
    '\x125', '\x6', '\x125', '\x16D0', '\n', '\x125', '\r', '\x125', '\xE',
    '\x125', '\x16D1', '\x3', '\x125', '\x3', '\x125', '\x5', '\x125', '\x16D6',
    '\n', '\x125', '\x3', '\x125', '\x3', '\x125', '\x3', '\x125', '\x3',
    '\x125', '\x3', '\x125', '\x3', '\x125', '\x3', '\x125', '\x5', '\x125',
    '\x16DF', '\n', '\x125', '\x3', '\x125', '\x3', '\x125', '\x3', '\x125',
    '\x3', '\x125', '\x3', '\x125', '\x3', '\x125', '\x5', '\x125', '\x16E7',
    '\n', '\x125', '\x3', '\x125', '\x3', '\x125', '\x3', '\x125', '\x5',
    '\x125', '\x16EC', '\n', '\x125', '\x3', '\x125', '\x3', '\x125', '\x3',
    '\x125', '\x3', '\x125', '\x3', '\x125', '\x3', '\x125', '\x5', '\x125',
    '\x16F4', '\n', '\x125', '\x3', '\x125', '\x3', '\x125', '\x3', '\x125',
    '\x5', '\x125', '\x16F9', '\n', '\x125', '\x3', '\x125', '\x3', '\x125',
    '\x3', '\x125', '\x5', '\x125', '\x16FE', '\n', '\x125', '\x5', '\x125',
    '\x1700', '\n', '\x125', '\x3', '\x125', '\x3', '\x125', '\x3', '\x125',
    '\x3', '\x125', '\x3', '\x125', '\x3', '\x125', '\x3', '\x125', '\x5',
    '\x125', '\x1709', '\n', '\x125', '\x3', '\x125', '\x3', '\x125', '\x3',
    '\x125', '\x5', '\x125', '\x170E', '\n', '\x125', '\x3', '\x125', '\x3',
    '\x125', '\x3', '\x125', '\x3', '\x125', '\x3', '\x125', '\x3', '\x125',
    '\x5', '\x125', '\x1716', '\n', '\x125', '\x3', '\x125', '\x3', '\x125',
    '\x3', '\x125', '\x5', '\x125', '\x171B', '\n', '\x125', '\x3', '\x125',
    '\x3', '\x125', '\x3', '\x125', '\x3', '\x125', '\x3', '\x125', '\x3',
    '\x125', '\x5', '\x125', '\x1723', '\n', '\x125', '\x3', '\x125', '\x3',
    '\x125', '\x3', '\x125', '\x3', '\x125', '\x3', '\x125', '\x3', '\x125',
    '\x5', '\x125', '\x172B', '\n', '\x125', '\x3', '\x125', '\x5', '\x125',
    '\x172E', '\n', '\x125', '\x3', '\x125', '\x3', '\x125', '\x3', '\x125',
    '\x3', '\x125', '\x3', '\x125', '\x3', '\x125', '\x3', '\x125', '\x3',
    '\x125', '\x5', '\x125', '\x1738', '\n', '\x125', '\x3', '\x125', '\x3',
    '\x125', '\x3', '\x125', '\x3', '\x125', '\x3', '\x125', '\x3', '\x125',
    '\x3', '\x125', '\x3', '\x125', '\x3', '\x125', '\x5', '\x125', '\x1743',
    '\n', '\x125', '\x3', '\x126', '\x3', '\x126', '\x3', '\x126', '\x3',
    '\x126', '\x3', '\x126', '\x3', '\x127', '\x3', '\x127', '\x3', '\x127',
    '\x3', '\x127', '\a', '\x127', '\x174E', '\n', '\x127', '\f', '\x127',
    '\xE', '\x127', '\x1751', '\v', '\x127', '\x3', '\x127', '\x3', '\x127',
    '\x3', '\x127', '\x3', '\x127', '\x3', '\x127', '\x5', '\x127', '\x1758',
    '\n', '\x127', '\x3', '\x128', '\x3', '\x128', '\x5', '\x128', '\x175C',
    '\n', '\x128', '\x3', '\x129', '\x3', '\x129', '\x3', '\x129', '\x5',
    '\x129', '\x1761', '\n', '\x129', '\x3', '\x129', '\x3', '\x129', '\x3',
    '\x129', '\x3', '\x129', '\x3', '\x129', '\x3', '\x129', '\x3', '\x129',
    '\x5', '\x129', '\x176A', '\n', '\x129', '\x3', '\x129', '\x5', '\x129',
    '\x176D', '\n', '\x129', '\x3', '\x129', '\x3', '\x129', '\x3', '\x129',
    '\x3', '\x129', '\x3', '\x129', '\x3', '\x129', '\x3', '\x129', '\x3',
    '\x129', '\x3', '\x129', '\x3', '\x129', '\x5', '\x129', '\x1779', '\n',
    '\x129', '\x3', '\x129', '\x3', '\x129', '\x3', '\x129', '\x3', '\x129',
    '\x3', '\x129', '\x3', '\x129', '\x5', '\x129', '\x1781', '\n', '\x129',
    '\x3', '\x129', '\x3', '\x129', '\x3', '\x129', '\x3', '\x129', '\x3',
    '\x129', '\x3', '\x129', '\a', '\x129', '\x1789', '\n', '\x129', '\f',
    '\x129', '\xE', '\x129', '\x178C', '\v', '\x129', '\x5', '\x129', '\x178E',
    '\n', '\x129', '\x3', '\x129', '\x3', '\x129', '\x5', '\x129', '\x1792',
    '\n', '\x129', '\x3', '\x129', '\x3', '\x129', '\x5', '\x129', '\x1796',
    '\n', '\x129', '\x3', '\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x3',
    '\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x3', '\x12A',
    '\x3', '\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x3',
    '\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x3', '\x12A',
    '\x3', '\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x3', '\x12A', '\x3',
    '\x12A', '\x3', '\x12A', '\x5', '\x12A', '\x17AF', '\n', '\x12A', '\x3',
    '\x12B', '\x3', '\x12B', '\x3', '\x12B', '\x3', '\x12B', '\x3', '\x12B',
    '\x3', '\x12C', '\x3', '\x12C', '\x3', '\x12C', '\x3', '\x12C', '\x5',
    '\x12C', '\x17BA', '\n', '\x12C', '\x3', '\x12C', '\x3', '\x12C', '\x3',
    '\x12C', '\x3', '\x12C', '\x3', '\x12C', '\x5', '\x12C', '\x17C1', '\n',
    '\x12C', '\a', '\x12C', '\x17C3', '\n', '\x12C', '\f', '\x12C', '\xE',
    '\x12C', '\x17C6', '\v', '\x12C', '\x3', '\x12D', '\x3', '\x12D', '\x3',
    '\x12D', '\x3', '\x12D', '\x5', '\x12D', '\x17CC', '\n', '\x12D', '\x3',
    '\x12E', '\x3', '\x12E', '\x3', '\x12E', '\x3', '\x12E', '\x3', '\x12E',
    '\x3', '\x12E', '\x5', '\x12E', '\x17D4', '\n', '\x12E', '\x3', '\x12E',
    '\x3', '\x12E', '\x3', '\x12E', '\x5', '\x12E', '\x17D9', '\n', '\x12E',
    '\x3', '\x12E', '\x3', '\x12E', '\x3', '\x12E', '\x3', '\x12E', '\a',
    '\x12E', '\x17DF', '\n', '\x12E', '\f', '\x12E', '\xE', '\x12E', '\x17E2',
    '\v', '\x12E', '\x3', '\x12F', '\x3', '\x12F', '\x3', '\x12F', '\x5',
    '\x12F', '\x17E7', '\n', '\x12F', '\x3', '\x12F', '\x3', '\x12F', '\x3',
    '\x12F', '\x3', '\x12F', '\x3', '\x12F', '\x3', '\x12F', '\x3', '\x12F',
    '\x3', '\x12F', '\x5', '\x12F', '\x17F1', '\n', '\x12F', '\x3', '\x12F',
    '\x3', '\x12F', '\x3', '\x12F', '\x3', '\x12F', '\x3', '\x12F', '\x3',
    '\x12F', '\x3', '\x12F', '\x3', '\x12F', '\x3', '\x12F', '\x3', '\x12F',
    '\x3', '\x12F', '\x5', '\x12F', '\x17FE', '\n', '\x12F', '\x3', '\x12F',
    '\x3', '\x12F', '\x3', '\x12F', '\x3', '\x12F', '\x5', '\x12F', '\x1804',
    '\n', '\x12F', '\x3', '\x12F', '\x3', '\x12F', '\x3', '\x12F', '\x3',
    '\x12F', '\x5', '\x12F', '\x180A', '\n', '\x12F', '\x3', '\x12F', '\x3',
    '\x12F', '\x3', '\x12F', '\x3', '\x12F', '\x3', '\x12F', '\x3', '\x12F',
    '\x3', '\x12F', '\x3', '\x12F', '\x3', '\x12F', '\x3', '\x12F', '\x3',
    '\x12F', '\x3', '\x12F', '\x3', '\x12F', '\x3', '\x12F', '\x5', '\x12F',
    '\x181A', '\n', '\x12F', '\x3', '\x12F', '\x3', '\x12F', '\x3', '\x12F',
    '\x3', '\x12F', '\x5', '\x12F', '\x1820', '\n', '\x12F', '\a', '\x12F',
    '\x1822', '\n', '\x12F', '\f', '\x12F', '\xE', '\x12F', '\x1825', '\v',
    '\x12F', '\x3', '\x130', '\x3', '\x130', '\x3', '\x130', '\x3', '\x130',
    '\x3', '\x130', '\x3', '\x130', '\x3', '\x130', '\x3', '\x130', '\x3',
    '\x130', '\x3', '\x130', '\x3', '\x130', '\x3', '\x130', '\x3', '\x130',
    '\x3', '\x130', '\a', '\x130', '\x1835', '\n', '\x130', '\f', '\x130',
    '\xE', '\x130', '\x1838', '\v', '\x130', '\x3', '\x130', '\x3', '\x130',
    '\x3', '\x130', '\x3', '\x130', '\x3', '\x130', '\x3', '\x130', '\x3',
    '\x130', '\x6', '\x130', '\x1841', '\n', '\x130', '\r', '\x130', '\xE',
    '\x130', '\x1842', '\x3', '\x130', '\x3', '\x130', '\x3', '\x130', '\x3',
    '\x130', '\x3', '\x130', '\x3', '\x130', '\x3', '\x130', '\x3', '\x130',
    '\x3', '\x130', '\x3', '\x130', '\x3', '\x130', '\x3', '\x130', '\x3',
    '\x130', '\x3', '\x130', '\x3', '\x130', '\x5', '\x130', '\x1854', '\n',
    '\x130', '\x3', '\x130', '\x3', '\x130', '\x3', '\x130', '\x3', '\x130',
    '\x3', '\x130', '\x3', '\x130', '\x3', '\x130', '\x3', '\x130', '\x3',
    '\x130', '\x3', '\x130', '\x3', '\x130', '\a', '\x130', '\x1861', '\n',
    '\x130', '\f', '\x130', '\xE', '\x130', '\x1864', '\v', '\x130', '\x3',
    '\x131', '\x3', '\x131', '\x3', '\x132', '\x3', '\x132', '\x3', '\x132',
    '\x3', '\x132', '\x3', '\x132', '\x3', '\x132', '\x3', '\x132', '\x3',
    '\x132', '\x3', '\x132', '\x3', '\x132', '\x3', '\x132', '\x3', '\x132',
    '\x3', '\x132', '\x3', '\x132', '\x5', '\x132', '\x1876', '\n', '\x132',
    '\x3', '\x133', '\x3', '\x133', '\x3', '\x133', '\x3', '\x133', '\x3',
    '\x133', '\x3', '\x133', '\x3', '\x133', '\x5', '\x133', '\x187F', '\n',
    '\x133', '\x3', '\x134', '\x3', '\x134', '\x3', '\x134', '\x3', '\x134',
    '\x3', '\x134', '\x3', '\x134', '\x3', '\x134', '\x5', '\x134', '\x1888',
    '\n', '\x134', '\x3', '\x135', '\x3', '\x135', '\x3', '\x136', '\x3',
    '\x136', '\x3', '\x137', '\x3', '\x137', '\x3', '\x138', '\x3', '\x138',
    '\x3', '\x139', '\x3', '\x139', '\x3', '\x13A', '\x3', '\x13A', '\x3',
    '\x13B', '\x3', '\x13B', '\x3', '\x13C', '\x3', '\x13C', '\x3', '\x13C',
    '\x2', '\x5', '\x25A', '\x25C', '\x25E', '\x13D', '\x2', '\x4', '\x6',
    '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A',
    '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32',
    '\x34', '\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H',
    'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64',
    '\x66', 'h', 'j', 'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80',
    '\x82', '\x84', '\x86', '\x88', '\x8A', '\x8C', '\x8E', '\x90', '\x92',
    '\x94', '\x96', '\x98', '\x9A', '\x9C', '\x9E', '\xA0', '\xA2', '\xA4',
    '\xA6', '\xA8', '\xAA', '\xAC', '\xAE', '\xB0', '\xB2', '\xB4', '\xB6',
    '\xB8', '\xBA', '\xBC', '\xBE', '\xC0', '\xC2', '\xC4', '\xC6', '\xC8',
    '\xCA', '\xCC', '\xCE', '\xD0', '\xD2', '\xD4', '\xD6', '\xD8', '\xDA',
    '\xDC', '\xDE', '\xE0', '\xE2', '\xE4', '\xE6', '\xE8', '\xEA', '\xEC',
    '\xEE', '\xF0', '\xF2', '\xF4', '\xF6', '\xF8', '\xFA', '\xFC', '\xFE',
    '\x100', '\x102', '\x104', '\x106', '\x108', '\x10A', '\x10C', '\x10E',
    '\x110', '\x112', '\x114', '\x116', '\x118', '\x11A', '\x11C', '\x11E',
    '\x120', '\x122', '\x124', '\x126', '\x128', '\x12A', '\x12C', '\x12E',
    '\x130', '\x132', '\x134', '\x136', '\x138', '\x13A', '\x13C', '\x13E',
    '\x140', '\x142', '\x144', '\x146', '\x148', '\x14A', '\x14C', '\x14E',
    '\x150', '\x152', '\x154', '\x156', '\x158', '\x15A', '\x15C', '\x15E',
    '\x160', '\x162', '\x164', '\x166', '\x168', '\x16A', '\x16C', '\x16E',
    '\x170', '\x172', '\x174', '\x176', '\x178', '\x17A', '\x17C', '\x17E',
    '\x180', '\x182', '\x184', '\x186', '\x188', '\x18A', '\x18C', '\x18E',
    '\x190', '\x192', '\x194', '\x196', '\x198', '\x19A', '\x19C', '\x19E',
    '\x1A0', '\x1A2', '\x1A4', '\x1A6', '\x1A8', '\x1AA', '\x1AC', '\x1AE',
    '\x1B0', '\x1B2', '\x1B4', '\x1B6', '\x1B8', '\x1BA', '\x1BC', '\x1BE',
    '\x1C0', '\x1C2', '\x1C4', '\x1C6', '\x1C8', '\x1CA', '\x1CC', '\x1CE',
    '\x1D0', '\x1D2', '\x1D4', '\x1D6', '\x1D8', '\x1DA', '\x1DC', '\x1DE',
    '\x1E0', '\x1E2', '\x1E4', '\x1E6', '\x1E8', '\x1EA', '\x1EC', '\x1EE',
    '\x1F0', '\x1F2', '\x1F4', '\x1F6', '\x1F8', '\x1FA', '\x1FC', '\x1FE',
    '\x200', '\x202', '\x204', '\x206', '\x208', '\x20A', '\x20C', '\x20E',
    '\x210', '\x212', '\x214', '\x216', '\x218', '\x21A', '\x21C', '\x21E',
    '\x220', '\x222', '\x224', '\x226', '\x228', '\x22A', '\x22C', '\x22E',
    '\x230', '\x232', '\x234', '\x236', '\x238', '\x23A', '\x23C', '\x23E',
    '\x240', '\x242', '\x244', '\x246', '\x248', '\x24A', '\x24C', '\x24E',
    '\x250', '\x252', '\x254', '\x256', '\x258', '\x25A', '\x25C', '\x25E',
    '\x260', '\x262', '\x264', '\x266', '\x268', '\x26A', '\x26C', '\x26E',
    '\x270', '\x272', '\x274', '\x276', '\x2', '\x7F', '\x4', '\x2', '%',
    '%', '\x89', '\x89', '\x4', '\x2', '\x1BA', '\x1BA', '\x1BF', '\x1BF',
    '\x5', '\x2', '@', '@', '\x90', '\x90', '\xA5', '\xA5', '\x5', '\x2',
    '(', '(', '\x137', '\x137', '\x176', '\x176', '\x6', '\x2', '(', '(',
    '\x157', '\x157', '\x1B9', '\x1B9', '\x1FE', '\x1FE', '\x4', '\x2', '\x1B0',
    '\x1B0', '\x3E7', '\x3E7', '\x4', '\x2', 'H', 'H', '\x81', '\x81', '\x4',
    '\x2', '\xF', '\xF', '\x107', '\x107', '\x5', '\x2', '*', '*', 'N', 'N',
    '\xA8', '\xA8', '\x4', '\x2', '\x164', '\x164', '\x1D1', '\x1D1', '\x5',
    '\x2', '\x1A8', '\x1A8', '\x224', '\x224', '\x22A', '\x22A', '\x4', '\x2',
    '\x13E', '\x13E', '\x17B', '\x17B', '\x4', '\x2', '\x119', '\x119', '\x189',
    '\x189', '\x4', '\x2', '\x117', '\x117', '\x16D', '\x16D', '\x5', '\x2',
    'I', 'I', 'M', 'M', 'r', 'r', '\x5', '\x2', '(', '(', '\x148', '\x148',
    '\x162', '\x162', '\x5', '\x2', '(', '(', '\x144', '\x144', '\x286', '\x286',
    '\x4', '\x2', '\x218', '\x218', '\x238', '\x238', '\x4', '\x2', 'J', 'J',
    'T', 'T', '\x5', '\x2', '\x166', '\x166', '\x1C8', '\x1C8', '\x200', '\x200',
    '\x4', '\x2', '@', '@', '\x90', '\x90', '\x3', '\x2', '\x11D', '\x11E',
    '\x3', '\x2', '\x3DD', '\x3DE', '\x4', '\x2', '\x3E7', '\x3E7', '\x3EF',
    '\x3EF', '\x5', '\x2', '\x161', '\x161', '\x184', '\x184', '\x1B7', '\x1B7',
    '\x4', '\x2', '(', '(', '\x3DD', '\x3DE', '\b', '\x2', '(', '(', '\x12A',
    '\x12A', '\x12C', '\x12C', '\x148', '\x148', '\x162', '\x162', '\x1DE',
    '\x1DE', '\x3', '\x2', '\x3DE', '\x3DF', '\x4', '\x2', '\a', '\a', '\x31',
    '\x31', '\x4', '\x2', '\r', '\r', '\x9F', '\x9F', '\x4', '\x2', '\xB0',
    '\xB0', '\x23C', '\x23C', '\x4', '\x2', '\x14', '\x14', '\x84', '\x84',
    '\x5', '\x2', ')', ')', '\x46', '\x46', '\x61', '\x61', '\x4', '\x2',
    '\x61', '\x61', '\x12E', '\x12E', '\x4', '\x2', '\x125', '\x125', '\x15E',
    '\x15E', '\x4', '\x2', ']', ']', '\x1F6', '\x1F6', '\x4', '\x2', ')',
    ')', '\x61', '\x61', '\x4', '\x2', '\b', '\b', '/', '/', '\x4', '\x2',
    '\xAC', '\xAC', '\x235', '\x235', '\x6', '\x2', '\x161', '\x161', '\x184',
    '\x184', '\x1B6', '\x1B6', '\x1D4', '\x1D4', '\x4', '\x2', '\x161', '\x161',
    '\x1B6', '\x1B6', '\x4', '\x2', '\xE', '\xE', '+', '+', '\x5', '\x2',
    '=', '=', 'H', 'H', '\xAA', '\xAA', '\x4', '\x2', '!', '!', 'L', 'L',
    '\x4', '\x2', 'Y', 'Y', '\x87', '\x87', '\x4', '\x2', '\b', '\b', '/',
    '\x30', '\x3', '\x2', '\x20D', '\x20E', '\x4', '\x2', '\x169', '\x169',
    '\x1FC', '\x1FC', '\x4', '\x2', '\xCA', '\xCA', '\x18C', '\x18C', '\a',
    '\x2', '\x62', '\x62', '\x191', '\x192', '\x194', '\x194', '\x198', '\x1A0',
    '\x1E0', '\x1E0', '\x6', '\x2', '\x18E', '\x18F', '\x193', '\x193', '\x195',
    '\x196', '\x1E1', '\x1E1', '\x5', '\x2', '\x63', '\x63', '\x18D', '\x18D',
    '\x197', '\x197', '\x4', '\x2', '\x17D', '\x17D', '\x20F', '\x20F', '\x4',
    '\x2', '\x209', '\x209', '\x20B', '\x20B', '\x4', '\x2', '\x111', '\x111',
    '\x210', '\x210', '\x4', '\x2', 'S', 'S', '\x1EF', '\x1EF', '\x4', '\x2',
    '\x31', '\x31', '\x13C', '\x13C', '\x5', '\x2', '\x1E', '\x1E', '\x38',
    '\x38', '\xA3', '\xA3', '\x5', '\x2', 'w', 'w', '\x9C', '\x9C', '\x167',
    '\x167', '\x4', '\x2', '_', '_', '\xA6', '\xA6', '\x4', '\x2', '\x121',
    '\x121', '\x201', '\x201', '\x4', '\x2', '&', '&', '\x237', '\x237', '\x4',
    '\x2', 'i', 'i', '\x189', '\x189', '\x4', '\x2', '\x15A', '\x15A', '\x1DA',
    '\x1DA', '\x6', '\x2', '\xB8', '\xB8', '\xBA', '\xBA', '\xBE', '\xBE',
    '\x219', '\x219', '\x4', '\x2', '\x3BE', '\x3BE', '\x3CF', '\x3CF', '\x4',
    '\x2', '\x112', '\x112', '\x1E2', '\x1E2', '\x4', '\x2', '?', '?', 'I',
    'I', '\b', '\x2', 'w', 'w', '\x9C', '\x9C', '\xA1', '\xA1', '\x153', '\x153',
    '\x167', '\x167', '\x237', '\x237', '\x4', '\x2', '\x1AF', '\x1AF', '\x215',
    '\x215', '\x4', '\x2', '\x150', '\x150', '\x23B', '\x23B', '\x4', '\x2',
    'w', 'w', '\x167', '\x167', '\x5', '\x2', 'J', 'J', 'U', 'U', '\x174',
    '\x174', '\x5', '\x2', '\x169', '\x169', '\x189', '\x189', '\x1FC', '\x1FC',
    '\x4', '\x2', '\x215', '\x215', '\x236', '\x236', '\x4', '\x2', '\x12F',
    '\x12F', '\x1D9', '\x1D9', '\b', '\x2', '\xCA', '\xCA', '\x14D', '\x14D',
    '\x14F', '\x14F', '\x168', '\x168', '\x1DF', '\x1DF', '\x202', '\x202',
    '\x4', '\x2', '+', ',', '\x39', '\x39', '\x5', '\x2', '\x15A', '\x15A',
    '\x1CA', '\x1CA', '\x2E2', '\x2E2', '\x4', '\x2', '\x181', '\x181', '\x226',
    '\x226', '\f', '\x2', '\x120', '\x120', '\x127', '\x127', '\x131', '\x133',
    '\x139', '\x139', '\x1A9', '\x1A9', '\x1B1', '\x1B1', '\x21A', '\x21A',
    '\x221', '\x221', '\x2B2', '\x2B2', '\x358', '\x358', '\x4', '\x2', '\"',
    '\"', '\x99', '\x99', '\x4', '\x2', 'k', 'k', '\x350', '\x350', '\r',
    '\x2', '\x120', '\x120', '\x127', '\x127', '\x131', '\x133', '\x139',
    '\x139', '\x1A9', '\x1A9', '\x1B1', '\x1B1', '\x1F0', '\x1F0', '\x21A',
    '\x21A', '\x221', '\x221', '\x2B2', '\x2B2', '\x358', '\x358', '\x5',
    '\x2', '\x3E7', '\x3E7', '\x3EF', '\x3EF', '\x3F1', '\x3F1', '\x3', '\x2',
    '\x3F2', '\x3F3', '\x5', '\x2', '\x281', '\x28C', '\x3E7', '\x3E7', '\x3EF',
    '\x3F0', '\x4', '\x2', '\x3DD', '\x3DF', '\x3E8', '\x3E8', '\x4', '\x2',
    ':', ':', '\xA2', '\xA2', '\x4', '\x2', 'j', 'j', '\x3EB', '\x3EB', '\x5',
    '\x2', '\xC6', '\xC8', '\xD0', '\xD3', '\x1B4', '\x1B4', '\x4', '\x2',
    '\x18', '\x18', '\xC7', '\xC7', '\x4', '\x2', '\x18', '\x18', '\xC6',
    '\xC6', '\x3', '\x2', '\xB4', '\xB9', '\x4', '\x2', '\xA7', '\xA7', '\x1FF',
    '\x1FF', '\x4', '\x2', '\xBD', '\xC0', '\x162', '\x162', '\x6', '\x2',
    '\xC1', '\xC1', '\xCC', '\xCF', '\xD6', '\xD6', '\x115', '\x116', '\x5',
    '\x2', '\xC2', '\xC5', '\xCA', '\xCB', '\x113', '\x113', '\x4', '\x2',
    '\x8C', '\x8C', '\xD4', '\xD4', '\x4', '\x2', '\x181', '\x181', '\x291',
    '\x299', '\x4', '\x2', '\xCA', '\xCA', '\x1B4', '\x1B4', '\x5', '\x2',
    '\xC1', '\xC2', '\xC4', '\xC4', '\x181', '\x181', '\x4', '\x2', '\xF4',
    '\xF5', '\xFB', '\xFB', '\x4', '\x2', '#', '#', '\xF2', '\xF5', '\x3',
    '\x2', '\xFE', '\xFF', '\x5', '\x2', '\x11', '\x11', 'W', 'W', '\xA0',
    '\xA0', '\x4', '\x2', '\xC6', '\xC6', '\xCA', '\xCA', '\x4', '\x2', '\xC1',
    '\xC2', '\xC4', '\xC4', '\x5', '\x2', '\xE', '\xE', '+', '+', '\x34E',
    '\x34E', '\x5', '\x2', '\xE2', '\xE2', '\xE8', '\xE9', '\xEE', '\xEE',
    '\x5', '\x2', '\xE3', '\xE5', '\xEA', '\xED', '\xEF', '\xF1', '\x4', '\x2',
    '\x1BD', '\x1BD', '\x1CB', '\x1CB', '\x4', '\x2', 'h', 'h', '\x3D2', '\x3D2',
    '\x5', '\x2', ':', ':', '\xA2', '\xA2', '\x22E', '\x22E', '\x4', '\x2',
    '}', '}', '\x88', '\x88', '\x5', '\x2', '\b', '\b', '\x10A', '\x10A',
    '\x205', '\x205', '\x6', '\x2', 'h', 'h', '\x3CA', '\x3CA', '\x3CC', '\x3CC',
    '\x3D2', '\x3D3', '\x3', '\x2', '\x3C7', '\x3CE', '\x3', '\x2', '\x259',
    '\x280', '\x3', '\x2', '\x28D', '\x290', '\x3', '\x2', '\x24F', '\x257',
    '\x3', '\x2', '\x247', '\x24E', '\x5', '\x2', '\xC1', '\xC5', '\xD1',
    '\xD1', '\xD4', '\xD4', '\xF', '\x2', '\"', '\"', '.', '.', 'k', 'k',
    '\x99', '\x99', '\xD6', '\xD6', '\x105', '\x179', '\x17B', '\x217', '\x219',
    '\x237', '\x23A', '\x241', '\x246', '\x246', '\x286', '\x286', '\x2B2',
    '\x2B2', '\x358', '\x358', '\x11', '\x2', '%', '%', 'Y', 'Y', '\x87',
    '\x87', '\xC1', '\xC3', '\xC5', '\xC5', '\xE6', '\xE6', '\xFD', '\xFD',
    '\x17A', '\x17A', '\x239', '\x239', '\x247', '\x24E', '\x258', '\x258',
    '\x291', '\x291', '\x294', '\x2B1', '\x2B3', '\x357', '\x359', '\x3BD',
    '\x2', '\x1CD2', '\x2', '\x279', '\x3', '\x2', '\x2', '\x2', '\x4', '\x28A',
    '\x3', '\x2', '\x2', '\x2', '\x6', '\x29E', '\x3', '\x2', '\x2', '\x2',
    '\b', '\x2A0', '\x3', '\x2', '\x2', '\x2', '\n', '\x2C5', '\x3', '\x2',
    '\x2', '\x2', '\f', '\x2D1', '\x3', '\x2', '\x2', '\x2', '\xE', '\x2DC',
    '\x3', '\x2', '\x2', '\x2', '\x10', '\x2ED', '\x3', '\x2', '\x2', '\x2',
    '\x12', '\x2F2', '\x3', '\x2', '\x2', '\x2', '\x14', '\x2FE', '\x3', '\x2',
    '\x2', '\x2', '\x16', '\x319', '\x3', '\x2', '\x2', '\x2', '\x18', '\x322',
    '\x3', '\x2', '\x2', '\x2', '\x1A', '\x324', '\x3', '\x2', '\x2', '\x2',
    '\x1C', '\x330', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x34E', '\x3', '\x2',
    '\x2', '\x2', ' ', '\x372', '\x3', '\x2', '\x2', '\x2', '\"', '\x3A5',
    '\x3', '\x2', '\x2', '\x2', '$', '\x3BF', '\x3', '\x2', '\x2', '\x2',
    '&', '\x3DD', '\x3', '\x2', '\x2', '\x2', '(', '\x43E', '\x3', '\x2',
    '\x2', '\x2', '*', '\x440', '\x3', '\x2', '\x2', '\x2', ',', '\x452',
    '\x3', '\x2', '\x2', '\x2', '.', '\x48F', '\x3', '\x2', '\x2', '\x2',
    '\x30', '\x4A2', '\x3', '\x2', '\x2', '\x2', '\x32', '\x4DD', '\x3', '\x2',
    '\x2', '\x2', '\x34', '\x4DF', '\x3', '\x2', '\x2', '\x2', '\x36', '\x50B',
    '\x3', '\x2', '\x2', '\x2', '\x38', '\x511', '\x3', '\x2', '\x2', '\x2',
    ':', '\x513', '\x3', '\x2', '\x2', '\x2', '<', '\x528', '\x3', '\x2',
    '\x2', '\x2', '>', '\x52F', '\x3', '\x2', '\x2', '\x2', '@', '\x531',
    '\x3', '\x2', '\x2', '\x2', '\x42', '\x541', '\x3', '\x2', '\x2', '\x2',
    '\x44', '\x544', '\x3', '\x2', '\x2', '\x2', '\x46', '\x549', '\x3', '\x2',
    '\x2', '\x2', 'H', '\x563', '\x3', '\x2', '\x2', '\x2', 'J', '\x573',
    '\x3', '\x2', '\x2', '\x2', 'L', '\x575', '\x3', '\x2', '\x2', '\x2',
    'N', '\x585', '\x3', '\x2', '\x2', '\x2', 'P', '\x587', '\x3', '\x2',
    '\x2', '\x2', 'R', '\x5B6', '\x3', '\x2', '\x2', '\x2', 'T', '\x5FD',
    '\x3', '\x2', '\x2', '\x2', 'V', '\x5FF', '\x3', '\x2', '\x2', '\x2',
    'X', '\x61B', '\x3', '\x2', '\x2', '\x2', 'Z', '\x623', '\x3', '\x2',
    '\x2', '\x2', '\\', '\x641', '\x3', '\x2', '\x2', '\x2', '^', '\x6D3',
    '\x3', '\x2', '\x2', '\x2', '`', '\x6D5', '\x3', '\x2', '\x2', '\x2',
    '\x62', '\x6D8', '\x3', '\x2', '\x2', '\x2', '\x64', '\x722', '\x3', '\x2',
    '\x2', '\x2', '\x66', '\x739', '\x3', '\x2', '\x2', '\x2', 'h', '\x7BE',
    '\x3', '\x2', '\x2', '\x2', 'j', '\x7C3', '\x3', '\x2', '\x2', '\x2',
    'l', '\x7C5', '\x3', '\x2', '\x2', '\x2', 'n', '\x7CF', '\x3', '\x2',
    '\x2', '\x2', 'p', '\x804', '\x3', '\x2', '\x2', '\x2', 'r', '\x818',
    '\x3', '\x2', '\x2', '\x2', 't', '\x81A', '\x3', '\x2', '\x2', '\x2',
    'v', '\x83D', '\x3', '\x2', '\x2', '\x2', 'x', '\x846', '\x3', '\x2',
    '\x2', '\x2', 'z', '\x84D', '\x3', '\x2', '\x2', '\x2', '|', '\x864',
    '\x3', '\x2', '\x2', '\x2', '~', '\x86D', '\x3', '\x2', '\x2', '\x2',
    '\x80', '\x87C', '\x3', '\x2', '\x2', '\x2', '\x82', '\x892', '\x3', '\x2',
    '\x2', '\x2', '\x84', '\x8A6', '\x3', '\x2', '\x2', '\x2', '\x86', '\xA29',
    '\x3', '\x2', '\x2', '\x2', '\x88', '\xA2B', '\x3', '\x2', '\x2', '\x2',
    '\x8A', '\xA32', '\x3', '\x2', '\x2', '\x2', '\x8C', '\xA39', '\x3', '\x2',
    '\x2', '\x2', '\x8E', '\xA50', '\x3', '\x2', '\x2', '\x2', '\x90', '\xA58',
    '\x3', '\x2', '\x2', '\x2', '\x92', '\xA5F', '\x3', '\x2', '\x2', '\x2',
    '\x94', '\xA66', '\x3', '\x2', '\x2', '\x2', '\x96', '\xA6D', '\x3', '\x2',
    '\x2', '\x2', '\x98', '\xA79', '\x3', '\x2', '\x2', '\x2', '\x9A', '\xA83',
    '\x3', '\x2', '\x2', '\x2', '\x9C', '\xA8A', '\x3', '\x2', '\x2', '\x2',
    '\x9E', '\xA9A', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xAA4', '\x3', '\x2',
    '\x2', '\x2', '\xA2', '\xAA8', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xAAE',
    '\x3', '\x2', '\x2', '\x2', '\xA6', '\xABA', '\x3', '\x2', '\x2', '\x2',
    '\xA8', '\xABC', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAC3', '\x3', '\x2',
    '\x2', '\x2', '\xAC', '\xAC5', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xAF7',
    '\x3', '\x2', '\x2', '\x2', '\xB0', '\xB41', '\x3', '\x2', '\x2', '\x2',
    '\xB2', '\xB7C', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xBD4', '\x3', '\x2',
    '\x2', '\x2', '\xB6', '\xBD8', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xBE9',
    '\x3', '\x2', '\x2', '\x2', '\xBA', '\xBEB', '\x3', '\x2', '\x2', '\x2',
    '\xBC', '\xBF3', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xBFB', '\x3', '\x2',
    '\x2', '\x2', '\xC0', '\xBFD', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC1B',
    '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC52', '\x3', '\x2', '\x2', '\x2',
    '\xC6', '\xC5B', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC6F', '\x3', '\x2',
    '\x2', '\x2', '\xCA', '\xC7B', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xC7F',
    '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCA0', '\x3', '\x2', '\x2', '\x2',
    '\xD0', '\xCB5', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xCBF', '\x3', '\x2',
    '\x2', '\x2', '\xD4', '\xCC3', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xCDC',
    '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD06', '\x3', '\x2', '\x2', '\x2',
    '\xDA', '\xD08', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xD17', '\x3', '\x2',
    '\x2', '\x2', '\xDE', '\xD45', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xD4F',
    '\x3', '\x2', '\x2', '\x2', '\xE2', '\xD59', '\x3', '\x2', '\x2', '\x2',
    '\xE4', '\xD83', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xD85', '\x3', '\x2',
    '\x2', '\x2', '\xE8', '\xD96', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xD9C',
    '\x3', '\x2', '\x2', '\x2', '\xEC', '\xDAC', '\x3', '\x2', '\x2', '\x2',
    '\xEE', '\xDB0', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xDD6', '\x3', '\x2',
    '\x2', '\x2', '\xF2', '\xDFC', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xE0A',
    '\x3', '\x2', '\x2', '\x2', '\xF6', '\xE12', '\x3', '\x2', '\x2', '\x2',
    '\xF8', '\xE14', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xE2E', '\x3', '\x2',
    '\x2', '\x2', '\xFC', '\xE32', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xE41',
    '\x3', '\x2', '\x2', '\x2', '\x100', '\xE43', '\x3', '\x2', '\x2', '\x2',
    '\x102', '\xE4F', '\x3', '\x2', '\x2', '\x2', '\x104', '\xE53', '\x3',
    '\x2', '\x2', '\x2', '\x106', '\xE64', '\x3', '\x2', '\x2', '\x2', '\x108',
    '\xE75', '\x3', '\x2', '\x2', '\x2', '\x10A', '\xE78', '\x3', '\x2', '\x2',
    '\x2', '\x10C', '\xE82', '\x3', '\x2', '\x2', '\x2', '\x10E', '\xE86',
    '\x3', '\x2', '\x2', '\x2', '\x110', '\xE90', '\x3', '\x2', '\x2', '\x2',
    '\x112', '\xE93', '\x3', '\x2', '\x2', '\x2', '\x114', '\xE98', '\x3',
    '\x2', '\x2', '\x2', '\x116', '\xEAC', '\x3', '\x2', '\x2', '\x2', '\x118',
    '\xEAE', '\x3', '\x2', '\x2', '\x2', '\x11A', '\xEBF', '\x3', '\x2', '\x2',
    '\x2', '\x11C', '\xEC8', '\x3', '\x2', '\x2', '\x2', '\x11E', '\xED1',
    '\x3', '\x2', '\x2', '\x2', '\x120', '\xED3', '\x3', '\x2', '\x2', '\x2',
    '\x122', '\xEE1', '\x3', '\x2', '\x2', '\x2', '\x124', '\xEEC', '\x3',
    '\x2', '\x2', '\x2', '\x126', '\xEF5', '\x3', '\x2', '\x2', '\x2', '\x128',
    '\xEF8', '\x3', '\x2', '\x2', '\x2', '\x12A', '\xF00', '\x3', '\x2', '\x2',
    '\x2', '\x12C', '\xF19', '\x3', '\x2', '\x2', '\x2', '\x12E', '\xF25',
    '\x3', '\x2', '\x2', '\x2', '\x130', '\xF28', '\x3', '\x2', '\x2', '\x2',
    '\x132', '\xF48', '\x3', '\x2', '\x2', '\x2', '\x134', '\xF4A', '\x3',
    '\x2', '\x2', '\x2', '\x136', '\xF4C', '\x3', '\x2', '\x2', '\x2', '\x138',
    '\xF4E', '\x3', '\x2', '\x2', '\x2', '\x13A', '\xF50', '\x3', '\x2', '\x2',
    '\x2', '\x13C', '\xF85', '\x3', '\x2', '\x2', '\x2', '\x13E', '\xF87',
    '\x3', '\x2', '\x2', '\x2', '\x140', '\xF8D', '\x3', '\x2', '\x2', '\x2',
    '\x142', '\xFA1', '\x3', '\x2', '\x2', '\x2', '\x144', '\xFAF', '\x3',
    '\x2', '\x2', '\x2', '\x146', '\xFBA', '\x3', '\x2', '\x2', '\x2', '\x148',
    '\xFBC', '\x3', '\x2', '\x2', '\x2', '\x14A', '\xFC2', '\x3', '\x2', '\x2',
    '\x2', '\x14C', '\xFCC', '\x3', '\x2', '\x2', '\x2', '\x14E', '\xFD0',
    '\x3', '\x2', '\x2', '\x2', '\x150', '\xFD7', '\x3', '\x2', '\x2', '\x2',
    '\x152', '\xFDB', '\x3', '\x2', '\x2', '\x2', '\x154', '\xFE1', '\x3',
    '\x2', '\x2', '\x2', '\x156', '\xFE8', '\x3', '\x2', '\x2', '\x2', '\x158',
    '\xFEE', '\x3', '\x2', '\x2', '\x2', '\x15A', '\xFF4', '\x3', '\x2', '\x2',
    '\x2', '\x15C', '\xFF9', '\x3', '\x2', '\x2', '\x2', '\x15E', '\x1028',
    '\x3', '\x2', '\x2', '\x2', '\x160', '\x103D', '\x3', '\x2', '\x2', '\x2',
    '\x162', '\x1056', '\x3', '\x2', '\x2', '\x2', '\x164', '\x1059', '\x3',
    '\x2', '\x2', '\x2', '\x166', '\x105F', '\x3', '\x2', '\x2', '\x2', '\x168',
    '\x106F', '\x3', '\x2', '\x2', '\x2', '\x16A', '\x107E', '\x3', '\x2',
    '\x2', '\x2', '\x16C', '\x1084', '\x3', '\x2', '\x2', '\x2', '\x16E',
    '\x10A2', '\x3', '\x2', '\x2', '\x2', '\x170', '\x10A4', '\x3', '\x2',
    '\x2', '\x2', '\x172', '\x10AB', '\x3', '\x2', '\x2', '\x2', '\x174',
    '\x10B7', '\x3', '\x2', '\x2', '\x2', '\x176', '\x10BD', '\x3', '\x2',
    '\x2', '\x2', '\x178', '\x10D6', '\x3', '\x2', '\x2', '\x2', '\x17A',
    '\x10DA', '\x3', '\x2', '\x2', '\x2', '\x17C', '\x10DE', '\x3', '\x2',
    '\x2', '\x2', '\x17E', '\x10E9', '\x3', '\x2', '\x2', '\x2', '\x180',
    '\x1127', '\x3', '\x2', '\x2', '\x2', '\x182', '\x115F', '\x3', '\x2',
    '\x2', '\x2', '\x184', '\x1161', '\x3', '\x2', '\x2', '\x2', '\x186',
    '\x116E', '\x3', '\x2', '\x2', '\x2', '\x188', '\x11A0', '\x3', '\x2',
    '\x2', '\x2', '\x18A', '\x11B2', '\x3', '\x2', '\x2', '\x2', '\x18C',
    '\x11E4', '\x3', '\x2', '\x2', '\x2', '\x18E', '\x11E6', '\x3', '\x2',
    '\x2', '\x2', '\x190', '\x11F3', '\x3', '\x2', '\x2', '\x2', '\x192',
    '\x11FE', '\x3', '\x2', '\x2', '\x2', '\x194', '\x1219', '\x3', '\x2',
    '\x2', '\x2', '\x196', '\x1223', '\x3', '\x2', '\x2', '\x2', '\x198',
    '\x122D', '\x3', '\x2', '\x2', '\x2', '\x19A', '\x122F', '\x3', '\x2',
    '\x2', '\x2', '\x19C', '\x1239', '\x3', '\x2', '\x2', '\x2', '\x19E',
    '\x123C', '\x3', '\x2', '\x2', '\x2', '\x1A0', '\x126E', '\x3', '\x2',
    '\x2', '\x2', '\x1A2', '\x1280', '\x3', '\x2', '\x2', '\x2', '\x1A4',
    '\x1282', '\x3', '\x2', '\x2', '\x2', '\x1A6', '\x1286', '\x3', '\x2',
    '\x2', '\x2', '\x1A8', '\x128D', '\x3', '\x2', '\x2', '\x2', '\x1AA',
    '\x1296', '\x3', '\x2', '\x2', '\x2', '\x1AC', '\x129C', '\x3', '\x2',
    '\x2', '\x2', '\x1AE', '\x12A3', '\x3', '\x2', '\x2', '\x2', '\x1B0',
    '\x12B9', '\x3', '\x2', '\x2', '\x2', '\x1B2', '\x12BB', '\x3', '\x2',
    '\x2', '\x2', '\x1B4', '\x12C6', '\x3', '\x2', '\x2', '\x2', '\x1B6',
    '\x12CC', '\x3', '\x2', '\x2', '\x2', '\x1B8', '\x12FA', '\x3', '\x2',
    '\x2', '\x2', '\x1BA', '\x1393', '\x3', '\x2', '\x2', '\x2', '\x1BC',
    '\x139F', '\x3', '\x2', '\x2', '\x2', '\x1BE', '\x13AE', '\x3', '\x2',
    '\x2', '\x2', '\x1C0', '\x13B4', '\x3', '\x2', '\x2', '\x2', '\x1C2',
    '\x13C7', '\x3', '\x2', '\x2', '\x2', '\x1C4', '\x13D1', '\x3', '\x2',
    '\x2', '\x2', '\x1C6', '\x13DF', '\x3', '\x2', '\x2', '\x2', '\x1C8',
    '\x13E1', '\x3', '\x2', '\x2', '\x2', '\x1CA', '\x13E4', '\x3', '\x2',
    '\x2', '\x2', '\x1CC', '\x13FA', '\x3', '\x2', '\x2', '\x2', '\x1CE',
    '\x1406', '\x3', '\x2', '\x2', '\x2', '\x1D0', '\x140F', '\x3', '\x2',
    '\x2', '\x2', '\x1D2', '\x141B', '\x3', '\x2', '\x2', '\x2', '\x1D4',
    '\x141F', '\x3', '\x2', '\x2', '\x2', '\x1D6', '\x1421', '\x3', '\x2',
    '\x2', '\x2', '\x1D8', '\x1449', '\x3', '\x2', '\x2', '\x2', '\x1DA',
    '\x1450', '\x3', '\x2', '\x2', '\x2', '\x1DC', '\x1452', '\x3', '\x2',
    '\x2', '\x2', '\x1DE', '\x1469', '\x3', '\x2', '\x2', '\x2', '\x1E0',
    '\x146F', '\x3', '\x2', '\x2', '\x2', '\x1E2', '\x1477', '\x3', '\x2',
    '\x2', '\x2', '\x1E4', '\x147A', '\x3', '\x2', '\x2', '\x2', '\x1E6',
    '\x147D', '\x3', '\x2', '\x2', '\x2', '\x1E8', '\x1492', '\x3', '\x2',
    '\x2', '\x2', '\x1EA', '\x14A7', '\x3', '\x2', '\x2', '\x2', '\x1EC',
    '\x14AD', '\x3', '\x2', '\x2', '\x2', '\x1EE', '\x14D3', '\x3', '\x2',
    '\x2', '\x2', '\x1F0', '\x14DF', '\x3', '\x2', '\x2', '\x2', '\x1F2',
    '\x14E1', '\x3', '\x2', '\x2', '\x2', '\x1F4', '\x14E7', '\x3', '\x2',
    '\x2', '\x2', '\x1F6', '\x14E9', '\x3', '\x2', '\x2', '\x2', '\x1F8',
    '\x14F2', '\x3', '\x2', '\x2', '\x2', '\x1FA', '\x14FD', '\x3', '\x2',
    '\x2', '\x2', '\x1FC', '\x14FF', '\x3', '\x2', '\x2', '\x2', '\x1FE',
    '\x1505', '\x3', '\x2', '\x2', '\x2', '\x200', '\x1509', '\x3', '\x2',
    '\x2', '\x2', '\x202', '\x150B', '\x3', '\x2', '\x2', '\x2', '\x204',
    '\x150D', '\x3', '\x2', '\x2', '\x2', '\x206', '\x151F', '\x3', '\x2',
    '\x2', '\x2', '\x208', '\x152F', '\x3', '\x2', '\x2', '\x2', '\x20A',
    '\x1533', '\x3', '\x2', '\x2', '\x2', '\x20C', '\x1538', '\x3', '\x2',
    '\x2', '\x2', '\x20E', '\x1543', '\x3', '\x2', '\x2', '\x2', '\x210',
    '\x1548', '\x3', '\x2', '\x2', '\x2', '\x212', '\x154A', '\x3', '\x2',
    '\x2', '\x2', '\x214', '\x154E', '\x3', '\x2', '\x2', '\x2', '\x216',
    '\x1567', '\x3', '\x2', '\x2', '\x2', '\x218', '\x1569', '\x3', '\x2',
    '\x2', '\x2', '\x21A', '\x156C', '\x3', '\x2', '\x2', '\x2', '\x21C',
    '\x1571', '\x3', '\x2', '\x2', '\x2', '\x21E', '\x1581', '\x3', '\x2',
    '\x2', '\x2', '\x220', '\x15ED', '\x3', '\x2', '\x2', '\x2', '\x222',
    '\x15EF', '\x3', '\x2', '\x2', '\x2', '\x224', '\x1613', '\x3', '\x2',
    '\x2', '\x2', '\x226', '\x1615', '\x3', '\x2', '\x2', '\x2', '\x228',
    '\x1619', '\x3', '\x2', '\x2', '\x2', '\x22A', '\x161F', '\x3', '\x2',
    '\x2', '\x2', '\x22C', '\x1627', '\x3', '\x2', '\x2', '\x2', '\x22E',
    '\x162F', '\x3', '\x2', '\x2', '\x2', '\x230', '\x1637', '\x3', '\x2',
    '\x2', '\x2', '\x232', '\x1642', '\x3', '\x2', '\x2', '\x2', '\x234',
    '\x164A', '\x3', '\x2', '\x2', '\x2', '\x236', '\x1652', '\x3', '\x2',
    '\x2', '\x2', '\x238', '\x165A', '\x3', '\x2', '\x2', '\x2', '\x23A',
    '\x1662', '\x3', '\x2', '\x2', '\x2', '\x23C', '\x1675', '\x3', '\x2',
    '\x2', '\x2', '\x23E', '\x1685', '\x3', '\x2', '\x2', '\x2', '\x240',
    '\x1689', '\x3', '\x2', '\x2', '\x2', '\x242', '\x168B', '\x3', '\x2',
    '\x2', '\x2', '\x244', '\x168E', '\x3', '\x2', '\x2', '\x2', '\x246',
    '\x16A3', '\x3', '\x2', '\x2', '\x2', '\x248', '\x1742', '\x3', '\x2',
    '\x2', '\x2', '\x24A', '\x1744', '\x3', '\x2', '\x2', '\x2', '\x24C',
    '\x1757', '\x3', '\x2', '\x2', '\x2', '\x24E', '\x1759', '\x3', '\x2',
    '\x2', '\x2', '\x250', '\x1795', '\x3', '\x2', '\x2', '\x2', '\x252',
    '\x17AE', '\x3', '\x2', '\x2', '\x2', '\x254', '\x17B0', '\x3', '\x2',
    '\x2', '\x2', '\x256', '\x17B9', '\x3', '\x2', '\x2', '\x2', '\x258',
    '\x17CB', '\x3', '\x2', '\x2', '\x2', '\x25A', '\x17D8', '\x3', '\x2',
    '\x2', '\x2', '\x25C', '\x17E3', '\x3', '\x2', '\x2', '\x2', '\x25E',
    '\x1853', '\x3', '\x2', '\x2', '\x2', '\x260', '\x1865', '\x3', '\x2',
    '\x2', '\x2', '\x262', '\x1875', '\x3', '\x2', '\x2', '\x2', '\x264',
    '\x187E', '\x3', '\x2', '\x2', '\x2', '\x266', '\x1887', '\x3', '\x2',
    '\x2', '\x2', '\x268', '\x1889', '\x3', '\x2', '\x2', '\x2', '\x26A',
    '\x188B', '\x3', '\x2', '\x2', '\x2', '\x26C', '\x188D', '\x3', '\x2',
    '\x2', '\x2', '\x26E', '\x188F', '\x3', '\x2', '\x2', '\x2', '\x270',
    '\x1891', '\x3', '\x2', '\x2', '\x2', '\x272', '\x1893', '\x3', '\x2',
    '\x2', '\x2', '\x274', '\x1895', '\x3', '\x2', '\x2', '\x2', '\x276',
    '\x1897', '\x3', '\x2', '\x2', '\x2', '\x278', '\x27A', '\x5', '\x4',
    '\x3', '\x2', '\x279', '\x278', '\x3', '\x2', '\x2', '\x2', '\x279', '\x27A',
    '\x3', '\x2', '\x2', '\x2', '\x27A', '\x27C', '\x3', '\x2', '\x2', '\x2',
    '\x27B', '\x27D', '\a', '\x3CB', '\x2', '\x2', '\x27C', '\x27B', '\x3',
    '\x2', '\x2', '\x2', '\x27C', '\x27D', '\x3', '\x2', '\x2', '\x2', '\x27D',
    '\x27E', '\x3', '\x2', '\x2', '\x2', '\x27E', '\x27F', '\a', '\x2', '\x2',
    '\x3', '\x27F', '\x3', '\x3', '\x2', '\x2', '\x2', '\x280', '\x282', '\x5',
    '\x6', '\x4', '\x2', '\x281', '\x283', '\a', '\x3CB', '\x2', '\x2', '\x282',
    '\x281', '\x3', '\x2', '\x2', '\x2', '\x282', '\x283', '\x3', '\x2', '\x2',
    '\x2', '\x283', '\x285', '\x3', '\x2', '\x2', '\x2', '\x284', '\x286',
    '\a', '\x3DB', '\x2', '\x2', '\x285', '\x284', '\x3', '\x2', '\x2', '\x2',
    '\x285', '\x286', '\x3', '\x2', '\x2', '\x2', '\x286', '\x289', '\x3',
    '\x2', '\x2', '\x2', '\x287', '\x289', '\x5', '\b', '\x5', '\x2', '\x288',
    '\x280', '\x3', '\x2', '\x2', '\x2', '\x288', '\x287', '\x3', '\x2', '\x2',
    '\x2', '\x289', '\x28C', '\x3', '\x2', '\x2', '\x2', '\x28A', '\x288',
    '\x3', '\x2', '\x2', '\x2', '\x28A', '\x28B', '\x3', '\x2', '\x2', '\x2',
    '\x28B', '\x295', '\x3', '\x2', '\x2', '\x2', '\x28C', '\x28A', '\x3',
    '\x2', '\x2', '\x2', '\x28D', '\x292', '\x5', '\x6', '\x4', '\x2', '\x28E',
    '\x290', '\a', '\x3CB', '\x2', '\x2', '\x28F', '\x28E', '\x3', '\x2',
    '\x2', '\x2', '\x28F', '\x290', '\x3', '\x2', '\x2', '\x2', '\x290', '\x291',
    '\x3', '\x2', '\x2', '\x2', '\x291', '\x293', '\a', '\x3DB', '\x2', '\x2',
    '\x292', '\x28F', '\x3', '\x2', '\x2', '\x2', '\x292', '\x293', '\x3',
    '\x2', '\x2', '\x2', '\x293', '\x296', '\x3', '\x2', '\x2', '\x2', '\x294',
    '\x296', '\x5', '\b', '\x5', '\x2', '\x295', '\x28D', '\x3', '\x2', '\x2',
    '\x2', '\x295', '\x294', '\x3', '\x2', '\x2', '\x2', '\x296', '\x5', '\x3',
    '\x2', '\x2', '\x2', '\x297', '\x29F', '\x5', '\n', '\x6', '\x2', '\x298',
    '\x29F', '\x5', '\f', '\a', '\x2', '\x299', '\x29F', '\x5', '\xE', '\b',
    '\x2', '\x29A', '\x29F', '\x5', '\x10', '\t', '\x2', '\x29B', '\x29F',
    '\x5', '\x12', '\n', '\x2', '\x29C', '\x29F', '\x5', '\x16', '\f', '\x2',
    '\x29D', '\x29F', '\x5', '\x18', '\r', '\x2', '\x29E', '\x297', '\x3',
    '\x2', '\x2', '\x2', '\x29E', '\x298', '\x3', '\x2', '\x2', '\x2', '\x29E',
    '\x299', '\x3', '\x2', '\x2', '\x2', '\x29E', '\x29A', '\x3', '\x2', '\x2',
    '\x2', '\x29E', '\x29B', '\x3', '\x2', '\x2', '\x2', '\x29E', '\x29C',
    '\x3', '\x2', '\x2', '\x2', '\x29E', '\x29D', '\x3', '\x2', '\x2', '\x2',
    '\x29F', '\a', '\x3', '\x2', '\x2', '\x2', '\x2A0', '\x2A1', '\a', '\x3DB',
    '\x2', '\x2', '\x2A1', '\t', '\x3', '\x2', '\x2', '\x2', '\x2A2', '\x2C6',
    '\x5', '\x1A', '\xE', '\x2', '\x2A3', '\x2C6', '\x5', '\x1C', '\xF', '\x2',
    '\x2A4', '\x2C6', '\x5', '\x1E', '\x10', '\x2', '\x2A5', '\x2C6', '\x5',
    ' ', '\x11', '\x2', '\x2A6', '\x2C6', '\x5', '\"', '\x12', '\x2', '\x2A7',
    '\x2C6', '\x5', '$', '\x13', '\x2', '\x2A8', '\x2C6', '\x5', '&', '\x14',
    '\x2', '\x2A9', '\x2C6', '\x5', '(', '\x15', '\x2', '\x2AA', '\x2C6',
    '\x5', '*', '\x16', '\x2', '\x2AB', '\x2C6', '\x5', ',', '\x17', '\x2',
    '\x2AC', '\x2C6', '\x5', '.', '\x18', '\x2', '\x2AD', '\x2C6', '\x5',
    '\x30', '\x19', '\x2', '\x2AE', '\x2C6', '\x5', 'r', ':', '\x2', '\x2AF',
    '\x2C6', '\x5', 't', ';', '\x2', '\x2B0', '\x2C6', '\x5', 'v', '<', '\x2',
    '\x2B1', '\x2C6', '\x5', 'x', '=', '\x2', '\x2B2', '\x2C6', '\x5', 'z',
    '>', '\x2', '\x2B3', '\x2C6', '\x5', '|', '?', '\x2', '\x2B4', '\x2C6',
    '\x5', '~', '@', '\x2', '\x2B5', '\x2C6', '\x5', '\x80', '\x41', '\x2',
    '\x2B6', '\x2C6', '\x5', '\x82', '\x42', '\x2', '\x2B7', '\x2C6', '\x5',
    '\x84', '\x43', '\x2', '\x2B8', '\x2C6', '\x5', '\x88', '\x45', '\x2',
    '\x2B9', '\x2C6', '\x5', '\x8A', '\x46', '\x2', '\x2BA', '\x2C6', '\x5',
    '\x8C', 'G', '\x2', '\x2BB', '\x2C6', '\x5', '\x8E', 'H', '\x2', '\x2BC',
    '\x2C6', '\x5', '\x90', 'I', '\x2', '\x2BD', '\x2C6', '\x5', '\x92', 'J',
    '\x2', '\x2BE', '\x2C6', '\x5', '\x94', 'K', '\x2', '\x2BF', '\x2C6',
    '\x5', '\x96', 'L', '\x2', '\x2C0', '\x2C6', '\x5', '\x98', 'M', '\x2',
    '\x2C1', '\x2C6', '\x5', '\x9A', 'N', '\x2', '\x2C2', '\x2C6', '\x5',
    '\x9C', 'O', '\x2', '\x2C3', '\x2C6', '\x5', '\x9E', 'P', '\x2', '\x2C4',
    '\x2C6', '\x5', '\xA2', 'R', '\x2', '\x2C5', '\x2A2', '\x3', '\x2', '\x2',
    '\x2', '\x2C5', '\x2A3', '\x3', '\x2', '\x2', '\x2', '\x2C5', '\x2A4',
    '\x3', '\x2', '\x2', '\x2', '\x2C5', '\x2A5', '\x3', '\x2', '\x2', '\x2',
    '\x2C5', '\x2A6', '\x3', '\x2', '\x2', '\x2', '\x2C5', '\x2A7', '\x3',
    '\x2', '\x2', '\x2', '\x2C5', '\x2A8', '\x3', '\x2', '\x2', '\x2', '\x2C5',
    '\x2A9', '\x3', '\x2', '\x2', '\x2', '\x2C5', '\x2AA', '\x3', '\x2', '\x2',
    '\x2', '\x2C5', '\x2AB', '\x3', '\x2', '\x2', '\x2', '\x2C5', '\x2AC',
    '\x3', '\x2', '\x2', '\x2', '\x2C5', '\x2AD', '\x3', '\x2', '\x2', '\x2',
    '\x2C5', '\x2AE', '\x3', '\x2', '\x2', '\x2', '\x2C5', '\x2AF', '\x3',
    '\x2', '\x2', '\x2', '\x2C5', '\x2B0', '\x3', '\x2', '\x2', '\x2', '\x2C5',
    '\x2B1', '\x3', '\x2', '\x2', '\x2', '\x2C5', '\x2B2', '\x3', '\x2', '\x2',
    '\x2', '\x2C5', '\x2B3', '\x3', '\x2', '\x2', '\x2', '\x2C5', '\x2B4',
    '\x3', '\x2', '\x2', '\x2', '\x2C5', '\x2B5', '\x3', '\x2', '\x2', '\x2',
    '\x2C5', '\x2B6', '\x3', '\x2', '\x2', '\x2', '\x2C5', '\x2B7', '\x3',
    '\x2', '\x2', '\x2', '\x2C5', '\x2B8', '\x3', '\x2', '\x2', '\x2', '\x2C5',
    '\x2B9', '\x3', '\x2', '\x2', '\x2', '\x2C5', '\x2BA', '\x3', '\x2', '\x2',
    '\x2', '\x2C5', '\x2BB', '\x3', '\x2', '\x2', '\x2', '\x2C5', '\x2BC',
    '\x3', '\x2', '\x2', '\x2', '\x2C5', '\x2BD', '\x3', '\x2', '\x2', '\x2',
    '\x2C5', '\x2BE', '\x3', '\x2', '\x2', '\x2', '\x2C5', '\x2BF', '\x3',
    '\x2', '\x2', '\x2', '\x2C5', '\x2C0', '\x3', '\x2', '\x2', '\x2', '\x2C5',
    '\x2C1', '\x3', '\x2', '\x2', '\x2', '\x2C5', '\x2C2', '\x3', '\x2', '\x2',
    '\x2', '\x2C5', '\x2C3', '\x3', '\x2', '\x2', '\x2', '\x2C5', '\x2C4',
    '\x3', '\x2', '\x2', '\x2', '\x2C6', '\v', '\x3', '\x2', '\x2', '\x2',
    '\x2C7', '\x2D2', '\x5', '\xB4', '[', '\x2', '\x2C8', '\x2D2', '\x5',
    '\xAC', 'W', '\x2', '\x2C9', '\x2D2', '\x5', '\xB6', '\\', '\x2', '\x2CA',
    '\x2D2', '\x5', '\xA6', 'T', '\x2', '\x2CB', '\x2D2', '\x5', '\xB2', 'Z',
    '\x2', '\x2CC', '\x2D2', '\x5', '\xA4', 'S', '\x2', '\x2CD', '\x2D2',
    '\x5', '\xAE', 'X', '\x2', '\x2CE', '\x2D2', '\x5', '\xB0', 'Y', '\x2',
    '\x2CF', '\x2D2', '\x5', '\xA8', 'U', '\x2', '\x2D0', '\x2D2', '\x5',
    '\xAA', 'V', '\x2', '\x2D1', '\x2C7', '\x3', '\x2', '\x2', '\x2', '\x2D1',
    '\x2C8', '\x3', '\x2', '\x2', '\x2', '\x2D1', '\x2C9', '\x3', '\x2', '\x2',
    '\x2', '\x2D1', '\x2CA', '\x3', '\x2', '\x2', '\x2', '\x2D1', '\x2CB',
    '\x3', '\x2', '\x2', '\x2', '\x2D1', '\x2CC', '\x3', '\x2', '\x2', '\x2',
    '\x2D1', '\x2CD', '\x3', '\x2', '\x2', '\x2', '\x2D1', '\x2CE', '\x3',
    '\x2', '\x2', '\x2', '\x2D1', '\x2CF', '\x3', '\x2', '\x2', '\x2', '\x2D1',
    '\x2D0', '\x3', '\x2', '\x2', '\x2', '\x2D2', '\r', '\x3', '\x2', '\x2',
    '\x2', '\x2D3', '\x2DD', '\x5', '\x100', '\x81', '\x2', '\x2D4', '\x2DD',
    '\x5', '\x102', '\x82', '\x2', '\x2D5', '\x2DD', '\x5', '\x104', '\x83',
    '\x2', '\x2D6', '\x2DD', '\x5', '\x106', '\x84', '\x2', '\x2D7', '\x2DD',
    '\x5', '\x108', '\x85', '\x2', '\x2D8', '\x2DD', '\x5', '\x10A', '\x86',
    '\x2', '\x2D9', '\x2DD', '\x5', '\x10C', '\x87', '\x2', '\x2DA', '\x2DD',
    '\x5', '\x10E', '\x88', '\x2', '\x2DB', '\x2DD', '\x5', '\x110', '\x89',
    '\x2', '\x2DC', '\x2D3', '\x3', '\x2', '\x2', '\x2', '\x2DC', '\x2D4',
    '\x3', '\x2', '\x2', '\x2', '\x2DC', '\x2D5', '\x3', '\x2', '\x2', '\x2',
    '\x2DC', '\x2D6', '\x3', '\x2', '\x2', '\x2', '\x2DC', '\x2D7', '\x3',
    '\x2', '\x2', '\x2', '\x2DC', '\x2D8', '\x3', '\x2', '\x2', '\x2', '\x2DC',
    '\x2D9', '\x3', '\x2', '\x2', '\x2', '\x2DC', '\x2DA', '\x3', '\x2', '\x2',
    '\x2', '\x2DC', '\x2DB', '\x3', '\x2', '\x2', '\x2', '\x2DD', '\xF', '\x3',
    '\x2', '\x2', '\x2', '\x2DE', '\x2EE', '\x5', '\x120', '\x91', '\x2',
    '\x2DF', '\x2EE', '\x5', '\x122', '\x92', '\x2', '\x2E0', '\x2EE', '\x5',
    '\x124', '\x93', '\x2', '\x2E1', '\x2EE', '\x5', '\x126', '\x94', '\x2',
    '\x2E2', '\x2EE', '\x5', '\x128', '\x95', '\x2', '\x2E3', '\x2EE', '\x5',
    '\x12A', '\x96', '\x2', '\x2E4', '\x2EE', '\x5', '\x12C', '\x97', '\x2',
    '\x2E5', '\x2EE', '\x5', '\x12E', '\x98', '\x2', '\x2E6', '\x2EE', '\x5',
    '\x130', '\x99', '\x2', '\x2E7', '\x2EE', '\x5', '\x148', '\xA5', '\x2',
    '\x2E8', '\x2EE', '\x5', '\x14A', '\xA6', '\x2', '\x2E9', '\x2EE', '\x5',
    '\x14C', '\xA7', '\x2', '\x2EA', '\x2EE', '\x5', '\x14E', '\xA8', '\x2',
    '\x2EB', '\x2EE', '\x5', '\x150', '\xA9', '\x2', '\x2EC', '\x2EE', '\x5',
    '\x152', '\xAA', '\x2', '\x2ED', '\x2DE', '\x3', '\x2', '\x2', '\x2',
    '\x2ED', '\x2DF', '\x3', '\x2', '\x2', '\x2', '\x2ED', '\x2E0', '\x3',
    '\x2', '\x2', '\x2', '\x2ED', '\x2E1', '\x3', '\x2', '\x2', '\x2', '\x2ED',
    '\x2E2', '\x3', '\x2', '\x2', '\x2', '\x2ED', '\x2E3', '\x3', '\x2', '\x2',
    '\x2', '\x2ED', '\x2E4', '\x3', '\x2', '\x2', '\x2', '\x2ED', '\x2E5',
    '\x3', '\x2', '\x2', '\x2', '\x2ED', '\x2E6', '\x3', '\x2', '\x2', '\x2',
    '\x2ED', '\x2E7', '\x3', '\x2', '\x2', '\x2', '\x2ED', '\x2E8', '\x3',
    '\x2', '\x2', '\x2', '\x2ED', '\x2E9', '\x3', '\x2', '\x2', '\x2', '\x2ED',
    '\x2EA', '\x3', '\x2', '\x2', '\x2', '\x2ED', '\x2EB', '\x3', '\x2', '\x2',
    '\x2', '\x2ED', '\x2EC', '\x3', '\x2', '\x2', '\x2', '\x2EE', '\x11',
    '\x3', '\x2', '\x2', '\x2', '\x2EF', '\x2F3', '\x5', '\x154', '\xAB',
    '\x2', '\x2F0', '\x2F3', '\x5', '\x156', '\xAC', '\x2', '\x2F1', '\x2F3',
    '\x5', '\x158', '\xAD', '\x2', '\x2F2', '\x2EF', '\x3', '\x2', '\x2',
    '\x2', '\x2F2', '\x2F0', '\x3', '\x2', '\x2', '\x2', '\x2F2', '\x2F1',
    '\x3', '\x2', '\x2', '\x2', '\x2F3', '\x13', '\x3', '\x2', '\x2', '\x2',
    '\x2F4', '\x2FF', '\x5', '\x15C', '\xAF', '\x2', '\x2F5', '\x2FF', '\x5',
    '\x15E', '\xB0', '\x2', '\x2F6', '\x2FF', '\x5', '\x160', '\xB1', '\x2',
    '\x2F7', '\x2FF', '\x5', '\x164', '\xB3', '\x2', '\x2F8', '\x2FF', '\x5',
    '\x166', '\xB4', '\x2', '\x2F9', '\x2FF', '\x5', '\x168', '\xB5', '\x2',
    '\x2FA', '\x2FF', '\x5', '\x16C', '\xB7', '\x2', '\x2FB', '\x2FF', '\x5',
    '\x162', '\xB2', '\x2', '\x2FC', '\x2FF', '\x5', '\x16A', '\xB6', '\x2',
    '\x2FD', '\x2FF', '\x5', '\x16E', '\xB8', '\x2', '\x2FE', '\x2F4', '\x3',
    '\x2', '\x2', '\x2', '\x2FE', '\x2F5', '\x3', '\x2', '\x2', '\x2', '\x2FE',
    '\x2F6', '\x3', '\x2', '\x2', '\x2', '\x2FE', '\x2F7', '\x3', '\x2', '\x2',
    '\x2', '\x2FE', '\x2F8', '\x3', '\x2', '\x2', '\x2', '\x2FE', '\x2F9',
    '\x3', '\x2', '\x2', '\x2', '\x2FE', '\x2FA', '\x3', '\x2', '\x2', '\x2',
    '\x2FE', '\x2FB', '\x3', '\x2', '\x2', '\x2', '\x2FE', '\x2FC', '\x3',
    '\x2', '\x2', '\x2', '\x2FE', '\x2FD', '\x3', '\x2', '\x2', '\x2', '\x2FF',
    '\x15', '\x3', '\x2', '\x2', '\x2', '\x300', '\x31A', '\x5', '\x180',
    '\xC1', '\x2', '\x301', '\x31A', '\x5', '\x182', '\xC2', '\x2', '\x302',
    '\x31A', '\x5', '\x184', '\xC3', '\x2', '\x303', '\x31A', '\x5', '\x186',
    '\xC4', '\x2', '\x304', '\x31A', '\x5', '\x188', '\xC5', '\x2', '\x305',
    '\x31A', '\x5', '\x18A', '\xC6', '\x2', '\x306', '\x31A', '\x5', '\x18C',
    '\xC7', '\x2', '\x307', '\x31A', '\x5', '\x18E', '\xC8', '\x2', '\x308',
    '\x31A', '\x5', '\x1A6', '\xD4', '\x2', '\x309', '\x31A', '\x5', '\x1A8',
    '\xD5', '\x2', '\x30A', '\x31A', '\x5', '\x1AA', '\xD6', '\x2', '\x30B',
    '\x31A', '\x5', '\x1AC', '\xD7', '\x2', '\x30C', '\x31A', '\x5', '\x1AE',
    '\xD8', '\x2', '\x30D', '\x31A', '\x5', '\x1B2', '\xDA', '\x2', '\x30E',
    '\x31A', '\x5', '\x1B4', '\xDB', '\x2', '\x30F', '\x31A', '\x5', '\x1B6',
    '\xDC', '\x2', '\x310', '\x31A', '\x5', '\x1B8', '\xDD', '\x2', '\x311',
    '\x31A', '\x5', '\x1BA', '\xDE', '\x2', '\x312', '\x31A', '\x5', '\x1C8',
    '\xE5', '\x2', '\x313', '\x31A', '\x5', '\x1CA', '\xE6', '\x2', '\x314',
    '\x31A', '\x5', '\x1CC', '\xE7', '\x2', '\x315', '\x31A', '\x5', '\x1CE',
    '\xE8', '\x2', '\x316', '\x31A', '\x5', '\x1D0', '\xE9', '\x2', '\x317',
    '\x31A', '\x5', '\x1D2', '\xEA', '\x2', '\x318', '\x31A', '\x5', '\x1D4',
    '\xEB', '\x2', '\x319', '\x300', '\x3', '\x2', '\x2', '\x2', '\x319',
    '\x301', '\x3', '\x2', '\x2', '\x2', '\x319', '\x302', '\x3', '\x2', '\x2',
    '\x2', '\x319', '\x303', '\x3', '\x2', '\x2', '\x2', '\x319', '\x304',
    '\x3', '\x2', '\x2', '\x2', '\x319', '\x305', '\x3', '\x2', '\x2', '\x2',
    '\x319', '\x306', '\x3', '\x2', '\x2', '\x2', '\x319', '\x307', '\x3',
    '\x2', '\x2', '\x2', '\x319', '\x308', '\x3', '\x2', '\x2', '\x2', '\x319',
    '\x309', '\x3', '\x2', '\x2', '\x2', '\x319', '\x30A', '\x3', '\x2', '\x2',
    '\x2', '\x319', '\x30B', '\x3', '\x2', '\x2', '\x2', '\x319', '\x30C',
    '\x3', '\x2', '\x2', '\x2', '\x319', '\x30D', '\x3', '\x2', '\x2', '\x2',
    '\x319', '\x30E', '\x3', '\x2', '\x2', '\x2', '\x319', '\x30F', '\x3',
    '\x2', '\x2', '\x2', '\x319', '\x310', '\x3', '\x2', '\x2', '\x2', '\x319',
    '\x311', '\x3', '\x2', '\x2', '\x2', '\x319', '\x312', '\x3', '\x2', '\x2',
    '\x2', '\x319', '\x313', '\x3', '\x2', '\x2', '\x2', '\x319', '\x314',
    '\x3', '\x2', '\x2', '\x2', '\x319', '\x315', '\x3', '\x2', '\x2', '\x2',
    '\x319', '\x316', '\x3', '\x2', '\x2', '\x2', '\x319', '\x317', '\x3',
    '\x2', '\x2', '\x2', '\x319', '\x318', '\x3', '\x2', '\x2', '\x2', '\x31A',
    '\x17', '\x3', '\x2', '\x2', '\x2', '\x31B', '\x323', '\x5', '\x1DE',
    '\xF0', '\x2', '\x31C', '\x323', '\x5', '\x1E0', '\xF1', '\x2', '\x31D',
    '\x323', '\x5', '\x1E2', '\xF2', '\x2', '\x31E', '\x323', '\x5', '\x1E4',
    '\xF3', '\x2', '\x31F', '\x323', '\x5', '\x1E6', '\xF4', '\x2', '\x320',
    '\x323', '\x5', '\x1E8', '\xF5', '\x2', '\x321', '\x323', '\x5', '\x1EC',
    '\xF7', '\x2', '\x322', '\x31B', '\x3', '\x2', '\x2', '\x2', '\x322',
    '\x31C', '\x3', '\x2', '\x2', '\x2', '\x322', '\x31D', '\x3', '\x2', '\x2',
    '\x2', '\x322', '\x31E', '\x3', '\x2', '\x2', '\x2', '\x322', '\x31F',
    '\x3', '\x2', '\x2', '\x2', '\x322', '\x320', '\x3', '\x2', '\x2', '\x2',
    '\x322', '\x321', '\x3', '\x2', '\x2', '\x2', '\x323', '\x19', '\x3',
    '\x2', '\x2', '\x2', '\x324', '\x325', '\a', ' ', '\x2', '\x2', '\x325',
    '\x327', '\t', '\x2', '\x2', '\x2', '\x326', '\x328', '\x5', '\x244',
    '\x123', '\x2', '\x327', '\x326', '\x3', '\x2', '\x2', '\x2', '\x327',
    '\x328', '\x3', '\x2', '\x2', '\x2', '\x328', '\x329', '\x3', '\x2', '\x2',
    '\x2', '\x329', '\x32D', '\x5', '\x20C', '\x107', '\x2', '\x32A', '\x32C',
    '\x5', '\x32', '\x1A', '\x2', '\x32B', '\x32A', '\x3', '\x2', '\x2', '\x2',
    '\x32C', '\x32F', '\x3', '\x2', '\x2', '\x2', '\x32D', '\x32B', '\x3',
    '\x2', '\x2', '\x2', '\x32D', '\x32E', '\x3', '\x2', '\x2', '\x2', '\x32E',
    '\x1B', '\x3', '\x2', '\x2', '\x2', '\x32F', '\x32D', '\x3', '\x2', '\x2',
    '\x2', '\x330', '\x332', '\a', ' ', '\x2', '\x2', '\x331', '\x333', '\x5',
    '\x34', '\x1B', '\x2', '\x332', '\x331', '\x3', '\x2', '\x2', '\x2', '\x332',
    '\x333', '\x3', '\x2', '\x2', '\x2', '\x333', '\x334', '\x3', '\x2', '\x2',
    '\x2', '\x334', '\x336', '\a', '\x153', '\x2', '\x2', '\x335', '\x337',
    '\x5', '\x244', '\x123', '\x2', '\x336', '\x335', '\x3', '\x2', '\x2',
    '\x2', '\x336', '\x337', '\x3', '\x2', '\x2', '\x2', '\x337', '\x338',
    '\x3', '\x2', '\x2', '\x2', '\x338', '\x339', '\x5', '\x1F2', '\xFA',
    '\x2', '\x339', '\x33A', '\a', 'l', '\x2', '\x2', '\x33A', '\x33B', '\a',
    '\x1F9', '\x2', '\x2', '\x33B', '\x342', '\x5', '\x36', '\x1C', '\x2',
    '\x33C', '\x33D', '\a', 'l', '\x2', '\x2', '\x33D', '\x33F', '\a', '\x12B',
    '\x2', '\x2', '\x33E', '\x340', '\a', 'h', '\x2', '\x2', '\x33F', '\x33E',
    '\x3', '\x2', '\x2', '\x2', '\x33F', '\x340', '\x3', '\x2', '\x2', '\x2',
    '\x340', '\x341', '\x3', '\x2', '\x2', '\x2', '\x341', '\x343', '\a',
    '\x1D3', '\x2', '\x2', '\x342', '\x33C', '\x3', '\x2', '\x2', '\x2', '\x342',
    '\x343', '\x3', '\x2', '\x2', '\x2', '\x343', '\x345', '\x3', '\x2', '\x2',
    '\x2', '\x344', '\x346', '\x5', '>', ' ', '\x2', '\x345', '\x344', '\x3',
    '\x2', '\x2', '\x2', '\x345', '\x346', '\x3', '\x2', '\x2', '\x2', '\x346',
    '\x349', '\x3', '\x2', '\x2', '\x2', '\x347', '\x348', '\a', '\x128',
    '\x2', '\x2', '\x348', '\x34A', '\a', '\x3E7', '\x2', '\x2', '\x349',
    '\x347', '\x3', '\x2', '\x2', '\x2', '\x349', '\x34A', '\x3', '\x2', '\x2',
    '\x2', '\x34A', '\x34B', '\x3', '\x2', '\x2', '\x2', '\x34B', '\x34C',
    '\a', '\x145', '\x2', '\x2', '\x34C', '\x34D', '\x5', '\x15A', '\xAE',
    '\x2', '\x34D', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x34E', '\x350',
    '\a', ' ', '\x2', '\x2', '\x34F', '\x351', '\t', '\x3', '\x2', '\x2',
    '\x350', '\x34F', '\x3', '\x2', '\x2', '\x2', '\x350', '\x351', '\x3',
    '\x2', '\x2', '\x2', '\x351', '\x353', '\x3', '\x2', '\x2', '\x2', '\x352',
    '\x354', '\t', '\x4', '\x2', '\x2', '\x353', '\x352', '\x3', '\x2', '\x2',
    '\x2', '\x353', '\x354', '\x3', '\x2', '\x2', '\x2', '\x354', '\x355',
    '\x3', '\x2', '\x2', '\x2', '\x355', '\x356', '\a', 'J', '\x2', '\x2',
    '\x356', '\x358', '\x5', '\x20C', '\x107', '\x2', '\x357', '\x359', '\x5',
    '@', '!', '\x2', '\x358', '\x357', '\x3', '\x2', '\x2', '\x2', '\x358',
    '\x359', '\x3', '\x2', '\x2', '\x2', '\x359', '\x35A', '\x3', '\x2', '\x2',
    '\x2', '\x35A', '\x35B', '\a', 'l', '\x2', '\x2', '\x35B', '\x35C', '\x5',
    '\x1F4', '\xFB', '\x2', '\x35C', '\x360', '\x5', '\x230', '\x119', '\x2',
    '\x35D', '\x35F', '\x5', '\x42', '\"', '\x2', '\x35E', '\x35D', '\x3',
    '\x2', '\x2', '\x2', '\x35F', '\x362', '\x3', '\x2', '\x2', '\x2', '\x360',
    '\x35E', '\x3', '\x2', '\x2', '\x2', '\x360', '\x361', '\x3', '\x2', '\x2',
    '\x2', '\x361', '\x36F', '\x3', '\x2', '\x2', '\x2', '\x362', '\x360',
    '\x3', '\x2', '\x2', '\x2', '\x363', '\x365', '\a', '\x109', '\x2', '\x2',
    '\x364', '\x366', '\a', '\x3CF', '\x2', '\x2', '\x365', '\x364', '\x3',
    '\x2', '\x2', '\x2', '\x365', '\x366', '\x3', '\x2', '\x2', '\x2', '\x366',
    '\x367', '\x3', '\x2', '\x2', '\x2', '\x367', '\x36E', '\t', '\x5', '\x2',
    '\x2', '\x368', '\x36A', '\a', '_', '\x2', '\x2', '\x369', '\x36B', '\a',
    '\x3CF', '\x2', '\x2', '\x36A', '\x369', '\x3', '\x2', '\x2', '\x2', '\x36A',
    '\x36B', '\x3', '\x2', '\x2', '\x2', '\x36B', '\x36C', '\x3', '\x2', '\x2',
    '\x2', '\x36C', '\x36E', '\t', '\x6', '\x2', '\x2', '\x36D', '\x363',
    '\x3', '\x2', '\x2', '\x2', '\x36D', '\x368', '\x3', '\x2', '\x2', '\x2',
    '\x36E', '\x371', '\x3', '\x2', '\x2', '\x2', '\x36F', '\x36D', '\x3',
    '\x2', '\x2', '\x2', '\x36F', '\x370', '\x3', '\x2', '\x2', '\x2', '\x370',
    '\x1F', '\x3', '\x2', '\x2', '\x2', '\x371', '\x36F', '\x3', '\x2', '\x2',
    '\x2', '\x372', '\x373', '\a', ' ', '\x2', '\x2', '\x373', '\x374', '\a',
    '\x18A', '\x2', '\x2', '\x374', '\x375', '\a', '\x44', '\x2', '\x2', '\x375',
    '\x376', '\x5', '\x20C', '\x107', '\x2', '\x376', '\x377', '\a', '\a',
    '\x2', '\x2', '\x377', '\x378', '\a', '\x22B', '\x2', '\x2', '\x378',
    '\x37E', '\a', '\x3E7', '\x2', '\x2', '\x379', '\x37B', '\a', '\x175',
    '\x2', '\x2', '\x37A', '\x37C', '\a', '\x3CF', '\x2', '\x2', '\x37B',
    '\x37A', '\x3', '\x2', '\x2', '\x2', '\x37B', '\x37C', '\x3', '\x2', '\x2',
    '\x2', '\x37C', '\x37D', '\x3', '\x2', '\x2', '\x2', '\x37D', '\x37F',
    '\x5', '\x214', '\x10B', '\x2', '\x37E', '\x379', '\x3', '\x2', '\x2',
    '\x2', '\x37E', '\x37F', '\x3', '\x2', '\x2', '\x2', '\x37F', '\x385',
    '\x3', '\x2', '\x2', '\x2', '\x380', '\x382', '\a', '\x22C', '\x2', '\x2',
    '\x381', '\x383', '\a', '\x3CF', '\x2', '\x2', '\x382', '\x381', '\x3',
    '\x2', '\x2', '\x2', '\x382', '\x383', '\x3', '\x2', '\x2', '\x2', '\x383',
    '\x384', '\x3', '\x2', '\x2', '\x2', '\x384', '\x386', '\x5', '\x214',
    '\x10B', '\x2', '\x385', '\x380', '\x3', '\x2', '\x2', '\x2', '\x385',
    '\x386', '\x3', '\x2', '\x2', '\x2', '\x386', '\x38C', '\x3', '\x2', '\x2',
    '\x2', '\x387', '\x389', '\a', '\x1DD', '\x2', '\x2', '\x388', '\x38A',
    '\a', '\x3CF', '\x2', '\x2', '\x389', '\x388', '\x3', '\x2', '\x2', '\x2',
    '\x389', '\x38A', '\x3', '\x2', '\x2', '\x2', '\x38A', '\x38B', '\x3',
    '\x2', '\x2', '\x2', '\x38B', '\x38D', '\x5', '\x214', '\x10B', '\x2',
    '\x38C', '\x387', '\x3', '\x2', '\x2', '\x2', '\x38C', '\x38D', '\x3',
    '\x2', '\x2', '\x2', '\x38D', '\x393', '\x3', '\x2', '\x2', '\x2', '\x38E',
    '\x390', '\a', '\x1B8', '\x2', '\x2', '\x38F', '\x391', '\a', '\x3CF',
    '\x2', '\x2', '\x390', '\x38F', '\x3', '\x2', '\x2', '\x2', '\x390', '\x391',
    '\x3', '\x2', '\x2', '\x2', '\x391', '\x392', '\x3', '\x2', '\x2', '\x2',
    '\x392', '\x394', '\x5', '\x20C', '\x107', '\x2', '\x393', '\x38E', '\x3',
    '\x2', '\x2', '\x2', '\x393', '\x394', '\x3', '\x2', '\x2', '\x2', '\x394',
    '\x396', '\x3', '\x2', '\x2', '\x2', '\x395', '\x397', '\a', '\x23A',
    '\x2', '\x2', '\x396', '\x395', '\x3', '\x2', '\x2', '\x2', '\x396', '\x397',
    '\x3', '\x2', '\x2', '\x2', '\x397', '\x39D', '\x3', '\x2', '\x2', '\x2',
    '\x398', '\x39A', '\a', '\x128', '\x2', '\x2', '\x399', '\x39B', '\a',
    '\x3CF', '\x2', '\x2', '\x39A', '\x399', '\x3', '\x2', '\x2', '\x2', '\x39A',
    '\x39B', '\x3', '\x2', '\x2', '\x2', '\x39B', '\x39C', '\x3', '\x2', '\x2',
    '\x2', '\x39C', '\x39E', '\a', '\x3E7', '\x2', '\x2', '\x39D', '\x398',
    '\x3', '\x2', '\x2', '\x2', '\x39D', '\x39E', '\x3', '\x2', '\x2', '\x2',
    '\x39E', '\x39F', '\x3', '\x2', '\x2', '\x2', '\x39F', '\x3A1', '\a',
    '\x14D', '\x2', '\x2', '\x3A0', '\x3A2', '\a', '\x3CF', '\x2', '\x2',
    '\x3A1', '\x3A0', '\x3', '\x2', '\x2', '\x2', '\x3A1', '\x3A2', '\x3',
    '\x2', '\x2', '\x2', '\x3A2', '\x3A3', '\x3', '\x2', '\x2', '\x2', '\x3A3',
    '\x3A4', '\x5', '\x202', '\x102', '\x2', '\x3A4', '!', '\x3', '\x2', '\x2',
    '\x2', '\x3A5', '\x3A7', '\a', ' ', '\x2', '\x2', '\x3A6', '\x3A8', '\x5',
    '\x34', '\x1B', '\x2', '\x3A7', '\x3A6', '\x3', '\x2', '\x2', '\x2', '\x3A7',
    '\x3A8', '\x3', '\x2', '\x2', '\x2', '\x3A8', '\x3A9', '\x3', '\x2', '\x2',
    '\x2', '\x3A9', '\x3AA', '\a', 'w', '\x2', '\x2', '\x3AA', '\x3AB', '\x5',
    '\x1F2', '\xFA', '\x2', '\x3AB', '\x3AD', '\a', '\x3D8', '\x2', '\x2',
    '\x3AC', '\x3AE', '\x5', '\x44', '#', '\x2', '\x3AD', '\x3AC', '\x3',
    '\x2', '\x2', '\x2', '\x3AD', '\x3AE', '\x3', '\x2', '\x2', '\x2', '\x3AE',
    '\x3B3', '\x3', '\x2', '\x2', '\x2', '\x3AF', '\x3B0', '\a', '\x3DA',
    '\x2', '\x2', '\x3B0', '\x3B2', '\x5', '\x44', '#', '\x2', '\x3B1', '\x3AF',
    '\x3', '\x2', '\x2', '\x2', '\x3B2', '\x3B5', '\x3', '\x2', '\x2', '\x2',
    '\x3B3', '\x3B1', '\x3', '\x2', '\x2', '\x2', '\x3B3', '\x3B4', '\x3',
    '\x2', '\x2', '\x2', '\x3B4', '\x3B6', '\x3', '\x2', '\x2', '\x2', '\x3B5',
    '\x3B3', '\x3', '\x2', '\x2', '\x2', '\x3B6', '\x3BA', '\a', '\x3D9',
    '\x2', '\x2', '\x3B7', '\x3B9', '\x5', 'H', '%', '\x2', '\x3B8', '\x3B7',
    '\x3', '\x2', '\x2', '\x2', '\x3B9', '\x3BC', '\x3', '\x2', '\x2', '\x2',
    '\x3BA', '\x3B8', '\x3', '\x2', '\x2', '\x2', '\x3BA', '\x3BB', '\x3',
    '\x2', '\x2', '\x2', '\x3BB', '\x3BD', '\x3', '\x2', '\x2', '\x2', '\x3BC',
    '\x3BA', '\x3', '\x2', '\x2', '\x2', '\x3BD', '\x3BE', '\x5', '\x15A',
    '\xAE', '\x2', '\x3BE', '#', '\x3', '\x2', '\x2', '\x2', '\x3BF', '\x3C1',
    '\a', ' ', '\x2', '\x2', '\x3C0', '\x3C2', '\x5', '\x34', '\x1B', '\x2',
    '\x3C1', '\x3C0', '\x3', '\x2', '\x2', '\x2', '\x3C1', '\x3C2', '\x3',
    '\x2', '\x2', '\x2', '\x3C2', '\x3C3', '\x3', '\x2', '\x2', '\x2', '\x3C3',
    '\x3C4', '\a', '\x167', '\x2', '\x2', '\x3C4', '\x3C5', '\x5', '\x1F2',
    '\xFA', '\x2', '\x3C5', '\x3C7', '\a', '\x3D8', '\x2', '\x2', '\x3C6',
    '\x3C8', '\x5', '\x46', '$', '\x2', '\x3C7', '\x3C6', '\x3', '\x2', '\x2',
    '\x2', '\x3C7', '\x3C8', '\x3', '\x2', '\x2', '\x2', '\x3C8', '\x3CD',
    '\x3', '\x2', '\x2', '\x2', '\x3C9', '\x3CA', '\a', '\x3DA', '\x2', '\x2',
    '\x3CA', '\x3CC', '\x5', '\x46', '$', '\x2', '\x3CB', '\x3C9', '\x3',
    '\x2', '\x2', '\x2', '\x3CC', '\x3CF', '\x3', '\x2', '\x2', '\x2', '\x3CD',
    '\x3CB', '\x3', '\x2', '\x2', '\x2', '\x3CD', '\x3CE', '\x3', '\x2', '\x2',
    '\x2', '\x3CE', '\x3D0', '\x3', '\x2', '\x2', '\x2', '\x3CF', '\x3CD',
    '\x3', '\x2', '\x2', '\x2', '\x3D0', '\x3D1', '\a', '\x3D9', '\x2', '\x2',
    '\x3D1', '\x3D2', '\a', '\x1F1', '\x2', '\x2', '\x3D2', '\x3D6', '\x5',
    '\x220', '\x111', '\x2', '\x3D3', '\x3D5', '\x5', 'H', '%', '\x2', '\x3D4',
    '\x3D3', '\x3', '\x2', '\x2', '\x2', '\x3D5', '\x3D8', '\x3', '\x2', '\x2',
    '\x2', '\x3D6', '\x3D4', '\x3', '\x2', '\x2', '\x2', '\x3D6', '\x3D7',
    '\x3', '\x2', '\x2', '\x2', '\x3D7', '\x3DB', '\x3', '\x2', '\x2', '\x2',
    '\x3D8', '\x3D6', '\x3', '\x2', '\x2', '\x2', '\x3D9', '\x3DC', '\x5',
    '\x15A', '\xAE', '\x2', '\x3DA', '\x3DC', '\x5', '\x16A', '\xB6', '\x2',
    '\x3DB', '\x3D9', '\x3', '\x2', '\x2', '\x2', '\x3DB', '\x3DA', '\x3',
    '\x2', '\x2', '\x2', '\x3DC', '%', '\x3', '\x2', '\x2', '\x2', '\x3DD',
    '\x3DE', '\a', ' ', '\x2', '\x2', '\x3DE', '\x3DF', '\a', '\x1FB', '\x2',
    '\x2', '\x3DF', '\x3E0', '\x5', '\x20C', '\x107', '\x2', '\x3E0', '\x3E1',
    '\a', '>', '\x2', '\x2', '\x3E1', '\x3E2', '\a', '\x13A', '\x2', '\x2',
    '\x3E2', '\x3E3', '\a', '\x23E', '\x2', '\x2', '\x3E3', '\x3E4', '\t',
    '\a', '\x2', '\x2', '\x3E4', '\x3E5', '\a', '\x1C3', '\x2', '\x2', '\x3E5',
    '\x3E6', '\a', '\x3D8', '\x2', '\x2', '\x3E6', '\x3EB', '\x5', 'J', '&',
    '\x2', '\x3E7', '\x3E8', '\a', '\x3DA', '\x2', '\x2', '\x3E8', '\x3EA',
    '\x5', 'J', '&', '\x2', '\x3E9', '\x3E7', '\x3', '\x2', '\x2', '\x2',
    '\x3EA', '\x3ED', '\x3', '\x2', '\x2', '\x2', '\x3EB', '\x3E9', '\x3',
    '\x2', '\x2', '\x2', '\x3EB', '\x3EC', '\x3', '\x2', '\x2', '\x2', '\x3EC',
    '\x3EE', '\x3', '\x2', '\x2', '\x2', '\x3ED', '\x3EB', '\x3', '\x2', '\x2',
    '\x2', '\x3EE', '\x3EF', '\a', '\x3D9', '\x2', '\x2', '\x3EF', '\'', '\x3',
    '\x2', '\x2', '\x2', '\x3F0', '\x3F2', '\a', ' ', '\x2', '\x2', '\x3F1',
    '\x3F3', '\a', '\x223', '\x2', '\x2', '\x3F2', '\x3F1', '\x3', '\x2',
    '\x2', '\x2', '\x3F2', '\x3F3', '\x3', '\x2', '\x2', '\x2', '\x3F3', '\x3F4',
    '\x3', '\x2', '\x2', '\x2', '\x3F4', '\x3F6', '\a', '\x9C', '\x2', '\x2',
    '\x3F5', '\x3F7', '\x5', '\x244', '\x123', '\x2', '\x3F6', '\x3F5', '\x3',
    '\x2', '\x2', '\x2', '\x3F6', '\x3F7', '\x3', '\x2', '\x2', '\x2', '\x3F7',
    '\x3F8', '\x3', '\x2', '\x2', '\x2', '\x3F8', '\x400', '\x5', '\x1F4',
    '\xFB', '\x2', '\x3F9', '\x3FA', '\a', 'Z', '\x2', '\x2', '\x3FA', '\x401',
    '\x5', '\x1F4', '\xFB', '\x2', '\x3FB', '\x3FC', '\a', '\x3D8', '\x2',
    '\x2', '\x3FC', '\x3FD', '\a', 'Z', '\x2', '\x2', '\x3FD', '\x3FE', '\x5',
    '\x1F4', '\xFB', '\x2', '\x3FE', '\x3FF', '\a', '\x3D9', '\x2', '\x2',
    '\x3FF', '\x401', '\x3', '\x2', '\x2', '\x2', '\x400', '\x3F9', '\x3',
    '\x2', '\x2', '\x2', '\x400', '\x3FB', '\x3', '\x2', '\x2', '\x2', '\x401',
    '\x43F', '\x3', '\x2', '\x2', '\x2', '\x402', '\x404', '\a', ' ', '\x2',
    '\x2', '\x403', '\x405', '\a', '\x223', '\x2', '\x2', '\x404', '\x403',
    '\x3', '\x2', '\x2', '\x2', '\x404', '\x405', '\x3', '\x2', '\x2', '\x2',
    '\x405', '\x406', '\x3', '\x2', '\x2', '\x2', '\x406', '\x408', '\a',
    '\x9C', '\x2', '\x2', '\x407', '\x409', '\x5', '\x244', '\x123', '\x2',
    '\x408', '\x407', '\x3', '\x2', '\x2', '\x2', '\x408', '\x409', '\x3',
    '\x2', '\x2', '\x2', '\x409', '\x40A', '\x3', '\x2', '\x2', '\x2', '\x40A',
    '\x40C', '\x5', '\x1F4', '\xFB', '\x2', '\x40B', '\x40D', '\x5', 'L',
    '\'', '\x2', '\x40C', '\x40B', '\x3', '\x2', '\x2', '\x2', '\x40C', '\x40D',
    '\x3', '\x2', '\x2', '\x2', '\x40D', '\x418', '\x3', '\x2', '\x2', '\x2',
    '\x40E', '\x415', '\x5', '^', '\x30', '\x2', '\x40F', '\x411', '\a', '\x3DA',
    '\x2', '\x2', '\x410', '\x40F', '\x3', '\x2', '\x2', '\x2', '\x410', '\x411',
    '\x3', '\x2', '\x2', '\x2', '\x411', '\x412', '\x3', '\x2', '\x2', '\x2',
    '\x412', '\x414', '\x5', '^', '\x30', '\x2', '\x413', '\x410', '\x3',
    '\x2', '\x2', '\x2', '\x414', '\x417', '\x3', '\x2', '\x2', '\x2', '\x415',
    '\x413', '\x3', '\x2', '\x2', '\x2', '\x415', '\x416', '\x3', '\x2', '\x2',
    '\x2', '\x416', '\x419', '\x3', '\x2', '\x2', '\x2', '\x417', '\x415',
    '\x3', '\x2', '\x2', '\x2', '\x418', '\x40E', '\x3', '\x2', '\x2', '\x2',
    '\x418', '\x419', '\x3', '\x2', '\x2', '\x2', '\x419', '\x41B', '\x3',
    '\x2', '\x2', '\x2', '\x41A', '\x41C', '\x5', '\x62', '\x32', '\x2', '\x41B',
    '\x41A', '\x3', '\x2', '\x2', '\x2', '\x41B', '\x41C', '\x3', '\x2', '\x2',
    '\x2', '\x41C', '\x41E', '\x3', '\x2', '\x2', '\x2', '\x41D', '\x41F',
    '\t', '\b', '\x2', '\x2', '\x41E', '\x41D', '\x3', '\x2', '\x2', '\x2',
    '\x41E', '\x41F', '\x3', '\x2', '\x2', '\x2', '\x41F', '\x421', '\x3',
    '\x2', '\x2', '\x2', '\x420', '\x422', '\a', '\r', '\x2', '\x2', '\x421',
    '\x420', '\x3', '\x2', '\x2', '\x2', '\x421', '\x422', '\x3', '\x2', '\x2',
    '\x2', '\x422', '\x423', '\x3', '\x2', '\x2', '\x2', '\x423', '\x424',
    '\x5', '\xB4', '[', '\x2', '\x424', '\x43F', '\x3', '\x2', '\x2', '\x2',
    '\x425', '\x427', '\a', ' ', '\x2', '\x2', '\x426', '\x428', '\a', '\x223',
    '\x2', '\x2', '\x427', '\x426', '\x3', '\x2', '\x2', '\x2', '\x427', '\x428',
    '\x3', '\x2', '\x2', '\x2', '\x428', '\x429', '\x3', '\x2', '\x2', '\x2',
    '\x429', '\x42B', '\a', '\x9C', '\x2', '\x2', '\x42A', '\x42C', '\x5',
    '\x244', '\x123', '\x2', '\x42B', '\x42A', '\x3', '\x2', '\x2', '\x2',
    '\x42B', '\x42C', '\x3', '\x2', '\x2', '\x2', '\x42C', '\x42D', '\x3',
    '\x2', '\x2', '\x2', '\x42D', '\x42E', '\x5', '\x1F4', '\xFB', '\x2',
    '\x42E', '\x439', '\x5', 'L', '\'', '\x2', '\x42F', '\x436', '\x5', '^',
    '\x30', '\x2', '\x430', '\x432', '\a', '\x3DA', '\x2', '\x2', '\x431',
    '\x430', '\x3', '\x2', '\x2', '\x2', '\x431', '\x432', '\x3', '\x2', '\x2',
    '\x2', '\x432', '\x433', '\x3', '\x2', '\x2', '\x2', '\x433', '\x435',
    '\x5', '^', '\x30', '\x2', '\x434', '\x431', '\x3', '\x2', '\x2', '\x2',
    '\x435', '\x438', '\x3', '\x2', '\x2', '\x2', '\x436', '\x434', '\x3',
    '\x2', '\x2', '\x2', '\x436', '\x437', '\x3', '\x2', '\x2', '\x2', '\x437',
    '\x43A', '\x3', '\x2', '\x2', '\x2', '\x438', '\x436', '\x3', '\x2', '\x2',
    '\x2', '\x439', '\x42F', '\x3', '\x2', '\x2', '\x2', '\x439', '\x43A',
    '\x3', '\x2', '\x2', '\x2', '\x43A', '\x43C', '\x3', '\x2', '\x2', '\x2',
    '\x43B', '\x43D', '\x5', '\x62', '\x32', '\x2', '\x43C', '\x43B', '\x3',
    '\x2', '\x2', '\x2', '\x43C', '\x43D', '\x3', '\x2', '\x2', '\x2', '\x43D',
    '\x43F', '\x3', '\x2', '\x2', '\x2', '\x43E', '\x3F0', '\x3', '\x2', '\x2',
    '\x2', '\x43E', '\x402', '\x3', '\x2', '\x2', '\x2', '\x43E', '\x425',
    '\x3', '\x2', '\x2', '\x2', '\x43F', ')', '\x3', '\x2', '\x2', '\x2',
    '\x440', '\x441', '\a', ' ', '\x2', '\x2', '\x441', '\x442', '\a', '\x222',
    '\x2', '\x2', '\x442', '\x443', '\x5', '\x20C', '\x107', '\x2', '\x443',
    '\x444', '\a', '\a', '\x2', '\x2', '\x444', '\x445', '\a', '\x13B', '\x2',
    '\x2', '\x445', '\x449', '\a', '\x3E7', '\x2', '\x2', '\x446', '\x447',
    '\a', '\x15F', '\x2', '\x2', '\x447', '\x448', '\a', '\x3CF', '\x2', '\x2',
    '\x448', '\x44A', '\x5', '\x214', '\x10B', '\x2', '\x449', '\x446', '\x3',
    '\x2', '\x2', '\x2', '\x449', '\x44A', '\x3', '\x2', '\x2', '\x2', '\x44A',
    '\x450', '\x3', '\x2', '\x2', '\x2', '\x44B', '\x44D', '\a', '\x14D',
    '\x2', '\x2', '\x44C', '\x44E', '\a', '\x3CF', '\x2', '\x2', '\x44D',
    '\x44C', '\x3', '\x2', '\x2', '\x2', '\x44D', '\x44E', '\x3', '\x2', '\x2',
    '\x2', '\x44E', '\x44F', '\x3', '\x2', '\x2', '\x2', '\x44F', '\x451',
    '\x5', '\x202', '\x102', '\x2', '\x450', '\x44B', '\x3', '\x2', '\x2',
    '\x2', '\x450', '\x451', '\x3', '\x2', '\x2', '\x2', '\x451', '+', '\x3',
    '\x2', '\x2', '\x2', '\x452', '\x453', '\a', ' ', '\x2', '\x2', '\x453',
    '\x454', '\a', '\x222', '\x2', '\x2', '\x454', '\x455', '\x5', '\x20C',
    '\x107', '\x2', '\x455', '\x456', '\a', '\a', '\x2', '\x2', '\x456', '\x457',
    '\a', '\x13B', '\x2', '\x2', '\x457', '\x458', '\a', '\x3E7', '\x2', '\x2',
    '\x458', '\x459', '\a', '\xAA', '\x2', '\x2', '\x459', '\x45A', '\a',
    '\x18A', '\x2', '\x2', '\x45A', '\x45B', '\a', '\x44', '\x2', '\x2', '\x45B',
    '\x461', '\x5', '\x20C', '\x107', '\x2', '\x45C', '\x45E', '\a', '\x15B',
    '\x2', '\x2', '\x45D', '\x45F', '\a', '\x3CF', '\x2', '\x2', '\x45E',
    '\x45D', '\x3', '\x2', '\x2', '\x2', '\x45E', '\x45F', '\x3', '\x2', '\x2',
    '\x2', '\x45F', '\x460', '\x3', '\x2', '\x2', '\x2', '\x460', '\x462',
    '\x5', '\x214', '\x10B', '\x2', '\x461', '\x45C', '\x3', '\x2', '\x2',
    '\x2', '\x461', '\x462', '\x3', '\x2', '\x2', '\x2', '\x462', '\x468',
    '\x3', '\x2', '\x2', '\x2', '\x463', '\x465', '\a', '\x175', '\x2', '\x2',
    '\x464', '\x466', '\a', '\x3CF', '\x2', '\x2', '\x465', '\x464', '\x3',
    '\x2', '\x2', '\x2', '\x465', '\x466', '\x3', '\x2', '\x2', '\x2', '\x466',
    '\x467', '\x3', '\x2', '\x2', '\x2', '\x467', '\x469', '\x5', '\x214',
    '\x10B', '\x2', '\x468', '\x463', '\x3', '\x2', '\x2', '\x2', '\x468',
    '\x469', '\x3', '\x2', '\x2', '\x2', '\x469', '\x46F', '\x3', '\x2', '\x2',
    '\x2', '\x46A', '\x46C', '\a', '\x10E', '\x2', '\x2', '\x46B', '\x46D',
    '\a', '\x3CF', '\x2', '\x2', '\x46C', '\x46B', '\x3', '\x2', '\x2', '\x2',
    '\x46C', '\x46D', '\x3', '\x2', '\x2', '\x2', '\x46D', '\x46E', '\x3',
    '\x2', '\x2', '\x2', '\x46E', '\x470', '\x5', '\x214', '\x10B', '\x2',
    '\x46F', '\x46A', '\x3', '\x2', '\x2', '\x2', '\x46F', '\x470', '\x3',
    '\x2', '\x2', '\x2', '\x470', '\x476', '\x3', '\x2', '\x2', '\x2', '\x471',
    '\x473', '\a', '\x1A4', '\x2', '\x2', '\x472', '\x474', '\a', '\x3CF',
    '\x2', '\x2', '\x473', '\x472', '\x3', '\x2', '\x2', '\x2', '\x473', '\x474',
    '\x3', '\x2', '\x2', '\x2', '\x474', '\x475', '\x3', '\x2', '\x2', '\x2',
    '\x475', '\x477', '\x5', '\x214', '\x10B', '\x2', '\x476', '\x471', '\x3',
    '\x2', '\x2', '\x2', '\x476', '\x477', '\x3', '\x2', '\x2', '\x2', '\x477',
    '\x47D', '\x3', '\x2', '\x2', '\x2', '\x478', '\x47A', '\a', '\x1B8',
    '\x2', '\x2', '\x479', '\x47B', '\a', '\x3CF', '\x2', '\x2', '\x47A',
    '\x479', '\x3', '\x2', '\x2', '\x2', '\x47A', '\x47B', '\x3', '\x2', '\x2',
    '\x2', '\x47B', '\x47C', '\x3', '\x2', '\x2', '\x2', '\x47C', '\x47E',
    '\x5', '\x20C', '\x107', '\x2', '\x47D', '\x478', '\x3', '\x2', '\x2',
    '\x2', '\x47D', '\x47E', '\x3', '\x2', '\x2', '\x2', '\x47E', '\x480',
    '\x3', '\x2', '\x2', '\x2', '\x47F', '\x481', '\a', '\x23A', '\x2', '\x2',
    '\x480', '\x47F', '\x3', '\x2', '\x2', '\x2', '\x480', '\x481', '\x3',
    '\x2', '\x2', '\x2', '\x481', '\x487', '\x3', '\x2', '\x2', '\x2', '\x482',
    '\x484', '\a', '\x128', '\x2', '\x2', '\x483', '\x485', '\a', '\x3CF',
    '\x2', '\x2', '\x484', '\x483', '\x3', '\x2', '\x2', '\x2', '\x484', '\x485',
    '\x3', '\x2', '\x2', '\x2', '\x485', '\x486', '\x3', '\x2', '\x2', '\x2',
    '\x486', '\x488', '\a', '\x3E7', '\x2', '\x2', '\x487', '\x482', '\x3',
    '\x2', '\x2', '\x2', '\x487', '\x488', '\x3', '\x2', '\x2', '\x2', '\x488',
    '\x489', '\x3', '\x2', '\x2', '\x2', '\x489', '\x48B', '\a', '\x14D',
    '\x2', '\x2', '\x48A', '\x48C', '\a', '\x3CF', '\x2', '\x2', '\x48B',
    '\x48A', '\x3', '\x2', '\x2', '\x2', '\x48B', '\x48C', '\x3', '\x2', '\x2',
    '\x2', '\x48C', '\x48D', '\x3', '\x2', '\x2', '\x2', '\x48D', '\x48E',
    '\x5', '\x202', '\x102', '\x2', '\x48E', '-', '\x3', '\x2', '\x2', '\x2',
    '\x48F', '\x491', '\a', ' ', '\x2', '\x2', '\x490', '\x492', '\x5', '\x34',
    '\x1B', '\x2', '\x491', '\x490', '\x3', '\x2', '\x2', '\x2', '\x491',
    '\x492', '\x3', '\x2', '\x2', '\x2', '\x492', '\x493', '\x3', '\x2', '\x2',
    '\x2', '\x493', '\x494', '\a', '\xA1', '\x2', '\x2', '\x494', '\x495',
    '\x5', '\x1F2', '\xFA', '\x2', '\x495', '\x496', '\t', '\t', '\x2', '\x2',
    '\x496', '\x497', '\t', '\n', '\x2', '\x2', '\x497', '\x498', '\a', 'l',
    '\x2', '\x2', '\x498', '\x499', '\x5', '\x1F4', '\xFB', '\x2', '\x499',
    '\x49A', '\a', '<', '\x2', '\x2', '\x49A', '\x49B', '\a', '\x32', '\x2',
    '\x2', '\x49B', '\x49E', '\a', '\x1F5', '\x2', '\x2', '\x49C', '\x49D',
    '\t', '\v', '\x2', '\x2', '\x49D', '\x49F', '\x5', '\x1F2', '\xFA', '\x2',
    '\x49E', '\x49C', '\x3', '\x2', '\x2', '\x2', '\x49E', '\x49F', '\x3',
    '\x2', '\x2', '\x2', '\x49F', '\x4A0', '\x3', '\x2', '\x2', '\x2', '\x4A0',
    '\x4A1', '\x5', '\x15A', '\xAE', '\x2', '\x4A1', '/', '\x3', '\x2', '\x2',
    '\x2', '\x4A2', '\x4A5', '\a', ' ', '\x2', '\x2', '\x4A3', '\x4A4', '\a',
    'p', '\x2', '\x2', '\x4A4', '\x4A6', '\a', '\x81', '\x2', '\x2', '\x4A5',
    '\x4A3', '\x3', '\x2', '\x2', '\x2', '\x4A5', '\x4A6', '\x3', '\x2', '\x2',
    '\x2', '\x4A6', '\x4AA', '\x3', '\x2', '\x2', '\x2', '\x4A7', '\x4A8',
    '\a', '\x109', '\x2', '\x2', '\x4A8', '\x4A9', '\a', '\x3CF', '\x2', '\x2',
    '\x4A9', '\x4AB', '\t', '\f', '\x2', '\x2', '\x4AA', '\x4A7', '\x3', '\x2',
    '\x2', '\x2', '\x4AA', '\x4AB', '\x3', '\x2', '\x2', '\x2', '\x4AB', '\x4AD',
    '\x3', '\x2', '\x2', '\x2', '\x4AC', '\x4AE', '\x5', '\x34', '\x1B', '\x2',
    '\x4AD', '\x4AC', '\x3', '\x2', '\x2', '\x2', '\x4AD', '\x4AE', '\x3',
    '\x2', '\x2', '\x2', '\x4AE', '\x4B2', '\x3', '\x2', '\x2', '\x2', '\x4AF',
    '\x4B0', '\a', '\x91', '\x2', '\x2', '\x4B0', '\x4B1', '\a', '\x1FA',
    '\x2', '\x2', '\x4B1', '\x4B3', '\t', '\r', '\x2', '\x2', '\x4B2', '\x4AF',
    '\x3', '\x2', '\x2', '\x2', '\x4B2', '\x4B3', '\x3', '\x2', '\x2', '\x2',
    '\x4B3', '\x4B4', '\x3', '\x2', '\x2', '\x2', '\x4B4', '\x4B5', '\a',
    '\x237', '\x2', '\x2', '\x4B5', '\x4BA', '\x5', '\x1F2', '\xFA', '\x2',
    '\x4B6', '\x4B7', '\a', '\x3D8', '\x2', '\x2', '\x4B7', '\x4B8', '\x5',
    '\x22C', '\x117', '\x2', '\x4B8', '\x4B9', '\a', '\x3D9', '\x2', '\x2',
    '\x4B9', '\x4BB', '\x3', '\x2', '\x2', '\x2', '\x4BA', '\x4B6', '\x3',
    '\x2', '\x2', '\x2', '\x4BA', '\x4BB', '\x3', '\x2', '\x2', '\x2', '\x4BB',
    '\x4BC', '\x3', '\x2', '\x2', '\x2', '\x4BC', '\x4BD', '\a', '\r', '\x2',
    '\x2', '\x4BD', '\x4C4', '\x5', '\xB4', '[', '\x2', '\x4BE', '\x4C0',
    '\a', '\xB0', '\x2', '\x2', '\x4BF', '\x4C1', '\t', '\xE', '\x2', '\x2',
    '\x4C0', '\x4BF', '\x3', '\x2', '\x2', '\x2', '\x4C0', '\x4C1', '\x3',
    '\x2', '\x2', '\x2', '\x4C1', '\x4C2', '\x3', '\x2', '\x2', '\x2', '\x4C2',
    '\x4C3', '\a', '\x19', '\x2', '\x2', '\x4C3', '\x4C5', '\a', 'n', '\x2',
    '\x2', '\x4C4', '\x4BE', '\x3', '\x2', '\x2', '\x2', '\x4C4', '\x4C5',
    '\x3', '\x2', '\x2', '\x2', '\x4C5', '\x31', '\x3', '\x2', '\x2', '\x2',
    '\x4C6', '\x4C8', '\a', '(', '\x2', '\x2', '\x4C7', '\x4C6', '\x3', '\x2',
    '\x2', '\x2', '\x4C7', '\x4C8', '\x3', '\x2', '\x2', '\x2', '\x4C8', '\x4CC',
    '\x3', '\x2', '\x2', '\x2', '\x4C9', '\x4CA', '\a', '\x18', '\x2', '\x2',
    '\x4CA', '\x4CD', '\a', '\x8C', '\x2', '\x2', '\x4CB', '\x4CD', '\a',
    '\x2B7', '\x2', '\x2', '\x4CC', '\x4C9', '\x3', '\x2', '\x2', '\x2', '\x4CC',
    '\x4CB', '\x3', '\x2', '\x2', '\x2', '\x4CD', '\x4CF', '\x3', '\x2', '\x2',
    '\x2', '\x4CE', '\x4D0', '\a', '\x3CF', '\x2', '\x2', '\x4CF', '\x4CE',
    '\x3', '\x2', '\x2', '\x2', '\x4CF', '\x4D0', '\x3', '\x2', '\x2', '\x2',
    '\x4D0', '\x4D3', '\x3', '\x2', '\x2', '\x2', '\x4D1', '\x4D4', '\x5',
    '\x1FE', '\x100', '\x2', '\x4D2', '\x4D4', '\a', '(', '\x2', '\x2', '\x4D3',
    '\x4D1', '\x3', '\x2', '\x2', '\x2', '\x4D3', '\x4D2', '\x3', '\x2', '\x2',
    '\x2', '\x4D4', '\x4DE', '\x3', '\x2', '\x2', '\x2', '\x4D5', '\x4D7',
    '\a', '(', '\x2', '\x2', '\x4D6', '\x4D5', '\x3', '\x2', '\x2', '\x2',
    '\x4D6', '\x4D7', '\x3', '\x2', '\x2', '\x2', '\x4D7', '\x4D8', '\x3',
    '\x2', '\x2', '\x2', '\x4D8', '\x4DA', '\a', '\x1A', '\x2', '\x2', '\x4D9',
    '\x4DB', '\a', '\x3CF', '\x2', '\x2', '\x4DA', '\x4D9', '\x3', '\x2',
    '\x2', '\x2', '\x4DA', '\x4DB', '\x3', '\x2', '\x2', '\x2', '\x4DB', '\x4DC',
    '\x3', '\x2', '\x2', '\x2', '\x4DC', '\x4DE', '\x5', '\x200', '\x101',
    '\x2', '\x4DD', '\x4C7', '\x3', '\x2', '\x2', '\x2', '\x4DD', '\x4D6',
    '\x3', '\x2', '\x2', '\x2', '\x4DE', '\x33', '\x3', '\x2', '\x2', '\x2',
    '\x4DF', '\x4E0', '\a', '\x13E', '\x2', '\x2', '\x4E0', '\x4E7', '\a',
    '\x3CF', '\x2', '\x2', '\x4E1', '\x4E8', '\x5', '\x1FA', '\xFE', '\x2',
    '\x4E2', '\x4E5', '\a', '#', '\x2', '\x2', '\x4E3', '\x4E4', '\a', '\x3D8',
    '\x2', '\x2', '\x4E4', '\x4E6', '\a', '\x3D9', '\x2', '\x2', '\x4E5',
    '\x4E3', '\x3', '\x2', '\x2', '\x2', '\x4E5', '\x4E6', '\x3', '\x2', '\x2',
    '\x2', '\x4E6', '\x4E8', '\x3', '\x2', '\x2', '\x2', '\x4E7', '\x4E1',
    '\x3', '\x2', '\x2', '\x2', '\x4E7', '\x4E2', '\x3', '\x2', '\x2', '\x2',
    '\x4E8', '\x35', '\x3', '\x2', '\x2', '\x2', '\x4E9', '\x4EA', '\a', '\x10B',
    '\x2', '\x2', '\x4EA', '\x4EE', '\x5', '\x38', '\x1D', '\x2', '\x4EB',
    '\x4ED', '\x5', ':', '\x1E', '\x2', '\x4EC', '\x4EB', '\x3', '\x2', '\x2',
    '\x2', '\x4ED', '\x4F0', '\x3', '\x2', '\x2', '\x2', '\x4EE', '\x4EC',
    '\x3', '\x2', '\x2', '\x2', '\x4EE', '\x4EF', '\x3', '\x2', '\x2', '\x2',
    '\x4EF', '\x50C', '\x3', '\x2', '\x2', '\x2', '\x4F0', '\x4EE', '\x3',
    '\x2', '\x2', '\x2', '\x4F1', '\x4F4', '\a', '\x155', '\x2', '\x2', '\x4F2',
    '\x4F5', '\x5', '\x212', '\x10A', '\x2', '\x4F3', '\x4F5', '\x5', '\x25A',
    '\x12E', '\x2', '\x4F4', '\x4F2', '\x3', '\x2', '\x2', '\x2', '\x4F4',
    '\x4F3', '\x3', '\x2', '\x2', '\x2', '\x4F5', '\x4F6', '\x3', '\x2', '\x2',
    '\x2', '\x4F6', '\x4FF', '\x5', '<', '\x1F', '\x2', '\x4F7', '\x4F8',
    '\a', '\x211', '\x2', '\x2', '\x4F8', '\x4FC', '\x5', '\x38', '\x1D',
    '\x2', '\x4F9', '\x4FB', '\x5', ':', '\x1E', '\x2', '\x4FA', '\x4F9',
    '\x3', '\x2', '\x2', '\x2', '\x4FB', '\x4FE', '\x3', '\x2', '\x2', '\x2',
    '\x4FC', '\x4FA', '\x3', '\x2', '\x2', '\x2', '\x4FC', '\x4FD', '\x3',
    '\x2', '\x2', '\x2', '\x4FD', '\x500', '\x3', '\x2', '\x2', '\x2', '\x4FE',
    '\x4FC', '\x3', '\x2', '\x2', '\x2', '\x4FF', '\x4F7', '\x3', '\x2', '\x2',
    '\x2', '\x4FF', '\x500', '\x3', '\x2', '\x2', '\x2', '\x500', '\x509',
    '\x3', '\x2', '\x2', '\x2', '\x501', '\x502', '\a', '\x14C', '\x2', '\x2',
    '\x502', '\x506', '\x5', '\x38', '\x1D', '\x2', '\x503', '\x505', '\x5',
    ':', '\x1E', '\x2', '\x504', '\x503', '\x3', '\x2', '\x2', '\x2', '\x505',
    '\x508', '\x3', '\x2', '\x2', '\x2', '\x506', '\x504', '\x3', '\x2', '\x2',
    '\x2', '\x506', '\x507', '\x3', '\x2', '\x2', '\x2', '\x507', '\x50A',
    '\x3', '\x2', '\x2', '\x2', '\x508', '\x506', '\x3', '\x2', '\x2', '\x2',
    '\x509', '\x501', '\x3', '\x2', '\x2', '\x2', '\x509', '\x50A', '\x3',
    '\x2', '\x2', '\x2', '\x50A', '\x50C', '\x3', '\x2', '\x2', '\x2', '\x50B',
    '\x4E9', '\x3', '\x2', '\x2', '\x2', '\x50B', '\x4F1', '\x3', '\x2', '\x2',
    '\x2', '\x50C', '\x37', '\x3', '\x2', '\x2', '\x2', '\x50D', '\x512',
    '\a', '\xF4', '\x2', '\x2', '\x50E', '\x512', '\x5', '\x216', '\x10C',
    '\x2', '\x50F', '\x512', '\x5', '\x212', '\x10A', '\x2', '\x510', '\x512',
    '\x5', '\x25A', '\x12E', '\x2', '\x511', '\x50D', '\x3', '\x2', '\x2',
    '\x2', '\x511', '\x50E', '\x3', '\x2', '\x2', '\x2', '\x511', '\x50F',
    '\x3', '\x2', '\x2', '\x2', '\x511', '\x510', '\x3', '\x2', '\x2', '\x2',
    '\x512', '\x39', '\x3', '\x2', '\x2', '\x2', '\x513', '\x514', '\a', '\x3CA',
    '\x2', '\x2', '\x514', '\x517', '\a', 'O', '\x2', '\x2', '\x515', '\x518',
    '\x5', '\x212', '\x10A', '\x2', '\x516', '\x518', '\x5', '\x25A', '\x12E',
    '\x2', '\x517', '\x515', '\x3', '\x2', '\x2', '\x2', '\x517', '\x516',
    '\x3', '\x2', '\x2', '\x2', '\x518', '\x519', '\x3', '\x2', '\x2', '\x2',
    '\x519', '\x51A', '\x5', '<', '\x1F', '\x2', '\x51A', ';', '\x3', '\x2',
    '\x2', '\x2', '\x51B', '\x529', '\x5', '\x270', '\x139', '\x2', '\x51C',
    '\x529', '\a', '\xC5', '\x2', '\x2', '\x51D', '\x529', '\a', '\xD7', '\x2',
    '\x2', '\x51E', '\x529', '\a', '\xD8', '\x2', '\x2', '\x51F', '\x529',
    '\a', '\xD9', '\x2', '\x2', '\x520', '\x529', '\a', '\xDA', '\x2', '\x2',
    '\x521', '\x529', '\a', '\xDB', '\x2', '\x2', '\x522', '\x529', '\a',
    '\xDC', '\x2', '\x2', '\x523', '\x529', '\a', '\xDD', '\x2', '\x2', '\x524',
    '\x529', '\a', '\xDE', '\x2', '\x2', '\x525', '\x529', '\a', '\xDF', '\x2',
    '\x2', '\x526', '\x529', '\a', '\xE0', '\x2', '\x2', '\x527', '\x529',
    '\a', '\xE1', '\x2', '\x2', '\x528', '\x51B', '\x3', '\x2', '\x2', '\x2',
    '\x528', '\x51C', '\x3', '\x2', '\x2', '\x2', '\x528', '\x51D', '\x3',
    '\x2', '\x2', '\x2', '\x528', '\x51E', '\x3', '\x2', '\x2', '\x2', '\x528',
    '\x51F', '\x3', '\x2', '\x2', '\x2', '\x528', '\x520', '\x3', '\x2', '\x2',
    '\x2', '\x528', '\x521', '\x3', '\x2', '\x2', '\x2', '\x528', '\x522',
    '\x3', '\x2', '\x2', '\x2', '\x528', '\x523', '\x3', '\x2', '\x2', '\x2',
    '\x528', '\x524', '\x3', '\x2', '\x2', '\x2', '\x528', '\x525', '\x3',
    '\x2', '\x2', '\x2', '\x528', '\x526', '\x3', '\x2', '\x2', '\x2', '\x528',
    '\x527', '\x3', '\x2', '\x2', '\x2', '\x529', '=', '\x3', '\x2', '\x2',
    '\x2', '\x52A', '\x530', '\a', '\x149', '\x2', '\x2', '\x52B', '\x530',
    '\a', '\x142', '\x2', '\x2', '\x52C', '\x52D', '\a', '\x142', '\x2', '\x2',
    '\x52D', '\x52E', '\a', 'l', '\x2', '\x2', '\x52E', '\x530', '\a', '\x201',
    '\x2', '\x2', '\x52F', '\x52A', '\x3', '\x2', '\x2', '\x2', '\x52F', '\x52B',
    '\x3', '\x2', '\x2', '\x2', '\x52F', '\x52C', '\x3', '\x2', '\x2', '\x2',
    '\x530', '?', '\x3', '\x2', '\x2', '\x2', '\x531', '\x532', '\a', '\xAB',
    '\x2', '\x2', '\x532', '\x533', '\t', '\xF', '\x2', '\x2', '\x533', '\x41',
    '\x3', '\x2', '\x2', '\x2', '\x534', '\x536', '\a', '\x182', '\x2', '\x2',
    '\x535', '\x537', '\a', '\x3CF', '\x2', '\x2', '\x536', '\x535', '\x3',
    '\x2', '\x2', '\x2', '\x536', '\x537', '\x3', '\x2', '\x2', '\x2', '\x537',
    '\x538', '\x3', '\x2', '\x2', '\x2', '\x538', '\x542', '\x5', '\x214',
    '\x10B', '\x2', '\x539', '\x542', '\x5', '@', '!', '\x2', '\x53A', '\x53B',
    '\a', '\xB0', '\x2', '\x2', '\x53B', '\x53C', '\a', '\x1C7', '\x2', '\x2',
    '\x53C', '\x542', '\x5', '\x20C', '\x107', '\x2', '\x53D', '\x53E', '\a',
    '\x128', '\x2', '\x2', '\x53E', '\x542', '\a', '\x3E7', '\x2', '\x2',
    '\x53F', '\x542', '\a', '\x17A', '\x2', '\x2', '\x540', '\x542', '\a',
    '\x239', '\x2', '\x2', '\x541', '\x534', '\x3', '\x2', '\x2', '\x2', '\x541',
    '\x539', '\x3', '\x2', '\x2', '\x2', '\x541', '\x53A', '\x3', '\x2', '\x2',
    '\x2', '\x541', '\x53D', '\x3', '\x2', '\x2', '\x2', '\x541', '\x53F',
    '\x3', '\x2', '\x2', '\x2', '\x541', '\x540', '\x3', '\x2', '\x2', '\x2',
    '\x542', '\x43', '\x3', '\x2', '\x2', '\x2', '\x543', '\x545', '\t', '\x10',
    '\x2', '\x2', '\x544', '\x543', '\x3', '\x2', '\x2', '\x2', '\x544', '\x545',
    '\x3', '\x2', '\x2', '\x2', '\x545', '\x546', '\x3', '\x2', '\x2', '\x2',
    '\x546', '\x547', '\x5', '\x20C', '\x107', '\x2', '\x547', '\x548', '\x5',
    '\x220', '\x111', '\x2', '\x548', '\x45', '\x3', '\x2', '\x2', '\x2',
    '\x549', '\x54A', '\x5', '\x20C', '\x107', '\x2', '\x54A', '\x54B', '\x5',
    '\x220', '\x111', '\x2', '\x54B', 'G', '\x3', '\x2', '\x2', '\x2', '\x54C',
    '\x54D', '\a', '\x128', '\x2', '\x2', '\x54D', '\x564', '\a', '\x3E7',
    '\x2', '\x2', '\x54E', '\x54F', '\a', '\x183', '\x2', '\x2', '\x54F',
    '\x564', '\a', '\x91', '\x2', '\x2', '\x550', '\x552', '\a', 'h', '\x2',
    '\x2', '\x551', '\x550', '\x3', '\x2', '\x2', '\x2', '\x551', '\x552',
    '\x3', '\x2', '\x2', '\x2', '\x552', '\x553', '\x3', '\x2', '\x2', '\x2',
    '\x553', '\x564', '\a', '-', '\x2', '\x2', '\x554', '\x555', '\a', '\x134',
    '\x2', '\x2', '\x555', '\x55F', '\a', '\x91', '\x2', '\x2', '\x556', '\x557',
    '\a', '\x1B7', '\x2', '\x2', '\x557', '\x55F', '\a', '\x91', '\x2', '\x2',
    '\x558', '\x559', '\a', '{', '\x2', '\x2', '\x559', '\x55A', '\a', '\x91',
    '\x2', '\x2', '\x55A', '\x55F', '\a', '\x13A', '\x2', '\x2', '\x55B',
    '\x55C', '\a', '\x66', '\x2', '\x2', '\x55C', '\x55D', '\a', '\x91', '\x2',
    '\x2', '\x55D', '\x55F', '\a', '\x13A', '\x2', '\x2', '\x55E', '\x554',
    '\x3', '\x2', '\x2', '\x2', '\x55E', '\x556', '\x3', '\x2', '\x2', '\x2',
    '\x55E', '\x558', '\x3', '\x2', '\x2', '\x2', '\x55E', '\x55B', '\x3',
    '\x2', '\x2', '\x2', '\x55F', '\x564', '\x3', '\x2', '\x2', '\x2', '\x560',
    '\x561', '\a', '\x91', '\x2', '\x2', '\x561', '\x562', '\a', '\x1FA',
    '\x2', '\x2', '\x562', '\x564', '\t', '\r', '\x2', '\x2', '\x563', '\x54C',
    '\x3', '\x2', '\x2', '\x2', '\x563', '\x54E', '\x3', '\x2', '\x2', '\x2',
    '\x563', '\x551', '\x3', '\x2', '\x2', '\x2', '\x563', '\x55E', '\x3',
    '\x2', '\x2', '\x2', '\x563', '\x560', '\x3', '\x2', '\x2', '\x2', '\x564',
    'I', '\x3', '\x2', '\x2', '\x2', '\x565', '\x566', '\a', '\x16F', '\x2',
    '\x2', '\x566', '\x574', '\a', '\x3E7', '\x2', '\x2', '\x567', '\x568',
    '\a', '%', '\x2', '\x2', '\x568', '\x574', '\a', '\x3E7', '\x2', '\x2',
    '\x569', '\x56A', '\a', '\x231', '\x2', '\x2', '\x56A', '\x574', '\a',
    '\x3E7', '\x2', '\x2', '\x56B', '\x56C', '\a', '\x1CB', '\x2', '\x2',
    '\x56C', '\x574', '\a', '\x3E7', '\x2', '\x2', '\x56D', '\x56E', '\a',
    '\x204', '\x2', '\x2', '\x56E', '\x574', '\a', '\x3E7', '\x2', '\x2',
    '\x56F', '\x570', '\a', '\x1C4', '\x2', '\x2', '\x570', '\x574', '\a',
    '\x3E7', '\x2', '\x2', '\x571', '\x572', '\a', '\x1D0', '\x2', '\x2',
    '\x572', '\x574', '\x5', '\x212', '\x10A', '\x2', '\x573', '\x565', '\x3',
    '\x2', '\x2', '\x2', '\x573', '\x567', '\x3', '\x2', '\x2', '\x2', '\x573',
    '\x569', '\x3', '\x2', '\x2', '\x2', '\x573', '\x56B', '\x3', '\x2', '\x2',
    '\x2', '\x573', '\x56D', '\x3', '\x2', '\x2', '\x2', '\x573', '\x56F',
    '\x3', '\x2', '\x2', '\x2', '\x573', '\x571', '\x3', '\x2', '\x2', '\x2',
    '\x574', 'K', '\x3', '\x2', '\x2', '\x2', '\x575', '\x576', '\a', '\x3D8',
    '\x2', '\x2', '\x576', '\x57B', '\x5', 'N', '(', '\x2', '\x577', '\x578',
    '\a', '\x3DA', '\x2', '\x2', '\x578', '\x57A', '\x5', 'N', '(', '\x2',
    '\x579', '\x577', '\x3', '\x2', '\x2', '\x2', '\x57A', '\x57D', '\x3',
    '\x2', '\x2', '\x2', '\x57B', '\x579', '\x3', '\x2', '\x2', '\x2', '\x57B',
    '\x57C', '\x3', '\x2', '\x2', '\x2', '\x57C', '\x57E', '\x3', '\x2', '\x2',
    '\x2', '\x57D', '\x57B', '\x3', '\x2', '\x2', '\x2', '\x57E', '\x57F',
    '\a', '\x3D9', '\x2', '\x2', '\x57F', 'M', '\x3', '\x2', '\x2', '\x2',
    '\x580', '\x581', '\x5', '\x20C', '\x107', '\x2', '\x581', '\x582', '\x5',
    'P', ')', '\x2', '\x582', '\x586', '\x3', '\x2', '\x2', '\x2', '\x583',
    '\x586', '\x5', 'T', '+', '\x2', '\x584', '\x586', '\x5', '\\', '/', '\x2',
    '\x585', '\x580', '\x3', '\x2', '\x2', '\x2', '\x585', '\x583', '\x3',
    '\x2', '\x2', '\x2', '\x585', '\x584', '\x3', '\x2', '\x2', '\x2', '\x586',
    'O', '\x3', '\x2', '\x2', '\x2', '\x587', '\x58B', '\x5', '\x220', '\x111',
    '\x2', '\x588', '\x58A', '\x5', 'R', '*', '\x2', '\x589', '\x588', '\x3',
    '\x2', '\x2', '\x2', '\x58A', '\x58D', '\x3', '\x2', '\x2', '\x2', '\x58B',
    '\x589', '\x3', '\x2', '\x2', '\x2', '\x58B', '\x58C', '\x3', '\x2', '\x2',
    '\x2', '\x58C', 'Q', '\x3', '\x2', '\x2', '\x2', '\x58D', '\x58B', '\x3',
    '\x2', '\x2', '\x2', '\x58E', '\x5B7', '\x5', '\x21C', '\x10F', '\x2',
    '\x58F', '\x590', '\a', '(', '\x2', '\x2', '\x590', '\x5B7', '\x5', '\x23C',
    '\x11F', '\x2', '\x591', '\x596', '\a', '\x10F', '\x2', '\x2', '\x592',
    '\x593', '\a', 'l', '\x2', '\x2', '\x593', '\x594', '\a', '\xA8', '\x2',
    '\x2', '\x594', '\x596', '\x5', '\x23E', '\x120', '\x2', '\x595', '\x591',
    '\x3', '\x2', '\x2', '\x2', '\x595', '\x592', '\x3', '\x2', '\x2', '\x2',
    '\x596', '\x5B7', '\x3', '\x2', '\x2', '\x2', '\x597', '\x599', '\a',
    'v', '\x2', '\x2', '\x598', '\x597', '\x3', '\x2', '\x2', '\x2', '\x598',
    '\x599', '\x3', '\x2', '\x2', '\x2', '\x599', '\x59A', '\x3', '\x2', '\x2',
    '\x2', '\x59A', '\x5B7', '\a', 'T', '\x2', '\x2', '\x59B', '\x59D', '\a',
    '\xA5', '\x2', '\x2', '\x59C', '\x59E', '\a', 'T', '\x2', '\x2', '\x59D',
    '\x59C', '\x3', '\x2', '\x2', '\x2', '\x59D', '\x59E', '\x3', '\x2', '\x2',
    '\x2', '\x59E', '\x5B7', '\x3', '\x2', '\x2', '\x2', '\x59F', '\x5A0',
    '\a', '\x128', '\x2', '\x2', '\x5A0', '\x5B7', '\a', '\x3E7', '\x2', '\x2',
    '\x5A1', '\x5A2', '\a', '\x126', '\x2', '\x2', '\x5A2', '\x5B7', '\t',
    '\x11', '\x2', '\x2', '\x5A3', '\x5A4', '\a', '\x217', '\x2', '\x2', '\x5A4',
    '\x5B7', '\t', '\x12', '\x2', '\x2', '\x5A5', '\x5B7', '\x5', 'V', ',',
    '\x2', '\x5A6', '\x5A7', '\a', '\x1A', '\x2', '\x2', '\x5A7', '\x5B7',
    '\x5', '\x200', '\x101', '\x2', '\x5A8', '\x5A9', '\a', '\x41', '\x2',
    '\x2', '\x5A9', '\x5AB', '\a', '\n', '\x2', '\x2', '\x5AA', '\x5A8', '\x3',
    '\x2', '\x2', '\x2', '\x5AA', '\x5AB', '\x3', '\x2', '\x2', '\x2', '\x5AB',
    '\x5AC', '\x3', '\x2', '\x2', '\x2', '\x5AC', '\x5AD', '\a', '\r', '\x2',
    '\x2', '\x5AD', '\x5AE', '\a', '\x3D8', '\x2', '\x2', '\x5AE', '\x5AF',
    '\x5', '\x25A', '\x12E', '\x2', '\x5AF', '\x5B1', '\a', '\x3D9', '\x2',
    '\x2', '\x5B0', '\x5B2', '\t', '\x13', '\x2', '\x2', '\x5B1', '\x5B0',
    '\x3', '\x2', '\x2', '\x2', '\x5B1', '\x5B2', '\x3', '\x2', '\x2', '\x2',
    '\x5B2', '\x5B7', '\x3', '\x2', '\x2', '\x2', '\x5B3', '\x5B4', '\a',
    '\xD6', '\x2', '\x2', '\x5B4', '\x5B5', '\a', '(', '\x2', '\x2', '\x5B5',
    '\x5B7', '\a', '\x235', '\x2', '\x2', '\x5B6', '\x58E', '\x3', '\x2',
    '\x2', '\x2', '\x5B6', '\x58F', '\x3', '\x2', '\x2', '\x2', '\x5B6', '\x595',
    '\x3', '\x2', '\x2', '\x2', '\x5B6', '\x598', '\x3', '\x2', '\x2', '\x2',
    '\x5B6', '\x59B', '\x3', '\x2', '\x2', '\x2', '\x5B6', '\x59F', '\x3',
    '\x2', '\x2', '\x2', '\x5B6', '\x5A1', '\x3', '\x2', '\x2', '\x2', '\x5B6',
    '\x5A3', '\x3', '\x2', '\x2', '\x2', '\x5B6', '\x5A5', '\x3', '\x2', '\x2',
    '\x2', '\x5B6', '\x5A6', '\x3', '\x2', '\x2', '\x2', '\x5B6', '\x5AA',
    '\x3', '\x2', '\x2', '\x2', '\x5B6', '\x5B3', '\x3', '\x2', '\x2', '\x2',
    '\x5B7', 'S', '\x3', '\x2', '\x2', '\x2', '\x5B8', '\x5BA', '\a', '\x1D',
    '\x2', '\x2', '\x5B9', '\x5BB', '\x5', '\x20C', '\x107', '\x2', '\x5BA',
    '\x5B9', '\x3', '\x2', '\x2', '\x2', '\x5BA', '\x5BB', '\x3', '\x2', '\x2',
    '\x2', '\x5BB', '\x5BD', '\x3', '\x2', '\x2', '\x2', '\x5BC', '\x5B8',
    '\x3', '\x2', '\x2', '\x2', '\x5BC', '\x5BD', '\x3', '\x2', '\x2', '\x2',
    '\x5BD', '\x5BE', '\x3', '\x2', '\x2', '\x2', '\x5BE', '\x5BF', '\a',
    'v', '\x2', '\x2', '\x5BF', '\x5C1', '\a', 'T', '\x2', '\x2', '\x5C0',
    '\x5C2', '\x5', '\x20C', '\x107', '\x2', '\x5C1', '\x5C0', '\x3', '\x2',
    '\x2', '\x2', '\x5C1', '\x5C2', '\x3', '\x2', '\x2', '\x2', '\x5C2', '\x5C4',
    '\x3', '\x2', '\x2', '\x2', '\x5C3', '\x5C5', '\x5', '@', '!', '\x2',
    '\x5C4', '\x5C3', '\x3', '\x2', '\x2', '\x2', '\x5C4', '\x5C5', '\x3',
    '\x2', '\x2', '\x2', '\x5C5', '\x5C6', '\x3', '\x2', '\x2', '\x2', '\x5C6',
    '\x5CA', '\x5', '\x230', '\x119', '\x2', '\x5C7', '\x5C9', '\x5', '\x42',
    '\"', '\x2', '\x5C8', '\x5C7', '\x3', '\x2', '\x2', '\x2', '\x5C9', '\x5CC',
    '\x3', '\x2', '\x2', '\x2', '\x5CA', '\x5C8', '\x3', '\x2', '\x2', '\x2',
    '\x5CA', '\x5CB', '\x3', '\x2', '\x2', '\x2', '\x5CB', '\x5FE', '\x3',
    '\x2', '\x2', '\x2', '\x5CC', '\x5CA', '\x3', '\x2', '\x2', '\x2', '\x5CD',
    '\x5CF', '\a', '\x1D', '\x2', '\x2', '\x5CE', '\x5D0', '\x5', '\x20C',
    '\x107', '\x2', '\x5CF', '\x5CE', '\x3', '\x2', '\x2', '\x2', '\x5CF',
    '\x5D0', '\x3', '\x2', '\x2', '\x2', '\x5D0', '\x5D2', '\x3', '\x2', '\x2',
    '\x2', '\x5D1', '\x5CD', '\x3', '\x2', '\x2', '\x2', '\x5D1', '\x5D2',
    '\x3', '\x2', '\x2', '\x2', '\x5D2', '\x5D3', '\x3', '\x2', '\x2', '\x2',
    '\x5D3', '\x5D5', '\a', '\xA5', '\x2', '\x2', '\x5D4', '\x5D6', '\t',
    '\x14', '\x2', '\x2', '\x5D5', '\x5D4', '\x3', '\x2', '\x2', '\x2', '\x5D5',
    '\x5D6', '\x3', '\x2', '\x2', '\x2', '\x5D6', '\x5D8', '\x3', '\x2', '\x2',
    '\x2', '\x5D7', '\x5D9', '\x5', '\x20C', '\x107', '\x2', '\x5D8', '\x5D7',
    '\x3', '\x2', '\x2', '\x2', '\x5D8', '\x5D9', '\x3', '\x2', '\x2', '\x2',
    '\x5D9', '\x5DB', '\x3', '\x2', '\x2', '\x2', '\x5DA', '\x5DC', '\x5',
    '@', '!', '\x2', '\x5DB', '\x5DA', '\x3', '\x2', '\x2', '\x2', '\x5DB',
    '\x5DC', '\x3', '\x2', '\x2', '\x2', '\x5DC', '\x5DD', '\x3', '\x2', '\x2',
    '\x2', '\x5DD', '\x5E1', '\x5', '\x230', '\x119', '\x2', '\x5DE', '\x5E0',
    '\x5', '\x42', '\"', '\x2', '\x5DF', '\x5DE', '\x3', '\x2', '\x2', '\x2',
    '\x5E0', '\x5E3', '\x3', '\x2', '\x2', '\x2', '\x5E1', '\x5DF', '\x3',
    '\x2', '\x2', '\x2', '\x5E1', '\x5E2', '\x3', '\x2', '\x2', '\x2', '\x5E2',
    '\x5FE', '\x3', '\x2', '\x2', '\x2', '\x5E3', '\x5E1', '\x3', '\x2', '\x2',
    '\x2', '\x5E4', '\x5E6', '\a', '\x1D', '\x2', '\x2', '\x5E5', '\x5E7',
    '\x5', '\x20C', '\x107', '\x2', '\x5E6', '\x5E5', '\x3', '\x2', '\x2',
    '\x2', '\x5E6', '\x5E7', '\x3', '\x2', '\x2', '\x2', '\x5E7', '\x5E9',
    '\x3', '\x2', '\x2', '\x2', '\x5E8', '\x5E4', '\x3', '\x2', '\x2', '\x2',
    '\x5E8', '\x5E9', '\x3', '\x2', '\x2', '\x2', '\x5E9', '\x5EA', '\x3',
    '\x2', '\x2', '\x2', '\x5EA', '\x5EB', '\a', '>', '\x2', '\x2', '\x5EB',
    '\x5ED', '\a', 'T', '\x2', '\x2', '\x5EC', '\x5EE', '\x5', '\x20C', '\x107',
    '\x2', '\x5ED', '\x5EC', '\x3', '\x2', '\x2', '\x2', '\x5ED', '\x5EE',
    '\x3', '\x2', '\x2', '\x2', '\x5EE', '\x5EF', '\x3', '\x2', '\x2', '\x2',
    '\x5EF', '\x5F0', '\x5', '\x230', '\x119', '\x2', '\x5F0', '\x5F1', '\x5',
    'V', ',', '\x2', '\x5F1', '\x5FE', '\x3', '\x2', '\x2', '\x2', '\x5F2',
    '\x5F4', '\a', '\x1D', '\x2', '\x2', '\x5F3', '\x5F5', '\x5', '\x20C',
    '\x107', '\x2', '\x5F4', '\x5F3', '\x3', '\x2', '\x2', '\x2', '\x5F4',
    '\x5F5', '\x3', '\x2', '\x2', '\x2', '\x5F5', '\x5F7', '\x3', '\x2', '\x2',
    '\x2', '\x5F6', '\x5F2', '\x3', '\x2', '\x2', '\x2', '\x5F6', '\x5F7',
    '\x3', '\x2', '\x2', '\x2', '\x5F7', '\x5F8', '\x3', '\x2', '\x2', '\x2',
    '\x5F8', '\x5F9', '\a', '\x19', '\x2', '\x2', '\x5F9', '\x5FA', '\a',
    '\x3D8', '\x2', '\x2', '\x5FA', '\x5FB', '\x5', '\x25A', '\x12E', '\x2',
    '\x5FB', '\x5FC', '\a', '\x3D9', '\x2', '\x2', '\x5FC', '\x5FE', '\x3',
    '\x2', '\x2', '\x2', '\x5FD', '\x5BC', '\x3', '\x2', '\x2', '\x2', '\x5FD',
    '\x5D1', '\x3', '\x2', '\x2', '\x2', '\x5FD', '\x5E8', '\x3', '\x2', '\x2',
    '\x2', '\x5FD', '\x5F6', '\x3', '\x2', '\x2', '\x2', '\x5FE', 'U', '\x3',
    '\x2', '\x2', '\x2', '\x5FF', '\x600', '\a', '|', '\x2', '\x2', '\x600',
    '\x602', '\x5', '\x1F4', '\xFB', '\x2', '\x601', '\x603', '\x5', '\x230',
    '\x119', '\x2', '\x602', '\x601', '\x3', '\x2', '\x2', '\x2', '\x602',
    '\x603', '\x3', '\x2', '\x2', '\x2', '\x603', '\x606', '\x3', '\x2', '\x2',
    '\x2', '\x604', '\x605', '\a', '\x64', '\x2', '\x2', '\x605', '\x607',
    '\t', '\x15', '\x2', '\x2', '\x606', '\x604', '\x3', '\x2', '\x2', '\x2',
    '\x606', '\x607', '\x3', '\x2', '\x2', '\x2', '\x607', '\x609', '\x3',
    '\x2', '\x2', '\x2', '\x608', '\x60A', '\x5', 'X', '-', '\x2', '\x609',
    '\x608', '\x3', '\x2', '\x2', '\x2', '\x609', '\x60A', '\x3', '\x2', '\x2',
    '\x2', '\x60A', 'W', '\x3', '\x2', '\x2', '\x2', '\x60B', '\x60C', '\a',
    'l', '\x2', '\x2', '\x60C', '\x60D', '\a', '*', '\x2', '\x2', '\x60D',
    '\x611', '\x5', 'Z', '.', '\x2', '\x60E', '\x60F', '\a', 'l', '\x2', '\x2',
    '\x60F', '\x610', '\a', '\xA8', '\x2', '\x2', '\x610', '\x612', '\x5',
    'Z', '.', '\x2', '\x611', '\x60E', '\x3', '\x2', '\x2', '\x2', '\x611',
    '\x612', '\x3', '\x2', '\x2', '\x2', '\x612', '\x61C', '\x3', '\x2', '\x2',
    '\x2', '\x613', '\x614', '\a', 'l', '\x2', '\x2', '\x614', '\x615', '\a',
    '\xA8', '\x2', '\x2', '\x615', '\x619', '\x5', 'Z', '.', '\x2', '\x616',
    '\x617', '\a', 'l', '\x2', '\x2', '\x617', '\x618', '\a', '*', '\x2',
    '\x2', '\x618', '\x61A', '\x5', 'Z', '.', '\x2', '\x619', '\x616', '\x3',
    '\x2', '\x2', '\x2', '\x619', '\x61A', '\x3', '\x2', '\x2', '\x2', '\x61A',
    '\x61C', '\x3', '\x2', '\x2', '\x2', '\x61B', '\x60B', '\x3', '\x2', '\x2',
    '\x2', '\x61B', '\x613', '\x3', '\x2', '\x2', '\x2', '\x61C', 'Y', '\x3',
    '\x2', '\x2', '\x2', '\x61D', '\x624', '\a', '\x84', '\x2', '\x2', '\x61E',
    '\x624', '\a', '\x14', '\x2', '\x2', '\x61F', '\x620', '\a', '\x8C', '\x2',
    '\x2', '\x620', '\x624', '\a', 'j', '\x2', '\x2', '\x621', '\x622', '\a',
    '\x1B7', '\x2', '\x2', '\x622', '\x624', '\a', '\x106', '\x2', '\x2',
    '\x623', '\x61D', '\x3', '\x2', '\x2', '\x2', '\x623', '\x61E', '\x3',
    '\x2', '\x2', '\x2', '\x623', '\x61F', '\x3', '\x2', '\x2', '\x2', '\x623',
    '\x621', '\x3', '\x2', '\x2', '\x2', '\x624', '[', '\x3', '\x2', '\x2',
    '\x2', '\x625', '\x627', '\t', '\x14', '\x2', '\x2', '\x626', '\x628',
    '\x5', '\x20C', '\x107', '\x2', '\x627', '\x626', '\x3', '\x2', '\x2',
    '\x2', '\x627', '\x628', '\x3', '\x2', '\x2', '\x2', '\x628', '\x62A',
    '\x3', '\x2', '\x2', '\x2', '\x629', '\x62B', '\x5', '@', '!', '\x2',
    '\x62A', '\x629', '\x3', '\x2', '\x2', '\x2', '\x62A', '\x62B', '\x3',
    '\x2', '\x2', '\x2', '\x62B', '\x62C', '\x3', '\x2', '\x2', '\x2', '\x62C',
    '\x630', '\x5', '\x230', '\x119', '\x2', '\x62D', '\x62F', '\x5', '\x42',
    '\"', '\x2', '\x62E', '\x62D', '\x3', '\x2', '\x2', '\x2', '\x62F', '\x632',
    '\x3', '\x2', '\x2', '\x2', '\x630', '\x62E', '\x3', '\x2', '\x2', '\x2',
    '\x630', '\x631', '\x3', '\x2', '\x2', '\x2', '\x631', '\x642', '\x3',
    '\x2', '\x2', '\x2', '\x632', '\x630', '\x3', '\x2', '\x2', '\x2', '\x633',
    '\x635', '\t', '\x16', '\x2', '\x2', '\x634', '\x636', '\t', '\x14', '\x2',
    '\x2', '\x635', '\x634', '\x3', '\x2', '\x2', '\x2', '\x635', '\x636',
    '\x3', '\x2', '\x2', '\x2', '\x636', '\x638', '\x3', '\x2', '\x2', '\x2',
    '\x637', '\x639', '\x5', '\x20C', '\x107', '\x2', '\x638', '\x637', '\x3',
    '\x2', '\x2', '\x2', '\x638', '\x639', '\x3', '\x2', '\x2', '\x2', '\x639',
    '\x63A', '\x3', '\x2', '\x2', '\x2', '\x63A', '\x63E', '\x5', '\x230',
    '\x119', '\x2', '\x63B', '\x63D', '\x5', '\x42', '\"', '\x2', '\x63C',
    '\x63B', '\x3', '\x2', '\x2', '\x2', '\x63D', '\x640', '\x3', '\x2', '\x2',
    '\x2', '\x63E', '\x63C', '\x3', '\x2', '\x2', '\x2', '\x63E', '\x63F',
    '\x3', '\x2', '\x2', '\x2', '\x63F', '\x642', '\x3', '\x2', '\x2', '\x2',
    '\x640', '\x63E', '\x3', '\x2', '\x2', '\x2', '\x641', '\x625', '\x3',
    '\x2', '\x2', '\x2', '\x641', '\x633', '\x3', '\x2', '\x2', '\x2', '\x642',
    ']', '\x3', '\x2', '\x2', '\x2', '\x643', '\x645', '\a', '\x14D', '\x2',
    '\x2', '\x644', '\x646', '\a', '\x3CF', '\x2', '\x2', '\x645', '\x644',
    '\x3', '\x2', '\x2', '\x2', '\x645', '\x646', '\x3', '\x2', '\x2', '\x2',
    '\x646', '\x647', '\x3', '\x2', '\x2', '\x2', '\x647', '\x6D4', '\x5',
    '\x202', '\x102', '\x2', '\x648', '\x64A', '\a', '\x10F', '\x2', '\x2',
    '\x649', '\x64B', '\a', '\x3CF', '\x2', '\x2', '\x64A', '\x649', '\x3',
    '\x2', '\x2', '\x2', '\x64A', '\x64B', '\x3', '\x2', '\x2', '\x2', '\x64B',
    '\x64C', '\x3', '\x2', '\x2', '\x2', '\x64C', '\x6D4', '\x5', '\x212',
    '\x10A', '\x2', '\x64D', '\x64F', '\a', '\x110', '\x2', '\x2', '\x64E',
    '\x650', '\a', '\x3CF', '\x2', '\x2', '\x64F', '\x64E', '\x3', '\x2',
    '\x2', '\x2', '\x64F', '\x650', '\x3', '\x2', '\x2', '\x2', '\x650', '\x651',
    '\x3', '\x2', '\x2', '\x2', '\x651', '\x6D4', '\x5', '\x212', '\x10A',
    '\x2', '\x652', '\x654', '\a', '(', '\x2', '\x2', '\x653', '\x652', '\x3',
    '\x2', '\x2', '\x2', '\x653', '\x654', '\x3', '\x2', '\x2', '\x2', '\x654',
    '\x658', '\x3', '\x2', '\x2', '\x2', '\x655', '\x656', '\a', '\x18', '\x2',
    '\x2', '\x656', '\x659', '\a', '\x8C', '\x2', '\x2', '\x657', '\x659',
    '\a', '\x2B7', '\x2', '\x2', '\x658', '\x655', '\x3', '\x2', '\x2', '\x2',
    '\x658', '\x657', '\x3', '\x2', '\x2', '\x2', '\x659', '\x65B', '\x3',
    '\x2', '\x2', '\x2', '\x65A', '\x65C', '\a', '\x3CF', '\x2', '\x2', '\x65B',
    '\x65A', '\x3', '\x2', '\x2', '\x2', '\x65B', '\x65C', '\x3', '\x2', '\x2',
    '\x2', '\x65C', '\x65F', '\x3', '\x2', '\x2', '\x2', '\x65D', '\x660',
    '\x5', '\x1FE', '\x100', '\x2', '\x65E', '\x660', '\a', '(', '\x2', '\x2',
    '\x65F', '\x65D', '\x3', '\x2', '\x2', '\x2', '\x65F', '\x65E', '\x3',
    '\x2', '\x2', '\x2', '\x660', '\x6D4', '\x3', '\x2', '\x2', '\x2', '\x661',
    '\x663', '\t', '\x17', '\x2', '\x2', '\x662', '\x664', '\a', '\x3CF',
    '\x2', '\x2', '\x663', '\x662', '\x3', '\x2', '\x2', '\x2', '\x663', '\x664',
    '\x3', '\x2', '\x2', '\x2', '\x664', '\x665', '\x3', '\x2', '\x2', '\x2',
    '\x665', '\x6D4', '\t', '\x18', '\x2', '\x2', '\x666', '\x668', '\a',
    '(', '\x2', '\x2', '\x667', '\x666', '\x3', '\x2', '\x2', '\x2', '\x667',
    '\x668', '\x3', '\x2', '\x2', '\x2', '\x668', '\x669', '\x3', '\x2', '\x2',
    '\x2', '\x669', '\x66B', '\a', '\x1A', '\x2', '\x2', '\x66A', '\x66C',
    '\a', '\x3CF', '\x2', '\x2', '\x66B', '\x66A', '\x3', '\x2', '\x2', '\x2',
    '\x66B', '\x66C', '\x3', '\x2', '\x2', '\x2', '\x66C', '\x66D', '\x3',
    '\x2', '\x2', '\x2', '\x66D', '\x6D4', '\x5', '\x200', '\x101', '\x2',
    '\x66E', '\x670', '\a', '\x128', '\x2', '\x2', '\x66F', '\x671', '\a',
    '\x3CF', '\x2', '\x2', '\x670', '\x66F', '\x3', '\x2', '\x2', '\x2', '\x670',
    '\x671', '\x3', '\x2', '\x2', '\x2', '\x671', '\x672', '\x3', '\x2', '\x2',
    '\x2', '\x672', '\x6D4', '\a', '\x3E7', '\x2', '\x2', '\x673', '\x675',
    '\a', '\x12D', '\x2', '\x2', '\x674', '\x676', '\a', '\x3CF', '\x2', '\x2',
    '\x675', '\x674', '\x3', '\x2', '\x2', '\x2', '\x675', '\x676', '\x3',
    '\x2', '\x2', '\x2', '\x676', '\x677', '\x3', '\x2', '\x2', '\x2', '\x677',
    '\x6D4', '\t', '\x19', '\x2', '\x2', '\x678', '\x67A', '\a', '\x12F',
    '\x2', '\x2', '\x679', '\x67B', '\a', '\x3CF', '\x2', '\x2', '\x67A',
    '\x679', '\x3', '\x2', '\x2', '\x2', '\x67A', '\x67B', '\x3', '\x2', '\x2',
    '\x2', '\x67B', '\x67C', '\x3', '\x2', '\x2', '\x2', '\x67C', '\x6D4',
    '\a', '\x3E7', '\x2', '\x2', '\x67D', '\x67E', '\a', '\x13A', '\x2', '\x2',
    '\x67E', '\x680', '\a', '\x141', '\x2', '\x2', '\x67F', '\x681', '\a',
    '\x3CF', '\x2', '\x2', '\x680', '\x67F', '\x3', '\x2', '\x2', '\x2', '\x680',
    '\x681', '\x3', '\x2', '\x2', '\x2', '\x681', '\x682', '\x3', '\x2', '\x2',
    '\x2', '\x682', '\x6D4', '\a', '\x3E7', '\x2', '\x2', '\x683', '\x685',
    '\a', '\x13F', '\x2', '\x2', '\x684', '\x686', '\a', '\x3CF', '\x2', '\x2',
    '\x685', '\x684', '\x3', '\x2', '\x2', '\x2', '\x685', '\x686', '\x3',
    '\x2', '\x2', '\x2', '\x686', '\x687', '\x3', '\x2', '\x2', '\x2', '\x687',
    '\x6D4', '\t', '\x18', '\x2', '\x2', '\x688', '\x68A', '\a', '\x14A',
    '\x2', '\x2', '\x689', '\x68B', '\a', '\x3CF', '\x2', '\x2', '\x68A',
    '\x689', '\x3', '\x2', '\x2', '\x2', '\x68A', '\x68B', '\x3', '\x2', '\x2',
    '\x2', '\x68B', '\x68C', '\x3', '\x2', '\x2', '\x2', '\x68C', '\x6D4',
    '\a', '\x3E7', '\x2', '\x2', '\x68D', '\x68E', '\a', 'J', '\x2', '\x2',
    '\x68E', '\x690', '\a', '\x141', '\x2', '\x2', '\x68F', '\x691', '\a',
    '\x3CF', '\x2', '\x2', '\x690', '\x68F', '\x3', '\x2', '\x2', '\x2', '\x690',
    '\x691', '\x3', '\x2', '\x2', '\x2', '\x691', '\x692', '\x3', '\x2', '\x2',
    '\x2', '\x692', '\x6D4', '\a', '\x3E7', '\x2', '\x2', '\x693', '\x695',
    '\a', '\x177', '\x2', '\x2', '\x694', '\x696', '\a', '\x3CF', '\x2', '\x2',
    '\x695', '\x694', '\x3', '\x2', '\x2', '\x2', '\x695', '\x696', '\x3',
    '\x2', '\x2', '\x2', '\x696', '\x697', '\x3', '\x2', '\x2', '\x2', '\x697',
    '\x6D4', '\t', '\x1A', '\x2', '\x2', '\x698', '\x69A', '\a', '\x182',
    '\x2', '\x2', '\x699', '\x69B', '\a', '\x3CF', '\x2', '\x2', '\x69A',
    '\x699', '\x3', '\x2', '\x2', '\x2', '\x69A', '\x69B', '\x3', '\x2', '\x2',
    '\x2', '\x69B', '\x69C', '\x3', '\x2', '\x2', '\x2', '\x69C', '\x6D4',
    '\x5', '\x214', '\x10B', '\x2', '\x69D', '\x69F', '\a', '\x1A3', '\x2',
    '\x2', '\x69E', '\x6A0', '\a', '\x3CF', '\x2', '\x2', '\x69F', '\x69E',
    '\x3', '\x2', '\x2', '\x2', '\x69F', '\x6A0', '\x3', '\x2', '\x2', '\x2',
    '\x6A0', '\x6A1', '\x3', '\x2', '\x2', '\x2', '\x6A1', '\x6D4', '\x5',
    '\x212', '\x10A', '\x2', '\x6A2', '\x6A4', '\a', '\x1AC', '\x2', '\x2',
    '\x6A3', '\x6A5', '\a', '\x3CF', '\x2', '\x2', '\x6A4', '\x6A3', '\x3',
    '\x2', '\x2', '\x2', '\x6A4', '\x6A5', '\x3', '\x2', '\x2', '\x2', '\x6A5',
    '\x6A6', '\x3', '\x2', '\x2', '\x2', '\x6A6', '\x6D4', '\x5', '\x212',
    '\x10A', '\x2', '\x6A7', '\x6A9', '\a', '\x1C5', '\x2', '\x2', '\x6A8',
    '\x6AA', '\a', '\x3CF', '\x2', '\x2', '\x6A9', '\x6A8', '\x3', '\x2',
    '\x2', '\x2', '\x6A9', '\x6AA', '\x3', '\x2', '\x2', '\x2', '\x6AA', '\x6AB',
    '\x3', '\x2', '\x2', '\x2', '\x6AB', '\x6D4', '\t', '\x1B', '\x2', '\x2',
    '\x6AC', '\x6AE', '\a', '\x1CB', '\x2', '\x2', '\x6AD', '\x6AF', '\a',
    '\x3CF', '\x2', '\x2', '\x6AE', '\x6AD', '\x3', '\x2', '\x2', '\x2', '\x6AE',
    '\x6AF', '\x3', '\x2', '\x2', '\x2', '\x6AF', '\x6B0', '\x3', '\x2', '\x2',
    '\x2', '\x6B0', '\x6D4', '\a', '\x3E7', '\x2', '\x2', '\x6B1', '\x6B3',
    '\a', '\x1F7', '\x2', '\x2', '\x6B2', '\x6B4', '\a', '\x3CF', '\x2', '\x2',
    '\x6B3', '\x6B2', '\x3', '\x2', '\x2', '\x2', '\x6B3', '\x6B4', '\x3',
    '\x2', '\x2', '\x2', '\x6B4', '\x6B5', '\x3', '\x2', '\x2', '\x2', '\x6B5',
    '\x6D4', '\t', '\x1C', '\x2', '\x2', '\x6B6', '\x6B8', '\a', '\x212',
    '\x2', '\x2', '\x6B7', '\x6B9', '\a', '\x3CF', '\x2', '\x2', '\x6B8',
    '\x6B7', '\x3', '\x2', '\x2', '\x2', '\x6B8', '\x6B9', '\x3', '\x2', '\x2',
    '\x2', '\x6B9', '\x6BA', '\x3', '\x2', '\x2', '\x2', '\x6BA', '\x6D4',
    '\t', '\x1B', '\x2', '\x2', '\x6BB', '\x6BD', '\a', '\x213', '\x2', '\x2',
    '\x6BC', '\x6BE', '\a', '\x3CF', '\x2', '\x2', '\x6BD', '\x6BC', '\x3',
    '\x2', '\x2', '\x2', '\x6BD', '\x6BE', '\x3', '\x2', '\x2', '\x2', '\x6BE',
    '\x6BF', '\x3', '\x2', '\x2', '\x2', '\x6BF', '\x6D4', '\t', '\x1B', '\x2',
    '\x2', '\x6C0', '\x6C2', '\a', '\x214', '\x2', '\x2', '\x6C1', '\x6C3',
    '\a', '\x3CF', '\x2', '\x2', '\x6C2', '\x6C1', '\x3', '\x2', '\x2', '\x2',
    '\x6C2', '\x6C3', '\x3', '\x2', '\x2', '\x2', '\x6C3', '\x6C4', '\x3',
    '\x2', '\x2', '\x2', '\x6C4', '\x6D4', '\x5', '\x212', '\x10A', '\x2',
    '\x6C5', '\x6C6', '\a', '\x222', '\x2', '\x2', '\x6C6', '\x6C8', '\x5',
    '\x20C', '\x107', '\x2', '\x6C7', '\x6C9', '\x5', '`', '\x31', '\x2',
    '\x6C8', '\x6C7', '\x3', '\x2', '\x2', '\x2', '\x6C8', '\x6C9', '\x3',
    '\x2', '\x2', '\x2', '\x6C9', '\x6D4', '\x3', '\x2', '\x2', '\x2', '\x6CA',
    '\x6D4', '\x5', '`', '\x31', '\x2', '\x6CB', '\x6CD', '\a', '\xA4', '\x2',
    '\x2', '\x6CC', '\x6CE', '\a', '\x3CF', '\x2', '\x2', '\x6CD', '\x6CC',
    '\x3', '\x2', '\x2', '\x2', '\x6CD', '\x6CE', '\x3', '\x2', '\x2', '\x2',
    '\x6CE', '\x6CF', '\x3', '\x2', '\x2', '\x2', '\x6CF', '\x6D0', '\a',
    '\x3D8', '\x2', '\x2', '\x6D0', '\x6D1', '\x5', '\x22E', '\x118', '\x2',
    '\x6D1', '\x6D2', '\a', '\x3D9', '\x2', '\x2', '\x6D2', '\x6D4', '\x3',
    '\x2', '\x2', '\x2', '\x6D3', '\x643', '\x3', '\x2', '\x2', '\x2', '\x6D3',
    '\x648', '\x3', '\x2', '\x2', '\x2', '\x6D3', '\x64D', '\x3', '\x2', '\x2',
    '\x2', '\x6D3', '\x653', '\x3', '\x2', '\x2', '\x2', '\x6D3', '\x661',
    '\x3', '\x2', '\x2', '\x2', '\x6D3', '\x667', '\x3', '\x2', '\x2', '\x2',
    '\x6D3', '\x66E', '\x3', '\x2', '\x2', '\x2', '\x6D3', '\x673', '\x3',
    '\x2', '\x2', '\x2', '\x6D3', '\x678', '\x3', '\x2', '\x2', '\x2', '\x6D3',
    '\x67D', '\x3', '\x2', '\x2', '\x2', '\x6D3', '\x683', '\x3', '\x2', '\x2',
    '\x2', '\x6D3', '\x688', '\x3', '\x2', '\x2', '\x2', '\x6D3', '\x68D',
    '\x3', '\x2', '\x2', '\x2', '\x6D3', '\x693', '\x3', '\x2', '\x2', '\x2',
    '\x6D3', '\x698', '\x3', '\x2', '\x2', '\x2', '\x6D3', '\x69D', '\x3',
    '\x2', '\x2', '\x2', '\x6D3', '\x6A2', '\x3', '\x2', '\x2', '\x2', '\x6D3',
    '\x6A7', '\x3', '\x2', '\x2', '\x2', '\x6D3', '\x6AC', '\x3', '\x2', '\x2',
    '\x2', '\x6D3', '\x6B1', '\x3', '\x2', '\x2', '\x2', '\x6D3', '\x6B6',
    '\x3', '\x2', '\x2', '\x2', '\x6D3', '\x6BB', '\x3', '\x2', '\x2', '\x2',
    '\x6D3', '\x6C0', '\x3', '\x2', '\x2', '\x2', '\x6D3', '\x6C5', '\x3',
    '\x2', '\x2', '\x2', '\x6D3', '\x6CA', '\x3', '\x2', '\x2', '\x2', '\x6D3',
    '\x6CB', '\x3', '\x2', '\x2', '\x2', '\x6D4', '_', '\x3', '\x2', '\x2',
    '\x2', '\x6D5', '\x6D6', '\a', '\x217', '\x2', '\x2', '\x6D6', '\x6D7',
    '\t', '\x12', '\x2', '\x2', '\x6D7', '\x61', '\x3', '\x2', '\x2', '\x2',
    '\x6D8', '\x6D9', '\a', 'u', '\x2', '\x2', '\x6D9', '\x6DA', '\a', '\x12',
    '\x2', '\x2', '\x6DA', '\x6DD', '\x5', '\x64', '\x33', '\x2', '\x6DB',
    '\x6DC', '\a', '\x1CA', '\x2', '\x2', '\x6DC', '\x6DE', '\x5', '\x212',
    '\x10A', '\x2', '\x6DD', '\x6DB', '\x3', '\x2', '\x2', '\x2', '\x6DD',
    '\x6DE', '\x3', '\x2', '\x2', '\x2', '\x6DE', '\x6E6', '\x3', '\x2', '\x2',
    '\x2', '\x6DF', '\x6E0', '\a', '\x21C', '\x2', '\x2', '\x6E0', '\x6E1',
    '\a', '\x12', '\x2', '\x2', '\x6E1', '\x6E4', '\x5', '\x66', '\x34', '\x2',
    '\x6E2', '\x6E3', '\a', '\x21D', '\x2', '\x2', '\x6E3', '\x6E5', '\x5',
    '\x212', '\x10A', '\x2', '\x6E4', '\x6E2', '\x3', '\x2', '\x2', '\x2',
    '\x6E4', '\x6E5', '\x3', '\x2', '\x2', '\x2', '\x6E5', '\x6E7', '\x3',
    '\x2', '\x2', '\x2', '\x6E6', '\x6DF', '\x3', '\x2', '\x2', '\x2', '\x6E6',
    '\x6E7', '\x3', '\x2', '\x2', '\x2', '\x6E7', '\x6F3', '\x3', '\x2', '\x2',
    '\x2', '\x6E8', '\x6E9', '\a', '\x3D8', '\x2', '\x2', '\x6E9', '\x6EE',
    '\x5', 'h', '\x35', '\x2', '\x6EA', '\x6EB', '\a', '\x3DA', '\x2', '\x2',
    '\x6EB', '\x6ED', '\x5', 'h', '\x35', '\x2', '\x6EC', '\x6EA', '\x3',
    '\x2', '\x2', '\x2', '\x6ED', '\x6F0', '\x3', '\x2', '\x2', '\x2', '\x6EE',
    '\x6EC', '\x3', '\x2', '\x2', '\x2', '\x6EE', '\x6EF', '\x3', '\x2', '\x2',
    '\x2', '\x6EF', '\x6F1', '\x3', '\x2', '\x2', '\x2', '\x6F0', '\x6EE',
    '\x3', '\x2', '\x2', '\x2', '\x6F1', '\x6F2', '\a', '\x3D9', '\x2', '\x2',
    '\x6F2', '\x6F4', '\x3', '\x2', '\x2', '\x2', '\x6F3', '\x6E8', '\x3',
    '\x2', '\x2', '\x2', '\x6F3', '\x6F4', '\x3', '\x2', '\x2', '\x2', '\x6F4',
    '\x63', '\x3', '\x2', '\x2', '\x2', '\x6F5', '\x6F7', '\a', '\\', '\x2',
    '\x2', '\x6F6', '\x6F5', '\x3', '\x2', '\x2', '\x2', '\x6F6', '\x6F7',
    '\x3', '\x2', '\x2', '\x2', '\x6F7', '\x6F8', '\x3', '\x2', '\x2', '\x2',
    '\x6F8', '\x6F9', '\a', '\x16D', '\x2', '\x2', '\x6F9', '\x6FA', '\a',
    '\x3D8', '\x2', '\x2', '\x6FA', '\x6FB', '\x5', '\x25A', '\x12E', '\x2',
    '\x6FB', '\x6FC', '\a', '\x3D9', '\x2', '\x2', '\x6FC', '\x723', '\x3',
    '\x2', '\x2', '\x2', '\x6FD', '\x6FF', '\a', '\\', '\x2', '\x2', '\x6FE',
    '\x6FD', '\x3', '\x2', '\x2', '\x2', '\x6FE', '\x6FF', '\x3', '\x2', '\x2',
    '\x2', '\x6FF', '\x700', '\x3', '\x2', '\x2', '\x2', '\x700', '\x704',
    '\a', 'T', '\x2', '\x2', '\x701', '\x702', '\a', '\x109', '\x2', '\x2',
    '\x702', '\x703', '\a', '\x3CF', '\x2', '\x2', '\x703', '\x705', '\t',
    '\x1D', '\x2', '\x2', '\x704', '\x701', '\x3', '\x2', '\x2', '\x2', '\x704',
    '\x705', '\x3', '\x2', '\x2', '\x2', '\x705', '\x706', '\x3', '\x2', '\x2',
    '\x2', '\x706', '\x707', '\a', '\x3D8', '\x2', '\x2', '\x707', '\x708',
    '\x5', '\x22C', '\x117', '\x2', '\x708', '\x709', '\a', '\x3D9', '\x2',
    '\x2', '\x709', '\x723', '\x3', '\x2', '\x2', '\x2', '\x70A', '\x714',
    '\a', 'y', '\x2', '\x2', '\x70B', '\x70C', '\a', '\x3D8', '\x2', '\x2',
    '\x70C', '\x70D', '\x5', '\x25A', '\x12E', '\x2', '\x70D', '\x70E', '\a',
    '\x3D9', '\x2', '\x2', '\x70E', '\x715', '\x3', '\x2', '\x2', '\x2', '\x70F',
    '\x710', '\a', '\x125', '\x2', '\x2', '\x710', '\x711', '\a', '\x3D8',
    '\x2', '\x2', '\x711', '\x712', '\x5', '\x22C', '\x117', '\x2', '\x712',
    '\x713', '\a', '\x3D9', '\x2', '\x2', '\x713', '\x715', '\x3', '\x2',
    '\x2', '\x2', '\x714', '\x70B', '\x3', '\x2', '\x2', '\x2', '\x714', '\x70F',
    '\x3', '\x2', '\x2', '\x2', '\x715', '\x723', '\x3', '\x2', '\x2', '\x2',
    '\x716', '\x720', '\a', '\x188', '\x2', '\x2', '\x717', '\x718', '\a',
    '\x3D8', '\x2', '\x2', '\x718', '\x719', '\x5', '\x25A', '\x12E', '\x2',
    '\x719', '\x71A', '\a', '\x3D9', '\x2', '\x2', '\x71A', '\x721', '\x3',
    '\x2', '\x2', '\x2', '\x71B', '\x71C', '\a', '\x125', '\x2', '\x2', '\x71C',
    '\x71D', '\a', '\x3D8', '\x2', '\x2', '\x71D', '\x71E', '\x5', '\x22C',
    '\x117', '\x2', '\x71E', '\x71F', '\a', '\x3D9', '\x2', '\x2', '\x71F',
    '\x721', '\x3', '\x2', '\x2', '\x2', '\x720', '\x717', '\x3', '\x2', '\x2',
    '\x2', '\x720', '\x71B', '\x3', '\x2', '\x2', '\x2', '\x721', '\x723',
    '\x3', '\x2', '\x2', '\x2', '\x722', '\x6F6', '\x3', '\x2', '\x2', '\x2',
    '\x722', '\x6FE', '\x3', '\x2', '\x2', '\x2', '\x722', '\x70A', '\x3',
    '\x2', '\x2', '\x2', '\x722', '\x716', '\x3', '\x2', '\x2', '\x2', '\x723',
    '\x65', '\x3', '\x2', '\x2', '\x2', '\x724', '\x726', '\a', '\\', '\x2',
    '\x2', '\x725', '\x724', '\x3', '\x2', '\x2', '\x2', '\x725', '\x726',
    '\x3', '\x2', '\x2', '\x2', '\x726', '\x727', '\x3', '\x2', '\x2', '\x2',
    '\x727', '\x728', '\a', '\x16D', '\x2', '\x2', '\x728', '\x729', '\a',
    '\x3D8', '\x2', '\x2', '\x729', '\x72A', '\x5', '\x25A', '\x12E', '\x2',
    '\x72A', '\x72B', '\a', '\x3D9', '\x2', '\x2', '\x72B', '\x73A', '\x3',
    '\x2', '\x2', '\x2', '\x72C', '\x72E', '\a', '\\', '\x2', '\x2', '\x72D',
    '\x72C', '\x3', '\x2', '\x2', '\x2', '\x72D', '\x72E', '\x3', '\x2', '\x2',
    '\x2', '\x72E', '\x72F', '\x3', '\x2', '\x2', '\x2', '\x72F', '\x733',
    '\a', 'T', '\x2', '\x2', '\x730', '\x731', '\a', '\x109', '\x2', '\x2',
    '\x731', '\x732', '\a', '\x3CF', '\x2', '\x2', '\x732', '\x734', '\t',
    '\x1D', '\x2', '\x2', '\x733', '\x730', '\x3', '\x2', '\x2', '\x2', '\x733',
    '\x734', '\x3', '\x2', '\x2', '\x2', '\x734', '\x735', '\x3', '\x2', '\x2',
    '\x2', '\x735', '\x736', '\a', '\x3D8', '\x2', '\x2', '\x736', '\x737',
    '\x5', '\x22C', '\x117', '\x2', '\x737', '\x738', '\a', '\x3D9', '\x2',
    '\x2', '\x738', '\x73A', '\x3', '\x2', '\x2', '\x2', '\x739', '\x725',
    '\x3', '\x2', '\x2', '\x2', '\x739', '\x72D', '\x3', '\x2', '\x2', '\x2',
    '\x73A', 'g', '\x3', '\x2', '\x2', '\x2', '\x73B', '\x73C', '\a', 'u',
    '\x2', '\x2', '\x73C', '\x73D', '\x5', '\x20C', '\x107', '\x2', '\x73D',
    '\x73E', '\a', '\xAC', '\x2', '\x2', '\x73E', '\x73F', '\a', '\x186',
    '\x2', '\x2', '\x73F', '\x740', '\a', '\x225', '\x2', '\x2', '\x740',
    '\x741', '\a', '\x3D8', '\x2', '\x2', '\x741', '\x746', '\x5', 'j', '\x36',
    '\x2', '\x742', '\x743', '\a', '\x3DA', '\x2', '\x2', '\x743', '\x745',
    '\x5', 'j', '\x36', '\x2', '\x744', '\x742', '\x3', '\x2', '\x2', '\x2',
    '\x745', '\x748', '\x3', '\x2', '\x2', '\x2', '\x746', '\x744', '\x3',
    '\x2', '\x2', '\x2', '\x746', '\x747', '\x3', '\x2', '\x2', '\x2', '\x747',
    '\x749', '\x3', '\x2', '\x2', '\x2', '\x748', '\x746', '\x3', '\x2', '\x2',
    '\x2', '\x749', '\x74D', '\a', '\x3D9', '\x2', '\x2', '\x74A', '\x74C',
    '\x5', 'p', '\x39', '\x2', '\x74B', '\x74A', '\x3', '\x2', '\x2', '\x2',
    '\x74C', '\x74F', '\x3', '\x2', '\x2', '\x2', '\x74D', '\x74B', '\x3',
    '\x2', '\x2', '\x2', '\x74D', '\x74E', '\x3', '\x2', '\x2', '\x2', '\x74E',
    '\x758', '\x3', '\x2', '\x2', '\x2', '\x74F', '\x74D', '\x3', '\x2', '\x2',
    '\x2', '\x750', '\x755', '\x5', 'n', '\x38', '\x2', '\x751', '\x752',
    '\a', '\x3DA', '\x2', '\x2', '\x752', '\x754', '\x5', 'n', '\x38', '\x2',
    '\x753', '\x751', '\x3', '\x2', '\x2', '\x2', '\x754', '\x757', '\x3',
    '\x2', '\x2', '\x2', '\x755', '\x753', '\x3', '\x2', '\x2', '\x2', '\x755',
    '\x756', '\x3', '\x2', '\x2', '\x2', '\x756', '\x759', '\x3', '\x2', '\x2',
    '\x2', '\x757', '\x755', '\x3', '\x2', '\x2', '\x2', '\x758', '\x750',
    '\x3', '\x2', '\x2', '\x2', '\x758', '\x759', '\x3', '\x2', '\x2', '\x2',
    '\x759', '\x7BF', '\x3', '\x2', '\x2', '\x2', '\x75A', '\x75B', '\a',
    'u', '\x2', '\x2', '\x75B', '\x75C', '\x5', '\x20C', '\x107', '\x2', '\x75C',
    '\x75D', '\a', '\xAC', '\x2', '\x2', '\x75D', '\x75E', '\a', '\x186',
    '\x2', '\x2', '\x75E', '\x75F', '\a', '\x225', '\x2', '\x2', '\x75F',
    '\x763', '\x5', 'j', '\x36', '\x2', '\x760', '\x762', '\x5', 'p', '\x39',
    '\x2', '\x761', '\x760', '\x3', '\x2', '\x2', '\x2', '\x762', '\x765',
    '\x3', '\x2', '\x2', '\x2', '\x763', '\x761', '\x3', '\x2', '\x2', '\x2',
    '\x763', '\x764', '\x3', '\x2', '\x2', '\x2', '\x764', '\x76E', '\x3',
    '\x2', '\x2', '\x2', '\x765', '\x763', '\x3', '\x2', '\x2', '\x2', '\x766',
    '\x76B', '\x5', 'n', '\x38', '\x2', '\x767', '\x768', '\a', '\x3DA', '\x2',
    '\x2', '\x768', '\x76A', '\x5', 'n', '\x38', '\x2', '\x769', '\x767',
    '\x3', '\x2', '\x2', '\x2', '\x76A', '\x76D', '\x3', '\x2', '\x2', '\x2',
    '\x76B', '\x769', '\x3', '\x2', '\x2', '\x2', '\x76B', '\x76C', '\x3',
    '\x2', '\x2', '\x2', '\x76C', '\x76F', '\x3', '\x2', '\x2', '\x2', '\x76D',
    '\x76B', '\x3', '\x2', '\x2', '\x2', '\x76E', '\x766', '\x3', '\x2', '\x2',
    '\x2', '\x76E', '\x76F', '\x3', '\x2', '\x2', '\x2', '\x76F', '\x7BF',
    '\x3', '\x2', '\x2', '\x2', '\x770', '\x771', '\a', 'u', '\x2', '\x2',
    '\x771', '\x772', '\x5', '\x20C', '\x107', '\x2', '\x772', '\x773', '\a',
    '\xAC', '\x2', '\x2', '\x773', '\x774', '\a', 'I', '\x2', '\x2', '\x774',
    '\x775', '\a', '\x3D8', '\x2', '\x2', '\x775', '\x77A', '\x5', 'j', '\x36',
    '\x2', '\x776', '\x777', '\a', '\x3DA', '\x2', '\x2', '\x777', '\x779',
    '\x5', 'j', '\x36', '\x2', '\x778', '\x776', '\x3', '\x2', '\x2', '\x2',
    '\x779', '\x77C', '\x3', '\x2', '\x2', '\x2', '\x77A', '\x778', '\x3',
    '\x2', '\x2', '\x2', '\x77A', '\x77B', '\x3', '\x2', '\x2', '\x2', '\x77B',
    '\x77D', '\x3', '\x2', '\x2', '\x2', '\x77C', '\x77A', '\x3', '\x2', '\x2',
    '\x2', '\x77D', '\x781', '\a', '\x3D9', '\x2', '\x2', '\x77E', '\x780',
    '\x5', 'p', '\x39', '\x2', '\x77F', '\x77E', '\x3', '\x2', '\x2', '\x2',
    '\x780', '\x783', '\x3', '\x2', '\x2', '\x2', '\x781', '\x77F', '\x3',
    '\x2', '\x2', '\x2', '\x781', '\x782', '\x3', '\x2', '\x2', '\x2', '\x782',
    '\x78C', '\x3', '\x2', '\x2', '\x2', '\x783', '\x781', '\x3', '\x2', '\x2',
    '\x2', '\x784', '\x789', '\x5', 'n', '\x38', '\x2', '\x785', '\x786',
    '\a', '\x3DA', '\x2', '\x2', '\x786', '\x788', '\x5', 'n', '\x38', '\x2',
    '\x787', '\x785', '\x3', '\x2', '\x2', '\x2', '\x788', '\x78B', '\x3',
    '\x2', '\x2', '\x2', '\x789', '\x787', '\x3', '\x2', '\x2', '\x2', '\x789',
    '\x78A', '\x3', '\x2', '\x2', '\x2', '\x78A', '\x78D', '\x3', '\x2', '\x2',
    '\x2', '\x78B', '\x789', '\x3', '\x2', '\x2', '\x2', '\x78C', '\x784',
    '\x3', '\x2', '\x2', '\x2', '\x78C', '\x78D', '\x3', '\x2', '\x2', '\x2',
    '\x78D', '\x7BF', '\x3', '\x2', '\x2', '\x2', '\x78E', '\x78F', '\a',
    'u', '\x2', '\x2', '\x78F', '\x790', '\x5', '\x20C', '\x107', '\x2', '\x790',
    '\x791', '\a', '\xAC', '\x2', '\x2', '\x791', '\x792', '\a', 'I', '\x2',
    '\x2', '\x792', '\x793', '\a', '\x3D8', '\x2', '\x2', '\x793', '\x798',
    '\x5', 'l', '\x37', '\x2', '\x794', '\x795', '\a', '\x3DA', '\x2', '\x2',
    '\x795', '\x797', '\x5', 'l', '\x37', '\x2', '\x796', '\x794', '\x3',
    '\x2', '\x2', '\x2', '\x797', '\x79A', '\x3', '\x2', '\x2', '\x2', '\x798',
    '\x796', '\x3', '\x2', '\x2', '\x2', '\x798', '\x799', '\x3', '\x2', '\x2',
    '\x2', '\x799', '\x79B', '\x3', '\x2', '\x2', '\x2', '\x79A', '\x798',
    '\x3', '\x2', '\x2', '\x2', '\x79B', '\x79F', '\a', '\x3D9', '\x2', '\x2',
    '\x79C', '\x79E', '\x5', 'p', '\x39', '\x2', '\x79D', '\x79C', '\x3',
    '\x2', '\x2', '\x2', '\x79E', '\x7A1', '\x3', '\x2', '\x2', '\x2', '\x79F',
    '\x79D', '\x3', '\x2', '\x2', '\x2', '\x79F', '\x7A0', '\x3', '\x2', '\x2',
    '\x2', '\x7A0', '\x7AA', '\x3', '\x2', '\x2', '\x2', '\x7A1', '\x79F',
    '\x3', '\x2', '\x2', '\x2', '\x7A2', '\x7A7', '\x5', 'n', '\x38', '\x2',
    '\x7A3', '\x7A4', '\a', '\x3DA', '\x2', '\x2', '\x7A4', '\x7A6', '\x5',
    'n', '\x38', '\x2', '\x7A5', '\x7A3', '\x3', '\x2', '\x2', '\x2', '\x7A6',
    '\x7A9', '\x3', '\x2', '\x2', '\x2', '\x7A7', '\x7A5', '\x3', '\x2', '\x2',
    '\x2', '\x7A7', '\x7A8', '\x3', '\x2', '\x2', '\x2', '\x7A8', '\x7AB',
    '\x3', '\x2', '\x2', '\x2', '\x7A9', '\x7A7', '\x3', '\x2', '\x2', '\x2',
    '\x7AA', '\x7A2', '\x3', '\x2', '\x2', '\x2', '\x7AA', '\x7AB', '\x3',
    '\x2', '\x2', '\x2', '\x7AB', '\x7BF', '\x3', '\x2', '\x2', '\x2', '\x7AC',
    '\x7AD', '\a', 'u', '\x2', '\x2', '\x7AD', '\x7B1', '\x5', '\x20C', '\x107',
    '\x2', '\x7AE', '\x7B0', '\x5', 'p', '\x39', '\x2', '\x7AF', '\x7AE',
    '\x3', '\x2', '\x2', '\x2', '\x7B0', '\x7B3', '\x3', '\x2', '\x2', '\x2',
    '\x7B1', '\x7AF', '\x3', '\x2', '\x2', '\x2', '\x7B1', '\x7B2', '\x3',
    '\x2', '\x2', '\x2', '\x7B2', '\x7BC', '\x3', '\x2', '\x2', '\x2', '\x7B3',
    '\x7B1', '\x3', '\x2', '\x2', '\x2', '\x7B4', '\x7B9', '\x5', 'n', '\x38',
    '\x2', '\x7B5', '\x7B6', '\a', '\x3DA', '\x2', '\x2', '\x7B6', '\x7B8',
    '\x5', 'n', '\x38', '\x2', '\x7B7', '\x7B5', '\x3', '\x2', '\x2', '\x2',
    '\x7B8', '\x7BB', '\x3', '\x2', '\x2', '\x2', '\x7B9', '\x7B7', '\x3',
    '\x2', '\x2', '\x2', '\x7B9', '\x7BA', '\x3', '\x2', '\x2', '\x2', '\x7BA',
    '\x7BD', '\x3', '\x2', '\x2', '\x2', '\x7BB', '\x7B9', '\x3', '\x2', '\x2',
    '\x2', '\x7BC', '\x7B4', '\x3', '\x2', '\x2', '\x2', '\x7BC', '\x7BD',
    '\x3', '\x2', '\x2', '\x2', '\x7BD', '\x7BF', '\x3', '\x2', '\x2', '\x2',
    '\x7BE', '\x73B', '\x3', '\x2', '\x2', '\x2', '\x7BE', '\x75A', '\x3',
    '\x2', '\x2', '\x2', '\x7BE', '\x770', '\x3', '\x2', '\x2', '\x2', '\x7BE',
    '\x78E', '\x3', '\x2', '\x2', '\x2', '\x7BE', '\x7AC', '\x3', '\x2', '\x2',
    '\x2', '\x7BF', 'i', '\x3', '\x2', '\x2', '\x2', '\x7C0', '\x7C4', '\x5',
    '\x21E', '\x110', '\x2', '\x7C1', '\x7C4', '\x5', '\x25A', '\x12E', '\x2',
    '\x7C2', '\x7C4', '\a', '\x65', '\x2', '\x2', '\x7C3', '\x7C0', '\x3',
    '\x2', '\x2', '\x2', '\x7C3', '\x7C1', '\x3', '\x2', '\x2', '\x2', '\x7C3',
    '\x7C2', '\x3', '\x2', '\x2', '\x2', '\x7C4', 'k', '\x3', '\x2', '\x2',
    '\x2', '\x7C5', '\x7C6', '\a', '\x3D8', '\x2', '\x2', '\x7C6', '\x7C9',
    '\x5', 'j', '\x36', '\x2', '\x7C7', '\x7C8', '\a', '\x3DA', '\x2', '\x2',
    '\x7C8', '\x7CA', '\x5', 'j', '\x36', '\x2', '\x7C9', '\x7C7', '\x3',
    '\x2', '\x2', '\x2', '\x7CA', '\x7CB', '\x3', '\x2', '\x2', '\x2', '\x7CB',
    '\x7C9', '\x3', '\x2', '\x2', '\x2', '\x7CB', '\x7CC', '\x3', '\x2', '\x2',
    '\x2', '\x7CC', '\x7CD', '\x3', '\x2', '\x2', '\x2', '\x7CD', '\x7CE',
    '\a', '\x3D9', '\x2', '\x2', '\x7CE', 'm', '\x3', '\x2', '\x2', '\x2',
    '\x7CF', '\x7D0', '\a', '\x21C', '\x2', '\x2', '\x7D0', '\x7D4', '\x5',
    '\x20C', '\x107', '\x2', '\x7D1', '\x7D3', '\x5', 'p', '\x39', '\x2',
    '\x7D2', '\x7D1', '\x3', '\x2', '\x2', '\x2', '\x7D3', '\x7D6', '\x3',
    '\x2', '\x2', '\x2', '\x7D4', '\x7D2', '\x3', '\x2', '\x2', '\x2', '\x7D4',
    '\x7D5', '\x3', '\x2', '\x2', '\x2', '\x7D5', 'o', '\x3', '\x2', '\x2',
    '\x2', '\x7D6', '\x7D4', '\x3', '\x2', '\x2', '\x2', '\x7D7', '\x7D9',
    '\a', '\x217', '\x2', '\x2', '\x7D8', '\x7D7', '\x3', '\x2', '\x2', '\x2',
    '\x7D8', '\x7D9', '\x3', '\x2', '\x2', '\x2', '\x7D9', '\x7DA', '\x3',
    '\x2', '\x2', '\x2', '\x7DA', '\x7DC', '\a', '\x14D', '\x2', '\x2', '\x7DB',
    '\x7DD', '\a', '\x3CF', '\x2', '\x2', '\x7DC', '\x7DB', '\x3', '\x2',
    '\x2', '\x2', '\x7DC', '\x7DD', '\x3', '\x2', '\x2', '\x2', '\x7DD', '\x7DE',
    '\x3', '\x2', '\x2', '\x2', '\x7DE', '\x805', '\x5', '\x202', '\x102',
    '\x2', '\x7DF', '\x7E1', '\a', '\x128', '\x2', '\x2', '\x7E0', '\x7E2',
    '\a', '\x3CF', '\x2', '\x2', '\x7E1', '\x7E0', '\x3', '\x2', '\x2', '\x2',
    '\x7E1', '\x7E2', '\x3', '\x2', '\x2', '\x2', '\x7E2', '\x7E3', '\x3',
    '\x2', '\x2', '\x2', '\x7E3', '\x805', '\a', '\x3E7', '\x2', '\x2', '\x7E4',
    '\x7E5', '\a', '\x13A', '\x2', '\x2', '\x7E5', '\x7E7', '\a', '\x141',
    '\x2', '\x2', '\x7E6', '\x7E8', '\a', '\x3CF', '\x2', '\x2', '\x7E7',
    '\x7E6', '\x3', '\x2', '\x2', '\x2', '\x7E7', '\x7E8', '\x3', '\x2', '\x2',
    '\x2', '\x7E8', '\x7E9', '\x3', '\x2', '\x2', '\x2', '\x7E9', '\x805',
    '\a', '\x3E7', '\x2', '\x2', '\x7EA', '\x7EB', '\a', 'J', '\x2', '\x2',
    '\x7EB', '\x7ED', '\a', '\x141', '\x2', '\x2', '\x7EC', '\x7EE', '\a',
    '\x3CF', '\x2', '\x2', '\x7ED', '\x7EC', '\x3', '\x2', '\x2', '\x2', '\x7ED',
    '\x7EE', '\x3', '\x2', '\x2', '\x2', '\x7EE', '\x7EF', '\x3', '\x2', '\x2',
    '\x2', '\x7EF', '\x805', '\a', '\x3E7', '\x2', '\x2', '\x7F0', '\x7F2',
    '\a', '\x1A3', '\x2', '\x2', '\x7F1', '\x7F3', '\a', '\x3CF', '\x2', '\x2',
    '\x7F2', '\x7F1', '\x3', '\x2', '\x2', '\x2', '\x7F2', '\x7F3', '\x3',
    '\x2', '\x2', '\x2', '\x7F3', '\x7F4', '\x3', '\x2', '\x2', '\x2', '\x7F4',
    '\x805', '\x5', '\x212', '\x10A', '\x2', '\x7F5', '\x7F7', '\a', '\x1AC',
    '\x2', '\x2', '\x7F6', '\x7F8', '\a', '\x3CF', '\x2', '\x2', '\x7F7',
    '\x7F6', '\x3', '\x2', '\x2', '\x2', '\x7F7', '\x7F8', '\x3', '\x2', '\x2',
    '\x2', '\x7F8', '\x7F9', '\x3', '\x2', '\x2', '\x2', '\x7F9', '\x805',
    '\x5', '\x212', '\x10A', '\x2', '\x7FA', '\x7FC', '\a', '\x222', '\x2',
    '\x2', '\x7FB', '\x7FD', '\a', '\x3CF', '\x2', '\x2', '\x7FC', '\x7FB',
    '\x3', '\x2', '\x2', '\x2', '\x7FC', '\x7FD', '\x3', '\x2', '\x2', '\x2',
    '\x7FD', '\x7FE', '\x3', '\x2', '\x2', '\x2', '\x7FE', '\x805', '\x5',
    '\x20C', '\x107', '\x2', '\x7FF', '\x801', '\a', '\x1B8', '\x2', '\x2',
    '\x800', '\x802', '\a', '\x3CF', '\x2', '\x2', '\x801', '\x800', '\x3',
    '\x2', '\x2', '\x2', '\x801', '\x802', '\x3', '\x2', '\x2', '\x2', '\x802',
    '\x803', '\x3', '\x2', '\x2', '\x2', '\x803', '\x805', '\x5', '\x20C',
    '\x107', '\x2', '\x804', '\x7D8', '\x3', '\x2', '\x2', '\x2', '\x804',
    '\x7DF', '\x3', '\x2', '\x2', '\x2', '\x804', '\x7E4', '\x3', '\x2', '\x2',
    '\x2', '\x804', '\x7EA', '\x3', '\x2', '\x2', '\x2', '\x804', '\x7F0',
    '\x3', '\x2', '\x2', '\x2', '\x804', '\x7F5', '\x3', '\x2', '\x2', '\x2',
    '\x804', '\x7FA', '\x3', '\x2', '\x2', '\x2', '\x804', '\x7FF', '\x3',
    '\x2', '\x2', '\x2', '\x805', 'q', '\x3', '\x2', '\x2', '\x2', '\x806',
    '\x807', '\a', '\t', '\x2', '\x2', '\x807', '\x809', '\t', '\x2', '\x2',
    '\x2', '\x808', '\x80A', '\x5', '\x20C', '\x107', '\x2', '\x809', '\x808',
    '\x3', '\x2', '\x2', '\x2', '\x809', '\x80A', '\x3', '\x2', '\x2', '\x2',
    '\x80A', '\x80C', '\x3', '\x2', '\x2', '\x2', '\x80B', '\x80D', '\x5',
    '\x32', '\x1A', '\x2', '\x80C', '\x80B', '\x3', '\x2', '\x2', '\x2', '\x80D',
    '\x80E', '\x3', '\x2', '\x2', '\x2', '\x80E', '\x80C', '\x3', '\x2', '\x2',
    '\x2', '\x80E', '\x80F', '\x3', '\x2', '\x2', '\x2', '\x80F', '\x819',
    '\x3', '\x2', '\x2', '\x2', '\x810', '\x811', '\a', '\t', '\x2', '\x2',
    '\x811', '\x812', '\t', '\x2', '\x2', '\x2', '\x812', '\x813', '\x5',
    '\x20C', '\x107', '\x2', '\x813', '\x814', '\a', '\x230', '\x2', '\x2',
    '\x814', '\x815', '\a', '\x13A', '\x2', '\x2', '\x815', '\x816', '\a',
    '\x141', '\x2', '\x2', '\x816', '\x817', '\a', '\x1B2', '\x2', '\x2',
    '\x817', '\x819', '\x3', '\x2', '\x2', '\x2', '\x818', '\x806', '\x3',
    '\x2', '\x2', '\x2', '\x818', '\x810', '\x3', '\x2', '\x2', '\x2', '\x819',
    's', '\x3', '\x2', '\x2', '\x2', '\x81A', '\x81C', '\a', '\t', '\x2',
    '\x2', '\x81B', '\x81D', '\x5', '\x34', '\x1B', '\x2', '\x81C', '\x81B',
    '\x3', '\x2', '\x2', '\x2', '\x81C', '\x81D', '\x3', '\x2', '\x2', '\x2',
    '\x81D', '\x81E', '\x3', '\x2', '\x2', '\x2', '\x81E', '\x81F', '\a',
    '\x153', '\x2', '\x2', '\x81F', '\x823', '\x5', '\x1F2', '\xFA', '\x2',
    '\x820', '\x821', '\a', 'l', '\x2', '\x2', '\x821', '\x822', '\a', '\x1F9',
    '\x2', '\x2', '\x822', '\x824', '\x5', '\x36', '\x1C', '\x2', '\x823',
    '\x820', '\x3', '\x2', '\x2', '\x2', '\x823', '\x824', '\x3', '\x2', '\x2',
    '\x2', '\x824', '\x82B', '\x3', '\x2', '\x2', '\x2', '\x825', '\x826',
    '\a', 'l', '\x2', '\x2', '\x826', '\x828', '\a', '\x12B', '\x2', '\x2',
    '\x827', '\x829', '\a', 'h', '\x2', '\x2', '\x828', '\x827', '\x3', '\x2',
    '\x2', '\x2', '\x828', '\x829', '\x3', '\x2', '\x2', '\x2', '\x829', '\x82A',
    '\x3', '\x2', '\x2', '\x2', '\x82A', '\x82C', '\a', '\x1D3', '\x2', '\x2',
    '\x82B', '\x825', '\x3', '\x2', '\x2', '\x2', '\x82B', '\x82C', '\x3',
    '\x2', '\x2', '\x2', '\x82C', '\x830', '\x3', '\x2', '\x2', '\x2', '\x82D',
    '\x82E', '\a', '\x7F', '\x2', '\x2', '\x82E', '\x82F', '\a', '\x9F', '\x2',
    '\x2', '\x82F', '\x831', '\x5', '\x1F2', '\xFA', '\x2', '\x830', '\x82D',
    '\x3', '\x2', '\x2', '\x2', '\x830', '\x831', '\x3', '\x2', '\x2', '\x2',
    '\x831', '\x833', '\x3', '\x2', '\x2', '\x2', '\x832', '\x834', '\x5',
    '>', ' ', '\x2', '\x833', '\x832', '\x3', '\x2', '\x2', '\x2', '\x833',
    '\x834', '\x3', '\x2', '\x2', '\x2', '\x834', '\x837', '\x3', '\x2', '\x2',
    '\x2', '\x835', '\x836', '\a', '\x128', '\x2', '\x2', '\x836', '\x838',
    '\a', '\x3E7', '\x2', '\x2', '\x837', '\x835', '\x3', '\x2', '\x2', '\x2',
    '\x837', '\x838', '\x3', '\x2', '\x2', '\x2', '\x838', '\x83B', '\x3',
    '\x2', '\x2', '\x2', '\x839', '\x83A', '\a', '\x145', '\x2', '\x2', '\x83A',
    '\x83C', '\x5', '\x15A', '\xAE', '\x2', '\x83B', '\x839', '\x3', '\x2',
    '\x2', '\x2', '\x83B', '\x83C', '\x3', '\x2', '\x2', '\x2', '\x83C', 'u',
    '\x3', '\x2', '\x2', '\x2', '\x83D', '\x83E', '\a', '\t', '\x2', '\x2',
    '\x83E', '\x83F', '\a', '\x167', '\x2', '\x2', '\x83F', '\x843', '\x5',
    '\x1F2', '\xFA', '\x2', '\x840', '\x842', '\x5', 'H', '%', '\x2', '\x841',
    '\x840', '\x3', '\x2', '\x2', '\x2', '\x842', '\x845', '\x3', '\x2', '\x2',
    '\x2', '\x843', '\x841', '\x3', '\x2', '\x2', '\x2', '\x843', '\x844',
    '\x3', '\x2', '\x2', '\x2', '\x844', 'w', '\x3', '\x2', '\x2', '\x2',
    '\x845', '\x843', '\x3', '\x2', '\x2', '\x2', '\x846', '\x847', '\a',
    '\t', '\x2', '\x2', '\x847', '\x848', '\a', '\x179', '\x2', '\x2', '\x848',
    '\x849', '\a', '\x1F4', '\x2', '\x2', '\x849', '\x84A', '\a', '\x285',
    '\x2', '\x2', '\x84A', '\x84B', '\a', '\x18C', '\x2', '\x2', '\x84B',
    '\x84C', '\a', 'T', '\x2', '\x2', '\x84C', 'y', '\x3', '\x2', '\x2', '\x2',
    '\x84D', '\x84E', '\a', '\t', '\x2', '\x2', '\x84E', '\x84F', '\a', '\x18A',
    '\x2', '\x2', '\x84F', '\x850', '\a', '\x44', '\x2', '\x2', '\x850', '\x851',
    '\x5', '\x20C', '\x107', '\x2', '\x851', '\x852', '\a', '\a', '\x2', '\x2',
    '\x852', '\x853', '\a', '\x22B', '\x2', '\x2', '\x853', '\x859', '\a',
    '\x3E7', '\x2', '\x2', '\x854', '\x856', '\a', '\x175', '\x2', '\x2',
    '\x855', '\x857', '\a', '\x3CF', '\x2', '\x2', '\x856', '\x855', '\x3',
    '\x2', '\x2', '\x2', '\x856', '\x857', '\x3', '\x2', '\x2', '\x2', '\x857',
    '\x858', '\x3', '\x2', '\x2', '\x2', '\x858', '\x85A', '\x5', '\x214',
    '\x10B', '\x2', '\x859', '\x854', '\x3', '\x2', '\x2', '\x2', '\x859',
    '\x85A', '\x3', '\x2', '\x2', '\x2', '\x85A', '\x85C', '\x3', '\x2', '\x2',
    '\x2', '\x85B', '\x85D', '\a', '\x23A', '\x2', '\x2', '\x85C', '\x85B',
    '\x3', '\x2', '\x2', '\x2', '\x85C', '\x85D', '\x3', '\x2', '\x2', '\x2',
    '\x85D', '\x85E', '\x3', '\x2', '\x2', '\x2', '\x85E', '\x860', '\a',
    '\x14D', '\x2', '\x2', '\x85F', '\x861', '\a', '\x3CF', '\x2', '\x2',
    '\x860', '\x85F', '\x3', '\x2', '\x2', '\x2', '\x860', '\x861', '\x3',
    '\x2', '\x2', '\x2', '\x861', '\x862', '\x3', '\x2', '\x2', '\x2', '\x862',
    '\x863', '\x5', '\x202', '\x102', '\x2', '\x863', '{', '\x3', '\x2', '\x2',
    '\x2', '\x864', '\x865', '\a', '\t', '\x2', '\x2', '\x865', '\x866', '\a',
    'w', '\x2', '\x2', '\x866', '\x86A', '\x5', '\x1F2', '\xFA', '\x2', '\x867',
    '\x869', '\x5', 'H', '%', '\x2', '\x868', '\x867', '\x3', '\x2', '\x2',
    '\x2', '\x869', '\x86C', '\x3', '\x2', '\x2', '\x2', '\x86A', '\x868',
    '\x3', '\x2', '\x2', '\x2', '\x86A', '\x86B', '\x3', '\x2', '\x2', '\x2',
    '\x86B', '}', '\x3', '\x2', '\x2', '\x2', '\x86C', '\x86A', '\x3', '\x2',
    '\x2', '\x2', '\x86D', '\x86E', '\a', '\t', '\x2', '\x2', '\x86E', '\x86F',
    '\a', '\x1FB', '\x2', '\x2', '\x86F', '\x870', '\x5', '\x20C', '\x107',
    '\x2', '\x870', '\x871', '\a', '\x1C3', '\x2', '\x2', '\x871', '\x872',
    '\a', '\x3D8', '\x2', '\x2', '\x872', '\x877', '\x5', 'J', '&', '\x2',
    '\x873', '\x874', '\a', '\x3DA', '\x2', '\x2', '\x874', '\x876', '\x5',
    'J', '&', '\x2', '\x875', '\x873', '\x3', '\x2', '\x2', '\x2', '\x876',
    '\x879', '\x3', '\x2', '\x2', '\x2', '\x877', '\x875', '\x3', '\x2', '\x2',
    '\x2', '\x877', '\x878', '\x3', '\x2', '\x2', '\x2', '\x878', '\x87A',
    '\x3', '\x2', '\x2', '\x2', '\x879', '\x877', '\x3', '\x2', '\x2', '\x2',
    '\x87A', '\x87B', '\a', '\x3D9', '\x2', '\x2', '\x87B', '\x7F', '\x3',
    '\x2', '\x2', '\x2', '\x87C', '\x87E', '\a', '\t', '\x2', '\x2', '\x87D',
    '\x87F', '\t', '\x3', '\x2', '\x2', '\x87E', '\x87D', '\x3', '\x2', '\x2',
    '\x2', '\x87E', '\x87F', '\x3', '\x2', '\x2', '\x2', '\x87F', '\x881',
    '\x3', '\x2', '\x2', '\x2', '\x880', '\x882', '\a', 'H', '\x2', '\x2',
    '\x881', '\x880', '\x3', '\x2', '\x2', '\x2', '\x881', '\x882', '\x3',
    '\x2', '\x2', '\x2', '\x882', '\x883', '\x3', '\x2', '\x2', '\x2', '\x883',
    '\x884', '\a', '\x9C', '\x2', '\x2', '\x884', '\x88D', '\x5', '\x1F4',
    '\xFB', '\x2', '\x885', '\x88A', '\x5', '\x86', '\x44', '\x2', '\x886',
    '\x887', '\a', '\x3DA', '\x2', '\x2', '\x887', '\x889', '\x5', '\x86',
    '\x44', '\x2', '\x888', '\x886', '\x3', '\x2', '\x2', '\x2', '\x889',
    '\x88C', '\x3', '\x2', '\x2', '\x2', '\x88A', '\x888', '\x3', '\x2', '\x2',
    '\x2', '\x88A', '\x88B', '\x3', '\x2', '\x2', '\x2', '\x88B', '\x88E',
    '\x3', '\x2', '\x2', '\x2', '\x88C', '\x88A', '\x3', '\x2', '\x2', '\x2',
    '\x88D', '\x885', '\x3', '\x2', '\x2', '\x2', '\x88D', '\x88E', '\x3',
    '\x2', '\x2', '\x2', '\x88E', '\x890', '\x3', '\x2', '\x2', '\x2', '\x88F',
    '\x891', '\x5', '\x62', '\x32', '\x2', '\x890', '\x88F', '\x3', '\x2',
    '\x2', '\x2', '\x890', '\x891', '\x3', '\x2', '\x2', '\x2', '\x891', '\x81',
    '\x3', '\x2', '\x2', '\x2', '\x892', '\x893', '\a', '\t', '\x2', '\x2',
    '\x893', '\x894', '\a', '\x222', '\x2', '\x2', '\x894', '\x895', '\x5',
    '\x20C', '\x107', '\x2', '\x895', '\x896', '\t', '\x1E', '\x2', '\x2',
    '\x896', '\x897', '\a', '\x13B', '\x2', '\x2', '\x897', '\x89B', '\a',
    '\x3E7', '\x2', '\x2', '\x898', '\x899', '\a', '\x175', '\x2', '\x2',
    '\x899', '\x89A', '\a', '\x3CF', '\x2', '\x2', '\x89A', '\x89C', '\x5',
    '\x214', '\x10B', '\x2', '\x89B', '\x898', '\x3', '\x2', '\x2', '\x2',
    '\x89B', '\x89C', '\x3', '\x2', '\x2', '\x2', '\x89C', '\x89E', '\x3',
    '\x2', '\x2', '\x2', '\x89D', '\x89F', '\a', '\x23A', '\x2', '\x2', '\x89E',
    '\x89D', '\x3', '\x2', '\x2', '\x2', '\x89E', '\x89F', '\x3', '\x2', '\x2',
    '\x2', '\x89F', '\x8A0', '\x3', '\x2', '\x2', '\x2', '\x8A0', '\x8A2',
    '\a', '\x14D', '\x2', '\x2', '\x8A1', '\x8A3', '\a', '\x3CF', '\x2', '\x2',
    '\x8A2', '\x8A1', '\x3', '\x2', '\x2', '\x2', '\x8A2', '\x8A3', '\x3',
    '\x2', '\x2', '\x2', '\x8A3', '\x8A4', '\x3', '\x2', '\x2', '\x2', '\x8A4',
    '\x8A5', '\x5', '\x202', '\x102', '\x2', '\x8A5', '\x83', '\x3', '\x2',
    '\x2', '\x2', '\x8A6', '\x8AA', '\a', '\t', '\x2', '\x2', '\x8A7', '\x8A8',
    '\a', '\x109', '\x2', '\x2', '\x8A8', '\x8A9', '\a', '\x3CF', '\x2', '\x2',
    '\x8A9', '\x8AB', '\t', '\f', '\x2', '\x2', '\x8AA', '\x8A7', '\x3', '\x2',
    '\x2', '\x2', '\x8AA', '\x8AB', '\x3', '\x2', '\x2', '\x2', '\x8AB', '\x8AD',
    '\x3', '\x2', '\x2', '\x2', '\x8AC', '\x8AE', '\x5', '\x34', '\x1B', '\x2',
    '\x8AD', '\x8AC', '\x3', '\x2', '\x2', '\x2', '\x8AD', '\x8AE', '\x3',
    '\x2', '\x2', '\x2', '\x8AE', '\x8B2', '\x3', '\x2', '\x2', '\x2', '\x8AF',
    '\x8B0', '\a', '\x91', '\x2', '\x2', '\x8B0', '\x8B1', '\a', '\x1FA',
    '\x2', '\x2', '\x8B1', '\x8B3', '\t', '\r', '\x2', '\x2', '\x8B2', '\x8AF',
    '\x3', '\x2', '\x2', '\x2', '\x8B2', '\x8B3', '\x3', '\x2', '\x2', '\x2',
    '\x8B3', '\x8B4', '\x3', '\x2', '\x2', '\x2', '\x8B4', '\x8B5', '\a',
    '\x237', '\x2', '\x2', '\x8B5', '\x8BA', '\x5', '\x1F2', '\xFA', '\x2',
    '\x8B6', '\x8B7', '\a', '\x3D8', '\x2', '\x2', '\x8B7', '\x8B8', '\x5',
    '\x22C', '\x117', '\x2', '\x8B8', '\x8B9', '\a', '\x3D9', '\x2', '\x2',
    '\x8B9', '\x8BB', '\x3', '\x2', '\x2', '\x2', '\x8BA', '\x8B6', '\x3',
    '\x2', '\x2', '\x2', '\x8BA', '\x8BB', '\x3', '\x2', '\x2', '\x2', '\x8BB',
    '\x8BC', '\x3', '\x2', '\x2', '\x2', '\x8BC', '\x8BD', '\a', '\r', '\x2',
    '\x2', '\x8BD', '\x8C4', '\x5', '\xB4', '[', '\x2', '\x8BE', '\x8C0',
    '\a', '\xB0', '\x2', '\x2', '\x8BF', '\x8C1', '\t', '\xE', '\x2', '\x2',
    '\x8C0', '\x8BF', '\x3', '\x2', '\x2', '\x2', '\x8C0', '\x8C1', '\x3',
    '\x2', '\x2', '\x2', '\x8C1', '\x8C2', '\x3', '\x2', '\x2', '\x2', '\x8C2',
    '\x8C3', '\a', '\x19', '\x2', '\x2', '\x8C3', '\x8C5', '\a', 'n', '\x2',
    '\x2', '\x8C4', '\x8BE', '\x3', '\x2', '\x2', '\x2', '\x8C4', '\x8C5',
    '\x3', '\x2', '\x2', '\x2', '\x8C5', '\x85', '\x3', '\x2', '\x2', '\x2',
    '\x8C6', '\x8CD', '\x5', '^', '\x30', '\x2', '\x8C7', '\x8C9', '\a', '\x3DA',
    '\x2', '\x2', '\x8C8', '\x8C7', '\x3', '\x2', '\x2', '\x2', '\x8C8', '\x8C9',
    '\x3', '\x2', '\x2', '\x2', '\x8C9', '\x8CA', '\x3', '\x2', '\x2', '\x2',
    '\x8CA', '\x8CC', '\x5', '^', '\x30', '\x2', '\x8CB', '\x8C8', '\x3',
    '\x2', '\x2', '\x2', '\x8CC', '\x8CF', '\x3', '\x2', '\x2', '\x2', '\x8CD',
    '\x8CB', '\x3', '\x2', '\x2', '\x2', '\x8CD', '\x8CE', '\x3', '\x2', '\x2',
    '\x2', '\x8CE', '\xA2A', '\x3', '\x2', '\x2', '\x2', '\x8CF', '\x8CD',
    '\x3', '\x2', '\x2', '\x2', '\x8D0', '\x8D2', '\a', '\a', '\x2', '\x2',
    '\x8D1', '\x8D3', '\a', '\x1B', '\x2', '\x2', '\x8D2', '\x8D1', '\x3',
    '\x2', '\x2', '\x2', '\x8D2', '\x8D3', '\x3', '\x2', '\x2', '\x2', '\x8D3',
    '\x8D4', '\x3', '\x2', '\x2', '\x2', '\x8D4', '\x8D5', '\x5', '\x20C',
    '\x107', '\x2', '\x8D5', '\x8D9', '\x5', 'P', ')', '\x2', '\x8D6', '\x8DA',
    '\a', '\x161', '\x2', '\x2', '\x8D7', '\x8D8', '\a', '\x107', '\x2', '\x2',
    '\x8D8', '\x8DA', '\x5', '\x20C', '\x107', '\x2', '\x8D9', '\x8D6', '\x3',
    '\x2', '\x2', '\x2', '\x8D9', '\x8D7', '\x3', '\x2', '\x2', '\x2', '\x8D9',
    '\x8DA', '\x3', '\x2', '\x2', '\x2', '\x8DA', '\xA2A', '\x3', '\x2', '\x2',
    '\x2', '\x8DB', '\x8DD', '\a', '\a', '\x2', '\x2', '\x8DC', '\x8DE', '\a',
    '\x1B', '\x2', '\x2', '\x8DD', '\x8DC', '\x3', '\x2', '\x2', '\x2', '\x8DD',
    '\x8DE', '\x3', '\x2', '\x2', '\x2', '\x8DE', '\x8DF', '\x3', '\x2', '\x2',
    '\x2', '\x8DF', '\x8E0', '\a', '\x3D8', '\x2', '\x2', '\x8E0', '\x8E1',
    '\x5', '\x20C', '\x107', '\x2', '\x8E1', '\x8E8', '\x5', 'P', ')', '\x2',
    '\x8E2', '\x8E3', '\a', '\x3DA', '\x2', '\x2', '\x8E3', '\x8E4', '\x5',
    '\x20C', '\x107', '\x2', '\x8E4', '\x8E5', '\x5', 'P', ')', '\x2', '\x8E5',
    '\x8E7', '\x3', '\x2', '\x2', '\x2', '\x8E6', '\x8E2', '\x3', '\x2', '\x2',
    '\x2', '\x8E7', '\x8EA', '\x3', '\x2', '\x2', '\x2', '\x8E8', '\x8E6',
    '\x3', '\x2', '\x2', '\x2', '\x8E8', '\x8E9', '\x3', '\x2', '\x2', '\x2',
    '\x8E9', '\x8EB', '\x3', '\x2', '\x2', '\x2', '\x8EA', '\x8E8', '\x3',
    '\x2', '\x2', '\x2', '\x8EB', '\x8EC', '\a', '\x3D9', '\x2', '\x2', '\x8EC',
    '\xA2A', '\x3', '\x2', '\x2', '\x2', '\x8ED', '\x8EE', '\a', '\a', '\x2',
    '\x2', '\x8EE', '\x8F0', '\t', '\x14', '\x2', '\x2', '\x8EF', '\x8F1',
    '\x5', '\x20C', '\x107', '\x2', '\x8F0', '\x8EF', '\x3', '\x2', '\x2',
    '\x2', '\x8F0', '\x8F1', '\x3', '\x2', '\x2', '\x2', '\x8F1', '\x8F3',
    '\x3', '\x2', '\x2', '\x2', '\x8F2', '\x8F4', '\x5', '@', '!', '\x2',
    '\x8F3', '\x8F2', '\x3', '\x2', '\x2', '\x2', '\x8F3', '\x8F4', '\x3',
    '\x2', '\x2', '\x2', '\x8F4', '\x8F5', '\x3', '\x2', '\x2', '\x2', '\x8F5',
    '\x8F9', '\x5', '\x230', '\x119', '\x2', '\x8F6', '\x8F8', '\x5', '\x42',
    '\"', '\x2', '\x8F7', '\x8F6', '\x3', '\x2', '\x2', '\x2', '\x8F8', '\x8FB',
    '\x3', '\x2', '\x2', '\x2', '\x8F9', '\x8F7', '\x3', '\x2', '\x2', '\x2',
    '\x8F9', '\x8FA', '\x3', '\x2', '\x2', '\x2', '\x8FA', '\xA2A', '\x3',
    '\x2', '\x2', '\x2', '\x8FB', '\x8F9', '\x3', '\x2', '\x2', '\x2', '\x8FC',
    '\x901', '\a', '\a', '\x2', '\x2', '\x8FD', '\x8FF', '\a', '\x1D', '\x2',
    '\x2', '\x8FE', '\x900', '\x5', '\x20C', '\x107', '\x2', '\x8FF', '\x8FE',
    '\x3', '\x2', '\x2', '\x2', '\x8FF', '\x900', '\x3', '\x2', '\x2', '\x2',
    '\x900', '\x902', '\x3', '\x2', '\x2', '\x2', '\x901', '\x8FD', '\x3',
    '\x2', '\x2', '\x2', '\x901', '\x902', '\x3', '\x2', '\x2', '\x2', '\x902',
    '\x903', '\x3', '\x2', '\x2', '\x2', '\x903', '\x904', '\a', 'v', '\x2',
    '\x2', '\x904', '\x906', '\a', 'T', '\x2', '\x2', '\x905', '\x907', '\x5',
    '@', '!', '\x2', '\x906', '\x905', '\x3', '\x2', '\x2', '\x2', '\x906',
    '\x907', '\x3', '\x2', '\x2', '\x2', '\x907', '\x908', '\x3', '\x2', '\x2',
    '\x2', '\x908', '\x90C', '\x5', '\x230', '\x119', '\x2', '\x909', '\x90B',
    '\x5', '\x42', '\"', '\x2', '\x90A', '\x909', '\x3', '\x2', '\x2', '\x2',
    '\x90B', '\x90E', '\x3', '\x2', '\x2', '\x2', '\x90C', '\x90A', '\x3',
    '\x2', '\x2', '\x2', '\x90C', '\x90D', '\x3', '\x2', '\x2', '\x2', '\x90D',
    '\xA2A', '\x3', '\x2', '\x2', '\x2', '\x90E', '\x90C', '\x3', '\x2', '\x2',
    '\x2', '\x90F', '\x914', '\a', '\a', '\x2', '\x2', '\x910', '\x912', '\a',
    '\x1D', '\x2', '\x2', '\x911', '\x913', '\x5', '\x20C', '\x107', '\x2',
    '\x912', '\x911', '\x3', '\x2', '\x2', '\x2', '\x912', '\x913', '\x3',
    '\x2', '\x2', '\x2', '\x913', '\x915', '\x3', '\x2', '\x2', '\x2', '\x914',
    '\x910', '\x3', '\x2', '\x2', '\x2', '\x914', '\x915', '\x3', '\x2', '\x2',
    '\x2', '\x915', '\x916', '\x3', '\x2', '\x2', '\x2', '\x916', '\x918',
    '\a', '\xA5', '\x2', '\x2', '\x917', '\x919', '\t', '\x14', '\x2', '\x2',
    '\x918', '\x917', '\x3', '\x2', '\x2', '\x2', '\x918', '\x919', '\x3',
    '\x2', '\x2', '\x2', '\x919', '\x91B', '\x3', '\x2', '\x2', '\x2', '\x91A',
    '\x91C', '\x5', '\x20C', '\x107', '\x2', '\x91B', '\x91A', '\x3', '\x2',
    '\x2', '\x2', '\x91B', '\x91C', '\x3', '\x2', '\x2', '\x2', '\x91C', '\x91E',
    '\x3', '\x2', '\x2', '\x2', '\x91D', '\x91F', '\x5', '@', '!', '\x2',
    '\x91E', '\x91D', '\x3', '\x2', '\x2', '\x2', '\x91E', '\x91F', '\x3',
    '\x2', '\x2', '\x2', '\x91F', '\x920', '\x3', '\x2', '\x2', '\x2', '\x920',
    '\x924', '\x5', '\x230', '\x119', '\x2', '\x921', '\x923', '\x5', '\x42',
    '\"', '\x2', '\x922', '\x921', '\x3', '\x2', '\x2', '\x2', '\x923', '\x926',
    '\x3', '\x2', '\x2', '\x2', '\x924', '\x922', '\x3', '\x2', '\x2', '\x2',
    '\x924', '\x925', '\x3', '\x2', '\x2', '\x2', '\x925', '\xA2A', '\x3',
    '\x2', '\x2', '\x2', '\x926', '\x924', '\x3', '\x2', '\x2', '\x2', '\x927',
    '\x928', '\a', '\a', '\x2', '\x2', '\x928', '\x92A', '\t', '\x16', '\x2',
    '\x2', '\x929', '\x92B', '\t', '\x14', '\x2', '\x2', '\x92A', '\x929',
    '\x3', '\x2', '\x2', '\x2', '\x92A', '\x92B', '\x3', '\x2', '\x2', '\x2',
    '\x92B', '\x92D', '\x3', '\x2', '\x2', '\x2', '\x92C', '\x92E', '\x5',
    '\x20C', '\x107', '\x2', '\x92D', '\x92C', '\x3', '\x2', '\x2', '\x2',
    '\x92D', '\x92E', '\x3', '\x2', '\x2', '\x2', '\x92E', '\x92F', '\x3',
    '\x2', '\x2', '\x2', '\x92F', '\x933', '\x5', '\x230', '\x119', '\x2',
    '\x930', '\x932', '\x5', '\x42', '\"', '\x2', '\x931', '\x930', '\x3',
    '\x2', '\x2', '\x2', '\x932', '\x935', '\x3', '\x2', '\x2', '\x2', '\x933',
    '\x931', '\x3', '\x2', '\x2', '\x2', '\x933', '\x934', '\x3', '\x2', '\x2',
    '\x2', '\x934', '\xA2A', '\x3', '\x2', '\x2', '\x2', '\x935', '\x933',
    '\x3', '\x2', '\x2', '\x2', '\x936', '\x93B', '\a', '\a', '\x2', '\x2',
    '\x937', '\x939', '\a', '\x1D', '\x2', '\x2', '\x938', '\x93A', '\x5',
    '\x20C', '\x107', '\x2', '\x939', '\x938', '\x3', '\x2', '\x2', '\x2',
    '\x939', '\x93A', '\x3', '\x2', '\x2', '\x2', '\x93A', '\x93C', '\x3',
    '\x2', '\x2', '\x2', '\x93B', '\x937', '\x3', '\x2', '\x2', '\x2', '\x93B',
    '\x93C', '\x3', '\x2', '\x2', '\x2', '\x93C', '\x93D', '\x3', '\x2', '\x2',
    '\x2', '\x93D', '\x93E', '\a', '>', '\x2', '\x2', '\x93E', '\x940', '\a',
    'T', '\x2', '\x2', '\x93F', '\x941', '\x5', '\x20C', '\x107', '\x2', '\x940',
    '\x93F', '\x3', '\x2', '\x2', '\x2', '\x940', '\x941', '\x3', '\x2', '\x2',
    '\x2', '\x941', '\x942', '\x3', '\x2', '\x2', '\x2', '\x942', '\x943',
    '\x5', '\x230', '\x119', '\x2', '\x943', '\x944', '\x5', 'V', ',', '\x2',
    '\x944', '\xA2A', '\x3', '\x2', '\x2', '\x2', '\x945', '\x94A', '\a',
    '\a', '\x2', '\x2', '\x946', '\x948', '\a', '\x1D', '\x2', '\x2', '\x947',
    '\x949', '\x5', '\x20C', '\x107', '\x2', '\x948', '\x947', '\x3', '\x2',
    '\x2', '\x2', '\x948', '\x949', '\x3', '\x2', '\x2', '\x2', '\x949', '\x94B',
    '\x3', '\x2', '\x2', '\x2', '\x94A', '\x946', '\x3', '\x2', '\x2', '\x2',
    '\x94A', '\x94B', '\x3', '\x2', '\x2', '\x2', '\x94B', '\x94C', '\x3',
    '\x2', '\x2', '\x2', '\x94C', '\x94D', '\a', '\x19', '\x2', '\x2', '\x94D',
    '\x94E', '\a', '\x3D8', '\x2', '\x2', '\x94E', '\x94F', '\x5', '\x25A',
    '\x12E', '\x2', '\x94F', '\x950', '\a', '\x3D9', '\x2', '\x2', '\x950',
    '\xA2A', '\x3', '\x2', '\x2', '\x2', '\x951', '\x953', '\a', '\x109',
    '\x2', '\x2', '\x952', '\x954', '\a', '\x3CF', '\x2', '\x2', '\x953',
    '\x952', '\x3', '\x2', '\x2', '\x2', '\x953', '\x954', '\x3', '\x2', '\x2',
    '\x2', '\x954', '\x955', '\x3', '\x2', '\x2', '\x2', '\x955', '\xA2A',
    '\t', '\x5', '\x2', '\x2', '\x956', '\x958', '\a', '\t', '\x2', '\x2',
    '\x957', '\x959', '\a', '\x1B', '\x2', '\x2', '\x958', '\x957', '\x3',
    '\x2', '\x2', '\x2', '\x958', '\x959', '\x3', '\x2', '\x2', '\x2', '\x959',
    '\x95A', '\x3', '\x2', '\x2', '\x2', '\x95A', '\x960', '\x5', '\x20C',
    '\x107', '\x2', '\x95B', '\x95C', '\a', '\x8C', '\x2', '\x2', '\x95C',
    '\x95D', '\a', '(', '\x2', '\x2', '\x95D', '\x961', '\x5', '\x23C', '\x11F',
    '\x2', '\x95E', '\x95F', '\a', '\x31', '\x2', '\x2', '\x95F', '\x961',
    '\a', '(', '\x2', '\x2', '\x960', '\x95B', '\x3', '\x2', '\x2', '\x2',
    '\x960', '\x95E', '\x3', '\x2', '\x2', '\x2', '\x961', '\xA2A', '\x3',
    '\x2', '\x2', '\x2', '\x962', '\x964', '\a', '\x17', '\x2', '\x2', '\x963',
    '\x965', '\a', '\x1B', '\x2', '\x2', '\x964', '\x963', '\x3', '\x2', '\x2',
    '\x2', '\x964', '\x965', '\x3', '\x2', '\x2', '\x2', '\x965', '\x966',
    '\x3', '\x2', '\x2', '\x2', '\x966', '\x967', '\x5', '\x20C', '\x107',
    '\x2', '\x967', '\x968', '\x5', '\x20C', '\x107', '\x2', '\x968', '\x96C',
    '\x5', 'P', ')', '\x2', '\x969', '\x96D', '\a', '\x161', '\x2', '\x2',
    '\x96A', '\x96B', '\a', '\x107', '\x2', '\x2', '\x96B', '\x96D', '\x5',
    '\x20C', '\x107', '\x2', '\x96C', '\x969', '\x3', '\x2', '\x2', '\x2',
    '\x96C', '\x96A', '\x3', '\x2', '\x2', '\x2', '\x96C', '\x96D', '\x3',
    '\x2', '\x2', '\x2', '\x96D', '\xA2A', '\x3', '\x2', '\x2', '\x2', '\x96E',
    '\x96F', '\a', '\x7F', '\x2', '\x2', '\x96F', '\x970', '\a', '\x1B', '\x2',
    '\x2', '\x970', '\x971', '\x5', '\x20C', '\x107', '\x2', '\x971', '\x972',
    '\a', '\x9F', '\x2', '\x2', '\x972', '\x973', '\x5', '\x20C', '\x107',
    '\x2', '\x973', '\xA2A', '\x3', '\x2', '\x2', '\x2', '\x974', '\x976',
    '\a', '_', '\x2', '\x2', '\x975', '\x977', '\a', '\x3CF', '\x2', '\x2',
    '\x976', '\x975', '\x3', '\x2', '\x2', '\x2', '\x976', '\x977', '\x3',
    '\x2', '\x2', '\x2', '\x977', '\x978', '\x3', '\x2', '\x2', '\x2', '\x978',
    '\xA2A', '\t', '\x6', '\x2', '\x2', '\x979', '\x97B', '\a', '\x1AE', '\x2',
    '\x2', '\x97A', '\x97C', '\a', '\x1B', '\x2', '\x2', '\x97B', '\x97A',
    '\x3', '\x2', '\x2', '\x2', '\x97B', '\x97C', '\x3', '\x2', '\x2', '\x2',
    '\x97C', '\x97D', '\x3', '\x2', '\x2', '\x2', '\x97D', '\x97E', '\x5',
    '\x20C', '\x107', '\x2', '\x97E', '\x982', '\x5', 'P', ')', '\x2', '\x97F',
    '\x983', '\a', '\x161', '\x2', '\x2', '\x980', '\x981', '\a', '\x107',
    '\x2', '\x2', '\x981', '\x983', '\x5', '\x20C', '\x107', '\x2', '\x982',
    '\x97F', '\x3', '\x2', '\x2', '\x2', '\x982', '\x980', '\x3', '\x2', '\x2',
    '\x2', '\x982', '\x983', '\x3', '\x2', '\x2', '\x2', '\x983', '\xA2A',
    '\x3', '\x2', '\x2', '\x2', '\x984', '\x986', '\a', '\x31', '\x2', '\x2',
    '\x985', '\x987', '\a', '\x1B', '\x2', '\x2', '\x986', '\x985', '\x3',
    '\x2', '\x2', '\x2', '\x986', '\x987', '\x3', '\x2', '\x2', '\x2', '\x987',
    '\x988', '\x3', '\x2', '\x2', '\x2', '\x988', '\x98A', '\x5', '\x20C',
    '\x107', '\x2', '\x989', '\x98B', '\a', '\x84', '\x2', '\x2', '\x98A',
    '\x989', '\x3', '\x2', '\x2', '\x2', '\x98A', '\x98B', '\x3', '\x2', '\x2',
    '\x2', '\x98B', '\xA2A', '\x3', '\x2', '\x2', '\x2', '\x98C', '\x98D',
    '\a', '\x31', '\x2', '\x2', '\x98D', '\x98E', '\a', 'v', '\x2', '\x2',
    '\x98E', '\xA2A', '\a', 'T', '\x2', '\x2', '\x98F', '\x990', '\a', '\x7F',
    '\x2', '\x2', '\x990', '\x991', '\t', '\x14', '\x2', '\x2', '\x991', '\x992',
    '\x5', '\x20C', '\x107', '\x2', '\x992', '\x993', '\a', '\x9F', '\x2',
    '\x2', '\x993', '\x994', '\x5', '\x20C', '\x107', '\x2', '\x994', '\xA2A',
    '\x3', '\x2', '\x2', '\x2', '\x995', '\x996', '\a', '\x31', '\x2', '\x2',
    '\x996', '\x997', '\t', '\x14', '\x2', '\x2', '\x997', '\xA2A', '\x5',
    '\x20C', '\x107', '\x2', '\x998', '\x999', '\a', '\x31', '\x2', '\x2',
    '\x999', '\x99A', '\a', '>', '\x2', '\x2', '\x99A', '\x99B', '\a', 'T',
    '\x2', '\x2', '\x99B', '\xA2A', '\x5', '\x20C', '\x107', '\x2', '\x99C',
    '\x99D', '\a', '\x142', '\x2', '\x2', '\x99D', '\xA2A', '\a', 'U', '\x2',
    '\x2', '\x99E', '\x99F', '\a', '\x149', '\x2', '\x2', '\x99F', '\xA2A',
    '\a', 'U', '\x2', '\x2', '\x9A0', '\x9A2', '\a', '\x7F', '\x2', '\x2',
    '\x9A1', '\x9A3', '\t', '\x1F', '\x2', '\x2', '\x9A2', '\x9A1', '\x3',
    '\x2', '\x2', '\x2', '\x9A2', '\x9A3', '\x3', '\x2', '\x2', '\x2', '\x9A3',
    '\x9A6', '\x3', '\x2', '\x2', '\x2', '\x9A4', '\x9A7', '\x5', '\x20C',
    '\x107', '\x2', '\x9A5', '\x9A7', '\x5', '\x1F2', '\xFA', '\x2', '\x9A6',
    '\x9A4', '\x3', '\x2', '\x2', '\x2', '\x9A6', '\x9A5', '\x3', '\x2', '\x2',
    '\x2', '\x9A7', '\xA2A', '\x3', '\x2', '\x2', '\x2', '\x9A8', '\x9A9',
    '\a', 'q', '\x2', '\x2', '\x9A9', '\x9AA', '\a', '\x12', '\x2', '\x2',
    '\x9AA', '\xA2A', '\x5', '\x22C', '\x117', '\x2', '\x9AB', '\x9AC', '\a',
    '\x1F', '\x2', '\x2', '\x9AC', '\x9AD', '\a', '\x9F', '\x2', '\x2', '\x9AD',
    '\x9AE', '\a', '\x18', '\x2', '\x2', '\x9AE', '\x9AF', '\a', '\x8C', '\x2',
    '\x2', '\x9AF', '\x9B2', '\x5', '\x1FE', '\x100', '\x2', '\x9B0', '\x9B1',
    '\a', '\x1A', '\x2', '\x2', '\x9B1', '\x9B3', '\x5', '\x200', '\x101',
    '\x2', '\x9B2', '\x9B0', '\x3', '\x2', '\x2', '\x2', '\x9B2', '\x9B3',
    '\x3', '\x2', '\x2', '\x2', '\x9B3', '\xA2A', '\x3', '\x2', '\x2', '\x2',
    '\x9B4', '\x9B6', '\a', '(', '\x2', '\x2', '\x9B5', '\x9B4', '\x3', '\x2',
    '\x2', '\x2', '\x9B5', '\x9B6', '\x3', '\x2', '\x2', '\x2', '\x9B6', '\x9B7',
    '\x3', '\x2', '\x2', '\x2', '\x9B7', '\x9B8', '\a', '\x18', '\x2', '\x2',
    '\x9B8', '\x9B9', '\a', '\x8C', '\x2', '\x2', '\x9B9', '\x9BA', '\a',
    '\x3CF', '\x2', '\x2', '\x9BA', '\x9BE', '\x5', '\x1FE', '\x100', '\x2',
    '\x9BB', '\x9BC', '\a', '\x1A', '\x2', '\x2', '\x9BC', '\x9BD', '\a',
    '\x3CF', '\x2', '\x2', '\x9BD', '\x9BF', '\x5', '\x200', '\x101', '\x2',
    '\x9BE', '\x9BB', '\x3', '\x2', '\x2', '\x2', '\x9BE', '\x9BF', '\x3',
    '\x2', '\x2', '\x2', '\x9BF', '\xA2A', '\x3', '\x2', '\x2', '\x2', '\x9C0',
    '\x9C1', '\a', '\x143', '\x2', '\x2', '\x9C1', '\xA2A', '\a', '\x222',
    '\x2', '\x2', '\x9C2', '\x9C3', '\a', '\x173', '\x2', '\x2', '\x9C3',
    '\xA2A', '\a', '\x222', '\x2', '\x2', '\x9C4', '\xA2A', '\a', '=', '\x2',
    '\x2', '\x9C5', '\x9C6', '\t', ' ', '\x2', '\x2', '\x9C6', '\xA2A', '\a',
    '\x234', '\x2', '\x2', '\x9C7', '\x9C8', '\a', '\a', '\x2', '\x2', '\x9C8',
    '\x9C9', '\a', 'u', '\x2', '\x2', '\x9C9', '\x9CA', '\a', '\x3D8', '\x2',
    '\x2', '\x9CA', '\x9CF', '\x5', 'h', '\x35', '\x2', '\x9CB', '\x9CC',
    '\a', '\x3DA', '\x2', '\x2', '\x9CC', '\x9CE', '\x5', 'h', '\x35', '\x2',
    '\x9CD', '\x9CB', '\x3', '\x2', '\x2', '\x2', '\x9CE', '\x9D1', '\x3',
    '\x2', '\x2', '\x2', '\x9CF', '\x9CD', '\x3', '\x2', '\x2', '\x2', '\x9CF',
    '\x9D0', '\x3', '\x2', '\x2', '\x2', '\x9D0', '\x9D2', '\x3', '\x2', '\x2',
    '\x2', '\x9D1', '\x9CF', '\x3', '\x2', '\x2', '\x2', '\x9D2', '\x9D3',
    '\a', '\x3D9', '\x2', '\x2', '\x9D3', '\xA2A', '\x3', '\x2', '\x2', '\x2',
    '\x9D4', '\x9D5', '\a', '\x31', '\x2', '\x2', '\x9D5', '\x9D6', '\a',
    'u', '\x2', '\x2', '\x9D6', '\xA2A', '\x5', '\x22C', '\x117', '\x2', '\x9D7',
    '\x9D8', '\a', '\x143', '\x2', '\x2', '\x9D8', '\x9DB', '\a', 'u', '\x2',
    '\x2', '\x9D9', '\x9DC', '\x5', '\x22C', '\x117', '\x2', '\x9DA', '\x9DC',
    '\a', '\b', '\x2', '\x2', '\x9DB', '\x9D9', '\x3', '\x2', '\x2', '\x2',
    '\x9DB', '\x9DA', '\x3', '\x2', '\x2', '\x2', '\x9DC', '\x9DD', '\x3',
    '\x2', '\x2', '\x2', '\x9DD', '\xA2A', '\a', '\x222', '\x2', '\x2', '\x9DE',
    '\x9DF', '\a', '\x173', '\x2', '\x2', '\x9DF', '\x9E2', '\a', 'u', '\x2',
    '\x2', '\x9E0', '\x9E3', '\x5', '\x22C', '\x117', '\x2', '\x9E1', '\x9E3',
    '\a', '\b', '\x2', '\x2', '\x9E2', '\x9E0', '\x3', '\x2', '\x2', '\x2',
    '\x9E2', '\x9E1', '\x3', '\x2', '\x2', '\x2', '\x9E3', '\x9E4', '\x3',
    '\x2', '\x2', '\x2', '\x9E4', '\xA2A', '\a', '\x222', '\x2', '\x2', '\x9E5',
    '\x9E6', '\a', '\x229', '\x2', '\x2', '\x9E6', '\x9E9', '\a', 'u', '\x2',
    '\x2', '\x9E7', '\x9EA', '\x5', '\x22C', '\x117', '\x2', '\x9E8', '\x9EA',
    '\a', '\b', '\x2', '\x2', '\x9E9', '\x9E7', '\x3', '\x2', '\x2', '\x2',
    '\x9E9', '\x9E8', '\x3', '\x2', '\x2', '\x2', '\x9EA', '\xA2A', '\x3',
    '\x2', '\x2', '\x2', '\x9EB', '\x9EC', '\a', '\x123', '\x2', '\x2', '\x9EC',
    '\x9ED', '\a', 'u', '\x2', '\x2', '\x9ED', '\xA2A', '\x5', '\x212', '\x10A',
    '\x2', '\x9EE', '\x9EF', '\a', '\x1E4', '\x2', '\x2', '\x9EF', '\x9F0',
    '\a', 'u', '\x2', '\x2', '\x9F0', '\x9F1', '\x5', '\x22C', '\x117', '\x2',
    '\x9F1', '\x9F2', '\a', 'P', '\x2', '\x2', '\x9F2', '\x9F3', '\a', '\x3D8',
    '\x2', '\x2', '\x9F3', '\x9F8', '\x5', 'h', '\x35', '\x2', '\x9F4', '\x9F5',
    '\a', '\x3DA', '\x2', '\x2', '\x9F5', '\x9F7', '\x5', 'h', '\x35', '\x2',
    '\x9F6', '\x9F4', '\x3', '\x2', '\x2', '\x2', '\x9F7', '\x9FA', '\x3',
    '\x2', '\x2', '\x2', '\x9F8', '\x9F6', '\x3', '\x2', '\x2', '\x2', '\x9F8',
    '\x9F9', '\x3', '\x2', '\x2', '\x2', '\x9F9', '\x9FB', '\x3', '\x2', '\x2',
    '\x2', '\x9FA', '\x9F8', '\x3', '\x2', '\x2', '\x2', '\x9FB', '\x9FC',
    '\a', '\x3D9', '\x2', '\x2', '\x9FC', '\xA2A', '\x3', '\x2', '\x2', '\x2',
    '\x9FD', '\x9FE', '\a', '\x156', '\x2', '\x2', '\x9FE', '\x9FF', '\a',
    'u', '\x2', '\x2', '\x9FF', '\xA00', '\x5', '\x20C', '\x107', '\x2', '\xA00',
    '\xA01', '\a', '\xB0', '\x2', '\x2', '\xA01', '\xA02', '\a', '\x9C', '\x2',
    '\x2', '\xA02', '\xA05', '\x5', '\x1F4', '\xFB', '\x2', '\xA03', '\xA04',
    '\t', ' ', '\x2', '\x2', '\xA04', '\xA06', '\a', '\x234', '\x2', '\x2',
    '\xA05', '\xA03', '\x3', '\x2', '\x2', '\x2', '\xA05', '\xA06', '\x3',
    '\x2', '\x2', '\x2', '\xA06', '\xA2A', '\x3', '\x2', '\x2', '\x2', '\xA07',
    '\xA08', '\a', '\v', '\x2', '\x2', '\xA08', '\xA0B', '\a', 'u', '\x2',
    '\x2', '\xA09', '\xA0C', '\x5', '\x22C', '\x117', '\x2', '\xA0A', '\xA0C',
    '\a', '\b', '\x2', '\x2', '\xA0B', '\xA09', '\x3', '\x2', '\x2', '\x2',
    '\xA0B', '\xA0A', '\x3', '\x2', '\x2', '\x2', '\xA0C', '\xA2A', '\x3',
    '\x2', '\x2', '\x2', '\xA0D', '\xA0E', '\a', '\x19', '\x2', '\x2', '\xA0E',
    '\xA11', '\a', 'u', '\x2', '\x2', '\xA0F', '\xA12', '\x5', '\x22C', '\x117',
    '\x2', '\xA10', '\xA12', '\a', '\b', '\x2', '\x2', '\xA11', '\xA0F', '\x3',
    '\x2', '\x2', '\x2', '\xA11', '\xA10', '\x3', '\x2', '\x2', '\x2', '\xA12',
    '\xA2A', '\x3', '\x2', '\x2', '\x2', '\xA13', '\xA14', '\a', 'm', '\x2',
    '\x2', '\xA14', '\xA17', '\a', 'u', '\x2', '\x2', '\xA15', '\xA18', '\x5',
    '\x22C', '\x117', '\x2', '\xA16', '\xA18', '\a', '\b', '\x2', '\x2', '\xA17',
    '\xA15', '\x3', '\x2', '\x2', '\x2', '\xA17', '\xA16', '\x3', '\x2', '\x2',
    '\x2', '\xA18', '\xA2A', '\x3', '\x2', '\x2', '\x2', '\xA19', '\xA1A',
    '\a', '\x1DB', '\x2', '\x2', '\xA1A', '\xA1D', '\a', 'u', '\x2', '\x2',
    '\xA1B', '\xA1E', '\x5', '\x22C', '\x117', '\x2', '\xA1C', '\xA1E', '\a',
    '\b', '\x2', '\x2', '\xA1D', '\xA1B', '\x3', '\x2', '\x2', '\x2', '\xA1D',
    '\xA1C', '\x3', '\x2', '\x2', '\x2', '\xA1E', '\xA2A', '\x3', '\x2', '\x2',
    '\x2', '\xA1F', '\xA20', '\a', '\x1E5', '\x2', '\x2', '\xA20', '\xA23',
    '\a', 'u', '\x2', '\x2', '\xA21', '\xA24', '\x5', '\x22C', '\x117', '\x2',
    '\xA22', '\xA24', '\a', '\b', '\x2', '\x2', '\xA23', '\xA21', '\x3', '\x2',
    '\x2', '\x2', '\xA23', '\xA22', '\x3', '\x2', '\x2', '\x2', '\xA24', '\xA2A',
    '\x3', '\x2', '\x2', '\x2', '\xA25', '\xA26', '\a', '\x1E3', '\x2', '\x2',
    '\xA26', '\xA2A', '\a', '\x1C9', '\x2', '\x2', '\xA27', '\xA28', '\a',
    '\x230', '\x2', '\x2', '\xA28', '\xA2A', '\a', '\x1C9', '\x2', '\x2',
    '\xA29', '\x8C6', '\x3', '\x2', '\x2', '\x2', '\xA29', '\x8D0', '\x3',
    '\x2', '\x2', '\x2', '\xA29', '\x8DB', '\x3', '\x2', '\x2', '\x2', '\xA29',
    '\x8ED', '\x3', '\x2', '\x2', '\x2', '\xA29', '\x8FC', '\x3', '\x2', '\x2',
    '\x2', '\xA29', '\x90F', '\x3', '\x2', '\x2', '\x2', '\xA29', '\x927',
    '\x3', '\x2', '\x2', '\x2', '\xA29', '\x936', '\x3', '\x2', '\x2', '\x2',
    '\xA29', '\x945', '\x3', '\x2', '\x2', '\x2', '\xA29', '\x951', '\x3',
    '\x2', '\x2', '\x2', '\xA29', '\x956', '\x3', '\x2', '\x2', '\x2', '\xA29',
    '\x962', '\x3', '\x2', '\x2', '\x2', '\xA29', '\x96E', '\x3', '\x2', '\x2',
    '\x2', '\xA29', '\x974', '\x3', '\x2', '\x2', '\x2', '\xA29', '\x979',
    '\x3', '\x2', '\x2', '\x2', '\xA29', '\x984', '\x3', '\x2', '\x2', '\x2',
    '\xA29', '\x98C', '\x3', '\x2', '\x2', '\x2', '\xA29', '\x98F', '\x3',
    '\x2', '\x2', '\x2', '\xA29', '\x995', '\x3', '\x2', '\x2', '\x2', '\xA29',
    '\x998', '\x3', '\x2', '\x2', '\x2', '\xA29', '\x99C', '\x3', '\x2', '\x2',
    '\x2', '\xA29', '\x99E', '\x3', '\x2', '\x2', '\x2', '\xA29', '\x9A0',
    '\x3', '\x2', '\x2', '\x2', '\xA29', '\x9A8', '\x3', '\x2', '\x2', '\x2',
    '\xA29', '\x9AB', '\x3', '\x2', '\x2', '\x2', '\xA29', '\x9B5', '\x3',
    '\x2', '\x2', '\x2', '\xA29', '\x9C0', '\x3', '\x2', '\x2', '\x2', '\xA29',
    '\x9C2', '\x3', '\x2', '\x2', '\x2', '\xA29', '\x9C4', '\x3', '\x2', '\x2',
    '\x2', '\xA29', '\x9C5', '\x3', '\x2', '\x2', '\x2', '\xA29', '\x9C7',
    '\x3', '\x2', '\x2', '\x2', '\xA29', '\x9D4', '\x3', '\x2', '\x2', '\x2',
    '\xA29', '\x9D7', '\x3', '\x2', '\x2', '\x2', '\xA29', '\x9DE', '\x3',
    '\x2', '\x2', '\x2', '\xA29', '\x9E5', '\x3', '\x2', '\x2', '\x2', '\xA29',
    '\x9EB', '\x3', '\x2', '\x2', '\x2', '\xA29', '\x9EE', '\x3', '\x2', '\x2',
    '\x2', '\xA29', '\x9FD', '\x3', '\x2', '\x2', '\x2', '\xA29', '\xA07',
    '\x3', '\x2', '\x2', '\x2', '\xA29', '\xA0D', '\x3', '\x2', '\x2', '\x2',
    '\xA29', '\xA13', '\x3', '\x2', '\x2', '\x2', '\xA29', '\xA19', '\x3',
    '\x2', '\x2', '\x2', '\xA29', '\xA1F', '\x3', '\x2', '\x2', '\x2', '\xA29',
    '\xA25', '\x3', '\x2', '\x2', '\x2', '\xA29', '\xA27', '\x3', '\x2', '\x2',
    '\x2', '\xA2A', '\x87', '\x3', '\x2', '\x2', '\x2', '\xA2B', '\xA2C',
    '\a', '\x31', '\x2', '\x2', '\xA2C', '\xA2E', '\t', '\x2', '\x2', '\x2',
    '\xA2D', '\xA2F', '\x5', '\x242', '\x122', '\x2', '\xA2E', '\xA2D', '\x3',
    '\x2', '\x2', '\x2', '\xA2E', '\xA2F', '\x3', '\x2', '\x2', '\x2', '\xA2F',
    '\xA30', '\x3', '\x2', '\x2', '\x2', '\xA30', '\xA31', '\x5', '\x20C',
    '\x107', '\x2', '\xA31', '\x89', '\x3', '\x2', '\x2', '\x2', '\xA32',
    '\xA33', '\a', '\x31', '\x2', '\x2', '\xA33', '\xA35', '\a', '\x153',
    '\x2', '\x2', '\xA34', '\xA36', '\x5', '\x242', '\x122', '\x2', '\xA35',
    '\xA34', '\x3', '\x2', '\x2', '\x2', '\xA35', '\xA36', '\x3', '\x2', '\x2',
    '\x2', '\xA36', '\xA37', '\x3', '\x2', '\x2', '\x2', '\xA37', '\xA38',
    '\x5', '\x1F2', '\xFA', '\x2', '\xA38', '\x8B', '\x3', '\x2', '\x2', '\x2',
    '\xA39', '\xA3A', '\a', '\x31', '\x2', '\x2', '\xA3A', '\xA3C', '\a',
    'J', '\x2', '\x2', '\xA3B', '\xA3D', '\t', '\x3', '\x2', '\x2', '\xA3C',
    '\xA3B', '\x3', '\x2', '\x2', '\x2', '\xA3C', '\xA3D', '\x3', '\x2', '\x2',
    '\x2', '\xA3D', '\xA3E', '\x3', '\x2', '\x2', '\x2', '\xA3E', '\xA3F',
    '\x5', '\x20C', '\x107', '\x2', '\xA3F', '\xA40', '\a', 'l', '\x2', '\x2',
    '\xA40', '\xA4D', '\x5', '\x1F4', '\xFB', '\x2', '\xA41', '\xA43', '\a',
    '\x109', '\x2', '\x2', '\xA42', '\xA44', '\a', '\x3CF', '\x2', '\x2',
    '\xA43', '\xA42', '\x3', '\x2', '\x2', '\x2', '\xA43', '\xA44', '\x3',
    '\x2', '\x2', '\x2', '\xA44', '\xA45', '\x3', '\x2', '\x2', '\x2', '\xA45',
    '\xA4C', '\t', '\x5', '\x2', '\x2', '\xA46', '\xA48', '\a', '_', '\x2',
    '\x2', '\xA47', '\xA49', '\a', '\x3CF', '\x2', '\x2', '\xA48', '\xA47',
    '\x3', '\x2', '\x2', '\x2', '\xA48', '\xA49', '\x3', '\x2', '\x2', '\x2',
    '\xA49', '\xA4A', '\x3', '\x2', '\x2', '\x2', '\xA4A', '\xA4C', '\t',
    '\x6', '\x2', '\x2', '\xA4B', '\xA41', '\x3', '\x2', '\x2', '\x2', '\xA4B',
    '\xA46', '\x3', '\x2', '\x2', '\x2', '\xA4C', '\xA4F', '\x3', '\x2', '\x2',
    '\x2', '\xA4D', '\xA4B', '\x3', '\x2', '\x2', '\x2', '\xA4D', '\xA4E',
    '\x3', '\x2', '\x2', '\x2', '\xA4E', '\x8D', '\x3', '\x2', '\x2', '\x2',
    '\xA4F', '\xA4D', '\x3', '\x2', '\x2', '\x2', '\xA50', '\xA51', '\a',
    '\x31', '\x2', '\x2', '\xA51', '\xA52', '\a', '\x18A', '\x2', '\x2', '\xA52',
    '\xA53', '\a', '\x44', '\x2', '\x2', '\xA53', '\xA54', '\x5', '\x20C',
    '\x107', '\x2', '\xA54', '\xA55', '\a', '\x14D', '\x2', '\x2', '\xA55',
    '\xA56', '\a', '\x3CF', '\x2', '\x2', '\xA56', '\xA57', '\x5', '\x202',
    '\x102', '\x2', '\xA57', '\x8F', '\x3', '\x2', '\x2', '\x2', '\xA58',
    '\xA59', '\a', '\x31', '\x2', '\x2', '\xA59', '\xA5B', '\a', 'w', '\x2',
    '\x2', '\xA5A', '\xA5C', '\x5', '\x242', '\x122', '\x2', '\xA5B', '\xA5A',
    '\x3', '\x2', '\x2', '\x2', '\xA5B', '\xA5C', '\x3', '\x2', '\x2', '\x2',
    '\xA5C', '\xA5D', '\x3', '\x2', '\x2', '\x2', '\xA5D', '\xA5E', '\x5',
    '\x1F2', '\xFA', '\x2', '\xA5E', '\x91', '\x3', '\x2', '\x2', '\x2', '\xA5F',
    '\xA60', '\a', '\x31', '\x2', '\x2', '\xA60', '\xA62', '\a', '\x167',
    '\x2', '\x2', '\xA61', '\xA63', '\x5', '\x242', '\x122', '\x2', '\xA62',
    '\xA61', '\x3', '\x2', '\x2', '\x2', '\xA62', '\xA63', '\x3', '\x2', '\x2',
    '\x2', '\xA63', '\xA64', '\x3', '\x2', '\x2', '\x2', '\xA64', '\xA65',
    '\x5', '\x1F2', '\xFA', '\x2', '\xA65', '\x93', '\x3', '\x2', '\x2', '\x2',
    '\xA66', '\xA67', '\a', '\x31', '\x2', '\x2', '\xA67', '\xA69', '\a',
    '\x1FB', '\x2', '\x2', '\xA68', '\xA6A', '\x5', '\x242', '\x122', '\x2',
    '\xA69', '\xA68', '\x3', '\x2', '\x2', '\x2', '\xA69', '\xA6A', '\x3',
    '\x2', '\x2', '\x2', '\xA6A', '\xA6B', '\x3', '\x2', '\x2', '\x2', '\xA6B',
    '\xA6C', '\x5', '\x20C', '\x107', '\x2', '\xA6C', '\x95', '\x3', '\x2',
    '\x2', '\x2', '\xA6D', '\xA6F', '\a', '\x31', '\x2', '\x2', '\xA6E', '\xA70',
    '\a', '\x223', '\x2', '\x2', '\xA6F', '\xA6E', '\x3', '\x2', '\x2', '\x2',
    '\xA6F', '\xA70', '\x3', '\x2', '\x2', '\x2', '\xA70', '\xA71', '\x3',
    '\x2', '\x2', '\x2', '\xA71', '\xA73', '\a', '\x9C', '\x2', '\x2', '\xA72',
    '\xA74', '\x5', '\x242', '\x122', '\x2', '\xA73', '\xA72', '\x3', '\x2',
    '\x2', '\x2', '\xA73', '\xA74', '\x3', '\x2', '\x2', '\x2', '\xA74', '\xA75',
    '\x3', '\x2', '\x2', '\x2', '\xA75', '\xA77', '\x5', '\x22E', '\x118',
    '\x2', '\xA76', '\xA78', '\t', '!', '\x2', '\x2', '\xA77', '\xA76', '\x3',
    '\x2', '\x2', '\x2', '\xA77', '\xA78', '\x3', '\x2', '\x2', '\x2', '\xA78',
    '\x97', '\x3', '\x2', '\x2', '\x2', '\xA79', '\xA7A', '\a', '\x31', '\x2',
    '\x2', '\xA7A', '\xA7B', '\a', '\x222', '\x2', '\x2', '\xA7B', '\xA81',
    '\x5', '\x20C', '\x107', '\x2', '\xA7C', '\xA7E', '\a', '\x14D', '\x2',
    '\x2', '\xA7D', '\xA7F', '\a', '\x3CF', '\x2', '\x2', '\xA7E', '\xA7D',
    '\x3', '\x2', '\x2', '\x2', '\xA7E', '\xA7F', '\x3', '\x2', '\x2', '\x2',
    '\xA7F', '\xA80', '\x3', '\x2', '\x2', '\x2', '\xA80', '\xA82', '\x5',
    '\x202', '\x102', '\x2', '\xA81', '\xA7C', '\x3', '\x2', '\x2', '\x2',
    '\xA81', '\xA82', '\x3', '\x2', '\x2', '\x2', '\xA82', '\x99', '\x3',
    '\x2', '\x2', '\x2', '\xA83', '\xA84', '\a', '\x31', '\x2', '\x2', '\xA84',
    '\xA86', '\a', '\xA1', '\x2', '\x2', '\xA85', '\xA87', '\x5', '\x242',
    '\x122', '\x2', '\xA86', '\xA85', '\x3', '\x2', '\x2', '\x2', '\xA86',
    '\xA87', '\x3', '\x2', '\x2', '\x2', '\xA87', '\xA88', '\x3', '\x2', '\x2',
    '\x2', '\xA88', '\xA89', '\x5', '\x1F2', '\xFA', '\x2', '\xA89', '\x9B',
    '\x3', '\x2', '\x2', '\x2', '\xA8A', '\xA8B', '\a', '\x31', '\x2', '\x2',
    '\xA8B', '\xA8D', '\a', '\x237', '\x2', '\x2', '\xA8C', '\xA8E', '\x5',
    '\x242', '\x122', '\x2', '\xA8D', '\xA8C', '\x3', '\x2', '\x2', '\x2',
    '\xA8D', '\xA8E', '\x3', '\x2', '\x2', '\x2', '\xA8E', '\xA8F', '\x3',
    '\x2', '\x2', '\x2', '\xA8F', '\xA94', '\x5', '\x1F2', '\xFA', '\x2',
    '\xA90', '\xA91', '\a', '\x3DA', '\x2', '\x2', '\xA91', '\xA93', '\x5',
    '\x1F2', '\xFA', '\x2', '\xA92', '\xA90', '\x3', '\x2', '\x2', '\x2',
    '\xA93', '\xA96', '\x3', '\x2', '\x2', '\x2', '\xA94', '\xA92', '\x3',
    '\x2', '\x2', '\x2', '\xA94', '\xA95', '\x3', '\x2', '\x2', '\x2', '\xA95',
    '\xA98', '\x3', '\x2', '\x2', '\x2', '\xA96', '\xA94', '\x3', '\x2', '\x2',
    '\x2', '\xA97', '\xA99', '\t', '!', '\x2', '\x2', '\xA98', '\xA97', '\x3',
    '\x2', '\x2', '\x2', '\xA98', '\xA99', '\x3', '\x2', '\x2', '\x2', '\xA99',
    '\x9D', '\x3', '\x2', '\x2', '\x2', '\xA9A', '\xA9B', '\a', '\x7F', '\x2',
    '\x2', '\xA9B', '\xA9C', '\a', '\x9C', '\x2', '\x2', '\xA9C', '\xAA1',
    '\x5', '\xA0', 'Q', '\x2', '\xA9D', '\xA9E', '\a', '\x3DA', '\x2', '\x2',
    '\xA9E', '\xAA0', '\x5', '\xA0', 'Q', '\x2', '\xA9F', '\xA9D', '\x3',
    '\x2', '\x2', '\x2', '\xAA0', '\xAA3', '\x3', '\x2', '\x2', '\x2', '\xAA1',
    '\xA9F', '\x3', '\x2', '\x2', '\x2', '\xAA1', '\xAA2', '\x3', '\x2', '\x2',
    '\x2', '\xAA2', '\x9F', '\x3', '\x2', '\x2', '\x2', '\xAA3', '\xAA1',
    '\x3', '\x2', '\x2', '\x2', '\xAA4', '\xAA5', '\x5', '\x1F4', '\xFB',
    '\x2', '\xAA5', '\xAA6', '\a', '\x9F', '\x2', '\x2', '\xAA6', '\xAA7',
    '\x5', '\x1F4', '\xFB', '\x2', '\xAA7', '\xA1', '\x3', '\x2', '\x2', '\x2',
    '\xAA8', '\xAAA', '\a', '\x229', '\x2', '\x2', '\xAA9', '\xAAB', '\a',
    '\x9C', '\x2', '\x2', '\xAAA', '\xAA9', '\x3', '\x2', '\x2', '\x2', '\xAAA',
    '\xAAB', '\x3', '\x2', '\x2', '\x2', '\xAAB', '\xAAC', '\x3', '\x2', '\x2',
    '\x2', '\xAAC', '\xAAD', '\x5', '\x1F4', '\xFB', '\x2', '\xAAD', '\xA3',
    '\x3', '\x2', '\x2', '\x2', '\xAAE', '\xAAF', '\a', '\x13', '\x2', '\x2',
    '\xAAF', '\xAB6', '\x5', '\x1F2', '\xFA', '\x2', '\xAB0', '\xAB3', '\a',
    '\x3D8', '\x2', '\x2', '\xAB1', '\xAB4', '\x5', '\x236', '\x11C', '\x2',
    '\xAB2', '\xAB4', '\x5', '\x232', '\x11A', '\x2', '\xAB3', '\xAB1', '\x3',
    '\x2', '\x2', '\x2', '\xAB3', '\xAB2', '\x3', '\x2', '\x2', '\x2', '\xAB3',
    '\xAB4', '\x3', '\x2', '\x2', '\x2', '\xAB4', '\xAB5', '\x3', '\x2', '\x2',
    '\x2', '\xAB5', '\xAB7', '\a', '\x3D9', '\x2', '\x2', '\xAB6', '\xAB0',
    '\x3', '\x2', '\x2', '\x2', '\xAB6', '\xAB7', '\x3', '\x2', '\x2', '\x2',
    '\xAB7', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xAB8', '\xABB', '\x5',
    '\xC0', '\x61', '\x2', '\xAB9', '\xABB', '\x5', '\xC2', '\x62', '\x2',
    '\xABA', '\xAB8', '\x3', '\x2', '\x2', '\x2', '\xABA', '\xAB9', '\x3',
    '\x2', '\x2', '\x2', '\xABB', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xABC',
    '\xABD', '\a', '\x145', '\x2', '\x2', '\xABD', '\xABE', '\x5', '\x232',
    '\x11A', '\x2', '\xABE', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xABF',
    '\xAC4', '\x5', '\xC4', '\x63', '\x2', '\xAC0', '\xAC4', '\x5', '\xC6',
    '\x64', '\x2', '\xAC1', '\xAC4', '\x5', '\xC8', '\x65', '\x2', '\xAC2',
    '\xAC4', '\x5', '\xCA', '\x66', '\x2', '\xAC3', '\xABF', '\x3', '\x2',
    '\x2', '\x2', '\xAC3', '\xAC0', '\x3', '\x2', '\x2', '\x2', '\xAC3', '\xAC1',
    '\x3', '\x2', '\x2', '\x2', '\xAC3', '\xAC2', '\x3', '\x2', '\x2', '\x2',
    '\xAC4', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xAC5', '\xAC7', '\a', 'N',
    '\x2', '\x2', '\xAC6', '\xAC8', '\t', '\"', '\x2', '\x2', '\xAC7', '\xAC6',
    '\x3', '\x2', '\x2', '\x2', '\xAC7', '\xAC8', '\x3', '\x2', '\x2', '\x2',
    '\xAC8', '\xACA', '\x3', '\x2', '\x2', '\x2', '\xAC9', '\xACB', '\a',
    'H', '\x2', '\x2', '\xACA', '\xAC9', '\x3', '\x2', '\x2', '\x2', '\xACA',
    '\xACB', '\x3', '\x2', '\x2', '\x2', '\xACB', '\xACD', '\x3', '\x2', '\x2',
    '\x2', '\xACC', '\xACE', '\a', 'P', '\x2', '\x2', '\xACD', '\xACC', '\x3',
    '\x2', '\x2', '\x2', '\xACD', '\xACE', '\x3', '\x2', '\x2', '\x2', '\xACE',
    '\xACF', '\x3', '\x2', '\x2', '\x2', '\xACF', '\xAD5', '\x5', '\x1F4',
    '\xFB', '\x2', '\xAD0', '\xAD1', '\a', 'u', '\x2', '\x2', '\xAD1', '\xAD2',
    '\a', '\x3D8', '\x2', '\x2', '\xAD2', '\xAD3', '\x5', '\x22C', '\x117',
    '\x2', '\xAD3', '\xAD4', '\a', '\x3D9', '\x2', '\x2', '\xAD4', '\xAD6',
    '\x3', '\x2', '\x2', '\x2', '\xAD5', '\xAD0', '\x3', '\x2', '\x2', '\x2',
    '\xAD5', '\xAD6', '\x3', '\x2', '\x2', '\x2', '\xAD6', '\xAE7', '\x3',
    '\x2', '\x2', '\x2', '\xAD7', '\xAD8', '\a', '\x3D8', '\x2', '\x2', '\xAD8',
    '\xAD9', '\x5', '\x22C', '\x117', '\x2', '\xAD9', '\xADA', '\a', '\x3D9',
    '\x2', '\x2', '\xADA', '\xADC', '\x3', '\x2', '\x2', '\x2', '\xADB', '\xAD7',
    '\x3', '\x2', '\x2', '\x2', '\xADB', '\xADC', '\x3', '\x2', '\x2', '\x2',
    '\xADC', '\xADD', '\x3', '\x2', '\x2', '\x2', '\xADD', '\xAE8', '\x5',
    '\xB8', ']', '\x2', '\xADE', '\xADF', '\a', '\x8C', '\x2', '\x2', '\xADF',
    '\xAE4', '\x5', '\xBA', '^', '\x2', '\xAE0', '\xAE1', '\a', '\x3DA', '\x2',
    '\x2', '\xAE1', '\xAE3', '\x5', '\xBA', '^', '\x2', '\xAE2', '\xAE0',
    '\x3', '\x2', '\x2', '\x2', '\xAE3', '\xAE6', '\x3', '\x2', '\x2', '\x2',
    '\xAE4', '\xAE2', '\x3', '\x2', '\x2', '\x2', '\xAE4', '\xAE5', '\x3',
    '\x2', '\x2', '\x2', '\xAE5', '\xAE8', '\x3', '\x2', '\x2', '\x2', '\xAE6',
    '\xAE4', '\x3', '\x2', '\x2', '\x2', '\xAE7', '\xADB', '\x3', '\x2', '\x2',
    '\x2', '\xAE7', '\xADE', '\x3', '\x2', '\x2', '\x2', '\xAE8', '\xAF5',
    '\x3', '\x2', '\x2', '\x2', '\xAE9', '\xAEA', '\a', 'l', '\x2', '\x2',
    '\xAEA', '\xAEB', '\a', '\x147', '\x2', '\x2', '\xAEB', '\xAEC', '\a',
    'T', '\x2', '\x2', '\xAEC', '\xAED', '\a', '\xA8', '\x2', '\x2', '\xAED',
    '\xAF2', '\x5', '\xBA', '^', '\x2', '\xAEE', '\xAEF', '\a', '\x3DA', '\x2',
    '\x2', '\xAEF', '\xAF1', '\x5', '\xBA', '^', '\x2', '\xAF0', '\xAEE',
    '\x3', '\x2', '\x2', '\x2', '\xAF1', '\xAF4', '\x3', '\x2', '\x2', '\x2',
    '\xAF2', '\xAF0', '\x3', '\x2', '\x2', '\x2', '\xAF2', '\xAF3', '\x3',
    '\x2', '\x2', '\x2', '\xAF3', '\xAF6', '\x3', '\x2', '\x2', '\x2', '\xAF4',
    '\xAF2', '\x3', '\x2', '\x2', '\x2', '\xAF5', '\xAE9', '\x3', '\x2', '\x2',
    '\x2', '\xAF5', '\xAF6', '\x3', '\x2', '\x2', '\x2', '\xAF6', '\xAD',
    '\x3', '\x2', '\x2', '\x2', '\xAF7', '\xAF8', '\a', '^', '\x2', '\x2',
    '\xAF8', '\xAFA', '\a', '\x13A', '\x2', '\x2', '\xAF9', '\xAFB', '\t',
    '#', '\x2', '\x2', '\xAFA', '\xAF9', '\x3', '\x2', '\x2', '\x2', '\xAFA',
    '\xAFB', '\x3', '\x2', '\x2', '\x2', '\xAFB', '\xAFD', '\x3', '\x2', '\x2',
    '\x2', '\xAFC', '\xAFE', '\a', '\x189', '\x2', '\x2', '\xAFD', '\xAFC',
    '\x3', '\x2', '\x2', '\x2', '\xAFD', '\xAFE', '\x3', '\x2', '\x2', '\x2',
    '\xAFE', '\xAFF', '\x3', '\x2', '\x2', '\x2', '\xAFF', '\xB00', '\a',
    'K', '\x2', '\x2', '\xB00', '\xB02', '\a', '\x3E7', '\x2', '\x2', '\xB01',
    '\xB03', '\t', '\b', '\x2', '\x2', '\xB02', '\xB01', '\x3', '\x2', '\x2',
    '\x2', '\xB02', '\xB03', '\x3', '\x2', '\x2', '\x2', '\xB03', '\xB04',
    '\x3', '\x2', '\x2', '\x2', '\xB04', '\xB05', '\a', 'P', '\x2', '\x2',
    '\xB05', '\xB06', '\a', '\x9C', '\x2', '\x2', '\xB06', '\xB0C', '\x5',
    '\x1F4', '\xFB', '\x2', '\xB07', '\xB08', '\a', 'u', '\x2', '\x2', '\xB08',
    '\xB09', '\a', '\x3D8', '\x2', '\x2', '\xB09', '\xB0A', '\x5', '\x22C',
    '\x117', '\x2', '\xB0A', '\xB0B', '\a', '\x3D9', '\x2', '\x2', '\xB0B',
    '\xB0D', '\x3', '\x2', '\x2', '\x2', '\xB0C', '\xB07', '\x3', '\x2', '\x2',
    '\x2', '\xB0C', '\xB0D', '\x3', '\x2', '\x2', '\x2', '\xB0D', '\xB11',
    '\x3', '\x2', '\x2', '\x2', '\xB0E', '\xB0F', '\a', '\x18', '\x2', '\x2',
    '\xB0F', '\xB10', '\a', '\x8C', '\x2', '\x2', '\xB10', '\xB12', '\x5',
    '\x1FE', '\x100', '\x2', '\xB11', '\xB0E', '\x3', '\x2', '\x2', '\x2',
    '\xB11', '\xB12', '\x3', '\x2', '\x2', '\x2', '\xB12', '\xB19', '\x3',
    '\x2', '\x2', '\x2', '\xB13', '\xB15', '\t', '$', '\x2', '\x2', '\xB14',
    '\xB16', '\x5', '\xF4', '{', '\x2', '\xB15', '\xB14', '\x3', '\x2', '\x2',
    '\x2', '\xB16', '\xB17', '\x3', '\x2', '\x2', '\x2', '\xB17', '\xB15',
    '\x3', '\x2', '\x2', '\x2', '\xB17', '\xB18', '\x3', '\x2', '\x2', '\x2',
    '\xB18', '\xB1A', '\x3', '\x2', '\x2', '\x2', '\xB19', '\xB13', '\x3',
    '\x2', '\x2', '\x2', '\xB19', '\xB1A', '\x3', '\x2', '\x2', '\x2', '\xB1A',
    '\xB21', '\x3', '\x2', '\x2', '\x2', '\xB1B', '\xB1D', '\a', ']', '\x2',
    '\x2', '\xB1C', '\xB1E', '\x5', '\xF6', '|', '\x2', '\xB1D', '\xB1C',
    '\x3', '\x2', '\x2', '\x2', '\xB1E', '\xB1F', '\x3', '\x2', '\x2', '\x2',
    '\xB1F', '\xB1D', '\x3', '\x2', '\x2', '\x2', '\xB1F', '\xB20', '\x3',
    '\x2', '\x2', '\x2', '\xB20', '\xB22', '\x3', '\x2', '\x2', '\x2', '\xB21',
    '\xB1B', '\x3', '\x2', '\x2', '\x2', '\xB21', '\xB22', '\x3', '\x2', '\x2',
    '\x2', '\xB22', '\xB27', '\x3', '\x2', '\x2', '\x2', '\xB23', '\xB24',
    '\a', 'H', '\x2', '\x2', '\xB24', '\xB25', '\x5', '\x212', '\x10A', '\x2',
    '\xB25', '\xB26', '\t', '%', '\x2', '\x2', '\xB26', '\xB28', '\x3', '\x2',
    '\x2', '\x2', '\xB27', '\xB23', '\x3', '\x2', '\x2', '\x2', '\xB27', '\xB28',
    '\x3', '\x2', '\x2', '\x2', '\xB28', '\xB34', '\x3', '\x2', '\x2', '\x2',
    '\xB29', '\xB2A', '\a', '\x3D8', '\x2', '\x2', '\xB2A', '\xB2F', '\x5',
    '\xBC', '_', '\x2', '\xB2B', '\xB2C', '\a', '\x3DA', '\x2', '\x2', '\xB2C',
    '\xB2E', '\x5', '\xBC', '_', '\x2', '\xB2D', '\xB2B', '\x3', '\x2', '\x2',
    '\x2', '\xB2E', '\xB31', '\x3', '\x2', '\x2', '\x2', '\xB2F', '\xB2D',
    '\x3', '\x2', '\x2', '\x2', '\xB2F', '\xB30', '\x3', '\x2', '\x2', '\x2',
    '\xB30', '\xB32', '\x3', '\x2', '\x2', '\x2', '\xB31', '\xB2F', '\x3',
    '\x2', '\x2', '\x2', '\xB32', '\xB33', '\a', '\x3D9', '\x2', '\x2', '\xB33',
    '\xB35', '\x3', '\x2', '\x2', '\x2', '\xB34', '\xB29', '\x3', '\x2', '\x2',
    '\x2', '\xB34', '\xB35', '\x3', '\x2', '\x2', '\x2', '\xB35', '\xB3F',
    '\x3', '\x2', '\x2', '\x2', '\xB36', '\xB37', '\a', '\x8C', '\x2', '\x2',
    '\xB37', '\xB3C', '\x5', '\xBA', '^', '\x2', '\xB38', '\xB39', '\a', '\x3DA',
    '\x2', '\x2', '\xB39', '\xB3B', '\x5', '\xBA', '^', '\x2', '\xB3A', '\xB38',
    '\x3', '\x2', '\x2', '\x2', '\xB3B', '\xB3E', '\x3', '\x2', '\x2', '\x2',
    '\xB3C', '\xB3A', '\x3', '\x2', '\x2', '\x2', '\xB3C', '\xB3D', '\x3',
    '\x2', '\x2', '\x2', '\xB3D', '\xB40', '\x3', '\x2', '\x2', '\x2', '\xB3E',
    '\xB3C', '\x3', '\x2', '\x2', '\x2', '\xB3F', '\xB36', '\x3', '\x2', '\x2',
    '\x2', '\xB3F', '\xB40', '\x3', '\x2', '\x2', '\x2', '\xB40', '\xAF',
    '\x3', '\x2', '\x2', '\x2', '\xB41', '\xB42', '\a', '^', '\x2', '\x2',
    '\xB42', '\xB44', '\a', '\x241', '\x2', '\x2', '\xB43', '\xB45', '\t',
    '#', '\x2', '\x2', '\xB44', '\xB43', '\x3', '\x2', '\x2', '\x2', '\xB44',
    '\xB45', '\x3', '\x2', '\x2', '\x2', '\xB45', '\xB47', '\x3', '\x2', '\x2',
    '\x2', '\xB46', '\xB48', '\a', '\x189', '\x2', '\x2', '\xB47', '\xB46',
    '\x3', '\x2', '\x2', '\x2', '\xB47', '\xB48', '\x3', '\x2', '\x2', '\x2',
    '\xB48', '\xB49', '\x3', '\x2', '\x2', '\x2', '\xB49', '\xB4A', '\a',
    'K', '\x2', '\x2', '\xB4A', '\xB4C', '\a', '\x3E7', '\x2', '\x2', '\xB4B',
    '\xB4D', '\t', '\b', '\x2', '\x2', '\xB4C', '\xB4B', '\x3', '\x2', '\x2',
    '\x2', '\xB4C', '\xB4D', '\x3', '\x2', '\x2', '\x2', '\xB4D', '\xB4E',
    '\x3', '\x2', '\x2', '\x2', '\xB4E', '\xB4F', '\a', 'P', '\x2', '\x2',
    '\xB4F', '\xB50', '\a', '\x9C', '\x2', '\x2', '\xB50', '\xB54', '\x5',
    '\x1F4', '\xFB', '\x2', '\xB51', '\xB52', '\a', '\x18', '\x2', '\x2',
    '\xB52', '\xB53', '\a', '\x8C', '\x2', '\x2', '\xB53', '\xB55', '\x5',
    '\x1FE', '\x100', '\x2', '\xB54', '\xB51', '\x3', '\x2', '\x2', '\x2',
    '\xB54', '\xB55', '\x3', '\x2', '\x2', '\x2', '\xB55', '\xB5C', '\x3',
    '\x2', '\x2', '\x2', '\xB56', '\xB57', '\a', '\x1F6', '\x2', '\x2', '\xB57',
    '\xB58', '\a', '\x171', '\x2', '\x2', '\xB58', '\xB59', '\a', '\x12',
    '\x2', '\x2', '\xB59', '\xB5A', '\a', '\x3D1', '\x2', '\x2', '\xB5A',
    '\xB5B', '\a', '\x3E7', '\x2', '\x2', '\xB5B', '\xB5D', '\a', '\x3D0',
    '\x2', '\x2', '\xB5C', '\xB56', '\x3', '\x2', '\x2', '\x2', '\xB5C', '\xB5D',
    '\x3', '\x2', '\x2', '\x2', '\xB5D', '\xB62', '\x3', '\x2', '\x2', '\x2',
    '\xB5E', '\xB5F', '\a', 'H', '\x2', '\x2', '\xB5F', '\xB60', '\x5', '\x212',
    '\x10A', '\x2', '\xB60', '\xB61', '\t', '%', '\x2', '\x2', '\xB61', '\xB63',
    '\x3', '\x2', '\x2', '\x2', '\xB62', '\xB5E', '\x3', '\x2', '\x2', '\x2',
    '\xB62', '\xB63', '\x3', '\x2', '\x2', '\x2', '\xB63', '\xB6F', '\x3',
    '\x2', '\x2', '\x2', '\xB64', '\xB65', '\a', '\x3D8', '\x2', '\x2', '\xB65',
    '\xB6A', '\x5', '\xBC', '_', '\x2', '\xB66', '\xB67', '\a', '\x3DA', '\x2',
    '\x2', '\xB67', '\xB69', '\x5', '\xBC', '_', '\x2', '\xB68', '\xB66',
    '\x3', '\x2', '\x2', '\x2', '\xB69', '\xB6C', '\x3', '\x2', '\x2', '\x2',
    '\xB6A', '\xB68', '\x3', '\x2', '\x2', '\x2', '\xB6A', '\xB6B', '\x3',
    '\x2', '\x2', '\x2', '\xB6B', '\xB6D', '\x3', '\x2', '\x2', '\x2', '\xB6C',
    '\xB6A', '\x3', '\x2', '\x2', '\x2', '\xB6D', '\xB6E', '\a', '\x3D9',
    '\x2', '\x2', '\xB6E', '\xB70', '\x3', '\x2', '\x2', '\x2', '\xB6F', '\xB64',
    '\x3', '\x2', '\x2', '\x2', '\xB6F', '\xB70', '\x3', '\x2', '\x2', '\x2',
    '\xB70', '\xB7A', '\x3', '\x2', '\x2', '\x2', '\xB71', '\xB72', '\a',
    '\x8C', '\x2', '\x2', '\xB72', '\xB77', '\x5', '\xBA', '^', '\x2', '\xB73',
    '\xB74', '\a', '\x3DA', '\x2', '\x2', '\xB74', '\xB76', '\x5', '\xBA',
    '^', '\x2', '\xB75', '\xB73', '\x3', '\x2', '\x2', '\x2', '\xB76', '\xB79',
    '\x3', '\x2', '\x2', '\x2', '\xB77', '\xB75', '\x3', '\x2', '\x2', '\x2',
    '\xB77', '\xB78', '\x3', '\x2', '\x2', '\x2', '\xB78', '\xB7B', '\x3',
    '\x2', '\x2', '\x2', '\xB79', '\xB77', '\x3', '\x2', '\x2', '\x2', '\xB7A',
    '\xB71', '\x3', '\x2', '\x2', '\x2', '\xB7A', '\xB7B', '\x3', '\x2', '\x2',
    '\x2', '\xB7B', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB7C', '\xB7E',
    '\a', '\x81', '\x2', '\x2', '\xB7D', '\xB7F', '\t', '&', '\x2', '\x2',
    '\xB7E', '\xB7D', '\x3', '\x2', '\x2', '\x2', '\xB7E', '\xB7F', '\x3',
    '\x2', '\x2', '\x2', '\xB7F', '\xB81', '\x3', '\x2', '\x2', '\x2', '\xB80',
    '\xB82', '\a', 'P', '\x2', '\x2', '\xB81', '\xB80', '\x3', '\x2', '\x2',
    '\x2', '\xB81', '\xB82', '\x3', '\x2', '\x2', '\x2', '\xB82', '\xB83',
    '\x3', '\x2', '\x2', '\x2', '\xB83', '\xB89', '\x5', '\x1F4', '\xFB',
    '\x2', '\xB84', '\xB85', '\a', 'u', '\x2', '\x2', '\xB85', '\xB86', '\a',
    '\x3D8', '\x2', '\x2', '\xB86', '\xB87', '\x5', '\x22C', '\x117', '\x2',
    '\xB87', '\xB88', '\a', '\x3D9', '\x2', '\x2', '\xB88', '\xB8A', '\x3',
    '\x2', '\x2', '\x2', '\xB89', '\xB84', '\x3', '\x2', '\x2', '\x2', '\xB89',
    '\xB8A', '\x3', '\x2', '\x2', '\x2', '\xB8A', '\xB9B', '\x3', '\x2', '\x2',
    '\x2', '\xB8B', '\xB8C', '\a', '\x3D8', '\x2', '\x2', '\xB8C', '\xB8D',
    '\x5', '\x22C', '\x117', '\x2', '\xB8D', '\xB8E', '\a', '\x3D9', '\x2',
    '\x2', '\xB8E', '\xB90', '\x3', '\x2', '\x2', '\x2', '\xB8F', '\xB8B',
    '\x3', '\x2', '\x2', '\x2', '\xB8F', '\xB90', '\x3', '\x2', '\x2', '\x2',
    '\xB90', '\xB91', '\x3', '\x2', '\x2', '\x2', '\xB91', '\xB9C', '\x5',
    '\xB8', ']', '\x2', '\xB92', '\xB93', '\a', '\x8C', '\x2', '\x2', '\xB93',
    '\xB98', '\x5', '\xBA', '^', '\x2', '\xB94', '\xB95', '\a', '\x3DA', '\x2',
    '\x2', '\xB95', '\xB97', '\x5', '\xBA', '^', '\x2', '\xB96', '\xB94',
    '\x3', '\x2', '\x2', '\x2', '\xB97', '\xB9A', '\x3', '\x2', '\x2', '\x2',
    '\xB98', '\xB96', '\x3', '\x2', '\x2', '\x2', '\xB98', '\xB99', '\x3',
    '\x2', '\x2', '\x2', '\xB99', '\xB9C', '\x3', '\x2', '\x2', '\x2', '\xB9A',
    '\xB98', '\x3', '\x2', '\x2', '\x2', '\xB9B', '\xB8F', '\x3', '\x2', '\x2',
    '\x2', '\xB9B', '\xB92', '\x3', '\x2', '\x2', '\x2', '\xB9C', '\xB3',
    '\x3', '\x2', '\x2', '\x2', '\xB9D', '\xB9F', '\x5', '\xE4', 's', '\x2',
    '\xB9E', '\xBA0', '\x5', '\xBE', '`', '\x2', '\xB9F', '\xB9E', '\x3',
    '\x2', '\x2', '\x2', '\xB9F', '\xBA0', '\x3', '\x2', '\x2', '\x2', '\xBA0',
    '\xBD5', '\x3', '\x2', '\x2', '\x2', '\xBA1', '\xBA3', '\x5', '\xE0',
    'q', '\x2', '\xBA2', '\xBA4', '\x5', '\xBE', '`', '\x2', '\xBA3', '\xBA2',
    '\x3', '\x2', '\x2', '\x2', '\xBA3', '\xBA4', '\x3', '\x2', '\x2', '\x2',
    '\xBA4', '\xBD5', '\x3', '\x2', '\x2', '\x2', '\xBA5', '\xBA7', '\x5',
    '\xE6', 't', '\x2', '\xBA6', '\xBA8', '\x5', '\xEA', 'v', '\x2', '\xBA7',
    '\xBA6', '\x3', '\x2', '\x2', '\x2', '\xBA8', '\xBA9', '\x3', '\x2', '\x2',
    '\x2', '\xBA9', '\xBA7', '\x3', '\x2', '\x2', '\x2', '\xBA9', '\xBAA',
    '\x3', '\x2', '\x2', '\x2', '\xBAA', '\xBB3', '\x3', '\x2', '\x2', '\x2',
    '\xBAB', '\xBAD', '\a', '\xA4', '\x2', '\x2', '\xBAC', '\xBAE', '\t',
    '\'', '\x2', '\x2', '\xBAD', '\xBAC', '\x3', '\x2', '\x2', '\x2', '\xBAD',
    '\xBAE', '\x3', '\x2', '\x2', '\x2', '\xBAE', '\xBB1', '\x3', '\x2', '\x2',
    '\x2', '\xBAF', '\xBB2', '\x5', '\xE4', 's', '\x2', '\xBB0', '\xBB2',
    '\x5', '\xE0', 'q', '\x2', '\xBB1', '\xBAF', '\x3', '\x2', '\x2', '\x2',
    '\xBB1', '\xBB0', '\x3', '\x2', '\x2', '\x2', '\xBB2', '\xBB4', '\x3',
    '\x2', '\x2', '\x2', '\xBB3', '\xBAB', '\x3', '\x2', '\x2', '\x2', '\xBB3',
    '\xBB4', '\x3', '\x2', '\x2', '\x2', '\xBB4', '\xBB6', '\x3', '\x2', '\x2',
    '\x2', '\xBB5', '\xBB7', '\x5', '\xD0', 'i', '\x2', '\xBB6', '\xBB5',
    '\x3', '\x2', '\x2', '\x2', '\xBB6', '\xBB7', '\x3', '\x2', '\x2', '\x2',
    '\xBB7', '\xBB9', '\x3', '\x2', '\x2', '\x2', '\xBB8', '\xBBA', '\x5',
    '\xFC', '\x7F', '\x2', '\xBB9', '\xBB8', '\x3', '\x2', '\x2', '\x2', '\xBB9',
    '\xBBA', '\x3', '\x2', '\x2', '\x2', '\xBBA', '\xBBC', '\x3', '\x2', '\x2',
    '\x2', '\xBBB', '\xBBD', '\x5', '\xBE', '`', '\x2', '\xBBC', '\xBBB',
    '\x3', '\x2', '\x2', '\x2', '\xBBC', '\xBBD', '\x3', '\x2', '\x2', '\x2',
    '\xBBD', '\xBD5', '\x3', '\x2', '\x2', '\x2', '\xBBE', '\xBC0', '\x5',
    '\xE2', 'r', '\x2', '\xBBF', '\xBC1', '\x5', '\xE8', 'u', '\x2', '\xBC0',
    '\xBBF', '\x3', '\x2', '\x2', '\x2', '\xBC1', '\xBC2', '\x3', '\x2', '\x2',
    '\x2', '\xBC2', '\xBC0', '\x3', '\x2', '\x2', '\x2', '\xBC2', '\xBC3',
    '\x3', '\x2', '\x2', '\x2', '\xBC3', '\xBC9', '\x3', '\x2', '\x2', '\x2',
    '\xBC4', '\xBC6', '\a', '\xA4', '\x2', '\x2', '\xBC5', '\xBC7', '\t',
    '\'', '\x2', '\x2', '\xBC6', '\xBC5', '\x3', '\x2', '\x2', '\x2', '\xBC6',
    '\xBC7', '\x3', '\x2', '\x2', '\x2', '\xBC7', '\xBC8', '\x3', '\x2', '\x2',
    '\x2', '\xBC8', '\xBCA', '\x5', '\xE0', 'q', '\x2', '\xBC9', '\xBC4',
    '\x3', '\x2', '\x2', '\x2', '\xBC9', '\xBCA', '\x3', '\x2', '\x2', '\x2',
    '\xBCA', '\xBCC', '\x3', '\x2', '\x2', '\x2', '\xBCB', '\xBCD', '\x5',
    '\xD0', 'i', '\x2', '\xBCC', '\xBCB', '\x3', '\x2', '\x2', '\x2', '\xBCC',
    '\xBCD', '\x3', '\x2', '\x2', '\x2', '\xBCD', '\xBCF', '\x3', '\x2', '\x2',
    '\x2', '\xBCE', '\xBD0', '\x5', '\xFC', '\x7F', '\x2', '\xBCF', '\xBCE',
    '\x3', '\x2', '\x2', '\x2', '\xBCF', '\xBD0', '\x3', '\x2', '\x2', '\x2',
    '\xBD0', '\xBD2', '\x3', '\x2', '\x2', '\x2', '\xBD1', '\xBD3', '\x5',
    '\xBE', '`', '\x2', '\xBD2', '\xBD1', '\x3', '\x2', '\x2', '\x2', '\xBD2',
    '\xBD3', '\x3', '\x2', '\x2', '\x2', '\xBD3', '\xBD5', '\x3', '\x2', '\x2',
    '\x2', '\xBD4', '\xB9D', '\x3', '\x2', '\x2', '\x2', '\xBD4', '\xBA1',
    '\x3', '\x2', '\x2', '\x2', '\xBD4', '\xBA5', '\x3', '\x2', '\x2', '\x2',
    '\xBD4', '\xBBE', '\x3', '\x2', '\x2', '\x2', '\xBD5', '\xB5', '\x3',
    '\x2', '\x2', '\x2', '\xBD6', '\xBD9', '\x5', '\xCC', 'g', '\x2', '\xBD7',
    '\xBD9', '\x5', '\xCE', 'h', '\x2', '\xBD8', '\xBD6', '\x3', '\x2', '\x2',
    '\x2', '\xBD8', '\xBD7', '\x3', '\x2', '\x2', '\x2', '\xBD9', '\xB7',
    '\x3', '\x2', '\x2', '\x2', '\xBDA', '\xBEA', '\x5', '\xB4', '[', '\x2',
    '\xBDB', '\xBDC', '\t', '(', '\x2', '\x2', '\xBDC', '\xBDD', '\a', '\x3D8',
    '\x2', '\x2', '\xBDD', '\xBDE', '\x5', '\x234', '\x11B', '\x2', '\xBDE',
    '\xBE6', '\a', '\x3D9', '\x2', '\x2', '\xBDF', '\xBE0', '\a', '\x3DA',
    '\x2', '\x2', '\xBE0', '\xBE1', '\a', '\x3D8', '\x2', '\x2', '\xBE1',
    '\xBE2', '\x5', '\x234', '\x11B', '\x2', '\xBE2', '\xBE3', '\a', '\x3D9',
    '\x2', '\x2', '\xBE3', '\xBE5', '\x3', '\x2', '\x2', '\x2', '\xBE4', '\xBDF',
    '\x3', '\x2', '\x2', '\x2', '\xBE5', '\xBE8', '\x3', '\x2', '\x2', '\x2',
    '\xBE6', '\xBE4', '\x3', '\x2', '\x2', '\x2', '\xBE6', '\xBE7', '\x3',
    '\x2', '\x2', '\x2', '\xBE7', '\xBEA', '\x3', '\x2', '\x2', '\x2', '\xBE8',
    '\xBE6', '\x3', '\x2', '\x2', '\x2', '\xBE9', '\xBDA', '\x3', '\x2', '\x2',
    '\x2', '\xBE9', '\xBDB', '\x3', '\x2', '\x2', '\x2', '\xBEA', '\xB9',
    '\x3', '\x2', '\x2', '\x2', '\xBEB', '\xBEC', '\x5', '\x1F6', '\xFC',
    '\x2', '\xBEC', '\xBEF', '\a', '\x3CF', '\x2', '\x2', '\xBED', '\xBF0',
    '\x5', '\x25A', '\x12E', '\x2', '\xBEE', '\xBF0', '\a', '(', '\x2', '\x2',
    '\xBEF', '\xBED', '\x3', '\x2', '\x2', '\x2', '\xBEF', '\xBEE', '\x3',
    '\x2', '\x2', '\x2', '\xBF0', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xBF1',
    '\xBF4', '\x5', '\x20C', '\x107', '\x2', '\xBF2', '\xBF4', '\a', '\x3F2',
    '\x2', '\x2', '\xBF3', '\xBF1', '\x3', '\x2', '\x2', '\x2', '\xBF3', '\xBF2',
    '\x3', '\x2', '\x2', '\x2', '\xBF4', '\xBD', '\x3', '\x2', '\x2', '\x2',
    '\xBF5', '\xBF6', '\a', '<', '\x2', '\x2', '\xBF6', '\xBFC', '\a', '\xA8',
    '\x2', '\x2', '\xBF7', '\xBF8', '\a', '_', '\x2', '\x2', '\xBF8', '\xBF9',
    '\a', 'I', '\x2', '\x2', '\xBF9', '\xBFA', '\a', '\x1FD', '\x2', '\x2',
    '\xBFA', '\xBFC', '\a', '\x1AD', '\x2', '\x2', '\xBFB', '\xBF5', '\x3',
    '\x2', '\x2', '\x2', '\xBFB', '\xBF7', '\x3', '\x2', '\x2', '\x2', '\xBFC',
    '\xBF', '\x3', '\x2', '\x2', '\x2', '\xBFD', '\xBFF', '\a', '*', '\x2',
    '\x2', '\xBFE', '\xC00', '\a', '\x61', '\x2', '\x2', '\xBFF', '\xBFE',
    '\x3', '\x2', '\x2', '\x2', '\xBFF', '\xC00', '\x3', '\x2', '\x2', '\x2',
    '\xC00', '\xC02', '\x3', '\x2', '\x2', '\x2', '\xC01', '\xC03', '\a',
    '\x1DA', '\x2', '\x2', '\xC02', '\xC01', '\x3', '\x2', '\x2', '\x2', '\xC02',
    '\xC03', '\x3', '\x2', '\x2', '\x2', '\xC03', '\xC05', '\x3', '\x2', '\x2',
    '\x2', '\xC04', '\xC06', '\a', 'H', '\x2', '\x2', '\xC05', '\xC04', '\x3',
    '\x2', '\x2', '\x2', '\xC05', '\xC06', '\x3', '\x2', '\x2', '\x2', '\xC06',
    '\xC07', '\x3', '\x2', '\x2', '\x2', '\xC07', '\xC08', '\a', '?', '\x2',
    '\x2', '\xC08', '\xC0E', '\x5', '\x1F4', '\xFB', '\x2', '\xC09', '\xC0A',
    '\a', 'u', '\x2', '\x2', '\xC0A', '\xC0B', '\a', '\x3D8', '\x2', '\x2',
    '\xC0B', '\xC0C', '\x5', '\x22C', '\x117', '\x2', '\xC0C', '\xC0D', '\a',
    '\x3D9', '\x2', '\x2', '\xC0D', '\xC0F', '\x3', '\x2', '\x2', '\x2', '\xC0E',
    '\xC09', '\x3', '\x2', '\x2', '\x2', '\xC0E', '\xC0F', '\x3', '\x2', '\x2',
    '\x2', '\xC0F', '\xC12', '\x3', '\x2', '\x2', '\x2', '\xC10', '\xC11',
    '\a', '\xAE', '\x2', '\x2', '\xC11', '\xC13', '\x5', '\x25A', '\x12E',
    '\x2', '\xC12', '\xC10', '\x3', '\x2', '\x2', '\x2', '\xC12', '\xC13',
    '\x3', '\x2', '\x2', '\x2', '\xC13', '\xC15', '\x3', '\x2', '\x2', '\x2',
    '\xC14', '\xC16', '\x5', '\xD0', 'i', '\x2', '\xC15', '\xC14', '\x3',
    '\x2', '\x2', '\x2', '\xC15', '\xC16', '\x3', '\x2', '\x2', '\x2', '\xC16',
    '\xC19', '\x3', '\x2', '\x2', '\x2', '\xC17', '\xC18', '\a', '[', '\x2',
    '\x2', '\xC18', '\xC1A', '\x5', '\xFE', '\x80', '\x2', '\xC19', '\xC17',
    '\x3', '\x2', '\x2', '\x2', '\xC19', '\xC1A', '\x3', '\x2', '\x2', '\x2',
    '\xC1A', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC1B', '\xC1D', '\a', '*',
    '\x2', '\x2', '\xC1C', '\xC1E', '\a', '\x61', '\x2', '\x2', '\xC1D', '\xC1C',
    '\x3', '\x2', '\x2', '\x2', '\xC1D', '\xC1E', '\x3', '\x2', '\x2', '\x2',
    '\xC1E', '\xC20', '\x3', '\x2', '\x2', '\x2', '\xC1F', '\xC21', '\a',
    '\x1DA', '\x2', '\x2', '\xC20', '\xC1F', '\x3', '\x2', '\x2', '\x2', '\xC20',
    '\xC21', '\x3', '\x2', '\x2', '\x2', '\xC21', '\xC23', '\x3', '\x2', '\x2',
    '\x2', '\xC22', '\xC24', '\a', 'H', '\x2', '\x2', '\xC23', '\xC22', '\x3',
    '\x2', '\x2', '\x2', '\xC23', '\xC24', '\x3', '\x2', '\x2', '\x2', '\xC24',
    '\xC4C', '\x3', '\x2', '\x2', '\x2', '\xC25', '\xC28', '\x5', '\x1F4',
    '\xFB', '\x2', '\xC26', '\xC27', '\a', '\x3D7', '\x2', '\x2', '\xC27',
    '\xC29', '\a', '\x3C7', '\x2', '\x2', '\xC28', '\xC26', '\x3', '\x2',
    '\x2', '\x2', '\xC28', '\xC29', '\x3', '\x2', '\x2', '\x2', '\xC29', '\xC32',
    '\x3', '\x2', '\x2', '\x2', '\xC2A', '\xC2B', '\a', '\x3DA', '\x2', '\x2',
    '\xC2B', '\xC2E', '\x5', '\x1F4', '\xFB', '\x2', '\xC2C', '\xC2D', '\a',
    '\x3D7', '\x2', '\x2', '\xC2D', '\xC2F', '\a', '\x3C7', '\x2', '\x2',
    '\xC2E', '\xC2C', '\x3', '\x2', '\x2', '\x2', '\xC2E', '\xC2F', '\x3',
    '\x2', '\x2', '\x2', '\xC2F', '\xC31', '\x3', '\x2', '\x2', '\x2', '\xC30',
    '\xC2A', '\x3', '\x2', '\x2', '\x2', '\xC31', '\xC34', '\x3', '\x2', '\x2',
    '\x2', '\xC32', '\xC30', '\x3', '\x2', '\x2', '\x2', '\xC32', '\xC33',
    '\x3', '\x2', '\x2', '\x2', '\xC33', '\xC35', '\x3', '\x2', '\x2', '\x2',
    '\xC34', '\xC32', '\x3', '\x2', '\x2', '\x2', '\xC35', '\xC36', '\a',
    '?', '\x2', '\x2', '\xC36', '\xC37', '\x5', '\xD4', 'k', '\x2', '\xC37',
    '\xC4D', '\x3', '\x2', '\x2', '\x2', '\xC38', '\xC39', '\a', '?', '\x2',
    '\x2', '\xC39', '\xC3C', '\x5', '\x1F4', '\xFB', '\x2', '\xC3A', '\xC3B',
    '\a', '\x3D7', '\x2', '\x2', '\xC3B', '\xC3D', '\a', '\x3C7', '\x2', '\x2',
    '\xC3C', '\xC3A', '\x3', '\x2', '\x2', '\x2', '\xC3C', '\xC3D', '\x3',
    '\x2', '\x2', '\x2', '\xC3D', '\xC46', '\x3', '\x2', '\x2', '\x2', '\xC3E',
    '\xC3F', '\a', '\x3DA', '\x2', '\x2', '\xC3F', '\xC42', '\x5', '\x1F4',
    '\xFB', '\x2', '\xC40', '\xC41', '\a', '\x3D7', '\x2', '\x2', '\xC41',
    '\xC43', '\a', '\x3C7', '\x2', '\x2', '\xC42', '\xC40', '\x3', '\x2',
    '\x2', '\x2', '\xC42', '\xC43', '\x3', '\x2', '\x2', '\x2', '\xC43', '\xC45',
    '\x3', '\x2', '\x2', '\x2', '\xC44', '\xC3E', '\x3', '\x2', '\x2', '\x2',
    '\xC45', '\xC48', '\x3', '\x2', '\x2', '\x2', '\xC46', '\xC44', '\x3',
    '\x2', '\x2', '\x2', '\xC46', '\xC47', '\x3', '\x2', '\x2', '\x2', '\xC47',
    '\xC49', '\x3', '\x2', '\x2', '\x2', '\xC48', '\xC46', '\x3', '\x2', '\x2',
    '\x2', '\xC49', '\xC4A', '\a', '\xAB', '\x2', '\x2', '\xC4A', '\xC4B',
    '\x5', '\xD4', 'k', '\x2', '\xC4B', '\xC4D', '\x3', '\x2', '\x2', '\x2',
    '\xC4C', '\xC25', '\x3', '\x2', '\x2', '\x2', '\xC4C', '\xC38', '\x3',
    '\x2', '\x2', '\x2', '\xC4D', '\xC50', '\x3', '\x2', '\x2', '\x2', '\xC4E',
    '\xC4F', '\a', '\xAE', '\x2', '\x2', '\xC4F', '\xC51', '\x5', '\x25A',
    '\x12E', '\x2', '\xC50', '\xC4E', '\x3', '\x2', '\x2', '\x2', '\xC50',
    '\xC51', '\x3', '\x2', '\x2', '\x2', '\xC51', '\xC3', '\x3', '\x2', '\x2',
    '\x2', '\xC52', '\xC53', '\a', '\x16C', '\x2', '\x2', '\xC53', '\xC54',
    '\x5', '\x1F4', '\xFB', '\x2', '\xC54', '\xC59', '\a', '\x1C1', '\x2',
    '\x2', '\xC55', '\xC57', '\a', '\r', '\x2', '\x2', '\xC56', '\xC55', '\x3',
    '\x2', '\x2', '\x2', '\xC56', '\xC57', '\x3', '\x2', '\x2', '\x2', '\xC57',
    '\xC58', '\x3', '\x2', '\x2', '\x2', '\xC58', '\xC5A', '\x5', '\x20C',
    '\x107', '\x2', '\xC59', '\xC56', '\x3', '\x2', '\x2', '\x2', '\xC59',
    '\xC5A', '\x3', '\x2', '\x2', '\x2', '\xC5A', '\xC5', '\x3', '\x2', '\x2',
    '\x2', '\xC5B', '\xC5C', '\a', '\x16C', '\x2', '\x2', '\xC5C', '\xC5D',
    '\x5', '\x1F4', '\xFB', '\x2', '\xC5D', '\xC5E', '\a', 'z', '\x2', '\x2',
    '\xC5E', '\xC65', '\x5', '\x20C', '\x107', '\x2', '\xC5F', '\xC60', '\x5',
    '\x262', '\x132', '\x2', '\xC60', '\xC61', '\a', '\x3D8', '\x2', '\x2',
    '\xC61', '\xC62', '\x5', '\x236', '\x11C', '\x2', '\xC62', '\xC63', '\a',
    '\x3D9', '\x2', '\x2', '\xC63', '\xC66', '\x3', '\x2', '\x2', '\x2', '\xC64',
    '\xC66', '\t', ')', '\x2', '\x2', '\xC65', '\xC5F', '\x3', '\x2', '\x2',
    '\x2', '\xC65', '\xC64', '\x3', '\x2', '\x2', '\x2', '\xC66', '\xC69',
    '\x3', '\x2', '\x2', '\x2', '\xC67', '\xC68', '\a', '\xAE', '\x2', '\x2',
    '\xC68', '\xC6A', '\x5', '\x25A', '\x12E', '\x2', '\xC69', '\xC67', '\x3',
    '\x2', '\x2', '\x2', '\xC69', '\xC6A', '\x3', '\x2', '\x2', '\x2', '\xC6A',
    '\xC6D', '\x3', '\x2', '\x2', '\x2', '\xC6B', '\xC6C', '\a', '[', '\x2',
    '\x2', '\xC6C', '\xC6E', '\x5', '\xFE', '\x80', '\x2', '\xC6D', '\xC6B',
    '\x3', '\x2', '\x2', '\x2', '\xC6D', '\xC6E', '\x3', '\x2', '\x2', '\x2',
    '\xC6E', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xC6F', '\xC70', '\a', '\x16C',
    '\x2', '\x2', '\xC70', '\xC71', '\x5', '\x1F4', '\xFB', '\x2', '\xC71',
    '\xC72', '\a', 'z', '\x2', '\x2', '\xC72', '\xC75', '\t', '*', '\x2',
    '\x2', '\xC73', '\xC74', '\a', '\xAE', '\x2', '\x2', '\xC74', '\xC76',
    '\x5', '\x25A', '\x12E', '\x2', '\xC75', '\xC73', '\x3', '\x2', '\x2',
    '\x2', '\xC75', '\xC76', '\x3', '\x2', '\x2', '\x2', '\xC76', '\xC79',
    '\x3', '\x2', '\x2', '\x2', '\xC77', '\xC78', '\a', '[', '\x2', '\x2',
    '\xC78', '\xC7A', '\x5', '\xFE', '\x80', '\x2', '\xC79', '\xC77', '\x3',
    '\x2', '\x2', '\x2', '\xC79', '\xC7A', '\x3', '\x2', '\x2', '\x2', '\xC7A',
    '\xC9', '\x3', '\x2', '\x2', '\x2', '\xC7B', '\xC7C', '\a', '\x16C', '\x2',
    '\x2', '\xC7C', '\xC7D', '\x5', '\x1F4', '\xFB', '\x2', '\xC7D', '\xC7E',
    '\a', '\x122', '\x2', '\x2', '\xC7E', '\xCB', '\x3', '\x2', '\x2', '\x2',
    '\xC7F', '\xC81', '\a', '\xA8', '\x2', '\x2', '\xC80', '\xC82', '\a',
    '\x61', '\x2', '\x2', '\xC81', '\xC80', '\x3', '\x2', '\x2', '\x2', '\xC81',
    '\xC82', '\x3', '\x2', '\x2', '\x2', '\xC82', '\xC84', '\x3', '\x2', '\x2',
    '\x2', '\xC83', '\xC85', '\a', 'H', '\x2', '\x2', '\xC84', '\xC83', '\x3',
    '\x2', '\x2', '\x2', '\xC84', '\xC85', '\x3', '\x2', '\x2', '\x2', '\xC85',
    '\xC86', '\x3', '\x2', '\x2', '\x2', '\xC86', '\xC8B', '\x5', '\x1F4',
    '\xFB', '\x2', '\xC87', '\xC89', '\a', '\r', '\x2', '\x2', '\xC88', '\xC87',
    '\x3', '\x2', '\x2', '\x2', '\xC88', '\xC89', '\x3', '\x2', '\x2', '\x2',
    '\xC89', '\xC8A', '\x3', '\x2', '\x2', '\x2', '\xC8A', '\xC8C', '\x5',
    '\x20C', '\x107', '\x2', '\xC8B', '\xC88', '\x3', '\x2', '\x2', '\x2',
    '\xC8B', '\xC8C', '\x3', '\x2', '\x2', '\x2', '\xC8C', '\xC8D', '\x3',
    '\x2', '\x2', '\x2', '\xC8D', '\xC8E', '\a', '\x8C', '\x2', '\x2', '\xC8E',
    '\xC93', '\x5', '\xBA', '^', '\x2', '\xC8F', '\xC90', '\a', '\x3DA', '\x2',
    '\x2', '\xC90', '\xC92', '\x5', '\xBA', '^', '\x2', '\xC91', '\xC8F',
    '\x3', '\x2', '\x2', '\x2', '\xC92', '\xC95', '\x3', '\x2', '\x2', '\x2',
    '\xC93', '\xC91', '\x3', '\x2', '\x2', '\x2', '\xC93', '\xC94', '\x3',
    '\x2', '\x2', '\x2', '\xC94', '\xC98', '\x3', '\x2', '\x2', '\x2', '\xC95',
    '\xC93', '\x3', '\x2', '\x2', '\x2', '\xC96', '\xC97', '\a', '\xAE', '\x2',
    '\x2', '\xC97', '\xC99', '\x5', '\x25A', '\x12E', '\x2', '\xC98', '\xC96',
    '\x3', '\x2', '\x2', '\x2', '\xC98', '\xC99', '\x3', '\x2', '\x2', '\x2',
    '\xC99', '\xC9B', '\x3', '\x2', '\x2', '\x2', '\xC9A', '\xC9C', '\x5',
    '\xD0', 'i', '\x2', '\xC9B', '\xC9A', '\x3', '\x2', '\x2', '\x2', '\xC9B',
    '\xC9C', '\x3', '\x2', '\x2', '\x2', '\xC9C', '\xC9E', '\x3', '\x2', '\x2',
    '\x2', '\xC9D', '\xC9F', '\x5', '\xFC', '\x7F', '\x2', '\xC9E', '\xC9D',
    '\x3', '\x2', '\x2', '\x2', '\xC9E', '\xC9F', '\x3', '\x2', '\x2', '\x2',
    '\xC9F', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCA0', '\xCA2', '\a', '\xA8',
    '\x2', '\x2', '\xCA1', '\xCA3', '\a', '\x61', '\x2', '\x2', '\xCA2', '\xCA1',
    '\x3', '\x2', '\x2', '\x2', '\xCA2', '\xCA3', '\x3', '\x2', '\x2', '\x2',
    '\xCA3', '\xCA5', '\x3', '\x2', '\x2', '\x2', '\xCA4', '\xCA6', '\a',
    'H', '\x2', '\x2', '\xCA5', '\xCA4', '\x3', '\x2', '\x2', '\x2', '\xCA5',
    '\xCA6', '\x3', '\x2', '\x2', '\x2', '\xCA6', '\xCA7', '\x3', '\x2', '\x2',
    '\x2', '\xCA7', '\xCA8', '\x5', '\xD4', 'k', '\x2', '\xCA8', '\xCA9',
    '\a', '\x8C', '\x2', '\x2', '\xCA9', '\xCAE', '\x5', '\xBA', '^', '\x2',
    '\xCAA', '\xCAB', '\a', '\x3DA', '\x2', '\x2', '\xCAB', '\xCAD', '\x5',
    '\xBA', '^', '\x2', '\xCAC', '\xCAA', '\x3', '\x2', '\x2', '\x2', '\xCAD',
    '\xCB0', '\x3', '\x2', '\x2', '\x2', '\xCAE', '\xCAC', '\x3', '\x2', '\x2',
    '\x2', '\xCAE', '\xCAF', '\x3', '\x2', '\x2', '\x2', '\xCAF', '\xCB3',
    '\x3', '\x2', '\x2', '\x2', '\xCB0', '\xCAE', '\x3', '\x2', '\x2', '\x2',
    '\xCB1', '\xCB2', '\a', '\xAE', '\x2', '\x2', '\xCB2', '\xCB4', '\x5',
    '\x25A', '\x12E', '\x2', '\xCB3', '\xCB1', '\x3', '\x2', '\x2', '\x2',
    '\xCB3', '\xCB4', '\x3', '\x2', '\x2', '\x2', '\xCB4', '\xCF', '\x3',
    '\x2', '\x2', '\x2', '\xCB5', '\xCB6', '\a', 'q', '\x2', '\x2', '\xCB6',
    '\xCB7', '\a', '\x12', '\x2', '\x2', '\xCB7', '\xCBC', '\x5', '\xD2',
    'j', '\x2', '\xCB8', '\xCB9', '\a', '\x3DA', '\x2', '\x2', '\xCB9', '\xCBB',
    '\x5', '\xD2', 'j', '\x2', '\xCBA', '\xCB8', '\x3', '\x2', '\x2', '\x2',
    '\xCBB', '\xCBE', '\x3', '\x2', '\x2', '\x2', '\xCBC', '\xCBA', '\x3',
    '\x2', '\x2', '\x2', '\xCBC', '\xCBD', '\x3', '\x2', '\x2', '\x2', '\xCBD',
    '\xD1', '\x3', '\x2', '\x2', '\x2', '\xCBE', '\xCBC', '\x3', '\x2', '\x2',
    '\x2', '\xCBF', '\xCC1', '\x5', '\x25A', '\x12E', '\x2', '\xCC0', '\xCC2',
    '\t', '+', '\x2', '\x2', '\xCC1', '\xCC0', '\x3', '\x2', '\x2', '\x2',
    '\xCC1', '\xCC2', '\x3', '\x2', '\x2', '\x2', '\xCC2', '\xD3', '\x3',
    '\x2', '\x2', '\x2', '\xCC3', '\xCC8', '\x5', '\xD6', 'l', '\x2', '\xCC4',
    '\xCC5', '\a', '\x3DA', '\x2', '\x2', '\xCC5', '\xCC7', '\x5', '\xD6',
    'l', '\x2', '\xCC6', '\xCC4', '\x3', '\x2', '\x2', '\x2', '\xCC7', '\xCCA',
    '\x3', '\x2', '\x2', '\x2', '\xCC8', '\xCC6', '\x3', '\x2', '\x2', '\x2',
    '\xCC8', '\xCC9', '\x3', '\x2', '\x2', '\x2', '\xCC9', '\xD5', '\x3',
    '\x2', '\x2', '\x2', '\xCCA', '\xCC8', '\x3', '\x2', '\x2', '\x2', '\xCCB',
    '\xCCF', '\x5', '\xD8', 'm', '\x2', '\xCCC', '\xCCE', '\x5', '\xDE', 'p',
    '\x2', '\xCCD', '\xCCC', '\x3', '\x2', '\x2', '\x2', '\xCCE', '\xCD1',
    '\x3', '\x2', '\x2', '\x2', '\xCCF', '\xCCD', '\x3', '\x2', '\x2', '\x2',
    '\xCCF', '\xCD0', '\x3', '\x2', '\x2', '\x2', '\xCD0', '\xCDD', '\x3',
    '\x2', '\x2', '\x2', '\xCD1', '\xCCF', '\x3', '\x2', '\x2', '\x2', '\xCD2',
    '\xCD3', '\a', '\x3D8', '\x2', '\x2', '\xCD3', '\xCD7', '\x5', '\xD8',
    'm', '\x2', '\xCD4', '\xCD6', '\x5', '\xDE', 'p', '\x2', '\xCD5', '\xCD4',
    '\x3', '\x2', '\x2', '\x2', '\xCD6', '\xCD9', '\x3', '\x2', '\x2', '\x2',
    '\xCD7', '\xCD5', '\x3', '\x2', '\x2', '\x2', '\xCD7', '\xCD8', '\x3',
    '\x2', '\x2', '\x2', '\xCD8', '\xCDA', '\x3', '\x2', '\x2', '\x2', '\xCD9',
    '\xCD7', '\x3', '\x2', '\x2', '\x2', '\xCDA', '\xCDB', '\a', '\x3D9',
    '\x2', '\x2', '\xCDB', '\xCDD', '\x3', '\x2', '\x2', '\x2', '\xCDC', '\xCCB',
    '\x3', '\x2', '\x2', '\x2', '\xCDC', '\xCD2', '\x3', '\x2', '\x2', '\x2',
    '\xCDD', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xCDE', '\xCE4', '\x5',
    '\x1F4', '\xFB', '\x2', '\xCDF', '\xCE0', '\a', 'u', '\x2', '\x2', '\xCE0',
    '\xCE1', '\a', '\x3D8', '\x2', '\x2', '\xCE1', '\xCE2', '\x5', '\x22C',
    '\x117', '\x2', '\xCE2', '\xCE3', '\a', '\x3D9', '\x2', '\x2', '\xCE3',
    '\xCE5', '\x3', '\x2', '\x2', '\x2', '\xCE4', '\xCDF', '\x3', '\x2', '\x2',
    '\x2', '\xCE4', '\xCE5', '\x3', '\x2', '\x2', '\x2', '\xCE5', '\xCEA',
    '\x3', '\x2', '\x2', '\x2', '\xCE6', '\xCE8', '\a', '\r', '\x2', '\x2',
    '\xCE7', '\xCE6', '\x3', '\x2', '\x2', '\x2', '\xCE7', '\xCE8', '\x3',
    '\x2', '\x2', '\x2', '\xCE8', '\xCE9', '\x3', '\x2', '\x2', '\x2', '\xCE9',
    '\xCEB', '\x5', '\x20C', '\x107', '\x2', '\xCEA', '\xCE7', '\x3', '\x2',
    '\x2', '\x2', '\xCEA', '\xCEB', '\x3', '\x2', '\x2', '\x2', '\xCEB', '\xCF4',
    '\x3', '\x2', '\x2', '\x2', '\xCEC', '\xCF1', '\x5', '\xDA', 'n', '\x2',
    '\xCED', '\xCEE', '\a', '\x3DA', '\x2', '\x2', '\xCEE', '\xCF0', '\x5',
    '\xDA', 'n', '\x2', '\xCEF', '\xCED', '\x3', '\x2', '\x2', '\x2', '\xCF0',
    '\xCF3', '\x3', '\x2', '\x2', '\x2', '\xCF1', '\xCEF', '\x3', '\x2', '\x2',
    '\x2', '\xCF1', '\xCF2', '\x3', '\x2', '\x2', '\x2', '\xCF2', '\xCF5',
    '\x3', '\x2', '\x2', '\x2', '\xCF3', '\xCF1', '\x3', '\x2', '\x2', '\x2',
    '\xCF4', '\xCEC', '\x3', '\x2', '\x2', '\x2', '\xCF4', '\xCF5', '\x3',
    '\x2', '\x2', '\x2', '\xCF5', '\xD07', '\x3', '\x2', '\x2', '\x2', '\xCF6',
    '\xCFC', '\x5', '\xB4', '[', '\x2', '\xCF7', '\xCF8', '\a', '\x3D8', '\x2',
    '\x2', '\xCF8', '\xCF9', '\x5', '\xB4', '[', '\x2', '\xCF9', '\xCFA',
    '\a', '\x3D9', '\x2', '\x2', '\xCFA', '\xCFC', '\x3', '\x2', '\x2', '\x2',
    '\xCFB', '\xCF6', '\x3', '\x2', '\x2', '\x2', '\xCFB', '\xCF7', '\x3',
    '\x2', '\x2', '\x2', '\xCFC', '\xCFE', '\x3', '\x2', '\x2', '\x2', '\xCFD',
    '\xCFF', '\a', '\r', '\x2', '\x2', '\xCFE', '\xCFD', '\x3', '\x2', '\x2',
    '\x2', '\xCFE', '\xCFF', '\x3', '\x2', '\x2', '\x2', '\xCFF', '\xD00',
    '\x3', '\x2', '\x2', '\x2', '\xD00', '\xD01', '\x5', '\x20C', '\x107',
    '\x2', '\xD01', '\xD07', '\x3', '\x2', '\x2', '\x2', '\xD02', '\xD03',
    '\a', '\x3D8', '\x2', '\x2', '\xD03', '\xD04', '\x5', '\xD4', 'k', '\x2',
    '\xD04', '\xD05', '\a', '\x3D9', '\x2', '\x2', '\xD05', '\xD07', '\x3',
    '\x2', '\x2', '\x2', '\xD06', '\xCDE', '\x3', '\x2', '\x2', '\x2', '\xD06',
    '\xCFB', '\x3', '\x2', '\x2', '\x2', '\xD06', '\xD02', '\x3', '\x2', '\x2',
    '\x2', '\xD07', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xD08', '\xD09',
    '\t', ',', '\x2', '\x2', '\xD09', '\xD0C', '\t', '\x14', '\x2', '\x2',
    '\xD0A', '\xD0B', '\a', '<', '\x2', '\x2', '\xD0B', '\xD0D', '\x5', '\xDC',
    'o', '\x2', '\xD0C', '\xD0A', '\x3', '\x2', '\x2', '\x2', '\xD0C', '\xD0D',
    '\x3', '\x2', '\x2', '\x2', '\xD0D', '\xD0E', '\x3', '\x2', '\x2', '\x2',
    '\xD0E', '\xD0F', '\a', '\x3D8', '\x2', '\x2', '\xD0F', '\xD10', '\x5',
    '\x22C', '\x117', '\x2', '\xD10', '\xD11', '\a', '\x3D9', '\x2', '\x2',
    '\xD11', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xD12', '\xD18', '\a', 'S',
    '\x2', '\x2', '\xD13', '\xD14', '\a', 'q', '\x2', '\x2', '\xD14', '\xD18',
    '\a', '\x12', '\x2', '\x2', '\xD15', '\xD16', '\a', '\x44', '\x2', '\x2',
    '\xD16', '\xD18', '\a', '\x12', '\x2', '\x2', '\xD17', '\xD12', '\x3',
    '\x2', '\x2', '\x2', '\xD17', '\xD13', '\x3', '\x2', '\x2', '\x2', '\xD17',
    '\xD15', '\x3', '\x2', '\x2', '\x2', '\xD18', '\xDD', '\x3', '\x2', '\x2',
    '\x2', '\xD19', '\xD1B', '\t', '-', '\x2', '\x2', '\xD1A', '\xD19', '\x3',
    '\x2', '\x2', '\x2', '\xD1A', '\xD1B', '\x3', '\x2', '\x2', '\x2', '\xD1B',
    '\xD1C', '\x3', '\x2', '\x2', '\x2', '\xD1C', '\xD1D', '\a', 'S', '\x2',
    '\x2', '\xD1D', '\xD25', '\x5', '\xD8', 'm', '\x2', '\xD1E', '\xD1F',
    '\a', 'l', '\x2', '\x2', '\xD1F', '\xD26', '\x5', '\x25A', '\x12E', '\x2',
    '\xD20', '\xD21', '\a', '\xAB', '\x2', '\x2', '\xD21', '\xD22', '\a',
    '\x3D8', '\x2', '\x2', '\xD22', '\xD23', '\x5', '\x22C', '\x117', '\x2',
    '\xD23', '\xD24', '\a', '\x3D9', '\x2', '\x2', '\xD24', '\xD26', '\x3',
    '\x2', '\x2', '\x2', '\xD25', '\xD1E', '\x3', '\x2', '\x2', '\x2', '\xD25',
    '\xD20', '\x3', '\x2', '\x2', '\x2', '\xD25', '\xD26', '\x3', '\x2', '\x2',
    '\x2', '\xD26', '\xD46', '\x3', '\x2', '\x2', '\x2', '\xD27', '\xD28',
    '\a', '\x9B', '\x2', '\x2', '\xD28', '\xD2B', '\x5', '\xD8', 'm', '\x2',
    '\xD29', '\xD2A', '\a', 'l', '\x2', '\x2', '\xD2A', '\xD2C', '\x5', '\x25A',
    '\x12E', '\x2', '\xD2B', '\xD29', '\x3', '\x2', '\x2', '\x2', '\xD2B',
    '\xD2C', '\x3', '\x2', '\x2', '\x2', '\xD2C', '\xD46', '\x3', '\x2', '\x2',
    '\x2', '\xD2D', '\xD2F', '\t', '.', '\x2', '\x2', '\xD2E', '\xD30', '\a',
    's', '\x2', '\x2', '\xD2F', '\xD2E', '\x3', '\x2', '\x2', '\x2', '\xD2F',
    '\xD30', '\x3', '\x2', '\x2', '\x2', '\xD30', '\xD31', '\x3', '\x2', '\x2',
    '\x2', '\xD31', '\xD32', '\a', 'S', '\x2', '\x2', '\xD32', '\xD3A', '\x5',
    '\xD8', 'm', '\x2', '\xD33', '\xD34', '\a', 'l', '\x2', '\x2', '\xD34',
    '\xD3B', '\x5', '\x25A', '\x12E', '\x2', '\xD35', '\xD36', '\a', '\xAB',
    '\x2', '\x2', '\xD36', '\xD37', '\a', '\x3D8', '\x2', '\x2', '\xD37',
    '\xD38', '\x5', '\x22C', '\x117', '\x2', '\xD38', '\xD39', '\a', '\x3D9',
    '\x2', '\x2', '\xD39', '\xD3B', '\x3', '\x2', '\x2', '\x2', '\xD3A', '\xD33',
    '\x3', '\x2', '\x2', '\x2', '\xD3A', '\xD35', '\x3', '\x2', '\x2', '\x2',
    '\xD3B', '\xD46', '\x3', '\x2', '\x2', '\x2', '\xD3C', '\xD41', '\a',
    'g', '\x2', '\x2', '\xD3D', '\xD3F', '\t', '.', '\x2', '\x2', '\xD3E',
    '\xD40', '\a', 's', '\x2', '\x2', '\xD3F', '\xD3E', '\x3', '\x2', '\x2',
    '\x2', '\xD3F', '\xD40', '\x3', '\x2', '\x2', '\x2', '\xD40', '\xD42',
    '\x3', '\x2', '\x2', '\x2', '\xD41', '\xD3D', '\x3', '\x2', '\x2', '\x2',
    '\xD41', '\xD42', '\x3', '\x2', '\x2', '\x2', '\xD42', '\xD43', '\x3',
    '\x2', '\x2', '\x2', '\xD43', '\xD44', '\a', 'S', '\x2', '\x2', '\xD44',
    '\xD46', '\x5', '\xD8', 'm', '\x2', '\xD45', '\xD1A', '\x3', '\x2', '\x2',
    '\x2', '\xD45', '\xD27', '\x3', '\x2', '\x2', '\x2', '\xD45', '\xD2D',
    '\x3', '\x2', '\x2', '\x2', '\xD45', '\xD3C', '\x3', '\x2', '\x2', '\x2',
    '\xD46', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xD47', '\xD48', '\a', '\x3D8',
    '\x2', '\x2', '\xD48', '\xD49', '\x5', '\xE4', 's', '\x2', '\xD49', '\xD4A',
    '\a', '\x3D9', '\x2', '\x2', '\xD4A', '\xD50', '\x3', '\x2', '\x2', '\x2',
    '\xD4B', '\xD4C', '\a', '\x3D8', '\x2', '\x2', '\xD4C', '\xD4D', '\x5',
    '\xE0', 'q', '\x2', '\xD4D', '\xD4E', '\a', '\x3D9', '\x2', '\x2', '\xD4E',
    '\xD50', '\x3', '\x2', '\x2', '\x2', '\xD4F', '\xD47', '\x3', '\x2', '\x2',
    '\x2', '\xD4F', '\xD4B', '\x3', '\x2', '\x2', '\x2', '\xD50', '\xE1',
    '\x3', '\x2', '\x2', '\x2', '\xD51', '\xD52', '\a', '\x3D8', '\x2', '\x2',
    '\xD52', '\xD53', '\x5', '\xE6', 't', '\x2', '\xD53', '\xD54', '\a', '\x3D9',
    '\x2', '\x2', '\xD54', '\xD5A', '\x3', '\x2', '\x2', '\x2', '\xD55', '\xD56',
    '\a', '\x3D8', '\x2', '\x2', '\xD56', '\xD57', '\x5', '\xE2', 'r', '\x2',
    '\xD57', '\xD58', '\a', '\x3D9', '\x2', '\x2', '\xD58', '\xD5A', '\x3',
    '\x2', '\x2', '\x2', '\xD59', '\xD51', '\x3', '\x2', '\x2', '\x2', '\xD59',
    '\xD55', '\x3', '\x2', '\x2', '\x2', '\xD5A', '\xE3', '\x3', '\x2', '\x2',
    '\x2', '\xD5B', '\xD5F', '\a', '\x8B', '\x2', '\x2', '\xD5C', '\xD5E',
    '\x5', '\xEC', 'w', '\x2', '\xD5D', '\xD5C', '\x3', '\x2', '\x2', '\x2',
    '\xD5E', '\xD61', '\x3', '\x2', '\x2', '\x2', '\xD5F', '\xD5D', '\x3',
    '\x2', '\x2', '\x2', '\xD5F', '\xD60', '\x3', '\x2', '\x2', '\x2', '\xD60',
    '\xD62', '\x3', '\x2', '\x2', '\x2', '\xD61', '\xD5F', '\x3', '\x2', '\x2',
    '\x2', '\xD62', '\xD64', '\x5', '\xEE', 'x', '\x2', '\xD63', '\xD65',
    '\x5', '\xF2', 'z', '\x2', '\xD64', '\xD63', '\x3', '\x2', '\x2', '\x2',
    '\xD64', '\xD65', '\x3', '\x2', '\x2', '\x2', '\xD65', '\xD67', '\x3',
    '\x2', '\x2', '\x2', '\xD66', '\xD68', '\x5', '\xF8', '}', '\x2', '\xD67',
    '\xD66', '\x3', '\x2', '\x2', '\x2', '\xD67', '\xD68', '\x3', '\x2', '\x2',
    '\x2', '\xD68', '\xD6A', '\x3', '\x2', '\x2', '\x2', '\xD69', '\xD6B',
    '\x5', '\xD0', 'i', '\x2', '\xD6A', '\xD69', '\x3', '\x2', '\x2', '\x2',
    '\xD6A', '\xD6B', '\x3', '\x2', '\x2', '\x2', '\xD6B', '\xD6D', '\x3',
    '\x2', '\x2', '\x2', '\xD6C', '\xD6E', '\x5', '\xFC', '\x7F', '\x2', '\xD6D',
    '\xD6C', '\x3', '\x2', '\x2', '\x2', '\xD6D', '\xD6E', '\x3', '\x2', '\x2',
    '\x2', '\xD6E', '\xD84', '\x3', '\x2', '\x2', '\x2', '\xD6F', '\xD73',
    '\a', '\x8B', '\x2', '\x2', '\xD70', '\xD72', '\x5', '\xEC', 'w', '\x2',
    '\xD71', '\xD70', '\x3', '\x2', '\x2', '\x2', '\xD72', '\xD75', '\x3',
    '\x2', '\x2', '\x2', '\xD73', '\xD71', '\x3', '\x2', '\x2', '\x2', '\xD73',
    '\xD74', '\x3', '\x2', '\x2', '\x2', '\xD74', '\xD76', '\x3', '\x2', '\x2',
    '\x2', '\xD75', '\xD73', '\x3', '\x2', '\x2', '\x2', '\xD76', '\xD78',
    '\x5', '\xEE', 'x', '\x2', '\xD77', '\xD79', '\x5', '\xF8', '}', '\x2',
    '\xD78', '\xD77', '\x3', '\x2', '\x2', '\x2', '\xD78', '\xD79', '\x3',
    '\x2', '\x2', '\x2', '\xD79', '\xD7B', '\x3', '\x2', '\x2', '\x2', '\xD7A',
    '\xD7C', '\x5', '\xD0', 'i', '\x2', '\xD7B', '\xD7A', '\x3', '\x2', '\x2',
    '\x2', '\xD7B', '\xD7C', '\x3', '\x2', '\x2', '\x2', '\xD7C', '\xD7E',
    '\x3', '\x2', '\x2', '\x2', '\xD7D', '\xD7F', '\x5', '\xFC', '\x7F', '\x2',
    '\xD7E', '\xD7D', '\x3', '\x2', '\x2', '\x2', '\xD7E', '\xD7F', '\x3',
    '\x2', '\x2', '\x2', '\xD7F', '\xD81', '\x3', '\x2', '\x2', '\x2', '\xD80',
    '\xD82', '\x5', '\xF2', 'z', '\x2', '\xD81', '\xD80', '\x3', '\x2', '\x2',
    '\x2', '\xD81', '\xD82', '\x3', '\x2', '\x2', '\x2', '\xD82', '\xD84',
    '\x3', '\x2', '\x2', '\x2', '\xD83', '\xD5B', '\x3', '\x2', '\x2', '\x2',
    '\xD83', '\xD6F', '\x3', '\x2', '\x2', '\x2', '\xD84', '\xE5', '\x3',
    '\x2', '\x2', '\x2', '\xD85', '\xD89', '\a', '\x8B', '\x2', '\x2', '\xD86',
    '\xD88', '\x5', '\xEC', 'w', '\x2', '\xD87', '\xD86', '\x3', '\x2', '\x2',
    '\x2', '\xD88', '\xD8B', '\x3', '\x2', '\x2', '\x2', '\xD89', '\xD87',
    '\x3', '\x2', '\x2', '\x2', '\xD89', '\xD8A', '\x3', '\x2', '\x2', '\x2',
    '\xD8A', '\xD8C', '\x3', '\x2', '\x2', '\x2', '\xD8B', '\xD89', '\x3',
    '\x2', '\x2', '\x2', '\xD8C', '\xD8E', '\x5', '\xEE', 'x', '\x2', '\xD8D',
    '\xD8F', '\x5', '\xF8', '}', '\x2', '\xD8E', '\xD8D', '\x3', '\x2', '\x2',
    '\x2', '\xD8E', '\xD8F', '\x3', '\x2', '\x2', '\x2', '\xD8F', '\xD91',
    '\x3', '\x2', '\x2', '\x2', '\xD90', '\xD92', '\x5', '\xD0', 'i', '\x2',
    '\xD91', '\xD90', '\x3', '\x2', '\x2', '\x2', '\xD91', '\xD92', '\x3',
    '\x2', '\x2', '\x2', '\xD92', '\xD94', '\x3', '\x2', '\x2', '\x2', '\xD93',
    '\xD95', '\x5', '\xFC', '\x7F', '\x2', '\xD94', '\xD93', '\x3', '\x2',
    '\x2', '\x2', '\xD94', '\xD95', '\x3', '\x2', '\x2', '\x2', '\xD95', '\xE7',
    '\x3', '\x2', '\x2', '\x2', '\xD96', '\xD98', '\a', '\xA4', '\x2', '\x2',
    '\xD97', '\xD99', '\t', '\'', '\x2', '\x2', '\xD98', '\xD97', '\x3', '\x2',
    '\x2', '\x2', '\xD98', '\xD99', '\x3', '\x2', '\x2', '\x2', '\xD99', '\xD9A',
    '\x3', '\x2', '\x2', '\x2', '\xD9A', '\xD9B', '\x5', '\xE2', 'r', '\x2',
    '\xD9B', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xD9C', '\xD9E', '\a', '\xA4',
    '\x2', '\x2', '\xD9D', '\xD9F', '\t', '\'', '\x2', '\x2', '\xD9E', '\xD9D',
    '\x3', '\x2', '\x2', '\x2', '\xD9E', '\xD9F', '\x3', '\x2', '\x2', '\x2',
    '\xD9F', '\xDA2', '\x3', '\x2', '\x2', '\x2', '\xDA0', '\xDA3', '\x5',
    '\xE6', 't', '\x2', '\xDA1', '\xDA3', '\x5', '\xE2', 'r', '\x2', '\xDA2',
    '\xDA0', '\x3', '\x2', '\x2', '\x2', '\xDA2', '\xDA1', '\x3', '\x2', '\x2',
    '\x2', '\xDA3', '\xEB', '\x3', '\x2', '\x2', '\x2', '\xDA4', '\xDAD',
    '\t', '/', '\x2', '\x2', '\xDA5', '\xDAD', '\a', '\x46', '\x2', '\x2',
    '\xDA6', '\xDAD', '\a', '\x9B', '\x2', '\x2', '\xDA7', '\xDAD', '\a',
    '\x97', '\x2', '\x2', '\xDA8', '\xDAD', '\a', '\x95', '\x2', '\x2', '\xDA9',
    '\xDAD', '\a', '\x20C', '\x2', '\x2', '\xDAA', '\xDAD', '\t', '\x30',
    '\x2', '\x2', '\xDAB', '\xDAD', '\a', '\x96', '\x2', '\x2', '\xDAC', '\xDA4',
    '\x3', '\x2', '\x2', '\x2', '\xDAC', '\xDA5', '\x3', '\x2', '\x2', '\x2',
    '\xDAC', '\xDA6', '\x3', '\x2', '\x2', '\x2', '\xDAC', '\xDA7', '\x3',
    '\x2', '\x2', '\x2', '\xDAC', '\xDA8', '\x3', '\x2', '\x2', '\x2', '\xDAC',
    '\xDA9', '\x3', '\x2', '\x2', '\x2', '\xDAC', '\xDAA', '\x3', '\x2', '\x2',
    '\x2', '\xDAC', '\xDAB', '\x3', '\x2', '\x2', '\x2', '\xDAD', '\xED',
    '\x3', '\x2', '\x2', '\x2', '\xDAE', '\xDB1', '\a', '\x3C7', '\x2', '\x2',
    '\xDAF', '\xDB1', '\x5', '\xF0', 'y', '\x2', '\xDB0', '\xDAE', '\x3',
    '\x2', '\x2', '\x2', '\xDB0', '\xDAF', '\x3', '\x2', '\x2', '\x2', '\xDB1',
    '\xDB6', '\x3', '\x2', '\x2', '\x2', '\xDB2', '\xDB3', '\a', '\x3DA',
    '\x2', '\x2', '\xDB3', '\xDB5', '\x5', '\xF0', 'y', '\x2', '\xDB4', '\xDB2',
    '\x3', '\x2', '\x2', '\x2', '\xDB5', '\xDB8', '\x3', '\x2', '\x2', '\x2',
    '\xDB6', '\xDB4', '\x3', '\x2', '\x2', '\x2', '\xDB6', '\xDB7', '\x3',
    '\x2', '\x2', '\x2', '\xDB7', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xDB8',
    '\xDB6', '\x3', '\x2', '\x2', '\x2', '\xDB9', '\xDBA', '\x5', '\x1F2',
    '\xFA', '\x2', '\xDBA', '\xDBB', '\a', '\x3D7', '\x2', '\x2', '\xDBB',
    '\xDBC', '\a', '\x3C7', '\x2', '\x2', '\xDBC', '\xDD7', '\x3', '\x2',
    '\x2', '\x2', '\xDBD', '\xDC2', '\x5', '\x1F6', '\xFC', '\x2', '\xDBE',
    '\xDC0', '\a', '\r', '\x2', '\x2', '\xDBF', '\xDBE', '\x3', '\x2', '\x2',
    '\x2', '\xDBF', '\xDC0', '\x3', '\x2', '\x2', '\x2', '\xDC0', '\xDC1',
    '\x3', '\x2', '\x2', '\x2', '\xDC1', '\xDC3', '\x5', '\x20C', '\x107',
    '\x2', '\xDC2', '\xDBF', '\x3', '\x2', '\x2', '\x2', '\xDC2', '\xDC3',
    '\x3', '\x2', '\x2', '\x2', '\xDC3', '\xDD7', '\x3', '\x2', '\x2', '\x2',
    '\xDC4', '\xDC9', '\x5', '\x246', '\x124', '\x2', '\xDC5', '\xDC7', '\a',
    '\r', '\x2', '\x2', '\xDC6', '\xDC5', '\x3', '\x2', '\x2', '\x2', '\xDC6',
    '\xDC7', '\x3', '\x2', '\x2', '\x2', '\xDC7', '\xDC8', '\x3', '\x2', '\x2',
    '\x2', '\xDC8', '\xDCA', '\x5', '\x20C', '\x107', '\x2', '\xDC9', '\xDC6',
    '\x3', '\x2', '\x2', '\x2', '\xDC9', '\xDCA', '\x3', '\x2', '\x2', '\x2',
    '\xDCA', '\xDD7', '\x3', '\x2', '\x2', '\x2', '\xDCB', '\xDCC', '\a',
    '\x3F2', '\x2', '\x2', '\xDCC', '\xDCE', '\a', '\x3BE', '\x2', '\x2',
    '\xDCD', '\xDCB', '\x3', '\x2', '\x2', '\x2', '\xDCD', '\xDCE', '\x3',
    '\x2', '\x2', '\x2', '\xDCE', '\xDCF', '\x3', '\x2', '\x2', '\x2', '\xDCF',
    '\xDD4', '\x5', '\x25A', '\x12E', '\x2', '\xDD0', '\xDD2', '\a', '\r',
    '\x2', '\x2', '\xDD1', '\xDD0', '\x3', '\x2', '\x2', '\x2', '\xDD1', '\xDD2',
    '\x3', '\x2', '\x2', '\x2', '\xDD2', '\xDD3', '\x3', '\x2', '\x2', '\x2',
    '\xDD3', '\xDD5', '\x5', '\x20C', '\x107', '\x2', '\xDD4', '\xDD1', '\x3',
    '\x2', '\x2', '\x2', '\xDD4', '\xDD5', '\x3', '\x2', '\x2', '\x2', '\xDD5',
    '\xDD7', '\x3', '\x2', '\x2', '\x2', '\xDD6', '\xDB9', '\x3', '\x2', '\x2',
    '\x2', '\xDD6', '\xDBD', '\x3', '\x2', '\x2', '\x2', '\xDD6', '\xDC4',
    '\x3', '\x2', '\x2', '\x2', '\xDD6', '\xDCD', '\x3', '\x2', '\x2', '\x2',
    '\xDD7', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xDD8', '\xDD9', '\a', 'P',
    '\x2', '\x2', '\xDD9', '\xDDE', '\x5', '\xBC', '_', '\x2', '\xDDA', '\xDDB',
    '\a', '\x3DA', '\x2', '\x2', '\xDDB', '\xDDD', '\x5', '\xBC', '_', '\x2',
    '\xDDC', '\xDDA', '\x3', '\x2', '\x2', '\x2', '\xDDD', '\xDE0', '\x3',
    '\x2', '\x2', '\x2', '\xDDE', '\xDDC', '\x3', '\x2', '\x2', '\x2', '\xDDE',
    '\xDDF', '\x3', '\x2', '\x2', '\x2', '\xDDF', '\xDFD', '\x3', '\x2', '\x2',
    '\x2', '\xDE0', '\xDDE', '\x3', '\x2', '\x2', '\x2', '\xDE1', '\xDE2',
    '\a', 'P', '\x2', '\x2', '\xDE2', '\xDE3', '\a', '\x146', '\x2', '\x2',
    '\xDE3', '\xDFD', '\a', '\x3E7', '\x2', '\x2', '\xDE4', '\xDE5', '\a',
    'P', '\x2', '\x2', '\xDE5', '\xDE6', '\a', 't', '\x2', '\x2', '\xDE6',
    '\xDEA', '\a', '\x3E7', '\x2', '\x2', '\xDE7', '\xDE8', '\a', '\x18',
    '\x2', '\x2', '\xDE8', '\xDE9', '\a', '\x8C', '\x2', '\x2', '\xDE9', '\xDEB',
    '\x5', '\x1FE', '\x100', '\x2', '\xDEA', '\xDE7', '\x3', '\x2', '\x2',
    '\x2', '\xDEA', '\xDEB', '\x3', '\x2', '\x2', '\x2', '\xDEB', '\xDF2',
    '\x3', '\x2', '\x2', '\x2', '\xDEC', '\xDEE', '\t', '$', '\x2', '\x2',
    '\xDED', '\xDEF', '\x5', '\xF4', '{', '\x2', '\xDEE', '\xDED', '\x3',
    '\x2', '\x2', '\x2', '\xDEF', '\xDF0', '\x3', '\x2', '\x2', '\x2', '\xDF0',
    '\xDEE', '\x3', '\x2', '\x2', '\x2', '\xDF0', '\xDF1', '\x3', '\x2', '\x2',
    '\x2', '\xDF1', '\xDF3', '\x3', '\x2', '\x2', '\x2', '\xDF2', '\xDEC',
    '\x3', '\x2', '\x2', '\x2', '\xDF2', '\xDF3', '\x3', '\x2', '\x2', '\x2',
    '\xDF3', '\xDFA', '\x3', '\x2', '\x2', '\x2', '\xDF4', '\xDF6', '\a',
    ']', '\x2', '\x2', '\xDF5', '\xDF7', '\x5', '\xF6', '|', '\x2', '\xDF6',
    '\xDF5', '\x3', '\x2', '\x2', '\x2', '\xDF7', '\xDF8', '\x3', '\x2', '\x2',
    '\x2', '\xDF8', '\xDF6', '\x3', '\x2', '\x2', '\x2', '\xDF8', '\xDF9',
    '\x3', '\x2', '\x2', '\x2', '\xDF9', '\xDFB', '\x3', '\x2', '\x2', '\x2',
    '\xDFA', '\xDF4', '\x3', '\x2', '\x2', '\x2', '\xDFA', '\xDFB', '\x3',
    '\x2', '\x2', '\x2', '\xDFB', '\xDFD', '\x3', '\x2', '\x2', '\x2', '\xDFC',
    '\xDD8', '\x3', '\x2', '\x2', '\x2', '\xDFC', '\xDE1', '\x3', '\x2', '\x2',
    '\x2', '\xDFC', '\xDE4', '\x3', '\x2', '\x2', '\x2', '\xDFD', '\xF3',
    '\x3', '\x2', '\x2', '\x2', '\xDFE', '\xDFF', '\a', '\x9D', '\x2', '\x2',
    '\xDFF', '\xE00', '\a', '\x12', '\x2', '\x2', '\xE00', '\xE0B', '\a',
    '\x3E7', '\x2', '\x2', '\xE01', '\xE03', '\a', 'o', '\x2', '\x2', '\xE02',
    '\xE01', '\x3', '\x2', '\x2', '\x2', '\xE02', '\xE03', '\x3', '\x2', '\x2',
    '\x2', '\xE03', '\xE04', '\x3', '\x2', '\x2', '\x2', '\xE04', '\xE05',
    '\a', '\x35', '\x2', '\x2', '\xE05', '\xE06', '\a', '\x12', '\x2', '\x2',
    '\xE06', '\xE0B', '\a', '\x3E7', '\x2', '\x2', '\xE07', '\xE08', '\a',
    '\x36', '\x2', '\x2', '\xE08', '\xE09', '\a', '\x12', '\x2', '\x2', '\xE09',
    '\xE0B', '\a', '\x3E7', '\x2', '\x2', '\xE0A', '\xDFE', '\x3', '\x2',
    '\x2', '\x2', '\xE0A', '\xE02', '\x3', '\x2', '\x2', '\x2', '\xE0A', '\xE07',
    '\x3', '\x2', '\x2', '\x2', '\xE0B', '\xF5', '\x3', '\x2', '\x2', '\x2',
    '\xE0C', '\xE0D', '\a', '\x9A', '\x2', '\x2', '\xE0D', '\xE0E', '\a',
    '\x12', '\x2', '\x2', '\xE0E', '\xE13', '\a', '\x3E7', '\x2', '\x2', '\xE0F',
    '\xE10', '\a', '\x9D', '\x2', '\x2', '\xE10', '\xE11', '\a', '\x12', '\x2',
    '\x2', '\xE11', '\xE13', '\a', '\x3E7', '\x2', '\x2', '\xE12', '\xE0C',
    '\x3', '\x2', '\x2', '\x2', '\xE12', '\xE0F', '\x3', '\x2', '\x2', '\x2',
    '\xE13', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xE14', '\xE15', '\a', '?',
    '\x2', '\x2', '\xE15', '\xE18', '\x5', '\xD4', 'k', '\x2', '\xE16', '\xE17',
    '\a', '\xAE', '\x2', '\x2', '\xE17', '\xE19', '\x5', '\x25A', '\x12E',
    '\x2', '\xE18', '\xE16', '\x3', '\x2', '\x2', '\x2', '\xE18', '\xE19',
    '\x3', '\x2', '\x2', '\x2', '\xE19', '\xE28', '\x3', '\x2', '\x2', '\x2',
    '\xE1A', '\xE1B', '\a', '\x44', '\x2', '\x2', '\xE1B', '\xE1C', '\a',
    '\x12', '\x2', '\x2', '\xE1C', '\xE21', '\x5', '\xFA', '~', '\x2', '\xE1D',
    '\xE1E', '\a', '\x3DA', '\x2', '\x2', '\xE1E', '\xE20', '\x5', '\xFA',
    '~', '\x2', '\xE1F', '\xE1D', '\x3', '\x2', '\x2', '\x2', '\xE20', '\xE23',
    '\x3', '\x2', '\x2', '\x2', '\xE21', '\xE1F', '\x3', '\x2', '\x2', '\x2',
    '\xE21', '\xE22', '\x3', '\x2', '\x2', '\x2', '\xE22', '\xE26', '\x3',
    '\x2', '\x2', '\x2', '\xE23', '\xE21', '\x3', '\x2', '\x2', '\x2', '\xE24',
    '\xE25', '\a', '\xB0', '\x2', '\x2', '\xE25', '\xE27', '\a', '\x1F3',
    '\x2', '\x2', '\xE26', '\xE24', '\x3', '\x2', '\x2', '\x2', '\xE26', '\xE27',
    '\x3', '\x2', '\x2', '\x2', '\xE27', '\xE29', '\x3', '\x2', '\x2', '\x2',
    '\xE28', '\xE1A', '\x3', '\x2', '\x2', '\x2', '\xE28', '\xE29', '\x3',
    '\x2', '\x2', '\x2', '\xE29', '\xE2C', '\x3', '\x2', '\x2', '\x2', '\xE2A',
    '\xE2B', '\a', '\x45', '\x2', '\x2', '\xE2B', '\xE2D', '\x5', '\x25A',
    '\x12E', '\x2', '\xE2C', '\xE2A', '\x3', '\x2', '\x2', '\x2', '\xE2C',
    '\xE2D', '\x3', '\x2', '\x2', '\x2', '\xE2D', '\xF9', '\x3', '\x2', '\x2',
    '\x2', '\xE2E', '\xE30', '\x5', '\x25A', '\x12E', '\x2', '\xE2F', '\xE31',
    '\t', '+', '\x2', '\x2', '\xE30', '\xE2F', '\x3', '\x2', '\x2', '\x2',
    '\xE30', '\xE31', '\x3', '\x2', '\x2', '\x2', '\xE31', '\xFB', '\x3',
    '\x2', '\x2', '\x2', '\xE32', '\xE3D', '\a', '[', '\x2', '\x2', '\xE33',
    '\xE34', '\x5', '\xFE', '\x80', '\x2', '\xE34', '\xE35', '\a', '\x3DA',
    '\x2', '\x2', '\xE35', '\xE37', '\x3', '\x2', '\x2', '\x2', '\xE36', '\xE33',
    '\x3', '\x2', '\x2', '\x2', '\xE36', '\xE37', '\x3', '\x2', '\x2', '\x2',
    '\xE37', '\xE38', '\x3', '\x2', '\x2', '\x2', '\xE38', '\xE3E', '\x5',
    '\xFE', '\x80', '\x2', '\xE39', '\xE3A', '\x5', '\xFE', '\x80', '\x2',
    '\xE3A', '\xE3B', '\a', '\x1BB', '\x2', '\x2', '\xE3B', '\xE3C', '\x5',
    '\xFE', '\x80', '\x2', '\xE3C', '\xE3E', '\x3', '\x2', '\x2', '\x2', '\xE3D',
    '\xE36', '\x3', '\x2', '\x2', '\x2', '\xE3D', '\xE39', '\x3', '\x2', '\x2',
    '\x2', '\xE3E', '\xFD', '\x3', '\x2', '\x2', '\x2', '\xE3F', '\xE42',
    '\x5', '\x212', '\x10A', '\x2', '\xE40', '\xE42', '\x5', '\x1FC', '\xFF',
    '\x2', '\xE41', '\xE3F', '\x3', '\x2', '\x2', '\x2', '\xE41', '\xE40',
    '\x3', '\x2', '\x2', '\x2', '\xE42', '\xFF', '\x3', '\x2', '\x2', '\x2',
    '\xE43', '\xE44', '\a', '\x210', '\x2', '\x2', '\xE44', '\xE4D', '\a',
    '\x227', '\x2', '\x2', '\xE45', '\xE4A', '\x5', '\x116', '\x8C', '\x2',
    '\xE46', '\xE47', '\a', '\x3DA', '\x2', '\x2', '\xE47', '\xE49', '\x5',
    '\x116', '\x8C', '\x2', '\xE48', '\xE46', '\x3', '\x2', '\x2', '\x2',
    '\xE49', '\xE4C', '\x3', '\x2', '\x2', '\x2', '\xE4A', '\xE48', '\x3',
    '\x2', '\x2', '\x2', '\xE4A', '\xE4B', '\x3', '\x2', '\x2', '\x2', '\xE4B',
    '\xE4E', '\x3', '\x2', '\x2', '\x2', '\xE4C', '\xE4A', '\x3', '\x2', '\x2',
    '\x2', '\xE4D', '\xE45', '\x3', '\x2', '\x2', '\x2', '\xE4D', '\xE4E',
    '\x3', '\x2', '\x2', '\x2', '\xE4E', '\x101', '\x3', '\x2', '\x2', '\x2',
    '\xE4F', '\xE51', '\a', '\x111', '\x2', '\x2', '\xE50', '\xE52', '\a',
    '\x23D', '\x2', '\x2', '\xE51', '\xE50', '\x3', '\x2', '\x2', '\x2', '\xE51',
    '\xE52', '\x3', '\x2', '\x2', '\x2', '\xE52', '\x103', '\x3', '\x2', '\x2',
    '\x2', '\xE53', '\xE55', '\a', '\x129', '\x2', '\x2', '\xE54', '\xE56',
    '\a', '\x23D', '\x2', '\x2', '\xE55', '\xE54', '\x3', '\x2', '\x2', '\x2',
    '\xE55', '\xE56', '\x3', '\x2', '\x2', '\x2', '\xE56', '\xE5C', '\x3',
    '\x2', '\x2', '\x2', '\xE57', '\xE59', '\a', '\f', '\x2', '\x2', '\xE58',
    '\xE5A', '\a', '\x1B7', '\x2', '\x2', '\xE59', '\xE58', '\x3', '\x2',
    '\x2', '\x2', '\xE59', '\xE5A', '\x3', '\x2', '\x2', '\x2', '\xE5A', '\xE5B',
    '\x3', '\x2', '\x2', '\x2', '\xE5B', '\xE5D', '\a', '\x11A', '\x2', '\x2',
    '\xE5C', '\xE57', '\x3', '\x2', '\x2', '\x2', '\xE5C', '\xE5D', '\x3',
    '\x2', '\x2', '\x2', '\xE5D', '\xE62', '\x3', '\x2', '\x2', '\x2', '\xE5E',
    '\xE60', '\a', '\x1B7', '\x2', '\x2', '\xE5F', '\xE5E', '\x3', '\x2',
    '\x2', '\x2', '\xE5F', '\xE60', '\x3', '\x2', '\x2', '\x2', '\xE60', '\xE61',
    '\x3', '\x2', '\x2', '\x2', '\xE61', '\xE63', '\a', '~', '\x2', '\x2',
    '\xE62', '\xE5F', '\x3', '\x2', '\x2', '\x2', '\xE62', '\xE63', '\x3',
    '\x2', '\x2', '\x2', '\xE63', '\x105', '\x3', '\x2', '\x2', '\x2', '\xE64',
    '\xE66', '\a', '\x1F2', '\x2', '\x2', '\xE65', '\xE67', '\a', '\x23D',
    '\x2', '\x2', '\xE66', '\xE65', '\x3', '\x2', '\x2', '\x2', '\xE66', '\xE67',
    '\x3', '\x2', '\x2', '\x2', '\xE67', '\xE6D', '\x3', '\x2', '\x2', '\x2',
    '\xE68', '\xE6A', '\a', '\f', '\x2', '\x2', '\xE69', '\xE6B', '\a', '\x1B7',
    '\x2', '\x2', '\xE6A', '\xE69', '\x3', '\x2', '\x2', '\x2', '\xE6A', '\xE6B',
    '\x3', '\x2', '\x2', '\x2', '\xE6B', '\xE6C', '\x3', '\x2', '\x2', '\x2',
    '\xE6C', '\xE6E', '\a', '\x11A', '\x2', '\x2', '\xE6D', '\xE68', '\x3',
    '\x2', '\x2', '\x2', '\xE6D', '\xE6E', '\x3', '\x2', '\x2', '\x2', '\xE6E',
    '\xE73', '\x3', '\x2', '\x2', '\x2', '\xE6F', '\xE71', '\a', '\x1B7',
    '\x2', '\x2', '\xE70', '\xE6F', '\x3', '\x2', '\x2', '\x2', '\xE70', '\xE71',
    '\x3', '\x2', '\x2', '\x2', '\xE71', '\xE72', '\x3', '\x2', '\x2', '\x2',
    '\xE72', '\xE74', '\a', '~', '\x2', '\x2', '\xE73', '\xE70', '\x3', '\x2',
    '\x2', '\x2', '\xE73', '\xE74', '\x3', '\x2', '\x2', '\x2', '\xE74', '\x107',
    '\x3', '\x2', '\x2', '\x2', '\xE75', '\xE76', '\a', '\x1F8', '\x2', '\x2',
    '\xE76', '\xE77', '\x5', '\x20C', '\x107', '\x2', '\xE77', '\x109', '\x3',
    '\x2', '\x2', '\x2', '\xE78', '\xE7A', '\a', '\x1F2', '\x2', '\x2', '\xE79',
    '\xE7B', '\a', '\x23D', '\x2', '\x2', '\xE7A', '\xE79', '\x3', '\x2',
    '\x2', '\x2', '\xE7A', '\xE7B', '\x3', '\x2', '\x2', '\x2', '\xE7B', '\xE7C',
    '\x3', '\x2', '\x2', '\x2', '\xE7C', '\xE7E', '\a', '\x9F', '\x2', '\x2',
    '\xE7D', '\xE7F', '\a', '\x1F8', '\x2', '\x2', '\xE7E', '\xE7D', '\x3',
    '\x2', '\x2', '\x2', '\xE7E', '\xE7F', '\x3', '\x2', '\x2', '\x2', '\xE7F',
    '\xE80', '\x3', '\x2', '\x2', '\x2', '\xE80', '\xE81', '\x5', '\x20C',
    '\x107', '\x2', '\xE81', '\x10B', '\x3', '\x2', '\x2', '\x2', '\xE82',
    '\xE83', '\a', '~', '\x2', '\x2', '\xE83', '\xE84', '\a', '\x1F8', '\x2',
    '\x2', '\xE84', '\xE85', '\x5', '\x20C', '\x107', '\x2', '\xE85', '\x10D',
    '\x3', '\x2', '\x2', '\x2', '\xE86', '\xE87', '\a', '_', '\x2', '\x2',
    '\xE87', '\xE88', '\a', '\x24F', '\x2', '\x2', '\xE88', '\xE8D', '\x5',
    '\x118', '\x8D', '\x2', '\xE89', '\xE8A', '\a', '\x3DA', '\x2', '\x2',
    '\xE8A', '\xE8C', '\x5', '\x118', '\x8D', '\x2', '\xE8B', '\xE89', '\x3',
    '\x2', '\x2', '\x2', '\xE8C', '\xE8F', '\x3', '\x2', '\x2', '\x2', '\xE8D',
    '\xE8B', '\x3', '\x2', '\x2', '\x2', '\xE8D', '\xE8E', '\x3', '\x2', '\x2',
    '\x2', '\xE8E', '\x10F', '\x3', '\x2', '\x2', '\x2', '\xE8F', '\xE8D',
    '\x3', '\x2', '\x2', '\x2', '\xE90', '\xE91', '\a', '\xA6', '\x2', '\x2',
    '\xE91', '\xE92', '\a', '\x24F', '\x2', '\x2', '\xE92', '\x111', '\x3',
    '\x2', '\x2', '\x2', '\xE93', '\xE94', '\a', '\x8C', '\x2', '\x2', '\xE94',
    '\xE95', '\a', '\x10D', '\x2', '\x2', '\xE95', '\xE96', '\a', '\x3CF',
    '\x2', '\x2', '\xE96', '\xE97', '\t', '\x18', '\x2', '\x2', '\xE97', '\x113',
    '\x3', '\x2', '\x2', '\x2', '\xE98', '\xE9A', '\a', '\x8C', '\x2', '\x2',
    '\xE99', '\xE9B', '\t', '\x31', '\x2', '\x2', '\xE9A', '\xE99', '\x3',
    '\x2', '\x2', '\x2', '\xE9A', '\xE9B', '\x3', '\x2', '\x2', '\x2', '\xE9B',
    '\xE9C', '\x3', '\x2', '\x2', '\x2', '\xE9C', '\xE9D', '\a', '\x227',
    '\x2', '\x2', '\xE9D', '\xEA2', '\x5', '\x11C', '\x8F', '\x2', '\xE9E',
    '\xE9F', '\a', '\x3DA', '\x2', '\x2', '\xE9F', '\xEA1', '\x5', '\x11C',
    '\x8F', '\x2', '\xEA0', '\xE9E', '\x3', '\x2', '\x2', '\x2', '\xEA1',
    '\xEA4', '\x3', '\x2', '\x2', '\x2', '\xEA2', '\xEA0', '\x3', '\x2', '\x2',
    '\x2', '\xEA2', '\xEA3', '\x3', '\x2', '\x2', '\x2', '\xEA3', '\x115',
    '\x3', '\x2', '\x2', '\x2', '\xEA4', '\xEA2', '\x3', '\x2', '\x2', '\x2',
    '\xEA5', '\xEA6', '\a', '\xB0', '\x2', '\x2', '\xEA6', '\xEA7', '\a',
    '\x130', '\x2', '\x2', '\xEA7', '\xEAD', '\a', '\x203', '\x2', '\x2',
    '\xEA8', '\xEA9', '\a', 'z', '\x2', '\x2', '\xEA9', '\xEAD', '\a', '\xB1',
    '\x2', '\x2', '\xEAA', '\xEAB', '\a', 'z', '\x2', '\x2', '\xEAB', '\xEAD',
    '\a', '\x1C0', '\x2', '\x2', '\xEAC', '\xEA5', '\x3', '\x2', '\x2', '\x2',
    '\xEAC', '\xEA8', '\x3', '\x2', '\x2', '\x2', '\xEAC', '\xEAA', '\x3',
    '\x2', '\x2', '\x2', '\xEAD', '\x117', '\x3', '\x2', '\x2', '\x2', '\xEAE',
    '\xEB3', '\x5', '\x1F4', '\xFB', '\x2', '\xEAF', '\xEB1', '\a', '\r',
    '\x2', '\x2', '\xEB0', '\xEAF', '\x3', '\x2', '\x2', '\x2', '\xEB0', '\xEB1',
    '\x3', '\x2', '\x2', '\x2', '\xEB1', '\xEB2', '\x3', '\x2', '\x2', '\x2',
    '\xEB2', '\xEB4', '\x5', '\x20C', '\x107', '\x2', '\xEB3', '\xEB0', '\x3',
    '\x2', '\x2', '\x2', '\xEB3', '\xEB4', '\x3', '\x2', '\x2', '\x2', '\xEB4',
    '\xEB5', '\x3', '\x2', '\x2', '\x2', '\xEB5', '\xEB6', '\x5', '\x11A',
    '\x8E', '\x2', '\xEB6', '\x119', '\x3', '\x2', '\x2', '\x2', '\xEB7',
    '\xEB9', '\a', 'z', '\x2', '\x2', '\xEB8', '\xEBA', '\a', '\x189', '\x2',
    '\x2', '\xEB9', '\xEB8', '\x3', '\x2', '\x2', '\x2', '\xEB9', '\xEBA',
    '\x3', '\x2', '\x2', '\x2', '\xEBA', '\xEC0', '\x3', '\x2', '\x2', '\x2',
    '\xEBB', '\xEBD', '\a', '\x61', '\x2', '\x2', '\xEBC', '\xEBB', '\x3',
    '\x2', '\x2', '\x2', '\xEBC', '\xEBD', '\x3', '\x2', '\x2', '\x2', '\xEBD',
    '\xEBE', '\x3', '\x2', '\x2', '\x2', '\xEBE', '\xEC0', '\a', '\xB1', '\x2',
    '\x2', '\xEBF', '\xEB7', '\x3', '\x2', '\x2', '\x2', '\xEBF', '\xEBC',
    '\x3', '\x2', '\x2', '\x2', '\xEC0', '\x11B', '\x3', '\x2', '\x2', '\x2',
    '\xEC1', '\xEC2', '\a', '\x17F', '\x2', '\x2', '\xEC2', '\xEC3', '\a',
    '\x187', '\x2', '\x2', '\xEC3', '\xEC9', '\x5', '\x11E', '\x90', '\x2',
    '\xEC4', '\xEC5', '\a', 'z', '\x2', '\x2', '\xEC5', '\xEC9', '\a', '\xB1',
    '\x2', '\x2', '\xEC6', '\xEC7', '\a', 'z', '\x2', '\x2', '\xEC7', '\xEC9',
    '\a', '\x1C0', '\x2', '\x2', '\xEC8', '\xEC1', '\x3', '\x2', '\x2', '\x2',
    '\xEC8', '\xEC4', '\x3', '\x2', '\x2', '\x2', '\xEC8', '\xEC6', '\x3',
    '\x2', '\x2', '\x2', '\xEC9', '\x11D', '\x3', '\x2', '\x2', '\x2', '\xECA',
    '\xECB', '\a', '\x28D', '\x2', '\x2', '\xECB', '\xED2', '\a', 'z', '\x2',
    '\x2', '\xECC', '\xECD', '\a', 'z', '\x2', '\x2', '\xECD', '\xED2', '\a',
    '\x28E', '\x2', '\x2', '\xECE', '\xECF', '\a', 'z', '\x2', '\x2', '\xECF',
    '\xED2', '\a', '\x28F', '\x2', '\x2', '\xED0', '\xED2', '\a', '\x290',
    '\x2', '\x2', '\xED1', '\xECA', '\x3', '\x2', '\x2', '\x2', '\xED1', '\xECC',
    '\x3', '\x2', '\x2', '\x2', '\xED1', '\xECE', '\x3', '\x2', '\x2', '\x2',
    '\xED1', '\xED0', '\x3', '\x2', '\x2', '\x2', '\xED2', '\x11F', '\x3',
    '\x2', '\x2', '\x2', '\xED3', '\xED4', '\a', '\x17', '\x2', '\x2', '\xED4',
    '\xED5', '\a', '\x18C', '\x2', '\x2', '\xED5', '\xED6', '\a', '\x9F',
    '\x2', '\x2', '\xED6', '\xEDB', '\x5', '\x132', '\x9A', '\x2', '\xED7',
    '\xED8', '\a', '\x3DA', '\x2', '\x2', '\xED8', '\xEDA', '\x5', '\x132',
    '\x9A', '\x2', '\xED9', '\xED7', '\x3', '\x2', '\x2', '\x2', '\xEDA',
    '\xEDD', '\x3', '\x2', '\x2', '\x2', '\xEDB', '\xED9', '\x3', '\x2', '\x2',
    '\x2', '\xEDB', '\xEDC', '\x3', '\x2', '\x2', '\x2', '\xEDC', '\xEDF',
    '\x3', '\x2', '\x2', '\x2', '\xEDD', '\xEDB', '\x3', '\x2', '\x2', '\x2',
    '\xEDE', '\xEE0', '\x5', '\x13A', '\x9E', '\x2', '\xEDF', '\xEDE', '\x3',
    '\x2', '\x2', '\x2', '\xEDF', '\xEE0', '\x3', '\x2', '\x2', '\x2', '\xEE0',
    '\x121', '\x3', '\x2', '\x2', '\x2', '\xEE1', '\xEE2', '\a', '\x17', '\x2',
    '\x2', '\xEE2', '\xEE3', '\a', '\x1ED', '\x2', '\x2', '\xEE3', '\xEE4',
    '\a', '\x160', '\x2', '\x2', '\xEE4', '\xEE9', '\x5', '\x13C', '\x9F',
    '\x2', '\xEE5', '\xEE6', '\a', '\x3DA', '\x2', '\x2', '\xEE6', '\xEE8',
    '\x5', '\x13C', '\x9F', '\x2', '\xEE7', '\xEE5', '\x3', '\x2', '\x2',
    '\x2', '\xEE8', '\xEEB', '\x3', '\x2', '\x2', '\x2', '\xEE9', '\xEE7',
    '\x3', '\x2', '\x2', '\x2', '\xEE9', '\xEEA', '\x3', '\x2', '\x2', '\x2',
    '\xEEA', '\x123', '\x3', '\x2', '\x2', '\x2', '\xEEB', '\xEE9', '\x3',
    '\x2', '\x2', '\x2', '\xEEC', '\xEED', '\a', 'x', '\x2', '\x2', '\xEED',
    '\xEEE', '\t', '\x32', '\x2', '\x2', '\xEEE', '\xEF3', '\a', '\x18B',
    '\x2', '\x2', '\xEEF', '\xEF0', '\a', '\x9F', '\x2', '\x2', '\xEF0', '\xEF4',
    '\a', '\x3E7', '\x2', '\x2', '\xEF1', '\xEF2', '\a', '\xF', '\x2', '\x2',
    '\xEF2', '\xEF4', '\a', '\x3E7', '\x2', '\x2', '\xEF3', '\xEEF', '\x3',
    '\x2', '\x2', '\x2', '\xEF3', '\xEF1', '\x3', '\x2', '\x2', '\x2', '\xEF4',
    '\x125', '\x3', '\x2', '\x2', '\x2', '\xEF5', '\xEF6', '\a', '\x1EE',
    '\x2', '\x2', '\xEF6', '\xEF7', '\a', '\x18C', '\x2', '\x2', '\xEF7',
    '\x127', '\x3', '\x2', '\x2', '\x2', '\xEF8', '\xEF9', '\a', '\x1EE',
    '\x2', '\x2', '\xEF9', '\xEFB', '\a', '\x201', '\x2', '\x2', '\xEFA',
    '\xEFC', '\a', '\b', '\x2', '\x2', '\xEFB', '\xEFA', '\x3', '\x2', '\x2',
    '\x2', '\xEFB', '\xEFC', '\x3', '\x2', '\x2', '\x2', '\xEFC', '\xEFE',
    '\x3', '\x2', '\x2', '\x2', '\xEFD', '\xEFF', '\x5', '\x13A', '\x9E',
    '\x2', '\xEFE', '\xEFD', '\x3', '\x2', '\x2', '\x2', '\xEFE', '\xEFF',
    '\x3', '\x2', '\x2', '\x2', '\xEFF', '\x129', '\x3', '\x2', '\x2', '\x2',
    '\xF00', '\xF01', '\a', '\x210', '\x2', '\x2', '\xF01', '\xF0A', '\a',
    '\x201', '\x2', '\x2', '\xF02', '\xF07', '\x5', '\x140', '\xA1', '\x2',
    '\xF03', '\xF04', '\a', '\x3DA', '\x2', '\x2', '\xF04', '\xF06', '\x5',
    '\x140', '\xA1', '\x2', '\xF05', '\xF03', '\x3', '\x2', '\x2', '\x2',
    '\xF06', '\xF09', '\x3', '\x2', '\x2', '\x2', '\xF07', '\xF05', '\x3',
    '\x2', '\x2', '\x2', '\xF07', '\xF08', '\x3', '\x2', '\x2', '\x2', '\xF08',
    '\xF0B', '\x3', '\x2', '\x2', '\x2', '\xF09', '\xF07', '\x3', '\x2', '\x2',
    '\x2', '\xF0A', '\xF02', '\x3', '\x2', '\x2', '\x2', '\xF0A', '\xF0B',
    '\x3', '\x2', '\x2', '\x2', '\xF0B', '\xF0E', '\x3', '\x2', '\x2', '\x2',
    '\xF0C', '\xF0D', '\a', '\x22F', '\x2', '\x2', '\xF0D', '\xF0F', '\x5',
    '\x142', '\xA2', '\x2', '\xF0E', '\xF0C', '\x3', '\x2', '\x2', '\x2',
    '\xF0E', '\xF0F', '\x3', '\x2', '\x2', '\x2', '\xF0F', '\xF13', '\x3',
    '\x2', '\x2', '\x2', '\xF10', '\xF12', '\x5', '\x144', '\xA3', '\x2',
    '\xF11', '\xF10', '\x3', '\x2', '\x2', '\x2', '\xF12', '\xF15', '\x3',
    '\x2', '\x2', '\x2', '\xF13', '\xF11', '\x3', '\x2', '\x2', '\x2', '\xF13',
    '\xF14', '\x3', '\x2', '\x2', '\x2', '\xF14', '\xF17', '\x3', '\x2', '\x2',
    '\x2', '\xF15', '\xF13', '\x3', '\x2', '\x2', '\x2', '\xF16', '\xF18',
    '\x5', '\x13A', '\x9E', '\x2', '\xF17', '\xF16', '\x3', '\x2', '\x2',
    '\x2', '\xF17', '\xF18', '\x3', '\x2', '\x2', '\x2', '\xF18', '\x12B',
    '\x3', '\x2', '\x2', '\x2', '\xF19', '\xF1A', '\a', '\x216', '\x2', '\x2',
    '\xF1A', '\xF23', '\a', '\x201', '\x2', '\x2', '\xF1B', '\xF20', '\x5',
    '\x140', '\xA1', '\x2', '\xF1C', '\xF1D', '\a', '\x3DA', '\x2', '\x2',
    '\xF1D', '\xF1F', '\x5', '\x140', '\xA1', '\x2', '\xF1E', '\xF1C', '\x3',
    '\x2', '\x2', '\x2', '\xF1F', '\xF22', '\x3', '\x2', '\x2', '\x2', '\xF20',
    '\xF1E', '\x3', '\x2', '\x2', '\x2', '\xF20', '\xF21', '\x3', '\x2', '\x2',
    '\x2', '\xF21', '\xF24', '\x3', '\x2', '\x2', '\x2', '\xF22', '\xF20',
    '\x3', '\x2', '\x2', '\x2', '\xF23', '\xF1B', '\x3', '\x2', '\x2', '\x2',
    '\xF23', '\xF24', '\x3', '\x2', '\x2', '\x2', '\xF24', '\x12D', '\x3',
    '\x2', '\x2', '\x2', '\xF25', '\xF26', '\a', '\x210', '\x2', '\x2', '\xF26',
    '\xF27', '\a', '\x16B', '\x2', '\x2', '\xF27', '\x12F', '\x3', '\x2',
    '\x2', '\x2', '\xF28', '\xF29', '\a', '\x216', '\x2', '\x2', '\xF29',
    '\xF2A', '\a', '\x16B', '\x2', '\x2', '\xF2A', '\x131', '\x3', '\x2',
    '\x2', '\x2', '\xF2B', '\xF2C', '\x5', '\x134', '\x9B', '\x2', '\xF2C',
    '\xF2D', '\a', '\x3CF', '\x2', '\x2', '\xF2D', '\xF2E', '\a', '\x3E7',
    '\x2', '\x2', '\xF2E', '\xF49', '\x3', '\x2', '\x2', '\x2', '\xF2F', '\xF30',
    '\x5', '\x136', '\x9C', '\x2', '\xF30', '\xF31', '\a', '\x3CF', '\x2',
    '\x2', '\xF31', '\xF32', '\x5', '\x212', '\x10A', '\x2', '\xF32', '\xF49',
    '\x3', '\x2', '\x2', '\x2', '\xF33', '\xF34', '\x5', '\x138', '\x9D',
    '\x2', '\xF34', '\xF35', '\a', '\x3CF', '\x2', '\x2', '\xF35', '\xF36',
    '\t', '\x18', '\x2', '\x2', '\xF36', '\xF49', '\x3', '\x2', '\x2', '\x2',
    '\xF37', '\xF38', '\a', '\x190', '\x2', '\x2', '\xF38', '\xF39', '\a',
    '\x3CF', '\x2', '\x2', '\xF39', '\xF49', '\a', '\x3EA', '\x2', '\x2',
    '\xF3A', '\xF3B', '\a', '\x172', '\x2', '\x2', '\xF3B', '\xF3C', '\a',
    '\x3CF', '\x2', '\x2', '\xF3C', '\xF45', '\a', '\x3D8', '\x2', '\x2',
    '\xF3D', '\xF42', '\x5', '\x20C', '\x107', '\x2', '\xF3E', '\xF3F', '\a',
    '\x3DA', '\x2', '\x2', '\xF3F', '\xF41', '\x5', '\x20C', '\x107', '\x2',
    '\xF40', '\xF3E', '\x3', '\x2', '\x2', '\x2', '\xF41', '\xF44', '\x3',
    '\x2', '\x2', '\x2', '\xF42', '\xF40', '\x3', '\x2', '\x2', '\x2', '\xF42',
    '\xF43', '\x3', '\x2', '\x2', '\x2', '\xF43', '\xF46', '\x3', '\x2', '\x2',
    '\x2', '\xF44', '\xF42', '\x3', '\x2', '\x2', '\x2', '\xF45', '\xF3D',
    '\x3', '\x2', '\x2', '\x2', '\xF45', '\xF46', '\x3', '\x2', '\x2', '\x2',
    '\xF46', '\xF47', '\x3', '\x2', '\x2', '\x2', '\xF47', '\xF49', '\a',
    '\x3D9', '\x2', '\x2', '\xF48', '\xF2B', '\x3', '\x2', '\x2', '\x2', '\xF48',
    '\xF2F', '\x3', '\x2', '\x2', '\x2', '\xF48', '\xF33', '\x3', '\x2', '\x2',
    '\x2', '\xF48', '\xF37', '\x3', '\x2', '\x2', '\x2', '\xF48', '\xF3A',
    '\x3', '\x2', '\x2', '\x2', '\xF49', '\x133', '\x3', '\x2', '\x2', '\x2',
    '\xF4A', '\xF4B', '\t', '\x33', '\x2', '\x2', '\xF4B', '\x135', '\x3',
    '\x2', '\x2', '\x2', '\xF4C', '\xF4D', '\t', '\x34', '\x2', '\x2', '\xF4D',
    '\x137', '\x3', '\x2', '\x2', '\x2', '\xF4E', '\xF4F', '\t', '\x35', '\x2',
    '\x2', '\xF4F', '\x139', '\x3', '\x2', '\x2', '\x2', '\xF50', '\xF51',
    '\a', '<', '\x2', '\x2', '\xF51', '\xF52', '\a', '\x11C', '\x2', '\x2',
    '\xF52', '\xF53', '\a', '\x3E7', '\x2', '\x2', '\xF53', '\x13B', '\x3',
    '\x2', '\x2', '\x2', '\xF54', '\xF55', '\a', '\x1E6', '\x2', '\x2', '\xF55',
    '\xF56', '\a', '\x3CF', '\x2', '\x2', '\xF56', '\xF57', '\a', '\x3D8',
    '\x2', '\x2', '\xF57', '\xF58', '\x5', '\x22C', '\x117', '\x2', '\xF58',
    '\xF59', '\a', '\x3D9', '\x2', '\x2', '\xF59', '\xF86', '\x3', '\x2',
    '\x2', '\x2', '\xF5A', '\xF5B', '\a', '\x1E8', '\x2', '\x2', '\xF5B',
    '\xF5C', '\a', '\x3CF', '\x2', '\x2', '\xF5C', '\xF5D', '\a', '\x3D8',
    '\x2', '\x2', '\xF5D', '\xF5E', '\x5', '\x22C', '\x117', '\x2', '\xF5E',
    '\xF5F', '\a', '\x3D9', '\x2', '\x2', '\xF5F', '\xF86', '\x3', '\x2',
    '\x2', '\x2', '\xF60', '\xF61', '\a', '\x1E7', '\x2', '\x2', '\xF61',
    '\xF62', '\a', '\x3CF', '\x2', '\x2', '\xF62', '\xF63', '\a', '\x3D8',
    '\x2', '\x2', '\xF63', '\xF64', '\x5', '\x22E', '\x118', '\x2', '\xF64',
    '\xF65', '\a', '\x3D9', '\x2', '\x2', '\xF65', '\xF86', '\x3', '\x2',
    '\x2', '\x2', '\xF66', '\xF67', '\a', '\x1E9', '\x2', '\x2', '\xF67',
    '\xF68', '\a', '\x3CF', '\x2', '\x2', '\xF68', '\xF69', '\a', '\x3D8',
    '\x2', '\x2', '\xF69', '\xF6A', '\x5', '\x22E', '\x118', '\x2', '\xF6A',
    '\xF6B', '\a', '\x3D9', '\x2', '\x2', '\xF6B', '\xF86', '\x3', '\x2',
    '\x2', '\x2', '\xF6C', '\xF6D', '\a', '\x1EB', '\x2', '\x2', '\xF6D',
    '\xF6E', '\a', '\x3CF', '\x2', '\x2', '\xF6E', '\xF6F', '\a', '\x3D8',
    '\x2', '\x2', '\xF6F', '\xF70', '\x5', '\x238', '\x11D', '\x2', '\xF70',
    '\xF71', '\a', '\x3D9', '\x2', '\x2', '\xF71', '\xF86', '\x3', '\x2',
    '\x2', '\x2', '\xF72', '\xF73', '\a', '\x1EC', '\x2', '\x2', '\xF73',
    '\xF74', '\a', '\x3CF', '\x2', '\x2', '\xF74', '\xF75', '\a', '\x3D8',
    '\x2', '\x2', '\xF75', '\xF76', '\x5', '\x238', '\x11D', '\x2', '\xF76',
    '\xF77', '\a', '\x3D9', '\x2', '\x2', '\xF77', '\xF86', '\x3', '\x2',
    '\x2', '\x2', '\xF78', '\xF79', '\a', '\x1EA', '\x2', '\x2', '\xF79',
    '\xF7A', '\a', '\x3CF', '\x2', '\x2', '\xF7A', '\xF7B', '\a', '\x3D8',
    '\x2', '\x2', '\xF7B', '\xF80', '\x5', '\x13E', '\xA0', '\x2', '\xF7C',
    '\xF7D', '\a', '\x3DA', '\x2', '\x2', '\xF7D', '\xF7F', '\x5', '\x13E',
    '\xA0', '\x2', '\xF7E', '\xF7C', '\x3', '\x2', '\x2', '\x2', '\xF7F',
    '\xF82', '\x3', '\x2', '\x2', '\x2', '\xF80', '\xF7E', '\x3', '\x2', '\x2',
    '\x2', '\xF80', '\xF81', '\x3', '\x2', '\x2', '\x2', '\xF81', '\xF83',
    '\x3', '\x2', '\x2', '\x2', '\xF82', '\xF80', '\x3', '\x2', '\x2', '\x2',
    '\xF83', '\xF84', '\a', '\x3D9', '\x2', '\x2', '\xF84', '\xF86', '\x3',
    '\x2', '\x2', '\x2', '\xF85', '\xF54', '\x3', '\x2', '\x2', '\x2', '\xF85',
    '\xF5A', '\x3', '\x2', '\x2', '\x2', '\xF85', '\xF60', '\x3', '\x2', '\x2',
    '\x2', '\xF85', '\xF66', '\x3', '\x2', '\x2', '\x2', '\xF85', '\xF6C',
    '\x3', '\x2', '\x2', '\x2', '\xF85', '\xF72', '\x3', '\x2', '\x2', '\x2',
    '\xF85', '\xF78', '\x3', '\x2', '\x2', '\x2', '\xF86', '\x13D', '\x3',
    '\x2', '\x2', '\x2', '\xF87', '\xF88', '\a', '\x3D8', '\x2', '\x2', '\xF88',
    '\xF89', '\x5', '\x1F4', '\xFB', '\x2', '\xF89', '\xF8A', '\a', '\x3DA',
    '\x2', '\x2', '\xF8A', '\xF8B', '\x5', '\x1F4', '\xFB', '\x2', '\xF8B',
    '\xF8C', '\a', '\x3D9', '\x2', '\x2', '\xF8C', '\x13F', '\x3', '\x2',
    '\x2', '\x2', '\xF8D', '\xF8E', '\t', '\x36', '\x2', '\x2', '\xF8E', '\x141',
    '\x3', '\x2', '\x2', '\x2', '\xF8F', '\xF90', '\t', '\x37', '\x2', '\x2',
    '\xF90', '\xF91', '\a', '\x3CF', '\x2', '\x2', '\xF91', '\xFA2', '\x5',
    '\x146', '\xA4', '\x2', '\xF92', '\xF93', '\a', '\x192', '\x2', '\x2',
    '\xF93', '\xF94', '\a', '\x3CF', '\x2', '\x2', '\xF94', '\xF95', '\a',
    '\x3E7', '\x2', '\x2', '\xF95', '\xF96', '\a', '\x3DA', '\x2', '\x2',
    '\xF96', '\xF97', '\a', '\x193', '\x2', '\x2', '\xF97', '\xF98', '\a',
    '\x3CF', '\x2', '\x2', '\xF98', '\xFA2', '\x5', '\x212', '\x10A', '\x2',
    '\xF99', '\xF9A', '\a', '\x1E0', '\x2', '\x2', '\xF9A', '\xF9B', '\a',
    '\x3CF', '\x2', '\x2', '\xF9B', '\xF9C', '\a', '\x3E7', '\x2', '\x2',
    '\xF9C', '\xF9D', '\a', '\x3DA', '\x2', '\x2', '\xF9D', '\xF9E', '\a',
    '\x1E1', '\x2', '\x2', '\xF9E', '\xF9F', '\a', '\x3CF', '\x2', '\x2',
    '\xF9F', '\xFA2', '\x5', '\x212', '\x10A', '\x2', '\xFA0', '\xFA2', '\a',
    '\x20A', '\x2', '\x2', '\xFA1', '\xF8F', '\x3', '\x2', '\x2', '\x2', '\xFA1',
    '\xF92', '\x3', '\x2', '\x2', '\x2', '\xFA1', '\xF99', '\x3', '\x2', '\x2',
    '\x2', '\xFA1', '\xFA0', '\x3', '\x2', '\x2', '\x2', '\xFA2', '\x143',
    '\x3', '\x2', '\x2', '\x2', '\xFA3', '\xFA4', '\a', '\x231', '\x2', '\x2',
    '\xFA4', '\xFA5', '\a', '\x3CF', '\x2', '\x2', '\xFA5', '\xFB0', '\a',
    '\x3E7', '\x2', '\x2', '\xFA6', '\xFA7', '\a', '\x1CB', '\x2', '\x2',
    '\xFA7', '\xFA8', '\a', '\x3CF', '\x2', '\x2', '\xFA8', '\xFB0', '\a',
    '\x3E7', '\x2', '\x2', '\xFA9', '\xFAA', '\a', '\x13D', '\x2', '\x2',
    '\xFAA', '\xFAB', '\a', '\x3CF', '\x2', '\x2', '\xFAB', '\xFB0', '\a',
    '\x3E7', '\x2', '\x2', '\xFAC', '\xFAD', '\a', '\x1CE', '\x2', '\x2',
    '\xFAD', '\xFAE', '\a', '\x3CF', '\x2', '\x2', '\xFAE', '\xFB0', '\a',
    '\x3E7', '\x2', '\x2', '\xFAF', '\xFA3', '\x3', '\x2', '\x2', '\x2', '\xFAF',
    '\xFA6', '\x3', '\x2', '\x2', '\x2', '\xFAF', '\xFA9', '\x3', '\x2', '\x2',
    '\x2', '\xFAF', '\xFAC', '\x3', '\x2', '\x2', '\x2', '\xFB0', '\x145',
    '\x3', '\x2', '\x2', '\x2', '\xFB1', '\xFB6', '\x5', '\x204', '\x103',
    '\x2', '\xFB2', '\xFB3', '\a', '\x3DA', '\x2', '\x2', '\xFB3', '\xFB5',
    '\x5', '\x204', '\x103', '\x2', '\xFB4', '\xFB2', '\x3', '\x2', '\x2',
    '\x2', '\xFB5', '\xFB8', '\x3', '\x2', '\x2', '\x2', '\xFB6', '\xFB4',
    '\x3', '\x2', '\x2', '\x2', '\xFB6', '\xFB7', '\x3', '\x2', '\x2', '\x2',
    '\xFB7', '\xFBB', '\x3', '\x2', '\x2', '\x2', '\xFB8', '\xFB6', '\x3',
    '\x2', '\x2', '\x2', '\xFB9', '\xFBB', '\a', '\x3E7', '\x2', '\x2', '\xFBA',
    '\xFB1', '\x3', '\x2', '\x2', '\x2', '\xFBA', '\xFB9', '\x3', '\x2', '\x2',
    '\x2', '\xFBB', '\x147', '\x3', '\x2', '\x2', '\x2', '\xFBC', '\xFBD',
    '\a', '\x240', '\x2', '\x2', '\xFBD', '\xFBE', '\t', '\x38', '\x2', '\x2',
    '\xFBE', '\xFC0', '\x5', '\x206', '\x104', '\x2', '\xFBF', '\xFC1', '\t',
    '\x39', '\x2', '\x2', '\xFC0', '\xFBF', '\x3', '\x2', '\x2', '\x2', '\xFC0',
    '\xFC1', '\x3', '\x2', '\x2', '\x2', '\xFC1', '\x149', '\x3', '\x2', '\x2',
    '\x2', '\xFC2', '\xFC3', '\a', '\x240', '\x2', '\x2', '\xFC3', '\xFC4',
    '\a', '\x14B', '\x2', '\x2', '\xFC4', '\xFCA', '\x5', '\x206', '\x104',
    '\x2', '\xFC5', '\xFC8', '\a', '\x21E', '\x2', '\x2', '\xFC6', '\xFC7',
    '\a', '<', '\x2', '\x2', '\xFC7', '\xFC9', '\a', '\x1AB', '\x2', '\x2',
    '\xFC8', '\xFC6', '\x3', '\x2', '\x2', '\x2', '\xFC8', '\xFC9', '\x3',
    '\x2', '\x2', '\x2', '\xFC9', '\xFCB', '\x3', '\x2', '\x2', '\x2', '\xFCA',
    '\xFC5', '\x3', '\x2', '\x2', '\x2', '\xFCA', '\xFCB', '\x3', '\x2', '\x2',
    '\x2', '\xFCB', '\x14B', '\x3', '\x2', '\x2', '\x2', '\xFCC', '\xFCD',
    '\a', '\x240', '\x2', '\x2', '\xFCD', '\xFCE', '\a', '\x1D2', '\x2', '\x2',
    '\xFCE', '\xFCF', '\x5', '\x206', '\x104', '\x2', '\xFCF', '\x14D', '\x3',
    '\x2', '\x2', '\x2', '\xFD0', '\xFD1', '\a', '\x240', '\x2', '\x2', '\xFD1',
    '\xFD2', '\a', '\x129', '\x2', '\x2', '\xFD2', '\xFD5', '\x5', '\x206',
    '\x104', '\x2', '\xFD3', '\xFD4', '\a', '\x1BE', '\x2', '\x2', '\xFD4',
    '\xFD6', '\a', '\x1CC', '\x2', '\x2', '\xFD5', '\xFD3', '\x3', '\x2',
    '\x2', '\x2', '\xFD5', '\xFD6', '\x3', '\x2', '\x2', '\x2', '\xFD6', '\x14F',
    '\x3', '\x2', '\x2', '\x2', '\xFD7', '\xFD8', '\a', '\x240', '\x2', '\x2',
    '\xFD8', '\xFD9', '\a', '\x1F2', '\x2', '\x2', '\xFD9', '\xFDA', '\x5',
    '\x206', '\x104', '\x2', '\xFDA', '\x151', '\x3', '\x2', '\x2', '\x2',
    '\xFDB', '\xFDC', '\a', '\x240', '\x2', '\x2', '\xFDC', '\xFDF', '\a',
    '\x1DC', '\x2', '\x2', '\xFDD', '\xFDE', '\a', '\x1F', '\x2', '\x2', '\xFDE',
    '\xFE0', '\x5', '\x206', '\x104', '\x2', '\xFDF', '\xFDD', '\x3', '\x2',
    '\x2', '\x2', '\xFDF', '\xFE0', '\x3', '\x2', '\x2', '\x2', '\xFE0', '\x153',
    '\x3', '\x2', '\x2', '\x2', '\xFE1', '\xFE2', '\a', '\x1D2', '\x2', '\x2',
    '\xFE2', '\xFE3', '\x5', '\x20C', '\x107', '\x2', '\xFE3', '\xFE6', '\a',
    '?', '\x2', '\x2', '\xFE4', '\xFE7', '\a', '\x3E7', '\x2', '\x2', '\xFE5',
    '\xFE7', '\a', '\x3F2', '\x2', '\x2', '\xFE6', '\xFE4', '\x3', '\x2',
    '\x2', '\x2', '\xFE6', '\xFE5', '\x3', '\x2', '\x2', '\x2', '\xFE7', '\x155',
    '\x3', '\x2', '\x2', '\x2', '\xFE8', '\xFE9', '\a', '\x251', '\x2', '\x2',
    '\xFE9', '\xFEC', '\x5', '\x20C', '\x107', '\x2', '\xFEA', '\xFEB', '\a',
    '\xAB', '\x2', '\x2', '\xFEB', '\xFED', '\x5', '\x23A', '\x11E', '\x2',
    '\xFEC', '\xFEA', '\x3', '\x2', '\x2', '\x2', '\xFEC', '\xFED', '\x3',
    '\x2', '\x2', '\x2', '\xFED', '\x157', '\x3', '\x2', '\x2', '\x2', '\xFEE',
    '\xFEF', '\t', ':', '\x2', '\x2', '\xFEF', '\xFF0', '\a', '\x1D2', '\x2',
    '\x2', '\xFF0', '\xFF1', '\x5', '\x20C', '\x107', '\x2', '\xFF1', '\x159',
    '\x3', '\x2', '\x2', '\x2', '\xFF2', '\xFF5', '\x5', '\x15C', '\xAF',
    '\x2', '\xFF3', '\xFF5', '\x5', '\x6', '\x4', '\x2', '\xFF4', '\xFF2',
    '\x3', '\x2', '\x2', '\x2', '\xFF4', '\xFF3', '\x3', '\x2', '\x2', '\x2',
    '\xFF5', '\x15B', '\x3', '\x2', '\x2', '\x2', '\xFF6', '\xFF7', '\x5',
    '\x20C', '\x107', '\x2', '\xFF7', '\xFF8', '\a', '\x3E3', '\x2', '\x2',
    '\xFF8', '\xFFA', '\x3', '\x2', '\x2', '\x2', '\xFF9', '\xFF6', '\x3',
    '\x2', '\x2', '\x2', '\xFF9', '\xFFA', '\x3', '\x2', '\x2', '\x2', '\xFFA',
    '\xFFB', '\x3', '\x2', '\x2', '\x2', '\xFFB', '\x1022', '\a', '\x111',
    '\x2', '\x2', '\xFFC', '\xFFD', '\x5', '\x170', '\xB9', '\x2', '\xFFD',
    '\xFFE', '\a', '\x3DB', '\x2', '\x2', '\xFFE', '\x1000', '\x3', '\x2',
    '\x2', '\x2', '\xFFF', '\xFFC', '\x3', '\x2', '\x2', '\x2', '\x1000',
    '\x1003', '\x3', '\x2', '\x2', '\x2', '\x1001', '\xFFF', '\x3', '\x2',
    '\x2', '\x2', '\x1001', '\x1002', '\x3', '\x2', '\x2', '\x2', '\x1002',
    '\x1009', '\x3', '\x2', '\x2', '\x2', '\x1003', '\x1001', '\x3', '\x2',
    '\x2', '\x2', '\x1004', '\x1005', '\x5', '\x172', '\xBA', '\x2', '\x1005',
    '\x1006', '\a', '\x3DB', '\x2', '\x2', '\x1006', '\x1008', '\x3', '\x2',
    '\x2', '\x2', '\x1007', '\x1004', '\x3', '\x2', '\x2', '\x2', '\x1008',
    '\x100B', '\x3', '\x2', '\x2', '\x2', '\x1009', '\x1007', '\x3', '\x2',
    '\x2', '\x2', '\x1009', '\x100A', '\x3', '\x2', '\x2', '\x2', '\x100A',
    '\x1011', '\x3', '\x2', '\x2', '\x2', '\x100B', '\x1009', '\x3', '\x2',
    '\x2', '\x2', '\x100C', '\x100D', '\x5', '\x174', '\xBB', '\x2', '\x100D',
    '\x100E', '\a', '\x3DB', '\x2', '\x2', '\x100E', '\x1010', '\x3', '\x2',
    '\x2', '\x2', '\x100F', '\x100C', '\x3', '\x2', '\x2', '\x2', '\x1010',
    '\x1013', '\x3', '\x2', '\x2', '\x2', '\x1011', '\x100F', '\x3', '\x2',
    '\x2', '\x2', '\x1011', '\x1012', '\x3', '\x2', '\x2', '\x2', '\x1012',
    '\x1019', '\x3', '\x2', '\x2', '\x2', '\x1013', '\x1011', '\x3', '\x2',
    '\x2', '\x2', '\x1014', '\x1015', '\x5', '\x176', '\xBC', '\x2', '\x1015',
    '\x1016', '\a', '\x3DB', '\x2', '\x2', '\x1016', '\x1018', '\x3', '\x2',
    '\x2', '\x2', '\x1017', '\x1014', '\x3', '\x2', '\x2', '\x2', '\x1018',
    '\x101B', '\x3', '\x2', '\x2', '\x2', '\x1019', '\x1017', '\x3', '\x2',
    '\x2', '\x2', '\x1019', '\x101A', '\x3', '\x2', '\x2', '\x2', '\x101A',
    '\x101F', '\x3', '\x2', '\x2', '\x2', '\x101B', '\x1019', '\x3', '\x2',
    '\x2', '\x2', '\x101C', '\x101E', '\x5', '\x17A', '\xBE', '\x2', '\x101D',
    '\x101C', '\x3', '\x2', '\x2', '\x2', '\x101E', '\x1021', '\x3', '\x2',
    '\x2', '\x2', '\x101F', '\x101D', '\x3', '\x2', '\x2', '\x2', '\x101F',
    '\x1020', '\x3', '\x2', '\x2', '\x2', '\x1020', '\x1023', '\x3', '\x2',
    '\x2', '\x2', '\x1021', '\x101F', '\x3', '\x2', '\x2', '\x2', '\x1022',
    '\x1001', '\x3', '\x2', '\x2', '\x2', '\x1022', '\x1023', '\x3', '\x2',
    '\x2', '\x2', '\x1023', '\x1024', '\x3', '\x2', '\x2', '\x2', '\x1024',
    '\x1026', '\a', '\x14B', '\x2', '\x2', '\x1025', '\x1027', '\x5', '\x20C',
    '\x107', '\x2', '\x1026', '\x1025', '\x3', '\x2', '\x2', '\x2', '\x1026',
    '\x1027', '\x3', '\x2', '\x2', '\x2', '\x1027', '\x15D', '\x3', '\x2',
    '\x2', '\x2', '\x1028', '\x102B', '\a', '\x15', '\x2', '\x2', '\x1029',
    '\x102C', '\x5', '\x20C', '\x107', '\x2', '\x102A', '\x102C', '\x5', '\x25A',
    '\x12E', '\x2', '\x102B', '\x1029', '\x3', '\x2', '\x2', '\x2', '\x102B',
    '\x102A', '\x3', '\x2', '\x2', '\x2', '\x102B', '\x102C', '\x3', '\x2',
    '\x2', '\x2', '\x102C', '\x102E', '\x3', '\x2', '\x2', '\x2', '\x102D',
    '\x102F', '\x5', '\x17C', '\xBF', '\x2', '\x102E', '\x102D', '\x3', '\x2',
    '\x2', '\x2', '\x102F', '\x1030', '\x3', '\x2', '\x2', '\x2', '\x1030',
    '\x102E', '\x3', '\x2', '\x2', '\x2', '\x1030', '\x1031', '\x3', '\x2',
    '\x2', '\x2', '\x1031', '\x1038', '\x3', '\x2', '\x2', '\x2', '\x1032',
    '\x1034', '\a', '\x33', '\x2', '\x2', '\x1033', '\x1035', '\x5', '\x17A',
    '\xBE', '\x2', '\x1034', '\x1033', '\x3', '\x2', '\x2', '\x2', '\x1035',
    '\x1036', '\x3', '\x2', '\x2', '\x2', '\x1036', '\x1034', '\x3', '\x2',
    '\x2', '\x2', '\x1036', '\x1037', '\x3', '\x2', '\x2', '\x2', '\x1037',
    '\x1039', '\x3', '\x2', '\x2', '\x2', '\x1038', '\x1032', '\x3', '\x2',
    '\x2', '\x2', '\x1038', '\x1039', '\x3', '\x2', '\x2', '\x2', '\x1039',
    '\x103A', '\x3', '\x2', '\x2', '\x2', '\x103A', '\x103B', '\a', '\x14B',
    '\x2', '\x2', '\x103B', '\x103C', '\a', '\x15', '\x2', '\x2', '\x103C',
    '\x15F', '\x3', '\x2', '\x2', '\x2', '\x103D', '\x103E', '\a', 'G', '\x2',
    '\x2', '\x103E', '\x103F', '\x5', '\x25A', '\x12E', '\x2', '\x103F', '\x1041',
    '\a', '\x9E', '\x2', '\x2', '\x1040', '\x1042', '\x5', '\x17A', '\xBE',
    '\x2', '\x1041', '\x1040', '\x3', '\x2', '\x2', '\x2', '\x1042', '\x1043',
    '\x3', '\x2', '\x2', '\x2', '\x1043', '\x1041', '\x3', '\x2', '\x2', '\x2',
    '\x1043', '\x1044', '\x3', '\x2', '\x2', '\x2', '\x1044', '\x1048', '\x3',
    '\x2', '\x2', '\x2', '\x1045', '\x1047', '\x5', '\x17E', '\xC0', '\x2',
    '\x1046', '\x1045', '\x3', '\x2', '\x2', '\x2', '\x1047', '\x104A', '\x3',
    '\x2', '\x2', '\x2', '\x1048', '\x1046', '\x3', '\x2', '\x2', '\x2', '\x1048',
    '\x1049', '\x3', '\x2', '\x2', '\x2', '\x1049', '\x1051', '\x3', '\x2',
    '\x2', '\x2', '\x104A', '\x1048', '\x3', '\x2', '\x2', '\x2', '\x104B',
    '\x104D', '\a', '\x33', '\x2', '\x2', '\x104C', '\x104E', '\x5', '\x17A',
    '\xBE', '\x2', '\x104D', '\x104C', '\x3', '\x2', '\x2', '\x2', '\x104E',
    '\x104F', '\x3', '\x2', '\x2', '\x2', '\x104F', '\x104D', '\x3', '\x2',
    '\x2', '\x2', '\x104F', '\x1050', '\x3', '\x2', '\x2', '\x2', '\x1050',
    '\x1052', '\x3', '\x2', '\x2', '\x2', '\x1051', '\x104B', '\x3', '\x2',
    '\x2', '\x2', '\x1051', '\x1052', '\x3', '\x2', '\x2', '\x2', '\x1052',
    '\x1053', '\x3', '\x2', '\x2', '\x2', '\x1053', '\x1054', '\a', '\x14B',
    '\x2', '\x2', '\x1054', '\x1055', '\a', 'G', '\x2', '\x2', '\x1055', '\x161',
    '\x3', '\x2', '\x2', '\x2', '\x1056', '\x1057', '\a', 'R', '\x2', '\x2',
    '\x1057', '\x1058', '\x5', '\x20C', '\x107', '\x2', '\x1058', '\x163',
    '\x3', '\x2', '\x2', '\x2', '\x1059', '\x105A', '\a', 'X', '\x2', '\x2',
    '\x105A', '\x105B', '\x5', '\x20C', '\x107', '\x2', '\x105B', '\x165',
    '\x3', '\x2', '\x2', '\x2', '\x105C', '\x105D', '\x5', '\x20C', '\x107',
    '\x2', '\x105D', '\x105E', '\a', '\x3E3', '\x2', '\x2', '\x105E', '\x1060',
    '\x3', '\x2', '\x2', '\x2', '\x105F', '\x105C', '\x3', '\x2', '\x2', '\x2',
    '\x105F', '\x1060', '\x3', '\x2', '\x2', '\x2', '\x1060', '\x1061', '\x3',
    '\x2', '\x2', '\x2', '\x1061', '\x1063', '\a', '`', '\x2', '\x2', '\x1062',
    '\x1064', '\x5', '\x17A', '\xBE', '\x2', '\x1063', '\x1062', '\x3', '\x2',
    '\x2', '\x2', '\x1064', '\x1065', '\x3', '\x2', '\x2', '\x2', '\x1065',
    '\x1063', '\x3', '\x2', '\x2', '\x2', '\x1065', '\x1066', '\x3', '\x2',
    '\x2', '\x2', '\x1066', '\x1067', '\x3', '\x2', '\x2', '\x2', '\x1067',
    '\x1068', '\a', '\x14B', '\x2', '\x2', '\x1068', '\x106A', '\a', '`',
    '\x2', '\x2', '\x1069', '\x106B', '\x5', '\x20C', '\x107', '\x2', '\x106A',
    '\x1069', '\x3', '\x2', '\x2', '\x2', '\x106A', '\x106B', '\x3', '\x2',
    '\x2', '\x2', '\x106B', '\x167', '\x3', '\x2', '\x2', '\x2', '\x106C',
    '\x106D', '\x5', '\x20C', '\x107', '\x2', '\x106D', '\x106E', '\a', '\x3E3',
    '\x2', '\x2', '\x106E', '\x1070', '\x3', '\x2', '\x2', '\x2', '\x106F',
    '\x106C', '\x3', '\x2', '\x2', '\x2', '\x106F', '\x1070', '\x3', '\x2',
    '\x2', '\x2', '\x1070', '\x1071', '\x3', '\x2', '\x2', '\x2', '\x1071',
    '\x1073', '\a', '\x80', '\x2', '\x2', '\x1072', '\x1074', '\x5', '\x17A',
    '\xBE', '\x2', '\x1073', '\x1072', '\x3', '\x2', '\x2', '\x2', '\x1074',
    '\x1075', '\x3', '\x2', '\x2', '\x2', '\x1075', '\x1073', '\x3', '\x2',
    '\x2', '\x2', '\x1075', '\x1076', '\x3', '\x2', '\x2', '\x2', '\x1076',
    '\x1077', '\x3', '\x2', '\x2', '\x2', '\x1077', '\x1078', '\a', '\x22F',
    '\x2', '\x2', '\x1078', '\x1079', '\x5', '\x25A', '\x12E', '\x2', '\x1079',
    '\x107A', '\a', '\x14B', '\x2', '\x2', '\x107A', '\x107C', '\a', '\x80',
    '\x2', '\x2', '\x107B', '\x107D', '\x5', '\x20C', '\x107', '\x2', '\x107C',
    '\x107B', '\x3', '\x2', '\x2', '\x2', '\x107C', '\x107D', '\x3', '\x2',
    '\x2', '\x2', '\x107D', '\x169', '\x3', '\x2', '\x2', '\x2', '\x107E',
    '\x107F', '\a', '\x85', '\x2', '\x2', '\x107F', '\x1080', '\x5', '\x25A',
    '\x12E', '\x2', '\x1080', '\x16B', '\x3', '\x2', '\x2', '\x2', '\x1081',
    '\x1082', '\x5', '\x20C', '\x107', '\x2', '\x1082', '\x1083', '\a', '\x3E3',
    '\x2', '\x2', '\x1083', '\x1085', '\x3', '\x2', '\x2', '\x2', '\x1084',
    '\x1081', '\x3', '\x2', '\x2', '\x2', '\x1084', '\x1085', '\x3', '\x2',
    '\x2', '\x2', '\x1085', '\x1086', '\x3', '\x2', '\x2', '\x2', '\x1086',
    '\x1087', '\a', '\xAF', '\x2', '\x2', '\x1087', '\x1088', '\x5', '\x25A',
    '\x12E', '\x2', '\x1088', '\x108A', '\a', '\x145', '\x2', '\x2', '\x1089',
    '\x108B', '\x5', '\x17A', '\xBE', '\x2', '\x108A', '\x1089', '\x3', '\x2',
    '\x2', '\x2', '\x108B', '\x108C', '\x3', '\x2', '\x2', '\x2', '\x108C',
    '\x108A', '\x3', '\x2', '\x2', '\x2', '\x108C', '\x108D', '\x3', '\x2',
    '\x2', '\x2', '\x108D', '\x108E', '\x3', '\x2', '\x2', '\x2', '\x108E',
    '\x108F', '\a', '\x14B', '\x2', '\x2', '\x108F', '\x1091', '\a', '\xAF',
    '\x2', '\x2', '\x1090', '\x1092', '\x5', '\x20C', '\x107', '\x2', '\x1091',
    '\x1090', '\x3', '\x2', '\x2', '\x2', '\x1091', '\x1092', '\x3', '\x2',
    '\x2', '\x2', '\x1092', '\x16D', '\x3', '\x2', '\x2', '\x2', '\x1093',
    '\x1094', '\a', '\x122', '\x2', '\x2', '\x1094', '\x10A3', '\x5', '\x20C',
    '\x107', '\x2', '\x1095', '\x109A', '\a', ';', '\x2', '\x2', '\x1096',
    '\x1098', '\a', '\x1B6', '\x2', '\x2', '\x1097', '\x1096', '\x3', '\x2',
    '\x2', '\x2', '\x1097', '\x1098', '\x3', '\x2', '\x2', '\x2', '\x1098',
    '\x1099', '\x3', '\x2', '\x2', '\x2', '\x1099', '\x109B', '\a', '?', '\x2',
    '\x2', '\x109A', '\x1097', '\x3', '\x2', '\x2', '\x2', '\x109A', '\x109B',
    '\x3', '\x2', '\x2', '\x2', '\x109B', '\x109C', '\x3', '\x2', '\x2', '\x2',
    '\x109C', '\x109D', '\x5', '\x20C', '\x107', '\x2', '\x109D', '\x109E',
    '\a', 'P', '\x2', '\x2', '\x109E', '\x109F', '\x5', '\x22C', '\x117',
    '\x2', '\x109F', '\x10A3', '\x3', '\x2', '\x2', '\x2', '\x10A0', '\x10A1',
    '\a', '\x1C1', '\x2', '\x2', '\x10A1', '\x10A3', '\x5', '\x20C', '\x107',
    '\x2', '\x10A2', '\x1093', '\x3', '\x2', '\x2', '\x2', '\x10A2', '\x1095',
    '\x3', '\x2', '\x2', '\x2', '\x10A2', '\x10A0', '\x3', '\x2', '\x2', '\x2',
    '\x10A3', '\x16F', '\x3', '\x2', '\x2', '\x2', '\x10A4', '\x10A5', '\a',
    '\'', '\x2', '\x2', '\x10A5', '\x10A6', '\x5', '\x22C', '\x117', '\x2',
    '\x10A6', '\x10A9', '\x5', '\x220', '\x111', '\x2', '\x10A7', '\x10A8',
    '\a', '(', '\x2', '\x2', '\x10A8', '\x10AA', '\x5', '\x23C', '\x11F',
    '\x2', '\x10A9', '\x10A7', '\x3', '\x2', '\x2', '\x2', '\x10A9', '\x10AA',
    '\x3', '\x2', '\x2', '\x2', '\x10AA', '\x171', '\x3', '\x2', '\x2', '\x2',
    '\x10AB', '\x10AC', '\a', '\'', '\x2', '\x2', '\x10AC', '\x10AD', '\x5',
    '\x20C', '\x107', '\x2', '\x10AD', '\x10AE', '\a', '\x1C', '\x2', '\x2',
    '\x10AE', '\x10B5', '\a', '<', '\x2', '\x2', '\x10AF', '\x10B6', '\x5',
    '\x212', '\x10A', '\x2', '\x10B0', '\x10B2', '\a', '\x93', '\x2', '\x2',
    '\x10B1', '\x10B3', '\a', '\x235', '\x2', '\x2', '\x10B2', '\x10B1', '\x3',
    '\x2', '\x2', '\x2', '\x10B2', '\x10B3', '\x3', '\x2', '\x2', '\x2', '\x10B3',
    '\x10B4', '\x3', '\x2', '\x2', '\x2', '\x10B4', '\x10B6', '\a', '\x3E7',
    '\x2', '\x2', '\x10B5', '\x10AF', '\x3', '\x2', '\x2', '\x2', '\x10B5',
    '\x10B0', '\x3', '\x2', '\x2', '\x2', '\x10B6', '\x173', '\x3', '\x2',
    '\x2', '\x2', '\x10B7', '\x10B8', '\a', '\'', '\x2', '\x2', '\x10B8',
    '\x10B9', '\x5', '\x20C', '\x107', '\x2', '\x10B9', '\x10BA', '\a', '$',
    '\x2', '\x2', '\x10BA', '\x10BB', '\a', '<', '\x2', '\x2', '\x10BB', '\x10BC',
    '\x5', '\xB4', '[', '\x2', '\x10BC', '\x175', '\x3', '\x2', '\x2', '\x2',
    '\x10BD', '\x10BE', '\a', '\'', '\x2', '\x2', '\x10BE', '\x10BF', '\t',
    ';', '\x2', '\x2', '\x10BF', '\x10C0', '\a', '\x16C', '\x2', '\x2', '\x10C0',
    '\x10C1', '\a', '<', '\x2', '\x2', '\x10C1', '\x10C6', '\x5', '\x178',
    '\xBD', '\x2', '\x10C2', '\x10C3', '\a', '\x3DA', '\x2', '\x2', '\x10C3',
    '\x10C5', '\x5', '\x178', '\xBD', '\x2', '\x10C4', '\x10C2', '\x3', '\x2',
    '\x2', '\x2', '\x10C5', '\x10C8', '\x3', '\x2', '\x2', '\x2', '\x10C6',
    '\x10C4', '\x3', '\x2', '\x2', '\x2', '\x10C6', '\x10C7', '\x3', '\x2',
    '\x2', '\x2', '\x10C7', '\x10C9', '\x3', '\x2', '\x2', '\x2', '\x10C8',
    '\x10C6', '\x3', '\x2', '\x2', '\x2', '\x10C9', '\x10CA', '\x5', '\x15A',
    '\xAE', '\x2', '\x10CA', '\x177', '\x3', '\x2', '\x2', '\x2', '\x10CB',
    '\x10D7', '\x5', '\x212', '\x10A', '\x2', '\x10CC', '\x10CE', '\a', '\x93',
    '\x2', '\x2', '\x10CD', '\x10CF', '\a', '\x235', '\x2', '\x2', '\x10CE',
    '\x10CD', '\x3', '\x2', '\x2', '\x2', '\x10CE', '\x10CF', '\x3', '\x2',
    '\x2', '\x2', '\x10CF', '\x10D0', '\x3', '\x2', '\x2', '\x2', '\x10D0',
    '\x10D7', '\a', '\x3E7', '\x2', '\x2', '\x10D1', '\x10D7', '\x5', '\x20C',
    '\x107', '\x2', '\x10D2', '\x10D7', '\a', '\x94', '\x2', '\x2', '\x10D3',
    '\x10D4', '\a', 'h', '\x2', '\x2', '\x10D4', '\x10D7', '\a', '\x165',
    '\x2', '\x2', '\x10D5', '\x10D7', '\a', '\x92', '\x2', '\x2', '\x10D6',
    '\x10CB', '\x3', '\x2', '\x2', '\x2', '\x10D6', '\x10CC', '\x3', '\x2',
    '\x2', '\x2', '\x10D6', '\x10D1', '\x3', '\x2', '\x2', '\x2', '\x10D6',
    '\x10D2', '\x3', '\x2', '\x2', '\x2', '\x10D6', '\x10D3', '\x3', '\x2',
    '\x2', '\x2', '\x10D6', '\x10D5', '\x3', '\x2', '\x2', '\x2', '\x10D7',
    '\x179', '\x3', '\x2', '\x2', '\x2', '\x10D8', '\x10DB', '\x5', '\x14',
    '\v', '\x2', '\x10D9', '\x10DB', '\x5', '\x6', '\x4', '\x2', '\x10DA',
    '\x10D8', '\x3', '\x2', '\x2', '\x2', '\x10DA', '\x10D9', '\x3', '\x2',
    '\x2', '\x2', '\x10DB', '\x10DC', '\x3', '\x2', '\x2', '\x2', '\x10DC',
    '\x10DD', '\a', '\x3DB', '\x2', '\x2', '\x10DD', '\x17B', '\x3', '\x2',
    '\x2', '\x2', '\x10DE', '\x10E1', '\a', '\xAD', '\x2', '\x2', '\x10DF',
    '\x10E2', '\x5', '\x21E', '\x110', '\x2', '\x10E0', '\x10E2', '\x5', '\x25A',
    '\x12E', '\x2', '\x10E1', '\x10DF', '\x3', '\x2', '\x2', '\x2', '\x10E1',
    '\x10E0', '\x3', '\x2', '\x2', '\x2', '\x10E2', '\x10E3', '\x3', '\x2',
    '\x2', '\x2', '\x10E3', '\x10E5', '\a', '\x9E', '\x2', '\x2', '\x10E4',
    '\x10E6', '\x5', '\x17A', '\xBE', '\x2', '\x10E5', '\x10E4', '\x3', '\x2',
    '\x2', '\x2', '\x10E6', '\x10E7', '\x3', '\x2', '\x2', '\x2', '\x10E7',
    '\x10E5', '\x3', '\x2', '\x2', '\x2', '\x10E7', '\x10E8', '\x3', '\x2',
    '\x2', '\x2', '\x10E8', '\x17D', '\x3', '\x2', '\x2', '\x2', '\x10E9',
    '\x10EA', '\a', '\x34', '\x2', '\x2', '\x10EA', '\x10EB', '\x5', '\x25A',
    '\x12E', '\x2', '\x10EB', '\x10ED', '\a', '\x9E', '\x2', '\x2', '\x10EC',
    '\x10EE', '\x5', '\x17A', '\xBE', '\x2', '\x10ED', '\x10EC', '\x3', '\x2',
    '\x2', '\x2', '\x10EE', '\x10EF', '\x3', '\x2', '\x2', '\x2', '\x10EF',
    '\x10ED', '\x3', '\x2', '\x2', '\x2', '\x10EF', '\x10F0', '\x3', '\x2',
    '\x2', '\x2', '\x10F0', '\x17F', '\x3', '\x2', '\x2', '\x2', '\x10F1',
    '\x10F2', '\a', '\t', '\x2', '\x2', '\x10F2', '\x10F3', '\a', '\x231',
    '\x2', '\x2', '\x10F3', '\x10F8', '\x5', '\x192', '\xCA', '\x2', '\x10F4',
    '\x10F5', '\a', '\x3DA', '\x2', '\x2', '\x10F5', '\x10F7', '\x5', '\x192',
    '\xCA', '\x2', '\x10F6', '\x10F4', '\x3', '\x2', '\x2', '\x2', '\x10F7',
    '\x10FA', '\x3', '\x2', '\x2', '\x2', '\x10F8', '\x10F6', '\x3', '\x2',
    '\x2', '\x2', '\x10F8', '\x10F9', '\x3', '\x2', '\x2', '\x2', '\x10F9',
    '\x1128', '\x3', '\x2', '\x2', '\x2', '\x10FA', '\x10F8', '\x3', '\x2',
    '\x2', '\x2', '\x10FB', '\x10FC', '\a', '\t', '\x2', '\x2', '\x10FC',
    '\x10FE', '\a', '\x231', '\x2', '\x2', '\x10FD', '\x10FF', '\x5', '\x242',
    '\x122', '\x2', '\x10FE', '\x10FD', '\x3', '\x2', '\x2', '\x2', '\x10FE',
    '\x10FF', '\x3', '\x2', '\x2', '\x2', '\x10FF', '\x1100', '\x3', '\x2',
    '\x2', '\x2', '\x1100', '\x1105', '\x5', '\x194', '\xCB', '\x2', '\x1101',
    '\x1102', '\a', '\x3DA', '\x2', '\x2', '\x1102', '\x1104', '\x5', '\x194',
    '\xCB', '\x2', '\x1103', '\x1101', '\x3', '\x2', '\x2', '\x2', '\x1104',
    '\x1107', '\x3', '\x2', '\x2', '\x2', '\x1105', '\x1103', '\x3', '\x2',
    '\x2', '\x2', '\x1105', '\x1106', '\x3', '\x2', '\x2', '\x2', '\x1106',
    '\x1116', '\x3', '\x2', '\x2', '\x2', '\x1107', '\x1105', '\x3', '\x2',
    '\x2', '\x2', '\x1108', '\x1114', '\a', '\x82', '\x2', '\x2', '\x1109',
    '\x1115', '\a', '\x1B9', '\x2', '\x2', '\x110A', '\x1111', '\x5', '\x196',
    '\xCC', '\x2', '\x110B', '\x110D', '\a', '\f', '\x2', '\x2', '\x110C',
    '\x110B', '\x3', '\x2', '\x2', '\x2', '\x110C', '\x110D', '\x3', '\x2',
    '\x2', '\x2', '\x110D', '\x110E', '\x3', '\x2', '\x2', '\x2', '\x110E',
    '\x1110', '\x5', '\x196', '\xCC', '\x2', '\x110F', '\x110C', '\x3', '\x2',
    '\x2', '\x2', '\x1110', '\x1113', '\x3', '\x2', '\x2', '\x2', '\x1111',
    '\x110F', '\x3', '\x2', '\x2', '\x2', '\x1111', '\x1112', '\x3', '\x2',
    '\x2', '\x2', '\x1112', '\x1115', '\x3', '\x2', '\x2', '\x2', '\x1113',
    '\x1111', '\x3', '\x2', '\x2', '\x2', '\x1114', '\x1109', '\x3', '\x2',
    '\x2', '\x2', '\x1114', '\x110A', '\x3', '\x2', '\x2', '\x2', '\x1115',
    '\x1117', '\x3', '\x2', '\x2', '\x2', '\x1116', '\x1108', '\x3', '\x2',
    '\x2', '\x2', '\x1116', '\x1117', '\x3', '\x2', '\x2', '\x2', '\x1117',
    '\x111E', '\x3', '\x2', '\x2', '\x2', '\x1118', '\x111A', '\a', '\xB0',
    '\x2', '\x2', '\x1119', '\x111B', '\x5', '\x198', '\xCD', '\x2', '\x111A',
    '\x1119', '\x3', '\x2', '\x2', '\x2', '\x111B', '\x111C', '\x3', '\x2',
    '\x2', '\x2', '\x111C', '\x111A', '\x3', '\x2', '\x2', '\x2', '\x111C',
    '\x111D', '\x3', '\x2', '\x2', '\x2', '\x111D', '\x111F', '\x3', '\x2',
    '\x2', '\x2', '\x111E', '\x1118', '\x3', '\x2', '\x2', '\x2', '\x111E',
    '\x111F', '\x3', '\x2', '\x2', '\x2', '\x111F', '\x1124', '\x3', '\x2',
    '\x2', '\x2', '\x1120', '\x1123', '\x5', '\x19A', '\xCE', '\x2', '\x1121',
    '\x1123', '\x5', '\x19C', '\xCF', '\x2', '\x1122', '\x1120', '\x3', '\x2',
    '\x2', '\x2', '\x1122', '\x1121', '\x3', '\x2', '\x2', '\x2', '\x1123',
    '\x1126', '\x3', '\x2', '\x2', '\x2', '\x1124', '\x1122', '\x3', '\x2',
    '\x2', '\x2', '\x1124', '\x1125', '\x3', '\x2', '\x2', '\x2', '\x1125',
    '\x1128', '\x3', '\x2', '\x2', '\x2', '\x1126', '\x1124', '\x3', '\x2',
    '\x2', '\x2', '\x1127', '\x10F1', '\x3', '\x2', '\x2', '\x2', '\x1127',
    '\x10FB', '\x3', '\x2', '\x2', '\x2', '\x1128', '\x181', '\x3', '\x2',
    '\x2', '\x2', '\x1129', '\x112A', '\a', ' ', '\x2', '\x2', '\x112A', '\x112B',
    '\a', '\x231', '\x2', '\x2', '\x112B', '\x1130', '\x5', '\x194', '\xCB',
    '\x2', '\x112C', '\x112D', '\a', '\x3DA', '\x2', '\x2', '\x112D', '\x112F',
    '\x5', '\x194', '\xCB', '\x2', '\x112E', '\x112C', '\x3', '\x2', '\x2',
    '\x2', '\x112F', '\x1132', '\x3', '\x2', '\x2', '\x2', '\x1130', '\x112E',
    '\x3', '\x2', '\x2', '\x2', '\x1130', '\x1131', '\x3', '\x2', '\x2', '\x2',
    '\x1131', '\x1160', '\x3', '\x2', '\x2', '\x2', '\x1132', '\x1130', '\x3',
    '\x2', '\x2', '\x2', '\x1133', '\x1134', '\a', ' ', '\x2', '\x2', '\x1134',
    '\x1136', '\a', '\x231', '\x2', '\x2', '\x1135', '\x1137', '\x5', '\x244',
    '\x123', '\x2', '\x1136', '\x1135', '\x3', '\x2', '\x2', '\x2', '\x1136',
    '\x1137', '\x3', '\x2', '\x2', '\x2', '\x1137', '\x1138', '\x3', '\x2',
    '\x2', '\x2', '\x1138', '\x113D', '\x5', '\x194', '\xCB', '\x2', '\x1139',
    '\x113A', '\a', '\x3DA', '\x2', '\x2', '\x113A', '\x113C', '\x5', '\x194',
    '\xCB', '\x2', '\x113B', '\x1139', '\x3', '\x2', '\x2', '\x2', '\x113C',
    '\x113F', '\x3', '\x2', '\x2', '\x2', '\x113D', '\x113B', '\x3', '\x2',
    '\x2', '\x2', '\x113D', '\x113E', '\x3', '\x2', '\x2', '\x2', '\x113E',
    '\x114E', '\x3', '\x2', '\x2', '\x2', '\x113F', '\x113D', '\x3', '\x2',
    '\x2', '\x2', '\x1140', '\x114C', '\a', '\x82', '\x2', '\x2', '\x1141',
    '\x114D', '\a', '\x1B9', '\x2', '\x2', '\x1142', '\x1149', '\x5', '\x196',
    '\xCC', '\x2', '\x1143', '\x1145', '\a', '\f', '\x2', '\x2', '\x1144',
    '\x1143', '\x3', '\x2', '\x2', '\x2', '\x1144', '\x1145', '\x3', '\x2',
    '\x2', '\x2', '\x1145', '\x1146', '\x3', '\x2', '\x2', '\x2', '\x1146',
    '\x1148', '\x5', '\x196', '\xCC', '\x2', '\x1147', '\x1144', '\x3', '\x2',
    '\x2', '\x2', '\x1148', '\x114B', '\x3', '\x2', '\x2', '\x2', '\x1149',
    '\x1147', '\x3', '\x2', '\x2', '\x2', '\x1149', '\x114A', '\x3', '\x2',
    '\x2', '\x2', '\x114A', '\x114D', '\x3', '\x2', '\x2', '\x2', '\x114B',
    '\x1149', '\x3', '\x2', '\x2', '\x2', '\x114C', '\x1141', '\x3', '\x2',
    '\x2', '\x2', '\x114C', '\x1142', '\x3', '\x2', '\x2', '\x2', '\x114D',
    '\x114F', '\x3', '\x2', '\x2', '\x2', '\x114E', '\x1140', '\x3', '\x2',
    '\x2', '\x2', '\x114E', '\x114F', '\x3', '\x2', '\x2', '\x2', '\x114F',
    '\x1156', '\x3', '\x2', '\x2', '\x2', '\x1150', '\x1152', '\a', '\xB0',
    '\x2', '\x2', '\x1151', '\x1153', '\x5', '\x198', '\xCD', '\x2', '\x1152',
    '\x1151', '\x3', '\x2', '\x2', '\x2', '\x1153', '\x1154', '\x3', '\x2',
    '\x2', '\x2', '\x1154', '\x1152', '\x3', '\x2', '\x2', '\x2', '\x1154',
    '\x1155', '\x3', '\x2', '\x2', '\x2', '\x1155', '\x1157', '\x3', '\x2',
    '\x2', '\x2', '\x1156', '\x1150', '\x3', '\x2', '\x2', '\x2', '\x1156',
    '\x1157', '\x3', '\x2', '\x2', '\x2', '\x1157', '\x115C', '\x3', '\x2',
    '\x2', '\x2', '\x1158', '\x115B', '\x5', '\x19A', '\xCE', '\x2', '\x1159',
    '\x115B', '\x5', '\x19C', '\xCF', '\x2', '\x115A', '\x1158', '\x3', '\x2',
    '\x2', '\x2', '\x115A', '\x1159', '\x3', '\x2', '\x2', '\x2', '\x115B',
    '\x115E', '\x3', '\x2', '\x2', '\x2', '\x115C', '\x115A', '\x3', '\x2',
    '\x2', '\x2', '\x115C', '\x115D', '\x3', '\x2', '\x2', '\x2', '\x115D',
    '\x1160', '\x3', '\x2', '\x2', '\x2', '\x115E', '\x115C', '\x3', '\x2',
    '\x2', '\x2', '\x115F', '\x1129', '\x3', '\x2', '\x2', '\x2', '\x115F',
    '\x1133', '\x3', '\x2', '\x2', '\x2', '\x1160', '\x183', '\x3', '\x2',
    '\x2', '\x2', '\x1161', '\x1162', '\a', '\x31', '\x2', '\x2', '\x1162',
    '\x1164', '\a', '\x231', '\x2', '\x2', '\x1163', '\x1165', '\x5', '\x242',
    '\x122', '\x2', '\x1164', '\x1163', '\x3', '\x2', '\x2', '\x2', '\x1164',
    '\x1165', '\x3', '\x2', '\x2', '\x2', '\x1165', '\x1166', '\x3', '\x2',
    '\x2', '\x2', '\x1166', '\x116B', '\x5', '\x1FA', '\xFE', '\x2', '\x1167',
    '\x1168', '\a', '\x3DA', '\x2', '\x2', '\x1168', '\x116A', '\x5', '\x1FA',
    '\xFE', '\x2', '\x1169', '\x1167', '\x3', '\x2', '\x2', '\x2', '\x116A',
    '\x116D', '\x3', '\x2', '\x2', '\x2', '\x116B', '\x1169', '\x3', '\x2',
    '\x2', '\x2', '\x116B', '\x116C', '\x3', '\x2', '\x2', '\x2', '\x116C',
    '\x185', '\x3', '\x2', '\x2', '\x2', '\x116D', '\x116B', '\x3', '\x2',
    '\x2', '\x2', '\x116E', '\x116F', '\a', '\x43', '\x2', '\x2', '\x116F',
    '\x1174', '\x5', '\x19E', '\xD0', '\x2', '\x1170', '\x1171', '\a', '\x3DA',
    '\x2', '\x2', '\x1171', '\x1173', '\x5', '\x19E', '\xD0', '\x2', '\x1172',
    '\x1170', '\x3', '\x2', '\x2', '\x2', '\x1173', '\x1176', '\x3', '\x2',
    '\x2', '\x2', '\x1174', '\x1172', '\x3', '\x2', '\x2', '\x2', '\x1174',
    '\x1175', '\x3', '\x2', '\x2', '\x2', '\x1175', '\x1177', '\x3', '\x2',
    '\x2', '\x2', '\x1176', '\x1174', '\x3', '\x2', '\x2', '\x2', '\x1177',
    '\x1179', '\a', 'l', '\x2', '\x2', '\x1178', '\x117A', '\t', '<', '\x2',
    '\x2', '\x1179', '\x1178', '\x3', '\x2', '\x2', '\x2', '\x1179', '\x117A',
    '\x3', '\x2', '\x2', '\x2', '\x117A', '\x117B', '\x3', '\x2', '\x2', '\x2',
    '\x117B', '\x117C', '\x5', '\x1A2', '\xD2', '\x2', '\x117C', '\x117D',
    '\a', '\x9F', '\x2', '\x2', '\x117D', '\x1182', '\x5', '\x194', '\xCB',
    '\x2', '\x117E', '\x117F', '\a', '\x3DA', '\x2', '\x2', '\x117F', '\x1181',
    '\x5', '\x194', '\xCB', '\x2', '\x1180', '\x117E', '\x3', '\x2', '\x2',
    '\x2', '\x1181', '\x1184', '\x3', '\x2', '\x2', '\x2', '\x1182', '\x1180',
    '\x3', '\x2', '\x2', '\x2', '\x1182', '\x1183', '\x3', '\x2', '\x2', '\x2',
    '\x1183', '\x1193', '\x3', '\x2', '\x2', '\x2', '\x1184', '\x1182', '\x3',
    '\x2', '\x2', '\x2', '\x1185', '\x1191', '\a', '\x82', '\x2', '\x2', '\x1186',
    '\x1192', '\a', '\x1B9', '\x2', '\x2', '\x1187', '\x118E', '\x5', '\x196',
    '\xCC', '\x2', '\x1188', '\x118A', '\a', '\f', '\x2', '\x2', '\x1189',
    '\x1188', '\x3', '\x2', '\x2', '\x2', '\x1189', '\x118A', '\x3', '\x2',
    '\x2', '\x2', '\x118A', '\x118B', '\x3', '\x2', '\x2', '\x2', '\x118B',
    '\x118D', '\x5', '\x196', '\xCC', '\x2', '\x118C', '\x1189', '\x3', '\x2',
    '\x2', '\x2', '\x118D', '\x1190', '\x3', '\x2', '\x2', '\x2', '\x118E',
    '\x118C', '\x3', '\x2', '\x2', '\x2', '\x118E', '\x118F', '\x3', '\x2',
    '\x2', '\x2', '\x118F', '\x1192', '\x3', '\x2', '\x2', '\x2', '\x1190',
    '\x118E', '\x3', '\x2', '\x2', '\x2', '\x1191', '\x1186', '\x3', '\x2',
    '\x2', '\x2', '\x1191', '\x1187', '\x3', '\x2', '\x2', '\x2', '\x1192',
    '\x1194', '\x3', '\x2', '\x2', '\x2', '\x1193', '\x1185', '\x3', '\x2',
    '\x2', '\x2', '\x1193', '\x1194', '\x3', '\x2', '\x2', '\x2', '\x1194',
    '\x119E', '\x3', '\x2', '\x2', '\x2', '\x1195', '\x119B', '\a', '\xB0',
    '\x2', '\x2', '\x1196', '\x1197', '\a', '\x43', '\x2', '\x2', '\x1197',
    '\x119A', '\a', 'n', '\x2', '\x2', '\x1198', '\x119A', '\x5', '\x198',
    '\xCD', '\x2', '\x1199', '\x1196', '\x3', '\x2', '\x2', '\x2', '\x1199',
    '\x1198', '\x3', '\x2', '\x2', '\x2', '\x119A', '\x119D', '\x3', '\x2',
    '\x2', '\x2', '\x119B', '\x1199', '\x3', '\x2', '\x2', '\x2', '\x119B',
    '\x119C', '\x3', '\x2', '\x2', '\x2', '\x119C', '\x119F', '\x3', '\x2',
    '\x2', '\x2', '\x119D', '\x119B', '\x3', '\x2', '\x2', '\x2', '\x119E',
    '\x1195', '\x3', '\x2', '\x2', '\x2', '\x119E', '\x119F', '\x3', '\x2',
    '\x2', '\x2', '\x119F', '\x187', '\x3', '\x2', '\x2', '\x2', '\x11A0',
    '\x11A1', '\a', '\x43', '\x2', '\x2', '\x11A1', '\x11A2', '\a', '\x1D8',
    '\x2', '\x2', '\x11A2', '\x11A3', '\a', 'l', '\x2', '\x2', '\x11A3', '\x11A4',
    '\x5', '\x1FA', '\xFE', '\x2', '\x11A4', '\x11A5', '\a', '\x9F', '\x2',
    '\x2', '\x11A5', '\x11AA', '\x5', '\x1FA', '\xFE', '\x2', '\x11A6', '\x11A7',
    '\a', '\x3DA', '\x2', '\x2', '\x11A7', '\x11A9', '\x5', '\x1FA', '\xFE',
    '\x2', '\x11A8', '\x11A6', '\x3', '\x2', '\x2', '\x2', '\x11A9', '\x11AC',
    '\x3', '\x2', '\x2', '\x2', '\x11AA', '\x11A8', '\x3', '\x2', '\x2', '\x2',
    '\x11AA', '\x11AB', '\x3', '\x2', '\x2', '\x2', '\x11AB', '\x11B0', '\x3',
    '\x2', '\x2', '\x2', '\x11AC', '\x11AA', '\x3', '\x2', '\x2', '\x2', '\x11AD',
    '\x11AE', '\a', '\xB0', '\x2', '\x2', '\x11AE', '\x11AF', '\a', '\x43',
    '\x2', '\x2', '\x11AF', '\x11B1', '\a', 'n', '\x2', '\x2', '\x11B0', '\x11AD',
    '\x3', '\x2', '\x2', '\x2', '\x11B0', '\x11B1', '\x3', '\x2', '\x2', '\x2',
    '\x11B1', '\x189', '\x3', '\x2', '\x2', '\x2', '\x11B2', '\x11B3', '\a',
    '\x7F', '\x2', '\x2', '\x11B3', '\x11B4', '\a', '\x231', '\x2', '\x2',
    '\x11B4', '\x11B9', '\x5', '\x1A4', '\xD3', '\x2', '\x11B5', '\x11B6',
    '\a', '\x3DA', '\x2', '\x2', '\x11B6', '\x11B8', '\x5', '\x1A4', '\xD3',
    '\x2', '\x11B7', '\x11B5', '\x3', '\x2', '\x2', '\x2', '\x11B8', '\x11BB',
    '\x3', '\x2', '\x2', '\x2', '\x11B9', '\x11B7', '\x3', '\x2', '\x2', '\x2',
    '\x11B9', '\x11BA', '\x3', '\x2', '\x2', '\x2', '\x11BA', '\x18B', '\x3',
    '\x2', '\x2', '\x2', '\x11BB', '\x11B9', '\x3', '\x2', '\x2', '\x2', '\x11BC',
    '\x11BD', '\a', '\x86', '\x2', '\x2', '\x11BD', '\x11C2', '\x5', '\x19E',
    '\xD0', '\x2', '\x11BE', '\x11BF', '\a', '\x3DA', '\x2', '\x2', '\x11BF',
    '\x11C1', '\x5', '\x19E', '\xD0', '\x2', '\x11C0', '\x11BE', '\x3', '\x2',
    '\x2', '\x2', '\x11C1', '\x11C4', '\x3', '\x2', '\x2', '\x2', '\x11C2',
    '\x11C0', '\x3', '\x2', '\x2', '\x2', '\x11C2', '\x11C3', '\x3', '\x2',
    '\x2', '\x2', '\x11C3', '\x11C5', '\x3', '\x2', '\x2', '\x2', '\x11C4',
    '\x11C2', '\x3', '\x2', '\x2', '\x2', '\x11C5', '\x11C7', '\a', 'l', '\x2',
    '\x2', '\x11C6', '\x11C8', '\t', '<', '\x2', '\x2', '\x11C7', '\x11C6',
    '\x3', '\x2', '\x2', '\x2', '\x11C7', '\x11C8', '\x3', '\x2', '\x2', '\x2',
    '\x11C8', '\x11C9', '\x3', '\x2', '\x2', '\x2', '\x11C9', '\x11CA', '\x5',
    '\x1A2', '\xD2', '\x2', '\x11CA', '\x11CB', '\a', '?', '\x2', '\x2', '\x11CB',
    '\x11D0', '\x5', '\x1FA', '\xFE', '\x2', '\x11CC', '\x11CD', '\a', '\x3DA',
    '\x2', '\x2', '\x11CD', '\x11CF', '\x5', '\x1FA', '\xFE', '\x2', '\x11CE',
    '\x11CC', '\x3', '\x2', '\x2', '\x2', '\x11CF', '\x11D2', '\x3', '\x2',
    '\x2', '\x2', '\x11D0', '\x11CE', '\x3', '\x2', '\x2', '\x2', '\x11D0',
    '\x11D1', '\x3', '\x2', '\x2', '\x2', '\x11D1', '\x11E5', '\x3', '\x2',
    '\x2', '\x2', '\x11D2', '\x11D0', '\x3', '\x2', '\x2', '\x2', '\x11D3',
    '\x11D4', '\a', '\x86', '\x2', '\x2', '\x11D4', '\x11D6', '\a', '\b',
    '\x2', '\x2', '\x11D5', '\x11D7', '\a', '\x257', '\x2', '\x2', '\x11D6',
    '\x11D5', '\x3', '\x2', '\x2', '\x2', '\x11D6', '\x11D7', '\x3', '\x2',
    '\x2', '\x2', '\x11D7', '\x11D8', '\x3', '\x2', '\x2', '\x2', '\x11D8',
    '\x11D9', '\a', '\x3DA', '\x2', '\x2', '\x11D9', '\x11DA', '\a', '\x43',
    '\x2', '\x2', '\x11DA', '\x11DB', '\a', 'n', '\x2', '\x2', '\x11DB', '\x11DC',
    '\a', '?', '\x2', '\x2', '\x11DC', '\x11E1', '\x5', '\x1FA', '\xFE', '\x2',
    '\x11DD', '\x11DE', '\a', '\x3DA', '\x2', '\x2', '\x11DE', '\x11E0', '\x5',
    '\x1FA', '\xFE', '\x2', '\x11DF', '\x11DD', '\x3', '\x2', '\x2', '\x2',
    '\x11E0', '\x11E3', '\x3', '\x2', '\x2', '\x2', '\x11E1', '\x11DF', '\x3',
    '\x2', '\x2', '\x2', '\x11E1', '\x11E2', '\x3', '\x2', '\x2', '\x2', '\x11E2',
    '\x11E5', '\x3', '\x2', '\x2', '\x2', '\x11E3', '\x11E1', '\x3', '\x2',
    '\x2', '\x2', '\x11E4', '\x11BC', '\x3', '\x2', '\x2', '\x2', '\x11E4',
    '\x11D3', '\x3', '\x2', '\x2', '\x2', '\x11E5', '\x18D', '\x3', '\x2',
    '\x2', '\x2', '\x11E6', '\x11E7', '\a', '\x86', '\x2', '\x2', '\x11E7',
    '\x11E8', '\a', '\x1D8', '\x2', '\x2', '\x11E8', '\x11E9', '\a', 'l',
    '\x2', '\x2', '\x11E9', '\x11EA', '\x5', '\x1FA', '\xFE', '\x2', '\x11EA',
    '\x11EB', '\a', '?', '\x2', '\x2', '\x11EB', '\x11F0', '\x5', '\x1FA',
    '\xFE', '\x2', '\x11EC', '\x11ED', '\a', '\x3DA', '\x2', '\x2', '\x11ED',
    '\x11EF', '\x5', '\x1FA', '\xFE', '\x2', '\x11EE', '\x11EC', '\x3', '\x2',
    '\x2', '\x2', '\x11EF', '\x11F2', '\x3', '\x2', '\x2', '\x2', '\x11F0',
    '\x11EE', '\x3', '\x2', '\x2', '\x2', '\x11F0', '\x11F1', '\x3', '\x2',
    '\x2', '\x2', '\x11F1', '\x18F', '\x3', '\x2', '\x2', '\x2', '\x11F2',
    '\x11F0', '\x3', '\x2', '\x2', '\x2', '\x11F3', '\x11F4', '\a', '\x8C',
    '\x2', '\x2', '\x11F4', '\x11F7', '\a', '\x1CB', '\x2', '\x2', '\x11F5',
    '\x11F6', '\a', '<', '\x2', '\x2', '\x11F6', '\x11F8', '\x5', '\x1FA',
    '\xFE', '\x2', '\x11F7', '\x11F5', '\x3', '\x2', '\x2', '\x2', '\x11F7',
    '\x11F8', '\x3', '\x2', '\x2', '\x2', '\x11F8', '\x11F9', '\x3', '\x2',
    '\x2', '\x2', '\x11F9', '\x11FC', '\a', '\x3CF', '\x2', '\x2', '\x11FA',
    '\x11FD', '\x5', '\x254', '\x12B', '\x2', '\x11FB', '\x11FD', '\a', '\x3E7',
    '\x2', '\x2', '\x11FC', '\x11FA', '\x3', '\x2', '\x2', '\x2', '\x11FC',
    '\x11FB', '\x3', '\x2', '\x2', '\x2', '\x11FD', '\x191', '\x3', '\x2',
    '\x2', '\x2', '\x11FE', '\x11FF', '\x5', '\x1FA', '\xFE', '\x2', '\x11FF',
    '\x1200', '\x5', '\x19A', '\xCE', '\x2', '\x1200', '\x193', '\x3', '\x2',
    '\x2', '\x2', '\x1201', '\x1202', '\x5', '\x1FA', '\xFE', '\x2', '\x1202',
    '\x1203', '\a', '\x171', '\x2', '\x2', '\x1203', '\x1204', '\a', '\x12',
    '\x2', '\x2', '\x1204', '\x1205', '\a', '\x1CB', '\x2', '\x2', '\x1205',
    '\x1206', '\a', '\x3E7', '\x2', '\x2', '\x1206', '\x121A', '\x3', '\x2',
    '\x2', '\x2', '\x1207', '\x1208', '\x5', '\x1FA', '\xFE', '\x2', '\x1208',
    '\x120B', '\a', '\x171', '\x2', '\x2', '\x1209', '\x120A', '\a', '\xB0',
    '\x2', '\x2', '\x120A', '\x120C', '\x5', '\x20A', '\x106', '\x2', '\x120B',
    '\x1209', '\x3', '\x2', '\x2', '\x2', '\x120B', '\x120C', '\x3', '\x2',
    '\x2', '\x2', '\x120C', '\x120D', '\x3', '\x2', '\x2', '\x2', '\x120D',
    '\x120E', '\a', '\x12', '\x2', '\x2', '\x120E', '\x120F', '\a', '\x3E7',
    '\x2', '\x2', '\x120F', '\x121A', '\x3', '\x2', '\x2', '\x2', '\x1210',
    '\x1211', '\x5', '\x1FA', '\xFE', '\x2', '\x1211', '\x1212', '\a', '\x171',
    '\x2', '\x2', '\x1212', '\x1213', '\a', '\xB0', '\x2', '\x2', '\x1213',
    '\x1216', '\x5', '\x20A', '\x106', '\x2', '\x1214', '\x1215', '\a', '\r',
    '\x2', '\x2', '\x1215', '\x1217', '\a', '\x3E7', '\x2', '\x2', '\x1216',
    '\x1214', '\x3', '\x2', '\x2', '\x2', '\x1216', '\x1217', '\x3', '\x2',
    '\x2', '\x2', '\x1217', '\x121A', '\x3', '\x2', '\x2', '\x2', '\x1218',
    '\x121A', '\x5', '\x1FA', '\xFE', '\x2', '\x1219', '\x1201', '\x3', '\x2',
    '\x2', '\x2', '\x1219', '\x1207', '\x3', '\x2', '\x2', '\x2', '\x1219',
    '\x1210', '\x3', '\x2', '\x2', '\x2', '\x1219', '\x1218', '\x3', '\x2',
    '\x2', '\x2', '\x121A', '\x195', '\x3', '\x2', '\x2', '\x2', '\x121B',
    '\x1224', '\a', '\x98', '\x2', '\x2', '\x121C', '\x1224', '\a', '\x23F',
    '\x2', '\x2', '\x121D', '\x121E', '\a', '\x11F', '\x2', '\x2', '\x121E',
    '\x1224', '\a', '\x3E7', '\x2', '\x2', '\x121F', '\x1220', '\a', '\x180',
    '\x2', '\x2', '\x1220', '\x1224', '\a', '\x3E7', '\x2', '\x2', '\x1221',
    '\x1222', '\a', '\x21B', '\x2', '\x2', '\x1222', '\x1224', '\a', '\x3E7',
    '\x2', '\x2', '\x1223', '\x121B', '\x3', '\x2', '\x2', '\x2', '\x1223',
    '\x121C', '\x3', '\x2', '\x2', '\x2', '\x1223', '\x121D', '\x3', '\x2',
    '\x2', '\x2', '\x1223', '\x121F', '\x3', '\x2', '\x2', '\x2', '\x1223',
    '\x1221', '\x3', '\x2', '\x2', '\x2', '\x1224', '\x197', '\x3', '\x2',
    '\x2', '\x2', '\x1225', '\x1226', '\a', '\x1A2', '\x2', '\x2', '\x1226',
    '\x122E', '\x5', '\x212', '\x10A', '\x2', '\x1227', '\x1228', '\a', '\x1A5',
    '\x2', '\x2', '\x1228', '\x122E', '\x5', '\x212', '\x10A', '\x2', '\x1229',
    '\x122A', '\a', '\x1A1', '\x2', '\x2', '\x122A', '\x122E', '\x5', '\x212',
    '\x10A', '\x2', '\x122B', '\x122C', '\a', '\x1A6', '\x2', '\x2', '\x122C',
    '\x122E', '\x5', '\x212', '\x10A', '\x2', '\x122D', '\x1225', '\x3', '\x2',
    '\x2', '\x2', '\x122D', '\x1227', '\x3', '\x2', '\x2', '\x2', '\x122D',
    '\x1229', '\x3', '\x2', '\x2', '\x2', '\x122D', '\x122B', '\x3', '\x2',
    '\x2', '\x2', '\x122E', '\x199', '\x3', '\x2', '\x2', '\x2', '\x122F',
    '\x1230', '\a', '\x1CB', '\x2', '\x2', '\x1230', '\x1237', '\a', '\x158',
    '\x2', '\x2', '\x1231', '\x1238', '\a', '(', '\x2', '\x2', '\x1232', '\x1238',
    '\a', '\x1B5', '\x2', '\x2', '\x1233', '\x1234', '\a', 'O', '\x2', '\x2',
    '\x1234', '\x1235', '\x5', '\x212', '\x10A', '\x2', '\x1235', '\x1236',
    '\a', '\x249', '\x2', '\x2', '\x1236', '\x1238', '\x3', '\x2', '\x2',
    '\x2', '\x1237', '\x1231', '\x3', '\x2', '\x2', '\x2', '\x1237', '\x1232',
    '\x3', '\x2', '\x2', '\x2', '\x1237', '\x1233', '\x3', '\x2', '\x2', '\x2',
    '\x1237', '\x1238', '\x3', '\x2', '\x2', '\x2', '\x1238', '\x19B', '\x3',
    '\x2', '\x2', '\x2', '\x1239', '\x123A', '\a', '\x105', '\x2', '\x2',
    '\x123A', '\x123B', '\t', '=', '\x2', '\x2', '\x123B', '\x19D', '\x3',
    '\x2', '\x2', '\x2', '\x123C', '\x1241', '\x5', '\x1A0', '\xD1', '\x2',
    '\x123D', '\x123E', '\a', '\x3D8', '\x2', '\x2', '\x123E', '\x123F', '\x5',
    '\x22C', '\x117', '\x2', '\x123F', '\x1240', '\a', '\x3D9', '\x2', '\x2',
    '\x1240', '\x1242', '\x3', '\x2', '\x2', '\x2', '\x1241', '\x123D', '\x3',
    '\x2', '\x2', '\x2', '\x1241', '\x1242', '\x3', '\x2', '\x2', '\x2', '\x1242',
    '\x19F', '\x3', '\x2', '\x2', '\x2', '\x1243', '\x1245', '\a', '\b', '\x2',
    '\x2', '\x1244', '\x1246', '\a', '\x257', '\x2', '\x2', '\x1245', '\x1244',
    '\x3', '\x2', '\x2', '\x2', '\x1245', '\x1246', '\x3', '\x2', '\x2', '\x2',
    '\x1246', '\x126F', '\x3', '\x2', '\x2', '\x2', '\x1247', '\x1249', '\a',
    '\t', '\x2', '\x2', '\x1248', '\x124A', '\a', '\x250', '\x2', '\x2', '\x1249',
    '\x1248', '\x3', '\x2', '\x2', '\x2', '\x1249', '\x124A', '\x3', '\x2',
    '\x2', '\x2', '\x124A', '\x126F', '\x3', '\x2', '\x2', '\x2', '\x124B',
    '\x1252', '\a', ' ', '\x2', '\x2', '\x124C', '\x124D', '\a', '\x223',
    '\x2', '\x2', '\x124D', '\x1253', '\a', '\x24F', '\x2', '\x2', '\x124E',
    '\x1253', '\a', '\x250', '\x2', '\x2', '\x124F', '\x1253', '\a', '\x237',
    '\x2', '\x2', '\x1250', '\x1253', '\a', '\x231', '\x2', '\x2', '\x1251',
    '\x1253', '\a', '\x222', '\x2', '\x2', '\x1252', '\x124C', '\x3', '\x2',
    '\x2', '\x2', '\x1252', '\x124E', '\x3', '\x2', '\x2', '\x2', '\x1252',
    '\x124F', '\x3', '\x2', '\x2', '\x2', '\x1252', '\x1250', '\x3', '\x2',
    '\x2', '\x2', '\x1252', '\x1251', '\x3', '\x2', '\x2', '\x2', '\x1252',
    '\x1253', '\x3', '\x2', '\x2', '\x2', '\x1253', '\x126F', '\x3', '\x2',
    '\x2', '\x2', '\x1254', '\x126F', '\a', '*', '\x2', '\x2', '\x1255', '\x126F',
    '\a', '\x31', '\x2', '\x2', '\x1256', '\x126F', '\a', '\x153', '\x2',
    '\x2', '\x1257', '\x126F', '\a', '\x251', '\x2', '\x2', '\x1258', '\x126F',
    '\a', '\x252', '\x2', '\x2', '\x1259', '\x125A', '\a', '\x43', '\x2',
    '\x2', '\x125A', '\x126F', '\a', 'n', '\x2', '\x2', '\x125B', '\x126F',
    '\a', 'J', '\x2', '\x2', '\x125C', '\x126F', '\a', 'N', '\x2', '\x2',
    '\x125D', '\x125E', '\a', '_', '\x2', '\x2', '\x125E', '\x126F', '\a',
    '\x24F', '\x2', '\x2', '\x125F', '\x126F', '\a', '\x253', '\x2', '\x2',
    '\x1260', '\x126F', '\a', '\x1D8', '\x2', '\x2', '\x1261', '\x126F', '\a',
    '|', '\x2', '\x2', '\x1262', '\x126F', '\a', '\x254', '\x2', '\x2', '\x1263',
    '\x1264', '\a', '\x1ED', '\x2', '\x2', '\x1264', '\x126F', '\t', '>',
    '\x2', '\x2', '\x1265', '\x126F', '\a', '\x8B', '\x2', '\x2', '\x1266',
    '\x1267', '\a', '\x8E', '\x2', '\x2', '\x1267', '\x126F', '\t', '?', '\x2',
    '\x2', '\x1268', '\x126F', '\a', '\x255', '\x2', '\x2', '\x1269', '\x126F',
    '\a', '\x256', '\x2', '\x2', '\x126A', '\x126F', '\a', '\xA1', '\x2',
    '\x2', '\x126B', '\x126F', '\a', '\xA8', '\x2', '\x2', '\x126C', '\x126F',
    '\a', '\xA9', '\x2', '\x2', '\x126D', '\x126F', '\a', '\x258', '\x2',
    '\x2', '\x126E', '\x1243', '\x3', '\x2', '\x2', '\x2', '\x126E', '\x1247',
    '\x3', '\x2', '\x2', '\x2', '\x126E', '\x124B', '\x3', '\x2', '\x2', '\x2',
    '\x126E', '\x1254', '\x3', '\x2', '\x2', '\x2', '\x126E', '\x1255', '\x3',
    '\x2', '\x2', '\x2', '\x126E', '\x1256', '\x3', '\x2', '\x2', '\x2', '\x126E',
    '\x1257', '\x3', '\x2', '\x2', '\x2', '\x126E', '\x1258', '\x3', '\x2',
    '\x2', '\x2', '\x126E', '\x1259', '\x3', '\x2', '\x2', '\x2', '\x126E',
    '\x125B', '\x3', '\x2', '\x2', '\x2', '\x126E', '\x125C', '\x3', '\x2',
    '\x2', '\x2', '\x126E', '\x125D', '\x3', '\x2', '\x2', '\x2', '\x126E',
    '\x125F', '\x3', '\x2', '\x2', '\x2', '\x126E', '\x1260', '\x3', '\x2',
    '\x2', '\x2', '\x126E', '\x1261', '\x3', '\x2', '\x2', '\x2', '\x126E',
    '\x1262', '\x3', '\x2', '\x2', '\x2', '\x126E', '\x1263', '\x3', '\x2',
    '\x2', '\x2', '\x126E', '\x1265', '\x3', '\x2', '\x2', '\x2', '\x126E',
    '\x1266', '\x3', '\x2', '\x2', '\x2', '\x126E', '\x1268', '\x3', '\x2',
    '\x2', '\x2', '\x126E', '\x1269', '\x3', '\x2', '\x2', '\x2', '\x126E',
    '\x126A', '\x3', '\x2', '\x2', '\x2', '\x126E', '\x126B', '\x3', '\x2',
    '\x2', '\x2', '\x126E', '\x126C', '\x3', '\x2', '\x2', '\x2', '\x126E',
    '\x126D', '\x3', '\x2', '\x2', '\x2', '\x126F', '\x1A1', '\x3', '\x2',
    '\x2', '\x2', '\x1270', '\x1281', '\a', '\x3C7', '\x2', '\x2', '\x1271',
    '\x1272', '\a', '\x3C7', '\x2', '\x2', '\x1272', '\x1273', '\a', '\x3D7',
    '\x2', '\x2', '\x1273', '\x1281', '\a', '\x3C7', '\x2', '\x2', '\x1274',
    '\x1275', '\x5', '\x20C', '\x107', '\x2', '\x1275', '\x1276', '\a', '\x3D7',
    '\x2', '\x2', '\x1276', '\x1277', '\a', '\x3C7', '\x2', '\x2', '\x1277',
    '\x1281', '\x3', '\x2', '\x2', '\x2', '\x1278', '\x1279', '\x5', '\x20C',
    '\x107', '\x2', '\x1279', '\x127A', '\a', '\x3D7', '\x2', '\x2', '\x127A',
    '\x127B', '\x5', '\x20C', '\x107', '\x2', '\x127B', '\x1281', '\x3', '\x2',
    '\x2', '\x2', '\x127C', '\x127D', '\x5', '\x20C', '\x107', '\x2', '\x127D',
    '\x127E', '\x5', '\x210', '\x109', '\x2', '\x127E', '\x1281', '\x3', '\x2',
    '\x2', '\x2', '\x127F', '\x1281', '\x5', '\x20C', '\x107', '\x2', '\x1280',
    '\x1270', '\x3', '\x2', '\x2', '\x2', '\x1280', '\x1271', '\x3', '\x2',
    '\x2', '\x2', '\x1280', '\x1274', '\x3', '\x2', '\x2', '\x2', '\x1280',
    '\x1278', '\x3', '\x2', '\x2', '\x2', '\x1280', '\x127C', '\x3', '\x2',
    '\x2', '\x2', '\x1280', '\x127F', '\x3', '\x2', '\x2', '\x2', '\x1281',
    '\x1A3', '\x3', '\x2', '\x2', '\x2', '\x1282', '\x1283', '\x5', '\x1FA',
    '\xFE', '\x2', '\x1283', '\x1284', '\a', '\x9F', '\x2', '\x2', '\x1284',
    '\x1285', '\x5', '\x1FA', '\xFE', '\x2', '\x1285', '\x1A5', '\x3', '\x2',
    '\x2', '\x2', '\x1286', '\x1288', '\a', '\v', '\x2', '\x2', '\x1287',
    '\x1289', '\t', '@', '\x2', '\x2', '\x1288', '\x1287', '\x3', '\x2', '\x2',
    '\x2', '\x1288', '\x1289', '\x3', '\x2', '\x2', '\x2', '\x1289', '\x128A',
    '\x3', '\x2', '\x2', '\x2', '\x128A', '\x128B', '\a', '\x9C', '\x2', '\x2',
    '\x128B', '\x128C', '\x5', '\x22E', '\x118', '\x2', '\x128C', '\x1A7',
    '\x3', '\x2', '\x2', '\x2', '\x128D', '\x128E', '\a', '\x19', '\x2', '\x2',
    '\x128E', '\x128F', '\a', '\x9C', '\x2', '\x2', '\x128F', '\x1293', '\x5',
    '\x22E', '\x118', '\x2', '\x1290', '\x1292', '\x5', '\x1B0', '\xD9', '\x2',
    '\x1291', '\x1290', '\x3', '\x2', '\x2', '\x2', '\x1292', '\x1295', '\x3',
    '\x2', '\x2', '\x2', '\x1293', '\x1291', '\x3', '\x2', '\x2', '\x2', '\x1293',
    '\x1294', '\x3', '\x2', '\x2', '\x2', '\x1294', '\x1A9', '\x3', '\x2',
    '\x2', '\x2', '\x1295', '\x1293', '\x3', '\x2', '\x2', '\x2', '\x1296',
    '\x1297', '\a', '\x11D', '\x2', '\x2', '\x1297', '\x1298', '\a', '\x9C',
    '\x2', '\x2', '\x1298', '\x129A', '\x5', '\x22E', '\x118', '\x2', '\x1299',
    '\x129B', '\t', '\x41', '\x2', '\x2', '\x129A', '\x1299', '\x3', '\x2',
    '\x2', '\x2', '\x129A', '\x129B', '\x3', '\x2', '\x2', '\x2', '\x129B',
    '\x1AB', '\x3', '\x2', '\x2', '\x2', '\x129C', '\x129E', '\a', 'm', '\x2',
    '\x2', '\x129D', '\x129F', '\t', '@', '\x2', '\x2', '\x129E', '\x129D',
    '\x3', '\x2', '\x2', '\x2', '\x129E', '\x129F', '\x3', '\x2', '\x2', '\x2',
    '\x129F', '\x12A0', '\x3', '\x2', '\x2', '\x2', '\x12A0', '\x12A1', '\a',
    '\x9C', '\x2', '\x2', '\x12A1', '\x12A2', '\x5', '\x22E', '\x118', '\x2',
    '\x12A2', '\x1AD', '\x3', '\x2', '\x2', '\x2', '\x12A3', '\x12A5', '\a',
    '\x1E5', '\x2', '\x2', '\x12A4', '\x12A6', '\t', '@', '\x2', '\x2', '\x12A5',
    '\x12A4', '\x3', '\x2', '\x2', '\x2', '\x12A5', '\x12A6', '\x3', '\x2',
    '\x2', '\x2', '\x12A6', '\x12A7', '\x3', '\x2', '\x2', '\x2', '\x12A7',
    '\x12A8', '\a', '\x9C', '\x2', '\x2', '\x12A8', '\x12AA', '\x5', '\x22E',
    '\x118', '\x2', '\x12A9', '\x12AB', '\a', '\x1DA', '\x2', '\x2', '\x12AA',
    '\x12A9', '\x3', '\x2', '\x2', '\x2', '\x12AA', '\x12AB', '\x3', '\x2',
    '\x2', '\x2', '\x12AB', '\x12AD', '\x3', '\x2', '\x2', '\x2', '\x12AC',
    '\x12AE', '\a', '\x15A', '\x2', '\x2', '\x12AD', '\x12AC', '\x3', '\x2',
    '\x2', '\x2', '\x12AD', '\x12AE', '\x3', '\x2', '\x2', '\x2', '\x12AE',
    '\x12B0', '\x3', '\x2', '\x2', '\x2', '\x12AF', '\x12B1', '\a', '\x232',
    '\x2', '\x2', '\x12B0', '\x12AF', '\x3', '\x2', '\x2', '\x2', '\x12B0',
    '\x12B1', '\x3', '\x2', '\x2', '\x2', '\x12B1', '\x1AF', '\x3', '\x2',
    '\x2', '\x2', '\x12B2', '\x12B3', '\a', '<', '\x2', '\x2', '\x12B3', '\x12BA',
    '\a', '\x230', '\x2', '\x2', '\x12B4', '\x12BA', '\a', '\x1DA', '\x2',
    '\x2', '\x12B5', '\x12BA', '\a', '\x15C', '\x2', '\x2', '\x12B6', '\x12BA',
    '\a', '\x1A7', '\x2', '\x2', '\x12B7', '\x12BA', '\a', '\x15A', '\x2',
    '\x2', '\x12B8', '\x12BA', '\a', '\x11B', '\x2', '\x2', '\x12B9', '\x12B2',
    '\x3', '\x2', '\x2', '\x2', '\x12B9', '\x12B4', '\x3', '\x2', '\x2', '\x2',
    '\x12B9', '\x12B5', '\x3', '\x2', '\x2', '\x2', '\x12B9', '\x12B6', '\x3',
    '\x2', '\x2', '\x2', '\x12B9', '\x12B7', '\x3', '\x2', '\x2', '\x2', '\x12B9',
    '\x12B8', '\x3', '\x2', '\x2', '\x2', '\x12BA', '\x1B1', '\x3', '\x2',
    '\x2', '\x2', '\x12BB', '\x12BD', '\a', ' ', '\x2', '\x2', '\x12BC', '\x12BE',
    '\a', '\x108', '\x2', '\x2', '\x12BD', '\x12BC', '\x3', '\x2', '\x2',
    '\x2', '\x12BD', '\x12BE', '\x3', '\x2', '\x2', '\x2', '\x12BE', '\x12BF',
    '\x3', '\x2', '\x2', '\x2', '\x12BF', '\x12C0', '\a', '\x167', '\x2',
    '\x2', '\x12C0', '\x12C1', '\x5', '\x20C', '\x107', '\x2', '\x12C1', '\x12C2',
    '\a', '\x1F1', '\x2', '\x2', '\x12C2', '\x12C3', '\t', '\x42', '\x2',
    '\x2', '\x12C3', '\x12C4', '\a', '\x206', '\x2', '\x2', '\x12C4', '\x12C5',
    '\a', '\x3E7', '\x2', '\x2', '\x12C5', '\x1B3', '\x3', '\x2', '\x2', '\x2',
    '\x12C6', '\x12C7', '\a', '\x178', '\x2', '\x2', '\x12C7', '\x12C8', '\a',
    '\x1CD', '\x2', '\x2', '\x12C8', '\x12C9', '\x5', '\x20C', '\x107', '\x2',
    '\x12C9', '\x12CA', '\a', '\x206', '\x2', '\x2', '\x12CA', '\x12CB', '\a',
    '\x3E7', '\x2', '\x2', '\x12CB', '\x1B5', '\x3', '\x2', '\x2', '\x2',
    '\x12CC', '\x12CD', '\a', '\x22D', '\x2', '\x2', '\x12CD', '\x12CE', '\a',
    '\x1CD', '\x2', '\x2', '\x12CE', '\x12CF', '\x5', '\x20C', '\x107', '\x2',
    '\x12CF', '\x1B7', '\x3', '\x2', '\x2', '\x2', '\x12D0', '\x12D1', '\a',
    '\x8C', '\x2', '\x2', '\x12D1', '\x12D2', '\x5', '\x1BC', '\xDF', '\x2',
    '\x12D2', '\x12D3', '\t', '\x43', '\x2', '\x2', '\x12D3', '\x12DB', '\x5',
    '\x25A', '\x12E', '\x2', '\x12D4', '\x12D5', '\a', '\x3DA', '\x2', '\x2',
    '\x12D5', '\x12D6', '\x5', '\x1BC', '\xDF', '\x2', '\x12D6', '\x12D7',
    '\t', '\x43', '\x2', '\x2', '\x12D7', '\x12D8', '\x5', '\x25A', '\x12E',
    '\x2', '\x12D8', '\x12DA', '\x3', '\x2', '\x2', '\x2', '\x12D9', '\x12D4',
    '\x3', '\x2', '\x2', '\x2', '\x12DA', '\x12DD', '\x3', '\x2', '\x2', '\x2',
    '\x12DB', '\x12D9', '\x3', '\x2', '\x2', '\x2', '\x12DB', '\x12DC', '\x3',
    '\x2', '\x2', '\x2', '\x12DC', '\x12FB', '\x3', '\x2', '\x2', '\x2', '\x12DD',
    '\x12DB', '\x3', '\x2', '\x2', '\x2', '\x12DE', '\x12E2', '\a', '\x8C',
    '\x2', '\x2', '\x12DF', '\x12E0', '\a', '\x18', '\x2', '\x2', '\x12E0',
    '\x12E3', '\a', '\x8C', '\x2', '\x2', '\x12E1', '\x12E3', '\a', '\x2B7',
    '\x2', '\x2', '\x12E2', '\x12DF', '\x3', '\x2', '\x2', '\x2', '\x12E2',
    '\x12E1', '\x3', '\x2', '\x2', '\x2', '\x12E3', '\x12E6', '\x3', '\x2',
    '\x2', '\x2', '\x12E4', '\x12E7', '\x5', '\x1FE', '\x100', '\x2', '\x12E5',
    '\x12E7', '\a', '(', '\x2', '\x2', '\x12E6', '\x12E4', '\x3', '\x2', '\x2',
    '\x2', '\x12E6', '\x12E5', '\x3', '\x2', '\x2', '\x2', '\x12E7', '\x12FB',
    '\x3', '\x2', '\x2', '\x2', '\x12E8', '\x12E9', '\a', '\x8C', '\x2', '\x2',
    '\x12E9', '\x12F0', '\a', '\x1B3', '\x2', '\x2', '\x12EA', '\x12ED', '\x5',
    '\x1FE', '\x100', '\x2', '\x12EB', '\x12EC', '\a', '\x1A', '\x2', '\x2',
    '\x12EC', '\x12EE', '\x5', '\x200', '\x101', '\x2', '\x12ED', '\x12EB',
    '\x3', '\x2', '\x2', '\x2', '\x12ED', '\x12EE', '\x3', '\x2', '\x2', '\x2',
    '\x12EE', '\x12F1', '\x3', '\x2', '\x2', '\x2', '\x12EF', '\x12F1', '\a',
    '(', '\x2', '\x2', '\x12F0', '\x12EA', '\x3', '\x2', '\x2', '\x2', '\x12F0',
    '\x12EF', '\x3', '\x2', '\x2', '\x2', '\x12F1', '\x12FB', '\x3', '\x2',
    '\x2', '\x2', '\x12F2', '\x12FB', '\x5', '\x190', '\xC9', '\x2', '\x12F3',
    '\x12FB', '\x5', '\x114', '\x8B', '\x2', '\x12F4', '\x12FB', '\x5', '\x112',
    '\x8A', '\x2', '\x12F5', '\x12F6', '\a', '\x8C', '\x2', '\x2', '\x12F6',
    '\x12F7', '\x5', '\x1F2', '\xFA', '\x2', '\x12F7', '\x12F8', '\t', '\x43',
    '\x2', '\x2', '\x12F8', '\x12F9', '\x5', '\x25A', '\x12E', '\x2', '\x12F9',
    '\x12FB', '\x3', '\x2', '\x2', '\x2', '\x12FA', '\x12D0', '\x3', '\x2',
    '\x2', '\x2', '\x12FA', '\x12DE', '\x3', '\x2', '\x2', '\x2', '\x12FA',
    '\x12E8', '\x3', '\x2', '\x2', '\x2', '\x12FA', '\x12F2', '\x3', '\x2',
    '\x2', '\x2', '\x12FA', '\x12F3', '\x3', '\x2', '\x2', '\x2', '\x12FA',
    '\x12F4', '\x3', '\x2', '\x2', '\x2', '\x12FA', '\x12F5', '\x3', '\x2',
    '\x2', '\x2', '\x12FB', '\x1B9', '\x3', '\x2', '\x2', '\x2', '\x12FC',
    '\x12FD', '\a', '\x8E', '\x2', '\x2', '\x12FD', '\x12FE', '\t', '\x32',
    '\x2', '\x2', '\x12FE', '\x1394', '\a', '\x18B', '\x2', '\x2', '\x12FF',
    '\x1300', '\a', '\x8E', '\x2', '\x2', '\x1300', '\x1301', '\t', '\x44',
    '\x2', '\x2', '\x1301', '\x1304', '\a', '\x154', '\x2', '\x2', '\x1302',
    '\x1303', '\a', 'I', '\x2', '\x2', '\x1303', '\x1305', '\a', '\x3E7',
    '\x2', '\x2', '\x1304', '\x1302', '\x3', '\x2', '\x2', '\x2', '\x1304',
    '\x1305', '\x3', '\x2', '\x2', '\x2', '\x1305', '\x1308', '\x3', '\x2',
    '\x2', '\x2', '\x1306', '\x1307', '\a', '?', '\x2', '\x2', '\x1307', '\x1309',
    '\x5', '\x212', '\x10A', '\x2', '\x1308', '\x1306', '\x3', '\x2', '\x2',
    '\x2', '\x1308', '\x1309', '\x3', '\x2', '\x2', '\x2', '\x1309', '\x1311',
    '\x3', '\x2', '\x2', '\x2', '\x130A', '\x130E', '\a', '[', '\x2', '\x2',
    '\x130B', '\x130C', '\x5', '\x212', '\x10A', '\x2', '\x130C', '\x130D',
    '\a', '\x3DA', '\x2', '\x2', '\x130D', '\x130F', '\x3', '\x2', '\x2',
    '\x2', '\x130E', '\x130B', '\x3', '\x2', '\x2', '\x2', '\x130E', '\x130F',
    '\x3', '\x2', '\x2', '\x2', '\x130F', '\x1310', '\x3', '\x2', '\x2', '\x2',
    '\x1310', '\x1312', '\x5', '\x212', '\x10A', '\x2', '\x1311', '\x130A',
    '\x3', '\x2', '\x2', '\x2', '\x1311', '\x1312', '\x3', '\x2', '\x2', '\x2',
    '\x1312', '\x1394', '\x3', '\x2', '\x2', '\x2', '\x1313', '\x1314', '\a',
    '\x8E', '\x2', '\x2', '\x1314', '\x1316', '\x5', '\x1BE', '\xE0', '\x2',
    '\x1315', '\x1317', '\x5', '\x1C0', '\xE1', '\x2', '\x1316', '\x1315',
    '\x3', '\x2', '\x2', '\x2', '\x1316', '\x1317', '\x3', '\x2', '\x2', '\x2',
    '\x1317', '\x1394', '\x3', '\x2', '\x2', '\x2', '\x1318', '\x131A', '\a',
    '\x8E', '\x2', '\x2', '\x1319', '\x131B', '\a', '\x166', '\x2', '\x2',
    '\x131A', '\x1319', '\x3', '\x2', '\x2', '\x2', '\x131A', '\x131B', '\x3',
    '\x2', '\x2', '\x2', '\x131B', '\x131C', '\x3', '\x2', '\x2', '\x2', '\x131C',
    '\x131D', '\t', '$', '\x2', '\x2', '\x131D', '\x131E', '\t', '\x45', '\x2',
    '\x2', '\x131E', '\x1321', '\x5', '\x1F4', '\xFB', '\x2', '\x131F', '\x1320',
    '\t', '\x45', '\x2', '\x2', '\x1320', '\x1322', '\x5', '\x20C', '\x107',
    '\x2', '\x1321', '\x131F', '\x3', '\x2', '\x2', '\x2', '\x1321', '\x1322',
    '\x3', '\x2', '\x2', '\x2', '\x1322', '\x1324', '\x3', '\x2', '\x2', '\x2',
    '\x1323', '\x1325', '\x5', '\x1C0', '\xE1', '\x2', '\x1324', '\x1323',
    '\x3', '\x2', '\x2', '\x2', '\x1324', '\x1325', '\x3', '\x2', '\x2', '\x2',
    '\x1325', '\x1394', '\x3', '\x2', '\x2', '\x2', '\x1326', '\x1327', '\a',
    '\x8E', '\x2', '\x2', '\x1327', '\x1328', '\a', ' ', '\x2', '\x2', '\x1328',
    '\x132A', '\t', '\x2', '\x2', '\x2', '\x1329', '\x132B', '\x5', '\x244',
    '\x123', '\x2', '\x132A', '\x1329', '\x3', '\x2', '\x2', '\x2', '\x132A',
    '\x132B', '\x3', '\x2', '\x2', '\x2', '\x132B', '\x132C', '\x3', '\x2',
    '\x2', '\x2', '\x132C', '\x1394', '\x5', '\x20C', '\x107', '\x2', '\x132D',
    '\x132E', '\a', '\x8E', '\x2', '\x2', '\x132E', '\x132F', '\a', ' ', '\x2',
    '\x2', '\x132F', '\x1330', '\t', '\x46', '\x2', '\x2', '\x1330', '\x1394',
    '\x5', '\x1F2', '\xFA', '\x2', '\x1331', '\x1332', '\a', '\x8E', '\x2',
    '\x2', '\x1332', '\x1333', '\a', ' ', '\x2', '\x2', '\x1333', '\x1334',
    '\a', '\x231', '\x2', '\x2', '\x1334', '\x1394', '\x5', '\x1FA', '\xFE',
    '\x2', '\x1335', '\x1336', '\a', '\x8E', '\x2', '\x2', '\x1336', '\x1337',
    '\a', '\x14D', '\x2', '\x2', '\x1337', '\x1338', '\x5', '\x202', '\x102',
    '\x2', '\x1338', '\x1339', '\t', 'G', '\x2', '\x2', '\x1339', '\x1394',
    '\x3', '\x2', '\x2', '\x2', '\x133A', '\x133B', '\a', '\x8E', '\x2', '\x2',
    '\x133B', '\x1394', '\x5', '\x1C2', '\xE2', '\x2', '\x133C', '\x133D',
    '\a', '\x8E', '\x2', '\x2', '\x133D', '\x133E', '\t', 'H', '\x2', '\x2',
    '\x133E', '\x1342', '\a', '[', '\x2', '\x2', '\x133F', '\x1340', '\x5',
    '\x212', '\x10A', '\x2', '\x1340', '\x1341', '\a', '\x3DA', '\x2', '\x2',
    '\x1341', '\x1343', '\x3', '\x2', '\x2', '\x2', '\x1342', '\x133F', '\x3',
    '\x2', '\x2', '\x2', '\x1342', '\x1343', '\x3', '\x2', '\x2', '\x2', '\x1343',
    '\x1344', '\x3', '\x2', '\x2', '\x2', '\x1344', '\x1394', '\x5', '\x212',
    '\x10A', '\x2', '\x1345', '\x1346', '\a', '\x8E', '\x2', '\x2', '\x1346',
    '\x1347', '\a', '\xE6', '\x2', '\x2', '\x1347', '\x1348', '\a', '\x3D8',
    '\x2', '\x2', '\x1348', '\x1349', '\a', '\x3C7', '\x2', '\x2', '\x1349',
    '\x134A', '\a', '\x3D9', '\x2', '\x2', '\x134A', '\x1394', '\t', 'H',
    '\x2', '\x2', '\x134B', '\x134C', '\a', '\x8E', '\x2', '\x2', '\x134C',
    '\x134F', '\x5', '\x1C4', '\xE3', '\x2', '\x134D', '\x134E', '\t', '\x45',
    '\x2', '\x2', '\x134E', '\x1350', '\x5', '\x20C', '\x107', '\x2', '\x134F',
    '\x134D', '\x3', '\x2', '\x2', '\x2', '\x134F', '\x1350', '\x3', '\x2',
    '\x2', '\x2', '\x1350', '\x1352', '\x3', '\x2', '\x2', '\x2', '\x1351',
    '\x1353', '\x5', '\x1C0', '\xE1', '\x2', '\x1352', '\x1351', '\x3', '\x2',
    '\x2', '\x2', '\x1352', '\x1353', '\x3', '\x2', '\x2', '\x2', '\x1353',
    '\x1394', '\x3', '\x2', '\x2', '\x2', '\x1354', '\x1355', '\a', '\x8E',
    '\x2', '\x2', '\x1355', '\x1356', '\t', 'I', '\x2', '\x2', '\x1356', '\x1357',
    '\a', '\x124', '\x2', '\x2', '\x1357', '\x1394', '\x5', '\x1F2', '\xFA',
    '\x2', '\x1358', '\x1359', '\a', '\x8E', '\x2', '\x2', '\x1359', '\x135C',
    '\a', '\x16A', '\x2', '\x2', '\x135A', '\x135B', '\a', '<', '\x2', '\x2',
    '\x135B', '\x135D', '\x5', '\x1FA', '\xFE', '\x2', '\x135C', '\x135A',
    '\x3', '\x2', '\x2', '\x2', '\x135C', '\x135D', '\x3', '\x2', '\x2', '\x2',
    '\x135D', '\x1394', '\x3', '\x2', '\x2', '\x2', '\x135E', '\x135F', '\a',
    '\x8E', '\x2', '\x2', '\x135F', '\x1360', '\t', 'J', '\x2', '\x2', '\x1360',
    '\x1361', '\t', '\x45', '\x2', '\x2', '\x1361', '\x1364', '\x5', '\x1F4',
    '\xFB', '\x2', '\x1362', '\x1363', '\t', '\x45', '\x2', '\x2', '\x1363',
    '\x1365', '\x5', '\x20C', '\x107', '\x2', '\x1364', '\x1362', '\x3', '\x2',
    '\x2', '\x2', '\x1364', '\x1365', '\x3', '\x2', '\x2', '\x2', '\x1365',
    '\x1368', '\x3', '\x2', '\x2', '\x2', '\x1366', '\x1367', '\a', '\xAE',
    '\x2', '\x2', '\x1367', '\x1369', '\x5', '\x25A', '\x12E', '\x2', '\x1368',
    '\x1366', '\x3', '\x2', '\x2', '\x2', '\x1368', '\x1369', '\x3', '\x2',
    '\x2', '\x2', '\x1369', '\x1394', '\x3', '\x2', '\x2', '\x2', '\x136A',
    '\x136B', '\a', '\x8E', '\x2', '\x2', '\x136B', '\x136C', '\a', '\x1C1',
    '\x2', '\x2', '\x136C', '\x136F', '\a', '\x24F', '\x2', '\x2', '\x136D',
    '\x136E', '\t', '\x45', '\x2', '\x2', '\x136E', '\x1370', '\x5', '\x20C',
    '\x107', '\x2', '\x136F', '\x136D', '\x3', '\x2', '\x2', '\x2', '\x136F',
    '\x1370', '\x3', '\x2', '\x2', '\x2', '\x1370', '\x1372', '\x3', '\x2',
    '\x2', '\x2', '\x1371', '\x1373', '\x5', '\x1C0', '\xE1', '\x2', '\x1372',
    '\x1371', '\x3', '\x2', '\x2', '\x2', '\x1372', '\x1373', '\x3', '\x2',
    '\x2', '\x2', '\x1373', '\x1394', '\x3', '\x2', '\x2', '\x2', '\x1374',
    '\x1375', '\a', '\x8E', '\x2', '\x2', '\x1375', '\x1376', '\a', '\x1D6',
    '\x2', '\x2', '\x1376', '\x137B', '\x5', '\x1C6', '\xE4', '\x2', '\x1377',
    '\x1378', '\a', '\x3DA', '\x2', '\x2', '\x1378', '\x137A', '\x5', '\x1C6',
    '\xE4', '\x2', '\x1379', '\x1377', '\x3', '\x2', '\x2', '\x2', '\x137A',
    '\x137D', '\x3', '\x2', '\x2', '\x2', '\x137B', '\x1379', '\x3', '\x2',
    '\x2', '\x2', '\x137B', '\x137C', '\x3', '\x2', '\x2', '\x2', '\x137C',
    '\x1381', '\x3', '\x2', '\x2', '\x2', '\x137D', '\x137B', '\x3', '\x2',
    '\x2', '\x2', '\x137E', '\x137F', '\a', '<', '\x2', '\x2', '\x137F', '\x1380',
    '\a', '\x1D9', '\x2', '\x2', '\x1380', '\x1382', '\x5', '\x212', '\x10A',
    '\x2', '\x1381', '\x137E', '\x3', '\x2', '\x2', '\x2', '\x1381', '\x1382',
    '\x3', '\x2', '\x2', '\x2', '\x1382', '\x1383', '\x3', '\x2', '\x2', '\x2',
    '\x1383', '\x1387', '\a', '[', '\x2', '\x2', '\x1384', '\x1385', '\x5',
    '\x212', '\x10A', '\x2', '\x1385', '\x1386', '\a', '\x3DA', '\x2', '\x2',
    '\x1386', '\x1388', '\x3', '\x2', '\x2', '\x2', '\x1387', '\x1384', '\x3',
    '\x2', '\x2', '\x2', '\x1387', '\x1388', '\x3', '\x2', '\x2', '\x2', '\x1388',
    '\x1389', '\x3', '\x2', '\x2', '\x2', '\x1389', '\x138A', '\x5', '\x212',
    '\x10A', '\x2', '\x138A', '\x1394', '\x3', '\x2', '\x2', '\x2', '\x138B',
    '\x138C', '\a', '\x8E', '\x2', '\x2', '\x138C', '\x138D', '\a', '\x201',
    '\x2', '\x2', '\x138D', '\x1391', '\a', '\x215', '\x2', '\x2', '\x138E',
    '\x138F', '\a', '<', '\x2', '\x2', '\x138F', '\x1390', '\a', '\x11C',
    '\x2', '\x2', '\x1390', '\x1392', '\a', '\x3E7', '\x2', '\x2', '\x1391',
    '\x138E', '\x3', '\x2', '\x2', '\x2', '\x1391', '\x1392', '\x3', '\x2',
    '\x2', '\x2', '\x1392', '\x1394', '\x3', '\x2', '\x2', '\x2', '\x1393',
    '\x12FC', '\x3', '\x2', '\x2', '\x2', '\x1393', '\x12FF', '\x3', '\x2',
    '\x2', '\x2', '\x1393', '\x1313', '\x3', '\x2', '\x2', '\x2', '\x1393',
    '\x1318', '\x3', '\x2', '\x2', '\x2', '\x1393', '\x1326', '\x3', '\x2',
    '\x2', '\x2', '\x1393', '\x132D', '\x3', '\x2', '\x2', '\x2', '\x1393',
    '\x1331', '\x3', '\x2', '\x2', '\x2', '\x1393', '\x1335', '\x3', '\x2',
    '\x2', '\x2', '\x1393', '\x133A', '\x3', '\x2', '\x2', '\x2', '\x1393',
    '\x133C', '\x3', '\x2', '\x2', '\x2', '\x1393', '\x1345', '\x3', '\x2',
    '\x2', '\x2', '\x1393', '\x134B', '\x3', '\x2', '\x2', '\x2', '\x1393',
    '\x1354', '\x3', '\x2', '\x2', '\x2', '\x1393', '\x1358', '\x3', '\x2',
    '\x2', '\x2', '\x1393', '\x135E', '\x3', '\x2', '\x2', '\x2', '\x1393',
    '\x136A', '\x3', '\x2', '\x2', '\x2', '\x1393', '\x1374', '\x3', '\x2',
    '\x2', '\x2', '\x1393', '\x138B', '\x3', '\x2', '\x2', '\x2', '\x1394',
    '\x1BB', '\x3', '\x2', '\x2', '\x2', '\x1395', '\x13A0', '\a', '\x3F2',
    '\x2', '\x2', '\x1396', '\x13A0', '\a', '\x3F3', '\x2', '\x2', '\x1397',
    '\x1398', '\a', '\x3DC', '\x2', '\x2', '\x1398', '\x139A', '\a', '\x3DC',
    '\x2', '\x2', '\x1399', '\x1397', '\x3', '\x2', '\x2', '\x2', '\x1399',
    '\x139A', '\x3', '\x2', '\x2', '\x2', '\x139A', '\x139B', '\x3', '\x2',
    '\x2', '\x2', '\x139B', '\x139D', '\t', 'K', '\x2', '\x2', '\x139C', '\x1399',
    '\x3', '\x2', '\x2', '\x2', '\x139C', '\x139D', '\x3', '\x2', '\x2', '\x2',
    '\x139D', '\x139E', '\x3', '\x2', '\x2', '\x2', '\x139E', '\x13A0', '\x5',
    '\x20C', '\x107', '\x2', '\x139F', '\x1395', '\x3', '\x2', '\x2', '\x2',
    '\x139F', '\x1396', '\x3', '\x2', '\x2', '\x2', '\x139F', '\x139C', '\x3',
    '\x2', '\x2', '\x2', '\x13A0', '\x1BD', '\x3', '\x2', '\x2', '\x2', '\x13A1',
    '\x13A2', '\a', '\x18', '\x2', '\x2', '\x13A2', '\x13AF', '\a', '\x8C',
    '\x2', '\x2', '\x13A3', '\x13AF', '\a', '\x2BA', '\x2', '\x2', '\x13A4',
    '\x13AF', '\a', '&', '\x2', '\x2', '\x13A5', '\x13AF', '\a', '\x8A', '\x2',
    '\x2', '\x13A6', '\x13A7', '\a', '\x167', '\x2', '\x2', '\x13A7', '\x13AF',
    '\a', '\x215', '\x2', '\x2', '\x13A8', '\x13A9', '\a', 'w', '\x2', '\x2',
    '\x13A9', '\x13AF', '\a', '\x215', '\x2', '\x2', '\x13AA', '\x13AC', '\t',
    '\x31', '\x2', '\x2', '\x13AB', '\x13AA', '\x3', '\x2', '\x2', '\x2',
    '\x13AB', '\x13AC', '\x3', '\x2', '\x2', '\x2', '\x13AC', '\x13AD', '\x3',
    '\x2', '\x2', '\x2', '\x13AD', '\x13AF', '\t', 'L', '\x2', '\x2', '\x13AE',
    '\x13A1', '\x3', '\x2', '\x2', '\x2', '\x13AE', '\x13A3', '\x3', '\x2',
    '\x2', '\x2', '\x13AE', '\x13A4', '\x3', '\x2', '\x2', '\x2', '\x13AE',
    '\x13A5', '\x3', '\x2', '\x2', '\x2', '\x13AE', '\x13A6', '\x3', '\x2',
    '\x2', '\x2', '\x13AE', '\x13A8', '\x3', '\x2', '\x2', '\x2', '\x13AE',
    '\x13AB', '\x3', '\x2', '\x2', '\x2', '\x13AF', '\x1BF', '\x3', '\x2',
    '\x2', '\x2', '\x13B0', '\x13B1', '\a', 'Z', '\x2', '\x2', '\x13B1', '\x13B5',
    '\a', '\x3E7', '\x2', '\x2', '\x13B2', '\x13B3', '\a', '\xAE', '\x2',
    '\x2', '\x13B3', '\x13B5', '\x5', '\x25A', '\x12E', '\x2', '\x13B4', '\x13B0',
    '\x3', '\x2', '\x2', '\x2', '\x13B4', '\x13B2', '\x3', '\x2', '\x2', '\x2',
    '\x13B5', '\x1C1', '\x3', '\x2', '\x2', '\x2', '\x13B6', '\x13B8', '\a',
    '\x217', '\x2', '\x2', '\x13B7', '\x13B6', '\x3', '\x2', '\x2', '\x2',
    '\x13B7', '\x13B8', '\x3', '\x2', '\x2', '\x2', '\x13B8', '\x13B9', '\x3',
    '\x2', '\x2', '\x2', '\x13B9', '\x13C8', '\a', '\x14E', '\x2', '\x2',
    '\x13BA', '\x13BB', '\a', '\x18C', '\x2', '\x2', '\x13BB', '\x13C8', '\a',
    '\x215', '\x2', '\x2', '\x13BC', '\x13C8', '\a', '\x1CF', '\x2', '\x2',
    '\x13BD', '\x13C8', '\a', '\x257', '\x2', '\x2', '\x13BE', '\x13C0', '\a',
    '\x166', '\x2', '\x2', '\x13BF', '\x13BE', '\x3', '\x2', '\x2', '\x2',
    '\x13BF', '\x13C0', '\x3', '\x2', '\x2', '\x2', '\x13C0', '\x13C1', '\x3',
    '\x2', '\x2', '\x2', '\x13C1', '\x13C8', '\a', '\x1D5', '\x2', '\x2',
    '\x13C2', '\x13C8', '\a', '\x1D7', '\x2', '\x2', '\x13C3', '\x13C4', '\a',
    '\x201', '\x2', '\x2', '\x13C4', '\x13C8', '\a', '\x170', '\x2', '\x2',
    '\x13C5', '\x13C8', '\a', '\x10C', '\x2', '\x2', '\x13C6', '\x13C8', '\a',
    '\x136', '\x2', '\x2', '\x13C7', '\x13B7', '\x3', '\x2', '\x2', '\x2',
    '\x13C7', '\x13BA', '\x3', '\x2', '\x2', '\x2', '\x13C7', '\x13BC', '\x3',
    '\x2', '\x2', '\x2', '\x13C7', '\x13BD', '\x3', '\x2', '\x2', '\x2', '\x13C7',
    '\x13BF', '\x3', '\x2', '\x2', '\x2', '\x13C7', '\x13C2', '\x3', '\x2',
    '\x2', '\x2', '\x13C7', '\x13C3', '\x3', '\x2', '\x2', '\x2', '\x13C7',
    '\x13C5', '\x3', '\x2', '\x2', '\x2', '\x13C7', '\x13C6', '\x3', '\x2',
    '\x2', '\x2', '\x13C8', '\x1C3', '\x3', '\x2', '\x2', '\x2', '\x13C9',
    '\x13D2', '\a', '\x154', '\x2', '\x2', '\x13CA', '\x13CB', '\a', '\x9C',
    '\x2', '\x2', '\x13CB', '\x13D2', '\a', '\x215', '\x2', '\x2', '\x13CC',
    '\x13CE', '\a', '\x166', '\x2', '\x2', '\x13CD', '\x13CC', '\x3', '\x2',
    '\x2', '\x2', '\x13CD', '\x13CE', '\x3', '\x2', '\x2', '\x2', '\x13CE',
    '\x13CF', '\x3', '\x2', '\x2', '\x2', '\x13CF', '\x13D2', '\a', '\x24F',
    '\x2', '\x2', '\x13D0', '\x13D2', '\a', '\x228', '\x2', '\x2', '\x13D1',
    '\x13C9', '\x3', '\x2', '\x2', '\x2', '\x13D1', '\x13CA', '\x3', '\x2',
    '\x2', '\x2', '\x13D1', '\x13CD', '\x3', '\x2', '\x2', '\x2', '\x13D1',
    '\x13D0', '\x3', '\x2', '\x2', '\x2', '\x13D2', '\x1C5', '\x3', '\x2',
    '\x2', '\x2', '\x13D3', '\x13E0', '\a', '\b', '\x2', '\x2', '\x13D4',
    '\x13D5', '\a', '\x114', '\x2', '\x2', '\x13D5', '\x13E0', '\a', '\x17C',
    '\x2', '\x2', '\x13D6', '\x13D7', '\a', '\x135', '\x2', '\x2', '\x13D7',
    '\x13E0', '\a', '\x220', '\x2', '\x2', '\x13D8', '\x13E0', '\a', '\x138',
    '\x2', '\x2', '\x13D9', '\x13E0', '\a', '\x17E', '\x2', '\x2', '\x13DA',
    '\x13E0', '\a', '\x286', '\x2', '\x2', '\x13DB', '\x13DC', '\a', '\x1C6',
    '\x2', '\x2', '\x13DC', '\x13E0', '\a', '\x15D', '\x2', '\x2', '\x13DD',
    '\x13E0', '\a', '\x208', '\x2', '\x2', '\x13DE', '\x13E0', '\a', '\x21F',
    '\x2', '\x2', '\x13DF', '\x13D3', '\x3', '\x2', '\x2', '\x2', '\x13DF',
    '\x13D4', '\x3', '\x2', '\x2', '\x2', '\x13DF', '\x13D6', '\x3', '\x2',
    '\x2', '\x2', '\x13DF', '\x13D8', '\x3', '\x2', '\x2', '\x2', '\x13DF',
    '\x13D9', '\x3', '\x2', '\x2', '\x2', '\x13DF', '\x13DA', '\x3', '\x2',
    '\x2', '\x2', '\x13DF', '\x13DB', '\x3', '\x2', '\x2', '\x2', '\x13DF',
    '\x13DD', '\x3', '\x2', '\x2', '\x2', '\x13DF', '\x13DE', '\x3', '\x2',
    '\x2', '\x2', '\x13E0', '\x1C7', '\x3', '\x2', '\x2', '\x2', '\x13E1',
    '\x13E2', '\a', '\x112', '\x2', '\x2', '\x13E2', '\x13E3', '\a', '\x3E7',
    '\x2', '\x2', '\x13E3', '\x1C9', '\x3', '\x2', '\x2', '\x2', '\x13E4',
    '\x13E5', '\a', '\x118', '\x2', '\x2', '\x13E5', '\x13E6', '\a', 'J',
    '\x2', '\x2', '\x13E6', '\x13EB', '\x5', '\x1D6', '\xEC', '\x2', '\x13E7',
    '\x13E8', '\a', '\x3DA', '\x2', '\x2', '\x13E8', '\x13EA', '\x5', '\x1D6',
    '\xEC', '\x2', '\x13E9', '\x13E7', '\x3', '\x2', '\x2', '\x2', '\x13EA',
    '\x13ED', '\x3', '\x2', '\x2', '\x2', '\x13EB', '\x13E9', '\x3', '\x2',
    '\x2', '\x2', '\x13EB', '\x13EC', '\x3', '\x2', '\x2', '\x2', '\x13EC',
    '\x13F5', '\x3', '\x2', '\x2', '\x2', '\x13ED', '\x13EB', '\x3', '\x2',
    '\x2', '\x2', '\x13EE', '\x13EF', '\a', 'u', '\x2', '\x2', '\x13EF', '\x13F2',
    '\a', '\x3D8', '\x2', '\x2', '\x13F0', '\x13F3', '\x5', '\x22C', '\x117',
    '\x2', '\x13F1', '\x13F3', '\a', '\b', '\x2', '\x2', '\x13F2', '\x13F0',
    '\x3', '\x2', '\x2', '\x2', '\x13F2', '\x13F1', '\x3', '\x2', '\x2', '\x2',
    '\x13F3', '\x13F4', '\x3', '\x2', '\x2', '\x2', '\x13F4', '\x13F6', '\a',
    '\x3D9', '\x2', '\x2', '\x13F5', '\x13EE', '\x3', '\x2', '\x2', '\x2',
    '\x13F5', '\x13F6', '\x3', '\x2', '\x2', '\x2', '\x13F6', '\x13F7', '\x3',
    '\x2', '\x2', '\x2', '\x13F7', '\x13F8', '\a', 'I', '\x2', '\x2', '\x13F8',
    '\x13F9', '\x5', '\x20C', '\x107', '\x2', '\x13F9', '\x1CB', '\x3', '\x2',
    '\x2', '\x2', '\x13FA', '\x13FC', '\a', '\x163', '\x2', '\x2', '\x13FB',
    '\x13FD', '\t', '@', '\x2', '\x2', '\x13FC', '\x13FB', '\x3', '\x2', '\x2',
    '\x2', '\x13FC', '\x13FD', '\x3', '\x2', '\x2', '\x2', '\x13FD', '\x13FE',
    '\x3', '\x2', '\x2', '\x2', '\x13FE', '\x1403', '\x5', '\x1D8', '\xED',
    '\x2', '\x13FF', '\x1400', '\a', '\x3DA', '\x2', '\x2', '\x1400', '\x1402',
    '\x5', '\x1D8', '\xED', '\x2', '\x1401', '\x13FF', '\x3', '\x2', '\x2',
    '\x2', '\x1402', '\x1405', '\x3', '\x2', '\x2', '\x2', '\x1403', '\x1401',
    '\x3', '\x2', '\x2', '\x2', '\x1403', '\x1404', '\x3', '\x2', '\x2', '\x2',
    '\x1404', '\x1CD', '\x3', '\x2', '\x2', '\x2', '\x1405', '\x1403', '\x3',
    '\x2', '\x2', '\x2', '\x1406', '\x1408', '\a', 'V', '\x2', '\x2', '\x1407',
    '\x1409', '\t', 'M', '\x2', '\x2', '\x1408', '\x1407', '\x3', '\x2', '\x2',
    '\x2', '\x1408', '\x1409', '\x3', '\x2', '\x2', '\x2', '\x1409', '\x140B',
    '\x3', '\x2', '\x2', '\x2', '\x140A', '\x140C', '\x5', '\x212', '\x10A',
    '\x2', '\x140B', '\x140A', '\x3', '\x2', '\x2', '\x2', '\x140C', '\x140D',
    '\x3', '\x2', '\x2', '\x2', '\x140D', '\x140B', '\x3', '\x2', '\x2', '\x2',
    '\x140D', '\x140E', '\x3', '\x2', '\x2', '\x2', '\x140E', '\x1CF', '\x3',
    '\x2', '\x2', '\x2', '\x140F', '\x1410', '\a', '^', '\x2', '\x2', '\x1410',
    '\x1411', '\a', 'J', '\x2', '\x2', '\x1411', '\x1412', '\a', 'P', '\x2',
    '\x2', '\x1412', '\x1413', '\a', '\x118', '\x2', '\x2', '\x1413', '\x1418',
    '\x5', '\x1DC', '\xEF', '\x2', '\x1414', '\x1415', '\a', '\x3DA', '\x2',
    '\x2', '\x1415', '\x1417', '\x5', '\x1DC', '\xEF', '\x2', '\x1416', '\x1414',
    '\x3', '\x2', '\x2', '\x2', '\x1417', '\x141A', '\x3', '\x2', '\x2', '\x2',
    '\x1418', '\x1416', '\x3', '\x2', '\x2', '\x2', '\x1418', '\x1419', '\x3',
    '\x2', '\x2', '\x2', '\x1419', '\x1D1', '\x3', '\x2', '\x2', '\x2', '\x141A',
    '\x1418', '\x3', '\x2', '\x2', '\x2', '\x141B', '\x141C', '\a', '\x1EE',
    '\x2', '\x2', '\x141C', '\x141D', '\a', '\x1D9', '\x2', '\x2', '\x141D',
    '\x141E', '\a', '\x118', '\x2', '\x2', '\x141E', '\x1D3', '\x3', '\x2',
    '\x2', '\x2', '\x141F', '\x1420', '\a', '\x255', '\x2', '\x2', '\x1420',
    '\x1D5', '\x3', '\x2', '\x2', '\x2', '\x1421', '\x1429', '\x5', '\x1F4',
    '\xFB', '\x2', '\x1422', '\x1424', '\t', '\x14', '\x2', '\x2', '\x1423',
    '\x1422', '\x3', '\x2', '\x2', '\x2', '\x1423', '\x1424', '\x3', '\x2',
    '\x2', '\x2', '\x1424', '\x1425', '\x3', '\x2', '\x2', '\x2', '\x1425',
    '\x1426', '\a', '\x3D8', '\x2', '\x2', '\x1426', '\x1427', '\x5', '\x22C',
    '\x117', '\x2', '\x1427', '\x1428', '\a', '\x3D9', '\x2', '\x2', '\x1428',
    '\x142A', '\x3', '\x2', '\x2', '\x2', '\x1429', '\x1423', '\x3', '\x2',
    '\x2', '\x2', '\x1429', '\x142A', '\x3', '\x2', '\x2', '\x2', '\x142A',
    '\x1D7', '\x3', '\x2', '\x2', '\x2', '\x142B', '\x143E', '\a', '\x140',
    '\x2', '\x2', '\x142C', '\x143E', '\a', '\x170', '\x2', '\x2', '\x142D',
    '\x142F', '\t', 'N', '\x2', '\x2', '\x142E', '\x142D', '\x3', '\x2', '\x2',
    '\x2', '\x142E', '\x142F', '\x3', '\x2', '\x2', '\x2', '\x142F', '\x1430',
    '\x3', '\x2', '\x2', '\x2', '\x1430', '\x143E', '\a', '\x18B', '\x2',
    '\x2', '\x1431', '\x143E', '\a', '\x1C2', '\x2', '\x2', '\x1432', '\x143E',
    '\a', '\x257', '\x2', '\x2', '\x1433', '\x1434', '\a', '\x1D9', '\x2',
    '\x2', '\x1434', '\x143E', '\a', '\x118', '\x2', '\x2', '\x1435', '\x143E',
    '\a', '\x215', '\x2', '\x2', '\x1436', '\x143E', '\a', '\x233', '\x2',
    '\x2', '\x1437', '\x143B', '\a', '\x24F', '\x2', '\x2', '\x1438', '\x1439',
    '\a', '\xB0', '\x2', '\x2', '\x1439', '\x143A', '\a', 'z', '\x2', '\x2',
    '\x143A', '\x143C', '\a', '_', '\x2', '\x2', '\x143B', '\x1438', '\x3',
    '\x2', '\x2', '\x2', '\x143B', '\x143C', '\x3', '\x2', '\x2', '\x2', '\x143C',
    '\x143E', '\x3', '\x2', '\x2', '\x2', '\x143D', '\x142B', '\x3', '\x2',
    '\x2', '\x2', '\x143D', '\x142C', '\x3', '\x2', '\x2', '\x2', '\x143D',
    '\x142E', '\x3', '\x2', '\x2', '\x2', '\x143D', '\x1431', '\x3', '\x2',
    '\x2', '\x2', '\x143D', '\x1432', '\x3', '\x2', '\x2', '\x2', '\x143D',
    '\x1433', '\x3', '\x2', '\x2', '\x2', '\x143D', '\x1435', '\x3', '\x2',
    '\x2', '\x2', '\x143D', '\x1436', '\x3', '\x2', '\x2', '\x2', '\x143D',
    '\x1437', '\x3', '\x2', '\x2', '\x2', '\x143E', '\x144A', '\x3', '\x2',
    '\x2', '\x2', '\x143F', '\x1440', '\a', '\x1DF', '\x2', '\x2', '\x1440',
    '\x1442', '\a', '\x18B', '\x2', '\x2', '\x1441', '\x1443', '\x5', '\x13A',
    '\x9E', '\x2', '\x1442', '\x1441', '\x3', '\x2', '\x2', '\x2', '\x1442',
    '\x1443', '\x3', '\x2', '\x2', '\x2', '\x1443', '\x144A', '\x3', '\x2',
    '\x2', '\x2', '\x1444', '\x1445', '\a', '\x24F', '\x2', '\x2', '\x1445',
    '\x1447', '\x5', '\x22E', '\x118', '\x2', '\x1446', '\x1448', '\x5', '\x1DA',
    '\xEE', '\x2', '\x1447', '\x1446', '\x3', '\x2', '\x2', '\x2', '\x1447',
    '\x1448', '\x3', '\x2', '\x2', '\x2', '\x1448', '\x144A', '\x3', '\x2',
    '\x2', '\x2', '\x1449', '\x143D', '\x3', '\x2', '\x2', '\x2', '\x1449',
    '\x143F', '\x3', '\x2', '\x2', '\x2', '\x1449', '\x1444', '\x3', '\x2',
    '\x2', '\x2', '\x144A', '\x1D9', '\x3', '\x2', '\x2', '\x2', '\x144B',
    '\x144C', '\a', '\xB0', '\x2', '\x2', '\x144C', '\x144D', '\a', 'z', '\x2',
    '\x2', '\x144D', '\x1451', '\a', '_', '\x2', '\x2', '\x144E', '\x144F',
    '\a', '<', '\x2', '\x2', '\x144F', '\x1451', '\a', '\x159', '\x2', '\x2',
    '\x1450', '\x144B', '\x3', '\x2', '\x2', '\x2', '\x1450', '\x144E', '\x3',
    '\x2', '\x2', '\x2', '\x1451', '\x1DB', '\x3', '\x2', '\x2', '\x2', '\x1452',
    '\x145A', '\x5', '\x1F4', '\xFB', '\x2', '\x1453', '\x1454', '\a', 'u',
    '\x2', '\x2', '\x1454', '\x1457', '\a', '\x3D8', '\x2', '\x2', '\x1455',
    '\x1458', '\x5', '\x22C', '\x117', '\x2', '\x1456', '\x1458', '\a', '\b',
    '\x2', '\x2', '\x1457', '\x1455', '\x3', '\x2', '\x2', '\x2', '\x1457',
    '\x1456', '\x3', '\x2', '\x2', '\x2', '\x1458', '\x1459', '\x3', '\x2',
    '\x2', '\x2', '\x1459', '\x145B', '\a', '\x3D9', '\x2', '\x2', '\x145A',
    '\x1453', '\x3', '\x2', '\x2', '\x2', '\x145A', '\x145B', '\x3', '\x2',
    '\x2', '\x2', '\x145B', '\x1463', '\x3', '\x2', '\x2', '\x2', '\x145C',
    '\x145E', '\t', '\x14', '\x2', '\x2', '\x145D', '\x145C', '\x3', '\x2',
    '\x2', '\x2', '\x145D', '\x145E', '\x3', '\x2', '\x2', '\x2', '\x145E',
    '\x145F', '\x3', '\x2', '\x2', '\x2', '\x145F', '\x1460', '\a', '\x3D8',
    '\x2', '\x2', '\x1460', '\x1461', '\x5', '\x22C', '\x117', '\x2', '\x1461',
    '\x1462', '\a', '\x3D9', '\x2', '\x2', '\x1462', '\x1464', '\x3', '\x2',
    '\x2', '\x2', '\x1463', '\x145D', '\x3', '\x2', '\x2', '\x2', '\x1463',
    '\x1464', '\x3', '\x2', '\x2', '\x2', '\x1464', '\x1467', '\x3', '\x2',
    '\x2', '\x2', '\x1465', '\x1466', '\a', 'H', '\x2', '\x2', '\x1466', '\x1468',
    '\a', '\x185', '\x2', '\x2', '\x1467', '\x1465', '\x3', '\x2', '\x2',
    '\x2', '\x1467', '\x1468', '\x3', '\x2', '\x2', '\x2', '\x1468', '\x1DD',
    '\x3', '\x2', '\x2', '\x2', '\x1469', '\x146A', '\t', 'O', '\x2', '\x2',
    '\x146A', '\x146D', '\x5', '\x1F4', '\xFB', '\x2', '\x146B', '\x146E',
    '\x5', '\x20C', '\x107', '\x2', '\x146C', '\x146E', '\a', '\x3E7', '\x2',
    '\x2', '\x146D', '\x146B', '\x3', '\x2', '\x2', '\x2', '\x146D', '\x146C',
    '\x3', '\x2', '\x2', '\x2', '\x146D', '\x146E', '\x3', '\x2', '\x2', '\x2',
    '\x146E', '\x1DF', '\x3', '\x2', '\x2', '\x2', '\x146F', '\x1473', '\t',
    'O', '\x2', '\x2', '\x1470', '\x1471', '\t', 'P', '\x2', '\x2', '\x1471',
    '\x1472', '\a', '\x3CF', '\x2', '\x2', '\x1472', '\x1474', '\t', 'Q',
    '\x2', '\x2', '\x1473', '\x1470', '\x3', '\x2', '\x2', '\x2', '\x1473',
    '\x1474', '\x3', '\x2', '\x2', '\x2', '\x1474', '\x1475', '\x3', '\x2',
    '\x2', '\x2', '\x1475', '\x1476', '\x5', '\x1F0', '\xF9', '\x2', '\x1476',
    '\x1E1', '\x3', '\x2', '\x2', '\x2', '\x1477', '\x1478', '\a', '\x16E',
    '\x2', '\x2', '\x1478', '\x1479', '\a', '\x3E7', '\x2', '\x2', '\x1479',
    '\x1E3', '\x3', '\x2', '\x2', '\x2', '\x147A', '\x147B', '\a', '\xAA',
    '\x2', '\x2', '\x147B', '\x147C', '\x5', '\x20C', '\x107', '\x2', '\x147C',
    '\x1E5', '\x3', '\x2', '\x2', '\x2', '\x147D', '\x1485', '\a', '\x8F',
    '\x2', '\x2', '\x147E', '\x1480', '\a', '\x93', '\x2', '\x2', '\x147F',
    '\x1481', '\a', '\x235', '\x2', '\x2', '\x1480', '\x147F', '\x3', '\x2',
    '\x2', '\x2', '\x1480', '\x1481', '\x3', '\x2', '\x2', '\x2', '\x1481',
    '\x1482', '\x3', '\x2', '\x2', '\x2', '\x1482', '\x1486', '\x5', '\x216',
    '\x10C', '\x2', '\x1483', '\x1486', '\a', '\x3EF', '\x2', '\x2', '\x1484',
    '\x1486', '\a', '\x3F0', '\x2', '\x2', '\x1485', '\x147E', '\x3', '\x2',
    '\x2', '\x2', '\x1485', '\x1483', '\x3', '\x2', '\x2', '\x2', '\x1485',
    '\x1484', '\x3', '\x2', '\x2', '\x2', '\x1486', '\x1490', '\x3', '\x2',
    '\x2', '\x2', '\x1487', '\x1488', '\a', '\x8C', '\x2', '\x2', '\x1488',
    '\x148D', '\x5', '\x1EA', '\xF6', '\x2', '\x1489', '\x148A', '\a', '\x3DA',
    '\x2', '\x2', '\x148A', '\x148C', '\x5', '\x1EA', '\xF6', '\x2', '\x148B',
    '\x1489', '\x3', '\x2', '\x2', '\x2', '\x148C', '\x148F', '\x3', '\x2',
    '\x2', '\x2', '\x148D', '\x148B', '\x3', '\x2', '\x2', '\x2', '\x148D',
    '\x148E', '\x3', '\x2', '\x2', '\x2', '\x148E', '\x1491', '\x3', '\x2',
    '\x2', '\x2', '\x148F', '\x148D', '\x3', '\x2', '\x2', '\x2', '\x1490',
    '\x1487', '\x3', '\x2', '\x2', '\x2', '\x1490', '\x1491', '\x3', '\x2',
    '\x2', '\x2', '\x1491', '\x1E7', '\x3', '\x2', '\x2', '\x2', '\x1492',
    '\x149A', '\a', '\x83', '\x2', '\x2', '\x1493', '\x1495', '\a', '\x93',
    '\x2', '\x2', '\x1494', '\x1496', '\a', '\x235', '\x2', '\x2', '\x1495',
    '\x1494', '\x3', '\x2', '\x2', '\x2', '\x1495', '\x1496', '\x3', '\x2',
    '\x2', '\x2', '\x1496', '\x1497', '\x3', '\x2', '\x2', '\x2', '\x1497',
    '\x149B', '\x5', '\x216', '\x10C', '\x2', '\x1498', '\x149B', '\a', '\x3EF',
    '\x2', '\x2', '\x1499', '\x149B', '\a', '\x3F0', '\x2', '\x2', '\x149A',
    '\x1493', '\x3', '\x2', '\x2', '\x2', '\x149A', '\x1498', '\x3', '\x2',
    '\x2', '\x2', '\x149A', '\x1499', '\x3', '\x2', '\x2', '\x2', '\x149A',
    '\x149B', '\x3', '\x2', '\x2', '\x2', '\x149B', '\x14A5', '\x3', '\x2',
    '\x2', '\x2', '\x149C', '\x149D', '\a', '\x8C', '\x2', '\x2', '\x149D',
    '\x14A2', '\x5', '\x1EA', '\xF6', '\x2', '\x149E', '\x149F', '\a', '\x3DA',
    '\x2', '\x2', '\x149F', '\x14A1', '\x5', '\x1EA', '\xF6', '\x2', '\x14A0',
    '\x149E', '\x3', '\x2', '\x2', '\x2', '\x14A1', '\x14A4', '\x3', '\x2',
    '\x2', '\x2', '\x14A2', '\x14A0', '\x3', '\x2', '\x2', '\x2', '\x14A2',
    '\x14A3', '\x3', '\x2', '\x2', '\x2', '\x14A3', '\x14A6', '\x3', '\x2',
    '\x2', '\x2', '\x14A4', '\x14A2', '\x3', '\x2', '\x2', '\x2', '\x14A5',
    '\x149C', '\x3', '\x2', '\x2', '\x2', '\x14A5', '\x14A6', '\x3', '\x2',
    '\x2', '\x2', '\x14A6', '\x1E9', '\x3', '\x2', '\x2', '\x2', '\x14A7',
    '\x14A8', '\t', 'R', '\x2', '\x2', '\x14A8', '\x14AB', '\a', '\x3CF',
    '\x2', '\x2', '\x14A9', '\x14AC', '\x5', '\x216', '\x10C', '\x2', '\x14AA',
    '\x14AC', '\a', '\x3E8', '\x2', '\x2', '\x14AB', '\x14A9', '\x3', '\x2',
    '\x2', '\x2', '\x14AB', '\x14AA', '\x3', '\x2', '\x2', '\x2', '\x14AC',
    '\x1EB', '\x3', '\x2', '\x2', '\x2', '\x14AD', '\x14AF', '\a', '\x42',
    '\x2', '\x2', '\x14AE', '\x14B0', '\t', 'S', '\x2', '\x2', '\x14AF', '\x14AE',
    '\x3', '\x2', '\x2', '\x2', '\x14AF', '\x14B0', '\x3', '\x2', '\x2', '\x2',
    '\x14B0', '\x14B1', '\x3', '\x2', '\x2', '\x2', '\x14B1', '\x14D1', '\a',
    '.', '\x2', '\x2', '\x14B2', '\x14B3', '\x5', '\x1BC', '\xDF', '\x2',
    '\x14B3', '\x14B4', '\a', '\x3CF', '\x2', '\x2', '\x14B4', '\x14BC', '\t',
    'T', '\x2', '\x2', '\x14B5', '\x14B6', '\a', '\x3DA', '\x2', '\x2', '\x14B6',
    '\x14B7', '\x5', '\x1BC', '\xDF', '\x2', '\x14B7', '\x14B8', '\a', '\x3CF',
    '\x2', '\x2', '\x14B8', '\x14B9', '\t', 'T', '\x2', '\x2', '\x14B9', '\x14BB',
    '\x3', '\x2', '\x2', '\x2', '\x14BA', '\x14B5', '\x3', '\x2', '\x2', '\x2',
    '\x14BB', '\x14BE', '\x3', '\x2', '\x2', '\x2', '\x14BC', '\x14BA', '\x3',
    '\x2', '\x2', '\x2', '\x14BC', '\x14BD', '\x3', '\x2', '\x2', '\x2', '\x14BD',
    '\x14D2', '\x3', '\x2', '\x2', '\x2', '\x14BE', '\x14BC', '\x3', '\x2',
    '\x2', '\x2', '\x14BF', '\x14C2', '\a', '\x1C', '\x2', '\x2', '\x14C0',
    '\x14C3', '\x5', '\x212', '\x10A', '\x2', '\x14C1', '\x14C3', '\x5', '\x1BC',
    '\xDF', '\x2', '\x14C2', '\x14C0', '\x3', '\x2', '\x2', '\x2', '\x14C2',
    '\x14C1', '\x3', '\x2', '\x2', '\x2', '\x14C3', '\x14C4', '\x3', '\x2',
    '\x2', '\x2', '\x14C4', '\x14C5', '\x5', '\x1BC', '\xDF', '\x2', '\x14C5',
    '\x14C6', '\a', '\x3CF', '\x2', '\x2', '\x14C6', '\x14CE', '\x5', '\x1EE',
    '\xF8', '\x2', '\x14C7', '\x14C8', '\a', '\x3DA', '\x2', '\x2', '\x14C8',
    '\x14C9', '\x5', '\x1BC', '\xDF', '\x2', '\x14C9', '\x14CA', '\a', '\x3CF',
    '\x2', '\x2', '\x14CA', '\x14CB', '\x5', '\x1EE', '\xF8', '\x2', '\x14CB',
    '\x14CD', '\x3', '\x2', '\x2', '\x2', '\x14CC', '\x14C7', '\x3', '\x2',
    '\x2', '\x2', '\x14CD', '\x14D0', '\x3', '\x2', '\x2', '\x2', '\x14CE',
    '\x14CC', '\x3', '\x2', '\x2', '\x2', '\x14CE', '\x14CF', '\x3', '\x2',
    '\x2', '\x2', '\x14CF', '\x14D2', '\x3', '\x2', '\x2', '\x2', '\x14D0',
    '\x14CE', '\x3', '\x2', '\x2', '\x2', '\x14D1', '\x14B2', '\x3', '\x2',
    '\x2', '\x2', '\x14D1', '\x14BF', '\x3', '\x2', '\x2', '\x2', '\x14D2',
    '\x1ED', '\x3', '\x2', '\x2', '\x2', '\x14D3', '\x14D4', '\t', 'U', '\x2',
    '\x2', '\x14D4', '\x1EF', '\x3', '\x2', '\x2', '\x2', '\x14D5', '\x14DB',
    '\x5', '\xB4', '[', '\x2', '\x14D6', '\x14DB', '\x5', '\xA6', 'T', '\x2',
    '\x14D7', '\x14DB', '\x5', '\xAC', 'W', '\x2', '\x14D8', '\x14DB', '\x5',
    '\xB2', 'Z', '\x2', '\x14D9', '\x14DB', '\x5', '\xB6', '\\', '\x2', '\x14DA',
    '\x14D5', '\x3', '\x2', '\x2', '\x2', '\x14DA', '\x14D6', '\x3', '\x2',
    '\x2', '\x2', '\x14DA', '\x14D7', '\x3', '\x2', '\x2', '\x2', '\x14DA',
    '\x14D8', '\x3', '\x2', '\x2', '\x2', '\x14DA', '\x14D9', '\x3', '\x2',
    '\x2', '\x2', '\x14DB', '\x14E0', '\x3', '\x2', '\x2', '\x2', '\x14DC',
    '\x14DD', '\a', '<', '\x2', '\x2', '\x14DD', '\x14DE', '\a', '\x12F',
    '\x2', '\x2', '\x14DE', '\x14E0', '\x5', '\x20C', '\x107', '\x2', '\x14DF',
    '\x14DA', '\x3', '\x2', '\x2', '\x2', '\x14DF', '\x14DC', '\x3', '\x2',
    '\x2', '\x2', '\x14E0', '\x1F1', '\x3', '\x2', '\x2', '\x2', '\x14E1',
    '\x14E5', '\x5', '\x20C', '\x107', '\x2', '\x14E2', '\x14E6', '\a', '\x3EE',
    '\x2', '\x2', '\x14E3', '\x14E4', '\a', '\x3D7', '\x2', '\x2', '\x14E4',
    '\x14E6', '\x5', '\x20C', '\x107', '\x2', '\x14E5', '\x14E2', '\x3', '\x2',
    '\x2', '\x2', '\x14E5', '\x14E3', '\x3', '\x2', '\x2', '\x2', '\x14E5',
    '\x14E6', '\x3', '\x2', '\x2', '\x2', '\x14E6', '\x1F3', '\x3', '\x2',
    '\x2', '\x2', '\x14E7', '\x14E8', '\x5', '\x1F2', '\xFA', '\x2', '\x14E8',
    '\x1F5', '\x3', '\x2', '\x2', '\x2', '\x14E9', '\x14EE', '\x5', '\x20C',
    '\x107', '\x2', '\x14EA', '\x14EC', '\x5', '\x210', '\x109', '\x2', '\x14EB',
    '\x14ED', '\x5', '\x210', '\x109', '\x2', '\x14EC', '\x14EB', '\x3', '\x2',
    '\x2', '\x2', '\x14EC', '\x14ED', '\x3', '\x2', '\x2', '\x2', '\x14ED',
    '\x14EF', '\x3', '\x2', '\x2', '\x2', '\x14EE', '\x14EA', '\x3', '\x2',
    '\x2', '\x2', '\x14EE', '\x14EF', '\x3', '\x2', '\x2', '\x2', '\x14EF',
    '\x1F7', '\x3', '\x2', '\x2', '\x2', '\x14F0', '\x14F3', '\x5', '\x20C',
    '\x107', '\x2', '\x14F1', '\x14F3', '\a', '\x3E7', '\x2', '\x2', '\x14F2',
    '\x14F0', '\x3', '\x2', '\x2', '\x2', '\x14F2', '\x14F1', '\x3', '\x2',
    '\x2', '\x2', '\x14F3', '\x14F8', '\x3', '\x2', '\x2', '\x2', '\x14F4',
    '\x14F5', '\a', '\x3D8', '\x2', '\x2', '\x14F5', '\x14F6', '\x5', '\x212',
    '\x10A', '\x2', '\x14F6', '\x14F7', '\a', '\x3D9', '\x2', '\x2', '\x14F7',
    '\x14F9', '\x3', '\x2', '\x2', '\x2', '\x14F8', '\x14F4', '\x3', '\x2',
    '\x2', '\x2', '\x14F8', '\x14F9', '\x3', '\x2', '\x2', '\x2', '\x14F9',
    '\x14FB', '\x3', '\x2', '\x2', '\x2', '\x14FA', '\x14FC', '\t', '+', '\x2',
    '\x2', '\x14FB', '\x14FA', '\x3', '\x2', '\x2', '\x2', '\x14FB', '\x14FC',
    '\x3', '\x2', '\x2', '\x2', '\x14FC', '\x1F9', '\x3', '\x2', '\x2', '\x2',
    '\x14FD', '\x14FE', '\t', 'V', '\x2', '\x2', '\x14FE', '\x1FB', '\x3',
    '\x2', '\x2', '\x2', '\x14FF', '\x1500', '\t', 'W', '\x2', '\x2', '\x1500',
    '\x1FD', '\x3', '\x2', '\x2', '\x2', '\x1501', '\x1506', '\a', '\xCA',
    '\x2', '\x2', '\x1502', '\x1506', '\x5', '\x26A', '\x136', '\x2', '\x1503',
    '\x1506', '\a', '\x3E7', '\x2', '\x2', '\x1504', '\x1506', '\a', '\x3E4',
    '\x2', '\x2', '\x1505', '\x1501', '\x3', '\x2', '\x2', '\x2', '\x1505',
    '\x1502', '\x3', '\x2', '\x2', '\x2', '\x1505', '\x1503', '\x3', '\x2',
    '\x2', '\x2', '\x1505', '\x1504', '\x3', '\x2', '\x2', '\x2', '\x1506',
    '\x1FF', '\x3', '\x2', '\x2', '\x2', '\x1507', '\x150A', '\x5', '\x20C',
    '\x107', '\x2', '\x1508', '\x150A', '\a', '\x3E7', '\x2', '\x2', '\x1509',
    '\x1507', '\x3', '\x2', '\x2', '\x2', '\x1509', '\x1508', '\x3', '\x2',
    '\x2', '\x2', '\x150A', '\x201', '\x3', '\x2', '\x2', '\x2', '\x150B',
    '\x150C', '\t', 'X', '\x2', '\x2', '\x150C', '\x203', '\x3', '\x2', '\x2',
    '\x2', '\x150D', '\x150E', '\x5', '\x212', '\x10A', '\x2', '\x150E', '\x150F',
    '\a', '\x3CC', '\x2', '\x2', '\x150F', '\x1510', '\x5', '\x212', '\x10A',
    '\x2', '\x1510', '\x1511', '\a', '\x3CC', '\x2', '\x2', '\x1511', '\x1512',
    '\x5', '\x212', '\x10A', '\x2', '\x1512', '\x1513', '\a', '\x3CC', '\x2',
    '\x2', '\x1513', '\x1514', '\x5', '\x212', '\x10A', '\x2', '\x1514', '\x1515',
    '\a', '\x3CC', '\x2', '\x2', '\x1515', '\x151B', '\x5', '\x212', '\x10A',
    '\x2', '\x1516', '\x1517', '\a', '\x3E3', '\x2', '\x2', '\x1517', '\x1518',
    '\x5', '\x212', '\x10A', '\x2', '\x1518', '\x1519', '\a', '\x3CC', '\x2',
    '\x2', '\x1519', '\x151A', '\x5', '\x212', '\x10A', '\x2', '\x151A', '\x151C',
    '\x3', '\x2', '\x2', '\x2', '\x151B', '\x1516', '\x3', '\x2', '\x2', '\x2',
    '\x151C', '\x151D', '\x3', '\x2', '\x2', '\x2', '\x151D', '\x151B', '\x3',
    '\x2', '\x2', '\x2', '\x151D', '\x151E', '\x3', '\x2', '\x2', '\x2', '\x151E',
    '\x205', '\x3', '\x2', '\x2', '\x2', '\x151F', '\x1526', '\x5', '\x208',
    '\x105', '\x2', '\x1520', '\x1521', '\a', '\x3DA', '\x2', '\x2', '\x1521',
    '\x1524', '\x5', '\x208', '\x105', '\x2', '\x1522', '\x1523', '\a', '\x3DA',
    '\x2', '\x2', '\x1523', '\x1525', '\x5', '\x212', '\x10A', '\x2', '\x1524',
    '\x1522', '\x3', '\x2', '\x2', '\x2', '\x1524', '\x1525', '\x3', '\x2',
    '\x2', '\x2', '\x1525', '\x1527', '\x3', '\x2', '\x2', '\x2', '\x1526',
    '\x1520', '\x3', '\x2', '\x2', '\x2', '\x1526', '\x1527', '\x3', '\x2',
    '\x2', '\x2', '\x1527', '\x207', '\x3', '\x2', '\x2', '\x2', '\x1528',
    '\x1530', '\a', '\x3E7', '\x2', '\x2', '\x1529', '\x1530', '\a', '\x3EC',
    '\x2', '\x2', '\x152A', '\x152C', '\a', '\x3E9', '\x2', '\x2', '\x152B',
    '\x152A', '\x3', '\x2', '\x2', '\x2', '\x152C', '\x152D', '\x3', '\x2',
    '\x2', '\x2', '\x152D', '\x152B', '\x3', '\x2', '\x2', '\x2', '\x152D',
    '\x152E', '\x3', '\x2', '\x2', '\x2', '\x152E', '\x1530', '\x3', '\x2',
    '\x2', '\x2', '\x152F', '\x1528', '\x3', '\x2', '\x2', '\x2', '\x152F',
    '\x1529', '\x3', '\x2', '\x2', '\x2', '\x152F', '\x152B', '\x3', '\x2',
    '\x2', '\x2', '\x1530', '\x209', '\x3', '\x2', '\x2', '\x2', '\x1531',
    '\x1534', '\x5', '\x20C', '\x107', '\x2', '\x1532', '\x1534', '\a', '\x3E7',
    '\x2', '\x2', '\x1533', '\x1531', '\x3', '\x2', '\x2', '\x2', '\x1533',
    '\x1532', '\x3', '\x2', '\x2', '\x2', '\x1534', '\x20B', '\x3', '\x2',
    '\x2', '\x2', '\x1535', '\x1539', '\x5', '\x20E', '\x108', '\x2', '\x1536',
    '\x1539', '\a', '\x3F0', '\x2', '\x2', '\x1537', '\x1539', '\a', '\x3E4',
    '\x2', '\x2', '\x1538', '\x1535', '\x3', '\x2', '\x2', '\x2', '\x1538',
    '\x1536', '\x3', '\x2', '\x2', '\x2', '\x1538', '\x1537', '\x3', '\x2',
    '\x2', '\x2', '\x1539', '\x20D', '\x3', '\x2', '\x2', '\x2', '\x153A',
    '\x1544', '\a', '\x3EF', '\x2', '\x2', '\x153B', '\x1544', '\x5', '\x26A',
    '\x136', '\x2', '\x153C', '\x1544', '\x5', '\x26C', '\x137', '\x2', '\x153D',
    '\x1544', '\x5', '\x202', '\x102', '\x2', '\x153E', '\x1544', '\x5', '\x26E',
    '\x138', '\x2', '\x153F', '\x1544', '\x5', '\x270', '\x139', '\x2', '\x1540',
    '\x1544', '\x5', '\x272', '\x13A', '\x2', '\x1541', '\x1544', '\x5', '\x274',
    '\x13B', '\x2', '\x1542', '\x1544', '\x5', '\x276', '\x13C', '\x2', '\x1543',
    '\x153A', '\x3', '\x2', '\x2', '\x2', '\x1543', '\x153B', '\x3', '\x2',
    '\x2', '\x2', '\x1543', '\x153C', '\x3', '\x2', '\x2', '\x2', '\x1543',
    '\x153D', '\x3', '\x2', '\x2', '\x2', '\x1543', '\x153E', '\x3', '\x2',
    '\x2', '\x2', '\x1543', '\x153F', '\x3', '\x2', '\x2', '\x2', '\x1543',
    '\x1540', '\x3', '\x2', '\x2', '\x2', '\x1543', '\x1541', '\x3', '\x2',
    '\x2', '\x2', '\x1543', '\x1542', '\x3', '\x2', '\x2', '\x2', '\x1544',
    '\x20F', '\x3', '\x2', '\x2', '\x2', '\x1545', '\x1549', '\a', '\x3EE',
    '\x2', '\x2', '\x1546', '\x1547', '\a', '\x3D7', '\x2', '\x2', '\x1547',
    '\x1549', '\x5', '\x20C', '\x107', '\x2', '\x1548', '\x1545', '\x3', '\x2',
    '\x2', '\x2', '\x1548', '\x1546', '\x3', '\x2', '\x2', '\x2', '\x1549',
    '\x211', '\x3', '\x2', '\x2', '\x2', '\x154A', '\x154B', '\t', 'Y', '\x2',
    '\x2', '\x154B', '\x213', '\x3', '\x2', '\x2', '\x2', '\x154C', '\x154F',
    '\a', '\x3E5', '\x2', '\x2', '\x154D', '\x154F', '\x5', '\x212', '\x10A',
    '\x2', '\x154E', '\x154C', '\x3', '\x2', '\x2', '\x2', '\x154E', '\x154D',
    '\x3', '\x2', '\x2', '\x2', '\x154F', '\x215', '\x3', '\x2', '\x2', '\x2',
    '\x1550', '\x1552', '\a', '\x3ED', '\x2', '\x2', '\x1551', '\x1550', '\x3',
    '\x2', '\x2', '\x2', '\x1551', '\x1552', '\x3', '\x2', '\x2', '\x2', '\x1552',
    '\x1553', '\x3', '\x2', '\x2', '\x2', '\x1553', '\x1556', '\a', '\x3E7',
    '\x2', '\x2', '\x1554', '\x1556', '\a', '\x3E6', '\x2', '\x2', '\x1555',
    '\x1551', '\x3', '\x2', '\x2', '\x2', '\x1555', '\x1554', '\x3', '\x2',
    '\x2', '\x2', '\x1556', '\x1558', '\x3', '\x2', '\x2', '\x2', '\x1557',
    '\x1559', '\a', '\x3E7', '\x2', '\x2', '\x1558', '\x1557', '\x3', '\x2',
    '\x2', '\x2', '\x1559', '\x155A', '\x3', '\x2', '\x2', '\x2', '\x155A',
    '\x1558', '\x3', '\x2', '\x2', '\x2', '\x155A', '\x155B', '\x3', '\x2',
    '\x2', '\x2', '\x155B', '\x1568', '\x3', '\x2', '\x2', '\x2', '\x155C',
    '\x155E', '\a', '\x3ED', '\x2', '\x2', '\x155D', '\x155C', '\x3', '\x2',
    '\x2', '\x2', '\x155D', '\x155E', '\x3', '\x2', '\x2', '\x2', '\x155E',
    '\x155F', '\x3', '\x2', '\x2', '\x2', '\x155F', '\x1562', '\a', '\x3E7',
    '\x2', '\x2', '\x1560', '\x1562', '\a', '\x3E6', '\x2', '\x2', '\x1561',
    '\x155D', '\x3', '\x2', '\x2', '\x2', '\x1561', '\x1560', '\x3', '\x2',
    '\x2', '\x2', '\x1562', '\x1565', '\x3', '\x2', '\x2', '\x2', '\x1563',
    '\x1564', '\a', '\x1A', '\x2', '\x2', '\x1564', '\x1566', '\x5', '\x200',
    '\x101', '\x2', '\x1565', '\x1563', '\x3', '\x2', '\x2', '\x2', '\x1565',
    '\x1566', '\x3', '\x2', '\x2', '\x2', '\x1566', '\x1568', '\x3', '\x2',
    '\x2', '\x2', '\x1567', '\x1555', '\x3', '\x2', '\x2', '\x2', '\x1567',
    '\x1561', '\x3', '\x2', '\x2', '\x2', '\x1568', '\x217', '\x3', '\x2',
    '\x2', '\x2', '\x1569', '\x156A', '\t', 'Z', '\x2', '\x2', '\x156A', '\x219',
    '\x3', '\x2', '\x2', '\x2', '\x156B', '\x156D', '\a', '\x3ED', '\x2',
    '\x2', '\x156C', '\x156B', '\x3', '\x2', '\x2', '\x2', '\x156C', '\x156D',
    '\x3', '\x2', '\x2', '\x2', '\x156D', '\x156E', '\x3', '\x2', '\x2', '\x2',
    '\x156E', '\x156F', '\a', '\x3E9', '\x2', '\x2', '\x156F', '\x21B', '\x3',
    '\x2', '\x2', '\x2', '\x1570', '\x1572', '\a', 'h', '\x2', '\x2', '\x1571',
    '\x1570', '\x3', '\x2', '\x2', '\x2', '\x1571', '\x1572', '\x3', '\x2',
    '\x2', '\x2', '\x1572', '\x1573', '\x3', '\x2', '\x2', '\x2', '\x1573',
    '\x1574', '\t', '[', '\x2', '\x2', '\x1574', '\x21D', '\x3', '\x2', '\x2',
    '\x2', '\x1575', '\x1582', '\x5', '\x216', '\x10C', '\x2', '\x1576', '\x1582',
    '\x5', '\x212', '\x10A', '\x2', '\x1577', '\x1578', '\a', '\x3CC', '\x2',
    '\x2', '\x1578', '\x1582', '\x5', '\x212', '\x10A', '\x2', '\x1579', '\x1582',
    '\x5', '\x21A', '\x10E', '\x2', '\x157A', '\x1582', '\x5', '\x218', '\x10D',
    '\x2', '\x157B', '\x1582', '\a', '\x3EA', '\x2', '\x2', '\x157C', '\x1582',
    '\a', '\x3EC', '\x2', '\x2', '\x157D', '\x157F', '\a', 'h', '\x2', '\x2',
    '\x157E', '\x157D', '\x3', '\x2', '\x2', '\x2', '\x157E', '\x157F', '\x3',
    '\x2', '\x2', '\x2', '\x157F', '\x1580', '\x3', '\x2', '\x2', '\x2', '\x1580',
    '\x1582', '\t', '[', '\x2', '\x2', '\x1581', '\x1575', '\x3', '\x2', '\x2',
    '\x2', '\x1581', '\x1576', '\x3', '\x2', '\x2', '\x2', '\x1581', '\x1577',
    '\x3', '\x2', '\x2', '\x2', '\x1581', '\x1579', '\x3', '\x2', '\x2', '\x2',
    '\x1581', '\x157A', '\x3', '\x2', '\x2', '\x2', '\x1581', '\x157B', '\x3',
    '\x2', '\x2', '\x2', '\x1581', '\x157C', '\x3', '\x2', '\x2', '\x2', '\x1581',
    '\x157E', '\x3', '\x2', '\x2', '\x2', '\x1582', '\x21F', '\x3', '\x2',
    '\x2', '\x2', '\x1583', '\x1585', '\t', '\\', '\x2', '\x2', '\x1584',
    '\x1586', '\x5', '\x226', '\x114', '\x2', '\x1585', '\x1584', '\x3', '\x2',
    '\x2', '\x2', '\x1585', '\x1586', '\x3', '\x2', '\x2', '\x2', '\x1586',
    '\x1588', '\x3', '\x2', '\x2', '\x2', '\x1587', '\x1589', '\a', '\xCA',
    '\x2', '\x2', '\x1588', '\x1587', '\x3', '\x2', '\x2', '\x2', '\x1588',
    '\x1589', '\x3', '\x2', '\x2', '\x2', '\x1589', '\x1590', '\x3', '\x2',
    '\x2', '\x2', '\x158A', '\x158B', '\a', '\x18', '\x2', '\x2', '\x158B',
    '\x158E', '\a', '\x8C', '\x2', '\x2', '\x158C', '\x158E', '\a', '\x2B7',
    '\x2', '\x2', '\x158D', '\x158A', '\x3', '\x2', '\x2', '\x2', '\x158D',
    '\x158C', '\x3', '\x2', '\x2', '\x2', '\x158E', '\x158F', '\x3', '\x2',
    '\x2', '\x2', '\x158F', '\x1591', '\x5', '\x1FE', '\x100', '\x2', '\x1590',
    '\x158D', '\x3', '\x2', '\x2', '\x2', '\x1590', '\x1591', '\x3', '\x2',
    '\x2', '\x2', '\x1591', '\x1594', '\x3', '\x2', '\x2', '\x2', '\x1592',
    '\x1593', '\a', '\x1A', '\x2', '\x2', '\x1593', '\x1595', '\x5', '\x200',
    '\x101', '\x2', '\x1594', '\x1592', '\x3', '\x2', '\x2', '\x2', '\x1594',
    '\x1595', '\x3', '\x2', '\x2', '\x2', '\x1595', '\x15EE', '\x3', '\x2',
    '\x2', '\x2', '\x1596', '\x1597', '\a', '\xC9', '\x2', '\x2', '\x1597',
    '\x1599', '\t', ']', '\x2', '\x2', '\x1598', '\x159A', '\x5', '\x226',
    '\x114', '\x2', '\x1599', '\x1598', '\x3', '\x2', '\x2', '\x2', '\x1599',
    '\x159A', '\x3', '\x2', '\x2', '\x2', '\x159A', '\x159C', '\x3', '\x2',
    '\x2', '\x2', '\x159B', '\x159D', '\a', '\xCA', '\x2', '\x2', '\x159C',
    '\x159B', '\x3', '\x2', '\x2', '\x2', '\x159C', '\x159D', '\x3', '\x2',
    '\x2', '\x2', '\x159D', '\x15EE', '\x3', '\x2', '\x2', '\x2', '\x159E',
    '\x159F', '\a', '\x1B4', '\x2', '\x2', '\x159F', '\x15A1', '\a', '\xC7',
    '\x2', '\x2', '\x15A0', '\x15A2', '\x5', '\x226', '\x114', '\x2', '\x15A1',
    '\x15A0', '\x3', '\x2', '\x2', '\x2', '\x15A1', '\x15A2', '\x3', '\x2',
    '\x2', '\x2', '\x15A2', '\x15A4', '\x3', '\x2', '\x2', '\x2', '\x15A3',
    '\x15A5', '\a', '\xCA', '\x2', '\x2', '\x15A4', '\x15A3', '\x3', '\x2',
    '\x2', '\x2', '\x15A4', '\x15A5', '\x3', '\x2', '\x2', '\x2', '\x15A5',
    '\x15EE', '\x3', '\x2', '\x2', '\x2', '\x15A6', '\x15A7', '\a', '\xC9',
    '\x2', '\x2', '\x15A7', '\x15A8', '\t', '^', '\x2', '\x2', '\x15A8', '\x15AA',
    '\a', '\xD5', '\x2', '\x2', '\x15A9', '\x15AB', '\x5', '\x226', '\x114',
    '\x2', '\x15AA', '\x15A9', '\x3', '\x2', '\x2', '\x2', '\x15AA', '\x15AB',
    '\x3', '\x2', '\x2', '\x2', '\x15AB', '\x15AD', '\x3', '\x2', '\x2', '\x2',
    '\x15AC', '\x15AE', '\a', '\xCA', '\x2', '\x2', '\x15AD', '\x15AC', '\x3',
    '\x2', '\x2', '\x2', '\x15AD', '\x15AE', '\x3', '\x2', '\x2', '\x2', '\x15AE',
    '\x15EE', '\x3', '\x2', '\x2', '\x2', '\x15AF', '\x15B1', '\t', '_', '\x2',
    '\x2', '\x15B0', '\x15B2', '\x5', '\x226', '\x114', '\x2', '\x15B1', '\x15B0',
    '\x3', '\x2', '\x2', '\x2', '\x15B1', '\x15B2', '\x3', '\x2', '\x2', '\x2',
    '\x15B2', '\x15B4', '\x3', '\x2', '\x2', '\x2', '\x15B3', '\x15B5', '\t',
    '`', '\x2', '\x2', '\x15B4', '\x15B3', '\x3', '\x2', '\x2', '\x2', '\x15B4',
    '\x15B5', '\x3', '\x2', '\x2', '\x2', '\x15B5', '\x15B7', '\x3', '\x2',
    '\x2', '\x2', '\x15B6', '\x15B8', '\a', '\xB3', '\x2', '\x2', '\x15B7',
    '\x15B6', '\x3', '\x2', '\x2', '\x2', '\x15B7', '\x15B8', '\x3', '\x2',
    '\x2', '\x2', '\x15B8', '\x15EE', '\x3', '\x2', '\x2', '\x2', '\x15B9',
    '\x15BB', '\a', '\xBA', '\x2', '\x2', '\x15BA', '\x15BC', '\x5', '\x228',
    '\x115', '\x2', '\x15BB', '\x15BA', '\x3', '\x2', '\x2', '\x2', '\x15BB',
    '\x15BC', '\x3', '\x2', '\x2', '\x2', '\x15BC', '\x15BE', '\x3', '\x2',
    '\x2', '\x2', '\x15BD', '\x15BF', '\t', '`', '\x2', '\x2', '\x15BE', '\x15BD',
    '\x3', '\x2', '\x2', '\x2', '\x15BE', '\x15BF', '\x3', '\x2', '\x2', '\x2',
    '\x15BF', '\x15C1', '\x3', '\x2', '\x2', '\x2', '\x15C0', '\x15C2', '\a',
    '\xB3', '\x2', '\x2', '\x15C1', '\x15C0', '\x3', '\x2', '\x2', '\x2',
    '\x15C1', '\x15C2', '\x3', '\x2', '\x2', '\x2', '\x15C2', '\x15EE', '\x3',
    '\x2', '\x2', '\x2', '\x15C3', '\x15C5', '\a', '\xBB', '\x2', '\x2', '\x15C4',
    '\x15C6', '\a', '\xBC', '\x2', '\x2', '\x15C5', '\x15C4', '\x3', '\x2',
    '\x2', '\x2', '\x15C5', '\x15C6', '\x3', '\x2', '\x2', '\x2', '\x15C6',
    '\x15C8', '\x3', '\x2', '\x2', '\x2', '\x15C7', '\x15C9', '\x5', '\x228',
    '\x115', '\x2', '\x15C8', '\x15C7', '\x3', '\x2', '\x2', '\x2', '\x15C8',
    '\x15C9', '\x3', '\x2', '\x2', '\x2', '\x15C9', '\x15CB', '\x3', '\x2',
    '\x2', '\x2', '\x15CA', '\x15CC', '\t', '`', '\x2', '\x2', '\x15CB', '\x15CA',
    '\x3', '\x2', '\x2', '\x2', '\x15CB', '\x15CC', '\x3', '\x2', '\x2', '\x2',
    '\x15CC', '\x15CE', '\x3', '\x2', '\x2', '\x2', '\x15CD', '\x15CF', '\a',
    '\xB3', '\x2', '\x2', '\x15CE', '\x15CD', '\x3', '\x2', '\x2', '\x2',
    '\x15CE', '\x15CF', '\x3', '\x2', '\x2', '\x2', '\x15CF', '\x15EE', '\x3',
    '\x2', '\x2', '\x2', '\x15D0', '\x15D2', '\t', '\x61', '\x2', '\x2', '\x15D1',
    '\x15D3', '\x5', '\x22A', '\x116', '\x2', '\x15D2', '\x15D1', '\x3', '\x2',
    '\x2', '\x2', '\x15D2', '\x15D3', '\x3', '\x2', '\x2', '\x2', '\x15D3',
    '\x15D5', '\x3', '\x2', '\x2', '\x2', '\x15D4', '\x15D6', '\t', '`', '\x2',
    '\x2', '\x15D5', '\x15D4', '\x3', '\x2', '\x2', '\x2', '\x15D5', '\x15D6',
    '\x3', '\x2', '\x2', '\x2', '\x15D6', '\x15D8', '\x3', '\x2', '\x2', '\x2',
    '\x15D7', '\x15D9', '\a', '\xB3', '\x2', '\x2', '\x15D8', '\x15D7', '\x3',
    '\x2', '\x2', '\x2', '\x15D8', '\x15D9', '\x3', '\x2', '\x2', '\x2', '\x15D9',
    '\x15EE', '\x3', '\x2', '\x2', '\x2', '\x15DA', '\x15EE', '\t', '\x62',
    '\x2', '\x2', '\x15DB', '\x15DD', '\t', '\x63', '\x2', '\x2', '\x15DC',
    '\x15DE', '\x5', '\x226', '\x114', '\x2', '\x15DD', '\x15DC', '\x3', '\x2',
    '\x2', '\x2', '\x15DD', '\x15DE', '\x3', '\x2', '\x2', '\x2', '\x15DE',
    '\x15EE', '\x3', '\x2', '\x2', '\x2', '\x15DF', '\x15E0', '\t', '\x64',
    '\x2', '\x2', '\x15E0', '\x15E2', '\x5', '\x222', '\x112', '\x2', '\x15E1',
    '\x15E3', '\a', '\xCA', '\x2', '\x2', '\x15E2', '\x15E1', '\x3', '\x2',
    '\x2', '\x2', '\x15E2', '\x15E3', '\x3', '\x2', '\x2', '\x2', '\x15E3',
    '\x15EA', '\x3', '\x2', '\x2', '\x2', '\x15E4', '\x15E5', '\a', '\x18',
    '\x2', '\x2', '\x15E5', '\x15E8', '\a', '\x8C', '\x2', '\x2', '\x15E6',
    '\x15E8', '\a', '\x2B7', '\x2', '\x2', '\x15E7', '\x15E4', '\x3', '\x2',
    '\x2', '\x2', '\x15E7', '\x15E6', '\x3', '\x2', '\x2', '\x2', '\x15E8',
    '\x15E9', '\x3', '\x2', '\x2', '\x2', '\x15E9', '\x15EB', '\x5', '\x1FE',
    '\x100', '\x2', '\x15EA', '\x15E7', '\x3', '\x2', '\x2', '\x2', '\x15EA',
    '\x15EB', '\x3', '\x2', '\x2', '\x2', '\x15EB', '\x15EE', '\x3', '\x2',
    '\x2', '\x2', '\x15EC', '\x15EE', '\t', '\x65', '\x2', '\x2', '\x15ED',
    '\x1583', '\x3', '\x2', '\x2', '\x2', '\x15ED', '\x1596', '\x3', '\x2',
    '\x2', '\x2', '\x15ED', '\x159E', '\x3', '\x2', '\x2', '\x2', '\x15ED',
    '\x15A6', '\x3', '\x2', '\x2', '\x2', '\x15ED', '\x15AF', '\x3', '\x2',
    '\x2', '\x2', '\x15ED', '\x15B9', '\x3', '\x2', '\x2', '\x2', '\x15ED',
    '\x15C3', '\x3', '\x2', '\x2', '\x2', '\x15ED', '\x15D0', '\x3', '\x2',
    '\x2', '\x2', '\x15ED', '\x15DA', '\x3', '\x2', '\x2', '\x2', '\x15ED',
    '\x15DB', '\x3', '\x2', '\x2', '\x2', '\x15ED', '\x15DF', '\x3', '\x2',
    '\x2', '\x2', '\x15ED', '\x15EC', '\x3', '\x2', '\x2', '\x2', '\x15EE',
    '\x221', '\x3', '\x2', '\x2', '\x2', '\x15EF', '\x15F0', '\a', '\x3D8',
    '\x2', '\x2', '\x15F0', '\x15F5', '\a', '\x3E7', '\x2', '\x2', '\x15F1',
    '\x15F2', '\a', '\x3DA', '\x2', '\x2', '\x15F2', '\x15F4', '\a', '\x3E7',
    '\x2', '\x2', '\x15F3', '\x15F1', '\x3', '\x2', '\x2', '\x2', '\x15F4',
    '\x15F7', '\x3', '\x2', '\x2', '\x2', '\x15F5', '\x15F3', '\x3', '\x2',
    '\x2', '\x2', '\x15F5', '\x15F6', '\x3', '\x2', '\x2', '\x2', '\x15F6',
    '\x15F8', '\x3', '\x2', '\x2', '\x2', '\x15F7', '\x15F5', '\x3', '\x2',
    '\x2', '\x2', '\x15F8', '\x15F9', '\a', '\x3D9', '\x2', '\x2', '\x15F9',
    '\x223', '\x3', '\x2', '\x2', '\x2', '\x15FA', '\x15FC', '\t', '\x66',
    '\x2', '\x2', '\x15FB', '\x15FD', '\x5', '\x226', '\x114', '\x2', '\x15FC',
    '\x15FB', '\x3', '\x2', '\x2', '\x2', '\x15FC', '\x15FD', '\x3', '\x2',
    '\x2', '\x2', '\x15FD', '\x1614', '\x3', '\x2', '\x2', '\x2', '\x15FE',
    '\x1600', '\a', '\xC6', '\x2', '\x2', '\x15FF', '\x1601', '\x5', '\x226',
    '\x114', '\x2', '\x1600', '\x15FF', '\x3', '\x2', '\x2', '\x2', '\x1600',
    '\x1601', '\x3', '\x2', '\x2', '\x2', '\x1601', '\x1608', '\x3', '\x2',
    '\x2', '\x2', '\x1602', '\x1603', '\a', '\x18', '\x2', '\x2', '\x1603',
    '\x1606', '\a', '\x8C', '\x2', '\x2', '\x1604', '\x1606', '\a', '\x2B7',
    '\x2', '\x2', '\x1605', '\x1602', '\x3', '\x2', '\x2', '\x2', '\x1605',
    '\x1604', '\x3', '\x2', '\x2', '\x2', '\x1606', '\x1607', '\x3', '\x2',
    '\x2', '\x2', '\x1607', '\x1609', '\x5', '\x1FE', '\x100', '\x2', '\x1608',
    '\x1605', '\x3', '\x2', '\x2', '\x2', '\x1608', '\x1609', '\x3', '\x2',
    '\x2', '\x2', '\x1609', '\x1614', '\x3', '\x2', '\x2', '\x2', '\x160A',
    '\x1614', '\t', 'g', '\x2', '\x2', '\x160B', '\x160D', '\a', '\xBE', '\x2',
    '\x2', '\x160C', '\x160E', '\x5', '\x228', '\x115', '\x2', '\x160D', '\x160C',
    '\x3', '\x2', '\x2', '\x2', '\x160D', '\x160E', '\x3', '\x2', '\x2', '\x2',
    '\x160E', '\x1614', '\x3', '\x2', '\x2', '\x2', '\x160F', '\x1611', '\t',
    '`', '\x2', '\x2', '\x1610', '\x1612', '\a', '\xB8', '\x2', '\x2', '\x1611',
    '\x1610', '\x3', '\x2', '\x2', '\x2', '\x1611', '\x1612', '\x3', '\x2',
    '\x2', '\x2', '\x1612', '\x1614', '\x3', '\x2', '\x2', '\x2', '\x1613',
    '\x15FA', '\x3', '\x2', '\x2', '\x2', '\x1613', '\x15FE', '\x3', '\x2',
    '\x2', '\x2', '\x1613', '\x160A', '\x3', '\x2', '\x2', '\x2', '\x1613',
    '\x160B', '\x3', '\x2', '\x2', '\x2', '\x1613', '\x160F', '\x3', '\x2',
    '\x2', '\x2', '\x1614', '\x225', '\x3', '\x2', '\x2', '\x2', '\x1615',
    '\x1616', '\a', '\x3D8', '\x2', '\x2', '\x1616', '\x1617', '\x5', '\x212',
    '\x10A', '\x2', '\x1617', '\x1618', '\a', '\x3D9', '\x2', '\x2', '\x1618',
    '\x227', '\x3', '\x2', '\x2', '\x2', '\x1619', '\x161A', '\a', '\x3D8',
    '\x2', '\x2', '\x161A', '\x161B', '\x5', '\x212', '\x10A', '\x2', '\x161B',
    '\x161C', '\a', '\x3DA', '\x2', '\x2', '\x161C', '\x161D', '\x5', '\x212',
    '\x10A', '\x2', '\x161D', '\x161E', '\a', '\x3D9', '\x2', '\x2', '\x161E',
    '\x229', '\x3', '\x2', '\x2', '\x2', '\x161F', '\x1620', '\a', '\x3D8',
    '\x2', '\x2', '\x1620', '\x1623', '\x5', '\x212', '\x10A', '\x2', '\x1621',
    '\x1622', '\a', '\x3DA', '\x2', '\x2', '\x1622', '\x1624', '\x5', '\x212',
    '\x10A', '\x2', '\x1623', '\x1621', '\x3', '\x2', '\x2', '\x2', '\x1623',
    '\x1624', '\x3', '\x2', '\x2', '\x2', '\x1624', '\x1625', '\x3', '\x2',
    '\x2', '\x2', '\x1625', '\x1626', '\a', '\x3D9', '\x2', '\x2', '\x1626',
    '\x22B', '\x3', '\x2', '\x2', '\x2', '\x1627', '\x162C', '\x5', '\x20C',
    '\x107', '\x2', '\x1628', '\x1629', '\a', '\x3DA', '\x2', '\x2', '\x1629',
    '\x162B', '\x5', '\x20C', '\x107', '\x2', '\x162A', '\x1628', '\x3', '\x2',
    '\x2', '\x2', '\x162B', '\x162E', '\x3', '\x2', '\x2', '\x2', '\x162C',
    '\x162A', '\x3', '\x2', '\x2', '\x2', '\x162C', '\x162D', '\x3', '\x2',
    '\x2', '\x2', '\x162D', '\x22D', '\x3', '\x2', '\x2', '\x2', '\x162E',
    '\x162C', '\x3', '\x2', '\x2', '\x2', '\x162F', '\x1634', '\x5', '\x1F4',
    '\xFB', '\x2', '\x1630', '\x1631', '\a', '\x3DA', '\x2', '\x2', '\x1631',
    '\x1633', '\x5', '\x1F4', '\xFB', '\x2', '\x1632', '\x1630', '\x3', '\x2',
    '\x2', '\x2', '\x1633', '\x1636', '\x3', '\x2', '\x2', '\x2', '\x1634',
    '\x1632', '\x3', '\x2', '\x2', '\x2', '\x1634', '\x1635', '\x3', '\x2',
    '\x2', '\x2', '\x1635', '\x22F', '\x3', '\x2', '\x2', '\x2', '\x1636',
    '\x1634', '\x3', '\x2', '\x2', '\x2', '\x1637', '\x1638', '\a', '\x3D8',
    '\x2', '\x2', '\x1638', '\x163D', '\x5', '\x1F8', '\xFD', '\x2', '\x1639',
    '\x163A', '\a', '\x3DA', '\x2', '\x2', '\x163A', '\x163C', '\x5', '\x1F8',
    '\xFD', '\x2', '\x163B', '\x1639', '\x3', '\x2', '\x2', '\x2', '\x163C',
    '\x163F', '\x3', '\x2', '\x2', '\x2', '\x163D', '\x163B', '\x3', '\x2',
    '\x2', '\x2', '\x163D', '\x163E', '\x3', '\x2', '\x2', '\x2', '\x163E',
    '\x1640', '\x3', '\x2', '\x2', '\x2', '\x163F', '\x163D', '\x3', '\x2',
    '\x2', '\x2', '\x1640', '\x1641', '\a', '\x3D9', '\x2', '\x2', '\x1641',
    '\x231', '\x3', '\x2', '\x2', '\x2', '\x1642', '\x1647', '\x5', '\x25A',
    '\x12E', '\x2', '\x1643', '\x1644', '\a', '\x3DA', '\x2', '\x2', '\x1644',
    '\x1646', '\x5', '\x25A', '\x12E', '\x2', '\x1645', '\x1643', '\x3', '\x2',
    '\x2', '\x2', '\x1646', '\x1649', '\x3', '\x2', '\x2', '\x2', '\x1647',
    '\x1645', '\x3', '\x2', '\x2', '\x2', '\x1647', '\x1648', '\x3', '\x2',
    '\x2', '\x2', '\x1648', '\x233', '\x3', '\x2', '\x2', '\x2', '\x1649',
    '\x1647', '\x3', '\x2', '\x2', '\x2', '\x164A', '\x164F', '\x5', '\x240',
    '\x121', '\x2', '\x164B', '\x164C', '\a', '\x3DA', '\x2', '\x2', '\x164C',
    '\x164E', '\x5', '\x240', '\x121', '\x2', '\x164D', '\x164B', '\x3', '\x2',
    '\x2', '\x2', '\x164E', '\x1651', '\x3', '\x2', '\x2', '\x2', '\x164F',
    '\x164D', '\x3', '\x2', '\x2', '\x2', '\x164F', '\x1650', '\x3', '\x2',
    '\x2', '\x2', '\x1650', '\x235', '\x3', '\x2', '\x2', '\x2', '\x1651',
    '\x164F', '\x3', '\x2', '\x2', '\x2', '\x1652', '\x1657', '\x5', '\x21E',
    '\x110', '\x2', '\x1653', '\x1654', '\a', '\x3DA', '\x2', '\x2', '\x1654',
    '\x1656', '\x5', '\x21E', '\x110', '\x2', '\x1655', '\x1653', '\x3', '\x2',
    '\x2', '\x2', '\x1656', '\x1659', '\x3', '\x2', '\x2', '\x2', '\x1657',
    '\x1655', '\x3', '\x2', '\x2', '\x2', '\x1657', '\x1658', '\x3', '\x2',
    '\x2', '\x2', '\x1658', '\x237', '\x3', '\x2', '\x2', '\x2', '\x1659',
    '\x1657', '\x3', '\x2', '\x2', '\x2', '\x165A', '\x165F', '\a', '\x3E7',
    '\x2', '\x2', '\x165B', '\x165C', '\a', '\x3DA', '\x2', '\x2', '\x165C',
    '\x165E', '\a', '\x3E7', '\x2', '\x2', '\x165D', '\x165B', '\x3', '\x2',
    '\x2', '\x2', '\x165E', '\x1661', '\x3', '\x2', '\x2', '\x2', '\x165F',
    '\x165D', '\x3', '\x2', '\x2', '\x2', '\x165F', '\x1660', '\x3', '\x2',
    '\x2', '\x2', '\x1660', '\x239', '\x3', '\x2', '\x2', '\x2', '\x1661',
    '\x165F', '\x3', '\x2', '\x2', '\x2', '\x1662', '\x1667', '\a', '\x3F2',
    '\x2', '\x2', '\x1663', '\x1664', '\a', '\x3DA', '\x2', '\x2', '\x1664',
    '\x1666', '\a', '\x3F2', '\x2', '\x2', '\x1665', '\x1663', '\x3', '\x2',
    '\x2', '\x2', '\x1666', '\x1669', '\x3', '\x2', '\x2', '\x2', '\x1667',
    '\x1665', '\x3', '\x2', '\x2', '\x2', '\x1667', '\x1668', '\x3', '\x2',
    '\x2', '\x2', '\x1668', '\x23B', '\x3', '\x2', '\x2', '\x2', '\x1669',
    '\x1667', '\x3', '\x2', '\x2', '\x2', '\x166A', '\x1676', '\a', 'j', '\x2',
    '\x2', '\x166B', '\x166D', '\x5', '\x260', '\x131', '\x2', '\x166C', '\x166B',
    '\x3', '\x2', '\x2', '\x2', '\x166C', '\x166D', '\x3', '\x2', '\x2', '\x2',
    '\x166D', '\x166E', '\x3', '\x2', '\x2', '\x2', '\x166E', '\x1676', '\x5',
    '\x21E', '\x110', '\x2', '\x166F', '\x1673', '\x5', '\x23E', '\x120',
    '\x2', '\x1670', '\x1671', '\a', 'l', '\x2', '\x2', '\x1671', '\x1672',
    '\a', '\xA8', '\x2', '\x2', '\x1672', '\x1674', '\x5', '\x23E', '\x120',
    '\x2', '\x1673', '\x1670', '\x3', '\x2', '\x2', '\x2', '\x1673', '\x1674',
    '\x3', '\x2', '\x2', '\x2', '\x1674', '\x1676', '\x3', '\x2', '\x2', '\x2',
    '\x1675', '\x166A', '\x3', '\x2', '\x2', '\x2', '\x1675', '\x166C', '\x3',
    '\x2', '\x2', '\x2', '\x1675', '\x166F', '\x3', '\x2', '\x2', '\x2', '\x1676',
    '\x23D', '\x3', '\x2', '\x2', '\x2', '\x1677', '\x167D', '\t', 'h', '\x2',
    '\x2', '\x1678', '\x167A', '\a', '\x3D8', '\x2', '\x2', '\x1679', '\x167B',
    '\x5', '\x212', '\x10A', '\x2', '\x167A', '\x1679', '\x3', '\x2', '\x2',
    '\x2', '\x167A', '\x167B', '\x3', '\x2', '\x2', '\x2', '\x167B', '\x167C',
    '\x3', '\x2', '\x2', '\x2', '\x167C', '\x167E', '\a', '\x3D9', '\x2',
    '\x2', '\x167D', '\x1678', '\x3', '\x2', '\x2', '\x2', '\x167D', '\x167E',
    '\x3', '\x2', '\x2', '\x2', '\x167E', '\x1686', '\x3', '\x2', '\x2', '\x2',
    '\x167F', '\x1680', '\a', '\xFC', '\x2', '\x2', '\x1680', '\x1682', '\a',
    '\x3D8', '\x2', '\x2', '\x1681', '\x1683', '\x5', '\x212', '\x10A', '\x2',
    '\x1682', '\x1681', '\x3', '\x2', '\x2', '\x2', '\x1682', '\x1683', '\x3',
    '\x2', '\x2', '\x2', '\x1683', '\x1684', '\x3', '\x2', '\x2', '\x2', '\x1684',
    '\x1686', '\a', '\x3D9', '\x2', '\x2', '\x1685', '\x1677', '\x3', '\x2',
    '\x2', '\x2', '\x1685', '\x167F', '\x3', '\x2', '\x2', '\x2', '\x1686',
    '\x23F', '\x3', '\x2', '\x2', '\x2', '\x1687', '\x168A', '\x5', '\x25A',
    '\x12E', '\x2', '\x1688', '\x168A', '\a', '(', '\x2', '\x2', '\x1689',
    '\x1687', '\x3', '\x2', '\x2', '\x2', '\x1689', '\x1688', '\x3', '\x2',
    '\x2', '\x2', '\x168A', '\x241', '\x3', '\x2', '\x2', '\x2', '\x168B',
    '\x168C', '\a', 'G', '\x2', '\x2', '\x168C', '\x168D', '\a', '\x37', '\x2',
    '\x2', '\x168D', '\x243', '\x3', '\x2', '\x2', '\x2', '\x168E', '\x168F',
    '\a', 'G', '\x2', '\x2', '\x168F', '\x1690', '\a', 'h', '\x2', '\x2',
    '\x1690', '\x1691', '\a', '\x37', '\x2', '\x2', '\x1691', '\x245', '\x3',
    '\x2', '\x2', '\x2', '\x1692', '\x16A4', '\x5', '\x248', '\x125', '\x2',
    '\x1693', '\x16A4', '\x5', '\x250', '\x129', '\x2', '\x1694', '\x1695',
    '\x5', '\x252', '\x12A', '\x2', '\x1695', '\x1697', '\a', '\x3D8', '\x2',
    '\x2', '\x1696', '\x1698', '\x5', '\x256', '\x12C', '\x2', '\x1697', '\x1696',
    '\x3', '\x2', '\x2', '\x2', '\x1697', '\x1698', '\x3', '\x2', '\x2', '\x2',
    '\x1698', '\x1699', '\x3', '\x2', '\x2', '\x2', '\x1699', '\x169A', '\a',
    '\x3D9', '\x2', '\x2', '\x169A', '\x16A4', '\x3', '\x2', '\x2', '\x2',
    '\x169B', '\x169C', '\x5', '\x1F2', '\xFA', '\x2', '\x169C', '\x169E',
    '\a', '\x3D8', '\x2', '\x2', '\x169D', '\x169F', '\x5', '\x256', '\x12C',
    '\x2', '\x169E', '\x169D', '\x3', '\x2', '\x2', '\x2', '\x169E', '\x169F',
    '\x3', '\x2', '\x2', '\x2', '\x169F', '\x16A0', '\x3', '\x2', '\x2', '\x2',
    '\x16A0', '\x16A1', '\a', '\x3D9', '\x2', '\x2', '\x16A1', '\x16A4', '\x3',
    '\x2', '\x2', '\x2', '\x16A2', '\x16A4', '\x5', '\x254', '\x12B', '\x2',
    '\x16A3', '\x1692', '\x3', '\x2', '\x2', '\x2', '\x16A3', '\x1693', '\x3',
    '\x2', '\x2', '\x2', '\x16A3', '\x1694', '\x3', '\x2', '\x2', '\x2', '\x16A3',
    '\x169B', '\x3', '\x2', '\x2', '\x2', '\x16A3', '\x16A2', '\x3', '\x2',
    '\x2', '\x2', '\x16A4', '\x247', '\x3', '\x2', '\x2', '\x2', '\x16A5',
    '\x1743', '\t', 'i', '\x2', '\x2', '\x16A6', '\x16A7', '\a', '\x1F', '\x2',
    '\x2', '\x16A7', '\x16A8', '\a', '\x3D8', '\x2', '\x2', '\x16A8', '\x16A9',
    '\x5', '\x25A', '\x12E', '\x2', '\x16A9', '\x16AA', '\a', '\x3DA', '\x2',
    '\x2', '\x16AA', '\x16AB', '\x5', '\x224', '\x113', '\x2', '\x16AB', '\x16AC',
    '\a', '\x3D9', '\x2', '\x2', '\x16AC', '\x1743', '\x3', '\x2', '\x2',
    '\x2', '\x16AD', '\x16AE', '\a', '\x1F', '\x2', '\x2', '\x16AE', '\x16AF',
    '\a', '\x3D8', '\x2', '\x2', '\x16AF', '\x16B0', '\x5', '\x25A', '\x12E',
    '\x2', '\x16B0', '\x16B1', '\a', '\xAB', '\x2', '\x2', '\x16B1', '\x16B2',
    '\x5', '\x1FE', '\x100', '\x2', '\x16B2', '\x16B3', '\a', '\x3D9', '\x2',
    '\x2', '\x16B3', '\x1743', '\x3', '\x2', '\x2', '\x2', '\x16B4', '\x16B5',
    '\a', '\x16', '\x2', '\x2', '\x16B5', '\x16B6', '\a', '\x3D8', '\x2',
    '\x2', '\x16B6', '\x16B7', '\x5', '\x25A', '\x12E', '\x2', '\x16B7', '\x16B8',
    '\a', '\r', '\x2', '\x2', '\x16B8', '\x16B9', '\x5', '\x224', '\x113',
    '\x2', '\x16B9', '\x16BA', '\a', '\x3D9', '\x2', '\x2', '\x16BA', '\x1743',
    '\x3', '\x2', '\x2', '\x2', '\x16BB', '\x16BC', '\a', '\xAC', '\x2', '\x2',
    '\x16BC', '\x16BD', '\a', '\x3D8', '\x2', '\x2', '\x16BD', '\x16BE', '\x5',
    '\x1F6', '\xFC', '\x2', '\x16BE', '\x16BF', '\a', '\x3D9', '\x2', '\x2',
    '\x16BF', '\x1743', '\x3', '\x2', '\x2', '\x2', '\x16C0', '\x16C1', '\a',
    '\x15', '\x2', '\x2', '\x16C1', '\x16C3', '\x5', '\x25A', '\x12E', '\x2',
    '\x16C2', '\x16C4', '\x5', '\x24A', '\x126', '\x2', '\x16C3', '\x16C2',
    '\x3', '\x2', '\x2', '\x2', '\x16C4', '\x16C5', '\x3', '\x2', '\x2', '\x2',
    '\x16C5', '\x16C3', '\x3', '\x2', '\x2', '\x2', '\x16C5', '\x16C6', '\x3',
    '\x2', '\x2', '\x2', '\x16C6', '\x16C9', '\x3', '\x2', '\x2', '\x2', '\x16C7',
    '\x16C8', '\a', '\x33', '\x2', '\x2', '\x16C8', '\x16CA', '\x5', '\x258',
    '\x12D', '\x2', '\x16C9', '\x16C7', '\x3', '\x2', '\x2', '\x2', '\x16C9',
    '\x16CA', '\x3', '\x2', '\x2', '\x2', '\x16CA', '\x16CB', '\x3', '\x2',
    '\x2', '\x2', '\x16CB', '\x16CC', '\a', '\x14B', '\x2', '\x2', '\x16CC',
    '\x1743', '\x3', '\x2', '\x2', '\x2', '\x16CD', '\x16CF', '\a', '\x15',
    '\x2', '\x2', '\x16CE', '\x16D0', '\x5', '\x24A', '\x126', '\x2', '\x16CF',
    '\x16CE', '\x3', '\x2', '\x2', '\x2', '\x16D0', '\x16D1', '\x3', '\x2',
    '\x2', '\x2', '\x16D1', '\x16CF', '\x3', '\x2', '\x2', '\x2', '\x16D1',
    '\x16D2', '\x3', '\x2', '\x2', '\x2', '\x16D2', '\x16D5', '\x3', '\x2',
    '\x2', '\x2', '\x16D3', '\x16D4', '\a', '\x33', '\x2', '\x2', '\x16D4',
    '\x16D6', '\x5', '\x258', '\x12D', '\x2', '\x16D5', '\x16D3', '\x3', '\x2',
    '\x2', '\x2', '\x16D5', '\x16D6', '\x3', '\x2', '\x2', '\x2', '\x16D6',
    '\x16D7', '\x3', '\x2', '\x2', '\x2', '\x16D7', '\x16D8', '\a', '\x14B',
    '\x2', '\x2', '\x16D8', '\x1743', '\x3', '\x2', '\x2', '\x2', '\x16D9',
    '\x16DA', '\a', '\xC6', '\x2', '\x2', '\x16DA', '\x16DB', '\a', '\x3D8',
    '\x2', '\x2', '\x16DB', '\x16DE', '\x5', '\x256', '\x12C', '\x2', '\x16DC',
    '\x16DD', '\a', '\xAB', '\x2', '\x2', '\x16DD', '\x16DF', '\x5', '\x1FE',
    '\x100', '\x2', '\x16DE', '\x16DC', '\x3', '\x2', '\x2', '\x2', '\x16DE',
    '\x16DF', '\x3', '\x2', '\x2', '\x2', '\x16DF', '\x16E0', '\x3', '\x2',
    '\x2', '\x2', '\x16E0', '\x16E1', '\a', '\x3D9', '\x2', '\x2', '\x16E1',
    '\x1743', '\x3', '\x2', '\x2', '\x2', '\x16E2', '\x16E3', '\a', '\xFD',
    '\x2', '\x2', '\x16E3', '\x16E6', '\a', '\x3D8', '\x2', '\x2', '\x16E4',
    '\x16E7', '\x5', '\x216', '\x10C', '\x2', '\x16E5', '\x16E7', '\x5', '\x25A',
    '\x12E', '\x2', '\x16E6', '\x16E4', '\x3', '\x2', '\x2', '\x2', '\x16E6',
    '\x16E5', '\x3', '\x2', '\x2', '\x2', '\x16E7', '\x16E8', '\x3', '\x2',
    '\x2', '\x2', '\x16E8', '\x16EB', '\a', 'I', '\x2', '\x2', '\x16E9', '\x16EC',
    '\x5', '\x216', '\x10C', '\x2', '\x16EA', '\x16EC', '\x5', '\x25A', '\x12E',
    '\x2', '\x16EB', '\x16E9', '\x3', '\x2', '\x2', '\x2', '\x16EB', '\x16EA',
    '\x3', '\x2', '\x2', '\x2', '\x16EC', '\x16ED', '\x3', '\x2', '\x2', '\x2',
    '\x16ED', '\x16EE', '\a', '\x3D9', '\x2', '\x2', '\x16EE', '\x1743', '\x3',
    '\x2', '\x2', '\x2', '\x16EF', '\x16F0', '\t', 'j', '\x2', '\x2', '\x16F0',
    '\x16F3', '\a', '\x3D8', '\x2', '\x2', '\x16F1', '\x16F4', '\x5', '\x216',
    '\x10C', '\x2', '\x16F2', '\x16F4', '\x5', '\x25A', '\x12E', '\x2', '\x16F3',
    '\x16F1', '\x3', '\x2', '\x2', '\x2', '\x16F3', '\x16F2', '\x3', '\x2',
    '\x2', '\x2', '\x16F4', '\x16F5', '\x3', '\x2', '\x2', '\x2', '\x16F5',
    '\x16F8', '\a', '?', '\x2', '\x2', '\x16F6', '\x16F9', '\x5', '\x212',
    '\x10A', '\x2', '\x16F7', '\x16F9', '\x5', '\x25A', '\x12E', '\x2', '\x16F8',
    '\x16F6', '\x3', '\x2', '\x2', '\x2', '\x16F8', '\x16F7', '\x3', '\x2',
    '\x2', '\x2', '\x16F9', '\x16FF', '\x3', '\x2', '\x2', '\x2', '\x16FA',
    '\x16FD', '\a', '<', '\x2', '\x2', '\x16FB', '\x16FE', '\x5', '\x212',
    '\x10A', '\x2', '\x16FC', '\x16FE', '\x5', '\x25A', '\x12E', '\x2', '\x16FD',
    '\x16FB', '\x3', '\x2', '\x2', '\x2', '\x16FD', '\x16FC', '\x3', '\x2',
    '\x2', '\x2', '\x16FE', '\x1700', '\x3', '\x2', '\x2', '\x2', '\x16FF',
    '\x16FA', '\x3', '\x2', '\x2', '\x2', '\x16FF', '\x1700', '\x3', '\x2',
    '\x2', '\x2', '\x1700', '\x1701', '\x3', '\x2', '\x2', '\x2', '\x1701',
    '\x1702', '\a', '\x3D9', '\x2', '\x2', '\x1702', '\x1743', '\x3', '\x2',
    '\x2', '\x2', '\x1703', '\x1704', '\a', '\x101', '\x2', '\x2', '\x1704',
    '\x1705', '\a', '\x3D8', '\x2', '\x2', '\x1705', '\x1708', '\t', 'k',
    '\x2', '\x2', '\x1706', '\x1709', '\x5', '\x216', '\x10C', '\x2', '\x1707',
    '\x1709', '\x5', '\x25A', '\x12E', '\x2', '\x1708', '\x1706', '\x3', '\x2',
    '\x2', '\x2', '\x1708', '\x1707', '\x3', '\x2', '\x2', '\x2', '\x1708',
    '\x1709', '\x3', '\x2', '\x2', '\x2', '\x1709', '\x170A', '\x3', '\x2',
    '\x2', '\x2', '\x170A', '\x170D', '\a', '?', '\x2', '\x2', '\x170B', '\x170E',
    '\x5', '\x216', '\x10C', '\x2', '\x170C', '\x170E', '\x5', '\x25A', '\x12E',
    '\x2', '\x170D', '\x170B', '\x3', '\x2', '\x2', '\x2', '\x170D', '\x170C',
    '\x3', '\x2', '\x2', '\x2', '\x170E', '\x170F', '\x3', '\x2', '\x2', '\x2',
    '\x170F', '\x1710', '\a', '\x3D9', '\x2', '\x2', '\x1710', '\x1743', '\x3',
    '\x2', '\x2', '\x2', '\x1711', '\x1712', '\a', '\x101', '\x2', '\x2',
    '\x1712', '\x1715', '\a', '\x3D8', '\x2', '\x2', '\x1713', '\x1716', '\x5',
    '\x216', '\x10C', '\x2', '\x1714', '\x1716', '\x5', '\x25A', '\x12E',
    '\x2', '\x1715', '\x1713', '\x3', '\x2', '\x2', '\x2', '\x1715', '\x1714',
    '\x3', '\x2', '\x2', '\x2', '\x1716', '\x1717', '\x3', '\x2', '\x2', '\x2',
    '\x1717', '\x171A', '\a', '?', '\x2', '\x2', '\x1718', '\x171B', '\x5',
    '\x216', '\x10C', '\x2', '\x1719', '\x171B', '\x5', '\x25A', '\x12E',
    '\x2', '\x171A', '\x1718', '\x3', '\x2', '\x2', '\x2', '\x171A', '\x1719',
    '\x3', '\x2', '\x2', '\x2', '\x171B', '\x171C', '\x3', '\x2', '\x2', '\x2',
    '\x171C', '\x171D', '\a', '\x3D9', '\x2', '\x2', '\x171D', '\x1743', '\x3',
    '\x2', '\x2', '\x2', '\x171E', '\x171F', '\a', '\x3B9', '\x2', '\x2',
    '\x171F', '\x1722', '\a', '\x3D8', '\x2', '\x2', '\x1720', '\x1723', '\x5',
    '\x216', '\x10C', '\x2', '\x1721', '\x1723', '\x5', '\x25A', '\x12E',
    '\x2', '\x1722', '\x1720', '\x3', '\x2', '\x2', '\x2', '\x1722', '\x1721',
    '\x3', '\x2', '\x2', '\x2', '\x1723', '\x172A', '\x3', '\x2', '\x2', '\x2',
    '\x1724', '\x1725', '\a', '\r', '\x2', '\x2', '\x1725', '\x1726', '\t',
    'l', '\x2', '\x2', '\x1726', '\x1727', '\a', '\x3D8', '\x2', '\x2', '\x1727',
    '\x1728', '\x5', '\x212', '\x10A', '\x2', '\x1728', '\x1729', '\a', '\x3D9',
    '\x2', '\x2', '\x1729', '\x172B', '\x3', '\x2', '\x2', '\x2', '\x172A',
    '\x1724', '\x3', '\x2', '\x2', '\x2', '\x172A', '\x172B', '\x3', '\x2',
    '\x2', '\x2', '\x172B', '\x172D', '\x3', '\x2', '\x2', '\x2', '\x172C',
    '\x172E', '\x5', '\x24C', '\x127', '\x2', '\x172D', '\x172C', '\x3', '\x2',
    '\x2', '\x2', '\x172D', '\x172E', '\x3', '\x2', '\x2', '\x2', '\x172E',
    '\x172F', '\x3', '\x2', '\x2', '\x2', '\x172F', '\x1730', '\a', '\x3D9',
    '\x2', '\x2', '\x1730', '\x1743', '\x3', '\x2', '\x2', '\x2', '\x1731',
    '\x1732', '\a', '\xFA', '\x2', '\x2', '\x1732', '\x1733', '\a', '\x3D8',
    '\x2', '\x2', '\x1733', '\x1734', '\x5', '<', '\x1F', '\x2', '\x1734',
    '\x1737', '\a', '?', '\x2', '\x2', '\x1735', '\x1738', '\x5', '\x216',
    '\x10C', '\x2', '\x1736', '\x1738', '\x5', '\x25A', '\x12E', '\x2', '\x1737',
    '\x1735', '\x3', '\x2', '\x2', '\x2', '\x1737', '\x1736', '\x3', '\x2',
    '\x2', '\x2', '\x1738', '\x1739', '\x3', '\x2', '\x2', '\x2', '\x1739',
    '\x173A', '\a', '\x3D9', '\x2', '\x2', '\x173A', '\x1743', '\x3', '\x2',
    '\x2', '\x2', '\x173B', '\x173C', '\a', '\x2F1', '\x2', '\x2', '\x173C',
    '\x173D', '\a', '\x3D8', '\x2', '\x2', '\x173D', '\x173E', '\t', 'm',
    '\x2', '\x2', '\x173E', '\x173F', '\a', '\x3DA', '\x2', '\x2', '\x173F',
    '\x1740', '\x5', '\x216', '\x10C', '\x2', '\x1740', '\x1741', '\a', '\x3D9',
    '\x2', '\x2', '\x1741', '\x1743', '\x3', '\x2', '\x2', '\x2', '\x1742',
    '\x16A5', '\x3', '\x2', '\x2', '\x2', '\x1742', '\x16A6', '\x3', '\x2',
    '\x2', '\x2', '\x1742', '\x16AD', '\x3', '\x2', '\x2', '\x2', '\x1742',
    '\x16B4', '\x3', '\x2', '\x2', '\x2', '\x1742', '\x16BB', '\x3', '\x2',
    '\x2', '\x2', '\x1742', '\x16C0', '\x3', '\x2', '\x2', '\x2', '\x1742',
    '\x16CD', '\x3', '\x2', '\x2', '\x2', '\x1742', '\x16D9', '\x3', '\x2',
    '\x2', '\x2', '\x1742', '\x16E2', '\x3', '\x2', '\x2', '\x2', '\x1742',
    '\x16EF', '\x3', '\x2', '\x2', '\x2', '\x1742', '\x1703', '\x3', '\x2',
    '\x2', '\x2', '\x1742', '\x1711', '\x3', '\x2', '\x2', '\x2', '\x1742',
    '\x171E', '\x3', '\x2', '\x2', '\x2', '\x1742', '\x1731', '\x3', '\x2',
    '\x2', '\x2', '\x1742', '\x173B', '\x3', '\x2', '\x2', '\x2', '\x1743',
    '\x249', '\x3', '\x2', '\x2', '\x2', '\x1744', '\x1745', '\a', '\xAD',
    '\x2', '\x2', '\x1745', '\x1746', '\x5', '\x258', '\x12D', '\x2', '\x1746',
    '\x1747', '\a', '\x9E', '\x2', '\x2', '\x1747', '\x1748', '\x5', '\x258',
    '\x12D', '\x2', '\x1748', '\x24B', '\x3', '\x2', '\x2', '\x2', '\x1749',
    '\x174A', '\a', '\x187', '\x2', '\x2', '\x174A', '\x174F', '\x5', '\x24E',
    '\x128', '\x2', '\x174B', '\x174C', '\a', '\x3DA', '\x2', '\x2', '\x174C',
    '\x174E', '\x5', '\x24E', '\x128', '\x2', '\x174D', '\x174B', '\x3', '\x2',
    '\x2', '\x2', '\x174E', '\x1751', '\x3', '\x2', '\x2', '\x2', '\x174F',
    '\x174D', '\x3', '\x2', '\x2', '\x2', '\x174F', '\x1750', '\x3', '\x2',
    '\x2', '\x2', '\x1750', '\x1758', '\x3', '\x2', '\x2', '\x2', '\x1751',
    '\x174F', '\x3', '\x2', '\x2', '\x2', '\x1752', '\x1753', '\a', '\x187',
    '\x2', '\x2', '\x1753', '\x1754', '\x5', '\x212', '\x10A', '\x2', '\x1754',
    '\x1755', '\a', '\x3CC', '\x2', '\x2', '\x1755', '\x1756', '\x5', '\x212',
    '\x10A', '\x2', '\x1756', '\x1758', '\x3', '\x2', '\x2', '\x2', '\x1757',
    '\x1749', '\x3', '\x2', '\x2', '\x2', '\x1757', '\x1752', '\x3', '\x2',
    '\x2', '\x2', '\x1758', '\x24D', '\x3', '\x2', '\x2', '\x2', '\x1759',
    '\x175B', '\x5', '\x212', '\x10A', '\x2', '\x175A', '\x175C', '\t', 'n',
    '\x2', '\x2', '\x175B', '\x175A', '\x3', '\x2', '\x2', '\x2', '\x175B',
    '\x175C', '\x3', '\x2', '\x2', '\x2', '\x175C', '\x24F', '\x3', '\x2',
    '\x2', '\x2', '\x175D', '\x175E', '\t', 'o', '\x2', '\x2', '\x175E', '\x1760',
    '\a', '\x3D8', '\x2', '\x2', '\x175F', '\x1761', '\t', '\'', '\x2', '\x2',
    '\x1760', '\x175F', '\x3', '\x2', '\x2', '\x2', '\x1760', '\x1761', '\x3',
    '\x2', '\x2', '\x2', '\x1761', '\x1762', '\x3', '\x2', '\x2', '\x2', '\x1762',
    '\x1763', '\x5', '\x258', '\x12D', '\x2', '\x1763', '\x1764', '\a', '\x3D9',
    '\x2', '\x2', '\x1764', '\x1796', '\x3', '\x2', '\x2', '\x2', '\x1765',
    '\x1766', '\a', '\xE6', '\x2', '\x2', '\x1766', '\x176C', '\a', '\x3D8',
    '\x2', '\x2', '\x1767', '\x176D', '\a', '\x3C7', '\x2', '\x2', '\x1768',
    '\x176A', '\a', '\b', '\x2', '\x2', '\x1769', '\x1768', '\x3', '\x2',
    '\x2', '\x2', '\x1769', '\x176A', '\x3', '\x2', '\x2', '\x2', '\x176A',
    '\x176B', '\x3', '\x2', '\x2', '\x2', '\x176B', '\x176D', '\x5', '\x258',
    '\x12D', '\x2', '\x176C', '\x1767', '\x3', '\x2', '\x2', '\x2', '\x176C',
    '\x1769', '\x3', '\x2', '\x2', '\x2', '\x176D', '\x176E', '\x3', '\x2',
    '\x2', '\x2', '\x176E', '\x1796', '\a', '\x3D9', '\x2', '\x2', '\x176F',
    '\x1770', '\a', '\xE6', '\x2', '\x2', '\x1770', '\x1771', '\a', '\x3D8',
    '\x2', '\x2', '\x1771', '\x1772', '\a', '/', '\x2', '\x2', '\x1772', '\x1773',
    '\x5', '\x256', '\x12C', '\x2', '\x1773', '\x1774', '\a', '\x3D9', '\x2',
    '\x2', '\x1774', '\x1796', '\x3', '\x2', '\x2', '\x2', '\x1775', '\x1776',
    '\t', 'p', '\x2', '\x2', '\x1776', '\x1778', '\a', '\x3D8', '\x2', '\x2',
    '\x1777', '\x1779', '\a', '\b', '\x2', '\x2', '\x1778', '\x1777', '\x3',
    '\x2', '\x2', '\x2', '\x1778', '\x1779', '\x3', '\x2', '\x2', '\x2', '\x1779',
    '\x177A', '\x3', '\x2', '\x2', '\x2', '\x177A', '\x177B', '\x5', '\x258',
    '\x12D', '\x2', '\x177B', '\x177C', '\a', '\x3D9', '\x2', '\x2', '\x177C',
    '\x1796', '\x3', '\x2', '\x2', '\x2', '\x177D', '\x177E', '\a', '\xE7',
    '\x2', '\x2', '\x177E', '\x1780', '\a', '\x3D8', '\x2', '\x2', '\x177F',
    '\x1781', '\a', '/', '\x2', '\x2', '\x1780', '\x177F', '\x3', '\x2', '\x2',
    '\x2', '\x1780', '\x1781', '\x3', '\x2', '\x2', '\x2', '\x1781', '\x1782',
    '\x3', '\x2', '\x2', '\x2', '\x1782', '\x178D', '\x5', '\x256', '\x12C',
    '\x2', '\x1783', '\x1784', '\a', 'q', '\x2', '\x2', '\x1784', '\x1785',
    '\a', '\x12', '\x2', '\x2', '\x1785', '\x178A', '\x5', '\xD2', 'j', '\x2',
    '\x1786', '\x1787', '\a', '\x3DA', '\x2', '\x2', '\x1787', '\x1789', '\x5',
    '\xD2', 'j', '\x2', '\x1788', '\x1786', '\x3', '\x2', '\x2', '\x2', '\x1789',
    '\x178C', '\x3', '\x2', '\x2', '\x2', '\x178A', '\x1788', '\x3', '\x2',
    '\x2', '\x2', '\x178A', '\x178B', '\x3', '\x2', '\x2', '\x2', '\x178B',
    '\x178E', '\x3', '\x2', '\x2', '\x2', '\x178C', '\x178A', '\x3', '\x2',
    '\x2', '\x2', '\x178D', '\x1783', '\x3', '\x2', '\x2', '\x2', '\x178D',
    '\x178E', '\x3', '\x2', '\x2', '\x2', '\x178E', '\x1791', '\x3', '\x2',
    '\x2', '\x2', '\x178F', '\x1790', '\a', '\x8D', '\x2', '\x2', '\x1790',
    '\x1792', '\a', '\x3E7', '\x2', '\x2', '\x1791', '\x178F', '\x3', '\x2',
    '\x2', '\x2', '\x1791', '\x1792', '\x3', '\x2', '\x2', '\x2', '\x1792',
    '\x1793', '\x3', '\x2', '\x2', '\x2', '\x1793', '\x1794', '\a', '\x3D9',
    '\x2', '\x2', '\x1794', '\x1796', '\x3', '\x2', '\x2', '\x2', '\x1795',
    '\x175D', '\x3', '\x2', '\x2', '\x2', '\x1795', '\x1765', '\x3', '\x2',
    '\x2', '\x2', '\x1795', '\x176F', '\x3', '\x2', '\x2', '\x2', '\x1795',
    '\x1775', '\x3', '\x2', '\x2', '\x2', '\x1795', '\x177D', '\x3', '\x2',
    '\x2', '\x2', '\x1796', '\x251', '\x3', '\x2', '\x2', '\x2', '\x1797',
    '\x17AF', '\x5', '\x276', '\x13C', '\x2', '\x1798', '\x17AF', '\a', '\x25A',
    '\x2', '\x2', '\x1799', '\x17AF', '\a', '\xF6', '\x2', '\x2', '\x179A',
    '\x17AF', '\a', '\xF2', '\x2', '\x2', '\x179B', '\x17AF', '\a', '\xF3',
    '\x2', '\x2', '\x179C', '\x17AF', '\a', '\xF4', '\x2', '\x2', '\x179D',
    '\x17AF', '\a', '\xF7', '\x2', '\x2', '\x179E', '\x17AF', '\a', '\xF8',
    '\x2', '\x2', '\x179F', '\x17AF', '\a', '\xF9', '\x2', '\x2', '\x17A0',
    '\x17AF', '\a', 'G', '\x2', '\x2', '\x17A1', '\x17AF', '\a', 'N', '\x2',
    '\x2', '\x17A2', '\x17AF', '\a', '\xF5', '\x2', '\x2', '\x17A3', '\x17AF',
    '\a', '\xFB', '\x2', '\x2', '\x17A4', '\x17AF', '\a', '\x1AA', '\x2',
    '\x2', '\x17A5', '\x17AF', '\a', '\xFC', '\x2', '\x2', '\x17A6', '\x17AF',
    '\a', '\x81', '\x2', '\x2', '\x17A7', '\x17AF', '\a', '\xFE', '\x2', '\x2',
    '\x17A8', '\x17AF', '\a', '\xFF', '\x2', '\x2', '\x17A9', '\x17AF', '\a',
    '\x100', '\x2', '\x2', '\x17AA', '\x17AF', '\a', '\x101', '\x2', '\x2',
    '\x17AB', '\x17AF', '\a', '\x102', '\x2', '\x2', '\x17AC', '\x17AF', '\a',
    '\x103', '\x2', '\x2', '\x17AD', '\x17AF', '\a', '\x104', '\x2', '\x2',
    '\x17AE', '\x1797', '\x3', '\x2', '\x2', '\x2', '\x17AE', '\x1798', '\x3',
    '\x2', '\x2', '\x2', '\x17AE', '\x1799', '\x3', '\x2', '\x2', '\x2', '\x17AE',
    '\x179A', '\x3', '\x2', '\x2', '\x2', '\x17AE', '\x179B', '\x3', '\x2',
    '\x2', '\x2', '\x17AE', '\x179C', '\x3', '\x2', '\x2', '\x2', '\x17AE',
    '\x179D', '\x3', '\x2', '\x2', '\x2', '\x17AE', '\x179E', '\x3', '\x2',
    '\x2', '\x2', '\x17AE', '\x179F', '\x3', '\x2', '\x2', '\x2', '\x17AE',
    '\x17A0', '\x3', '\x2', '\x2', '\x2', '\x17AE', '\x17A1', '\x3', '\x2',
    '\x2', '\x2', '\x17AE', '\x17A2', '\x3', '\x2', '\x2', '\x2', '\x17AE',
    '\x17A3', '\x3', '\x2', '\x2', '\x2', '\x17AE', '\x17A4', '\x3', '\x2',
    '\x2', '\x2', '\x17AE', '\x17A5', '\x3', '\x2', '\x2', '\x2', '\x17AE',
    '\x17A6', '\x3', '\x2', '\x2', '\x2', '\x17AE', '\x17A7', '\x3', '\x2',
    '\x2', '\x2', '\x17AE', '\x17A8', '\x3', '\x2', '\x2', '\x2', '\x17AE',
    '\x17A9', '\x3', '\x2', '\x2', '\x2', '\x17AE', '\x17AA', '\x3', '\x2',
    '\x2', '\x2', '\x17AE', '\x17AB', '\x3', '\x2', '\x2', '\x2', '\x17AE',
    '\x17AC', '\x3', '\x2', '\x2', '\x2', '\x17AE', '\x17AD', '\x3', '\x2',
    '\x2', '\x2', '\x17AF', '\x253', '\x3', '\x2', '\x2', '\x2', '\x17B0',
    '\x17B1', '\t', 'q', '\x2', '\x2', '\x17B1', '\x17B2', '\a', '\x3D8',
    '\x2', '\x2', '\x17B2', '\x17B3', '\x5', '\x258', '\x12D', '\x2', '\x17B3',
    '\x17B4', '\a', '\x3D9', '\x2', '\x2', '\x17B4', '\x255', '\x3', '\x2',
    '\x2', '\x2', '\x17B5', '\x17BA', '\x5', '\x21E', '\x110', '\x2', '\x17B6',
    '\x17BA', '\x5', '\x1F6', '\xFC', '\x2', '\x17B7', '\x17BA', '\x5', '\x246',
    '\x124', '\x2', '\x17B8', '\x17BA', '\x5', '\x25A', '\x12E', '\x2', '\x17B9',
    '\x17B5', '\x3', '\x2', '\x2', '\x2', '\x17B9', '\x17B6', '\x3', '\x2',
    '\x2', '\x2', '\x17B9', '\x17B7', '\x3', '\x2', '\x2', '\x2', '\x17B9',
    '\x17B8', '\x3', '\x2', '\x2', '\x2', '\x17BA', '\x17C4', '\x3', '\x2',
    '\x2', '\x2', '\x17BB', '\x17C0', '\a', '\x3DA', '\x2', '\x2', '\x17BC',
    '\x17C1', '\x5', '\x21E', '\x110', '\x2', '\x17BD', '\x17C1', '\x5', '\x1F6',
    '\xFC', '\x2', '\x17BE', '\x17C1', '\x5', '\x246', '\x124', '\x2', '\x17BF',
    '\x17C1', '\x5', '\x25A', '\x12E', '\x2', '\x17C0', '\x17BC', '\x3', '\x2',
    '\x2', '\x2', '\x17C0', '\x17BD', '\x3', '\x2', '\x2', '\x2', '\x17C0',
    '\x17BE', '\x3', '\x2', '\x2', '\x2', '\x17C0', '\x17BF', '\x3', '\x2',
    '\x2', '\x2', '\x17C1', '\x17C3', '\x3', '\x2', '\x2', '\x2', '\x17C2',
    '\x17BB', '\x3', '\x2', '\x2', '\x2', '\x17C3', '\x17C6', '\x3', '\x2',
    '\x2', '\x2', '\x17C4', '\x17C2', '\x3', '\x2', '\x2', '\x2', '\x17C4',
    '\x17C5', '\x3', '\x2', '\x2', '\x2', '\x17C5', '\x257', '\x3', '\x2',
    '\x2', '\x2', '\x17C6', '\x17C4', '\x3', '\x2', '\x2', '\x2', '\x17C7',
    '\x17CC', '\x5', '\x21E', '\x110', '\x2', '\x17C8', '\x17CC', '\x5', '\x1F6',
    '\xFC', '\x2', '\x17C9', '\x17CC', '\x5', '\x246', '\x124', '\x2', '\x17CA',
    '\x17CC', '\x5', '\x25A', '\x12E', '\x2', '\x17CB', '\x17C7', '\x3', '\x2',
    '\x2', '\x2', '\x17CB', '\x17C8', '\x3', '\x2', '\x2', '\x2', '\x17CB',
    '\x17C9', '\x3', '\x2', '\x2', '\x2', '\x17CB', '\x17CA', '\x3', '\x2',
    '\x2', '\x2', '\x17CC', '\x259', '\x3', '\x2', '\x2', '\x2', '\x17CD',
    '\x17CE', '\b', '\x12E', '\x1', '\x2', '\x17CE', '\x17CF', '\t', 'r',
    '\x2', '\x2', '\x17CF', '\x17D9', '\x5', '\x25A', '\x12E', '\x6', '\x17D0',
    '\x17D1', '\x5', '\x25C', '\x12F', '\x2', '\x17D1', '\x17D3', '\a', 'Q',
    '\x2', '\x2', '\x17D2', '\x17D4', '\a', 'h', '\x2', '\x2', '\x17D3', '\x17D2',
    '\x3', '\x2', '\x2', '\x2', '\x17D3', '\x17D4', '\x3', '\x2', '\x2', '\x2',
    '\x17D4', '\x17D5', '\x3', '\x2', '\x2', '\x2', '\x17D5', '\x17D6', '\t',
    's', '\x2', '\x2', '\x17D6', '\x17D9', '\x3', '\x2', '\x2', '\x2', '\x17D7',
    '\x17D9', '\x5', '\x25C', '\x12F', '\x2', '\x17D8', '\x17CD', '\x3', '\x2',
    '\x2', '\x2', '\x17D8', '\x17D0', '\x3', '\x2', '\x2', '\x2', '\x17D8',
    '\x17D7', '\x3', '\x2', '\x2', '\x2', '\x17D9', '\x17E0', '\x3', '\x2',
    '\x2', '\x2', '\x17DA', '\x17DB', '\f', '\x5', '\x2', '\x2', '\x17DB',
    '\x17DC', '\x5', '\x264', '\x133', '\x2', '\x17DC', '\x17DD', '\x5', '\x25A',
    '\x12E', '\x6', '\x17DD', '\x17DF', '\x3', '\x2', '\x2', '\x2', '\x17DE',
    '\x17DA', '\x3', '\x2', '\x2', '\x2', '\x17DF', '\x17E2', '\x3', '\x2',
    '\x2', '\x2', '\x17E0', '\x17DE', '\x3', '\x2', '\x2', '\x2', '\x17E0',
    '\x17E1', '\x3', '\x2', '\x2', '\x2', '\x17E1', '\x25B', '\x3', '\x2',
    '\x2', '\x2', '\x17E2', '\x17E0', '\x3', '\x2', '\x2', '\x2', '\x17E3',
    '\x17E6', '\b', '\x12F', '\x1', '\x2', '\x17E4', '\x17E5', '\a', '\x3F2',
    '\x2', '\x2', '\x17E5', '\x17E7', '\a', '\x3BE', '\x2', '\x2', '\x17E6',
    '\x17E4', '\x3', '\x2', '\x2', '\x2', '\x17E6', '\x17E7', '\x3', '\x2',
    '\x2', '\x2', '\x17E7', '\x17E8', '\x3', '\x2', '\x2', '\x2', '\x17E8',
    '\x17E9', '\x5', '\x25E', '\x130', '\x2', '\x17E9', '\x1823', '\x3', '\x2',
    '\x2', '\x2', '\x17EA', '\x17EB', '\f', '\t', '\x2', '\x2', '\x17EB',
    '\x17EC', '\x5', '\x262', '\x132', '\x2', '\x17EC', '\x17ED', '\x5', '\x25C',
    '\x12F', '\n', '\x17ED', '\x1822', '\x3', '\x2', '\x2', '\x2', '\x17EE',
    '\x17F0', '\f', '\a', '\x2', '\x2', '\x17EF', '\x17F1', '\a', 'h', '\x2',
    '\x2', '\x17F0', '\x17EF', '\x3', '\x2', '\x2', '\x2', '\x17F0', '\x17F1',
    '\x3', '\x2', '\x2', '\x2', '\x17F1', '\x17F2', '\x3', '\x2', '\x2', '\x2',
    '\x17F2', '\x17F3', '\a', '\x10', '\x2', '\x2', '\x17F3', '\x17F4', '\x5',
    '\x25C', '\x12F', '\x2', '\x17F4', '\x17F5', '\a', '\f', '\x2', '\x2',
    '\x17F5', '\x17F6', '\x5', '\x25C', '\x12F', '\b', '\x17F6', '\x1822',
    '\x3', '\x2', '\x2', '\x2', '\x17F7', '\x17F8', '\f', '\x6', '\x2', '\x2',
    '\x17F8', '\x17F9', '\a', '\x207', '\x2', '\x2', '\x17F9', '\x17FA', '\a',
    'Z', '\x2', '\x2', '\x17FA', '\x1822', '\x5', '\x25C', '\x12F', '\a',
    '\x17FB', '\x17FD', '\f', '\x4', '\x2', '\x2', '\x17FC', '\x17FE', '\a',
    'h', '\x2', '\x2', '\x17FD', '\x17FC', '\x3', '\x2', '\x2', '\x2', '\x17FD',
    '\x17FE', '\x3', '\x2', '\x2', '\x2', '\x17FE', '\x17FF', '\x3', '\x2',
    '\x2', '\x2', '\x17FF', '\x1800', '\t', 't', '\x2', '\x2', '\x1800', '\x1822',
    '\x5', '\x25C', '\x12F', '\x5', '\x1801', '\x1803', '\f', '\v', '\x2',
    '\x2', '\x1802', '\x1804', '\a', 'h', '\x2', '\x2', '\x1803', '\x1802',
    '\x3', '\x2', '\x2', '\x2', '\x1803', '\x1804', '\x3', '\x2', '\x2', '\x2',
    '\x1804', '\x1805', '\x3', '\x2', '\x2', '\x2', '\x1805', '\x1806', '\a',
    'I', '\x2', '\x2', '\x1806', '\x1809', '\a', '\x3D8', '\x2', '\x2', '\x1807',
    '\x180A', '\x5', '\xB4', '[', '\x2', '\x1808', '\x180A', '\x5', '\x232',
    '\x11A', '\x2', '\x1809', '\x1807', '\x3', '\x2', '\x2', '\x2', '\x1809',
    '\x1808', '\x3', '\x2', '\x2', '\x2', '\x180A', '\x180B', '\x3', '\x2',
    '\x2', '\x2', '\x180B', '\x180C', '\a', '\x3D9', '\x2', '\x2', '\x180C',
    '\x1822', '\x3', '\x2', '\x2', '\x2', '\x180D', '\x180E', '\f', '\n',
    '\x2', '\x2', '\x180E', '\x180F', '\a', 'Q', '\x2', '\x2', '\x180F', '\x1822',
    '\x5', '\x21C', '\x10F', '\x2', '\x1810', '\x1811', '\f', '\b', '\x2',
    '\x2', '\x1811', '\x1812', '\x5', '\x262', '\x132', '\x2', '\x1812', '\x1813',
    '\t', 'u', '\x2', '\x2', '\x1813', '\x1814', '\a', '\x3D8', '\x2', '\x2',
    '\x1814', '\x1815', '\x5', '\xB4', '[', '\x2', '\x1815', '\x1816', '\a',
    '\x3D9', '\x2', '\x2', '\x1816', '\x1822', '\x3', '\x2', '\x2', '\x2',
    '\x1817', '\x1819', '\f', '\x5', '\x2', '\x2', '\x1818', '\x181A', '\a',
    'h', '\x2', '\x2', '\x1819', '\x1818', '\x3', '\x2', '\x2', '\x2', '\x1819',
    '\x181A', '\x3', '\x2', '\x2', '\x2', '\x181A', '\x181B', '\x3', '\x2',
    '\x2', '\x2', '\x181B', '\x181C', '\a', 'Z', '\x2', '\x2', '\x181C', '\x181F',
    '\x5', '\x25C', '\x12F', '\x2', '\x181D', '\x181E', '\a', '\x151', '\x2',
    '\x2', '\x181E', '\x1820', '\a', '\x3E7', '\x2', '\x2', '\x181F', '\x181D',
    '\x3', '\x2', '\x2', '\x2', '\x181F', '\x1820', '\x3', '\x2', '\x2', '\x2',
    '\x1820', '\x1822', '\x3', '\x2', '\x2', '\x2', '\x1821', '\x17EA', '\x3',
    '\x2', '\x2', '\x2', '\x1821', '\x17EE', '\x3', '\x2', '\x2', '\x2', '\x1821',
    '\x17F7', '\x3', '\x2', '\x2', '\x2', '\x1821', '\x17FB', '\x3', '\x2',
    '\x2', '\x2', '\x1821', '\x1801', '\x3', '\x2', '\x2', '\x2', '\x1821',
    '\x180D', '\x3', '\x2', '\x2', '\x2', '\x1821', '\x1810', '\x3', '\x2',
    '\x2', '\x2', '\x1821', '\x1817', '\x3', '\x2', '\x2', '\x2', '\x1822',
    '\x1825', '\x3', '\x2', '\x2', '\x2', '\x1823', '\x1821', '\x3', '\x2',
    '\x2', '\x2', '\x1823', '\x1824', '\x3', '\x2', '\x2', '\x2', '\x1824',
    '\x25D', '\x3', '\x2', '\x2', '\x2', '\x1825', '\x1823', '\x3', '\x2',
    '\x2', '\x2', '\x1826', '\x1827', '\b', '\x130', '\x1', '\x2', '\x1827',
    '\x1854', '\x5', '\x21E', '\x110', '\x2', '\x1828', '\x1854', '\x5', '\x1F6',
    '\xFC', '\x2', '\x1829', '\x1854', '\x5', '\x246', '\x124', '\x2', '\x182A',
    '\x1854', '\x5', '\x1FC', '\xFF', '\x2', '\x182B', '\x182C', '\x5', '\x260',
    '\x131', '\x2', '\x182C', '\x182D', '\x5', '\x25E', '\x130', '\v', '\x182D',
    '\x1854', '\x3', '\x2', '\x2', '\x2', '\x182E', '\x182F', '\a', '\xCA',
    '\x2', '\x2', '\x182F', '\x1854', '\x5', '\x25E', '\x130', '\n', '\x1830',
    '\x1831', '\a', '\x3D8', '\x2', '\x2', '\x1831', '\x1836', '\x5', '\x25A',
    '\x12E', '\x2', '\x1832', '\x1833', '\a', '\x3DA', '\x2', '\x2', '\x1833',
    '\x1835', '\x5', '\x25A', '\x12E', '\x2', '\x1834', '\x1832', '\x3', '\x2',
    '\x2', '\x2', '\x1835', '\x1838', '\x3', '\x2', '\x2', '\x2', '\x1836',
    '\x1834', '\x3', '\x2', '\x2', '\x2', '\x1836', '\x1837', '\x3', '\x2',
    '\x2', '\x2', '\x1837', '\x1839', '\x3', '\x2', '\x2', '\x2', '\x1838',
    '\x1836', '\x3', '\x2', '\x2', '\x2', '\x1839', '\x183A', '\a', '\x3D9',
    '\x2', '\x2', '\x183A', '\x1854', '\x3', '\x2', '\x2', '\x2', '\x183B',
    '\x183C', '\a', '\x1F5', '\x2', '\x2', '\x183C', '\x183D', '\a', '\x3D8',
    '\x2', '\x2', '\x183D', '\x1840', '\x5', '\x25A', '\x12E', '\x2', '\x183E',
    '\x183F', '\a', '\x3DA', '\x2', '\x2', '\x183F', '\x1841', '\x5', '\x25A',
    '\x12E', '\x2', '\x1840', '\x183E', '\x3', '\x2', '\x2', '\x2', '\x1841',
    '\x1842', '\x3', '\x2', '\x2', '\x2', '\x1842', '\x1840', '\x3', '\x2',
    '\x2', '\x2', '\x1842', '\x1843', '\x3', '\x2', '\x2', '\x2', '\x1843',
    '\x1844', '\x3', '\x2', '\x2', '\x2', '\x1844', '\x1845', '\a', '\x3D9',
    '\x2', '\x2', '\x1845', '\x1854', '\x3', '\x2', '\x2', '\x2', '\x1846',
    '\x1847', '\a', '\x37', '\x2', '\x2', '\x1847', '\x1848', '\a', '\x3D8',
    '\x2', '\x2', '\x1848', '\x1849', '\x5', '\xB4', '[', '\x2', '\x1849',
    '\x184A', '\a', '\x3D9', '\x2', '\x2', '\x184A', '\x1854', '\x3', '\x2',
    '\x2', '\x2', '\x184B', '\x184C', '\a', '\x3D8', '\x2', '\x2', '\x184C',
    '\x184D', '\x5', '\xB4', '[', '\x2', '\x184D', '\x184E', '\a', '\x3D9',
    '\x2', '\x2', '\x184E', '\x1854', '\x3', '\x2', '\x2', '\x2', '\x184F',
    '\x1850', '\a', 'O', '\x2', '\x2', '\x1850', '\x1851', '\x5', '\x25A',
    '\x12E', '\x2', '\x1851', '\x1852', '\x5', '<', '\x1F', '\x2', '\x1852',
    '\x1854', '\x3', '\x2', '\x2', '\x2', '\x1853', '\x1826', '\x3', '\x2',
    '\x2', '\x2', '\x1853', '\x1828', '\x3', '\x2', '\x2', '\x2', '\x1853',
    '\x1829', '\x3', '\x2', '\x2', '\x2', '\x1853', '\x182A', '\x3', '\x2',
    '\x2', '\x2', '\x1853', '\x182B', '\x3', '\x2', '\x2', '\x2', '\x1853',
    '\x182E', '\x3', '\x2', '\x2', '\x2', '\x1853', '\x1830', '\x3', '\x2',
    '\x2', '\x2', '\x1853', '\x183B', '\x3', '\x2', '\x2', '\x2', '\x1853',
    '\x1846', '\x3', '\x2', '\x2', '\x2', '\x1853', '\x184B', '\x3', '\x2',
    '\x2', '\x2', '\x1853', '\x184F', '\x3', '\x2', '\x2', '\x2', '\x1854',
    '\x1862', '\x3', '\x2', '\x2', '\x2', '\x1855', '\x1856', '\f', '\x4',
    '\x2', '\x2', '\x1856', '\x1857', '\x5', '\x266', '\x134', '\x2', '\x1857',
    '\x1858', '\x5', '\x25E', '\x130', '\x5', '\x1858', '\x1861', '\x3', '\x2',
    '\x2', '\x2', '\x1859', '\x185A', '\f', '\x3', '\x2', '\x2', '\x185A',
    '\x185B', '\x5', '\x268', '\x135', '\x2', '\x185B', '\x185C', '\x5', '\x25E',
    '\x130', '\x4', '\x185C', '\x1861', '\x3', '\x2', '\x2', '\x2', '\x185D',
    '\x185E', '\f', '\r', '\x2', '\x2', '\x185E', '\x185F', '\a', '\x1A',
    '\x2', '\x2', '\x185F', '\x1861', '\x5', '\x200', '\x101', '\x2', '\x1860',
    '\x1855', '\x3', '\x2', '\x2', '\x2', '\x1860', '\x1859', '\x3', '\x2',
    '\x2', '\x2', '\x1860', '\x185D', '\x3', '\x2', '\x2', '\x2', '\x1861',
    '\x1864', '\x3', '\x2', '\x2', '\x2', '\x1862', '\x1860', '\x3', '\x2',
    '\x2', '\x2', '\x1862', '\x1863', '\x3', '\x2', '\x2', '\x2', '\x1863',
    '\x25F', '\x3', '\x2', '\x2', '\x2', '\x1864', '\x1862', '\x3', '\x2',
    '\x2', '\x2', '\x1865', '\x1866', '\t', 'v', '\x2', '\x2', '\x1866', '\x261',
    '\x3', '\x2', '\x2', '\x2', '\x1867', '\x1876', '\a', '\x3CF', '\x2',
    '\x2', '\x1868', '\x1876', '\a', '\x3D0', '\x2', '\x2', '\x1869', '\x1876',
    '\a', '\x3D1', '\x2', '\x2', '\x186A', '\x186B', '\a', '\x3D1', '\x2',
    '\x2', '\x186B', '\x1876', '\a', '\x3CF', '\x2', '\x2', '\x186C', '\x186D',
    '\a', '\x3D0', '\x2', '\x2', '\x186D', '\x1876', '\a', '\x3CF', '\x2',
    '\x2', '\x186E', '\x186F', '\a', '\x3D1', '\x2', '\x2', '\x186F', '\x1876',
    '\a', '\x3D0', '\x2', '\x2', '\x1870', '\x1871', '\a', '\x3D2', '\x2',
    '\x2', '\x1871', '\x1876', '\a', '\x3CF', '\x2', '\x2', '\x1872', '\x1873',
    '\a', '\x3D1', '\x2', '\x2', '\x1873', '\x1874', '\a', '\x3CF', '\x2',
    '\x2', '\x1874', '\x1876', '\a', '\x3D0', '\x2', '\x2', '\x1875', '\x1867',
    '\x3', '\x2', '\x2', '\x2', '\x1875', '\x1868', '\x3', '\x2', '\x2', '\x2',
    '\x1875', '\x1869', '\x3', '\x2', '\x2', '\x2', '\x1875', '\x186A', '\x3',
    '\x2', '\x2', '\x2', '\x1875', '\x186C', '\x3', '\x2', '\x2', '\x2', '\x1875',
    '\x186E', '\x3', '\x2', '\x2', '\x2', '\x1875', '\x1870', '\x3', '\x2',
    '\x2', '\x2', '\x1875', '\x1872', '\x3', '\x2', '\x2', '\x2', '\x1876',
    '\x263', '\x3', '\x2', '\x2', '\x2', '\x1877', '\x187F', '\a', '\f', '\x2',
    '\x2', '\x1878', '\x1879', '\a', '\x3D5', '\x2', '\x2', '\x1879', '\x187F',
    '\a', '\x3D5', '\x2', '\x2', '\x187A', '\x187F', '\a', '\xB2', '\x2',
    '\x2', '\x187B', '\x187F', '\a', 'p', '\x2', '\x2', '\x187C', '\x187D',
    '\a', '\x3D4', '\x2', '\x2', '\x187D', '\x187F', '\a', '\x3D4', '\x2',
    '\x2', '\x187E', '\x1877', '\x3', '\x2', '\x2', '\x2', '\x187E', '\x1878',
    '\x3', '\x2', '\x2', '\x2', '\x187E', '\x187A', '\x3', '\x2', '\x2', '\x2',
    '\x187E', '\x187B', '\x3', '\x2', '\x2', '\x2', '\x187E', '\x187C', '\x3',
    '\x2', '\x2', '\x2', '\x187F', '\x265', '\x3', '\x2', '\x2', '\x2', '\x1880',
    '\x1881', '\a', '\x3D1', '\x2', '\x2', '\x1881', '\x1888', '\a', '\x3D1',
    '\x2', '\x2', '\x1882', '\x1883', '\a', '\x3D0', '\x2', '\x2', '\x1883',
    '\x1888', '\a', '\x3D0', '\x2', '\x2', '\x1884', '\x1888', '\a', '\x3D5',
    '\x2', '\x2', '\x1885', '\x1888', '\a', '\x3D6', '\x2', '\x2', '\x1886',
    '\x1888', '\a', '\x3D4', '\x2', '\x2', '\x1887', '\x1880', '\x3', '\x2',
    '\x2', '\x2', '\x1887', '\x1882', '\x3', '\x2', '\x2', '\x2', '\x1887',
    '\x1884', '\x3', '\x2', '\x2', '\x2', '\x1887', '\x1885', '\x3', '\x2',
    '\x2', '\x2', '\x1887', '\x1886', '\x3', '\x2', '\x2', '\x2', '\x1888',
    '\x267', '\x3', '\x2', '\x2', '\x2', '\x1889', '\x188A', '\t', 'w', '\x2',
    '\x2', '\x188A', '\x269', '\x3', '\x2', '\x2', '\x2', '\x188B', '\x188C',
    '\t', 'x', '\x2', '\x2', '\x188C', '\x26B', '\x3', '\x2', '\x2', '\x2',
    '\x188D', '\x188E', '\t', 'y', '\x2', '\x2', '\x188E', '\x26D', '\x3',
    '\x2', '\x2', '\x2', '\x188F', '\x1890', '\t', 'z', '\x2', '\x2', '\x1890',
    '\x26F', '\x3', '\x2', '\x2', '\x2', '\x1891', '\x1892', '\t', '{', '\x2',
    '\x2', '\x1892', '\x271', '\x3', '\x2', '\x2', '\x2', '\x1893', '\x1894',
    '\t', '|', '\x2', '\x2', '\x1894', '\x273', '\x3', '\x2', '\x2', '\x2',
    '\x1895', '\x1896', '\t', '}', '\x2', '\x2', '\x1896', '\x275', '\x3',
    '\x2', '\x2', '\x2', '\x1897', '\x1898', '\t', '~', '\x2', '\x2', '\x1898',
    '\x277', '\x3', '\x2', '\x2', '\x2', '\x395', '\x279', '\x27C', '\x282',
    '\x285', '\x288', '\x28A', '\x28F', '\x292', '\x295', '\x29E', '\x2C5',
    '\x2D1', '\x2DC', '\x2ED', '\x2F2', '\x2FE', '\x319', '\x322', '\x327',
    '\x32D', '\x332', '\x336', '\x33F', '\x342', '\x345', '\x349', '\x350',
    '\x353', '\x358', '\x360', '\x365', '\x36A', '\x36D', '\x36F', '\x37B',
    '\x37E', '\x382', '\x385', '\x389', '\x38C', '\x390', '\x393', '\x396',
    '\x39A', '\x39D', '\x3A1', '\x3A7', '\x3AD', '\x3B3', '\x3BA', '\x3C1',
    '\x3C7', '\x3CD', '\x3D6', '\x3DB', '\x3EB', '\x3F2', '\x3F6', '\x400',
    '\x404', '\x408', '\x40C', '\x410', '\x415', '\x418', '\x41B', '\x41E',
    '\x421', '\x427', '\x42B', '\x431', '\x436', '\x439', '\x43C', '\x43E',
    '\x449', '\x44D', '\x450', '\x45E', '\x461', '\x465', '\x468', '\x46C',
    '\x46F', '\x473', '\x476', '\x47A', '\x47D', '\x480', '\x484', '\x487',
    '\x48B', '\x491', '\x49E', '\x4A5', '\x4AA', '\x4AD', '\x4B2', '\x4BA',
    '\x4C0', '\x4C4', '\x4C7', '\x4CC', '\x4CF', '\x4D3', '\x4D6', '\x4DA',
    '\x4DD', '\x4E5', '\x4E7', '\x4EE', '\x4F4', '\x4FC', '\x4FF', '\x506',
    '\x509', '\x50B', '\x511', '\x517', '\x528', '\x52F', '\x536', '\x541',
    '\x544', '\x551', '\x55E', '\x563', '\x573', '\x57B', '\x585', '\x58B',
    '\x595', '\x598', '\x59D', '\x5AA', '\x5B1', '\x5B6', '\x5BA', '\x5BC',
    '\x5C1', '\x5C4', '\x5CA', '\x5CF', '\x5D1', '\x5D5', '\x5D8', '\x5DB',
    '\x5E1', '\x5E6', '\x5E8', '\x5ED', '\x5F4', '\x5F6', '\x5FD', '\x602',
    '\x606', '\x609', '\x611', '\x619', '\x61B', '\x623', '\x627', '\x62A',
    '\x630', '\x635', '\x638', '\x63E', '\x641', '\x645', '\x64A', '\x64F',
    '\x653', '\x658', '\x65B', '\x65F', '\x663', '\x667', '\x66B', '\x670',
    '\x675', '\x67A', '\x680', '\x685', '\x68A', '\x690', '\x695', '\x69A',
    '\x69F', '\x6A4', '\x6A9', '\x6AE', '\x6B3', '\x6B8', '\x6BD', '\x6C2',
    '\x6C8', '\x6CD', '\x6D3', '\x6DD', '\x6E4', '\x6E6', '\x6EE', '\x6F3',
    '\x6F6', '\x6FE', '\x704', '\x714', '\x720', '\x722', '\x725', '\x72D',
    '\x733', '\x739', '\x746', '\x74D', '\x755', '\x758', '\x763', '\x76B',
    '\x76E', '\x77A', '\x781', '\x789', '\x78C', '\x798', '\x79F', '\x7A7',
    '\x7AA', '\x7B1', '\x7B9', '\x7BC', '\x7BE', '\x7C3', '\x7CB', '\x7D4',
    '\x7D8', '\x7DC', '\x7E1', '\x7E7', '\x7ED', '\x7F2', '\x7F7', '\x7FC',
    '\x801', '\x804', '\x809', '\x80E', '\x818', '\x81C', '\x823', '\x828',
    '\x82B', '\x830', '\x833', '\x837', '\x83B', '\x843', '\x856', '\x859',
    '\x85C', '\x860', '\x86A', '\x877', '\x87E', '\x881', '\x88A', '\x88D',
    '\x890', '\x89B', '\x89E', '\x8A2', '\x8AA', '\x8AD', '\x8B2', '\x8BA',
    '\x8C0', '\x8C4', '\x8C8', '\x8CD', '\x8D2', '\x8D9', '\x8DD', '\x8E8',
    '\x8F0', '\x8F3', '\x8F9', '\x8FF', '\x901', '\x906', '\x90C', '\x912',
    '\x914', '\x918', '\x91B', '\x91E', '\x924', '\x92A', '\x92D', '\x933',
    '\x939', '\x93B', '\x940', '\x948', '\x94A', '\x953', '\x958', '\x960',
    '\x964', '\x96C', '\x976', '\x97B', '\x982', '\x986', '\x98A', '\x9A2',
    '\x9A6', '\x9B2', '\x9B5', '\x9BE', '\x9CF', '\x9DB', '\x9E2', '\x9E9',
    '\x9F8', '\xA05', '\xA0B', '\xA11', '\xA17', '\xA1D', '\xA23', '\xA29',
    '\xA2E', '\xA35', '\xA3C', '\xA43', '\xA48', '\xA4B', '\xA4D', '\xA5B',
    '\xA62', '\xA69', '\xA6F', '\xA73', '\xA77', '\xA7E', '\xA81', '\xA86',
    '\xA8D', '\xA94', '\xA98', '\xAA1', '\xAAA', '\xAB3', '\xAB6', '\xABA',
    '\xAC3', '\xAC7', '\xACA', '\xACD', '\xAD5', '\xADB', '\xAE4', '\xAE7',
    '\xAF2', '\xAF5', '\xAFA', '\xAFD', '\xB02', '\xB0C', '\xB11', '\xB17',
    '\xB19', '\xB1F', '\xB21', '\xB27', '\xB2F', '\xB34', '\xB3C', '\xB3F',
    '\xB44', '\xB47', '\xB4C', '\xB54', '\xB5C', '\xB62', '\xB6A', '\xB6F',
    '\xB77', '\xB7A', '\xB7E', '\xB81', '\xB89', '\xB8F', '\xB98', '\xB9B',
    '\xB9F', '\xBA3', '\xBA9', '\xBAD', '\xBB1', '\xBB3', '\xBB6', '\xBB9',
    '\xBBC', '\xBC2', '\xBC6', '\xBC9', '\xBCC', '\xBCF', '\xBD2', '\xBD4',
    '\xBD8', '\xBE6', '\xBE9', '\xBEF', '\xBF3', '\xBFB', '\xBFF', '\xC02',
    '\xC05', '\xC0E', '\xC12', '\xC15', '\xC19', '\xC1D', '\xC20', '\xC23',
    '\xC28', '\xC2E', '\xC32', '\xC3C', '\xC42', '\xC46', '\xC4C', '\xC50',
    '\xC56', '\xC59', '\xC65', '\xC69', '\xC6D', '\xC75', '\xC79', '\xC81',
    '\xC84', '\xC88', '\xC8B', '\xC93', '\xC98', '\xC9B', '\xC9E', '\xCA2',
    '\xCA5', '\xCAE', '\xCB3', '\xCBC', '\xCC1', '\xCC8', '\xCCF', '\xCD7',
    '\xCDC', '\xCE4', '\xCE7', '\xCEA', '\xCF1', '\xCF4', '\xCFB', '\xCFE',
    '\xD06', '\xD0C', '\xD17', '\xD1A', '\xD25', '\xD2B', '\xD2F', '\xD3A',
    '\xD3F', '\xD41', '\xD45', '\xD4F', '\xD59', '\xD5F', '\xD64', '\xD67',
    '\xD6A', '\xD6D', '\xD73', '\xD78', '\xD7B', '\xD7E', '\xD81', '\xD83',
    '\xD89', '\xD8E', '\xD91', '\xD94', '\xD98', '\xD9E', '\xDA2', '\xDAC',
    '\xDB0', '\xDB6', '\xDBF', '\xDC2', '\xDC6', '\xDC9', '\xDCD', '\xDD1',
    '\xDD4', '\xDD6', '\xDDE', '\xDEA', '\xDF0', '\xDF2', '\xDF8', '\xDFA',
    '\xDFC', '\xE02', '\xE0A', '\xE12', '\xE18', '\xE21', '\xE26', '\xE28',
    '\xE2C', '\xE30', '\xE36', '\xE3D', '\xE41', '\xE4A', '\xE4D', '\xE51',
    '\xE55', '\xE59', '\xE5C', '\xE5F', '\xE62', '\xE66', '\xE6A', '\xE6D',
    '\xE70', '\xE73', '\xE7A', '\xE7E', '\xE8D', '\xE9A', '\xEA2', '\xEAC',
    '\xEB0', '\xEB3', '\xEB9', '\xEBC', '\xEBF', '\xEC8', '\xED1', '\xEDB',
    '\xEDF', '\xEE9', '\xEF3', '\xEFB', '\xEFE', '\xF07', '\xF0A', '\xF0E',
    '\xF13', '\xF17', '\xF20', '\xF23', '\xF42', '\xF45', '\xF48', '\xF80',
    '\xF85', '\xFA1', '\xFAF', '\xFB6', '\xFBA', '\xFC0', '\xFC8', '\xFCA',
    '\xFD5', '\xFDF', '\xFE6', '\xFEC', '\xFF4', '\xFF9', '\x1001', '\x1009',
    '\x1011', '\x1019', '\x101F', '\x1022', '\x1026', '\x102B', '\x1030',
    '\x1036', '\x1038', '\x1043', '\x1048', '\x104F', '\x1051', '\x105F',
    '\x1065', '\x106A', '\x106F', '\x1075', '\x107C', '\x1084', '\x108C',
    '\x1091', '\x1097', '\x109A', '\x10A2', '\x10A9', '\x10B2', '\x10B5',
    '\x10C6', '\x10CE', '\x10D6', '\x10DA', '\x10E1', '\x10E7', '\x10EF',
    '\x10F8', '\x10FE', '\x1105', '\x110C', '\x1111', '\x1114', '\x1116',
    '\x111C', '\x111E', '\x1122', '\x1124', '\x1127', '\x1130', '\x1136',
    '\x113D', '\x1144', '\x1149', '\x114C', '\x114E', '\x1154', '\x1156',
    '\x115A', '\x115C', '\x115F', '\x1164', '\x116B', '\x1174', '\x1179',
    '\x1182', '\x1189', '\x118E', '\x1191', '\x1193', '\x1199', '\x119B',
    '\x119E', '\x11AA', '\x11B0', '\x11B9', '\x11C2', '\x11C7', '\x11D0',
    '\x11D6', '\x11E1', '\x11E4', '\x11F0', '\x11F7', '\x11FC', '\x120B',
    '\x1216', '\x1219', '\x1223', '\x122D', '\x1237', '\x1241', '\x1245',
    '\x1249', '\x1252', '\x126E', '\x1280', '\x1288', '\x1293', '\x129A',
    '\x129E', '\x12A5', '\x12AA', '\x12AD', '\x12B0', '\x12B9', '\x12BD',
    '\x12DB', '\x12E2', '\x12E6', '\x12ED', '\x12F0', '\x12FA', '\x1304',
    '\x1308', '\x130E', '\x1311', '\x1316', '\x131A', '\x1321', '\x1324',
    '\x132A', '\x1342', '\x134F', '\x1352', '\x135C', '\x1364', '\x1368',
    '\x136F', '\x1372', '\x137B', '\x1381', '\x1387', '\x1391', '\x1393',
    '\x1399', '\x139C', '\x139F', '\x13AB', '\x13AE', '\x13B4', '\x13B7',
    '\x13BF', '\x13C7', '\x13CD', '\x13D1', '\x13DF', '\x13EB', '\x13F2',
    '\x13F5', '\x13FC', '\x1403', '\x1408', '\x140D', '\x1418', '\x1423',
    '\x1429', '\x142E', '\x143B', '\x143D', '\x1442', '\x1447', '\x1449',
    '\x1450', '\x1457', '\x145A', '\x145D', '\x1463', '\x1467', '\x146D',
    '\x1473', '\x1480', '\x1485', '\x148D', '\x1490', '\x1495', '\x149A',
    '\x14A2', '\x14A5', '\x14AB', '\x14AF', '\x14BC', '\x14C2', '\x14CE',
    '\x14D1', '\x14DA', '\x14DF', '\x14E5', '\x14EC', '\x14EE', '\x14F2',
    '\x14F8', '\x14FB', '\x1505', '\x1509', '\x151D', '\x1524', '\x1526',
    '\x152D', '\x152F', '\x1533', '\x1538', '\x1543', '\x1548', '\x154E',
    '\x1551', '\x1555', '\x155A', '\x155D', '\x1561', '\x1565', '\x1567',
    '\x156C', '\x1571', '\x157E', '\x1581', '\x1585', '\x1588', '\x158D',
    '\x1590', '\x1594', '\x1599', '\x159C', '\x15A1', '\x15A4', '\x15AA',
    '\x15AD', '\x15B1', '\x15B4', '\x15B7', '\x15BB', '\x15BE', '\x15C1',
    '\x15C5', '\x15C8', '\x15CB', '\x15CE', '\x15D2', '\x15D5', '\x15D8',
    '\x15DD', '\x15E2', '\x15E7', '\x15EA', '\x15ED', '\x15F5', '\x15FC',
    '\x1600', '\x1605', '\x1608', '\x160D', '\x1611', '\x1613', '\x1623',
    '\x162C', '\x1634', '\x163D', '\x1647', '\x164F', '\x1657', '\x165F',
    '\x1667', '\x166C', '\x1673', '\x1675', '\x167A', '\x167D', '\x1682',
    '\x1685', '\x1689', '\x1697', '\x169E', '\x16A3', '\x16C5', '\x16C9',
    '\x16D1', '\x16D5', '\x16DE', '\x16E6', '\x16EB', '\x16F3', '\x16F8',
    '\x16FD', '\x16FF', '\x1708', '\x170D', '\x1715', '\x171A', '\x1722',
    '\x172A', '\x172D', '\x1737', '\x1742', '\x174F', '\x1757', '\x175B',
    '\x1760', '\x1769', '\x176C', '\x1778', '\x1780', '\x178A', '\x178D',
    '\x1791', '\x1795', '\x17AE', '\x17B9', '\x17C0', '\x17C4', '\x17CB',
    '\x17D3', '\x17D8', '\x17E0', '\x17E6', '\x17F0', '\x17FD', '\x1803',
    '\x1809', '\x1819', '\x181F', '\x1821', '\x1823', '\x1836', '\x1842',
    '\x1853', '\x1860', '\x1862', '\x1875', '\x187E', '\x1887',
};

    public static readonly ATN _ATN =
        new ATNDeserializer().Deserialize(_serializedATN);


}

